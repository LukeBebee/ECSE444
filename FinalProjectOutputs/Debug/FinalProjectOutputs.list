
FinalProjectOutputs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b954  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eec  0800bb18  0800bb18  0001bb18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca04  0800ca04  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca04  0800ca04  0001ca04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca0c  0800ca0c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca0c  0800ca0c  0001ca0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca10  0800ca10  0001ca10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800ca14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  200001f0  0800cc04  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800cc04  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cd7  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e09  00000000  00000000  00038ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  0003bd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003cf78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca1c  00000000  00000000  0003e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166dd  00000000  00000000  0006aadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111815  00000000  00000000  000811b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001929ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066d0  00000000  00000000  00192a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00199164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bafc 	.word	0x0800bafc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	0800bafc 	.word	0x0800bafc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f960 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f80d 	bl	8001058 <HAL_InitTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104a:	f004 ff6d 	bl	8005f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_InitTick+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f96d 	bl	8001362 <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10f      	bne.n	80010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d809      	bhi.n	80010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f000 f937 	bl	800130e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_InitTick+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e001      	b.n	80010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000004 	.word	0x20000004
 80010c8:	20000018 	.word	0x20000018
 80010cc:	20000000 	.word	0x20000000

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	2000020c 	.word	0x2000020c

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	2000020c 	.word	0x2000020c

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000004 	.word	0x20000004

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff3e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff8e 	bl	800124c <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5d 	bl	80011f8 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff31 	bl	80011bc <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e014      	b.n	80013b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f004 fde7 	bl	8005f70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2201      	movs	r2, #1
 80013b2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	795b      	ldrb	r3, [r3, #5]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_DAC_Start_DMA+0x1e>
 80013da:	2302      	movs	r3, #2
 80013dc:	e0ab      	b.n	8001536 <HAL_DAC_Start_DMA+0x176>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2202      	movs	r2, #2
 80013e8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d12f      	bne.n	8001450 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <HAL_DAC_Start_DMA+0x180>)
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a51      	ldr	r2, [pc, #324]	; (8001544 <HAL_DAC_Start_DMA+0x184>)
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a50      	ldr	r2, [pc, #320]	; (8001548 <HAL_DAC_Start_DMA+0x188>)
 8001406:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001416:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	2b08      	cmp	r3, #8
 800141c:	d013      	beq.n	8001446 <HAL_DAC_Start_DMA+0x86>
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	2b08      	cmp	r3, #8
 8001422:	d845      	bhi.n	80014b0 <HAL_DAC_Start_DMA+0xf0>
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_DAC_Start_DMA+0x72>
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	2b04      	cmp	r3, #4
 800142e:	d005      	beq.n	800143c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001430:	e03e      	b.n	80014b0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3308      	adds	r3, #8
 8001438:	613b      	str	r3, [r7, #16]
        break;
 800143a:	e03c      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	330c      	adds	r3, #12
 8001442:	613b      	str	r3, [r7, #16]
        break;
 8001444:	e037      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3310      	adds	r3, #16
 800144c:	613b      	str	r3, [r7, #16]
        break;
 800144e:	e032      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4a3d      	ldr	r2, [pc, #244]	; (800154c <HAL_DAC_Start_DMA+0x18c>)
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a3c      	ldr	r2, [pc, #240]	; (8001550 <HAL_DAC_Start_DMA+0x190>)
 800145e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a3b      	ldr	r2, [pc, #236]	; (8001554 <HAL_DAC_Start_DMA+0x194>)
 8001466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001476:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	2b08      	cmp	r3, #8
 800147c:	d013      	beq.n	80014a6 <HAL_DAC_Start_DMA+0xe6>
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d817      	bhi.n	80014b4 <HAL_DAC_Start_DMA+0xf4>
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_DAC_Start_DMA+0xd2>
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2b04      	cmp	r3, #4
 800148e:	d005      	beq.n	800149c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001490:	e010      	b.n	80014b4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3314      	adds	r3, #20
 8001498:	613b      	str	r3, [r7, #16]
        break;
 800149a:	e00c      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3318      	adds	r3, #24
 80014a2:	613b      	str	r3, [r7, #16]
        break;
 80014a4:	e007      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	331c      	adds	r3, #28
 80014ac:	613b      	str	r3, [r7, #16]
        break;
 80014ae:	e002      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80014b0:	bf00      	nop
 80014b2:	e000      	b.n	80014b6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80014b4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d111      	bne.n	80014e0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6898      	ldr	r0, [r3, #8]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	f000 fb15 	bl	8001b04 <HAL_DMA_Start_IT>
 80014da:	4603      	mov	r3, r0
 80014dc:	75fb      	strb	r3, [r7, #23]
 80014de:	e010      	b.n	8001502 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	68d8      	ldr	r0, [r3, #12]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	f000 fb03 	bl	8001b04 <HAL_DMA_Start_IT>
 80014fe:	4603      	mov	r3, r0
 8001500:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001508:	7dfb      	ldrb	r3, [r7, #23]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6819      	ldr	r1, [r3, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2201      	movs	r2, #1
 800151c:	409a      	lsls	r2, r3
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e005      	b.n	8001534 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	f043 0204 	orr.w	r2, r3, #4
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001534:	7dfb      	ldrb	r3, [r7, #23]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	080018a1 	.word	0x080018a1
 8001544:	080018c3 	.word	0x080018c3
 8001548:	080018df 	.word	0x080018df
 800154c:	08001949 	.word	0x08001949
 8001550:	0800196b 	.word	0x0800196b
 8001554:	08001987 	.word	0x08001987

08001558 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6819      	ldr	r1, [r3, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	400a      	ands	r2, r1
 800157e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6819      	ldr	r1, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	f003 0310 	and.w	r3, r3, #16
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d10d      	bne.n	80015be <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 fb27 	bl	8001bfa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e00c      	b.n	80015d8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fb19 	bl	8001bfa <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80015d6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	795b      	ldrb	r3, [r3, #5]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_DAC_ConfigChannel+0x1c>
 8001638:	2302      	movs	r3, #2
 800163a:	e12a      	b.n	8001892 <HAL_DAC_ConfigChannel+0x272>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2201      	movs	r2, #1
 8001640:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2202      	movs	r2, #2
 8001646:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d174      	bne.n	800173a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001650:	f7ff fd52 	bl	80010f8 <HAL_GetTick>
 8001654:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d134      	bne.n	80016c6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800165c:	e011      	b.n	8001682 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800165e:	f7ff fd4b 	bl	80010f8 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d90a      	bls.n	8001682 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f043 0208 	orr.w	r2, r3, #8
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2203      	movs	r2, #3
 800167c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e107      	b.n	8001892 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e6      	bne.n	800165e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fd3d 	bl	8001110 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	69d2      	ldr	r2, [r2, #28]
 800169e:	641a      	str	r2, [r3, #64]	; 0x40
 80016a0:	e01e      	b.n	80016e0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016a2:	f7ff fd29 	bl	80010f8 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d90a      	bls.n	80016c6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f043 0208 	orr.w	r2, r3, #8
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2203      	movs	r2, #3
 80016c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e0e5      	b.n	8001892 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dbe8      	blt.n	80016a2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fd1d 	bl	8001110 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	69d2      	ldr	r2, [r2, #28]
 80016de:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	ea02 0103 	and.w	r1, r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	6a1a      	ldr	r2, [r3, #32]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	409a      	lsls	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	21ff      	movs	r1, #255	; 0xff
 800171c:	fa01 f303 	lsl.w	r3, r1, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	ea02 0103 	and.w	r1, r2, r3
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	409a      	lsls	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d11d      	bne.n	800177e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	4013      	ands	r3, r2
 800175c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	4313      	orrs	r3, r2
 8001774:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001784:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	2207      	movs	r2, #7
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	4013      	ands	r3, r2
 8001798:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	431a      	orrs	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6819      	ldr	r1, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	4013      	ands	r3, r2
 8001800:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	4313      	orrs	r3, r2
 8001818:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001822:	d104      	bne.n	800182e <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800182a:	61fb      	str	r3, [r7, #28]
 800182c:	e018      	b.n	8001860 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d104      	bne.n	8001840 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e00f      	b.n	8001860 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001840:	f001 fc06 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8001844:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <HAL_DAC_ConfigChannel+0x27c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d904      	bls.n	8001858 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e003      	b.n	8001860 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800185e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6819      	ldr	r1, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f003 0310 	and.w	r3, r3, #16
 8001874:	22c0      	movs	r2, #192	; 0xc0
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	400a      	ands	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2201      	movs	r2, #1
 8001888:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3720      	adds	r7, #32
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	04c4b400 	.word	0x04c4b400

080018a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f7ff fe97 	bl	80015e2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2201      	movs	r2, #1
 80018b8:	711a      	strb	r2, [r3, #4]
}
 80018ba:	bf00      	nop
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fe90 	bl	80015f6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f043 0204 	orr.w	r2, r3, #4
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff fe86 	bl	800160a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	711a      	strb	r2, [r3, #4]
}
 8001904:	bf00      	nop
 8001906:	3710      	adds	r7, #16
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff ffd8 	bl	800190c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2201      	movs	r2, #1
 8001960:	711a      	strb	r2, [r3, #4]
}
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f7ff ffd1 	bl	8001920 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	f043 0204 	orr.w	r2, r3, #4
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80019a0:	68f8      	ldr	r0, [r7, #12]
 80019a2:	f7ff ffc7 	bl	8001934 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2201      	movs	r2, #1
 80019aa:	711a      	strb	r2, [r3, #4]
}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e08d      	b.n	8001ae2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_DMA_Init+0x138>)
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d80f      	bhi.n	80019f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <HAL_DMA_Init+0x13c>)
 80019da:	4413      	add	r3, r2
 80019dc:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <HAL_DMA_Init+0x140>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a42      	ldr	r2, [pc, #264]	; (8001af8 <HAL_DMA_Init+0x144>)
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40
 80019f0:	e00e      	b.n	8001a10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	4b40      	ldr	r3, [pc, #256]	; (8001afc <HAL_DMA_Init+0x148>)
 80019fa:	4413      	add	r3, r2
 80019fc:	4a3d      	ldr	r2, [pc, #244]	; (8001af4 <HAL_DMA_Init+0x140>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	009a      	lsls	r2, r3, #2
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a3c      	ldr	r2, [pc, #240]	; (8001b00 <HAL_DMA_Init+0x14c>)
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fa12 	bl	8001e8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a70:	d102      	bne.n	8001a78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a8c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <HAL_DMA_Init+0x104>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d80c      	bhi.n	8001ab8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fa32 	bl	8001f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	e008      	b.n	8001aca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40020407 	.word	0x40020407
 8001af0:	bffdfff8 	.word	0xbffdfff8
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	40020000 	.word	0x40020000
 8001afc:	bffdfbf8 	.word	0xbffdfbf8
 8001b00:	40020400 	.word	0x40020400

08001b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_DMA_Start_IT+0x20>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e066      	b.n	8001bf2 <HAL_DMA_Start_IT+0xee>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d155      	bne.n	8001be4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0201 	bic.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f000 f957 	bl	8001e10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 020e 	orr.w	r2, r2, #14
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00f      	b.n	8001b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 020a 	orr.w	r2, r2, #10
 8001b9a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bb8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	e005      	b.n	8001bf0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
 8001bee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b085      	sub	sp, #20
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d008      	beq.n	8001c24 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2204      	movs	r2, #4
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e040      	b.n	8001ca6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 020e 	bic.w	r2, r2, #14
 8001c32:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c42:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	f003 021c 	and.w	r2, r3, #28
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f202 	lsl.w	r2, r1, r2
 8001c66:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c92:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f003 031c 	and.w	r3, r3, #28
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d026      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x7a>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d021      	beq.n	8001d2c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0204 	bic.w	r2, r2, #4
 8001d04:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	f003 021c 	and.w	r2, r3, #28
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2104      	movs	r1, #4
 8001d14:	fa01 f202 	lsl.w	r2, r1, r2
 8001d18:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d071      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001d2a:	e06c      	b.n	8001e06 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f003 031c 	and.w	r3, r3, #28
 8001d34:	2202      	movs	r2, #2
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d02e      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xec>
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d029      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10b      	bne.n	8001d70 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020a 	bic.w	r2, r2, #10
 8001d66:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f003 021c 	and.w	r2, r3, #28
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d82:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d038      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d9c:	e033      	b.n	8001e06 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f003 031c 	and.w	r3, r3, #28
 8001da6:	2208      	movs	r2, #8
 8001da8:	409a      	lsls	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02a      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x156>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d025      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 020e 	bic.w	r2, r2, #14
 8001dca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f003 021c 	and.w	r2, r3, #28
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	2101      	movs	r1, #1
 8001dda:	fa01 f202 	lsl.w	r2, r1, r2
 8001dde:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e06:	bf00      	nop
 8001e08:	bf00      	nop
}
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e26:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e38:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f003 021c 	and.w	r2, r3, #28
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2101      	movs	r1, #1
 8001e48:	fa01 f202 	lsl.w	r2, r1, r2
 8001e4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d108      	bne.n	8001e70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e6e:	e007      	b.n	8001e80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]
}
 8001e80:	bf00      	nop
 8001e82:	3714      	adds	r7, #20
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d80a      	bhi.n	8001eb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6493      	str	r3, [r2, #72]	; 0x48
 8001eb4:	e007      	b.n	8001ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	009a      	lsls	r2, r3, #2
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3b08      	subs	r3, #8
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001edc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	409a      	lsls	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40020407 	.word	0x40020407
 8001efc:	4002081c 	.word	0x4002081c
 8001f00:	cccccccd 	.word	0xcccccccd
 8001f04:	40020880 	.word	0x40020880

08001f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	461a      	mov	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a08      	ldr	r2, [pc, #32]	; (8001f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2201      	movs	r2, #1
 8001f36:	409a      	lsls	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	1000823f 	.word	0x1000823f
 8001f4c:	40020940 	.word	0x40020940

08001f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	e166      	b.n	800222e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2101      	movs	r1, #1
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 8158 	beq.w	8002228 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d005      	beq.n	8001f90 <HAL_GPIO_Init+0x40>
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d130      	bne.n	8001ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	2203      	movs	r2, #3
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	091b      	lsrs	r3, r3, #4
 8001fdc:	f003 0201 	and.w	r2, r3, #1
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d017      	beq.n	800202e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4013      	ands	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d123      	bne.n	8002082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	08da      	lsrs	r2, r3, #3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3208      	adds	r2, #8
 8002042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	08da      	lsrs	r2, r3, #3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3208      	adds	r2, #8
 800207c:	6939      	ldr	r1, [r7, #16]
 800207e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2203      	movs	r2, #3
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4013      	ands	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0203 	and.w	r2, r3, #3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80b2 	beq.w	8002228 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c4:	4b61      	ldr	r3, [pc, #388]	; (800224c <HAL_GPIO_Init+0x2fc>)
 80020c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c8:	4a60      	ldr	r2, [pc, #384]	; (800224c <HAL_GPIO_Init+0x2fc>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6613      	str	r3, [r2, #96]	; 0x60
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <HAL_GPIO_Init+0x2fc>)
 80020d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020dc:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <HAL_GPIO_Init+0x300>)
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	3302      	adds	r3, #2
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002106:	d02b      	beq.n	8002160 <HAL_GPIO_Init+0x210>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a52      	ldr	r2, [pc, #328]	; (8002254 <HAL_GPIO_Init+0x304>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d025      	beq.n	800215c <HAL_GPIO_Init+0x20c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a51      	ldr	r2, [pc, #324]	; (8002258 <HAL_GPIO_Init+0x308>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d01f      	beq.n	8002158 <HAL_GPIO_Init+0x208>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a50      	ldr	r2, [pc, #320]	; (800225c <HAL_GPIO_Init+0x30c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d019      	beq.n	8002154 <HAL_GPIO_Init+0x204>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a4f      	ldr	r2, [pc, #316]	; (8002260 <HAL_GPIO_Init+0x310>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d013      	beq.n	8002150 <HAL_GPIO_Init+0x200>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a4e      	ldr	r2, [pc, #312]	; (8002264 <HAL_GPIO_Init+0x314>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00d      	beq.n	800214c <HAL_GPIO_Init+0x1fc>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a4d      	ldr	r2, [pc, #308]	; (8002268 <HAL_GPIO_Init+0x318>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d007      	beq.n	8002148 <HAL_GPIO_Init+0x1f8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_GPIO_Init+0x31c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_GPIO_Init+0x1f4>
 8002140:	2307      	movs	r3, #7
 8002142:	e00e      	b.n	8002162 <HAL_GPIO_Init+0x212>
 8002144:	2308      	movs	r3, #8
 8002146:	e00c      	b.n	8002162 <HAL_GPIO_Init+0x212>
 8002148:	2306      	movs	r3, #6
 800214a:	e00a      	b.n	8002162 <HAL_GPIO_Init+0x212>
 800214c:	2305      	movs	r3, #5
 800214e:	e008      	b.n	8002162 <HAL_GPIO_Init+0x212>
 8002150:	2304      	movs	r3, #4
 8002152:	e006      	b.n	8002162 <HAL_GPIO_Init+0x212>
 8002154:	2303      	movs	r3, #3
 8002156:	e004      	b.n	8002162 <HAL_GPIO_Init+0x212>
 8002158:	2302      	movs	r3, #2
 800215a:	e002      	b.n	8002162 <HAL_GPIO_Init+0x212>
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_GPIO_Init+0x212>
 8002160:	2300      	movs	r3, #0
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	f002 0203 	and.w	r2, r2, #3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4093      	lsls	r3, r2
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002172:	4937      	ldr	r1, [pc, #220]	; (8002250 <HAL_GPIO_Init+0x300>)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_GPIO_Init+0x320>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021a4:	4a32      	ldr	r2, [pc, #200]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ce:	4a28      	ldr	r2, [pc, #160]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021d4:	4b26      	ldr	r3, [pc, #152]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021f8:	4a1d      	ldr	r2, [pc, #116]	; (8002270 <HAL_GPIO_Init+0x320>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_GPIO_Init+0x320>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002222:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_GPIO_Init+0x320>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	3301      	adds	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	f47f ae91 	bne.w	8001f60 <HAL_GPIO_Init+0x10>
  }
}
 800223e:	bf00      	nop
 8002240:	bf00      	nop
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000
 8002250:	40010000 	.word	0x40010000
 8002254:	48000400 	.word	0x48000400
 8002258:	48000800 	.word	0x48000800
 800225c:	48000c00 	.word	0x48000c00
 8002260:	48001000 	.word	0x48001000
 8002264:	48001400 	.word	0x48001400
 8002268:	48001800 	.word	0x48001800
 800226c:	48001c00 	.word	0x48001c00
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002290:	e002      	b.n	8002298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	4013      	ands	r3, r2
 80022bc:	041a      	lsls	r2, r3, #16
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	43d9      	mvns	r1, r3
 80022c2:	887b      	ldrh	r3, [r7, #2]
 80022c4:	400b      	ands	r3, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80022e2:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d006      	beq.n	80022fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 ffa8 	bl	800524c <HAL_GPIO_EXTI_Callback>
  }
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_PWREx_GetVoltageRange+0x3c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002318:	d102      	bne.n	8002320 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800231a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800231e:	e00b      	b.n	8002338 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800232e:	d102      	bne.n	8002336 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002334:	e000      	b.n	8002338 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002336:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40007000 	.word	0x40007000

08002348 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d141      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800235e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002362:	d131      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002364:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800236a:	4a46      	ldr	r2, [pc, #280]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2232      	movs	r2, #50	; 0x32
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a3f      	ldr	r2, [pc, #252]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	0c9b      	lsrs	r3, r3, #18
 8002396:	3301      	adds	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239a:	e002      	b.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3b01      	subs	r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023a2:	4b38      	ldr	r3, [pc, #224]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d102      	bne.n	80023b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f2      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c2:	d158      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e057      	b.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c8:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ce:	4a2d      	ldr	r2, [pc, #180]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023d8:	e04d      	b.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e0:	d141      	bne.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d131      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023f6:	4a23      	ldr	r2, [pc, #140]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002408:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800240a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800240e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2232      	movs	r2, #50	; 0x32
 8002416:	fb02 f303 	mul.w	r3, r2, r3
 800241a:	4a1c      	ldr	r2, [pc, #112]	; (800248c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	0c9b      	lsrs	r3, r3, #18
 8002422:	3301      	adds	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002426:	e002      	b.n	800242e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3b01      	subs	r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d102      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f2      	bne.n	8002428 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d112      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e011      	b.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002464:	e007      	b.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002474:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40007000 	.word	0x40007000
 8002488:	20000018 	.word	0x20000018
 800248c:	431bde83 	.word	0x431bde83

08002490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b088      	sub	sp, #32
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	f000 bc08 	b.w	8002cb4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a4:	4b96      	ldr	r3, [pc, #600]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ae:	4b94      	ldr	r3, [pc, #592]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80e4 	beq.w	800268e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_RCC_OscConfig+0x4c>
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	f040 808b 	bne.w	80025ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f040 8087 	bne.w	80025ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x64>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e3df      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1a      	ldr	r2, [r3, #32]
 80024f8:	4b81      	ldr	r3, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_RCC_OscConfig+0x7e>
 8002504:	4b7e      	ldr	r3, [pc, #504]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800250c:	e005      	b.n	800251a <HAL_RCC_OscConfig+0x8a>
 800250e:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800251a:	4293      	cmp	r3, r2
 800251c:	d223      	bcs.n	8002566 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fdcc 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e3c0      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002538:	f043 0308 	orr.w	r3, r3, #8
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	496d      	ldr	r1, [pc, #436]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	4968      	ldr	r1, [pc, #416]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
 8002564:	e025      	b.n	80025b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002566:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a65      	ldr	r2, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800256c:	f043 0308 	orr.w	r3, r3, #8
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	4960      	ldr	r1, [pc, #384]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002584:	4b5e      	ldr	r3, [pc, #376]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	495b      	ldr	r1, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fd8c 	bl	80030c0 <RCC_SetFlashLatencyFromMSIRange>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e380      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b2:	f000 fcc1 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b51      	ldr	r3, [pc, #324]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	4950      	ldr	r1, [pc, #320]	; (8002704 <HAL_RCC_OscConfig+0x274>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a4e      	ldr	r2, [pc, #312]	; (8002708 <HAL_RCC_OscConfig+0x278>)
 80025d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025d2:	4b4e      	ldr	r3, [pc, #312]	; (800270c <HAL_RCC_OscConfig+0x27c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fd3e 	bl	8001058 <HAL_InitTick>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d052      	beq.n	800268c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	e364      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d032      	beq.n	8002658 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a42      	ldr	r2, [pc, #264]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025fe:	f7fe fd7b 	bl	80010f8 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002606:	f7fe fd77 	bl	80010f8 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e34d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002618:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a35      	ldr	r2, [pc, #212]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800262a:	f043 0308 	orr.w	r3, r3, #8
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4930      	ldr	r1, [pc, #192]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002642:	4b2f      	ldr	r3, [pc, #188]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	492b      	ldr	r1, [pc, #172]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002652:	4313      	orrs	r3, r2
 8002654:	604b      	str	r3, [r1, #4]
 8002656:	e01a      	b.n	800268e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a28      	ldr	r2, [pc, #160]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002664:	f7fe fd48 	bl	80010f8 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800266c:	f7fe fd44 	bl	80010f8 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e31a      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1dc>
 800268a:	e000      	b.n	800268e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800268c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d073      	beq.n	8002782 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x21c>
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d10e      	bne.n	80026c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ac:	4b14      	ldr	r3, [pc, #80]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d063      	beq.n	8002780 <HAL_RCC_OscConfig+0x2f0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d15f      	bne.n	8002780 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e2f7      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d106      	bne.n	80026dc <HAL_RCC_OscConfig+0x24c>
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e025      	b.n	8002728 <HAL_RCC_OscConfig+0x298>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e4:	d114      	bne.n	8002710 <HAL_RCC_OscConfig+0x280>
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a02      	ldr	r2, [pc, #8]	; (8002700 <HAL_RCC_OscConfig+0x270>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e013      	b.n	8002728 <HAL_RCC_OscConfig+0x298>
 8002700:	40021000 	.word	0x40021000
 8002704:	0800bcf4 	.word	0x0800bcf4
 8002708:	20000018 	.word	0x20000018
 800270c:	20000000 	.word	0x20000000
 8002710:	4ba0      	ldr	r3, [pc, #640]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a9f      	ldr	r2, [pc, #636]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b9d      	ldr	r3, [pc, #628]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a9c      	ldr	r2, [pc, #624]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fce2 	bl	80010f8 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fcde 	bl	80010f8 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e2b4      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800274a:	4b92      	ldr	r3, [pc, #584]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x2a8>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7fe fcce 	bl	80010f8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002760:	f7fe fcca 	bl	80010f8 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b64      	cmp	r3, #100	; 0x64
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e2a0      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002772:	4b88      	ldr	r3, [pc, #544]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x2d0>
 800277e:	e000      	b.n	8002782 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d060      	beq.n	8002850 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_OscConfig+0x310>
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d119      	bne.n	80027ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d116      	bne.n	80027ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a0:	4b7c      	ldr	r3, [pc, #496]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_OscConfig+0x328>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e27d      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b8:	4b76      	ldr	r3, [pc, #472]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	4973      	ldr	r1, [pc, #460]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	e040      	b.n	8002850 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d023      	beq.n	800281e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d6:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a6e      	ldr	r2, [pc, #440]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fc89 	bl	80010f8 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7fe fc85 	bl	80010f8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e25b      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fc:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b62      	ldr	r3, [pc, #392]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	495f      	ldr	r1, [pc, #380]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e018      	b.n	8002850 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a5c      	ldr	r2, [pc, #368]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7fe fc65 	bl	80010f8 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002832:	f7fe fc61 	bl	80010f8 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e237      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d03c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01c      	beq.n	800289e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286a:	4a4a      	ldr	r2, [pc, #296]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fc40 	bl	80010f8 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe fc3c 	bl	80010f8 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e212      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800288e:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ef      	beq.n	800287c <HAL_RCC_OscConfig+0x3ec>
 800289c:	e01b      	b.n	80028d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a4:	4a3b      	ldr	r2, [pc, #236]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ae:	f7fe fc23 	bl	80010f8 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fc1f 	bl	80010f8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e1f5      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80028ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ef      	bne.n	80028b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80a6 	beq.w	8002a30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028e8:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10d      	bne.n	8002910 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	4a26      	ldr	r2, [pc, #152]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290c:	2301      	movs	r3, #1
 800290e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_OscConfig+0x508>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_OscConfig+0x508>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <HAL_RCC_OscConfig+0x508>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002928:	f7fe fbe6 	bl	80010f8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002930:	f7fe fbe2 	bl	80010f8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1b8      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x508>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d108      	bne.n	8002968 <HAL_RCC_OscConfig+0x4d8>
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002966:	e029      	b.n	80029bc <HAL_RCC_OscConfig+0x52c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b05      	cmp	r3, #5
 800296e:	d115      	bne.n	800299c <HAL_RCC_OscConfig+0x50c>
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002980:	4b04      	ldr	r3, [pc, #16]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	4a03      	ldr	r2, [pc, #12]	; (8002994 <HAL_RCC_OscConfig+0x504>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002990:	e014      	b.n	80029bc <HAL_RCC_OscConfig+0x52c>
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
 800299c:	4b9d      	ldr	r3, [pc, #628]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a9c      	ldr	r2, [pc, #624]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ac:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a98      	ldr	r2, [pc, #608]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d016      	beq.n	80029f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c4:	f7fe fb98 	bl	80010f8 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7fe fb94 	bl	80010f8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e168      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e2:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 80029e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ed      	beq.n	80029cc <HAL_RCC_OscConfig+0x53c>
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7fe fb81 	bl	80010f8 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fb7d 	bl	80010f8 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e151      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a10:	4b80      	ldr	r3, [pc, #512]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1ed      	bne.n	80029fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a24:	4b7b      	ldr	r3, [pc, #492]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a28:	4a7a      	ldr	r2, [pc, #488]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01c      	beq.n	8002a7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a44:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a4a:	4a72      	ldr	r2, [pc, #456]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a54:	f7fe fb50 	bl	80010f8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a5c:	f7fe fb4c 	bl	80010f8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e122      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a6e:	4b69      	ldr	r3, [pc, #420]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <HAL_RCC_OscConfig+0x5cc>
 8002a7c:	e01b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a84:	4a63      	ldr	r2, [pc, #396]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fb33 	bl	80010f8 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a96:	f7fe fb2f 	bl	80010f8 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e105      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002aa8:	4b5a      	ldr	r3, [pc, #360]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1ef      	bne.n	8002a96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 80f9 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 80cf 	bne.w	8002c68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aca:	4b52      	ldr	r3, [pc, #328]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0203 	and.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d12c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d123      	bne.n	8002b38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d11b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d113      	bne.n	8002b38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d071      	beq.n	8002c1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2b0c      	cmp	r3, #12
 8002b3c:	d068      	beq.n	8002c10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b3e:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b4a:	4b32      	ldr	r3, [pc, #200]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0ac      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b66:	f7fe fac7 	bl	80010f8 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fac3 	bl	80010f8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e099      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8c:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x788>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ba6:	0212      	lsls	r2, r2, #8
 8002ba8:	4311      	orrs	r1, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bae:	0852      	lsrs	r2, r2, #1
 8002bb0:	3a01      	subs	r2, #1
 8002bb2:	0552      	lsls	r2, r2, #21
 8002bb4:	4311      	orrs	r1, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0652      	lsls	r2, r2, #25
 8002bc0:	4311      	orrs	r1, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bc6:	06d2      	lsls	r2, r2, #27
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	4912      	ldr	r1, [pc, #72]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0f      	ldr	r2, [pc, #60]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002be8:	f7fe fa86 	bl	80010f8 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fa82 	bl	80010f8 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e058      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <HAL_RCC_OscConfig+0x784>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c0e:	e050      	b.n	8002cb2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e04f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
 8002c14:	40021000 	.word	0x40021000
 8002c18:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1c:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d144      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c28:	4b24      	ldr	r3, [pc, #144]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c40:	f7fe fa5a 	bl	80010f8 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c48:	f7fe fa56 	bl	80010f8 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e02c      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x7b8>
 8002c66:	e024      	b.n	8002cb2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d01f      	beq.n	8002cae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fa3d 	bl	80010f8 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c82:	f7fe fa39 	bl	80010f8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e00f      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f0      	bne.n	8002c82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4905      	ldr	r1, [pc, #20]	; (8002cbc <HAL_RCC_OscConfig+0x82c>)
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_RCC_OscConfig+0x830>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60cb      	str	r3, [r1, #12]
 8002cac:	e001      	b.n	8002cb2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e000      	b.n	8002cb4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	feeefffc 	.word	0xfeeefffc

08002cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e11d      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b90      	ldr	r3, [pc, #576]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d910      	bls.n	8002d0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b8d      	ldr	r3, [pc, #564]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 020f 	bic.w	r2, r3, #15
 8002cf2:	498b      	ldr	r1, [pc, #556]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b89      	ldr	r3, [pc, #548]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e105      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d908      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b7e      	ldr	r3, [pc, #504]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	497b      	ldr	r1, [pc, #492]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d079      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d11e      	bne.n	8002d8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	4b75      	ldr	r3, [pc, #468]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0dc      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d5e:	f000 fa09 	bl	8003174 <RCC_GetSysClockFreqFromPLLSource>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4a70      	ldr	r2, [pc, #448]	; (8002f28 <HAL_RCC_ClockConfig+0x264>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d946      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d140      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d76:	4b6b      	ldr	r3, [pc, #428]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7e:	4a69      	ldr	r2, [pc, #420]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e035      	b.n	8002df8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d94:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b9      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dac:	4b5d      	ldr	r3, [pc, #372]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d109      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0ad      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0a5      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002dcc:	f000 f8b4 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4a55      	ldr	r2, [pc, #340]	; (8002f28 <HAL_RCC_ClockConfig+0x264>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d90f      	bls.n	8002df8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dd8:	4b52      	ldr	r3, [pc, #328]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002de4:	4b4f      	ldr	r3, [pc, #316]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dec:	4a4d      	ldr	r2, [pc, #308]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002df8:	4b4a      	ldr	r3, [pc, #296]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 0203 	bic.w	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	4947      	ldr	r1, [pc, #284]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0a:	f7fe f975 	bl	80010f8 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e10:	e00a      	b.n	8002e28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7fe f971 	bl	80010f8 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e077      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e28:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f003 020c 	and.w	r2, r3, #12
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d1eb      	bne.n	8002e12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d105      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e40:	4b38      	ldr	r3, [pc, #224]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	4a37      	ldr	r2, [pc, #220]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d208      	bcs.n	8002e7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e68:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	492b      	ldr	r1, [pc, #172]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d210      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e88:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 020f 	bic.w	r2, r3, #15
 8002e90:	4923      	ldr	r1, [pc, #140]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_ClockConfig+0x25c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e036      	b.n	8002f18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d008      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb6:	4b1b      	ldr	r3, [pc, #108]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	4918      	ldr	r1, [pc, #96]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0308 	and.w	r3, r3, #8
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d009      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed4:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4910      	ldr	r1, [pc, #64]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee8:	f000 f826 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002eec:	4602      	mov	r2, r0
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCC_ClockConfig+0x260>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	490c      	ldr	r1, [pc, #48]	; (8002f2c <HAL_RCC_ClockConfig+0x268>)
 8002efa:	5ccb      	ldrb	r3, [r1, r3]
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_RCC_ClockConfig+0x26c>)
 8002f06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f08:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_RCC_ClockConfig+0x270>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe f8a3 	bl	8001058 <HAL_InitTick>
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	04c4b400 	.word	0x04c4b400
 8002f2c:	0800bcf4 	.word	0x0800bcf4
 8002f30:	20000018 	.word	0x20000018
 8002f34:	20000000 	.word	0x20000000

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f46:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f50:	4b3b      	ldr	r3, [pc, #236]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d121      	bne.n	8002faa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d11e      	bne.n	8002faa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f6c:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0308 	and.w	r3, r3, #8
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f78:	4b31      	ldr	r3, [pc, #196]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e005      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f88:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f94:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d102      	bne.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb2:	61bb      	str	r3, [r7, #24]
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	2b08      	cmp	r3, #8
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fbc:	4b23      	ldr	r3, [pc, #140]	; (800304c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fbe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b0c      	cmp	r3, #12
 8002fc4:	d134      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d003      	beq.n	8002fde <HAL_RCC_GetSysClockFreq+0xa6>
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d003      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0xac>
 8002fdc:	e005      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe0:	617b      	str	r3, [r7, #20]
      break;
 8002fe2:	e005      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_GetSysClockFreq+0x114>)
 8002fe6:	617b      	str	r3, [r7, #20]
      break;
 8002fe8:	e002      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	617b      	str	r3, [r7, #20]
      break;
 8002fee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ffe:	4b10      	ldr	r3, [pc, #64]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	0a1b      	lsrs	r3, r3, #8
 8003004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	fb03 f202 	mul.w	r2, r3, r2
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003016:	4b0a      	ldr	r3, [pc, #40]	; (8003040 <HAL_RCC_GetSysClockFreq+0x108>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	0e5b      	lsrs	r3, r3, #25
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	3301      	adds	r3, #1
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003030:	69bb      	ldr	r3, [r7, #24]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40021000 	.word	0x40021000
 8003044:	0800bd0c 	.word	0x0800bd0c
 8003048:	00f42400 	.word	0x00f42400
 800304c:	007a1200 	.word	0x007a1200

08003050 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003054:	4b03      	ldr	r3, [pc, #12]	; (8003064 <HAL_RCC_GetHCLKFreq+0x14>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20000018 	.word	0x20000018

08003068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800306c:	f7ff fff0 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4904      	ldr	r1, [pc, #16]	; (8003090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000
 8003090:	0800bd04 	.word	0x0800bd04

08003094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003098:	f7ff ffda 	bl	8003050 <HAL_RCC_GetHCLKFreq>
 800309c:	4602      	mov	r2, r0
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	0adb      	lsrs	r3, r3, #11
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	4904      	ldr	r1, [pc, #16]	; (80030bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80030aa:	5ccb      	ldrb	r3, [r1, r3]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40021000 	.word	0x40021000
 80030bc:	0800bd04 	.word	0x0800bd04

080030c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030cc:	4b27      	ldr	r3, [pc, #156]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030d8:	f7ff f916 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 80030dc:	6178      	str	r0, [r7, #20]
 80030de:	e014      	b.n	800310a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e0:	4b22      	ldr	r3, [pc, #136]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a21      	ldr	r2, [pc, #132]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58
 80030ec:	4b1f      	ldr	r3, [pc, #124]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030f8:	f7ff f906 	bl	8002308 <HAL_PWREx_GetVoltageRange>
 80030fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b1b      	ldr	r3, [pc, #108]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003102:	4a1a      	ldr	r2, [pc, #104]	; (800316c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003110:	d10b      	bne.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d913      	bls.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2ba0      	cmp	r3, #160	; 0xa0
 800311c:	d902      	bls.n	8003124 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800311e:	2302      	movs	r3, #2
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e00d      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003124:	2301      	movs	r3, #1
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e00a      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b7f      	cmp	r3, #127	; 0x7f
 800312e:	d902      	bls.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003130:	2302      	movs	r3, #2
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e004      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b70      	cmp	r3, #112	; 0x70
 800313a:	d101      	bne.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800313c:	2301      	movs	r3, #1
 800313e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 020f 	bic.w	r2, r3, #15
 8003148:	4909      	ldr	r1, [pc, #36]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	429a      	cmp	r2, r3
 800315c:	d001      	beq.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	40022000 	.word	0x40022000

08003174 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b03      	cmp	r3, #3
 8003188:	d00b      	beq.n	80031a2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d825      	bhi.n	80031dc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d008      	beq.n	80031a8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d11f      	bne.n	80031dc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800319c:	4b25      	ldr	r3, [pc, #148]	; (8003234 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800319e:	613b      	str	r3, [r7, #16]
    break;
 80031a0:	e01f      	b.n	80031e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031a2:	4b25      	ldr	r3, [pc, #148]	; (8003238 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031a4:	613b      	str	r3, [r7, #16]
    break;
 80031a6:	e01c      	b.n	80031e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031b4:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e005      	b.n	80031d0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	613b      	str	r3, [r7, #16]
    break;
 80031da:	e002      	b.n	80031e2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
    break;
 80031e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	091b      	lsrs	r3, r3, #4
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	3301      	adds	r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031f0:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	fb03 f202 	mul.w	r2, r3, r2
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	0e5b      	lsrs	r3, r3, #25
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	3301      	adds	r3, #1
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003220:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003222:	683b      	ldr	r3, [r7, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	371c      	adds	r7, #28
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	40021000 	.word	0x40021000
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200
 800323c:	0800bd0c 	.word	0x0800bd0c

08003240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003248:	2300      	movs	r3, #0
 800324a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800324c:	2300      	movs	r3, #0
 800324e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003258:	2b00      	cmp	r3, #0
 800325a:	d040      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003260:	2b80      	cmp	r3, #128	; 0x80
 8003262:	d02a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003264:	2b80      	cmp	r3, #128	; 0x80
 8003266:	d825      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d026      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800326c:	2b60      	cmp	r3, #96	; 0x60
 800326e:	d821      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d006      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d81d      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d009      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800327c:	2b20      	cmp	r3, #32
 800327e:	d010      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003280:	e018      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003282:	4b89      	ldr	r3, [pc, #548]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4a88      	ldr	r2, [pc, #544]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800328c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800328e:	e015      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fb02 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a0:	e00c      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3320      	adds	r3, #32
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fbed 	bl	8003a88 <RCCEx_PLLSAI2_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b2:	e003      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	74fb      	strb	r3, [r7, #19]
      break;
 80032b8:	e000      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80032ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c2:	4b79      	ldr	r3, [pc, #484]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d0:	4975      	ldr	r1, [pc, #468]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032d8:	e001      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d047      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d030      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80032f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f8:	d82a      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80032fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fe:	d02a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003304:	d824      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800330a:	d008      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800330c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003310:	d81e      	bhi.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331a:	d010      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800331c:	e018      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800331e:	4b62      	ldr	r3, [pc, #392]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	4a61      	ldr	r2, [pc, #388]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003328:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800332a:	e015      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3304      	adds	r3, #4
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fab4 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800333c:	e00c      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3320      	adds	r3, #32
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fb9f 	bl	8003a88 <RCCEx_PLLSAI2_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800334e:	e003      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	74fb      	strb	r3, [r7, #19]
      break;
 8003354:	e000      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800335e:	4b52      	ldr	r3, [pc, #328]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003360:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	494e      	ldr	r1, [pc, #312]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003374:	e001      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	7cfb      	ldrb	r3, [r7, #19]
 8003378:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 809f 	beq.w	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800338c:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	4a40      	ldr	r2, [pc, #256]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6593      	str	r3, [r2, #88]	; 0x58
 80033ae:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033be:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ca:	f7fd fe95 	bl	80010f8 <HAL_GetTick>
 80033ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d0:	e009      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d2:	f7fd fe91 	bl	80010f8 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d902      	bls.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	74fb      	strb	r3, [r7, #19]
        break;
 80033e4:	e005      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0ef      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80033f2:	7cfb      	ldrb	r3, [r7, #19]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d15b      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003402:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01f      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	429a      	cmp	r2, r3
 8003414:	d019      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003422:	4b21      	ldr	r3, [pc, #132]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	4a1f      	ldr	r2, [pc, #124]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003442:	4a19      	ldr	r2, [pc, #100]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fd fe50 	bl	80010f8 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	e00b      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fd fe4c 	bl	80010f8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d902      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	74fb      	strb	r3, [r7, #19]
            break;
 8003472:	e006      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003474:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ec      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10c      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	4903      	ldr	r1, [pc, #12]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034a0:	e008      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a2:	7cfb      	ldrb	r3, [r7, #19]
 80034a4:	74bb      	strb	r3, [r7, #18]
 80034a6:	e005      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b0:	7cfb      	ldrb	r3, [r7, #19]
 80034b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b4:	7c7b      	ldrb	r3, [r7, #17]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d105      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ba:	4ba0      	ldr	r3, [pc, #640]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a9f      	ldr	r2, [pc, #636]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034d2:	4b9a      	ldr	r3, [pc, #616]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d8:	f023 0203 	bic.w	r2, r3, #3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	4996      	ldr	r1, [pc, #600]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034f4:	4b91      	ldr	r3, [pc, #580]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	f023 020c 	bic.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	498e      	ldr	r1, [pc, #568]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	4985      	ldr	r1, [pc, #532]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0308 	and.w	r3, r3, #8
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003538:	4b80      	ldr	r3, [pc, #512]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	497d      	ldr	r1, [pc, #500]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800355a:	4b78      	ldr	r3, [pc, #480]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	4974      	ldr	r1, [pc, #464]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358a:	496c      	ldr	r1, [pc, #432]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800359e:	4b67      	ldr	r3, [pc, #412]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ac:	4963      	ldr	r1, [pc, #396]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c0:	4b5e      	ldr	r3, [pc, #376]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035ce:	495b      	ldr	r1, [pc, #364]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e2:	4b56      	ldr	r3, [pc, #344]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f0:	4952      	ldr	r1, [pc, #328]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003604:	4b4d      	ldr	r3, [pc, #308]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003612:	494a      	ldr	r1, [pc, #296]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003626:	4b45      	ldr	r3, [pc, #276]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	4941      	ldr	r1, [pc, #260]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003648:	4b3c      	ldr	r3, [pc, #240]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800364a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800364e:	f023 0203 	bic.w	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003656:	4939      	ldr	r1, [pc, #228]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d028      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800366a:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003678:	4930      	ldr	r1, [pc, #192]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003688:	d106      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	4a2b      	ldr	r2, [pc, #172]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003694:	60d3      	str	r3, [r2, #12]
 8003696:	e011      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a0:	d10c      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2101      	movs	r1, #1
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f8f9 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036b2:	7cfb      	ldrb	r3, [r7, #19]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d04d      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036d0:	d108      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80036d2:	4b1a      	ldr	r3, [pc, #104]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036d8:	4a18      	ldr	r2, [pc, #96]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036e2:	e012      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036ea:	4a14      	ldr	r2, [pc, #80]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003702:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003712:	d106      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a08      	ldr	r2, [pc, #32]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	e020      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372a:	d109      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a02      	ldr	r2, [pc, #8]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e014      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003748:	d10c      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3304      	adds	r3, #4
 800374e:	2101      	movs	r1, #1
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f8a5 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375a:	7cfb      	ldrb	r3, [r7, #19]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003760:	7cfb      	ldrb	r3, [r7, #19]
 8003762:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d028      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003770:	4b4a      	ldr	r3, [pc, #296]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800377e:	4947      	ldr	r1, [pc, #284]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003780:	4313      	orrs	r3, r2
 8003782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800378a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378e:	d106      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003790:	4b42      	ldr	r3, [pc, #264]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a41      	ldr	r2, [pc, #260]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800379a:	60d3      	str	r3, [r2, #12]
 800379c:	e011      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037a6:	d10c      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f876 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037b8:	7cfb      	ldrb	r3, [r7, #19]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01e      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ce:	4b33      	ldr	r3, [pc, #204]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037de:	492f      	ldr	r1, [pc, #188]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f0:	d10c      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	2102      	movs	r1, #2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 f851 	bl	80038a0 <RCCEx_PLLSAI1_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003802:	7cfb      	ldrb	r3, [r7, #19]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003808:	7cfb      	ldrb	r3, [r7, #19]
 800380a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003818:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800381e:	f023 0204 	bic.w	r2, r3, #4
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003828:	491c      	ldr	r1, [pc, #112]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800383c:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003842:	f023 0218 	bic.w	r2, r3, #24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	4913      	ldr	r1, [pc, #76]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d017      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003860:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003862:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003870:	490a      	ldr	r1, [pc, #40]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800387e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003882:	d105      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800388e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003890:	7cbb      	ldrb	r3, [r7, #18]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000

080038a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038ae:	4b72      	ldr	r3, [pc, #456]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00e      	beq.n	80038d8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038ba:	4b6f      	ldr	r3, [pc, #444]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f003 0203 	and.w	r2, r3, #3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d103      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
       ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d142      	bne.n	8003958 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	73fb      	strb	r3, [r7, #15]
 80038d6:	e03f      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d018      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x72>
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d825      	bhi.n	8003930 <RCCEx_PLLSAI1_Config+0x90>
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d002      	beq.n	80038ee <RCCEx_PLLSAI1_Config+0x4e>
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d009      	beq.n	8003900 <RCCEx_PLLSAI1_Config+0x60>
 80038ec:	e020      	b.n	8003930 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ee:	4b62      	ldr	r3, [pc, #392]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fe:	e01a      	b.n	8003936 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003900:	4b5d      	ldr	r3, [pc, #372]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d116      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e013      	b.n	800393a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003912:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10f      	bne.n	800393e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800391e:	4b56      	ldr	r3, [pc, #344]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800392e:	e006      	b.n	800393e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e004      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800393e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d108      	bne.n	8003958 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003946:	4b4c      	ldr	r3, [pc, #304]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4949      	ldr	r1, [pc, #292]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 8086 	bne.w	8003a6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003960:	4b45      	ldr	r3, [pc, #276]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a44      	ldr	r2, [pc, #272]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800396a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800396c:	f7fd fbc4 	bl	80010f8 <HAL_GetTick>
 8003970:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003972:	e009      	b.n	8003988 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003974:	f7fd fbc0 	bl	80010f8 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d902      	bls.n	8003988 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	73fb      	strb	r3, [r7, #15]
        break;
 8003986:	e005      	b.n	8003994 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003988:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ef      	bne.n	8003974 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d168      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039a0:	4b35      	ldr	r3, [pc, #212]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <RCCEx_PLLSAI1_Config+0x1dc>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68d2      	ldr	r2, [r2, #12]
 80039b2:	06d2      	lsls	r2, r2, #27
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6852      	ldr	r2, [r2, #4]
 80039ba:	3a01      	subs	r2, #1
 80039bc:	0112      	lsls	r2, r2, #4
 80039be:	430a      	orrs	r2, r1
 80039c0:	492d      	ldr	r1, [pc, #180]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	610b      	str	r3, [r1, #16]
 80039c6:	e02d      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d115      	bne.n	80039fa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6892      	ldr	r2, [r2, #8]
 80039da:	0211      	lsls	r1, r2, #8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6912      	ldr	r2, [r2, #16]
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	3a01      	subs	r2, #1
 80039e4:	0552      	lsls	r2, r2, #21
 80039e6:	4311      	orrs	r1, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6852      	ldr	r2, [r2, #4]
 80039ec:	3a01      	subs	r2, #1
 80039ee:	0112      	lsls	r2, r2, #4
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4921      	ldr	r1, [pc, #132]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	610b      	str	r3, [r1, #16]
 80039f8:	e014      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039fa:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	4b21      	ldr	r3, [pc, #132]	; (8003a84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6892      	ldr	r2, [r2, #8]
 8003a06:	0211      	lsls	r1, r2, #8
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6952      	ldr	r2, [r2, #20]
 8003a0c:	0852      	lsrs	r2, r2, #1
 8003a0e:	3a01      	subs	r2, #1
 8003a10:	0652      	lsls	r2, r2, #25
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6852      	ldr	r2, [r2, #4]
 8003a18:	3a01      	subs	r2, #1
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	4916      	ldr	r1, [pc, #88]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a13      	ldr	r2, [pc, #76]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fb62 	bl	80010f8 <HAL_GetTick>
 8003a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a36:	e009      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a38:	f7fd fb5e 	bl	80010f8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d902      	bls.n	8003a4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	73fb      	strb	r3, [r7, #15]
          break;
 8003a4a:	e005      	b.n	8003a58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ef      	beq.n	8003a38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	4904      	ldr	r1, [pc, #16]	; (8003a78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	07ff800f 	.word	0x07ff800f
 8003a80:	ff9f800f 	.word	0xff9f800f
 8003a84:	f9ff800f 	.word	0xf9ff800f

08003a88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a96:	4b72      	ldr	r3, [pc, #456]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aa2:	4b6f      	ldr	r3, [pc, #444]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0203 	and.w	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d103      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d142      	bne.n	8003b40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
 8003abe:	e03f      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	d018      	beq.n	8003afa <RCCEx_PLLSAI2_Config+0x72>
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d825      	bhi.n	8003b18 <RCCEx_PLLSAI2_Config+0x90>
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d002      	beq.n	8003ad6 <RCCEx_PLLSAI2_Config+0x4e>
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d009      	beq.n	8003ae8 <RCCEx_PLLSAI2_Config+0x60>
 8003ad4:	e020      	b.n	8003b18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ad6:	4b62      	ldr	r3, [pc, #392]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d11d      	bne.n	8003b1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae6:	e01a      	b.n	8003b1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ae8:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af8:	e013      	b.n	8003b22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003afa:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b06:	4b56      	ldr	r3, [pc, #344]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b16:	e006      	b.n	8003b26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1c:	e004      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e002      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b22:	bf00      	nop
 8003b24:	e000      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b2e:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4949      	ldr	r1, [pc, #292]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 8086 	bne.w	8003c54 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b48:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a44      	ldr	r2, [pc, #272]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b54:	f7fd fad0 	bl	80010f8 <HAL_GetTick>
 8003b58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b5a:	e009      	b.n	8003b70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b5c:	f7fd facc 	bl	80010f8 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d902      	bls.n	8003b70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6e:	e005      	b.n	8003b7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b70:	4b3b      	ldr	r3, [pc, #236]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1ef      	bne.n	8003b5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d168      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d113      	bne.n	8003bb0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b88:	4b35      	ldr	r3, [pc, #212]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003b8a:	695a      	ldr	r2, [r3, #20]
 8003b8c:	4b35      	ldr	r3, [pc, #212]	; (8003c64 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	0211      	lsls	r1, r2, #8
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	06d2      	lsls	r2, r2, #27
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6852      	ldr	r2, [r2, #4]
 8003ba2:	3a01      	subs	r2, #1
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	492d      	ldr	r1, [pc, #180]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	614b      	str	r3, [r1, #20]
 8003bae:	e02d      	b.n	8003c0c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d115      	bne.n	8003be2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	4b2b      	ldr	r3, [pc, #172]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	0211      	lsls	r1, r2, #8
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6912      	ldr	r2, [r2, #16]
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0552      	lsls	r2, r2, #21
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6852      	ldr	r2, [r2, #4]
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0112      	lsls	r2, r2, #4
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	4921      	ldr	r1, [pc, #132]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	614b      	str	r3, [r1, #20]
 8003be0:	e014      	b.n	8003c0c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1e4>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6892      	ldr	r2, [r2, #8]
 8003bee:	0211      	lsls	r1, r2, #8
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6952      	ldr	r2, [r2, #20]
 8003bf4:	0852      	lsrs	r2, r2, #1
 8003bf6:	3a01      	subs	r2, #1
 8003bf8:	0652      	lsls	r2, r2, #25
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6852      	ldr	r2, [r2, #4]
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0112      	lsls	r2, r2, #4
 8003c04:	430a      	orrs	r2, r1
 8003c06:	4916      	ldr	r1, [pc, #88]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c0c:	4b14      	ldr	r3, [pc, #80]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a13      	ldr	r2, [pc, #76]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7fd fa6e 	bl	80010f8 <HAL_GetTick>
 8003c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c1e:	e009      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c20:	f7fd fa6a 	bl	80010f8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d902      	bls.n	8003c34 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	73fb      	strb	r3, [r7, #15]
          break;
 8003c32:	e005      	b.n	8003c40 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0ef      	beq.n	8003c20 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c46:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	4904      	ldr	r1, [pc, #16]	; (8003c60 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	07ff800f 	.word	0x07ff800f
 8003c68:	ff9f800f 	.word	0xff9f800f
 8003c6c:	f9ff800f 	.word	0xf9ff800f

08003c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e049      	b.n	8003d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f002 f9d8 	bl	800604c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3304      	adds	r3, #4
 8003cac:	4619      	mov	r1, r3
 8003cae:	4610      	mov	r0, r2
 8003cb0:	f000 f970 	bl	8003f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d001      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e04f      	b.n	8003dd8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x76>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d62:	d018      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x76>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d013      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x76>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <HAL_TIM_Base_Start_IT+0xcc>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00e      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x76>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a1c      	ldr	r2, [pc, #112]	; (8003df0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d009      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x76>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <HAL_TIM_Base_Start_IT+0x76>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d115      	bne.n	8003dc2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <HAL_TIM_Base_Start_IT+0xdc>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b06      	cmp	r3, #6
 8003da6:	d015      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0xb4>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dae:	d011      	beq.n	8003dd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0201 	orr.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc0:	e008      	b.n	8003dd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	e000      	b.n	8003dd6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40013400 	.word	0x40013400
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	00010007 	.word	0x00010007

08003e00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_ConfigClockSource+0x1c>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0b6      	b.n	8003f8a <HAL_TIM_ConfigClockSource+0x18a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e58:	d03e      	beq.n	8003ed8 <HAL_TIM_ConfigClockSource+0xd8>
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5e:	f200 8087 	bhi.w	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e66:	f000 8086 	beq.w	8003f76 <HAL_TIM_ConfigClockSource+0x176>
 8003e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6e:	d87f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d01a      	beq.n	8003eaa <HAL_TIM_ConfigClockSource+0xaa>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d87b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e78:	2b60      	cmp	r3, #96	; 0x60
 8003e7a:	d050      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x11e>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d877      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d03c      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0xfe>
 8003e84:	2b50      	cmp	r3, #80	; 0x50
 8003e86:	d873      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d058      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x13e>
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d86f      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e90:	2b30      	cmp	r3, #48	; 0x30
 8003e92:	d064      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15e>
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15e>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d867      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d05c      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15e>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d05a      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x15e>
 8003ea8:	e062      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	6899      	ldr	r1, [r3, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	f000 f97f 	bl	80041bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ecc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]
      break;
 8003ed6:	e04f      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	6899      	ldr	r1, [r3, #8]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f000 f968 	bl	80041bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003efa:	609a      	str	r2, [r3, #8]
      break;
 8003efc:	e03c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f000 f8dc 	bl	80040c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	; 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 f935 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e02c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 f8fb 	bl	8004126 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	; 0x60
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f925 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e01c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 f8bc 	bl	80040c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f915 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e00c      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f000 f90c 	bl	8004186 <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e003      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
      break;
 8003f74:	e000      	b.n	8003f78 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a40      	ldr	r2, [pc, #256]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d013      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a3d      	ldr	r2, [pc, #244]	; (80040ac <TIM_Base_SetConfig+0x118>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a3c      	ldr	r2, [pc, #240]	; (80040b0 <TIM_Base_SetConfig+0x11c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3b      	ldr	r2, [pc, #236]	; (80040b4 <TIM_Base_SetConfig+0x120>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3a      	ldr	r2, [pc, #232]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d108      	bne.n	8003fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff4:	d01b      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2c      	ldr	r2, [pc, #176]	; (80040ac <TIM_Base_SetConfig+0x118>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d017      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a2b      	ldr	r2, [pc, #172]	; (80040b0 <TIM_Base_SetConfig+0x11c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <TIM_Base_SetConfig+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a29      	ldr	r2, [pc, #164]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a28      	ldr	r2, [pc, #160]	; (80040bc <TIM_Base_SetConfig+0x128>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a27      	ldr	r2, [pc, #156]	; (80040c0 <TIM_Base_SetConfig+0x12c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <TIM_Base_SetConfig+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a26      	ldr	r2, [pc, #152]	; (80040c4 <TIM_Base_SetConfig+0x130>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d108      	bne.n	8004040 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a10      	ldr	r2, [pc, #64]	; (80040a8 <TIM_Base_SetConfig+0x114>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00f      	beq.n	800408c <TIM_Base_SetConfig+0xf8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a12      	ldr	r2, [pc, #72]	; (80040b8 <TIM_Base_SetConfig+0x124>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0xf8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a11      	ldr	r2, [pc, #68]	; (80040bc <TIM_Base_SetConfig+0x128>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0xf8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a10      	ldr	r2, [pc, #64]	; (80040c0 <TIM_Base_SetConfig+0x12c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0xf8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <TIM_Base_SetConfig+0x130>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d103      	bne.n	8004094 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	615a      	str	r2, [r3, #20]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800
 80040b4:	40000c00 	.word	0x40000c00
 80040b8:	40013400 	.word	0x40013400
 80040bc:	40014000 	.word	0x40014000
 80040c0:	40014400 	.word	0x40014400
 80040c4:	40014800 	.word	0x40014800

080040c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 030a 	bic.w	r3, r3, #10
 8004104:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	621a      	str	r2, [r3, #32]
}
 800411a:	bf00      	nop
 800411c:	371c      	adds	r7, #28
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004126:	b480      	push	{r7}
 8004128:	b087      	sub	sp, #28
 800412a:	af00      	add	r7, sp, #0
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	f023 0210 	bic.w	r2, r3, #16
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004150:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	031b      	lsls	r3, r3, #12
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004162:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	4313      	orrs	r3, r2
 800416c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004186:	b480      	push	{r7}
 8004188:	b085      	sub	sp, #20
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f043 0307 	orr.w	r3, r3, #7
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	431a      	orrs	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e068      	b.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800424e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d018      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000

0800430c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e042      	b.n	80043a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f001 fea9 	bl	8006088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2224      	movs	r2, #36	; 0x24
 800433a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f998 	bl	8004684 <UART_SetConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e022      	b.n	80043a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fc88 	bl	8004c7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fd0f 	bl	8004dc0 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	f040 8084 	bne.w	80044d0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_UART_Transmit+0x28>
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e07c      	b.n	80044d2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_UART_Transmit+0x3a>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e075      	b.n	80044d2 <HAL_UART_Transmit+0x126>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2221      	movs	r2, #33	; 0x21
 80043fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fe:	f7fc fe7b 	bl	80010f8 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441c:	d108      	bne.n	8004430 <HAL_UART_Transmit+0x84>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d104      	bne.n	8004430 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e003      	b.n	8004438 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004440:	e02d      	b.n	800449e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2200      	movs	r2, #0
 800444a:	2180      	movs	r1, #128	; 0x80
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 fd02 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e03a      	b.n	80044d2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	881a      	ldrh	r2, [r3, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446e:	b292      	uxth	r2, r2
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	3302      	adds	r3, #2
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e008      	b.n	800448c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	781a      	ldrb	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	b292      	uxth	r2, r2
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3301      	adds	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1cb      	bne.n	8004442 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2200      	movs	r2, #0
 80044b2:	2140      	movs	r1, #64	; 0x40
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fcce 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e006      	b.n	80044d2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af02      	add	r7, sp, #8
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	f040 80c1 	bne.w	8004678 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d002      	beq.n	8004502 <HAL_UART_Receive+0x28>
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0b9      	b.n	800467a <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_UART_Receive+0x3a>
 8004510:	2302      	movs	r3, #2
 8004512:	e0b2      	b.n	800467a <HAL_UART_Receive+0x1a0>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2222      	movs	r2, #34	; 0x22
 8004528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fc fde1 	bl	80010f8 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004550:	d10e      	bne.n	8004570 <HAL_UART_Receive+0x96>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d105      	bne.n	8004566 <HAL_UART_Receive+0x8c>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004564:	e02d      	b.n	80045c2 <HAL_UART_Receive+0xe8>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800456e:	e028      	b.n	80045c2 <HAL_UART_Receive+0xe8>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_UART_Receive+0xba>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d104      	bne.n	800458a <HAL_UART_Receive+0xb0>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	22ff      	movs	r2, #255	; 0xff
 8004584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004588:	e01b      	b.n	80045c2 <HAL_UART_Receive+0xe8>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	227f      	movs	r2, #127	; 0x7f
 800458e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004592:	e016      	b.n	80045c2 <HAL_UART_Receive+0xe8>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800459c:	d10d      	bne.n	80045ba <HAL_UART_Receive+0xe0>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d104      	bne.n	80045b0 <HAL_UART_Receive+0xd6>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	227f      	movs	r2, #127	; 0x7f
 80045aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045ae:	e008      	b.n	80045c2 <HAL_UART_Receive+0xe8>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	223f      	movs	r2, #63	; 0x3f
 80045b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80045b8:	e003      	b.n	80045c2 <HAL_UART_Receive+0xe8>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80045c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d108      	bne.n	80045e6 <HAL_UART_Receive+0x10c>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d104      	bne.n	80045e6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e003      	b.n	80045ee <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80045f6:	e033      	b.n	8004660 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	2120      	movs	r1, #32
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fc27 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e033      	b.n	800467a <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10c      	bne.n	8004632 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800461e:	b29a      	uxth	r2, r3
 8004620:	8a7b      	ldrh	r3, [r7, #18]
 8004622:	4013      	ands	r3, r2
 8004624:	b29a      	uxth	r2, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	3302      	adds	r3, #2
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e00d      	b.n	800464e <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004638:	b29b      	uxth	r3, r3
 800463a:	b2da      	uxtb	r2, r3
 800463c:	8a7b      	ldrh	r3, [r7, #18]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	4013      	ands	r3, r2
 8004642:	b2da      	uxtb	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1c5      	bne.n	80045f8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	e000      	b.n	800467a <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8004678:	2302      	movs	r3, #2
  }
}
 800467a:	4618      	mov	r0, r3
 800467c:	3720      	adds	r7, #32
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b08c      	sub	sp, #48	; 0x30
 800468a:	af00      	add	r7, sp, #0
 800468c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	431a      	orrs	r2, r3
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4baa      	ldr	r3, [pc, #680]	; (800495c <UART_SetConfig+0x2d8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046bc:	430b      	orrs	r3, r1
 80046be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a9f      	ldr	r2, [pc, #636]	; (8004960 <UART_SetConfig+0x2dc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d004      	beq.n	80046f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ec:	4313      	orrs	r3, r2
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80046fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	6812      	ldr	r2, [r2, #0]
 8004702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004704:	430b      	orrs	r3, r1
 8004706:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	f023 010f 	bic.w	r1, r3, #15
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a90      	ldr	r2, [pc, #576]	; (8004964 <UART_SetConfig+0x2e0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d125      	bne.n	8004774 <UART_SetConfig+0xf0>
 8004728:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <UART_SetConfig+0x2e4>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f003 0303 	and.w	r3, r3, #3
 8004732:	2b03      	cmp	r3, #3
 8004734:	d81a      	bhi.n	800476c <UART_SetConfig+0xe8>
 8004736:	a201      	add	r2, pc, #4	; (adr r2, 800473c <UART_SetConfig+0xb8>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	0800474d 	.word	0x0800474d
 8004740:	0800475d 	.word	0x0800475d
 8004744:	08004755 	.word	0x08004755
 8004748:	08004765 	.word	0x08004765
 800474c:	2301      	movs	r3, #1
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e116      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004754:	2302      	movs	r3, #2
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800475a:	e112      	b.n	8004982 <UART_SetConfig+0x2fe>
 800475c:	2304      	movs	r3, #4
 800475e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004762:	e10e      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004764:	2308      	movs	r3, #8
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800476a:	e10a      	b.n	8004982 <UART_SetConfig+0x2fe>
 800476c:	2310      	movs	r3, #16
 800476e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004772:	e106      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a7c      	ldr	r2, [pc, #496]	; (800496c <UART_SetConfig+0x2e8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d138      	bne.n	80047f0 <UART_SetConfig+0x16c>
 800477e:	4b7a      	ldr	r3, [pc, #488]	; (8004968 <UART_SetConfig+0x2e4>)
 8004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d82d      	bhi.n	80047e8 <UART_SetConfig+0x164>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <UART_SetConfig+0x110>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047c9 	.word	0x080047c9
 8004798:	080047e9 	.word	0x080047e9
 800479c:	080047e9 	.word	0x080047e9
 80047a0:	080047e9 	.word	0x080047e9
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080047e9 	.word	0x080047e9
 80047ac:	080047e9 	.word	0x080047e9
 80047b0:	080047e9 	.word	0x080047e9
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047e9 	.word	0x080047e9
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047e9 	.word	0x080047e9
 80047c4:	080047e1 	.word	0x080047e1
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ce:	e0d8      	b.n	8004982 <UART_SetConfig+0x2fe>
 80047d0:	2302      	movs	r3, #2
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d6:	e0d4      	b.n	8004982 <UART_SetConfig+0x2fe>
 80047d8:	2304      	movs	r3, #4
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047de:	e0d0      	b.n	8004982 <UART_SetConfig+0x2fe>
 80047e0:	2308      	movs	r3, #8
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e6:	e0cc      	b.n	8004982 <UART_SetConfig+0x2fe>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ee:	e0c8      	b.n	8004982 <UART_SetConfig+0x2fe>
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a5e      	ldr	r2, [pc, #376]	; (8004970 <UART_SetConfig+0x2ec>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d125      	bne.n	8004846 <UART_SetConfig+0x1c2>
 80047fa:	4b5b      	ldr	r3, [pc, #364]	; (8004968 <UART_SetConfig+0x2e4>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d016      	beq.n	8004836 <UART_SetConfig+0x1b2>
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d818      	bhi.n	800483e <UART_SetConfig+0x1ba>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d00a      	beq.n	8004826 <UART_SetConfig+0x1a2>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d814      	bhi.n	800483e <UART_SetConfig+0x1ba>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <UART_SetConfig+0x19a>
 8004818:	2b10      	cmp	r3, #16
 800481a:	d008      	beq.n	800482e <UART_SetConfig+0x1aa>
 800481c:	e00f      	b.n	800483e <UART_SetConfig+0x1ba>
 800481e:	2300      	movs	r3, #0
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004824:	e0ad      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004826:	2302      	movs	r3, #2
 8004828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800482c:	e0a9      	b.n	8004982 <UART_SetConfig+0x2fe>
 800482e:	2304      	movs	r3, #4
 8004830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004834:	e0a5      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004836:	2308      	movs	r3, #8
 8004838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483c:	e0a1      	b.n	8004982 <UART_SetConfig+0x2fe>
 800483e:	2310      	movs	r3, #16
 8004840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004844:	e09d      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4a      	ldr	r2, [pc, #296]	; (8004974 <UART_SetConfig+0x2f0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d125      	bne.n	800489c <UART_SetConfig+0x218>
 8004850:	4b45      	ldr	r3, [pc, #276]	; (8004968 <UART_SetConfig+0x2e4>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800485a:	2bc0      	cmp	r3, #192	; 0xc0
 800485c:	d016      	beq.n	800488c <UART_SetConfig+0x208>
 800485e:	2bc0      	cmp	r3, #192	; 0xc0
 8004860:	d818      	bhi.n	8004894 <UART_SetConfig+0x210>
 8004862:	2b80      	cmp	r3, #128	; 0x80
 8004864:	d00a      	beq.n	800487c <UART_SetConfig+0x1f8>
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d814      	bhi.n	8004894 <UART_SetConfig+0x210>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <UART_SetConfig+0x1f0>
 800486e:	2b40      	cmp	r3, #64	; 0x40
 8004870:	d008      	beq.n	8004884 <UART_SetConfig+0x200>
 8004872:	e00f      	b.n	8004894 <UART_SetConfig+0x210>
 8004874:	2300      	movs	r3, #0
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487a:	e082      	b.n	8004982 <UART_SetConfig+0x2fe>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004882:	e07e      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488a:	e07a      	b.n	8004982 <UART_SetConfig+0x2fe>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004892:	e076      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800489a:	e072      	b.n	8004982 <UART_SetConfig+0x2fe>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a35      	ldr	r2, [pc, #212]	; (8004978 <UART_SetConfig+0x2f4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d12a      	bne.n	80048fc <UART_SetConfig+0x278>
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <UART_SetConfig+0x2e4>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048b4:	d01a      	beq.n	80048ec <UART_SetConfig+0x268>
 80048b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ba:	d81b      	bhi.n	80048f4 <UART_SetConfig+0x270>
 80048bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c0:	d00c      	beq.n	80048dc <UART_SetConfig+0x258>
 80048c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c6:	d815      	bhi.n	80048f4 <UART_SetConfig+0x270>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <UART_SetConfig+0x250>
 80048cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d0:	d008      	beq.n	80048e4 <UART_SetConfig+0x260>
 80048d2:	e00f      	b.n	80048f4 <UART_SetConfig+0x270>
 80048d4:	2300      	movs	r3, #0
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e052      	b.n	8004982 <UART_SetConfig+0x2fe>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e04e      	b.n	8004982 <UART_SetConfig+0x2fe>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e04a      	b.n	8004982 <UART_SetConfig+0x2fe>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f2:	e046      	b.n	8004982 <UART_SetConfig+0x2fe>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fa:	e042      	b.n	8004982 <UART_SetConfig+0x2fe>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <UART_SetConfig+0x2dc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d13a      	bne.n	800497c <UART_SetConfig+0x2f8>
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <UART_SetConfig+0x2e4>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004910:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004914:	d01a      	beq.n	800494c <UART_SetConfig+0x2c8>
 8004916:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800491a:	d81b      	bhi.n	8004954 <UART_SetConfig+0x2d0>
 800491c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004920:	d00c      	beq.n	800493c <UART_SetConfig+0x2b8>
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004926:	d815      	bhi.n	8004954 <UART_SetConfig+0x2d0>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d003      	beq.n	8004934 <UART_SetConfig+0x2b0>
 800492c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004930:	d008      	beq.n	8004944 <UART_SetConfig+0x2c0>
 8004932:	e00f      	b.n	8004954 <UART_SetConfig+0x2d0>
 8004934:	2300      	movs	r3, #0
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493a:	e022      	b.n	8004982 <UART_SetConfig+0x2fe>
 800493c:	2302      	movs	r3, #2
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e01e      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004944:	2304      	movs	r3, #4
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494a:	e01a      	b.n	8004982 <UART_SetConfig+0x2fe>
 800494c:	2308      	movs	r3, #8
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004952:	e016      	b.n	8004982 <UART_SetConfig+0x2fe>
 8004954:	2310      	movs	r3, #16
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495a:	e012      	b.n	8004982 <UART_SetConfig+0x2fe>
 800495c:	cfff69f3 	.word	0xcfff69f3
 8004960:	40008000 	.word	0x40008000
 8004964:	40013800 	.word	0x40013800
 8004968:	40021000 	.word	0x40021000
 800496c:	40004400 	.word	0x40004400
 8004970:	40004800 	.word	0x40004800
 8004974:	40004c00 	.word	0x40004c00
 8004978:	40005000 	.word	0x40005000
 800497c:	2310      	movs	r3, #16
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4aae      	ldr	r2, [pc, #696]	; (8004c40 <UART_SetConfig+0x5bc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	f040 8097 	bne.w	8004abc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800498e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004992:	2b08      	cmp	r3, #8
 8004994:	d823      	bhi.n	80049de <UART_SetConfig+0x35a>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0x318>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	080049df 	.word	0x080049df
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049df 	.word	0x080049df
 80049ac:	080049cf 	.word	0x080049cf
 80049b0:	080049df 	.word	0x080049df
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049df 	.word	0x080049df
 80049bc:	080049d7 	.word	0x080049d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fb52 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 80049c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049c6:	e010      	b.n	80049ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049c8:	4b9e      	ldr	r3, [pc, #632]	; (8004c44 <UART_SetConfig+0x5c0>)
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049cc:	e00d      	b.n	80049ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ce:	f7fe fab3 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 80049d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049d4:	e009      	b.n	80049ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049dc:	e005      	b.n	80049ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8130 	beq.w	8004c52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	4a94      	ldr	r2, [pc, #592]	; (8004c48 <UART_SetConfig+0x5c4>)
 80049f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d305      	bcc.n	8004a22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d903      	bls.n	8004a2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a28:	e113      	b.n	8004c52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
 8004a30:	60fa      	str	r2, [r7, #12]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	4a84      	ldr	r2, [pc, #528]	; (8004c48 <UART_SetConfig+0x5c4>)
 8004a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a4c:	f7fc f934 	bl	8000cb8 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4610      	mov	r0, r2
 8004a56:	4619      	mov	r1, r3
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	020b      	lsls	r3, r1, #8
 8004a62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a66:	0202      	lsls	r2, r0, #8
 8004a68:	6979      	ldr	r1, [r7, #20]
 8004a6a:	6849      	ldr	r1, [r1, #4]
 8004a6c:	0849      	lsrs	r1, r1, #1
 8004a6e:	2000      	movs	r0, #0
 8004a70:	460c      	mov	r4, r1
 8004a72:	4605      	mov	r5, r0
 8004a74:	eb12 0804 	adds.w	r8, r2, r4
 8004a78:	eb43 0905 	adc.w	r9, r3, r5
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	469a      	mov	sl, r3
 8004a84:	4693      	mov	fp, r2
 8004a86:	4652      	mov	r2, sl
 8004a88:	465b      	mov	r3, fp
 8004a8a:	4640      	mov	r0, r8
 8004a8c:	4649      	mov	r1, r9
 8004a8e:	f7fc f913 	bl	8000cb8 <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4613      	mov	r3, r2
 8004a98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aa0:	d308      	bcc.n	8004ab4 <UART_SetConfig+0x430>
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aa8:	d204      	bcs.n	8004ab4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a3a      	ldr	r2, [r7, #32]
 8004ab0:	60da      	str	r2, [r3, #12]
 8004ab2:	e0ce      	b.n	8004c52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004aba:	e0ca      	b.n	8004c52 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	69db      	ldr	r3, [r3, #28]
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ac4:	d166      	bne.n	8004b94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ac6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d827      	bhi.n	8004b1e <UART_SetConfig+0x49a>
 8004ace:	a201      	add	r2, pc, #4	; (adr r2, 8004ad4 <UART_SetConfig+0x450>)
 8004ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	08004b1f 	.word	0x08004b1f
 8004ae4:	08004b0f 	.word	0x08004b0f
 8004ae8:	08004b1f 	.word	0x08004b1f
 8004aec:	08004b1f 	.word	0x08004b1f
 8004af0:	08004b1f 	.word	0x08004b1f
 8004af4:	08004b17 	.word	0x08004b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af8:	f7fe fab6 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004afc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004afe:	e014      	b.n	8004b2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fe fac8 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004b04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b06:	e010      	b.n	8004b2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b4e      	ldr	r3, [pc, #312]	; (8004c44 <UART_SetConfig+0x5c0>)
 8004b0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b0c:	e00d      	b.n	8004b2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b0e:	f7fe fa13 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8004b12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b14:	e009      	b.n	8004b2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b1c:	e005      	b.n	8004b2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 8090 	beq.w	8004c52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	4a44      	ldr	r2, [pc, #272]	; (8004c48 <UART_SetConfig+0x5c4>)
 8004b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b44:	005a      	lsls	r2, r3, #1
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	441a      	add	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	2b0f      	cmp	r3, #15
 8004b5c:	d916      	bls.n	8004b8c <UART_SetConfig+0x508>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d212      	bcs.n	8004b8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	f023 030f 	bic.w	r3, r3, #15
 8004b6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b70:	6a3b      	ldr	r3, [r7, #32]
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	8bfb      	ldrh	r3, [r7, #30]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	8bfa      	ldrh	r2, [r7, #30]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	e062      	b.n	8004c52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b92:	e05e      	b.n	8004c52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d828      	bhi.n	8004bee <UART_SetConfig+0x56a>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0x520>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bc9 	.word	0x08004bc9
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bd9 	.word	0x08004bd9
 8004bb0:	08004bef 	.word	0x08004bef
 8004bb4:	08004bdf 	.word	0x08004bdf
 8004bb8:	08004bef 	.word	0x08004bef
 8004bbc:	08004bef 	.word	0x08004bef
 8004bc0:	08004bef 	.word	0x08004bef
 8004bc4:	08004be7 	.word	0x08004be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bc8:	f7fe fa4e 	bl	8003068 <HAL_RCC_GetPCLK1Freq>
 8004bcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bce:	e014      	b.n	8004bfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd0:	f7fe fa60 	bl	8003094 <HAL_RCC_GetPCLK2Freq>
 8004bd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bd6:	e010      	b.n	8004bfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	; (8004c44 <UART_SetConfig+0x5c0>)
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bdc:	e00d      	b.n	8004bfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bde:	f7fe f9ab 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8004be2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be4:	e009      	b.n	8004bfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bec:	e005      	b.n	8004bfa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d028      	beq.n	8004c52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c04:	4a10      	ldr	r2, [pc, #64]	; (8004c48 <UART_SetConfig+0x5c4>)
 8004c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	441a      	add	r2, r3
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	d910      	bls.n	8004c4c <UART_SetConfig+0x5c8>
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c30:	d20c      	bcs.n	8004c4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c32:	6a3b      	ldr	r3, [r7, #32]
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x5ce>
 8004c3e:	bf00      	nop
 8004c40:	40008000 	.word	0x40008000
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	0800bccc 	.word	0x0800bccc
      }
      else
      {
        ret = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2200      	movs	r2, #0
 8004c66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004c6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3730      	adds	r7, #48	; 0x30
 8004c76:	46bd      	mov	sp, r7
 8004c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7a:	d10a      	bne.n	8004d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004dd0:	f7fc f992 	bl	80010f8 <HAL_GetTick>
 8004dd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d10e      	bne.n	8004e02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004de4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f82f 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e025      	b.n	8004e4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b04      	cmp	r3, #4
 8004e0e:	d10e      	bne.n	8004e2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f819 	bl	8004e56 <UART_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e00f      	b.n	8004e4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b09c      	sub	sp, #112	; 0x70
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	60b9      	str	r1, [r7, #8]
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e66:	e0a9      	b.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6e:	f000 80a5 	beq.w	8004fbc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e72:	f7fc f941 	bl	80010f8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d302      	bcc.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d140      	bne.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e90:	e853 3f00 	ldrex	r3, [r3]
 8004e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ea8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eae:	e841 2300 	strex	r3, r2, [r1]
 8004eb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1e6      	bne.n	8004e88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec4:	e853 3f00 	ldrex	r3, [r3]
 8004ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	663b      	str	r3, [r7, #96]	; 0x60
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004eda:	64ba      	str	r2, [r7, #72]	; 0x48
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1e5      	bne.n	8004eba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e069      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d051      	beq.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f26:	d149      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
 8004f52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e6      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	613b      	str	r3, [r7, #16]
   return(result);
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f84:	623a      	str	r2, [r7, #32]
 8004f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69f9      	ldr	r1, [r7, #28]
 8004f8a:	6a3a      	ldr	r2, [r7, #32]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2220      	movs	r2, #32
 8004fac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e010      	b.n	8004fde <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	bf0c      	ite	eq
 8004fcc:	2301      	moveq	r3, #1
 8004fce:	2300      	movne	r3, #0
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	79fb      	ldrb	r3, [r7, #7]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	f43f af46 	beq.w	8004e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3770      	adds	r7, #112	; 0x70
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UARTEx_DisableFifoMode+0x16>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e027      	b.n	800504c <HAL_UARTEx_DisableFifoMode+0x66>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2224      	movs	r2, #36	; 0x24
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0201 	bic.w	r2, r2, #1
 8005022:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800502a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800506c:	2302      	movs	r3, #2
 800506e:	e02d      	b.n	80050cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f84f 	bl	8005150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e02d      	b.n	8005148 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f811 	bl	8005150 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005170:	e031      	b.n	80051d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005172:	2308      	movs	r3, #8
 8005174:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005176:	2308      	movs	r3, #8
 8005178:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	0e5b      	lsrs	r3, r3, #25
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	0f5b      	lsrs	r3, r3, #29
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800519a:	7bbb      	ldrb	r3, [r7, #14]
 800519c:	7b3a      	ldrb	r2, [r7, #12]
 800519e:	4911      	ldr	r1, [pc, #68]	; (80051e4 <UARTEx_SetNbDataToProcess+0x94>)
 80051a0:	5c8a      	ldrb	r2, [r1, r2]
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051a6:	7b3a      	ldrb	r2, [r7, #12]
 80051a8:	490f      	ldr	r1, [pc, #60]	; (80051e8 <UARTEx_SetNbDataToProcess+0x98>)
 80051aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	7b7a      	ldrb	r2, [r7, #13]
 80051bc:	4909      	ldr	r1, [pc, #36]	; (80051e4 <UARTEx_SetNbDataToProcess+0x94>)
 80051be:	5c8a      	ldrb	r2, [r1, r2]
 80051c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051c4:	7b7a      	ldrb	r2, [r7, #13]
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <UARTEx_SetNbDataToProcess+0x98>)
 80051c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	0800bce4 	.word	0x0800bce4
 80051e8:	0800bcec 	.word	0x0800bcec

080051ec <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80051f4:	1d39      	adds	r1, r7, #4
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051fa:	2201      	movs	r2, #1
 80051fc:	4803      	ldr	r0, [pc, #12]	; (800520c <__io_putchar+0x20>)
 80051fe:	f7ff f8d5 	bl	80043ac <HAL_UART_Transmit>
  return ch;
 8005202:	687b      	ldr	r3, [r7, #4]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200002d0 	.word	0x200002d0

08005210 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8005216:	2300      	movs	r3, #0
 8005218:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <__io_getchar+0x38>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2208      	movs	r2, #8
 8005220:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8005222:	1df9      	adds	r1, r7, #7
 8005224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005228:	2201      	movs	r2, #1
 800522a:	4807      	ldr	r0, [pc, #28]	; (8005248 <__io_getchar+0x38>)
 800522c:	f7ff f955 	bl	80044da <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8005230:	1df9      	adds	r1, r7, #7
 8005232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005236:	2201      	movs	r2, #1
 8005238:	4803      	ldr	r0, [pc, #12]	; (8005248 <__io_getchar+0x38>)
 800523a:	f7ff f8b7 	bl	80043ac <HAL_UART_Transmit>
  return ch;
 800523e:	79fb      	ldrb	r3, [r7, #7]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	200002d0 	.word	0x200002d0

0800524c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	4603      	mov	r3, r0
 8005254:	80fb      	strh	r3, [r7, #6]
	printf("Interrupt \n\r");
 8005256:	4816      	ldr	r0, [pc, #88]	; (80052b0 <HAL_GPIO_EXTI_Callback+0x64>)
 8005258:	f001 ffa4 	bl	80071a4 <iprintf>
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005262:	d120      	bne.n	80052a6 <HAL_GPIO_EXTI_Callback+0x5a>
		printf("Button Pressed. \n\r");
 8005264:	4813      	ldr	r0, [pc, #76]	; (80052b4 <HAL_GPIO_EXTI_Callback+0x68>)
 8005266:	f001 ff9d 	bl	80071a4 <iprintf>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 800526a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800526e:	4812      	ldr	r0, [pc, #72]	; (80052b8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005270:	f7fd f818 	bl	80022a4 <HAL_GPIO_TogglePin>
		mode = (mode+1)%2;
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <HAL_GPIO_EXTI_Callback+0x70>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	3301      	adds	r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	bfb8      	it	lt
 8005282:	425b      	neglt	r3, r3
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <HAL_GPIO_EXTI_Callback+0x70>)
 8005288:	701a      	strb	r2, [r3, #0]
		if (mode == 1) {
 800528a:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <HAL_GPIO_EXTI_Callback+0x70>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d106      	bne.n	80052a0 <HAL_GPIO_EXTI_Callback+0x54>
			printf("Taking input Morse input (array), displaying letter to terminal. \n\r");
 8005292:	480b      	ldr	r0, [pc, #44]	; (80052c0 <HAL_GPIO_EXTI_Callback+0x74>)
 8005294:	f001 ff86 	bl	80071a4 <iprintf>
			printf("Press one more letter to end current translation. \n\r");
 8005298:	480a      	ldr	r0, [pc, #40]	; (80052c4 <HAL_GPIO_EXTI_Callback+0x78>)
 800529a:	f001 ff83 	bl	80071a4 <iprintf>
		} else {
			printf("Taking letter input from terminal, outputting Morse. \n\r");
		}
	}
}
 800529e:	e002      	b.n	80052a6 <HAL_GPIO_EXTI_Callback+0x5a>
			printf("Taking letter input from terminal, outputting Morse. \n\r");
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <HAL_GPIO_EXTI_Callback+0x7c>)
 80052a2:	f001 ff7f 	bl	80071a4 <iprintf>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	0800bb18 	.word	0x0800bb18
 80052b4:	0800bb28 	.word	0x0800bb28
 80052b8:	48000400 	.word	0x48000400
 80052bc:	2000036c 	.word	0x2000036c
 80052c0:	0800bb3c 	.word	0x0800bb3c
 80052c4:	0800bb80 	.word	0x0800bb80
 80052c8:	0800bbb8 	.word	0x0800bbb8

080052cc <updateMorseLetter>:

void updateMorseLetter(char letter){
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]

	// \0 for space
	morseLetterSize = 4;
 80052d6:	4bb6      	ldr	r3, [pc, #728]	; (80055b0 <updateMorseLetter+0x2e4>)
 80052d8:	2204      	movs	r2, #4
 80052da:	601a      	str	r2, [r3, #0]
	morseLetter[0] = '\0'; morseLetter[1] = '\0'; morseLetter[2] = '\0'; morseLetter[3] = '\0';
 80052dc:	4bb5      	ldr	r3, [pc, #724]	; (80055b4 <updateMorseLetter+0x2e8>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	4bb4      	ldr	r3, [pc, #720]	; (80055b4 <updateMorseLetter+0x2e8>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	705a      	strb	r2, [r3, #1]
 80052e8:	4bb2      	ldr	r3, [pc, #712]	; (80055b4 <updateMorseLetter+0x2e8>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	709a      	strb	r2, [r3, #2]
 80052ee:	4bb1      	ldr	r3, [pc, #708]	; (80055b4 <updateMorseLetter+0x2e8>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	70da      	strb	r2, [r3, #3]
	switch (letter)
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	3b61      	subs	r3, #97	; 0x61
 80052f8:	2b19      	cmp	r3, #25
 80052fa:	f200 819a 	bhi.w	8005632 <updateMorseLetter+0x366>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <updateMorseLetter+0x38>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	0800536d 	.word	0x0800536d
 8005308:	08005381 	.word	0x08005381
 800530c:	080053a1 	.word	0x080053a1
 8005310:	080053c1 	.word	0x080053c1
 8005314:	080053db 	.word	0x080053db
 8005318:	080053e9 	.word	0x080053e9
 800531c:	08005409 	.word	0x08005409
 8005320:	08005423 	.word	0x08005423
 8005324:	08005443 	.word	0x08005443
 8005328:	08005457 	.word	0x08005457
 800532c:	08005477 	.word	0x08005477
 8005330:	08005491 	.word	0x08005491
 8005334:	080054b1 	.word	0x080054b1
 8005338:	080054c5 	.word	0x080054c5
 800533c:	080054d9 	.word	0x080054d9
 8005340:	080054f3 	.word	0x080054f3
 8005344:	08005513 	.word	0x08005513
 8005348:	08005533 	.word	0x08005533
 800534c:	0800554d 	.word	0x0800554d
 8005350:	08005567 	.word	0x08005567
 8005354:	08005575 	.word	0x08005575
 8005358:	0800558f 	.word	0x0800558f
 800535c:	080055b9 	.word	0x080055b9
 8005360:	080055d3 	.word	0x080055d3
 8005364:	080055f3 	.word	0x080055f3
 8005368:	08005613 	.word	0x08005613
	{
		case 'a':
			morseLetter[0] = '.'; morseLetter[1] = '-';
 800536c:	4b91      	ldr	r3, [pc, #580]	; (80055b4 <updateMorseLetter+0x2e8>)
 800536e:	222e      	movs	r2, #46	; 0x2e
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	4b90      	ldr	r3, [pc, #576]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005374:	222d      	movs	r2, #45	; 0x2d
 8005376:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8005378:	4b8d      	ldr	r3, [pc, #564]	; (80055b0 <updateMorseLetter+0x2e4>)
 800537a:	2202      	movs	r2, #2
 800537c:	601a      	str	r2, [r3, #0]
			break;
 800537e:	e158      	b.n	8005632 <updateMorseLetter+0x366>
		case 'b':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8005380:	4b8c      	ldr	r3, [pc, #560]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005382:	222d      	movs	r2, #45	; 0x2d
 8005384:	701a      	strb	r2, [r3, #0]
 8005386:	4b8b      	ldr	r3, [pc, #556]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005388:	222e      	movs	r2, #46	; 0x2e
 800538a:	705a      	strb	r2, [r3, #1]
 800538c:	4b89      	ldr	r3, [pc, #548]	; (80055b4 <updateMorseLetter+0x2e8>)
 800538e:	222e      	movs	r2, #46	; 0x2e
 8005390:	709a      	strb	r2, [r3, #2]
 8005392:	4b88      	ldr	r3, [pc, #544]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005394:	222e      	movs	r2, #46	; 0x2e
 8005396:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8005398:	4b85      	ldr	r3, [pc, #532]	; (80055b0 <updateMorseLetter+0x2e4>)
 800539a:	2204      	movs	r2, #4
 800539c:	601a      	str	r2, [r3, #0]
			break;
 800539e:	e148      	b.n	8005632 <updateMorseLetter+0x366>
		case 'c':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 80053a0:	4b84      	ldr	r3, [pc, #528]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053a2:	222d      	movs	r2, #45	; 0x2d
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	4b83      	ldr	r3, [pc, #524]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053a8:	222e      	movs	r2, #46	; 0x2e
 80053aa:	705a      	strb	r2, [r3, #1]
 80053ac:	4b81      	ldr	r3, [pc, #516]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053ae:	222d      	movs	r2, #45	; 0x2d
 80053b0:	709a      	strb	r2, [r3, #2]
 80053b2:	4b80      	ldr	r3, [pc, #512]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053b4:	222e      	movs	r2, #46	; 0x2e
 80053b6:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80053b8:	4b7d      	ldr	r3, [pc, #500]	; (80055b0 <updateMorseLetter+0x2e4>)
 80053ba:	2204      	movs	r2, #4
 80053bc:	601a      	str	r2, [r3, #0]
			break;
 80053be:	e138      	b.n	8005632 <updateMorseLetter+0x366>
		case 'd':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.';
 80053c0:	4b7c      	ldr	r3, [pc, #496]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053c2:	222d      	movs	r2, #45	; 0x2d
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	4b7b      	ldr	r3, [pc, #492]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053c8:	222e      	movs	r2, #46	; 0x2e
 80053ca:	705a      	strb	r2, [r3, #1]
 80053cc:	4b79      	ldr	r3, [pc, #484]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053ce:	222e      	movs	r2, #46	; 0x2e
 80053d0:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 80053d2:	4b77      	ldr	r3, [pc, #476]	; (80055b0 <updateMorseLetter+0x2e4>)
 80053d4:	2203      	movs	r2, #3
 80053d6:	601a      	str	r2, [r3, #0]
			break;
 80053d8:	e12b      	b.n	8005632 <updateMorseLetter+0x366>
		case 'e':
			morseLetter[0] = '.';
 80053da:	4b76      	ldr	r3, [pc, #472]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053dc:	222e      	movs	r2, #46	; 0x2e
 80053de:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 80053e0:	4b73      	ldr	r3, [pc, #460]	; (80055b0 <updateMorseLetter+0x2e4>)
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
			break;
 80053e6:	e124      	b.n	8005632 <updateMorseLetter+0x366>
		case 'f':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 80053e8:	4b72      	ldr	r3, [pc, #456]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053ea:	222e      	movs	r2, #46	; 0x2e
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	4b71      	ldr	r3, [pc, #452]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053f0:	222e      	movs	r2, #46	; 0x2e
 80053f2:	705a      	strb	r2, [r3, #1]
 80053f4:	4b6f      	ldr	r3, [pc, #444]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053f6:	222d      	movs	r2, #45	; 0x2d
 80053f8:	709a      	strb	r2, [r3, #2]
 80053fa:	4b6e      	ldr	r3, [pc, #440]	; (80055b4 <updateMorseLetter+0x2e8>)
 80053fc:	222e      	movs	r2, #46	; 0x2e
 80053fe:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8005400:	4b6b      	ldr	r3, [pc, #428]	; (80055b0 <updateMorseLetter+0x2e4>)
 8005402:	2204      	movs	r2, #4
 8005404:	601a      	str	r2, [r3, #0]
			break;
 8005406:	e114      	b.n	8005632 <updateMorseLetter+0x366>
		case 'g':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8005408:	4b6a      	ldr	r3, [pc, #424]	; (80055b4 <updateMorseLetter+0x2e8>)
 800540a:	222d      	movs	r2, #45	; 0x2d
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	4b69      	ldr	r3, [pc, #420]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005410:	222d      	movs	r2, #45	; 0x2d
 8005412:	705a      	strb	r2, [r3, #1]
 8005414:	4b67      	ldr	r3, [pc, #412]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005416:	222e      	movs	r2, #46	; 0x2e
 8005418:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 800541a:	4b65      	ldr	r3, [pc, #404]	; (80055b0 <updateMorseLetter+0x2e4>)
 800541c:	2203      	movs	r2, #3
 800541e:	601a      	str	r2, [r3, #0]
			break;
 8005420:	e107      	b.n	8005632 <updateMorseLetter+0x366>
		case 'h':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8005422:	4b64      	ldr	r3, [pc, #400]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005424:	222e      	movs	r2, #46	; 0x2e
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	4b62      	ldr	r3, [pc, #392]	; (80055b4 <updateMorseLetter+0x2e8>)
 800542a:	222e      	movs	r2, #46	; 0x2e
 800542c:	705a      	strb	r2, [r3, #1]
 800542e:	4b61      	ldr	r3, [pc, #388]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005430:	222e      	movs	r2, #46	; 0x2e
 8005432:	709a      	strb	r2, [r3, #2]
 8005434:	4b5f      	ldr	r3, [pc, #380]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005436:	222e      	movs	r2, #46	; 0x2e
 8005438:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800543a:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <updateMorseLetter+0x2e4>)
 800543c:	2204      	movs	r2, #4
 800543e:	601a      	str	r2, [r3, #0]
			break;
 8005440:	e0f7      	b.n	8005632 <updateMorseLetter+0x366>
		case 'i':
			morseLetter[0] = '.'; morseLetter[1] = '.';
 8005442:	4b5c      	ldr	r3, [pc, #368]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005444:	222e      	movs	r2, #46	; 0x2e
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	4b5a      	ldr	r3, [pc, #360]	; (80055b4 <updateMorseLetter+0x2e8>)
 800544a:	222e      	movs	r2, #46	; 0x2e
 800544c:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 800544e:	4b58      	ldr	r3, [pc, #352]	; (80055b0 <updateMorseLetter+0x2e4>)
 8005450:	2202      	movs	r2, #2
 8005452:	601a      	str	r2, [r3, #0]
			break;
 8005454:	e0ed      	b.n	8005632 <updateMorseLetter+0x366>
		case 'j':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8005456:	4b57      	ldr	r3, [pc, #348]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005458:	222e      	movs	r2, #46	; 0x2e
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	4b55      	ldr	r3, [pc, #340]	; (80055b4 <updateMorseLetter+0x2e8>)
 800545e:	222d      	movs	r2, #45	; 0x2d
 8005460:	705a      	strb	r2, [r3, #1]
 8005462:	4b54      	ldr	r3, [pc, #336]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005464:	222d      	movs	r2, #45	; 0x2d
 8005466:	709a      	strb	r2, [r3, #2]
 8005468:	4b52      	ldr	r3, [pc, #328]	; (80055b4 <updateMorseLetter+0x2e8>)
 800546a:	222d      	movs	r2, #45	; 0x2d
 800546c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800546e:	4b50      	ldr	r3, [pc, #320]	; (80055b0 <updateMorseLetter+0x2e4>)
 8005470:	2204      	movs	r2, #4
 8005472:	601a      	str	r2, [r3, #0]
			break;
 8005474:	e0dd      	b.n	8005632 <updateMorseLetter+0x366>
		case 'k':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8005476:	4b4f      	ldr	r3, [pc, #316]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005478:	222d      	movs	r2, #45	; 0x2d
 800547a:	701a      	strb	r2, [r3, #0]
 800547c:	4b4d      	ldr	r3, [pc, #308]	; (80055b4 <updateMorseLetter+0x2e8>)
 800547e:	222e      	movs	r2, #46	; 0x2e
 8005480:	705a      	strb	r2, [r3, #1]
 8005482:	4b4c      	ldr	r3, [pc, #304]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005484:	222d      	movs	r2, #45	; 0x2d
 8005486:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8005488:	4b49      	ldr	r3, [pc, #292]	; (80055b0 <updateMorseLetter+0x2e4>)
 800548a:	2203      	movs	r2, #3
 800548c:	601a      	str	r2, [r3, #0]
			break;
 800548e:	e0d0      	b.n	8005632 <updateMorseLetter+0x366>
		case 'l':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8005490:	4b48      	ldr	r3, [pc, #288]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005492:	222e      	movs	r2, #46	; 0x2e
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	4b47      	ldr	r3, [pc, #284]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005498:	222d      	movs	r2, #45	; 0x2d
 800549a:	705a      	strb	r2, [r3, #1]
 800549c:	4b45      	ldr	r3, [pc, #276]	; (80055b4 <updateMorseLetter+0x2e8>)
 800549e:	222e      	movs	r2, #46	; 0x2e
 80054a0:	709a      	strb	r2, [r3, #2]
 80054a2:	4b44      	ldr	r3, [pc, #272]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054a4:	222e      	movs	r2, #46	; 0x2e
 80054a6:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80054a8:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <updateMorseLetter+0x2e4>)
 80054aa:	2204      	movs	r2, #4
 80054ac:	601a      	str	r2, [r3, #0]
			break;
 80054ae:	e0c0      	b.n	8005632 <updateMorseLetter+0x366>
		case 'm':
			morseLetter[0] = '-'; morseLetter[1] = '-';
 80054b0:	4b40      	ldr	r3, [pc, #256]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054b2:	222d      	movs	r2, #45	; 0x2d
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	4b3f      	ldr	r3, [pc, #252]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054b8:	222d      	movs	r2, #45	; 0x2d
 80054ba:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 80054bc:	4b3c      	ldr	r3, [pc, #240]	; (80055b0 <updateMorseLetter+0x2e4>)
 80054be:	2202      	movs	r2, #2
 80054c0:	601a      	str	r2, [r3, #0]
			break;
 80054c2:	e0b6      	b.n	8005632 <updateMorseLetter+0x366>
		case 'n':
			morseLetter[0] = '-'; morseLetter[1] = '.';
 80054c4:	4b3b      	ldr	r3, [pc, #236]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054c6:	222d      	movs	r2, #45	; 0x2d
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	4b3a      	ldr	r3, [pc, #232]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054cc:	222e      	movs	r2, #46	; 0x2e
 80054ce:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 80054d0:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <updateMorseLetter+0x2e4>)
 80054d2:	2202      	movs	r2, #2
 80054d4:	601a      	str	r2, [r3, #0]
			break;
 80054d6:	e0ac      	b.n	8005632 <updateMorseLetter+0x366>
		case 'o':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '-';
 80054d8:	4b36      	ldr	r3, [pc, #216]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054da:	222d      	movs	r2, #45	; 0x2d
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054e0:	222d      	movs	r2, #45	; 0x2d
 80054e2:	705a      	strb	r2, [r3, #1]
 80054e4:	4b33      	ldr	r3, [pc, #204]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054e6:	222d      	movs	r2, #45	; 0x2d
 80054e8:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <updateMorseLetter+0x2e4>)
 80054ec:	2203      	movs	r2, #3
 80054ee:	601a      	str	r2, [r3, #0]
			break;
 80054f0:	e09f      	b.n	8005632 <updateMorseLetter+0x366>
		case 'p':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '.';
 80054f2:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054f4:	222e      	movs	r2, #46	; 0x2e
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	4b2e      	ldr	r3, [pc, #184]	; (80055b4 <updateMorseLetter+0x2e8>)
 80054fa:	222d      	movs	r2, #45	; 0x2d
 80054fc:	705a      	strb	r2, [r3, #1]
 80054fe:	4b2d      	ldr	r3, [pc, #180]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005500:	222d      	movs	r2, #45	; 0x2d
 8005502:	709a      	strb	r2, [r3, #2]
 8005504:	4b2b      	ldr	r3, [pc, #172]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005506:	222e      	movs	r2, #46	; 0x2e
 8005508:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800550a:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <updateMorseLetter+0x2e4>)
 800550c:	2204      	movs	r2, #4
 800550e:	601a      	str	r2, [r3, #0]
			break;
 8005510:	e08f      	b.n	8005632 <updateMorseLetter+0x366>
		case 'q':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8005512:	4b28      	ldr	r3, [pc, #160]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005514:	222d      	movs	r2, #45	; 0x2d
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	4b26      	ldr	r3, [pc, #152]	; (80055b4 <updateMorseLetter+0x2e8>)
 800551a:	222d      	movs	r2, #45	; 0x2d
 800551c:	705a      	strb	r2, [r3, #1]
 800551e:	4b25      	ldr	r3, [pc, #148]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005520:	222e      	movs	r2, #46	; 0x2e
 8005522:	709a      	strb	r2, [r3, #2]
 8005524:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005526:	222d      	movs	r2, #45	; 0x2d
 8005528:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800552a:	4b21      	ldr	r3, [pc, #132]	; (80055b0 <updateMorseLetter+0x2e4>)
 800552c:	2204      	movs	r2, #4
 800552e:	601a      	str	r2, [r3, #0]
			break;
 8005530:	e07f      	b.n	8005632 <updateMorseLetter+0x366>
		case 'r':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8005532:	4b20      	ldr	r3, [pc, #128]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005534:	222e      	movs	r2, #46	; 0x2e
 8005536:	701a      	strb	r2, [r3, #0]
 8005538:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <updateMorseLetter+0x2e8>)
 800553a:	222d      	movs	r2, #45	; 0x2d
 800553c:	705a      	strb	r2, [r3, #1]
 800553e:	4b1d      	ldr	r3, [pc, #116]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005540:	222e      	movs	r2, #46	; 0x2e
 8005542:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <updateMorseLetter+0x2e4>)
 8005546:	2203      	movs	r2, #3
 8005548:	601a      	str	r2, [r3, #0]
			break;
 800554a:	e072      	b.n	8005632 <updateMorseLetter+0x366>
		case 's':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.';
 800554c:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <updateMorseLetter+0x2e8>)
 800554e:	222e      	movs	r2, #46	; 0x2e
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005554:	222e      	movs	r2, #46	; 0x2e
 8005556:	705a      	strb	r2, [r3, #1]
 8005558:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <updateMorseLetter+0x2e8>)
 800555a:	222e      	movs	r2, #46	; 0x2e
 800555c:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 800555e:	4b14      	ldr	r3, [pc, #80]	; (80055b0 <updateMorseLetter+0x2e4>)
 8005560:	2203      	movs	r2, #3
 8005562:	601a      	str	r2, [r3, #0]
			break;
 8005564:	e065      	b.n	8005632 <updateMorseLetter+0x366>
		case 't':
			morseLetter[0] = '-';
 8005566:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005568:	222d      	movs	r2, #45	; 0x2d
 800556a:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 800556c:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <updateMorseLetter+0x2e4>)
 800556e:	2201      	movs	r2, #1
 8005570:	601a      	str	r2, [r3, #0]
			break;
 8005572:	e05e      	b.n	8005632 <updateMorseLetter+0x366>
		case 'u':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005576:	222e      	movs	r2, #46	; 0x2e
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	4b0e      	ldr	r3, [pc, #56]	; (80055b4 <updateMorseLetter+0x2e8>)
 800557c:	222e      	movs	r2, #46	; 0x2e
 800557e:	705a      	strb	r2, [r3, #1]
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005582:	222d      	movs	r2, #45	; 0x2d
 8005584:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8005586:	4b0a      	ldr	r3, [pc, #40]	; (80055b0 <updateMorseLetter+0x2e4>)
 8005588:	2203      	movs	r2, #3
 800558a:	601a      	str	r2, [r3, #0]
			break;
 800558c:	e051      	b.n	8005632 <updateMorseLetter+0x366>
		case 'v':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005590:	222e      	movs	r2, #46	; 0x2e
 8005592:	701a      	strb	r2, [r3, #0]
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <updateMorseLetter+0x2e8>)
 8005596:	222e      	movs	r2, #46	; 0x2e
 8005598:	705a      	strb	r2, [r3, #1]
 800559a:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <updateMorseLetter+0x2e8>)
 800559c:	222e      	movs	r2, #46	; 0x2e
 800559e:	709a      	strb	r2, [r3, #2]
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <updateMorseLetter+0x2e8>)
 80055a2:	222d      	movs	r2, #45	; 0x2d
 80055a4:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80055a6:	4b02      	ldr	r3, [pc, #8]	; (80055b0 <updateMorseLetter+0x2e4>)
 80055a8:	2204      	movs	r2, #4
 80055aa:	601a      	str	r2, [r3, #0]
			break;
 80055ac:	e041      	b.n	8005632 <updateMorseLetter+0x366>
 80055ae:	bf00      	nop
 80055b0:	20000364 	.word	0x20000364
 80055b4:	20000368 	.word	0x20000368
		case 'w':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-';
 80055b8:	4b21      	ldr	r3, [pc, #132]	; (8005640 <updateMorseLetter+0x374>)
 80055ba:	222e      	movs	r2, #46	; 0x2e
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	4b20      	ldr	r3, [pc, #128]	; (8005640 <updateMorseLetter+0x374>)
 80055c0:	222d      	movs	r2, #45	; 0x2d
 80055c2:	705a      	strb	r2, [r3, #1]
 80055c4:	4b1e      	ldr	r3, [pc, #120]	; (8005640 <updateMorseLetter+0x374>)
 80055c6:	222d      	movs	r2, #45	; 0x2d
 80055c8:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 80055ca:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <updateMorseLetter+0x378>)
 80055cc:	2203      	movs	r2, #3
 80055ce:	601a      	str	r2, [r3, #0]
			break;
 80055d0:	e02f      	b.n	8005632 <updateMorseLetter+0x366>
		case 'x':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 80055d2:	4b1b      	ldr	r3, [pc, #108]	; (8005640 <updateMorseLetter+0x374>)
 80055d4:	222d      	movs	r2, #45	; 0x2d
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	4b19      	ldr	r3, [pc, #100]	; (8005640 <updateMorseLetter+0x374>)
 80055da:	222e      	movs	r2, #46	; 0x2e
 80055dc:	705a      	strb	r2, [r3, #1]
 80055de:	4b18      	ldr	r3, [pc, #96]	; (8005640 <updateMorseLetter+0x374>)
 80055e0:	222e      	movs	r2, #46	; 0x2e
 80055e2:	709a      	strb	r2, [r3, #2]
 80055e4:	4b16      	ldr	r3, [pc, #88]	; (8005640 <updateMorseLetter+0x374>)
 80055e6:	222d      	movs	r2, #45	; 0x2d
 80055e8:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80055ea:	4b16      	ldr	r3, [pc, #88]	; (8005644 <updateMorseLetter+0x378>)
 80055ec:	2204      	movs	r2, #4
 80055ee:	601a      	str	r2, [r3, #0]
			break;
 80055f0:	e01f      	b.n	8005632 <updateMorseLetter+0x366>
		case 'y':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '-';
 80055f2:	4b13      	ldr	r3, [pc, #76]	; (8005640 <updateMorseLetter+0x374>)
 80055f4:	222d      	movs	r2, #45	; 0x2d
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <updateMorseLetter+0x374>)
 80055fa:	222e      	movs	r2, #46	; 0x2e
 80055fc:	705a      	strb	r2, [r3, #1]
 80055fe:	4b10      	ldr	r3, [pc, #64]	; (8005640 <updateMorseLetter+0x374>)
 8005600:	222d      	movs	r2, #45	; 0x2d
 8005602:	709a      	strb	r2, [r3, #2]
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <updateMorseLetter+0x374>)
 8005606:	222d      	movs	r2, #45	; 0x2d
 8005608:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800560a:	4b0e      	ldr	r3, [pc, #56]	; (8005644 <updateMorseLetter+0x378>)
 800560c:	2204      	movs	r2, #4
 800560e:	601a      	str	r2, [r3, #0]
			break;
 8005610:	e00f      	b.n	8005632 <updateMorseLetter+0x366>
		case 'z':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8005612:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <updateMorseLetter+0x374>)
 8005614:	222d      	movs	r2, #45	; 0x2d
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	4b09      	ldr	r3, [pc, #36]	; (8005640 <updateMorseLetter+0x374>)
 800561a:	222d      	movs	r2, #45	; 0x2d
 800561c:	705a      	strb	r2, [r3, #1]
 800561e:	4b08      	ldr	r3, [pc, #32]	; (8005640 <updateMorseLetter+0x374>)
 8005620:	222e      	movs	r2, #46	; 0x2e
 8005622:	709a      	strb	r2, [r3, #2]
 8005624:	4b06      	ldr	r3, [pc, #24]	; (8005640 <updateMorseLetter+0x374>)
 8005626:	222e      	movs	r2, #46	; 0x2e
 8005628:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <updateMorseLetter+0x378>)
 800562c:	2204      	movs	r2, #4
 800562e:	601a      	str	r2, [r3, #0]
	}
}
 8005630:	e7ff      	b.n	8005632 <updateMorseLetter+0x366>
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000368 	.word	0x20000368
 8005644:	20000364 	.word	0x20000364

08005648 <printMorseLetter>:

void printMorseLetter() {
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
	if (morseLetter[0] == '\0') {
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <printMorseLetter+0x44>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <printMorseLetter+0x16>
		printf(" *space* ");
 8005656:	480e      	ldr	r0, [pc, #56]	; (8005690 <printMorseLetter+0x48>)
 8005658:	f001 fda4 	bl	80071a4 <iprintf>
	} else {
		for (int i = 0; i < morseLetterSize; i++){
			printf("%c", morseLetter[i]);
		}
	}
}
 800565c:	e011      	b.n	8005682 <printMorseLetter+0x3a>
		for (int i = 0; i < morseLetterSize; i++){
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	e009      	b.n	8005678 <printMorseLetter+0x30>
			printf("%c", morseLetter[i]);
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <printMorseLetter+0x44>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4413      	add	r3, r2
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fdb1 	bl	80071d4 <putchar>
		for (int i = 0; i < morseLetterSize; i++){
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3301      	adds	r3, #1
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	4b06      	ldr	r3, [pc, #24]	; (8005694 <printMorseLetter+0x4c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	dbf0      	blt.n	8005664 <printMorseLetter+0x1c>
}
 8005682:	bf00      	nop
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000368 	.word	0x20000368
 8005690:	0800bbf0 	.word	0x0800bbf0
 8005694:	20000364 	.word	0x20000364

08005698 <playMorseToSpeaker>:

void playMorseToSpeaker(char *morseArray, int morseArraySize) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af02      	add	r7, sp, #8
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < morseArraySize; i++) {
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e044      	b.n	8005732 <playMorseToSpeaker+0x9a>
		if (morseArray[i] == '.') {
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b2e      	cmp	r3, #46	; 0x2e
 80056b2:	d119      	bne.n	80056e8 <playMorseToSpeaker+0x50>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *dotArray, (uint32_t) dotArraySize, DAC_ALIGN_12B_R);
 80056b4:	4b23      	ldr	r3, [pc, #140]	; (8005744 <playMorseToSpeaker+0xac>)
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <playMorseToSpeaker+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4619      	mov	r1, r3
 80056c0:	2300      	movs	r3, #0
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	460b      	mov	r3, r1
 80056c6:	2100      	movs	r1, #0
 80056c8:	4820      	ldr	r0, [pc, #128]	; (800574c <playMorseToSpeaker+0xb4>)
 80056ca:	f7fb fe79 	bl	80013c0 <HAL_DAC_Start_DMA>
			HAL_Delay(300);
 80056ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80056d2:	f7fb fd1d 	bl	8001110 <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80056d6:	2100      	movs	r1, #0
 80056d8:	481c      	ldr	r0, [pc, #112]	; (800574c <playMorseToSpeaker+0xb4>)
 80056da:	f7fb ff3d 	bl	8001558 <HAL_DAC_Stop_DMA>
			HAL_Delay(300);
 80056de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80056e2:	f7fb fd15 	bl	8001110 <HAL_Delay>
 80056e6:	e01e      	b.n	8005726 <playMorseToSpeaker+0x8e>
		} else if (morseArray[i] == '-') {
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	4413      	add	r3, r2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b2d      	cmp	r3, #45	; 0x2d
 80056f2:	d123      	bne.n	800573c <playMorseToSpeaker+0xa4>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *dashArray, (uint32_t) dashArraySize, DAC_ALIGN_12B_R);
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <playMorseToSpeaker+0xb8>)
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b16      	ldr	r3, [pc, #88]	; (8005754 <playMorseToSpeaker+0xbc>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	2300      	movs	r3, #0
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	2100      	movs	r1, #0
 8005708:	4810      	ldr	r0, [pc, #64]	; (800574c <playMorseToSpeaker+0xb4>)
 800570a:	f7fb fe59 	bl	80013c0 <HAL_DAC_Start_DMA>
			HAL_Delay(600);
 800570e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005712:	f7fb fcfd 	bl	8001110 <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8005716:	2100      	movs	r1, #0
 8005718:	480c      	ldr	r0, [pc, #48]	; (800574c <playMorseToSpeaker+0xb4>)
 800571a:	f7fb ff1d 	bl	8001558 <HAL_DAC_Stop_DMA>
			HAL_Delay(300);
 800571e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005722:	f7fb fcf5 	bl	8001110 <HAL_Delay>
		} else {
			return;
		}
		printf("\n\r");
 8005726:	480c      	ldr	r0, [pc, #48]	; (8005758 <playMorseToSpeaker+0xc0>)
 8005728:	f001 fd3c 	bl	80071a4 <iprintf>
	for (int i = 0; i < morseArraySize; i++) {
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3301      	adds	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	dbb6      	blt.n	80056a8 <playMorseToSpeaker+0x10>
 800573a:	e000      	b.n	800573e <playMorseToSpeaker+0xa6>
			return;
 800573c:	bf00      	nop
	}

}
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000370 	.word	0x20000370
 8005748:	20000010 	.word	0x20000010
 800574c:	20000210 	.word	0x20000210
 8005750:	200003c8 	.word	0x200003c8
 8005754:	20000014 	.word	0x20000014
 8005758:	0800bbfc 	.word	0x0800bbfc

0800575c <getLetterFromMorse>:

char getLetterFromMorse(char *morseArray, int morseArraySize) {
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	char nullChar = '\0';
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
	if (morseArraySize == 0) {return nullChar;}
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <getLetterFromMorse+0x18>
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	e0bc      	b.n	80058ee <getLetterFromMorse+0x192>
	switch (morseArray[0]) {
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b2d      	cmp	r3, #45	; 0x2d
 800577a:	d05e      	beq.n	800583a <getLetterFromMorse+0xde>
 800577c:	2b2e      	cmp	r3, #46	; 0x2e
 800577e:	f040 80b5 	bne.w	80058ec <getLetterFromMorse+0x190>
	case '.':
		if (morseArraySize == 1) {return 'E';}
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <getLetterFromMorse+0x30>
 8005788:	2345      	movs	r3, #69	; 0x45
 800578a:	e0b0      	b.n	80058ee <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3301      	adds	r3, #1
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	2b2d      	cmp	r3, #45	; 0x2d
 8005794:	d029      	beq.n	80057ea <getLetterFromMorse+0x8e>
 8005796:	2b2e      	cmp	r3, #46	; 0x2e
 8005798:	d14f      	bne.n	800583a <getLetterFromMorse+0xde>
		case '.':
			if (morseArraySize == 2) {return 'I';}
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d101      	bne.n	80057a4 <getLetterFromMorse+0x48>
 80057a0:	2349      	movs	r3, #73	; 0x49
 80057a2:	e0a4      	b.n	80058ee <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	3302      	adds	r3, #2
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b2d      	cmp	r3, #45	; 0x2d
 80057ac:	d011      	beq.n	80057d2 <getLetterFromMorse+0x76>
 80057ae:	2b2e      	cmp	r3, #46	; 0x2e
 80057b0:	d11b      	bne.n	80057ea <getLetterFromMorse+0x8e>
			case '.':
				if (morseArraySize == 3) {return 'S';}
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d101      	bne.n	80057bc <getLetterFromMorse+0x60>
 80057b8:	2353      	movs	r3, #83	; 0x53
 80057ba:	e098      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3303      	adds	r3, #3
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b2d      	cmp	r3, #45	; 0x2d
 80057c4:	d003      	beq.n	80057ce <getLetterFromMorse+0x72>
 80057c6:	2b2e      	cmp	r3, #46	; 0x2e
 80057c8:	d103      	bne.n	80057d2 <getLetterFromMorse+0x76>
				case '.':
					return 'H';
 80057ca:	2348      	movs	r3, #72	; 0x48
 80057cc:	e08f      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					return 'V';
 80057ce:	2356      	movs	r3, #86	; 0x56
 80057d0:	e08d      	b.n	80058ee <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'U';}
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d101      	bne.n	80057dc <getLetterFromMorse+0x80>
 80057d8:	2355      	movs	r3, #85	; 0x55
 80057da:	e088      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3303      	adds	r3, #3
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b2e      	cmp	r3, #46	; 0x2e
 80057e4:	d101      	bne.n	80057ea <getLetterFromMorse+0x8e>
				case '.':
					return 'F';
 80057e6:	2346      	movs	r3, #70	; 0x46
 80057e8:	e081      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					;
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'A';}
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d101      	bne.n	80057f4 <getLetterFromMorse+0x98>
 80057f0:	2341      	movs	r3, #65	; 0x41
 80057f2:	e07c      	b.n	80058ee <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3302      	adds	r3, #2
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b2d      	cmp	r3, #45	; 0x2d
 80057fc:	d00d      	beq.n	800581a <getLetterFromMorse+0xbe>
 80057fe:	2b2e      	cmp	r3, #46	; 0x2e
 8005800:	d11b      	bne.n	800583a <getLetterFromMorse+0xde>
			case '.':
				if (morseArraySize == 3) {return 'R';}
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d101      	bne.n	800580c <getLetterFromMorse+0xb0>
 8005808:	2352      	movs	r3, #82	; 0x52
 800580a:	e070      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3303      	adds	r3, #3
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b2e      	cmp	r3, #46	; 0x2e
 8005814:	d101      	bne.n	800581a <getLetterFromMorse+0xbe>
				case '.':
					return 'L';
 8005816:	234c      	movs	r3, #76	; 0x4c
 8005818:	e069      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					;
				}
			case '-':
				if (morseArraySize == 3) {return 'W';}
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d101      	bne.n	8005824 <getLetterFromMorse+0xc8>
 8005820:	2357      	movs	r3, #87	; 0x57
 8005822:	e064      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3303      	adds	r3, #3
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b2d      	cmp	r3, #45	; 0x2d
 800582c:	d003      	beq.n	8005836 <getLetterFromMorse+0xda>
 800582e:	2b2e      	cmp	r3, #46	; 0x2e
 8005830:	d103      	bne.n	800583a <getLetterFromMorse+0xde>
				case '.':
					return 'P';
 8005832:	2350      	movs	r3, #80	; 0x50
 8005834:	e05b      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					return 'J';
 8005836:	234a      	movs	r3, #74	; 0x4a
 8005838:	e059      	b.n	80058ee <getLetterFromMorse+0x192>
				}
			}
		}
	case '-':
		if (morseArraySize == 1) {return 'T';}
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <getLetterFromMorse+0xe8>
 8005840:	2354      	movs	r3, #84	; 0x54
 8005842:	e054      	b.n	80058ee <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3301      	adds	r3, #1
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b2d      	cmp	r3, #45	; 0x2d
 800584c:	d02d      	beq.n	80058aa <getLetterFromMorse+0x14e>
 800584e:	2b2e      	cmp	r3, #46	; 0x2e
 8005850:	d14c      	bne.n	80058ec <getLetterFromMorse+0x190>
		case '.':
			if (morseArraySize == 2) {return 'N';}
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d101      	bne.n	800585c <getLetterFromMorse+0x100>
 8005858:	234e      	movs	r3, #78	; 0x4e
 800585a:	e048      	b.n	80058ee <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3302      	adds	r3, #2
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b2d      	cmp	r3, #45	; 0x2d
 8005864:	d011      	beq.n	800588a <getLetterFromMorse+0x12e>
 8005866:	2b2e      	cmp	r3, #46	; 0x2e
 8005868:	d11f      	bne.n	80058aa <getLetterFromMorse+0x14e>
			case '.':
				if (morseArraySize == 3) {return 'D';}
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b03      	cmp	r3, #3
 800586e:	d101      	bne.n	8005874 <getLetterFromMorse+0x118>
 8005870:	2344      	movs	r3, #68	; 0x44
 8005872:	e03c      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	3303      	adds	r3, #3
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b2d      	cmp	r3, #45	; 0x2d
 800587c:	d003      	beq.n	8005886 <getLetterFromMorse+0x12a>
 800587e:	2b2e      	cmp	r3, #46	; 0x2e
 8005880:	d103      	bne.n	800588a <getLetterFromMorse+0x12e>
				case '.':
					return 'B';
 8005882:	2342      	movs	r3, #66	; 0x42
 8005884:	e033      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					return 'X';
 8005886:	2358      	movs	r3, #88	; 0x58
 8005888:	e031      	b.n	80058ee <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'K';}
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b03      	cmp	r3, #3
 800588e:	d101      	bne.n	8005894 <getLetterFromMorse+0x138>
 8005890:	234b      	movs	r3, #75	; 0x4b
 8005892:	e02c      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3303      	adds	r3, #3
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b2d      	cmp	r3, #45	; 0x2d
 800589c:	d003      	beq.n	80058a6 <getLetterFromMorse+0x14a>
 800589e:	2b2e      	cmp	r3, #46	; 0x2e
 80058a0:	d103      	bne.n	80058aa <getLetterFromMorse+0x14e>
				case '.':
					return 'C';
 80058a2:	2343      	movs	r3, #67	; 0x43
 80058a4:	e023      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					return 'Y';
 80058a6:	2359      	movs	r3, #89	; 0x59
 80058a8:	e021      	b.n	80058ee <getLetterFromMorse+0x192>
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'M';}
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d101      	bne.n	80058b4 <getLetterFromMorse+0x158>
 80058b0:	234d      	movs	r3, #77	; 0x4d
 80058b2:	e01c      	b.n	80058ee <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3302      	adds	r3, #2
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b2d      	cmp	r3, #45	; 0x2d
 80058bc:	d011      	beq.n	80058e2 <getLetterFromMorse+0x186>
 80058be:	2b2e      	cmp	r3, #46	; 0x2e
 80058c0:	d114      	bne.n	80058ec <getLetterFromMorse+0x190>
			case '.':
				if (morseArraySize == 3) {return 'G';}
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d101      	bne.n	80058cc <getLetterFromMorse+0x170>
 80058c8:	2347      	movs	r3, #71	; 0x47
 80058ca:	e010      	b.n	80058ee <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3303      	adds	r3, #3
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	2b2d      	cmp	r3, #45	; 0x2d
 80058d4:	d003      	beq.n	80058de <getLetterFromMorse+0x182>
 80058d6:	2b2e      	cmp	r3, #46	; 0x2e
 80058d8:	d103      	bne.n	80058e2 <getLetterFromMorse+0x186>
				case '.':
					return 'Z';
 80058da:	235a      	movs	r3, #90	; 0x5a
 80058dc:	e007      	b.n	80058ee <getLetterFromMorse+0x192>
				case '-':
					return 'Q';
 80058de:	2351      	movs	r3, #81	; 0x51
 80058e0:	e005      	b.n	80058ee <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'O';}
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d101      	bne.n	80058ec <getLetterFromMorse+0x190>
 80058e8:	234f      	movs	r3, #79	; 0x4f
 80058ea:	e000      	b.n	80058ee <getLetterFromMorse+0x192>
				}
			}
		}
	}

	return nullChar;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
//
//
//		default:
//			return nullChar;
//	}
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr
	...

080058fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/*
	 * mode 0 for taking input from terminal, outputting Morse code
	 * mode 1 for taking input of array for Morse letter, displaying letter to terminal
	 */
mode = 0;
 8005902:	4b89      	ldr	r3, [pc, #548]	; (8005b28 <main+0x22c>)
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]


morseInputArray[0] = '\0';
 8005908:	4b88      	ldr	r3, [pc, #544]	; (8005b2c <main+0x230>)
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
morseInputArray[1] = '\0';
 800590e:	4b87      	ldr	r3, [pc, #540]	; (8005b2c <main+0x230>)
 8005910:	2200      	movs	r2, #0
 8005912:	705a      	strb	r2, [r3, #1]
morseInputArray[2] = '\0';
 8005914:	4b85      	ldr	r3, [pc, #532]	; (8005b2c <main+0x230>)
 8005916:	2200      	movs	r2, #0
 8005918:	709a      	strb	r2, [r3, #2]
morseInputArray[3] = '\0';
 800591a:	4b84      	ldr	r3, [pc, #528]	; (8005b2c <main+0x230>)
 800591c:	2200      	movs	r2, #0
 800591e:	70da      	strb	r2, [r3, #3]
morseInputArraySize = 0;
 8005920:	4b83      	ldr	r3, [pc, #524]	; (8005b30 <main+0x234>)
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]


letterToPrint;

space[0] = " ";
 8005926:	4b83      	ldr	r3, [pc, #524]	; (8005b34 <main+0x238>)
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4b83      	ldr	r3, [pc, #524]	; (8005b38 <main+0x23c>)
 800592c:	701a      	strb	r2, [r3, #0]

notSpace = 1; // 1 is true
 800592e:	4b83      	ldr	r3, [pc, #524]	; (8005b3c <main+0x240>)
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005934:	f7fb fb78 	bl	8001028 <HAL_Init>

  /* USER CODE BEGIN Init */
  // for scanf
  setvbuf(stdin, NULL, _IONBF, 0);
 8005938:	4b81      	ldr	r3, [pc, #516]	; (8005b40 <main+0x244>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6858      	ldr	r0, [r3, #4]
 800593e:	2300      	movs	r3, #0
 8005940:	2202      	movs	r2, #2
 8005942:	2100      	movs	r1, #0
 8005944:	f001 fc74 	bl	8007230 <setvbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005948:	f000 f924 	bl	8005b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800594c:	f000 fa6c 	bl	8005e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8005950:	f000 fa40 	bl	8005dd4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8005954:	f000 f9f2 	bl	8005d3c <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8005958:	f000 f96e 	bl	8005c38 <MX_DAC1_Init>
  MX_TIM2_Init();
 800595c:	f000 f9a0 	bl	8005ca0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 8005960:	4878      	ldr	r0, [pc, #480]	; (8005b44 <main+0x248>)
 8005962:	f7fe f9dd 	bl	8003d20 <HAL_TIM_Base_Start_IT>

  /*
   * Initialize beeps
   */
  for (int i = 0; i < dotArraySize; i++) {
 8005966:	2300      	movs	r3, #0
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	e02a      	b.n	80059c2 <main+0xc6>
	  dotArray[i] = (arm_sin_f32(2*PI*i/dotArraySize)+1)*(1365); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005976:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8005b48 <main+0x24c>
 800597a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800597e:	4b73      	ldr	r3, [pc, #460]	; (8005b4c <main+0x250>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	ee07 3a90 	vmov	s15, r3
 8005986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800598a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800598e:	eeb0 0a66 	vmov.f32	s0, s13
 8005992:	f000 fd15 	bl	80063c0 <arm_sin_f32>
 8005996:	eef0 7a40 	vmov.f32	s15, s0
 800599a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800599e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059a2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8005b50 <main+0x254>
 80059a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ae:	ee17 3a90 	vmov	r3, s15
 80059b2:	b299      	uxth	r1, r3
 80059b4:	4a67      	ldr	r2, [pc, #412]	; (8005b54 <main+0x258>)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < dotArraySize; i++) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3301      	adds	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	4b62      	ldr	r3, [pc, #392]	; (8005b4c <main+0x250>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	dbcf      	blt.n	800596c <main+0x70>
  }
  for (int i = 0; i < dashArraySize; i++) {
 80059cc:	2300      	movs	r3, #0
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	e02a      	b.n	8005a28 <main+0x12c>
  	  dashArray[i] = (arm_sin_f32(2*PI*i/dashArraySize)+1)*(1365); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059dc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005b48 <main+0x24c>
 80059e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059e4:	4b5c      	ldr	r3, [pc, #368]	; (8005b58 <main+0x25c>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059f4:	eeb0 0a66 	vmov.f32	s0, s13
 80059f8:	f000 fce2 	bl	80063c0 <arm_sin_f32>
 80059fc:	eef0 7a40 	vmov.f32	s15, s0
 8005a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a08:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005b50 <main+0x254>
 8005a0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a14:	ee17 3a90 	vmov	r3, s15
 8005a18:	b299      	uxth	r1, r3
 8005a1a:	4a50      	ldr	r2, [pc, #320]	; (8005b5c <main+0x260>)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < dashArraySize; i++) {
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	3301      	adds	r3, #1
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4b4b      	ldr	r3, [pc, #300]	; (8005b58 <main+0x25c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	dbcf      	blt.n	80059d2 <main+0xd6>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (mode == 0) { // taking input from terminal, outputting Morse code
 8005a32:	4b3d      	ldr	r3, [pc, #244]	; (8005b28 <main+0x22c>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d123      	bne.n	8005a82 <main+0x186>
		  printf("Input a character: ");
 8005a3a:	4849      	ldr	r0, [pc, #292]	; (8005b60 <main+0x264>)
 8005a3c:	f001 fbb2 	bl	80071a4 <iprintf>
		  scanf("%c", &inputChar);
 8005a40:	4948      	ldr	r1, [pc, #288]	; (8005b64 <main+0x268>)
 8005a42:	4849      	ldr	r0, [pc, #292]	; (8005b68 <main+0x26c>)
 8005a44:	f001 fbdc 	bl	8007200 <iscanf>
		  printf("\n\rYou entered: %c \n\r", inputChar); // print character
 8005a48:	4b46      	ldr	r3, [pc, #280]	; (8005b64 <main+0x268>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4847      	ldr	r0, [pc, #284]	; (8005b6c <main+0x270>)
 8005a50:	f001 fba8 	bl	80071a4 <iprintf>
		  //printf("ASCII Character: %d \n\r", inputChar); // print ASCII character

		  updateMorseLetter(inputChar);
 8005a54:	4b43      	ldr	r3, [pc, #268]	; (8005b64 <main+0x268>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fc37 	bl	80052cc <updateMorseLetter>
		  printf("Morse Translation: ");
 8005a5e:	4844      	ldr	r0, [pc, #272]	; (8005b70 <main+0x274>)
 8005a60:	f001 fba0 	bl	80071a4 <iprintf>
		  printMorseLetter();
 8005a64:	f7ff fdf0 	bl	8005648 <printMorseLetter>
		  printf("\n\r");
 8005a68:	4842      	ldr	r0, [pc, #264]	; (8005b74 <main+0x278>)
 8005a6a:	f001 fb9b 	bl	80071a4 <iprintf>

		  playMorseToSpeaker(morseLetter, morseLetterSize);
 8005a6e:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <main+0x27c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	4841      	ldr	r0, [pc, #260]	; (8005b7c <main+0x280>)
 8005a76:	f7ff fe0f 	bl	8005698 <playMorseToSpeaker>
		  HAL_Delay(1000);
 8005a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a7e:	f7fb fb47 	bl	8001110 <HAL_Delay>

	  }

	  if (mode == 1) { // taking input of array for Morse letter, displaying letter to terminal
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <main+0x22c>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d1d3      	bne.n	8005a32 <main+0x136>
		  notSpace = 1;
 8005a8a:	4b2c      	ldr	r3, [pc, #176]	; (8005b3c <main+0x240>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	701a      	strb	r2, [r3, #0]
		  morseInputArraySize = 0;
 8005a90:	4b27      	ldr	r3, [pc, #156]	; (8005b30 <main+0x234>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
		  morseInputArray[0] = '\0'; morseInputArray[1] = '\0'; morseInputArray[2] = '\0'; morseInputArray[3] = '\0';
 8005a96:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <main+0x230>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <main+0x230>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	705a      	strb	r2, [r3, #1]
 8005aa2:	4b22      	ldr	r3, [pc, #136]	; (8005b2c <main+0x230>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	709a      	strb	r2, [r3, #2]
 8005aa8:	4b20      	ldr	r3, [pc, #128]	; (8005b2c <main+0x230>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	70da      	strb	r2, [r3, #3]
		  printf("\n\rInput Morse (. and - with a space at the end)\n\r");
 8005aae:	4834      	ldr	r0, [pc, #208]	; (8005b80 <main+0x284>)
 8005ab0:	f001 fb78 	bl	80071a4 <iprintf>

		  while (notSpace == 1) {
 8005ab4:	e01f      	b.n	8005af6 <main+0x1fa>
			  scanf("%c", &inputChar);
 8005ab6:	492b      	ldr	r1, [pc, #172]	; (8005b64 <main+0x268>)
 8005ab8:	482b      	ldr	r0, [pc, #172]	; (8005b68 <main+0x26c>)
 8005aba:	f001 fba1 	bl	8007200 <iscanf>
			  if (inputChar == 32) {
 8005abe:	4b29      	ldr	r3, [pc, #164]	; (8005b64 <main+0x268>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b20      	cmp	r3, #32
 8005ac4:	d106      	bne.n	8005ad4 <main+0x1d8>
				  printf("\n\rSpace Inputed\n\r");
 8005ac6:	482f      	ldr	r0, [pc, #188]	; (8005b84 <main+0x288>)
 8005ac8:	f001 fb6c 	bl	80071a4 <iprintf>
				  notSpace = 0;
 8005acc:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <main+0x240>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
				  break;
 8005ad2:	e014      	b.n	8005afe <main+0x202>
			  }
			  printf("You entered: %c\n\r", inputChar);
 8005ad4:	4b23      	ldr	r3, [pc, #140]	; (8005b64 <main+0x268>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	4619      	mov	r1, r3
 8005ada:	482b      	ldr	r0, [pc, #172]	; (8005b88 <main+0x28c>)
 8005adc:	f001 fb62 	bl	80071a4 <iprintf>
			  morseInputArray[morseInputArraySize] = inputChar;
 8005ae0:	4b13      	ldr	r3, [pc, #76]	; (8005b30 <main+0x234>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <main+0x268>)
 8005ae6:	7811      	ldrb	r1, [r2, #0]
 8005ae8:	4a10      	ldr	r2, [pc, #64]	; (8005b2c <main+0x230>)
 8005aea:	54d1      	strb	r1, [r2, r3]
			  morseInputArraySize = morseInputArraySize+1;
 8005aec:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <main+0x234>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3301      	adds	r3, #1
 8005af2:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <main+0x234>)
 8005af4:	6013      	str	r3, [r2, #0]
		  while (notSpace == 1) {
 8005af6:	4b11      	ldr	r3, [pc, #68]	; (8005b3c <main+0x240>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d0db      	beq.n	8005ab6 <main+0x1ba>
		  }
		  letterToPrint = getLetterFromMorse(morseInputArray, morseInputArraySize);
 8005afe:	4b0c      	ldr	r3, [pc, #48]	; (8005b30 <main+0x234>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4619      	mov	r1, r3
 8005b04:	4809      	ldr	r0, [pc, #36]	; (8005b2c <main+0x230>)
 8005b06:	f7ff fe29 	bl	800575c <getLetterFromMorse>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4b1f      	ldr	r3, [pc, #124]	; (8005b8c <main+0x290>)
 8005b10:	701a      	strb	r2, [r3, #0]

		  printf("Letter from  input: %c \n\r", letterToPrint);
 8005b12:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <main+0x290>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	4619      	mov	r1, r3
 8005b18:	481d      	ldr	r0, [pc, #116]	; (8005b90 <main+0x294>)
 8005b1a:	f001 fb43 	bl	80071a4 <iprintf>
		  HAL_Delay(500);
 8005b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b22:	f7fb faf5 	bl	8001110 <HAL_Delay>
	  if (mode == 0) { // taking input from terminal, outputting Morse code
 8005b26:	e784      	b.n	8005a32 <main+0x136>
 8005b28:	2000036c 	.word	0x2000036c
 8005b2c:	20000008 	.word	0x20000008
 8005b30:	2000000c 	.word	0x2000000c
 8005b34:	0800bc00 	.word	0x0800bc00
 8005b38:	20000424 	.word	0x20000424
 8005b3c:	20000425 	.word	0x20000425
 8005b40:	2000001c 	.word	0x2000001c
 8005b44:	20000284 	.word	0x20000284
 8005b48:	40c90fdb 	.word	0x40c90fdb
 8005b4c:	20000010 	.word	0x20000010
 8005b50:	44aaa000 	.word	0x44aaa000
 8005b54:	20000370 	.word	0x20000370
 8005b58:	20000014 	.word	0x20000014
 8005b5c:	200003c8 	.word	0x200003c8
 8005b60:	0800bc04 	.word	0x0800bc04
 8005b64:	20000360 	.word	0x20000360
 8005b68:	0800bc18 	.word	0x0800bc18
 8005b6c:	0800bc1c 	.word	0x0800bc1c
 8005b70:	0800bc34 	.word	0x0800bc34
 8005b74:	0800bbfc 	.word	0x0800bbfc
 8005b78:	20000364 	.word	0x20000364
 8005b7c:	20000368 	.word	0x20000368
 8005b80:	0800bc48 	.word	0x0800bc48
 8005b84:	0800bc7c 	.word	0x0800bc7c
 8005b88:	0800bc90 	.word	0x0800bc90
 8005b8c:	20000420 	.word	0x20000420
 8005b90:	0800bca4 	.word	0x0800bca4

08005b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b096      	sub	sp, #88	; 0x58
 8005b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b9a:	f107 0314 	add.w	r3, r7, #20
 8005b9e:	2244      	movs	r2, #68	; 0x44
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fc7c 	bl	80064a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ba8:	463b      	mov	r3, r7
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
 8005bae:	605a      	str	r2, [r3, #4]
 8005bb0:	609a      	str	r2, [r3, #8]
 8005bb2:	60da      	str	r2, [r3, #12]
 8005bb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f7fc fbc6 	bl	8002348 <HAL_PWREx_ControlVoltageScaling>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d001      	beq.n	8005bc6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8005bc2:	f000 f9ab 	bl	8005f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005bd2:	2360      	movs	r3, #96	; 0x60
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005bde:	2301      	movs	r3, #1
 8005be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8005be2:	233c      	movs	r3, #60	; 0x3c
 8005be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005be6:	2302      	movs	r3, #2
 8005be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005bea:	2302      	movs	r3, #2
 8005bec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bf2:	f107 0314 	add.w	r3, r7, #20
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fc fc4a 	bl	8002490 <HAL_RCC_OscConfig>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8005c02:	f000 f98b 	bl	8005f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c06:	230f      	movs	r3, #15
 8005c08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005c16:	2300      	movs	r3, #0
 8005c18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	2105      	movs	r1, #5
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fd f850 	bl	8002cc4 <HAL_RCC_ClockConfig>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005c2a:	f000 f977 	bl	8005f1c <Error_Handler>
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3758      	adds	r7, #88	; 0x58
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08a      	sub	sp, #40	; 0x28
 8005c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005c3e:	463b      	mov	r3, r7
 8005c40:	2228      	movs	r2, #40	; 0x28
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fc2b 	bl	80064a0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8005c4a:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <MX_DAC1_Init+0x60>)
 8005c4c:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <MX_DAC1_Init+0x64>)
 8005c4e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005c50:	4811      	ldr	r0, [pc, #68]	; (8005c98 <MX_DAC1_Init+0x60>)
 8005c52:	f7fb fb92 	bl	800137a <HAL_DAC_Init>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005c5c:	f000 f95e 	bl	8005f1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8005c64:	230a      	movs	r3, #10
 8005c66:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005c76:	2300      	movs	r3, #0
 8005c78:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005c7a:	463b      	mov	r3, r7
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4805      	ldr	r0, [pc, #20]	; (8005c98 <MX_DAC1_Init+0x60>)
 8005c82:	f7fb fccd 	bl	8001620 <HAL_DAC_ConfigChannel>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8005c8c:	f000 f946 	bl	8005f1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005c90:	bf00      	nop
 8005c92:	3728      	adds	r7, #40	; 0x28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	20000210 	.word	0x20000210
 8005c9c:	40007400 	.word	0x40007400

08005ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ca6:	f107 0310 	add.w	r3, r7, #16
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	605a      	str	r2, [r3, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cb4:	1d3b      	adds	r3, r7, #4
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	605a      	str	r2, [r3, #4]
 8005cbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005cbe:	4b1e      	ldr	r3, [pc, #120]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cc4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005cc6:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ccc:	4b1a      	ldr	r3, [pc, #104]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8005cd2:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005cd4:	f640 22a1 	movw	r2, #2721	; 0xaa1
 8005cd8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cda:	4b17      	ldr	r3, [pc, #92]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ce0:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005ce6:	4814      	ldr	r0, [pc, #80]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005ce8:	f7fd ffc2 	bl	8003c70 <HAL_TIM_Base_Init>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005cf2:	f000 f913 	bl	8005f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cfa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	4619      	mov	r1, r3
 8005d02:	480d      	ldr	r0, [pc, #52]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005d04:	f7fe f87c 	bl	8003e00 <HAL_TIM_ConfigClockSource>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005d0e:	f000 f905 	bl	8005f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d12:	2320      	movs	r3, #32
 8005d14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d1a:	1d3b      	adds	r3, r7, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4806      	ldr	r0, [pc, #24]	; (8005d38 <MX_TIM2_Init+0x98>)
 8005d20:	f7fe fa6c 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005d2a:	f000 f8f7 	bl	8005f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d2e:	bf00      	nop
 8005d30:	3720      	adds	r7, #32
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000284 	.word	0x20000284

08005d3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d40:	4b22      	ldr	r3, [pc, #136]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d42:	4a23      	ldr	r2, [pc, #140]	; (8005dd0 <MX_USART1_UART_Init+0x94>)
 8005d44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d46:	4b21      	ldr	r3, [pc, #132]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d4e:	4b1f      	ldr	r3, [pc, #124]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d54:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d5a:	4b1c      	ldr	r3, [pc, #112]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d60:	4b1a      	ldr	r3, [pc, #104]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d62:	220c      	movs	r2, #12
 8005d64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d66:	4b19      	ldr	r3, [pc, #100]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d6c:	4b17      	ldr	r3, [pc, #92]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d72:	4b16      	ldr	r3, [pc, #88]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d78:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d7e:	4b13      	ldr	r3, [pc, #76]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d84:	4811      	ldr	r0, [pc, #68]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d86:	f7fe fac1 	bl	800430c <HAL_UART_Init>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005d90:	f000 f8c4 	bl	8005f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d94:	2100      	movs	r1, #0
 8005d96:	480d      	ldr	r0, [pc, #52]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005d98:	f7ff f95e 	bl	8005058 <HAL_UARTEx_SetTxFifoThreshold>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005da2:	f000 f8bb 	bl	8005f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005da6:	2100      	movs	r1, #0
 8005da8:	4808      	ldr	r0, [pc, #32]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005daa:	f7ff f993 	bl	80050d4 <HAL_UARTEx_SetRxFifoThreshold>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005db4:	f000 f8b2 	bl	8005f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005db8:	4804      	ldr	r0, [pc, #16]	; (8005dcc <MX_USART1_UART_Init+0x90>)
 8005dba:	f7ff f914 	bl	8004fe6 <HAL_UARTEx_DisableFifoMode>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005dc4:	f000 f8aa 	bl	8005f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005dc8:	bf00      	nop
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	200002d0 	.word	0x200002d0
 8005dd0:	40013800 	.word	0x40013800

08005dd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005dda:	4b12      	ldr	r3, [pc, #72]	; (8005e24 <MX_DMA_Init+0x50>)
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <MX_DMA_Init+0x50>)
 8005de0:	f043 0304 	orr.w	r3, r3, #4
 8005de4:	6493      	str	r3, [r2, #72]	; 0x48
 8005de6:	4b0f      	ldr	r3, [pc, #60]	; (8005e24 <MX_DMA_Init+0x50>)
 8005de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	607b      	str	r3, [r7, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005df2:	4b0c      	ldr	r3, [pc, #48]	; (8005e24 <MX_DMA_Init+0x50>)
 8005df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df6:	4a0b      	ldr	r2, [pc, #44]	; (8005e24 <MX_DMA_Init+0x50>)
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	6493      	str	r3, [r2, #72]	; 0x48
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <MX_DMA_Init+0x50>)
 8005e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e02:	f003 0301 	and.w	r3, r3, #1
 8005e06:	603b      	str	r3, [r7, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	200b      	movs	r0, #11
 8005e10:	f7fb fa7d 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005e14:	200b      	movs	r0, #11
 8005e16:	f7fb fa96 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 8005e1a:	bf00      	nop
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40021000 	.word	0x40021000

08005e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e2e:	f107 030c 	add.w	r3, r7, #12
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	60da      	str	r2, [r3, #12]
 8005e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e3e:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e42:	4a33      	ldr	r2, [pc, #204]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e44:	f043 0304 	orr.w	r3, r3, #4
 8005e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e4a:	4b31      	ldr	r3, [pc, #196]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e56:	4b2e      	ldr	r3, [pc, #184]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5a:	4a2d      	ldr	r2, [pc, #180]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e5c:	f043 0301 	orr.w	r3, r3, #1
 8005e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e62:	4b2b      	ldr	r3, [pc, #172]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e6e:	4b28      	ldr	r3, [pc, #160]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e72:	4a27      	ldr	r2, [pc, #156]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e74:	f043 0302 	orr.w	r3, r3, #2
 8005e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e7a:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <MX_GPIO_Init+0xe8>)
 8005e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	603b      	str	r3, [r7, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8005e86:	2200      	movs	r2, #0
 8005e88:	2120      	movs	r1, #32
 8005e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e8e:	f7fc f9f1 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8005e92:	2200      	movs	r2, #0
 8005e94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e98:	481e      	ldr	r0, [pc, #120]	; (8005f14 <MX_GPIO_Init+0xec>)
 8005e9a:	f7fc f9eb 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8005e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005ea4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8005eae:	f107 030c 	add.w	r3, r7, #12
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4818      	ldr	r0, [pc, #96]	; (8005f18 <MX_GPIO_Init+0xf0>)
 8005eb6:	f7fc f84b 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 8005eba:	2320      	movs	r3, #32
 8005ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 8005eca:	f107 030c 	add.w	r3, r7, #12
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ed4:	f7fc f83c 	bl	8001f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8005ed8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4808      	ldr	r0, [pc, #32]	; (8005f14 <MX_GPIO_Init+0xec>)
 8005ef2:	f7fc f82d 	bl	8001f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2100      	movs	r1, #0
 8005efa:	2028      	movs	r0, #40	; 0x28
 8005efc:	f7fb fa07 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005f00:	2028      	movs	r0, #40	; 0x28
 8005f02:	f7fb fa20 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 8005f06:	bf00      	nop
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	40021000 	.word	0x40021000
 8005f14:	48000400 	.word	0x48000400
 8005f18:	48000800 	.word	0x48000800

08005f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005f20:	b672      	cpsid	i
}
 8005f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005f24:	e7fe      	b.n	8005f24 <Error_Handler+0x8>
	...

08005f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <HAL_MspInit+0x44>)
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <HAL_MspInit+0x44>)
 8005f34:	f043 0301 	orr.w	r3, r3, #1
 8005f38:	6613      	str	r3, [r2, #96]	; 0x60
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <HAL_MspInit+0x44>)
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f46:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <HAL_MspInit+0x44>)
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <HAL_MspInit+0x44>)
 8005f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f50:	6593      	str	r3, [r2, #88]	; 0x58
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <HAL_MspInit+0x44>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40021000 	.word	0x40021000

08005f70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08a      	sub	sp, #40	; 0x28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	605a      	str	r2, [r3, #4]
 8005f82:	609a      	str	r2, [r3, #8]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2b      	ldr	r2, [pc, #172]	; (800603c <HAL_DAC_MspInit+0xcc>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d14f      	bne.n	8006032 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005f92:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <HAL_DAC_MspInit+0xd0>)
 8005f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f96:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <HAL_DAC_MspInit+0xd0>)
 8005f98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f9c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f9e:	4b28      	ldr	r3, [pc, #160]	; (8006040 <HAL_DAC_MspInit+0xd0>)
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005faa:	4b25      	ldr	r3, [pc, #148]	; (8006040 <HAL_DAC_MspInit+0xd0>)
 8005fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fae:	4a24      	ldr	r2, [pc, #144]	; (8006040 <HAL_DAC_MspInit+0xd0>)
 8005fb0:	f043 0301 	orr.w	r3, r3, #1
 8005fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <HAL_DAC_MspInit+0xd0>)
 8005fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005fc2:	2310      	movs	r3, #16
 8005fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fce:	f107 0314 	add.w	r3, r7, #20
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005fd8:	f7fb ffba 	bl	8001f50 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8005fdc:	4b19      	ldr	r3, [pc, #100]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8005fde:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <HAL_DAC_MspInit+0xd8>)
 8005fe0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8005fe2:	4b18      	ldr	r3, [pc, #96]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8005fe4:	2206      	movs	r2, #6
 8005fe6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fe8:	4b16      	ldr	r3, [pc, #88]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8005fea:	2210      	movs	r2, #16
 8005fec:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005ff4:	4b13      	ldr	r3, [pc, #76]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8005ff6:	2280      	movs	r2, #128	; 0x80
 8005ff8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8005ffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006000:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8006004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006008:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800600a:	4b0e      	ldr	r3, [pc, #56]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 800600c:	2220      	movs	r2, #32
 800600e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8006012:	2200      	movs	r2, #0
 8006014:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006016:	480b      	ldr	r0, [pc, #44]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 8006018:	f7fb fccc 	bl	80019b4 <HAL_DMA_Init>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006022:	f7ff ff7b 	bl	8005f1c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a06      	ldr	r2, [pc, #24]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	4a05      	ldr	r2, [pc, #20]	; (8006044 <HAL_DAC_MspInit+0xd4>)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8006032:	bf00      	nop
 8006034:	3728      	adds	r7, #40	; 0x28
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40007400 	.word	0x40007400
 8006040:	40021000 	.word	0x40021000
 8006044:	20000224 	.word	0x20000224
 8006048:	40020008 	.word	0x40020008

0800604c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d10b      	bne.n	8006076 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_TIM_Base_MspInit+0x38>)
 8006060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006062:	4a08      	ldr	r2, [pc, #32]	; (8006084 <HAL_TIM_Base_MspInit+0x38>)
 8006064:	f043 0301 	orr.w	r3, r3, #1
 8006068:	6593      	str	r3, [r2, #88]	; 0x58
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_TIM_Base_MspInit+0x38>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006076:	bf00      	nop
 8006078:	3714      	adds	r7, #20
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40021000 	.word	0x40021000

08006088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b0ae      	sub	sp, #184	; 0xb8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006090:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80060a0:	f107 0310 	add.w	r3, r7, #16
 80060a4:	2294      	movs	r2, #148	; 0x94
 80060a6:	2100      	movs	r1, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f9f9 	bl	80064a0 <memset>
  if(huart->Instance==USART1)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a21      	ldr	r2, [pc, #132]	; (8006138 <HAL_UART_MspInit+0xb0>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d13a      	bne.n	800612e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80060b8:	2301      	movs	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80060bc:	2300      	movs	r3, #0
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80060c0:	f107 0310 	add.w	r3, r7, #16
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7fd f8bb 	bl	8003240 <HAL_RCCEx_PeriphCLKConfig>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80060d0:	f7ff ff24 	bl	8005f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <HAL_UART_MspInit+0xb4>)
 80060d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d8:	4a18      	ldr	r2, [pc, #96]	; (800613c <HAL_UART_MspInit+0xb4>)
 80060da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060de:	6613      	str	r3, [r2, #96]	; 0x60
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <HAL_UART_MspInit+0xb4>)
 80060e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_UART_MspInit+0xb4>)
 80060ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f0:	4a12      	ldr	r2, [pc, #72]	; (800613c <HAL_UART_MspInit+0xb4>)
 80060f2:	f043 0302 	orr.w	r3, r3, #2
 80060f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060f8:	4b10      	ldr	r3, [pc, #64]	; (800613c <HAL_UART_MspInit+0xb4>)
 80060fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006104:	23c0      	movs	r3, #192	; 0xc0
 8006106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610a:	2302      	movs	r3, #2
 800610c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006116:	2303      	movs	r3, #3
 8006118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800611c:	2307      	movs	r3, #7
 800611e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006122:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006126:	4619      	mov	r1, r3
 8006128:	4805      	ldr	r0, [pc, #20]	; (8006140 <HAL_UART_MspInit+0xb8>)
 800612a:	f7fb ff11 	bl	8001f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800612e:	bf00      	nop
 8006130:	37b8      	adds	r7, #184	; 0xb8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40013800 	.word	0x40013800
 800613c:	40021000 	.word	0x40021000
 8006140:	48000400 	.word	0x48000400

08006144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006148:	e7fe      	b.n	8006148 <NMI_Handler+0x4>

0800614a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800614a:	b480      	push	{r7}
 800614c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800614e:	e7fe      	b.n	800614e <HardFault_Handler+0x4>

08006150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006154:	e7fe      	b.n	8006154 <MemManage_Handler+0x4>

08006156 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006156:	b480      	push	{r7}
 8006158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800615a:	e7fe      	b.n	800615a <BusFault_Handler+0x4>

0800615c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006160:	e7fe      	b.n	8006160 <UsageFault_Handler+0x4>

08006162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006162:	b480      	push	{r7}
 8006164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006174:	bf00      	nop
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800617e:	b480      	push	{r7}
 8006180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006190:	f7fa ff9e 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}

08006198 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800619c:	4802      	ldr	r0, [pc, #8]	; (80061a8 <DMA1_Channel1_IRQHandler+0x10>)
 800619e:	f7fb fd88 	bl	8001cb2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000224 	.word	0x20000224

080061ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 80061b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80061b4:	f7fc f890 	bl	80022d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80061b8:	bf00      	nop
 80061ba:	bd80      	pop	{r7, pc}

080061bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
  return 1;
 80061c0:	2301      	movs	r3, #1
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <_kill>:

int _kill(int pid, int sig)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80061d6:	f000 f939 	bl	800644c <__errno>
 80061da:	4603      	mov	r3, r0
 80061dc:	2216      	movs	r2, #22
 80061de:	601a      	str	r2, [r3, #0]
  return -1;
 80061e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <_exit>:

void _exit (int status)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80061f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff ffe7 	bl	80061cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80061fe:	e7fe      	b.n	80061fe <_exit+0x12>

08006200 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800620c:	2300      	movs	r3, #0
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e00a      	b.n	8006228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006212:	f7fe fffd 	bl	8005210 <__io_getchar>
 8006216:	4601      	mov	r1, r0
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	1c5a      	adds	r2, r3, #1
 800621c:	60ba      	str	r2, [r7, #8]
 800621e:	b2ca      	uxtb	r2, r1
 8006220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	3301      	adds	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	429a      	cmp	r2, r3
 800622e:	dbf0      	blt.n	8006212 <_read+0x12>
  }

  return len;
 8006230:	687b      	ldr	r3, [r7, #4]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b086      	sub	sp, #24
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
 800624a:	e009      	b.n	8006260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	60ba      	str	r2, [r7, #8]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe ffc9 	bl	80051ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	3301      	adds	r3, #1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	dbf1      	blt.n	800624c <_write+0x12>
  }
  return len;
 8006268:	687b      	ldr	r3, [r7, #4]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <_close>:

int _close(int file)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800627a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800627e:	4618      	mov	r0, r3
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800629a:	605a      	str	r2, [r3, #4]
  return 0;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_isatty>:

int _isatty(int file)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80062b2:	2301      	movs	r3, #1
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062e4:	4a14      	ldr	r2, [pc, #80]	; (8006338 <_sbrk+0x5c>)
 80062e6:	4b15      	ldr	r3, [pc, #84]	; (800633c <_sbrk+0x60>)
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062f0:	4b13      	ldr	r3, [pc, #76]	; (8006340 <_sbrk+0x64>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d102      	bne.n	80062fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062f8:	4b11      	ldr	r3, [pc, #68]	; (8006340 <_sbrk+0x64>)
 80062fa:	4a12      	ldr	r2, [pc, #72]	; (8006344 <_sbrk+0x68>)
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062fe:	4b10      	ldr	r3, [pc, #64]	; (8006340 <_sbrk+0x64>)
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4413      	add	r3, r2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	429a      	cmp	r2, r3
 800630a:	d207      	bcs.n	800631c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800630c:	f000 f89e 	bl	800644c <__errno>
 8006310:	4603      	mov	r3, r0
 8006312:	220c      	movs	r2, #12
 8006314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800631a:	e009      	b.n	8006330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <_sbrk+0x64>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <_sbrk+0x64>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4413      	add	r3, r2
 800632a:	4a05      	ldr	r2, [pc, #20]	; (8006340 <_sbrk+0x64>)
 800632c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	200a0000 	.word	0x200a0000
 800633c:	00000400 	.word	0x00000400
 8006340:	20000428 	.word	0x20000428
 8006344:	20000440 	.word	0x20000440

08006348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800634c:	4b06      	ldr	r3, [pc, #24]	; (8006368 <SystemInit+0x20>)
 800634e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006352:	4a05      	ldr	r2, [pc, #20]	; (8006368 <SystemInit+0x20>)
 8006354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800635c:	bf00      	nop
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800636c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006370:	f7ff ffea 	bl	8006348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006374:	480c      	ldr	r0, [pc, #48]	; (80063a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006376:	490d      	ldr	r1, [pc, #52]	; (80063ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8006378:	4a0d      	ldr	r2, [pc, #52]	; (80063b0 <LoopForever+0xe>)
  movs r3, #0
 800637a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800637c:	e002      	b.n	8006384 <LoopCopyDataInit>

0800637e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800637e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006382:	3304      	adds	r3, #4

08006384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006388:	d3f9      	bcc.n	800637e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800638c:	4c0a      	ldr	r4, [pc, #40]	; (80063b8 <LoopForever+0x16>)
  movs r3, #0
 800638e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006390:	e001      	b.n	8006396 <LoopFillZerobss>

08006392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006394:	3204      	adds	r2, #4

08006396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006398:	d3fb      	bcc.n	8006392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800639a:	f000 f85d 	bl	8006458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800639e:	f7ff faad 	bl	80058fc <main>

080063a2 <LoopForever>:

LoopForever:
    b LoopForever
 80063a2:	e7fe      	b.n	80063a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80063a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80063a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80063b0:	0800ca14 	.word	0x0800ca14
  ldr r2, =_sbss
 80063b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80063b8:	2000043c 	.word	0x2000043c

080063bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80063bc:	e7fe      	b.n	80063bc <ADC1_IRQHandler>
	...

080063c0 <arm_sin_f32>:
 80063c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006440 <arm_sin_f32+0x80>
 80063c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80063c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80063cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80063d4:	d504      	bpl.n	80063e0 <arm_sin_f32+0x20>
 80063d6:	ee17 3a90 	vmov	r3, s15
 80063da:	3b01      	subs	r3, #1
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063e4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006444 <arm_sin_f32+0x84>
 80063e8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80063ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 80063f0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80063f4:	ee17 3a90 	vmov	r3, s15
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063fe:	d21a      	bcs.n	8006436 <arm_sin_f32+0x76>
 8006400:	ee07 3a90 	vmov	s15, r3
 8006404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006408:	1c59      	adds	r1, r3, #1
 800640a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800640e:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <arm_sin_f32+0x88>)
 8006410:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006414:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006418:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800641c:	ed93 7a00 	vldr	s14, [r3]
 8006420:	edd2 6a00 	vldr	s13, [r2]
 8006424:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8006428:	ee20 0a26 	vmul.f32	s0, s0, s13
 800642c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006430:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006434:	4770      	bx	lr
 8006436:	ee30 0a47 	vsub.f32	s0, s0, s14
 800643a:	2101      	movs	r1, #1
 800643c:	2300      	movs	r3, #0
 800643e:	e7e6      	b.n	800640e <arm_sin_f32+0x4e>
 8006440:	3e22f983 	.word	0x3e22f983
 8006444:	44000000 	.word	0x44000000
 8006448:	0800bd3c 	.word	0x0800bd3c

0800644c <__errno>:
 800644c:	4b01      	ldr	r3, [pc, #4]	; (8006454 <__errno+0x8>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	2000001c 	.word	0x2000001c

08006458 <__libc_init_array>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	4d0d      	ldr	r5, [pc, #52]	; (8006490 <__libc_init_array+0x38>)
 800645c:	4c0d      	ldr	r4, [pc, #52]	; (8006494 <__libc_init_array+0x3c>)
 800645e:	1b64      	subs	r4, r4, r5
 8006460:	10a4      	asrs	r4, r4, #2
 8006462:	2600      	movs	r6, #0
 8006464:	42a6      	cmp	r6, r4
 8006466:	d109      	bne.n	800647c <__libc_init_array+0x24>
 8006468:	4d0b      	ldr	r5, [pc, #44]	; (8006498 <__libc_init_array+0x40>)
 800646a:	4c0c      	ldr	r4, [pc, #48]	; (800649c <__libc_init_array+0x44>)
 800646c:	f005 fb46 	bl	800bafc <_init>
 8006470:	1b64      	subs	r4, r4, r5
 8006472:	10a4      	asrs	r4, r4, #2
 8006474:	2600      	movs	r6, #0
 8006476:	42a6      	cmp	r6, r4
 8006478:	d105      	bne.n	8006486 <__libc_init_array+0x2e>
 800647a:	bd70      	pop	{r4, r5, r6, pc}
 800647c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006480:	4798      	blx	r3
 8006482:	3601      	adds	r6, #1
 8006484:	e7ee      	b.n	8006464 <__libc_init_array+0xc>
 8006486:	f855 3b04 	ldr.w	r3, [r5], #4
 800648a:	4798      	blx	r3
 800648c:	3601      	adds	r6, #1
 800648e:	e7f2      	b.n	8006476 <__libc_init_array+0x1e>
 8006490:	0800ca0c 	.word	0x0800ca0c
 8006494:	0800ca0c 	.word	0x0800ca0c
 8006498:	0800ca0c 	.word	0x0800ca0c
 800649c:	0800ca10 	.word	0x0800ca10

080064a0 <memset>:
 80064a0:	4402      	add	r2, r0
 80064a2:	4603      	mov	r3, r0
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <memset+0xa>
 80064a8:	4770      	bx	lr
 80064aa:	f803 1b01 	strb.w	r1, [r3], #1
 80064ae:	e7f9      	b.n	80064a4 <memset+0x4>

080064b0 <__cvt>:
 80064b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	ec55 4b10 	vmov	r4, r5, d0
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	460e      	mov	r6, r1
 80064bc:	4619      	mov	r1, r3
 80064be:	462b      	mov	r3, r5
 80064c0:	bfbb      	ittet	lt
 80064c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064c6:	461d      	movlt	r5, r3
 80064c8:	2300      	movge	r3, #0
 80064ca:	232d      	movlt	r3, #45	; 0x2d
 80064cc:	700b      	strb	r3, [r1, #0]
 80064ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064d4:	4691      	mov	r9, r2
 80064d6:	f023 0820 	bic.w	r8, r3, #32
 80064da:	bfbc      	itt	lt
 80064dc:	4622      	movlt	r2, r4
 80064de:	4614      	movlt	r4, r2
 80064e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80064e4:	d005      	beq.n	80064f2 <__cvt+0x42>
 80064e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80064ea:	d100      	bne.n	80064ee <__cvt+0x3e>
 80064ec:	3601      	adds	r6, #1
 80064ee:	2102      	movs	r1, #2
 80064f0:	e000      	b.n	80064f4 <__cvt+0x44>
 80064f2:	2103      	movs	r1, #3
 80064f4:	ab03      	add	r3, sp, #12
 80064f6:	9301      	str	r3, [sp, #4]
 80064f8:	ab02      	add	r3, sp, #8
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	ec45 4b10 	vmov	d0, r4, r5
 8006500:	4653      	mov	r3, sl
 8006502:	4632      	mov	r2, r6
 8006504:	f001 feb8 	bl	8008278 <_dtoa_r>
 8006508:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800650c:	4607      	mov	r7, r0
 800650e:	d102      	bne.n	8006516 <__cvt+0x66>
 8006510:	f019 0f01 	tst.w	r9, #1
 8006514:	d022      	beq.n	800655c <__cvt+0xac>
 8006516:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800651a:	eb07 0906 	add.w	r9, r7, r6
 800651e:	d110      	bne.n	8006542 <__cvt+0x92>
 8006520:	783b      	ldrb	r3, [r7, #0]
 8006522:	2b30      	cmp	r3, #48	; 0x30
 8006524:	d10a      	bne.n	800653c <__cvt+0x8c>
 8006526:	2200      	movs	r2, #0
 8006528:	2300      	movs	r3, #0
 800652a:	4620      	mov	r0, r4
 800652c:	4629      	mov	r1, r5
 800652e:	f7fa fae3 	bl	8000af8 <__aeabi_dcmpeq>
 8006532:	b918      	cbnz	r0, 800653c <__cvt+0x8c>
 8006534:	f1c6 0601 	rsb	r6, r6, #1
 8006538:	f8ca 6000 	str.w	r6, [sl]
 800653c:	f8da 3000 	ldr.w	r3, [sl]
 8006540:	4499      	add	r9, r3
 8006542:	2200      	movs	r2, #0
 8006544:	2300      	movs	r3, #0
 8006546:	4620      	mov	r0, r4
 8006548:	4629      	mov	r1, r5
 800654a:	f7fa fad5 	bl	8000af8 <__aeabi_dcmpeq>
 800654e:	b108      	cbz	r0, 8006554 <__cvt+0xa4>
 8006550:	f8cd 900c 	str.w	r9, [sp, #12]
 8006554:	2230      	movs	r2, #48	; 0x30
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	454b      	cmp	r3, r9
 800655a:	d307      	bcc.n	800656c <__cvt+0xbc>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006560:	1bdb      	subs	r3, r3, r7
 8006562:	4638      	mov	r0, r7
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	b004      	add	sp, #16
 8006568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	9103      	str	r1, [sp, #12]
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e7f0      	b.n	8006556 <__cvt+0xa6>

08006574 <__exponent>:
 8006574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006576:	4603      	mov	r3, r0
 8006578:	2900      	cmp	r1, #0
 800657a:	bfb8      	it	lt
 800657c:	4249      	neglt	r1, r1
 800657e:	f803 2b02 	strb.w	r2, [r3], #2
 8006582:	bfb4      	ite	lt
 8006584:	222d      	movlt	r2, #45	; 0x2d
 8006586:	222b      	movge	r2, #43	; 0x2b
 8006588:	2909      	cmp	r1, #9
 800658a:	7042      	strb	r2, [r0, #1]
 800658c:	dd2a      	ble.n	80065e4 <__exponent+0x70>
 800658e:	f10d 0407 	add.w	r4, sp, #7
 8006592:	46a4      	mov	ip, r4
 8006594:	270a      	movs	r7, #10
 8006596:	46a6      	mov	lr, r4
 8006598:	460a      	mov	r2, r1
 800659a:	fb91 f6f7 	sdiv	r6, r1, r7
 800659e:	fb07 1516 	mls	r5, r7, r6, r1
 80065a2:	3530      	adds	r5, #48	; 0x30
 80065a4:	2a63      	cmp	r2, #99	; 0x63
 80065a6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80065aa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80065ae:	4631      	mov	r1, r6
 80065b0:	dcf1      	bgt.n	8006596 <__exponent+0x22>
 80065b2:	3130      	adds	r1, #48	; 0x30
 80065b4:	f1ae 0502 	sub.w	r5, lr, #2
 80065b8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80065bc:	1c44      	adds	r4, r0, #1
 80065be:	4629      	mov	r1, r5
 80065c0:	4561      	cmp	r1, ip
 80065c2:	d30a      	bcc.n	80065da <__exponent+0x66>
 80065c4:	f10d 0209 	add.w	r2, sp, #9
 80065c8:	eba2 020e 	sub.w	r2, r2, lr
 80065cc:	4565      	cmp	r5, ip
 80065ce:	bf88      	it	hi
 80065d0:	2200      	movhi	r2, #0
 80065d2:	4413      	add	r3, r2
 80065d4:	1a18      	subs	r0, r3, r0
 80065d6:	b003      	add	sp, #12
 80065d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065de:	f804 2f01 	strb.w	r2, [r4, #1]!
 80065e2:	e7ed      	b.n	80065c0 <__exponent+0x4c>
 80065e4:	2330      	movs	r3, #48	; 0x30
 80065e6:	3130      	adds	r1, #48	; 0x30
 80065e8:	7083      	strb	r3, [r0, #2]
 80065ea:	70c1      	strb	r1, [r0, #3]
 80065ec:	1d03      	adds	r3, r0, #4
 80065ee:	e7f1      	b.n	80065d4 <__exponent+0x60>

080065f0 <_printf_float>:
 80065f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f4:	ed2d 8b02 	vpush	{d8}
 80065f8:	b08d      	sub	sp, #52	; 0x34
 80065fa:	460c      	mov	r4, r1
 80065fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006600:	4616      	mov	r6, r2
 8006602:	461f      	mov	r7, r3
 8006604:	4605      	mov	r5, r0
 8006606:	f003 f97b 	bl	8009900 <_localeconv_r>
 800660a:	f8d0 a000 	ldr.w	sl, [r0]
 800660e:	4650      	mov	r0, sl
 8006610:	f7f9 fdf6 	bl	8000200 <strlen>
 8006614:	2300      	movs	r3, #0
 8006616:	930a      	str	r3, [sp, #40]	; 0x28
 8006618:	6823      	ldr	r3, [r4, #0]
 800661a:	9305      	str	r3, [sp, #20]
 800661c:	f8d8 3000 	ldr.w	r3, [r8]
 8006620:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006624:	3307      	adds	r3, #7
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	f103 0208 	add.w	r2, r3, #8
 800662e:	f8c8 2000 	str.w	r2, [r8]
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800663a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800663e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006642:	9307      	str	r3, [sp, #28]
 8006644:	f8cd 8018 	str.w	r8, [sp, #24]
 8006648:	ee08 0a10 	vmov	s16, r0
 800664c:	4b9f      	ldr	r3, [pc, #636]	; (80068cc <_printf_float+0x2dc>)
 800664e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006656:	f7fa fa81 	bl	8000b5c <__aeabi_dcmpun>
 800665a:	bb88      	cbnz	r0, 80066c0 <_printf_float+0xd0>
 800665c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006660:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <_printf_float+0x2dc>)
 8006662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006666:	f7fa fa5b 	bl	8000b20 <__aeabi_dcmple>
 800666a:	bb48      	cbnz	r0, 80066c0 <_printf_float+0xd0>
 800666c:	2200      	movs	r2, #0
 800666e:	2300      	movs	r3, #0
 8006670:	4640      	mov	r0, r8
 8006672:	4649      	mov	r1, r9
 8006674:	f7fa fa4a 	bl	8000b0c <__aeabi_dcmplt>
 8006678:	b110      	cbz	r0, 8006680 <_printf_float+0x90>
 800667a:	232d      	movs	r3, #45	; 0x2d
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006680:	4b93      	ldr	r3, [pc, #588]	; (80068d0 <_printf_float+0x2e0>)
 8006682:	4894      	ldr	r0, [pc, #592]	; (80068d4 <_printf_float+0x2e4>)
 8006684:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006688:	bf94      	ite	ls
 800668a:	4698      	movls	r8, r3
 800668c:	4680      	movhi	r8, r0
 800668e:	2303      	movs	r3, #3
 8006690:	6123      	str	r3, [r4, #16]
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	f023 0204 	bic.w	r2, r3, #4
 8006698:	6022      	str	r2, [r4, #0]
 800669a:	f04f 0900 	mov.w	r9, #0
 800669e:	9700      	str	r7, [sp, #0]
 80066a0:	4633      	mov	r3, r6
 80066a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80066a4:	4621      	mov	r1, r4
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 f9d8 	bl	8006a5c <_printf_common>
 80066ac:	3001      	adds	r0, #1
 80066ae:	f040 8090 	bne.w	80067d2 <_printf_float+0x1e2>
 80066b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066b6:	b00d      	add	sp, #52	; 0x34
 80066b8:	ecbd 8b02 	vpop	{d8}
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	4642      	mov	r2, r8
 80066c2:	464b      	mov	r3, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	4649      	mov	r1, r9
 80066c8:	f7fa fa48 	bl	8000b5c <__aeabi_dcmpun>
 80066cc:	b140      	cbz	r0, 80066e0 <_printf_float+0xf0>
 80066ce:	464b      	mov	r3, r9
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	bfbc      	itt	lt
 80066d4:	232d      	movlt	r3, #45	; 0x2d
 80066d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80066da:	487f      	ldr	r0, [pc, #508]	; (80068d8 <_printf_float+0x2e8>)
 80066dc:	4b7f      	ldr	r3, [pc, #508]	; (80068dc <_printf_float+0x2ec>)
 80066de:	e7d1      	b.n	8006684 <_printf_float+0x94>
 80066e0:	6863      	ldr	r3, [r4, #4]
 80066e2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80066e6:	9206      	str	r2, [sp, #24]
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	d13f      	bne.n	800676c <_printf_float+0x17c>
 80066ec:	2306      	movs	r3, #6
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	9b05      	ldr	r3, [sp, #20]
 80066f2:	6861      	ldr	r1, [r4, #4]
 80066f4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80066f8:	2300      	movs	r3, #0
 80066fa:	9303      	str	r3, [sp, #12]
 80066fc:	ab0a      	add	r3, sp, #40	; 0x28
 80066fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006702:	ab09      	add	r3, sp, #36	; 0x24
 8006704:	ec49 8b10 	vmov	d0, r8, r9
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	6022      	str	r2, [r4, #0]
 800670c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006710:	4628      	mov	r0, r5
 8006712:	f7ff fecd 	bl	80064b0 <__cvt>
 8006716:	9b06      	ldr	r3, [sp, #24]
 8006718:	9909      	ldr	r1, [sp, #36]	; 0x24
 800671a:	2b47      	cmp	r3, #71	; 0x47
 800671c:	4680      	mov	r8, r0
 800671e:	d108      	bne.n	8006732 <_printf_float+0x142>
 8006720:	1cc8      	adds	r0, r1, #3
 8006722:	db02      	blt.n	800672a <_printf_float+0x13a>
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	4299      	cmp	r1, r3
 8006728:	dd41      	ble.n	80067ae <_printf_float+0x1be>
 800672a:	f1ab 0b02 	sub.w	fp, fp, #2
 800672e:	fa5f fb8b 	uxtb.w	fp, fp
 8006732:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006736:	d820      	bhi.n	800677a <_printf_float+0x18a>
 8006738:	3901      	subs	r1, #1
 800673a:	465a      	mov	r2, fp
 800673c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006740:	9109      	str	r1, [sp, #36]	; 0x24
 8006742:	f7ff ff17 	bl	8006574 <__exponent>
 8006746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006748:	1813      	adds	r3, r2, r0
 800674a:	2a01      	cmp	r2, #1
 800674c:	4681      	mov	r9, r0
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	dc02      	bgt.n	8006758 <_printf_float+0x168>
 8006752:	6822      	ldr	r2, [r4, #0]
 8006754:	07d2      	lsls	r2, r2, #31
 8006756:	d501      	bpl.n	800675c <_printf_float+0x16c>
 8006758:	3301      	adds	r3, #1
 800675a:	6123      	str	r3, [r4, #16]
 800675c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006760:	2b00      	cmp	r3, #0
 8006762:	d09c      	beq.n	800669e <_printf_float+0xae>
 8006764:	232d      	movs	r3, #45	; 0x2d
 8006766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800676a:	e798      	b.n	800669e <_printf_float+0xae>
 800676c:	9a06      	ldr	r2, [sp, #24]
 800676e:	2a47      	cmp	r2, #71	; 0x47
 8006770:	d1be      	bne.n	80066f0 <_printf_float+0x100>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1bc      	bne.n	80066f0 <_printf_float+0x100>
 8006776:	2301      	movs	r3, #1
 8006778:	e7b9      	b.n	80066ee <_printf_float+0xfe>
 800677a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800677e:	d118      	bne.n	80067b2 <_printf_float+0x1c2>
 8006780:	2900      	cmp	r1, #0
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	dd0b      	ble.n	800679e <_printf_float+0x1ae>
 8006786:	6121      	str	r1, [r4, #16]
 8006788:	b913      	cbnz	r3, 8006790 <_printf_float+0x1a0>
 800678a:	6822      	ldr	r2, [r4, #0]
 800678c:	07d0      	lsls	r0, r2, #31
 800678e:	d502      	bpl.n	8006796 <_printf_float+0x1a6>
 8006790:	3301      	adds	r3, #1
 8006792:	440b      	add	r3, r1
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	65a1      	str	r1, [r4, #88]	; 0x58
 8006798:	f04f 0900 	mov.w	r9, #0
 800679c:	e7de      	b.n	800675c <_printf_float+0x16c>
 800679e:	b913      	cbnz	r3, 80067a6 <_printf_float+0x1b6>
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	07d2      	lsls	r2, r2, #31
 80067a4:	d501      	bpl.n	80067aa <_printf_float+0x1ba>
 80067a6:	3302      	adds	r3, #2
 80067a8:	e7f4      	b.n	8006794 <_printf_float+0x1a4>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7f2      	b.n	8006794 <_printf_float+0x1a4>
 80067ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80067b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b4:	4299      	cmp	r1, r3
 80067b6:	db05      	blt.n	80067c4 <_printf_float+0x1d4>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	6121      	str	r1, [r4, #16]
 80067bc:	07d8      	lsls	r0, r3, #31
 80067be:	d5ea      	bpl.n	8006796 <_printf_float+0x1a6>
 80067c0:	1c4b      	adds	r3, r1, #1
 80067c2:	e7e7      	b.n	8006794 <_printf_float+0x1a4>
 80067c4:	2900      	cmp	r1, #0
 80067c6:	bfd4      	ite	le
 80067c8:	f1c1 0202 	rsble	r2, r1, #2
 80067cc:	2201      	movgt	r2, #1
 80067ce:	4413      	add	r3, r2
 80067d0:	e7e0      	b.n	8006794 <_printf_float+0x1a4>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	055a      	lsls	r2, r3, #21
 80067d6:	d407      	bmi.n	80067e8 <_printf_float+0x1f8>
 80067d8:	6923      	ldr	r3, [r4, #16]
 80067da:	4642      	mov	r2, r8
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	d12c      	bne.n	8006840 <_printf_float+0x250>
 80067e6:	e764      	b.n	80066b2 <_printf_float+0xc2>
 80067e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067ec:	f240 80e0 	bls.w	80069b0 <_printf_float+0x3c0>
 80067f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067f4:	2200      	movs	r2, #0
 80067f6:	2300      	movs	r3, #0
 80067f8:	f7fa f97e 	bl	8000af8 <__aeabi_dcmpeq>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d034      	beq.n	800686a <_printf_float+0x27a>
 8006800:	4a37      	ldr	r2, [pc, #220]	; (80068e0 <_printf_float+0x2f0>)
 8006802:	2301      	movs	r3, #1
 8006804:	4631      	mov	r1, r6
 8006806:	4628      	mov	r0, r5
 8006808:	47b8      	blx	r7
 800680a:	3001      	adds	r0, #1
 800680c:	f43f af51 	beq.w	80066b2 <_printf_float+0xc2>
 8006810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006814:	429a      	cmp	r2, r3
 8006816:	db02      	blt.n	800681e <_printf_float+0x22e>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	07d8      	lsls	r0, r3, #31
 800681c:	d510      	bpl.n	8006840 <_printf_float+0x250>
 800681e:	ee18 3a10 	vmov	r3, s16
 8006822:	4652      	mov	r2, sl
 8006824:	4631      	mov	r1, r6
 8006826:	4628      	mov	r0, r5
 8006828:	47b8      	blx	r7
 800682a:	3001      	adds	r0, #1
 800682c:	f43f af41 	beq.w	80066b2 <_printf_float+0xc2>
 8006830:	f04f 0800 	mov.w	r8, #0
 8006834:	f104 091a 	add.w	r9, r4, #26
 8006838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800683a:	3b01      	subs	r3, #1
 800683c:	4543      	cmp	r3, r8
 800683e:	dc09      	bgt.n	8006854 <_printf_float+0x264>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	079b      	lsls	r3, r3, #30
 8006844:	f100 8105 	bmi.w	8006a52 <_printf_float+0x462>
 8006848:	68e0      	ldr	r0, [r4, #12]
 800684a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800684c:	4298      	cmp	r0, r3
 800684e:	bfb8      	it	lt
 8006850:	4618      	movlt	r0, r3
 8006852:	e730      	b.n	80066b6 <_printf_float+0xc6>
 8006854:	2301      	movs	r3, #1
 8006856:	464a      	mov	r2, r9
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af27 	beq.w	80066b2 <_printf_float+0xc2>
 8006864:	f108 0801 	add.w	r8, r8, #1
 8006868:	e7e6      	b.n	8006838 <_printf_float+0x248>
 800686a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc39      	bgt.n	80068e4 <_printf_float+0x2f4>
 8006870:	4a1b      	ldr	r2, [pc, #108]	; (80068e0 <_printf_float+0x2f0>)
 8006872:	2301      	movs	r3, #1
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af19 	beq.w	80066b2 <_printf_float+0xc2>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	4313      	orrs	r3, r2
 8006886:	d102      	bne.n	800688e <_printf_float+0x29e>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07d9      	lsls	r1, r3, #31
 800688c:	d5d8      	bpl.n	8006840 <_printf_float+0x250>
 800688e:	ee18 3a10 	vmov	r3, s16
 8006892:	4652      	mov	r2, sl
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af09 	beq.w	80066b2 <_printf_float+0xc2>
 80068a0:	f04f 0900 	mov.w	r9, #0
 80068a4:	f104 0a1a 	add.w	sl, r4, #26
 80068a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068aa:	425b      	negs	r3, r3
 80068ac:	454b      	cmp	r3, r9
 80068ae:	dc01      	bgt.n	80068b4 <_printf_float+0x2c4>
 80068b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b2:	e792      	b.n	80067da <_printf_float+0x1ea>
 80068b4:	2301      	movs	r3, #1
 80068b6:	4652      	mov	r2, sl
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b8      	blx	r7
 80068be:	3001      	adds	r0, #1
 80068c0:	f43f aef7 	beq.w	80066b2 <_printf_float+0xc2>
 80068c4:	f109 0901 	add.w	r9, r9, #1
 80068c8:	e7ee      	b.n	80068a8 <_printf_float+0x2b8>
 80068ca:	bf00      	nop
 80068cc:	7fefffff 	.word	0x7fefffff
 80068d0:	0800c544 	.word	0x0800c544
 80068d4:	0800c548 	.word	0x0800c548
 80068d8:	0800c550 	.word	0x0800c550
 80068dc:	0800c54c 	.word	0x0800c54c
 80068e0:	0800c9b1 	.word	0x0800c9b1
 80068e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068e8:	429a      	cmp	r2, r3
 80068ea:	bfa8      	it	ge
 80068ec:	461a      	movge	r2, r3
 80068ee:	2a00      	cmp	r2, #0
 80068f0:	4691      	mov	r9, r2
 80068f2:	dc37      	bgt.n	8006964 <_printf_float+0x374>
 80068f4:	f04f 0b00 	mov.w	fp, #0
 80068f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068fc:	f104 021a 	add.w	r2, r4, #26
 8006900:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	eba3 0309 	sub.w	r3, r3, r9
 8006908:	455b      	cmp	r3, fp
 800690a:	dc33      	bgt.n	8006974 <_printf_float+0x384>
 800690c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006910:	429a      	cmp	r2, r3
 8006912:	db3b      	blt.n	800698c <_printf_float+0x39c>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07da      	lsls	r2, r3, #31
 8006918:	d438      	bmi.n	800698c <_printf_float+0x39c>
 800691a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691c:	9a05      	ldr	r2, [sp, #20]
 800691e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006920:	1a9a      	subs	r2, r3, r2
 8006922:	eba3 0901 	sub.w	r9, r3, r1
 8006926:	4591      	cmp	r9, r2
 8006928:	bfa8      	it	ge
 800692a:	4691      	movge	r9, r2
 800692c:	f1b9 0f00 	cmp.w	r9, #0
 8006930:	dc35      	bgt.n	800699e <_printf_float+0x3ae>
 8006932:	f04f 0800 	mov.w	r8, #0
 8006936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800693a:	f104 0a1a 	add.w	sl, r4, #26
 800693e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006942:	1a9b      	subs	r3, r3, r2
 8006944:	eba3 0309 	sub.w	r3, r3, r9
 8006948:	4543      	cmp	r3, r8
 800694a:	f77f af79 	ble.w	8006840 <_printf_float+0x250>
 800694e:	2301      	movs	r3, #1
 8006950:	4652      	mov	r2, sl
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f aeaa 	beq.w	80066b2 <_printf_float+0xc2>
 800695e:	f108 0801 	add.w	r8, r8, #1
 8006962:	e7ec      	b.n	800693e <_printf_float+0x34e>
 8006964:	4613      	mov	r3, r2
 8006966:	4631      	mov	r1, r6
 8006968:	4642      	mov	r2, r8
 800696a:	4628      	mov	r0, r5
 800696c:	47b8      	blx	r7
 800696e:	3001      	adds	r0, #1
 8006970:	d1c0      	bne.n	80068f4 <_printf_float+0x304>
 8006972:	e69e      	b.n	80066b2 <_printf_float+0xc2>
 8006974:	2301      	movs	r3, #1
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	9205      	str	r2, [sp, #20]
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f ae97 	beq.w	80066b2 <_printf_float+0xc2>
 8006984:	9a05      	ldr	r2, [sp, #20]
 8006986:	f10b 0b01 	add.w	fp, fp, #1
 800698a:	e7b9      	b.n	8006900 <_printf_float+0x310>
 800698c:	ee18 3a10 	vmov	r3, s16
 8006990:	4652      	mov	r2, sl
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d1be      	bne.n	800691a <_printf_float+0x32a>
 800699c:	e689      	b.n	80066b2 <_printf_float+0xc2>
 800699e:	9a05      	ldr	r2, [sp, #20]
 80069a0:	464b      	mov	r3, r9
 80069a2:	4442      	add	r2, r8
 80069a4:	4631      	mov	r1, r6
 80069a6:	4628      	mov	r0, r5
 80069a8:	47b8      	blx	r7
 80069aa:	3001      	adds	r0, #1
 80069ac:	d1c1      	bne.n	8006932 <_printf_float+0x342>
 80069ae:	e680      	b.n	80066b2 <_printf_float+0xc2>
 80069b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069b2:	2a01      	cmp	r2, #1
 80069b4:	dc01      	bgt.n	80069ba <_printf_float+0x3ca>
 80069b6:	07db      	lsls	r3, r3, #31
 80069b8:	d538      	bpl.n	8006a2c <_printf_float+0x43c>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4642      	mov	r2, r8
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f ae74 	beq.w	80066b2 <_printf_float+0xc2>
 80069ca:	ee18 3a10 	vmov	r3, s16
 80069ce:	4652      	mov	r2, sl
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b8      	blx	r7
 80069d6:	3001      	adds	r0, #1
 80069d8:	f43f ae6b 	beq.w	80066b2 <_printf_float+0xc2>
 80069dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069e0:	2200      	movs	r2, #0
 80069e2:	2300      	movs	r3, #0
 80069e4:	f7fa f888 	bl	8000af8 <__aeabi_dcmpeq>
 80069e8:	b9d8      	cbnz	r0, 8006a22 <_printf_float+0x432>
 80069ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ec:	f108 0201 	add.w	r2, r8, #1
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4631      	mov	r1, r6
 80069f4:	4628      	mov	r0, r5
 80069f6:	47b8      	blx	r7
 80069f8:	3001      	adds	r0, #1
 80069fa:	d10e      	bne.n	8006a1a <_printf_float+0x42a>
 80069fc:	e659      	b.n	80066b2 <_printf_float+0xc2>
 80069fe:	2301      	movs	r3, #1
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	f43f ae52 	beq.w	80066b2 <_printf_float+0xc2>
 8006a0e:	f108 0801 	add.w	r8, r8, #1
 8006a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a14:	3b01      	subs	r3, #1
 8006a16:	4543      	cmp	r3, r8
 8006a18:	dcf1      	bgt.n	80069fe <_printf_float+0x40e>
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a20:	e6dc      	b.n	80067dc <_printf_float+0x1ec>
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	f104 0a1a 	add.w	sl, r4, #26
 8006a2a:	e7f2      	b.n	8006a12 <_printf_float+0x422>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4642      	mov	r2, r8
 8006a30:	e7df      	b.n	80069f2 <_printf_float+0x402>
 8006a32:	2301      	movs	r3, #1
 8006a34:	464a      	mov	r2, r9
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b8      	blx	r7
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	f43f ae38 	beq.w	80066b2 <_printf_float+0xc2>
 8006a42:	f108 0801 	add.w	r8, r8, #1
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	4543      	cmp	r3, r8
 8006a4e:	dcf0      	bgt.n	8006a32 <_printf_float+0x442>
 8006a50:	e6fa      	b.n	8006848 <_printf_float+0x258>
 8006a52:	f04f 0800 	mov.w	r8, #0
 8006a56:	f104 0919 	add.w	r9, r4, #25
 8006a5a:	e7f4      	b.n	8006a46 <_printf_float+0x456>

08006a5c <_printf_common>:
 8006a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	4616      	mov	r6, r2
 8006a62:	4699      	mov	r9, r3
 8006a64:	688a      	ldr	r2, [r1, #8]
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bfb8      	it	lt
 8006a70:	4613      	movlt	r3, r2
 8006a72:	6033      	str	r3, [r6, #0]
 8006a74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a78:	4607      	mov	r7, r0
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	b10a      	cbz	r2, 8006a82 <_printf_common+0x26>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6033      	str	r3, [r6, #0]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	0699      	lsls	r1, r3, #26
 8006a86:	bf42      	ittt	mi
 8006a88:	6833      	ldrmi	r3, [r6, #0]
 8006a8a:	3302      	addmi	r3, #2
 8006a8c:	6033      	strmi	r3, [r6, #0]
 8006a8e:	6825      	ldr	r5, [r4, #0]
 8006a90:	f015 0506 	ands.w	r5, r5, #6
 8006a94:	d106      	bne.n	8006aa4 <_printf_common+0x48>
 8006a96:	f104 0a19 	add.w	sl, r4, #25
 8006a9a:	68e3      	ldr	r3, [r4, #12]
 8006a9c:	6832      	ldr	r2, [r6, #0]
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	42ab      	cmp	r3, r5
 8006aa2:	dc26      	bgt.n	8006af2 <_printf_common+0x96>
 8006aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa8:	1e13      	subs	r3, r2, #0
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	bf18      	it	ne
 8006aae:	2301      	movne	r3, #1
 8006ab0:	0692      	lsls	r2, r2, #26
 8006ab2:	d42b      	bmi.n	8006b0c <_printf_common+0xb0>
 8006ab4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab8:	4649      	mov	r1, r9
 8006aba:	4638      	mov	r0, r7
 8006abc:	47c0      	blx	r8
 8006abe:	3001      	adds	r0, #1
 8006ac0:	d01e      	beq.n	8006b00 <_printf_common+0xa4>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	68e5      	ldr	r5, [r4, #12]
 8006ac6:	6832      	ldr	r2, [r6, #0]
 8006ac8:	f003 0306 	and.w	r3, r3, #6
 8006acc:	2b04      	cmp	r3, #4
 8006ace:	bf08      	it	eq
 8006ad0:	1aad      	subeq	r5, r5, r2
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	6922      	ldr	r2, [r4, #16]
 8006ad6:	bf0c      	ite	eq
 8006ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006adc:	2500      	movne	r5, #0
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	bfc4      	itt	gt
 8006ae2:	1a9b      	subgt	r3, r3, r2
 8006ae4:	18ed      	addgt	r5, r5, r3
 8006ae6:	2600      	movs	r6, #0
 8006ae8:	341a      	adds	r4, #26
 8006aea:	42b5      	cmp	r5, r6
 8006aec:	d11a      	bne.n	8006b24 <_printf_common+0xc8>
 8006aee:	2000      	movs	r0, #0
 8006af0:	e008      	b.n	8006b04 <_printf_common+0xa8>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4652      	mov	r2, sl
 8006af6:	4649      	mov	r1, r9
 8006af8:	4638      	mov	r0, r7
 8006afa:	47c0      	blx	r8
 8006afc:	3001      	adds	r0, #1
 8006afe:	d103      	bne.n	8006b08 <_printf_common+0xac>
 8006b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b08:	3501      	adds	r5, #1
 8006b0a:	e7c6      	b.n	8006a9a <_printf_common+0x3e>
 8006b0c:	18e1      	adds	r1, r4, r3
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	2030      	movs	r0, #48	; 0x30
 8006b12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b16:	4422      	add	r2, r4
 8006b18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b20:	3302      	adds	r3, #2
 8006b22:	e7c7      	b.n	8006ab4 <_printf_common+0x58>
 8006b24:	2301      	movs	r3, #1
 8006b26:	4622      	mov	r2, r4
 8006b28:	4649      	mov	r1, r9
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d0e6      	beq.n	8006b00 <_printf_common+0xa4>
 8006b32:	3601      	adds	r6, #1
 8006b34:	e7d9      	b.n	8006aea <_printf_common+0x8e>
	...

08006b38 <_printf_i>:
 8006b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b3c:	7e0f      	ldrb	r7, [r1, #24]
 8006b3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b40:	2f78      	cmp	r7, #120	; 0x78
 8006b42:	4691      	mov	r9, r2
 8006b44:	4680      	mov	r8, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	469a      	mov	sl, r3
 8006b4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b4e:	d807      	bhi.n	8006b60 <_printf_i+0x28>
 8006b50:	2f62      	cmp	r7, #98	; 0x62
 8006b52:	d80a      	bhi.n	8006b6a <_printf_i+0x32>
 8006b54:	2f00      	cmp	r7, #0
 8006b56:	f000 80d8 	beq.w	8006d0a <_printf_i+0x1d2>
 8006b5a:	2f58      	cmp	r7, #88	; 0x58
 8006b5c:	f000 80a3 	beq.w	8006ca6 <_printf_i+0x16e>
 8006b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b68:	e03a      	b.n	8006be0 <_printf_i+0xa8>
 8006b6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b6e:	2b15      	cmp	r3, #21
 8006b70:	d8f6      	bhi.n	8006b60 <_printf_i+0x28>
 8006b72:	a101      	add	r1, pc, #4	; (adr r1, 8006b78 <_printf_i+0x40>)
 8006b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b78:	08006bd1 	.word	0x08006bd1
 8006b7c:	08006be5 	.word	0x08006be5
 8006b80:	08006b61 	.word	0x08006b61
 8006b84:	08006b61 	.word	0x08006b61
 8006b88:	08006b61 	.word	0x08006b61
 8006b8c:	08006b61 	.word	0x08006b61
 8006b90:	08006be5 	.word	0x08006be5
 8006b94:	08006b61 	.word	0x08006b61
 8006b98:	08006b61 	.word	0x08006b61
 8006b9c:	08006b61 	.word	0x08006b61
 8006ba0:	08006b61 	.word	0x08006b61
 8006ba4:	08006cf1 	.word	0x08006cf1
 8006ba8:	08006c15 	.word	0x08006c15
 8006bac:	08006cd3 	.word	0x08006cd3
 8006bb0:	08006b61 	.word	0x08006b61
 8006bb4:	08006b61 	.word	0x08006b61
 8006bb8:	08006d13 	.word	0x08006d13
 8006bbc:	08006b61 	.word	0x08006b61
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b61 	.word	0x08006b61
 8006bc8:	08006b61 	.word	0x08006b61
 8006bcc:	08006cdb 	.word	0x08006cdb
 8006bd0:	682b      	ldr	r3, [r5, #0]
 8006bd2:	1d1a      	adds	r2, r3, #4
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	602a      	str	r2, [r5, #0]
 8006bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be0:	2301      	movs	r3, #1
 8006be2:	e0a3      	b.n	8006d2c <_printf_i+0x1f4>
 8006be4:	6820      	ldr	r0, [r4, #0]
 8006be6:	6829      	ldr	r1, [r5, #0]
 8006be8:	0606      	lsls	r6, r0, #24
 8006bea:	f101 0304 	add.w	r3, r1, #4
 8006bee:	d50a      	bpl.n	8006c06 <_printf_i+0xce>
 8006bf0:	680e      	ldr	r6, [r1, #0]
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	2e00      	cmp	r6, #0
 8006bf6:	da03      	bge.n	8006c00 <_printf_i+0xc8>
 8006bf8:	232d      	movs	r3, #45	; 0x2d
 8006bfa:	4276      	negs	r6, r6
 8006bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c00:	485e      	ldr	r0, [pc, #376]	; (8006d7c <_printf_i+0x244>)
 8006c02:	230a      	movs	r3, #10
 8006c04:	e019      	b.n	8006c3a <_printf_i+0x102>
 8006c06:	680e      	ldr	r6, [r1, #0]
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c0e:	bf18      	it	ne
 8006c10:	b236      	sxthne	r6, r6
 8006c12:	e7ef      	b.n	8006bf4 <_printf_i+0xbc>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	6820      	ldr	r0, [r4, #0]
 8006c18:	1d19      	adds	r1, r3, #4
 8006c1a:	6029      	str	r1, [r5, #0]
 8006c1c:	0601      	lsls	r1, r0, #24
 8006c1e:	d501      	bpl.n	8006c24 <_printf_i+0xec>
 8006c20:	681e      	ldr	r6, [r3, #0]
 8006c22:	e002      	b.n	8006c2a <_printf_i+0xf2>
 8006c24:	0646      	lsls	r6, r0, #25
 8006c26:	d5fb      	bpl.n	8006c20 <_printf_i+0xe8>
 8006c28:	881e      	ldrh	r6, [r3, #0]
 8006c2a:	4854      	ldr	r0, [pc, #336]	; (8006d7c <_printf_i+0x244>)
 8006c2c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c2e:	bf0c      	ite	eq
 8006c30:	2308      	moveq	r3, #8
 8006c32:	230a      	movne	r3, #10
 8006c34:	2100      	movs	r1, #0
 8006c36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c3a:	6865      	ldr	r5, [r4, #4]
 8006c3c:	60a5      	str	r5, [r4, #8]
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	bfa2      	ittt	ge
 8006c42:	6821      	ldrge	r1, [r4, #0]
 8006c44:	f021 0104 	bicge.w	r1, r1, #4
 8006c48:	6021      	strge	r1, [r4, #0]
 8006c4a:	b90e      	cbnz	r6, 8006c50 <_printf_i+0x118>
 8006c4c:	2d00      	cmp	r5, #0
 8006c4e:	d04d      	beq.n	8006cec <_printf_i+0x1b4>
 8006c50:	4615      	mov	r5, r2
 8006c52:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c56:	fb03 6711 	mls	r7, r3, r1, r6
 8006c5a:	5dc7      	ldrb	r7, [r0, r7]
 8006c5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c60:	4637      	mov	r7, r6
 8006c62:	42bb      	cmp	r3, r7
 8006c64:	460e      	mov	r6, r1
 8006c66:	d9f4      	bls.n	8006c52 <_printf_i+0x11a>
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d10b      	bne.n	8006c84 <_printf_i+0x14c>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	07de      	lsls	r6, r3, #31
 8006c70:	d508      	bpl.n	8006c84 <_printf_i+0x14c>
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6861      	ldr	r1, [r4, #4]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	bfde      	ittt	le
 8006c7a:	2330      	movle	r3, #48	; 0x30
 8006c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006c84:	1b52      	subs	r2, r2, r5
 8006c86:	6122      	str	r2, [r4, #16]
 8006c88:	f8cd a000 	str.w	sl, [sp]
 8006c8c:	464b      	mov	r3, r9
 8006c8e:	aa03      	add	r2, sp, #12
 8006c90:	4621      	mov	r1, r4
 8006c92:	4640      	mov	r0, r8
 8006c94:	f7ff fee2 	bl	8006a5c <_printf_common>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	d14c      	bne.n	8006d36 <_printf_i+0x1fe>
 8006c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ca0:	b004      	add	sp, #16
 8006ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca6:	4835      	ldr	r0, [pc, #212]	; (8006d7c <_printf_i+0x244>)
 8006ca8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cac:	6829      	ldr	r1, [r5, #0]
 8006cae:	6823      	ldr	r3, [r4, #0]
 8006cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cb4:	6029      	str	r1, [r5, #0]
 8006cb6:	061d      	lsls	r5, r3, #24
 8006cb8:	d514      	bpl.n	8006ce4 <_printf_i+0x1ac>
 8006cba:	07df      	lsls	r7, r3, #31
 8006cbc:	bf44      	itt	mi
 8006cbe:	f043 0320 	orrmi.w	r3, r3, #32
 8006cc2:	6023      	strmi	r3, [r4, #0]
 8006cc4:	b91e      	cbnz	r6, 8006cce <_printf_i+0x196>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f023 0320 	bic.w	r3, r3, #32
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	2310      	movs	r3, #16
 8006cd0:	e7b0      	b.n	8006c34 <_printf_i+0xfc>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	2378      	movs	r3, #120	; 0x78
 8006cdc:	4828      	ldr	r0, [pc, #160]	; (8006d80 <_printf_i+0x248>)
 8006cde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ce2:	e7e3      	b.n	8006cac <_printf_i+0x174>
 8006ce4:	0659      	lsls	r1, r3, #25
 8006ce6:	bf48      	it	mi
 8006ce8:	b2b6      	uxthmi	r6, r6
 8006cea:	e7e6      	b.n	8006cba <_printf_i+0x182>
 8006cec:	4615      	mov	r5, r2
 8006cee:	e7bb      	b.n	8006c68 <_printf_i+0x130>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	6826      	ldr	r6, [r4, #0]
 8006cf4:	6961      	ldr	r1, [r4, #20]
 8006cf6:	1d18      	adds	r0, r3, #4
 8006cf8:	6028      	str	r0, [r5, #0]
 8006cfa:	0635      	lsls	r5, r6, #24
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	d501      	bpl.n	8006d04 <_printf_i+0x1cc>
 8006d00:	6019      	str	r1, [r3, #0]
 8006d02:	e002      	b.n	8006d0a <_printf_i+0x1d2>
 8006d04:	0670      	lsls	r0, r6, #25
 8006d06:	d5fb      	bpl.n	8006d00 <_printf_i+0x1c8>
 8006d08:	8019      	strh	r1, [r3, #0]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6123      	str	r3, [r4, #16]
 8006d0e:	4615      	mov	r5, r2
 8006d10:	e7ba      	b.n	8006c88 <_printf_i+0x150>
 8006d12:	682b      	ldr	r3, [r5, #0]
 8006d14:	1d1a      	adds	r2, r3, #4
 8006d16:	602a      	str	r2, [r5, #0]
 8006d18:	681d      	ldr	r5, [r3, #0]
 8006d1a:	6862      	ldr	r2, [r4, #4]
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f7f9 fa76 	bl	8000210 <memchr>
 8006d24:	b108      	cbz	r0, 8006d2a <_printf_i+0x1f2>
 8006d26:	1b40      	subs	r0, r0, r5
 8006d28:	6060      	str	r0, [r4, #4]
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	6123      	str	r3, [r4, #16]
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d34:	e7a8      	b.n	8006c88 <_printf_i+0x150>
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	462a      	mov	r2, r5
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	47d0      	blx	sl
 8006d40:	3001      	adds	r0, #1
 8006d42:	d0ab      	beq.n	8006c9c <_printf_i+0x164>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	079b      	lsls	r3, r3, #30
 8006d48:	d413      	bmi.n	8006d72 <_printf_i+0x23a>
 8006d4a:	68e0      	ldr	r0, [r4, #12]
 8006d4c:	9b03      	ldr	r3, [sp, #12]
 8006d4e:	4298      	cmp	r0, r3
 8006d50:	bfb8      	it	lt
 8006d52:	4618      	movlt	r0, r3
 8006d54:	e7a4      	b.n	8006ca0 <_printf_i+0x168>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4632      	mov	r2, r6
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	47d0      	blx	sl
 8006d60:	3001      	adds	r0, #1
 8006d62:	d09b      	beq.n	8006c9c <_printf_i+0x164>
 8006d64:	3501      	adds	r5, #1
 8006d66:	68e3      	ldr	r3, [r4, #12]
 8006d68:	9903      	ldr	r1, [sp, #12]
 8006d6a:	1a5b      	subs	r3, r3, r1
 8006d6c:	42ab      	cmp	r3, r5
 8006d6e:	dcf2      	bgt.n	8006d56 <_printf_i+0x21e>
 8006d70:	e7eb      	b.n	8006d4a <_printf_i+0x212>
 8006d72:	2500      	movs	r5, #0
 8006d74:	f104 0619 	add.w	r6, r4, #25
 8006d78:	e7f5      	b.n	8006d66 <_printf_i+0x22e>
 8006d7a:	bf00      	nop
 8006d7c:	0800c554 	.word	0x0800c554
 8006d80:	0800c565 	.word	0x0800c565

08006d84 <_scanf_float>:
 8006d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d88:	b087      	sub	sp, #28
 8006d8a:	4617      	mov	r7, r2
 8006d8c:	9303      	str	r3, [sp, #12]
 8006d8e:	688b      	ldr	r3, [r1, #8]
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006d96:	bf83      	ittte	hi
 8006d98:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006d9c:	195b      	addhi	r3, r3, r5
 8006d9e:	9302      	strhi	r3, [sp, #8]
 8006da0:	2300      	movls	r3, #0
 8006da2:	bf86      	itte	hi
 8006da4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006da8:	608b      	strhi	r3, [r1, #8]
 8006daa:	9302      	strls	r3, [sp, #8]
 8006dac:	680b      	ldr	r3, [r1, #0]
 8006dae:	468b      	mov	fp, r1
 8006db0:	2500      	movs	r5, #0
 8006db2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006db6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006dba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006dbe:	4680      	mov	r8, r0
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	465e      	mov	r6, fp
 8006dc4:	46aa      	mov	sl, r5
 8006dc6:	46a9      	mov	r9, r5
 8006dc8:	9501      	str	r5, [sp, #4]
 8006dca:	68a2      	ldr	r2, [r4, #8]
 8006dcc:	b152      	cbz	r2, 8006de4 <_scanf_float+0x60>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b4e      	cmp	r3, #78	; 0x4e
 8006dd4:	d864      	bhi.n	8006ea0 <_scanf_float+0x11c>
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d83c      	bhi.n	8006e54 <_scanf_float+0xd0>
 8006dda:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006dde:	b2c8      	uxtb	r0, r1
 8006de0:	280e      	cmp	r0, #14
 8006de2:	d93a      	bls.n	8006e5a <_scanf_float+0xd6>
 8006de4:	f1b9 0f00 	cmp.w	r9, #0
 8006de8:	d003      	beq.n	8006df2 <_scanf_float+0x6e>
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006df6:	f1ba 0f01 	cmp.w	sl, #1
 8006dfa:	f200 8113 	bhi.w	8007024 <_scanf_float+0x2a0>
 8006dfe:	455e      	cmp	r6, fp
 8006e00:	f200 8105 	bhi.w	800700e <_scanf_float+0x28a>
 8006e04:	2501      	movs	r5, #1
 8006e06:	4628      	mov	r0, r5
 8006e08:	b007      	add	sp, #28
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006e12:	2a0d      	cmp	r2, #13
 8006e14:	d8e6      	bhi.n	8006de4 <_scanf_float+0x60>
 8006e16:	a101      	add	r1, pc, #4	; (adr r1, 8006e1c <_scanf_float+0x98>)
 8006e18:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e1c:	08006f5b 	.word	0x08006f5b
 8006e20:	08006de5 	.word	0x08006de5
 8006e24:	08006de5 	.word	0x08006de5
 8006e28:	08006de5 	.word	0x08006de5
 8006e2c:	08006fbb 	.word	0x08006fbb
 8006e30:	08006f93 	.word	0x08006f93
 8006e34:	08006de5 	.word	0x08006de5
 8006e38:	08006de5 	.word	0x08006de5
 8006e3c:	08006f69 	.word	0x08006f69
 8006e40:	08006de5 	.word	0x08006de5
 8006e44:	08006de5 	.word	0x08006de5
 8006e48:	08006de5 	.word	0x08006de5
 8006e4c:	08006de5 	.word	0x08006de5
 8006e50:	08006f21 	.word	0x08006f21
 8006e54:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006e58:	e7db      	b.n	8006e12 <_scanf_float+0x8e>
 8006e5a:	290e      	cmp	r1, #14
 8006e5c:	d8c2      	bhi.n	8006de4 <_scanf_float+0x60>
 8006e5e:	a001      	add	r0, pc, #4	; (adr r0, 8006e64 <_scanf_float+0xe0>)
 8006e60:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006e64:	08006f13 	.word	0x08006f13
 8006e68:	08006de5 	.word	0x08006de5
 8006e6c:	08006f13 	.word	0x08006f13
 8006e70:	08006fa7 	.word	0x08006fa7
 8006e74:	08006de5 	.word	0x08006de5
 8006e78:	08006ec1 	.word	0x08006ec1
 8006e7c:	08006efd 	.word	0x08006efd
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006efd 	.word	0x08006efd
 8006e88:	08006efd 	.word	0x08006efd
 8006e8c:	08006efd 	.word	0x08006efd
 8006e90:	08006efd 	.word	0x08006efd
 8006e94:	08006efd 	.word	0x08006efd
 8006e98:	08006efd 	.word	0x08006efd
 8006e9c:	08006efd 	.word	0x08006efd
 8006ea0:	2b6e      	cmp	r3, #110	; 0x6e
 8006ea2:	d809      	bhi.n	8006eb8 <_scanf_float+0x134>
 8006ea4:	2b60      	cmp	r3, #96	; 0x60
 8006ea6:	d8b2      	bhi.n	8006e0e <_scanf_float+0x8a>
 8006ea8:	2b54      	cmp	r3, #84	; 0x54
 8006eaa:	d077      	beq.n	8006f9c <_scanf_float+0x218>
 8006eac:	2b59      	cmp	r3, #89	; 0x59
 8006eae:	d199      	bne.n	8006de4 <_scanf_float+0x60>
 8006eb0:	2d07      	cmp	r5, #7
 8006eb2:	d197      	bne.n	8006de4 <_scanf_float+0x60>
 8006eb4:	2508      	movs	r5, #8
 8006eb6:	e029      	b.n	8006f0c <_scanf_float+0x188>
 8006eb8:	2b74      	cmp	r3, #116	; 0x74
 8006eba:	d06f      	beq.n	8006f9c <_scanf_float+0x218>
 8006ebc:	2b79      	cmp	r3, #121	; 0x79
 8006ebe:	e7f6      	b.n	8006eae <_scanf_float+0x12a>
 8006ec0:	6821      	ldr	r1, [r4, #0]
 8006ec2:	05c8      	lsls	r0, r1, #23
 8006ec4:	d51a      	bpl.n	8006efc <_scanf_float+0x178>
 8006ec6:	9b02      	ldr	r3, [sp, #8]
 8006ec8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ecc:	6021      	str	r1, [r4, #0]
 8006ece:	f109 0901 	add.w	r9, r9, #1
 8006ed2:	b11b      	cbz	r3, 8006edc <_scanf_float+0x158>
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	3201      	adds	r2, #1
 8006ed8:	9302      	str	r3, [sp, #8]
 8006eda:	60a2      	str	r2, [r4, #8]
 8006edc:	68a3      	ldr	r3, [r4, #8]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	607b      	str	r3, [r7, #4]
 8006ef0:	f340 8084 	ble.w	8006ffc <_scanf_float+0x278>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	603b      	str	r3, [r7, #0]
 8006efa:	e766      	b.n	8006dca <_scanf_float+0x46>
 8006efc:	eb1a 0f05 	cmn.w	sl, r5
 8006f00:	f47f af70 	bne.w	8006de4 <_scanf_float+0x60>
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	f806 3b01 	strb.w	r3, [r6], #1
 8006f10:	e7e4      	b.n	8006edc <_scanf_float+0x158>
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	0610      	lsls	r0, r2, #24
 8006f16:	f57f af65 	bpl.w	8006de4 <_scanf_float+0x60>
 8006f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f1e:	e7f4      	b.n	8006f0a <_scanf_float+0x186>
 8006f20:	f1ba 0f00 	cmp.w	sl, #0
 8006f24:	d10e      	bne.n	8006f44 <_scanf_float+0x1c0>
 8006f26:	f1b9 0f00 	cmp.w	r9, #0
 8006f2a:	d10e      	bne.n	8006f4a <_scanf_float+0x1c6>
 8006f2c:	6822      	ldr	r2, [r4, #0]
 8006f2e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f32:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f36:	d108      	bne.n	8006f4a <_scanf_float+0x1c6>
 8006f38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f3c:	6022      	str	r2, [r4, #0]
 8006f3e:	f04f 0a01 	mov.w	sl, #1
 8006f42:	e7e3      	b.n	8006f0c <_scanf_float+0x188>
 8006f44:	f1ba 0f02 	cmp.w	sl, #2
 8006f48:	d055      	beq.n	8006ff6 <_scanf_float+0x272>
 8006f4a:	2d01      	cmp	r5, #1
 8006f4c:	d002      	beq.n	8006f54 <_scanf_float+0x1d0>
 8006f4e:	2d04      	cmp	r5, #4
 8006f50:	f47f af48 	bne.w	8006de4 <_scanf_float+0x60>
 8006f54:	3501      	adds	r5, #1
 8006f56:	b2ed      	uxtb	r5, r5
 8006f58:	e7d8      	b.n	8006f0c <_scanf_float+0x188>
 8006f5a:	f1ba 0f01 	cmp.w	sl, #1
 8006f5e:	f47f af41 	bne.w	8006de4 <_scanf_float+0x60>
 8006f62:	f04f 0a02 	mov.w	sl, #2
 8006f66:	e7d1      	b.n	8006f0c <_scanf_float+0x188>
 8006f68:	b97d      	cbnz	r5, 8006f8a <_scanf_float+0x206>
 8006f6a:	f1b9 0f00 	cmp.w	r9, #0
 8006f6e:	f47f af3c 	bne.w	8006dea <_scanf_float+0x66>
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006f78:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006f7c:	f47f af39 	bne.w	8006df2 <_scanf_float+0x6e>
 8006f80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f84:	6022      	str	r2, [r4, #0]
 8006f86:	2501      	movs	r5, #1
 8006f88:	e7c0      	b.n	8006f0c <_scanf_float+0x188>
 8006f8a:	2d03      	cmp	r5, #3
 8006f8c:	d0e2      	beq.n	8006f54 <_scanf_float+0x1d0>
 8006f8e:	2d05      	cmp	r5, #5
 8006f90:	e7de      	b.n	8006f50 <_scanf_float+0x1cc>
 8006f92:	2d02      	cmp	r5, #2
 8006f94:	f47f af26 	bne.w	8006de4 <_scanf_float+0x60>
 8006f98:	2503      	movs	r5, #3
 8006f9a:	e7b7      	b.n	8006f0c <_scanf_float+0x188>
 8006f9c:	2d06      	cmp	r5, #6
 8006f9e:	f47f af21 	bne.w	8006de4 <_scanf_float+0x60>
 8006fa2:	2507      	movs	r5, #7
 8006fa4:	e7b2      	b.n	8006f0c <_scanf_float+0x188>
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	0591      	lsls	r1, r2, #22
 8006faa:	f57f af1b 	bpl.w	8006de4 <_scanf_float+0x60>
 8006fae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006fb2:	6022      	str	r2, [r4, #0]
 8006fb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fb8:	e7a8      	b.n	8006f0c <_scanf_float+0x188>
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006fc0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006fc4:	d006      	beq.n	8006fd4 <_scanf_float+0x250>
 8006fc6:	0550      	lsls	r0, r2, #21
 8006fc8:	f57f af0c 	bpl.w	8006de4 <_scanf_float+0x60>
 8006fcc:	f1b9 0f00 	cmp.w	r9, #0
 8006fd0:	f43f af0f 	beq.w	8006df2 <_scanf_float+0x6e>
 8006fd4:	0591      	lsls	r1, r2, #22
 8006fd6:	bf58      	it	pl
 8006fd8:	9901      	ldrpl	r1, [sp, #4]
 8006fda:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fde:	bf58      	it	pl
 8006fe0:	eba9 0101 	subpl.w	r1, r9, r1
 8006fe4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006fe8:	bf58      	it	pl
 8006fea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006fee:	6022      	str	r2, [r4, #0]
 8006ff0:	f04f 0900 	mov.w	r9, #0
 8006ff4:	e78a      	b.n	8006f0c <_scanf_float+0x188>
 8006ff6:	f04f 0a03 	mov.w	sl, #3
 8006ffa:	e787      	b.n	8006f0c <_scanf_float+0x188>
 8006ffc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007000:	4639      	mov	r1, r7
 8007002:	4640      	mov	r0, r8
 8007004:	4798      	blx	r3
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f aedf 	beq.w	8006dca <_scanf_float+0x46>
 800700c:	e6ea      	b.n	8006de4 <_scanf_float+0x60>
 800700e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007016:	463a      	mov	r2, r7
 8007018:	4640      	mov	r0, r8
 800701a:	4798      	blx	r3
 800701c:	6923      	ldr	r3, [r4, #16]
 800701e:	3b01      	subs	r3, #1
 8007020:	6123      	str	r3, [r4, #16]
 8007022:	e6ec      	b.n	8006dfe <_scanf_float+0x7a>
 8007024:	1e6b      	subs	r3, r5, #1
 8007026:	2b06      	cmp	r3, #6
 8007028:	d825      	bhi.n	8007076 <_scanf_float+0x2f2>
 800702a:	2d02      	cmp	r5, #2
 800702c:	d836      	bhi.n	800709c <_scanf_float+0x318>
 800702e:	455e      	cmp	r6, fp
 8007030:	f67f aee8 	bls.w	8006e04 <_scanf_float+0x80>
 8007034:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007038:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800703c:	463a      	mov	r2, r7
 800703e:	4640      	mov	r0, r8
 8007040:	4798      	blx	r3
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	3b01      	subs	r3, #1
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	e7f1      	b.n	800702e <_scanf_float+0x2aa>
 800704a:	9802      	ldr	r0, [sp, #8]
 800704c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007050:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007054:	9002      	str	r0, [sp, #8]
 8007056:	463a      	mov	r2, r7
 8007058:	4640      	mov	r0, r8
 800705a:	4798      	blx	r3
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	3b01      	subs	r3, #1
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007066:	fa5f fa8a 	uxtb.w	sl, sl
 800706a:	f1ba 0f02 	cmp.w	sl, #2
 800706e:	d1ec      	bne.n	800704a <_scanf_float+0x2c6>
 8007070:	3d03      	subs	r5, #3
 8007072:	b2ed      	uxtb	r5, r5
 8007074:	1b76      	subs	r6, r6, r5
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	05da      	lsls	r2, r3, #23
 800707a:	d52f      	bpl.n	80070dc <_scanf_float+0x358>
 800707c:	055b      	lsls	r3, r3, #21
 800707e:	d510      	bpl.n	80070a2 <_scanf_float+0x31e>
 8007080:	455e      	cmp	r6, fp
 8007082:	f67f aebf 	bls.w	8006e04 <_scanf_float+0x80>
 8007086:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800708a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800708e:	463a      	mov	r2, r7
 8007090:	4640      	mov	r0, r8
 8007092:	4798      	blx	r3
 8007094:	6923      	ldr	r3, [r4, #16]
 8007096:	3b01      	subs	r3, #1
 8007098:	6123      	str	r3, [r4, #16]
 800709a:	e7f1      	b.n	8007080 <_scanf_float+0x2fc>
 800709c:	46aa      	mov	sl, r5
 800709e:	9602      	str	r6, [sp, #8]
 80070a0:	e7df      	b.n	8007062 <_scanf_float+0x2de>
 80070a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80070a6:	6923      	ldr	r3, [r4, #16]
 80070a8:	2965      	cmp	r1, #101	; 0x65
 80070aa:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80070ae:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	d00c      	beq.n	80070d0 <_scanf_float+0x34c>
 80070b6:	2945      	cmp	r1, #69	; 0x45
 80070b8:	d00a      	beq.n	80070d0 <_scanf_float+0x34c>
 80070ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070be:	463a      	mov	r2, r7
 80070c0:	4640      	mov	r0, r8
 80070c2:	4798      	blx	r3
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	1eb5      	subs	r5, r6, #2
 80070ce:	6123      	str	r3, [r4, #16]
 80070d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070d4:	463a      	mov	r2, r7
 80070d6:	4640      	mov	r0, r8
 80070d8:	4798      	blx	r3
 80070da:	462e      	mov	r6, r5
 80070dc:	6825      	ldr	r5, [r4, #0]
 80070de:	f015 0510 	ands.w	r5, r5, #16
 80070e2:	d159      	bne.n	8007198 <_scanf_float+0x414>
 80070e4:	7035      	strb	r5, [r6, #0]
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070f0:	d11b      	bne.n	800712a <_scanf_float+0x3a6>
 80070f2:	9b01      	ldr	r3, [sp, #4]
 80070f4:	454b      	cmp	r3, r9
 80070f6:	eba3 0209 	sub.w	r2, r3, r9
 80070fa:	d123      	bne.n	8007144 <_scanf_float+0x3c0>
 80070fc:	2200      	movs	r2, #0
 80070fe:	4659      	mov	r1, fp
 8007100:	4640      	mov	r0, r8
 8007102:	f000 ffa3 	bl	800804c <_strtod_r>
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	f012 0f02 	tst.w	r2, #2
 800710e:	ec57 6b10 	vmov	r6, r7, d0
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	d021      	beq.n	800715a <_scanf_float+0x3d6>
 8007116:	9903      	ldr	r1, [sp, #12]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	600a      	str	r2, [r1, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	e9c3 6700 	strd	r6, r7, [r3]
 8007122:	68e3      	ldr	r3, [r4, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60e3      	str	r3, [r4, #12]
 8007128:	e66d      	b.n	8006e06 <_scanf_float+0x82>
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0e5      	beq.n	80070fc <_scanf_float+0x378>
 8007130:	9905      	ldr	r1, [sp, #20]
 8007132:	230a      	movs	r3, #10
 8007134:	462a      	mov	r2, r5
 8007136:	3101      	adds	r1, #1
 8007138:	4640      	mov	r0, r8
 800713a:	f001 f80f 	bl	800815c <_strtol_r>
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	9e05      	ldr	r6, [sp, #20]
 8007142:	1ac2      	subs	r2, r0, r3
 8007144:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007148:	429e      	cmp	r6, r3
 800714a:	bf28      	it	cs
 800714c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007150:	4912      	ldr	r1, [pc, #72]	; (800719c <_scanf_float+0x418>)
 8007152:	4630      	mov	r0, r6
 8007154:	f000 f938 	bl	80073c8 <siprintf>
 8007158:	e7d0      	b.n	80070fc <_scanf_float+0x378>
 800715a:	9903      	ldr	r1, [sp, #12]
 800715c:	f012 0f04 	tst.w	r2, #4
 8007160:	f103 0204 	add.w	r2, r3, #4
 8007164:	600a      	str	r2, [r1, #0]
 8007166:	d1d9      	bne.n	800711c <_scanf_float+0x398>
 8007168:	f8d3 8000 	ldr.w	r8, [r3]
 800716c:	ee10 2a10 	vmov	r2, s0
 8007170:	ee10 0a10 	vmov	r0, s0
 8007174:	463b      	mov	r3, r7
 8007176:	4639      	mov	r1, r7
 8007178:	f7f9 fcf0 	bl	8000b5c <__aeabi_dcmpun>
 800717c:	b128      	cbz	r0, 800718a <_scanf_float+0x406>
 800717e:	4808      	ldr	r0, [pc, #32]	; (80071a0 <_scanf_float+0x41c>)
 8007180:	f000 f91c 	bl	80073bc <nanf>
 8007184:	ed88 0a00 	vstr	s0, [r8]
 8007188:	e7cb      	b.n	8007122 <_scanf_float+0x39e>
 800718a:	4630      	mov	r0, r6
 800718c:	4639      	mov	r1, r7
 800718e:	f7f9 fd43 	bl	8000c18 <__aeabi_d2f>
 8007192:	f8c8 0000 	str.w	r0, [r8]
 8007196:	e7c4      	b.n	8007122 <_scanf_float+0x39e>
 8007198:	2500      	movs	r5, #0
 800719a:	e634      	b.n	8006e06 <_scanf_float+0x82>
 800719c:	0800c576 	.word	0x0800c576
 80071a0:	0800ca03 	.word	0x0800ca03

080071a4 <iprintf>:
 80071a4:	b40f      	push	{r0, r1, r2, r3}
 80071a6:	4b0a      	ldr	r3, [pc, #40]	; (80071d0 <iprintf+0x2c>)
 80071a8:	b513      	push	{r0, r1, r4, lr}
 80071aa:	681c      	ldr	r4, [r3, #0]
 80071ac:	b124      	cbz	r4, 80071b8 <iprintf+0x14>
 80071ae:	69a3      	ldr	r3, [r4, #24]
 80071b0:	b913      	cbnz	r3, 80071b8 <iprintf+0x14>
 80071b2:	4620      	mov	r0, r4
 80071b4:	f001 ff7a 	bl	80090ac <__sinit>
 80071b8:	ab05      	add	r3, sp, #20
 80071ba:	9a04      	ldr	r2, [sp, #16]
 80071bc:	68a1      	ldr	r1, [r4, #8]
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	4620      	mov	r0, r4
 80071c2:	f003 fb6f 	bl	800a8a4 <_vfiprintf_r>
 80071c6:	b002      	add	sp, #8
 80071c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071cc:	b004      	add	sp, #16
 80071ce:	4770      	bx	lr
 80071d0:	2000001c 	.word	0x2000001c

080071d4 <putchar>:
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <putchar+0x28>)
 80071d6:	b513      	push	{r0, r1, r4, lr}
 80071d8:	681c      	ldr	r4, [r3, #0]
 80071da:	4601      	mov	r1, r0
 80071dc:	b134      	cbz	r4, 80071ec <putchar+0x18>
 80071de:	69a3      	ldr	r3, [r4, #24]
 80071e0:	b923      	cbnz	r3, 80071ec <putchar+0x18>
 80071e2:	9001      	str	r0, [sp, #4]
 80071e4:	4620      	mov	r0, r4
 80071e6:	f001 ff61 	bl	80090ac <__sinit>
 80071ea:	9901      	ldr	r1, [sp, #4]
 80071ec:	68a2      	ldr	r2, [r4, #8]
 80071ee:	4620      	mov	r0, r4
 80071f0:	b002      	add	sp, #8
 80071f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f6:	f003 bfa5 	b.w	800b144 <_putc_r>
 80071fa:	bf00      	nop
 80071fc:	2000001c 	.word	0x2000001c

08007200 <iscanf>:
 8007200:	b40f      	push	{r0, r1, r2, r3}
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <iscanf+0x2c>)
 8007204:	b513      	push	{r0, r1, r4, lr}
 8007206:	681c      	ldr	r4, [r3, #0]
 8007208:	b124      	cbz	r4, 8007214 <iscanf+0x14>
 800720a:	69a3      	ldr	r3, [r4, #24]
 800720c:	b913      	cbnz	r3, 8007214 <iscanf+0x14>
 800720e:	4620      	mov	r0, r4
 8007210:	f001 ff4c 	bl	80090ac <__sinit>
 8007214:	ab05      	add	r3, sp, #20
 8007216:	9a04      	ldr	r2, [sp, #16]
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	9301      	str	r3, [sp, #4]
 800721c:	4620      	mov	r0, r4
 800721e:	f003 fe17 	bl	800ae50 <_vfiscanf_r>
 8007222:	b002      	add	sp, #8
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr
 800722c:	2000001c 	.word	0x2000001c

08007230 <setvbuf>:
 8007230:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007234:	461d      	mov	r5, r3
 8007236:	4b5d      	ldr	r3, [pc, #372]	; (80073ac <setvbuf+0x17c>)
 8007238:	681f      	ldr	r7, [r3, #0]
 800723a:	4604      	mov	r4, r0
 800723c:	460e      	mov	r6, r1
 800723e:	4690      	mov	r8, r2
 8007240:	b127      	cbz	r7, 800724c <setvbuf+0x1c>
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	b913      	cbnz	r3, 800724c <setvbuf+0x1c>
 8007246:	4638      	mov	r0, r7
 8007248:	f001 ff30 	bl	80090ac <__sinit>
 800724c:	4b58      	ldr	r3, [pc, #352]	; (80073b0 <setvbuf+0x180>)
 800724e:	429c      	cmp	r4, r3
 8007250:	d167      	bne.n	8007322 <setvbuf+0xf2>
 8007252:	687c      	ldr	r4, [r7, #4]
 8007254:	f1b8 0f02 	cmp.w	r8, #2
 8007258:	d006      	beq.n	8007268 <setvbuf+0x38>
 800725a:	f1b8 0f01 	cmp.w	r8, #1
 800725e:	f200 809f 	bhi.w	80073a0 <setvbuf+0x170>
 8007262:	2d00      	cmp	r5, #0
 8007264:	f2c0 809c 	blt.w	80073a0 <setvbuf+0x170>
 8007268:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800726a:	07db      	lsls	r3, r3, #31
 800726c:	d405      	bmi.n	800727a <setvbuf+0x4a>
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	0598      	lsls	r0, r3, #22
 8007272:	d402      	bmi.n	800727a <setvbuf+0x4a>
 8007274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007276:	f002 fb48 	bl	800990a <__retarget_lock_acquire_recursive>
 800727a:	4621      	mov	r1, r4
 800727c:	4638      	mov	r0, r7
 800727e:	f001 fe6f 	bl	8008f60 <_fflush_r>
 8007282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007284:	b141      	cbz	r1, 8007298 <setvbuf+0x68>
 8007286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800728a:	4299      	cmp	r1, r3
 800728c:	d002      	beq.n	8007294 <setvbuf+0x64>
 800728e:	4638      	mov	r0, r7
 8007290:	f003 f8a2 	bl	800a3d8 <_free_r>
 8007294:	2300      	movs	r3, #0
 8007296:	6363      	str	r3, [r4, #52]	; 0x34
 8007298:	2300      	movs	r3, #0
 800729a:	61a3      	str	r3, [r4, #24]
 800729c:	6063      	str	r3, [r4, #4]
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	0619      	lsls	r1, r3, #24
 80072a2:	d503      	bpl.n	80072ac <setvbuf+0x7c>
 80072a4:	6921      	ldr	r1, [r4, #16]
 80072a6:	4638      	mov	r0, r7
 80072a8:	f003 f896 	bl	800a3d8 <_free_r>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80072b2:	f023 0303 	bic.w	r3, r3, #3
 80072b6:	f1b8 0f02 	cmp.w	r8, #2
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	d06c      	beq.n	8007398 <setvbuf+0x168>
 80072be:	ab01      	add	r3, sp, #4
 80072c0:	466a      	mov	r2, sp
 80072c2:	4621      	mov	r1, r4
 80072c4:	4638      	mov	r0, r7
 80072c6:	f002 fb22 	bl	800990e <__swhatbuf_r>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	4318      	orrs	r0, r3
 80072ce:	81a0      	strh	r0, [r4, #12]
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	d130      	bne.n	8007336 <setvbuf+0x106>
 80072d4:	9d00      	ldr	r5, [sp, #0]
 80072d6:	4628      	mov	r0, r5
 80072d8:	f002 fb7e 	bl	80099d8 <malloc>
 80072dc:	4606      	mov	r6, r0
 80072de:	2800      	cmp	r0, #0
 80072e0:	d155      	bne.n	800738e <setvbuf+0x15e>
 80072e2:	f8dd 9000 	ldr.w	r9, [sp]
 80072e6:	45a9      	cmp	r9, r5
 80072e8:	d14a      	bne.n	8007380 <setvbuf+0x150>
 80072ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80072ee:	2200      	movs	r2, #0
 80072f0:	60a2      	str	r2, [r4, #8]
 80072f2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80072f6:	6022      	str	r2, [r4, #0]
 80072f8:	6122      	str	r2, [r4, #16]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007300:	6162      	str	r2, [r4, #20]
 8007302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	07d2      	lsls	r2, r2, #31
 800730a:	81a3      	strh	r3, [r4, #12]
 800730c:	d405      	bmi.n	800731a <setvbuf+0xea>
 800730e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8007312:	d102      	bne.n	800731a <setvbuf+0xea>
 8007314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007316:	f002 faf9 	bl	800990c <__retarget_lock_release_recursive>
 800731a:	4628      	mov	r0, r5
 800731c:	b003      	add	sp, #12
 800731e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007322:	4b24      	ldr	r3, [pc, #144]	; (80073b4 <setvbuf+0x184>)
 8007324:	429c      	cmp	r4, r3
 8007326:	d101      	bne.n	800732c <setvbuf+0xfc>
 8007328:	68bc      	ldr	r4, [r7, #8]
 800732a:	e793      	b.n	8007254 <setvbuf+0x24>
 800732c:	4b22      	ldr	r3, [pc, #136]	; (80073b8 <setvbuf+0x188>)
 800732e:	429c      	cmp	r4, r3
 8007330:	bf08      	it	eq
 8007332:	68fc      	ldreq	r4, [r7, #12]
 8007334:	e78e      	b.n	8007254 <setvbuf+0x24>
 8007336:	2e00      	cmp	r6, #0
 8007338:	d0cd      	beq.n	80072d6 <setvbuf+0xa6>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	b913      	cbnz	r3, 8007344 <setvbuf+0x114>
 800733e:	4638      	mov	r0, r7
 8007340:	f001 feb4 	bl	80090ac <__sinit>
 8007344:	f1b8 0f01 	cmp.w	r8, #1
 8007348:	bf08      	it	eq
 800734a:	89a3      	ldrheq	r3, [r4, #12]
 800734c:	6026      	str	r6, [r4, #0]
 800734e:	bf04      	itt	eq
 8007350:	f043 0301 	orreq.w	r3, r3, #1
 8007354:	81a3      	strheq	r3, [r4, #12]
 8007356:	89a2      	ldrh	r2, [r4, #12]
 8007358:	f012 0308 	ands.w	r3, r2, #8
 800735c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007360:	d01c      	beq.n	800739c <setvbuf+0x16c>
 8007362:	07d3      	lsls	r3, r2, #31
 8007364:	bf41      	itttt	mi
 8007366:	2300      	movmi	r3, #0
 8007368:	426d      	negmi	r5, r5
 800736a:	60a3      	strmi	r3, [r4, #8]
 800736c:	61a5      	strmi	r5, [r4, #24]
 800736e:	bf58      	it	pl
 8007370:	60a5      	strpl	r5, [r4, #8]
 8007372:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8007374:	f015 0501 	ands.w	r5, r5, #1
 8007378:	d115      	bne.n	80073a6 <setvbuf+0x176>
 800737a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800737e:	e7c8      	b.n	8007312 <setvbuf+0xe2>
 8007380:	4648      	mov	r0, r9
 8007382:	f002 fb29 	bl	80099d8 <malloc>
 8007386:	4606      	mov	r6, r0
 8007388:	2800      	cmp	r0, #0
 800738a:	d0ae      	beq.n	80072ea <setvbuf+0xba>
 800738c:	464d      	mov	r5, r9
 800738e:	89a3      	ldrh	r3, [r4, #12]
 8007390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007394:	81a3      	strh	r3, [r4, #12]
 8007396:	e7d0      	b.n	800733a <setvbuf+0x10a>
 8007398:	2500      	movs	r5, #0
 800739a:	e7a8      	b.n	80072ee <setvbuf+0xbe>
 800739c:	60a3      	str	r3, [r4, #8]
 800739e:	e7e8      	b.n	8007372 <setvbuf+0x142>
 80073a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80073a4:	e7b9      	b.n	800731a <setvbuf+0xea>
 80073a6:	2500      	movs	r5, #0
 80073a8:	e7b7      	b.n	800731a <setvbuf+0xea>
 80073aa:	bf00      	nop
 80073ac:	2000001c 	.word	0x2000001c
 80073b0:	0800c784 	.word	0x0800c784
 80073b4:	0800c7a4 	.word	0x0800c7a4
 80073b8:	0800c764 	.word	0x0800c764

080073bc <nanf>:
 80073bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80073c4 <nanf+0x8>
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	7fc00000 	.word	0x7fc00000

080073c8 <siprintf>:
 80073c8:	b40e      	push	{r1, r2, r3}
 80073ca:	b500      	push	{lr}
 80073cc:	b09c      	sub	sp, #112	; 0x70
 80073ce:	ab1d      	add	r3, sp, #116	; 0x74
 80073d0:	9002      	str	r0, [sp, #8]
 80073d2:	9006      	str	r0, [sp, #24]
 80073d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073d8:	4809      	ldr	r0, [pc, #36]	; (8007400 <siprintf+0x38>)
 80073da:	9107      	str	r1, [sp, #28]
 80073dc:	9104      	str	r1, [sp, #16]
 80073de:	4909      	ldr	r1, [pc, #36]	; (8007404 <siprintf+0x3c>)
 80073e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e4:	9105      	str	r1, [sp, #20]
 80073e6:	6800      	ldr	r0, [r0, #0]
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	a902      	add	r1, sp, #8
 80073ec:	f003 f930 	bl	800a650 <_svfiprintf_r>
 80073f0:	9b02      	ldr	r3, [sp, #8]
 80073f2:	2200      	movs	r2, #0
 80073f4:	701a      	strb	r2, [r3, #0]
 80073f6:	b01c      	add	sp, #112	; 0x70
 80073f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073fc:	b003      	add	sp, #12
 80073fe:	4770      	bx	lr
 8007400:	2000001c 	.word	0x2000001c
 8007404:	ffff0208 	.word	0xffff0208

08007408 <sulp>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	4604      	mov	r4, r0
 800740c:	460d      	mov	r5, r1
 800740e:	ec45 4b10 	vmov	d0, r4, r5
 8007412:	4616      	mov	r6, r2
 8007414:	f002 fe7a 	bl	800a10c <__ulp>
 8007418:	ec51 0b10 	vmov	r0, r1, d0
 800741c:	b17e      	cbz	r6, 800743e <sulp+0x36>
 800741e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd09      	ble.n	800743e <sulp+0x36>
 800742a:	051b      	lsls	r3, r3, #20
 800742c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007430:	2400      	movs	r4, #0
 8007432:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007436:	4622      	mov	r2, r4
 8007438:	462b      	mov	r3, r5
 800743a:	f7f9 f8f5 	bl	8000628 <__aeabi_dmul>
 800743e:	bd70      	pop	{r4, r5, r6, pc}

08007440 <_strtod_l>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	ed2d 8b02 	vpush	{d8}
 8007448:	b09d      	sub	sp, #116	; 0x74
 800744a:	461f      	mov	r7, r3
 800744c:	2300      	movs	r3, #0
 800744e:	9318      	str	r3, [sp, #96]	; 0x60
 8007450:	4ba2      	ldr	r3, [pc, #648]	; (80076dc <_strtod_l+0x29c>)
 8007452:	9213      	str	r2, [sp, #76]	; 0x4c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	9305      	str	r3, [sp, #20]
 8007458:	4604      	mov	r4, r0
 800745a:	4618      	mov	r0, r3
 800745c:	4688      	mov	r8, r1
 800745e:	f7f8 fecf 	bl	8000200 <strlen>
 8007462:	f04f 0a00 	mov.w	sl, #0
 8007466:	4605      	mov	r5, r0
 8007468:	f04f 0b00 	mov.w	fp, #0
 800746c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	2a2b      	cmp	r2, #43	; 0x2b
 8007476:	d04e      	beq.n	8007516 <_strtod_l+0xd6>
 8007478:	d83b      	bhi.n	80074f2 <_strtod_l+0xb2>
 800747a:	2a0d      	cmp	r2, #13
 800747c:	d834      	bhi.n	80074e8 <_strtod_l+0xa8>
 800747e:	2a08      	cmp	r2, #8
 8007480:	d834      	bhi.n	80074ec <_strtod_l+0xac>
 8007482:	2a00      	cmp	r2, #0
 8007484:	d03e      	beq.n	8007504 <_strtod_l+0xc4>
 8007486:	2300      	movs	r3, #0
 8007488:	930a      	str	r3, [sp, #40]	; 0x28
 800748a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800748c:	7833      	ldrb	r3, [r6, #0]
 800748e:	2b30      	cmp	r3, #48	; 0x30
 8007490:	f040 80b0 	bne.w	80075f4 <_strtod_l+0x1b4>
 8007494:	7873      	ldrb	r3, [r6, #1]
 8007496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800749a:	2b58      	cmp	r3, #88	; 0x58
 800749c:	d168      	bne.n	8007570 <_strtod_l+0x130>
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	9301      	str	r3, [sp, #4]
 80074a2:	ab18      	add	r3, sp, #96	; 0x60
 80074a4:	9702      	str	r7, [sp, #8]
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	4a8d      	ldr	r2, [pc, #564]	; (80076e0 <_strtod_l+0x2a0>)
 80074aa:	ab19      	add	r3, sp, #100	; 0x64
 80074ac:	a917      	add	r1, sp, #92	; 0x5c
 80074ae:	4620      	mov	r0, r4
 80074b0:	f001 ff1e 	bl	80092f0 <__gethex>
 80074b4:	f010 0707 	ands.w	r7, r0, #7
 80074b8:	4605      	mov	r5, r0
 80074ba:	d005      	beq.n	80074c8 <_strtod_l+0x88>
 80074bc:	2f06      	cmp	r7, #6
 80074be:	d12c      	bne.n	800751a <_strtod_l+0xda>
 80074c0:	3601      	adds	r6, #1
 80074c2:	2300      	movs	r3, #0
 80074c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80074c6:	930a      	str	r3, [sp, #40]	; 0x28
 80074c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 8590 	bne.w	8007ff0 <_strtod_l+0xbb0>
 80074d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d2:	b1eb      	cbz	r3, 8007510 <_strtod_l+0xd0>
 80074d4:	4652      	mov	r2, sl
 80074d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074da:	ec43 2b10 	vmov	d0, r2, r3
 80074de:	b01d      	add	sp, #116	; 0x74
 80074e0:	ecbd 8b02 	vpop	{d8}
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	2a20      	cmp	r2, #32
 80074ea:	d1cc      	bne.n	8007486 <_strtod_l+0x46>
 80074ec:	3301      	adds	r3, #1
 80074ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80074f0:	e7be      	b.n	8007470 <_strtod_l+0x30>
 80074f2:	2a2d      	cmp	r2, #45	; 0x2d
 80074f4:	d1c7      	bne.n	8007486 <_strtod_l+0x46>
 80074f6:	2201      	movs	r2, #1
 80074f8:	920a      	str	r2, [sp, #40]	; 0x28
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1c2      	bne.n	800748a <_strtod_l+0x4a>
 8007504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007506:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800750a:	2b00      	cmp	r3, #0
 800750c:	f040 856e 	bne.w	8007fec <_strtod_l+0xbac>
 8007510:	4652      	mov	r2, sl
 8007512:	465b      	mov	r3, fp
 8007514:	e7e1      	b.n	80074da <_strtod_l+0x9a>
 8007516:	2200      	movs	r2, #0
 8007518:	e7ee      	b.n	80074f8 <_strtod_l+0xb8>
 800751a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800751c:	b13a      	cbz	r2, 800752e <_strtod_l+0xee>
 800751e:	2135      	movs	r1, #53	; 0x35
 8007520:	a81a      	add	r0, sp, #104	; 0x68
 8007522:	f002 fefe 	bl	800a322 <__copybits>
 8007526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007528:	4620      	mov	r0, r4
 800752a:	f002 fabd 	bl	8009aa8 <_Bfree>
 800752e:	3f01      	subs	r7, #1
 8007530:	2f04      	cmp	r7, #4
 8007532:	d806      	bhi.n	8007542 <_strtod_l+0x102>
 8007534:	e8df f007 	tbb	[pc, r7]
 8007538:	1714030a 	.word	0x1714030a
 800753c:	0a          	.byte	0x0a
 800753d:	00          	.byte	0x00
 800753e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007542:	0728      	lsls	r0, r5, #28
 8007544:	d5c0      	bpl.n	80074c8 <_strtod_l+0x88>
 8007546:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800754a:	e7bd      	b.n	80074c8 <_strtod_l+0x88>
 800754c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007552:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007556:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800755a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800755e:	e7f0      	b.n	8007542 <_strtod_l+0x102>
 8007560:	f8df b180 	ldr.w	fp, [pc, #384]	; 80076e4 <_strtod_l+0x2a4>
 8007564:	e7ed      	b.n	8007542 <_strtod_l+0x102>
 8007566:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800756a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800756e:	e7e8      	b.n	8007542 <_strtod_l+0x102>
 8007570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	9217      	str	r2, [sp, #92]	; 0x5c
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b30      	cmp	r3, #48	; 0x30
 800757a:	d0f9      	beq.n	8007570 <_strtod_l+0x130>
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0a3      	beq.n	80074c8 <_strtod_l+0x88>
 8007580:	2301      	movs	r3, #1
 8007582:	f04f 0900 	mov.w	r9, #0
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	f8cd 901c 	str.w	r9, [sp, #28]
 8007590:	464f      	mov	r7, r9
 8007592:	220a      	movs	r2, #10
 8007594:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007596:	7806      	ldrb	r6, [r0, #0]
 8007598:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800759c:	b2d9      	uxtb	r1, r3
 800759e:	2909      	cmp	r1, #9
 80075a0:	d92a      	bls.n	80075f8 <_strtod_l+0x1b8>
 80075a2:	9905      	ldr	r1, [sp, #20]
 80075a4:	462a      	mov	r2, r5
 80075a6:	f003 ff3e 	bl	800b426 <strncmp>
 80075aa:	b398      	cbz	r0, 8007614 <_strtod_l+0x1d4>
 80075ac:	2000      	movs	r0, #0
 80075ae:	4632      	mov	r2, r6
 80075b0:	463d      	mov	r5, r7
 80075b2:	9005      	str	r0, [sp, #20]
 80075b4:	4603      	mov	r3, r0
 80075b6:	2a65      	cmp	r2, #101	; 0x65
 80075b8:	d001      	beq.n	80075be <_strtod_l+0x17e>
 80075ba:	2a45      	cmp	r2, #69	; 0x45
 80075bc:	d118      	bne.n	80075f0 <_strtod_l+0x1b0>
 80075be:	b91d      	cbnz	r5, 80075c8 <_strtod_l+0x188>
 80075c0:	9a04      	ldr	r2, [sp, #16]
 80075c2:	4302      	orrs	r2, r0
 80075c4:	d09e      	beq.n	8007504 <_strtod_l+0xc4>
 80075c6:	2500      	movs	r5, #0
 80075c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80075cc:	f108 0201 	add.w	r2, r8, #1
 80075d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80075d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80075d6:	2a2b      	cmp	r2, #43	; 0x2b
 80075d8:	d075      	beq.n	80076c6 <_strtod_l+0x286>
 80075da:	2a2d      	cmp	r2, #45	; 0x2d
 80075dc:	d07b      	beq.n	80076d6 <_strtod_l+0x296>
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80075e6:	2909      	cmp	r1, #9
 80075e8:	f240 8082 	bls.w	80076f0 <_strtod_l+0x2b0>
 80075ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80075f0:	2600      	movs	r6, #0
 80075f2:	e09d      	b.n	8007730 <_strtod_l+0x2f0>
 80075f4:	2300      	movs	r3, #0
 80075f6:	e7c4      	b.n	8007582 <_strtod_l+0x142>
 80075f8:	2f08      	cmp	r7, #8
 80075fa:	bfd8      	it	le
 80075fc:	9907      	ldrle	r1, [sp, #28]
 80075fe:	f100 0001 	add.w	r0, r0, #1
 8007602:	bfda      	itte	le
 8007604:	fb02 3301 	mlale	r3, r2, r1, r3
 8007608:	9307      	strle	r3, [sp, #28]
 800760a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800760e:	3701      	adds	r7, #1
 8007610:	9017      	str	r0, [sp, #92]	; 0x5c
 8007612:	e7bf      	b.n	8007594 <_strtod_l+0x154>
 8007614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007616:	195a      	adds	r2, r3, r5
 8007618:	9217      	str	r2, [sp, #92]	; 0x5c
 800761a:	5d5a      	ldrb	r2, [r3, r5]
 800761c:	2f00      	cmp	r7, #0
 800761e:	d037      	beq.n	8007690 <_strtod_l+0x250>
 8007620:	9005      	str	r0, [sp, #20]
 8007622:	463d      	mov	r5, r7
 8007624:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007628:	2b09      	cmp	r3, #9
 800762a:	d912      	bls.n	8007652 <_strtod_l+0x212>
 800762c:	2301      	movs	r3, #1
 800762e:	e7c2      	b.n	80075b6 <_strtod_l+0x176>
 8007630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	9217      	str	r2, [sp, #92]	; 0x5c
 8007636:	785a      	ldrb	r2, [r3, #1]
 8007638:	3001      	adds	r0, #1
 800763a:	2a30      	cmp	r2, #48	; 0x30
 800763c:	d0f8      	beq.n	8007630 <_strtod_l+0x1f0>
 800763e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007642:	2b08      	cmp	r3, #8
 8007644:	f200 84d9 	bhi.w	8007ffa <_strtod_l+0xbba>
 8007648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800764a:	9005      	str	r0, [sp, #20]
 800764c:	2000      	movs	r0, #0
 800764e:	9308      	str	r3, [sp, #32]
 8007650:	4605      	mov	r5, r0
 8007652:	3a30      	subs	r2, #48	; 0x30
 8007654:	f100 0301 	add.w	r3, r0, #1
 8007658:	d014      	beq.n	8007684 <_strtod_l+0x244>
 800765a:	9905      	ldr	r1, [sp, #20]
 800765c:	4419      	add	r1, r3
 800765e:	9105      	str	r1, [sp, #20]
 8007660:	462b      	mov	r3, r5
 8007662:	eb00 0e05 	add.w	lr, r0, r5
 8007666:	210a      	movs	r1, #10
 8007668:	4573      	cmp	r3, lr
 800766a:	d113      	bne.n	8007694 <_strtod_l+0x254>
 800766c:	182b      	adds	r3, r5, r0
 800766e:	2b08      	cmp	r3, #8
 8007670:	f105 0501 	add.w	r5, r5, #1
 8007674:	4405      	add	r5, r0
 8007676:	dc1c      	bgt.n	80076b2 <_strtod_l+0x272>
 8007678:	9907      	ldr	r1, [sp, #28]
 800767a:	230a      	movs	r3, #10
 800767c:	fb03 2301 	mla	r3, r3, r1, r2
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	2300      	movs	r3, #0
 8007684:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007686:	1c51      	adds	r1, r2, #1
 8007688:	9117      	str	r1, [sp, #92]	; 0x5c
 800768a:	7852      	ldrb	r2, [r2, #1]
 800768c:	4618      	mov	r0, r3
 800768e:	e7c9      	b.n	8007624 <_strtod_l+0x1e4>
 8007690:	4638      	mov	r0, r7
 8007692:	e7d2      	b.n	800763a <_strtod_l+0x1fa>
 8007694:	2b08      	cmp	r3, #8
 8007696:	dc04      	bgt.n	80076a2 <_strtod_l+0x262>
 8007698:	9e07      	ldr	r6, [sp, #28]
 800769a:	434e      	muls	r6, r1
 800769c:	9607      	str	r6, [sp, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	e7e2      	b.n	8007668 <_strtod_l+0x228>
 80076a2:	f103 0c01 	add.w	ip, r3, #1
 80076a6:	f1bc 0f10 	cmp.w	ip, #16
 80076aa:	bfd8      	it	le
 80076ac:	fb01 f909 	mulle.w	r9, r1, r9
 80076b0:	e7f5      	b.n	800769e <_strtod_l+0x25e>
 80076b2:	2d10      	cmp	r5, #16
 80076b4:	bfdc      	itt	le
 80076b6:	230a      	movle	r3, #10
 80076b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80076bc:	e7e1      	b.n	8007682 <_strtod_l+0x242>
 80076be:	2300      	movs	r3, #0
 80076c0:	9305      	str	r3, [sp, #20]
 80076c2:	2301      	movs	r3, #1
 80076c4:	e77c      	b.n	80075c0 <_strtod_l+0x180>
 80076c6:	f04f 0c00 	mov.w	ip, #0
 80076ca:	f108 0202 	add.w	r2, r8, #2
 80076ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80076d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80076d4:	e785      	b.n	80075e2 <_strtod_l+0x1a2>
 80076d6:	f04f 0c01 	mov.w	ip, #1
 80076da:	e7f6      	b.n	80076ca <_strtod_l+0x28a>
 80076dc:	0800c82c 	.word	0x0800c82c
 80076e0:	0800c57c 	.word	0x0800c57c
 80076e4:	7ff00000 	.word	0x7ff00000
 80076e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076ea:	1c51      	adds	r1, r2, #1
 80076ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80076ee:	7852      	ldrb	r2, [r2, #1]
 80076f0:	2a30      	cmp	r2, #48	; 0x30
 80076f2:	d0f9      	beq.n	80076e8 <_strtod_l+0x2a8>
 80076f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80076f8:	2908      	cmp	r1, #8
 80076fa:	f63f af79 	bhi.w	80075f0 <_strtod_l+0x1b0>
 80076fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007704:	9206      	str	r2, [sp, #24]
 8007706:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007708:	1c51      	adds	r1, r2, #1
 800770a:	9117      	str	r1, [sp, #92]	; 0x5c
 800770c:	7852      	ldrb	r2, [r2, #1]
 800770e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007712:	2e09      	cmp	r6, #9
 8007714:	d937      	bls.n	8007786 <_strtod_l+0x346>
 8007716:	9e06      	ldr	r6, [sp, #24]
 8007718:	1b89      	subs	r1, r1, r6
 800771a:	2908      	cmp	r1, #8
 800771c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007720:	dc02      	bgt.n	8007728 <_strtod_l+0x2e8>
 8007722:	4576      	cmp	r6, lr
 8007724:	bfa8      	it	ge
 8007726:	4676      	movge	r6, lr
 8007728:	f1bc 0f00 	cmp.w	ip, #0
 800772c:	d000      	beq.n	8007730 <_strtod_l+0x2f0>
 800772e:	4276      	negs	r6, r6
 8007730:	2d00      	cmp	r5, #0
 8007732:	d14d      	bne.n	80077d0 <_strtod_l+0x390>
 8007734:	9904      	ldr	r1, [sp, #16]
 8007736:	4301      	orrs	r1, r0
 8007738:	f47f aec6 	bne.w	80074c8 <_strtod_l+0x88>
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f aee1 	bne.w	8007504 <_strtod_l+0xc4>
 8007742:	2a69      	cmp	r2, #105	; 0x69
 8007744:	d027      	beq.n	8007796 <_strtod_l+0x356>
 8007746:	dc24      	bgt.n	8007792 <_strtod_l+0x352>
 8007748:	2a49      	cmp	r2, #73	; 0x49
 800774a:	d024      	beq.n	8007796 <_strtod_l+0x356>
 800774c:	2a4e      	cmp	r2, #78	; 0x4e
 800774e:	f47f aed9 	bne.w	8007504 <_strtod_l+0xc4>
 8007752:	499f      	ldr	r1, [pc, #636]	; (80079d0 <_strtod_l+0x590>)
 8007754:	a817      	add	r0, sp, #92	; 0x5c
 8007756:	f002 f823 	bl	80097a0 <__match>
 800775a:	2800      	cmp	r0, #0
 800775c:	f43f aed2 	beq.w	8007504 <_strtod_l+0xc4>
 8007760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b28      	cmp	r3, #40	; 0x28
 8007766:	d12d      	bne.n	80077c4 <_strtod_l+0x384>
 8007768:	499a      	ldr	r1, [pc, #616]	; (80079d4 <_strtod_l+0x594>)
 800776a:	aa1a      	add	r2, sp, #104	; 0x68
 800776c:	a817      	add	r0, sp, #92	; 0x5c
 800776e:	f002 f82b 	bl	80097c8 <__hexnan>
 8007772:	2805      	cmp	r0, #5
 8007774:	d126      	bne.n	80077c4 <_strtod_l+0x384>
 8007776:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007778:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800777c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007780:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007784:	e6a0      	b.n	80074c8 <_strtod_l+0x88>
 8007786:	210a      	movs	r1, #10
 8007788:	fb01 2e0e 	mla	lr, r1, lr, r2
 800778c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007790:	e7b9      	b.n	8007706 <_strtod_l+0x2c6>
 8007792:	2a6e      	cmp	r2, #110	; 0x6e
 8007794:	e7db      	b.n	800774e <_strtod_l+0x30e>
 8007796:	4990      	ldr	r1, [pc, #576]	; (80079d8 <_strtod_l+0x598>)
 8007798:	a817      	add	r0, sp, #92	; 0x5c
 800779a:	f002 f801 	bl	80097a0 <__match>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f aeb0 	beq.w	8007504 <_strtod_l+0xc4>
 80077a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a6:	498d      	ldr	r1, [pc, #564]	; (80079dc <_strtod_l+0x59c>)
 80077a8:	3b01      	subs	r3, #1
 80077aa:	a817      	add	r0, sp, #92	; 0x5c
 80077ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ae:	f001 fff7 	bl	80097a0 <__match>
 80077b2:	b910      	cbnz	r0, 80077ba <_strtod_l+0x37a>
 80077b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077b6:	3301      	adds	r3, #1
 80077b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80077ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80079ec <_strtod_l+0x5ac>
 80077be:	f04f 0a00 	mov.w	sl, #0
 80077c2:	e681      	b.n	80074c8 <_strtod_l+0x88>
 80077c4:	4886      	ldr	r0, [pc, #536]	; (80079e0 <_strtod_l+0x5a0>)
 80077c6:	f003 fd9b 	bl	800b300 <nan>
 80077ca:	ec5b ab10 	vmov	sl, fp, d0
 80077ce:	e67b      	b.n	80074c8 <_strtod_l+0x88>
 80077d0:	9b05      	ldr	r3, [sp, #20]
 80077d2:	9807      	ldr	r0, [sp, #28]
 80077d4:	1af3      	subs	r3, r6, r3
 80077d6:	2f00      	cmp	r7, #0
 80077d8:	bf08      	it	eq
 80077da:	462f      	moveq	r7, r5
 80077dc:	2d10      	cmp	r5, #16
 80077de:	9306      	str	r3, [sp, #24]
 80077e0:	46a8      	mov	r8, r5
 80077e2:	bfa8      	it	ge
 80077e4:	f04f 0810 	movge.w	r8, #16
 80077e8:	f7f8 fea4 	bl	8000534 <__aeabi_ui2d>
 80077ec:	2d09      	cmp	r5, #9
 80077ee:	4682      	mov	sl, r0
 80077f0:	468b      	mov	fp, r1
 80077f2:	dd13      	ble.n	800781c <_strtod_l+0x3dc>
 80077f4:	4b7b      	ldr	r3, [pc, #492]	; (80079e4 <_strtod_l+0x5a4>)
 80077f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80077fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80077fe:	f7f8 ff13 	bl	8000628 <__aeabi_dmul>
 8007802:	4682      	mov	sl, r0
 8007804:	4648      	mov	r0, r9
 8007806:	468b      	mov	fp, r1
 8007808:	f7f8 fe94 	bl	8000534 <__aeabi_ui2d>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4650      	mov	r0, sl
 8007812:	4659      	mov	r1, fp
 8007814:	f7f8 fd52 	bl	80002bc <__adddf3>
 8007818:	4682      	mov	sl, r0
 800781a:	468b      	mov	fp, r1
 800781c:	2d0f      	cmp	r5, #15
 800781e:	dc38      	bgt.n	8007892 <_strtod_l+0x452>
 8007820:	9b06      	ldr	r3, [sp, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	f43f ae50 	beq.w	80074c8 <_strtod_l+0x88>
 8007828:	dd24      	ble.n	8007874 <_strtod_l+0x434>
 800782a:	2b16      	cmp	r3, #22
 800782c:	dc0b      	bgt.n	8007846 <_strtod_l+0x406>
 800782e:	496d      	ldr	r1, [pc, #436]	; (80079e4 <_strtod_l+0x5a4>)
 8007830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007838:	4652      	mov	r2, sl
 800783a:	465b      	mov	r3, fp
 800783c:	f7f8 fef4 	bl	8000628 <__aeabi_dmul>
 8007840:	4682      	mov	sl, r0
 8007842:	468b      	mov	fp, r1
 8007844:	e640      	b.n	80074c8 <_strtod_l+0x88>
 8007846:	9a06      	ldr	r2, [sp, #24]
 8007848:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800784c:	4293      	cmp	r3, r2
 800784e:	db20      	blt.n	8007892 <_strtod_l+0x452>
 8007850:	4c64      	ldr	r4, [pc, #400]	; (80079e4 <_strtod_l+0x5a4>)
 8007852:	f1c5 050f 	rsb	r5, r5, #15
 8007856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800785a:	4652      	mov	r2, sl
 800785c:	465b      	mov	r3, fp
 800785e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007862:	f7f8 fee1 	bl	8000628 <__aeabi_dmul>
 8007866:	9b06      	ldr	r3, [sp, #24]
 8007868:	1b5d      	subs	r5, r3, r5
 800786a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800786e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007872:	e7e3      	b.n	800783c <_strtod_l+0x3fc>
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	3316      	adds	r3, #22
 8007878:	db0b      	blt.n	8007892 <_strtod_l+0x452>
 800787a:	9b05      	ldr	r3, [sp, #20]
 800787c:	1b9e      	subs	r6, r3, r6
 800787e:	4b59      	ldr	r3, [pc, #356]	; (80079e4 <_strtod_l+0x5a4>)
 8007880:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007888:	4650      	mov	r0, sl
 800788a:	4659      	mov	r1, fp
 800788c:	f7f8 fff6 	bl	800087c <__aeabi_ddiv>
 8007890:	e7d6      	b.n	8007840 <_strtod_l+0x400>
 8007892:	9b06      	ldr	r3, [sp, #24]
 8007894:	eba5 0808 	sub.w	r8, r5, r8
 8007898:	4498      	add	r8, r3
 800789a:	f1b8 0f00 	cmp.w	r8, #0
 800789e:	dd74      	ble.n	800798a <_strtod_l+0x54a>
 80078a0:	f018 030f 	ands.w	r3, r8, #15
 80078a4:	d00a      	beq.n	80078bc <_strtod_l+0x47c>
 80078a6:	494f      	ldr	r1, [pc, #316]	; (80079e4 <_strtod_l+0x5a4>)
 80078a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80078ac:	4652      	mov	r2, sl
 80078ae:	465b      	mov	r3, fp
 80078b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078b4:	f7f8 feb8 	bl	8000628 <__aeabi_dmul>
 80078b8:	4682      	mov	sl, r0
 80078ba:	468b      	mov	fp, r1
 80078bc:	f038 080f 	bics.w	r8, r8, #15
 80078c0:	d04f      	beq.n	8007962 <_strtod_l+0x522>
 80078c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80078c6:	dd22      	ble.n	800790e <_strtod_l+0x4ce>
 80078c8:	2500      	movs	r5, #0
 80078ca:	462e      	mov	r6, r5
 80078cc:	9507      	str	r5, [sp, #28]
 80078ce:	9505      	str	r5, [sp, #20]
 80078d0:	2322      	movs	r3, #34	; 0x22
 80078d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80079ec <_strtod_l+0x5ac>
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	f04f 0a00 	mov.w	sl, #0
 80078dc:	9b07      	ldr	r3, [sp, #28]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f43f adf2 	beq.w	80074c8 <_strtod_l+0x88>
 80078e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078e6:	4620      	mov	r0, r4
 80078e8:	f002 f8de 	bl	8009aa8 <_Bfree>
 80078ec:	9905      	ldr	r1, [sp, #20]
 80078ee:	4620      	mov	r0, r4
 80078f0:	f002 f8da 	bl	8009aa8 <_Bfree>
 80078f4:	4631      	mov	r1, r6
 80078f6:	4620      	mov	r0, r4
 80078f8:	f002 f8d6 	bl	8009aa8 <_Bfree>
 80078fc:	9907      	ldr	r1, [sp, #28]
 80078fe:	4620      	mov	r0, r4
 8007900:	f002 f8d2 	bl	8009aa8 <_Bfree>
 8007904:	4629      	mov	r1, r5
 8007906:	4620      	mov	r0, r4
 8007908:	f002 f8ce 	bl	8009aa8 <_Bfree>
 800790c:	e5dc      	b.n	80074c8 <_strtod_l+0x88>
 800790e:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <_strtod_l+0x5a8>)
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	2300      	movs	r3, #0
 8007914:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007918:	4650      	mov	r0, sl
 800791a:	4659      	mov	r1, fp
 800791c:	4699      	mov	r9, r3
 800791e:	f1b8 0f01 	cmp.w	r8, #1
 8007922:	dc21      	bgt.n	8007968 <_strtod_l+0x528>
 8007924:	b10b      	cbz	r3, 800792a <_strtod_l+0x4ea>
 8007926:	4682      	mov	sl, r0
 8007928:	468b      	mov	fp, r1
 800792a:	4b2f      	ldr	r3, [pc, #188]	; (80079e8 <_strtod_l+0x5a8>)
 800792c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007930:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007934:	4652      	mov	r2, sl
 8007936:	465b      	mov	r3, fp
 8007938:	e9d9 0100 	ldrd	r0, r1, [r9]
 800793c:	f7f8 fe74 	bl	8000628 <__aeabi_dmul>
 8007940:	4b2a      	ldr	r3, [pc, #168]	; (80079ec <_strtod_l+0x5ac>)
 8007942:	460a      	mov	r2, r1
 8007944:	400b      	ands	r3, r1
 8007946:	492a      	ldr	r1, [pc, #168]	; (80079f0 <_strtod_l+0x5b0>)
 8007948:	428b      	cmp	r3, r1
 800794a:	4682      	mov	sl, r0
 800794c:	d8bc      	bhi.n	80078c8 <_strtod_l+0x488>
 800794e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007952:	428b      	cmp	r3, r1
 8007954:	bf86      	itte	hi
 8007956:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80079f4 <_strtod_l+0x5b4>
 800795a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800795e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007962:	2300      	movs	r3, #0
 8007964:	9304      	str	r3, [sp, #16]
 8007966:	e084      	b.n	8007a72 <_strtod_l+0x632>
 8007968:	f018 0f01 	tst.w	r8, #1
 800796c:	d005      	beq.n	800797a <_strtod_l+0x53a>
 800796e:	9b04      	ldr	r3, [sp, #16]
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 fe58 	bl	8000628 <__aeabi_dmul>
 8007978:	2301      	movs	r3, #1
 800797a:	9a04      	ldr	r2, [sp, #16]
 800797c:	3208      	adds	r2, #8
 800797e:	f109 0901 	add.w	r9, r9, #1
 8007982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007986:	9204      	str	r2, [sp, #16]
 8007988:	e7c9      	b.n	800791e <_strtod_l+0x4de>
 800798a:	d0ea      	beq.n	8007962 <_strtod_l+0x522>
 800798c:	f1c8 0800 	rsb	r8, r8, #0
 8007990:	f018 020f 	ands.w	r2, r8, #15
 8007994:	d00a      	beq.n	80079ac <_strtod_l+0x56c>
 8007996:	4b13      	ldr	r3, [pc, #76]	; (80079e4 <_strtod_l+0x5a4>)
 8007998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800799c:	4650      	mov	r0, sl
 800799e:	4659      	mov	r1, fp
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f7f8 ff6a 	bl	800087c <__aeabi_ddiv>
 80079a8:	4682      	mov	sl, r0
 80079aa:	468b      	mov	fp, r1
 80079ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80079b0:	d0d7      	beq.n	8007962 <_strtod_l+0x522>
 80079b2:	f1b8 0f1f 	cmp.w	r8, #31
 80079b6:	dd1f      	ble.n	80079f8 <_strtod_l+0x5b8>
 80079b8:	2500      	movs	r5, #0
 80079ba:	462e      	mov	r6, r5
 80079bc:	9507      	str	r5, [sp, #28]
 80079be:	9505      	str	r5, [sp, #20]
 80079c0:	2322      	movs	r3, #34	; 0x22
 80079c2:	f04f 0a00 	mov.w	sl, #0
 80079c6:	f04f 0b00 	mov.w	fp, #0
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	e786      	b.n	80078dc <_strtod_l+0x49c>
 80079ce:	bf00      	nop
 80079d0:	0800c551 	.word	0x0800c551
 80079d4:	0800c590 	.word	0x0800c590
 80079d8:	0800c549 	.word	0x0800c549
 80079dc:	0800c6d4 	.word	0x0800c6d4
 80079e0:	0800ca03 	.word	0x0800ca03
 80079e4:	0800c8c8 	.word	0x0800c8c8
 80079e8:	0800c8a0 	.word	0x0800c8a0
 80079ec:	7ff00000 	.word	0x7ff00000
 80079f0:	7ca00000 	.word	0x7ca00000
 80079f4:	7fefffff 	.word	0x7fefffff
 80079f8:	f018 0310 	ands.w	r3, r8, #16
 80079fc:	bf18      	it	ne
 80079fe:	236a      	movne	r3, #106	; 0x6a
 8007a00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007db0 <_strtod_l+0x970>
 8007a04:	9304      	str	r3, [sp, #16]
 8007a06:	4650      	mov	r0, sl
 8007a08:	4659      	mov	r1, fp
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	f018 0f01 	tst.w	r8, #1
 8007a10:	d004      	beq.n	8007a1c <_strtod_l+0x5dc>
 8007a12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a16:	f7f8 fe07 	bl	8000628 <__aeabi_dmul>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007a20:	f109 0908 	add.w	r9, r9, #8
 8007a24:	d1f2      	bne.n	8007a0c <_strtod_l+0x5cc>
 8007a26:	b10b      	cbz	r3, 8007a2c <_strtod_l+0x5ec>
 8007a28:	4682      	mov	sl, r0
 8007a2a:	468b      	mov	fp, r1
 8007a2c:	9b04      	ldr	r3, [sp, #16]
 8007a2e:	b1c3      	cbz	r3, 8007a62 <_strtod_l+0x622>
 8007a30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	4659      	mov	r1, fp
 8007a3c:	dd11      	ble.n	8007a62 <_strtod_l+0x622>
 8007a3e:	2b1f      	cmp	r3, #31
 8007a40:	f340 8124 	ble.w	8007c8c <_strtod_l+0x84c>
 8007a44:	2b34      	cmp	r3, #52	; 0x34
 8007a46:	bfde      	ittt	le
 8007a48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007a4c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8007a50:	fa03 f202 	lslle.w	r2, r3, r2
 8007a54:	f04f 0a00 	mov.w	sl, #0
 8007a58:	bfcc      	ite	gt
 8007a5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007a5e:	ea02 0b01 	andle.w	fp, r2, r1
 8007a62:	2200      	movs	r2, #0
 8007a64:	2300      	movs	r3, #0
 8007a66:	4650      	mov	r0, sl
 8007a68:	4659      	mov	r1, fp
 8007a6a:	f7f9 f845 	bl	8000af8 <__aeabi_dcmpeq>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d1a2      	bne.n	80079b8 <_strtod_l+0x578>
 8007a72:	9b07      	ldr	r3, [sp, #28]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	9908      	ldr	r1, [sp, #32]
 8007a78:	462b      	mov	r3, r5
 8007a7a:	463a      	mov	r2, r7
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	f002 f87b 	bl	8009b78 <__s2b>
 8007a82:	9007      	str	r0, [sp, #28]
 8007a84:	2800      	cmp	r0, #0
 8007a86:	f43f af1f 	beq.w	80078c8 <_strtod_l+0x488>
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	1b9e      	subs	r6, r3, r6
 8007a8e:	9b06      	ldr	r3, [sp, #24]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	bfb4      	ite	lt
 8007a94:	4633      	movlt	r3, r6
 8007a96:	2300      	movge	r3, #0
 8007a98:	930c      	str	r3, [sp, #48]	; 0x30
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	2500      	movs	r5, #0
 8007a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8007aa4:	462e      	mov	r6, r5
 8007aa6:	9b07      	ldr	r3, [sp, #28]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	6859      	ldr	r1, [r3, #4]
 8007aac:	f001 ffbc 	bl	8009a28 <_Balloc>
 8007ab0:	9005      	str	r0, [sp, #20]
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	f43f af0c 	beq.w	80078d0 <_strtod_l+0x490>
 8007ab8:	9b07      	ldr	r3, [sp, #28]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	3202      	adds	r2, #2
 8007abe:	f103 010c 	add.w	r1, r3, #12
 8007ac2:	0092      	lsls	r2, r2, #2
 8007ac4:	300c      	adds	r0, #12
 8007ac6:	f001 ffa1 	bl	8009a0c <memcpy>
 8007aca:	ec4b ab10 	vmov	d0, sl, fp
 8007ace:	aa1a      	add	r2, sp, #104	; 0x68
 8007ad0:	a919      	add	r1, sp, #100	; 0x64
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f002 fb96 	bl	800a204 <__d2b>
 8007ad8:	ec4b ab18 	vmov	d8, sl, fp
 8007adc:	9018      	str	r0, [sp, #96]	; 0x60
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	f43f aef6 	beq.w	80078d0 <_strtod_l+0x490>
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f002 f8e0 	bl	8009cac <__i2b>
 8007aec:	4606      	mov	r6, r0
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f43f aeee 	beq.w	80078d0 <_strtod_l+0x490>
 8007af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007af6:	9904      	ldr	r1, [sp, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	bfab      	itete	ge
 8007afc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007afe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007b00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007b02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007b06:	bfac      	ite	ge
 8007b08:	eb03 0902 	addge.w	r9, r3, r2
 8007b0c:	1ad7      	sublt	r7, r2, r3
 8007b0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b10:	eba3 0801 	sub.w	r8, r3, r1
 8007b14:	4490      	add	r8, r2
 8007b16:	4ba1      	ldr	r3, [pc, #644]	; (8007d9c <_strtod_l+0x95c>)
 8007b18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007b1c:	4598      	cmp	r8, r3
 8007b1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b22:	f280 80c7 	bge.w	8007cb4 <_strtod_l+0x874>
 8007b26:	eba3 0308 	sub.w	r3, r3, r8
 8007b2a:	2b1f      	cmp	r3, #31
 8007b2c:	eba2 0203 	sub.w	r2, r2, r3
 8007b30:	f04f 0101 	mov.w	r1, #1
 8007b34:	f300 80b1 	bgt.w	8007c9a <_strtod_l+0x85a>
 8007b38:	fa01 f303 	lsl.w	r3, r1, r3
 8007b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b3e:	2300      	movs	r3, #0
 8007b40:	9308      	str	r3, [sp, #32]
 8007b42:	eb09 0802 	add.w	r8, r9, r2
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	45c1      	cmp	r9, r8
 8007b4a:	4417      	add	r7, r2
 8007b4c:	441f      	add	r7, r3
 8007b4e:	464b      	mov	r3, r9
 8007b50:	bfa8      	it	ge
 8007b52:	4643      	movge	r3, r8
 8007b54:	42bb      	cmp	r3, r7
 8007b56:	bfa8      	it	ge
 8007b58:	463b      	movge	r3, r7
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfc2      	ittt	gt
 8007b5e:	eba8 0803 	subgt.w	r8, r8, r3
 8007b62:	1aff      	subgt	r7, r7, r3
 8007b64:	eba9 0903 	subgt.w	r9, r9, r3
 8007b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	dd17      	ble.n	8007b9e <_strtod_l+0x75e>
 8007b6e:	4631      	mov	r1, r6
 8007b70:	461a      	mov	r2, r3
 8007b72:	4620      	mov	r0, r4
 8007b74:	f002 f95a 	bl	8009e2c <__pow5mult>
 8007b78:	4606      	mov	r6, r0
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	f43f aea8 	beq.w	80078d0 <_strtod_l+0x490>
 8007b80:	4601      	mov	r1, r0
 8007b82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b84:	4620      	mov	r0, r4
 8007b86:	f002 f8a7 	bl	8009cd8 <__multiply>
 8007b8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f43f ae9f 	beq.w	80078d0 <_strtod_l+0x490>
 8007b92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b94:	4620      	mov	r0, r4
 8007b96:	f001 ff87 	bl	8009aa8 <_Bfree>
 8007b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9c:	9318      	str	r3, [sp, #96]	; 0x60
 8007b9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ba2:	f300 808c 	bgt.w	8007cbe <_strtod_l+0x87e>
 8007ba6:	9b06      	ldr	r3, [sp, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dd08      	ble.n	8007bbe <_strtod_l+0x77e>
 8007bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007bae:	9905      	ldr	r1, [sp, #20]
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f002 f93b 	bl	8009e2c <__pow5mult>
 8007bb6:	9005      	str	r0, [sp, #20]
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	f43f ae89 	beq.w	80078d0 <_strtod_l+0x490>
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	dd08      	ble.n	8007bd4 <_strtod_l+0x794>
 8007bc2:	9905      	ldr	r1, [sp, #20]
 8007bc4:	463a      	mov	r2, r7
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f002 f98a 	bl	8009ee0 <__lshift>
 8007bcc:	9005      	str	r0, [sp, #20]
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f43f ae7e 	beq.w	80078d0 <_strtod_l+0x490>
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	dd08      	ble.n	8007bec <_strtod_l+0x7ac>
 8007bda:	4631      	mov	r1, r6
 8007bdc:	464a      	mov	r2, r9
 8007bde:	4620      	mov	r0, r4
 8007be0:	f002 f97e 	bl	8009ee0 <__lshift>
 8007be4:	4606      	mov	r6, r0
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f43f ae72 	beq.w	80078d0 <_strtod_l+0x490>
 8007bec:	9a05      	ldr	r2, [sp, #20]
 8007bee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f002 fa01 	bl	8009ff8 <__mdiff>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	f43f ae69 	beq.w	80078d0 <_strtod_l+0x490>
 8007bfe:	68c3      	ldr	r3, [r0, #12]
 8007c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c02:	2300      	movs	r3, #0
 8007c04:	60c3      	str	r3, [r0, #12]
 8007c06:	4631      	mov	r1, r6
 8007c08:	f002 f9da 	bl	8009fc0 <__mcmp>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	da60      	bge.n	8007cd2 <_strtod_l+0x892>
 8007c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c12:	ea53 030a 	orrs.w	r3, r3, sl
 8007c16:	f040 8082 	bne.w	8007d1e <_strtod_l+0x8de>
 8007c1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d17d      	bne.n	8007d1e <_strtod_l+0x8de>
 8007c22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007c26:	0d1b      	lsrs	r3, r3, #20
 8007c28:	051b      	lsls	r3, r3, #20
 8007c2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c2e:	d976      	bls.n	8007d1e <_strtod_l+0x8de>
 8007c30:	696b      	ldr	r3, [r5, #20]
 8007c32:	b913      	cbnz	r3, 8007c3a <_strtod_l+0x7fa>
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	dd71      	ble.n	8007d1e <_strtod_l+0x8de>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f002 f94e 	bl	8009ee0 <__lshift>
 8007c44:	4631      	mov	r1, r6
 8007c46:	4605      	mov	r5, r0
 8007c48:	f002 f9ba 	bl	8009fc0 <__mcmp>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	dd66      	ble.n	8007d1e <_strtod_l+0x8de>
 8007c50:	9904      	ldr	r1, [sp, #16]
 8007c52:	4a53      	ldr	r2, [pc, #332]	; (8007da0 <_strtod_l+0x960>)
 8007c54:	465b      	mov	r3, fp
 8007c56:	2900      	cmp	r1, #0
 8007c58:	f000 8081 	beq.w	8007d5e <_strtod_l+0x91e>
 8007c5c:	ea02 010b 	and.w	r1, r2, fp
 8007c60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007c64:	dc7b      	bgt.n	8007d5e <_strtod_l+0x91e>
 8007c66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007c6a:	f77f aea9 	ble.w	80079c0 <_strtod_l+0x580>
 8007c6e:	4b4d      	ldr	r3, [pc, #308]	; (8007da4 <_strtod_l+0x964>)
 8007c70:	4650      	mov	r0, sl
 8007c72:	4659      	mov	r1, fp
 8007c74:	2200      	movs	r2, #0
 8007c76:	f7f8 fcd7 	bl	8000628 <__aeabi_dmul>
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4303      	orrs	r3, r0
 8007c7e:	bf08      	it	eq
 8007c80:	2322      	moveq	r3, #34	; 0x22
 8007c82:	4682      	mov	sl, r0
 8007c84:	468b      	mov	fp, r1
 8007c86:	bf08      	it	eq
 8007c88:	6023      	streq	r3, [r4, #0]
 8007c8a:	e62b      	b.n	80078e4 <_strtod_l+0x4a4>
 8007c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	ea03 0a0a 	and.w	sl, r3, sl
 8007c98:	e6e3      	b.n	8007a62 <_strtod_l+0x622>
 8007c9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007c9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007ca2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007ca6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007caa:	fa01 f308 	lsl.w	r3, r1, r8
 8007cae:	9308      	str	r3, [sp, #32]
 8007cb0:	910d      	str	r1, [sp, #52]	; 0x34
 8007cb2:	e746      	b.n	8007b42 <_strtod_l+0x702>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	2301      	movs	r3, #1
 8007cba:	930d      	str	r3, [sp, #52]	; 0x34
 8007cbc:	e741      	b.n	8007b42 <_strtod_l+0x702>
 8007cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f002 f90c 	bl	8009ee0 <__lshift>
 8007cc8:	9018      	str	r0, [sp, #96]	; 0x60
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	f47f af6b 	bne.w	8007ba6 <_strtod_l+0x766>
 8007cd0:	e5fe      	b.n	80078d0 <_strtod_l+0x490>
 8007cd2:	465f      	mov	r7, fp
 8007cd4:	d16e      	bne.n	8007db4 <_strtod_l+0x974>
 8007cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cdc:	b342      	cbz	r2, 8007d30 <_strtod_l+0x8f0>
 8007cde:	4a32      	ldr	r2, [pc, #200]	; (8007da8 <_strtod_l+0x968>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d128      	bne.n	8007d36 <_strtod_l+0x8f6>
 8007ce4:	9b04      	ldr	r3, [sp, #16]
 8007ce6:	4651      	mov	r1, sl
 8007ce8:	b1eb      	cbz	r3, 8007d26 <_strtod_l+0x8e6>
 8007cea:	4b2d      	ldr	r3, [pc, #180]	; (8007da0 <_strtod_l+0x960>)
 8007cec:	403b      	ands	r3, r7
 8007cee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cf6:	d819      	bhi.n	8007d2c <_strtod_l+0x8ec>
 8007cf8:	0d1b      	lsrs	r3, r3, #20
 8007cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	4299      	cmp	r1, r3
 8007d04:	d117      	bne.n	8007d36 <_strtod_l+0x8f6>
 8007d06:	4b29      	ldr	r3, [pc, #164]	; (8007dac <_strtod_l+0x96c>)
 8007d08:	429f      	cmp	r7, r3
 8007d0a:	d102      	bne.n	8007d12 <_strtod_l+0x8d2>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	f43f addf 	beq.w	80078d0 <_strtod_l+0x490>
 8007d12:	4b23      	ldr	r3, [pc, #140]	; (8007da0 <_strtod_l+0x960>)
 8007d14:	403b      	ands	r3, r7
 8007d16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	9b04      	ldr	r3, [sp, #16]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1a4      	bne.n	8007c6e <_strtod_l+0x82e>
 8007d24:	e5de      	b.n	80078e4 <_strtod_l+0x4a4>
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d2a:	e7ea      	b.n	8007d02 <_strtod_l+0x8c2>
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	e7e8      	b.n	8007d02 <_strtod_l+0x8c2>
 8007d30:	ea53 030a 	orrs.w	r3, r3, sl
 8007d34:	d08c      	beq.n	8007c50 <_strtod_l+0x810>
 8007d36:	9b08      	ldr	r3, [sp, #32]
 8007d38:	b1db      	cbz	r3, 8007d72 <_strtod_l+0x932>
 8007d3a:	423b      	tst	r3, r7
 8007d3c:	d0ef      	beq.n	8007d1e <_strtod_l+0x8de>
 8007d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	4650      	mov	r0, sl
 8007d44:	4659      	mov	r1, fp
 8007d46:	b1c3      	cbz	r3, 8007d7a <_strtod_l+0x93a>
 8007d48:	f7ff fb5e 	bl	8007408 <sulp>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	460b      	mov	r3, r1
 8007d50:	ec51 0b18 	vmov	r0, r1, d8
 8007d54:	f7f8 fab2 	bl	80002bc <__adddf3>
 8007d58:	4682      	mov	sl, r0
 8007d5a:	468b      	mov	fp, r1
 8007d5c:	e7df      	b.n	8007d1e <_strtod_l+0x8de>
 8007d5e:	4013      	ands	r3, r2
 8007d60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007d64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d6c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007d70:	e7d5      	b.n	8007d1e <_strtod_l+0x8de>
 8007d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d74:	ea13 0f0a 	tst.w	r3, sl
 8007d78:	e7e0      	b.n	8007d3c <_strtod_l+0x8fc>
 8007d7a:	f7ff fb45 	bl	8007408 <sulp>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	ec51 0b18 	vmov	r0, r1, d8
 8007d86:	f7f8 fa97 	bl	80002b8 <__aeabi_dsub>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4682      	mov	sl, r0
 8007d90:	468b      	mov	fp, r1
 8007d92:	f7f8 feb1 	bl	8000af8 <__aeabi_dcmpeq>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d0c1      	beq.n	8007d1e <_strtod_l+0x8de>
 8007d9a:	e611      	b.n	80079c0 <_strtod_l+0x580>
 8007d9c:	fffffc02 	.word	0xfffffc02
 8007da0:	7ff00000 	.word	0x7ff00000
 8007da4:	39500000 	.word	0x39500000
 8007da8:	000fffff 	.word	0x000fffff
 8007dac:	7fefffff 	.word	0x7fefffff
 8007db0:	0800c5a8 	.word	0x0800c5a8
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	f002 fa80 	bl	800a2bc <__ratio>
 8007dbc:	ec59 8b10 	vmov	r8, r9, d0
 8007dc0:	ee10 0a10 	vmov	r0, s0
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007dca:	4649      	mov	r1, r9
 8007dcc:	f7f8 fea8 	bl	8000b20 <__aeabi_dcmple>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d07a      	beq.n	8007eca <_strtod_l+0xa8a>
 8007dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04a      	beq.n	8007e70 <_strtod_l+0xa30>
 8007dda:	4b95      	ldr	r3, [pc, #596]	; (8008030 <_strtod_l+0xbf0>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007de2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008030 <_strtod_l+0xbf0>
 8007de6:	f04f 0800 	mov.w	r8, #0
 8007dea:	4b92      	ldr	r3, [pc, #584]	; (8008034 <_strtod_l+0xbf4>)
 8007dec:	403b      	ands	r3, r7
 8007dee:	930d      	str	r3, [sp, #52]	; 0x34
 8007df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007df2:	4b91      	ldr	r3, [pc, #580]	; (8008038 <_strtod_l+0xbf8>)
 8007df4:	429a      	cmp	r2, r3
 8007df6:	f040 80b0 	bne.w	8007f5a <_strtod_l+0xb1a>
 8007dfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007dfe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007e02:	ec4b ab10 	vmov	d0, sl, fp
 8007e06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e0a:	f002 f97f 	bl	800a10c <__ulp>
 8007e0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007e12:	ec53 2b10 	vmov	r2, r3, d0
 8007e16:	f7f8 fc07 	bl	8000628 <__aeabi_dmul>
 8007e1a:	4652      	mov	r2, sl
 8007e1c:	465b      	mov	r3, fp
 8007e1e:	f7f8 fa4d 	bl	80002bc <__adddf3>
 8007e22:	460b      	mov	r3, r1
 8007e24:	4983      	ldr	r1, [pc, #524]	; (8008034 <_strtod_l+0xbf4>)
 8007e26:	4a85      	ldr	r2, [pc, #532]	; (800803c <_strtod_l+0xbfc>)
 8007e28:	4019      	ands	r1, r3
 8007e2a:	4291      	cmp	r1, r2
 8007e2c:	4682      	mov	sl, r0
 8007e2e:	d960      	bls.n	8007ef2 <_strtod_l+0xab2>
 8007e30:	ee18 3a90 	vmov	r3, s17
 8007e34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d104      	bne.n	8007e46 <_strtod_l+0xa06>
 8007e3c:	ee18 3a10 	vmov	r3, s16
 8007e40:	3301      	adds	r3, #1
 8007e42:	f43f ad45 	beq.w	80078d0 <_strtod_l+0x490>
 8007e46:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008048 <_strtod_l+0xc08>
 8007e4a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e50:	4620      	mov	r0, r4
 8007e52:	f001 fe29 	bl	8009aa8 <_Bfree>
 8007e56:	9905      	ldr	r1, [sp, #20]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f001 fe25 	bl	8009aa8 <_Bfree>
 8007e5e:	4631      	mov	r1, r6
 8007e60:	4620      	mov	r0, r4
 8007e62:	f001 fe21 	bl	8009aa8 <_Bfree>
 8007e66:	4629      	mov	r1, r5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f001 fe1d 	bl	8009aa8 <_Bfree>
 8007e6e:	e61a      	b.n	8007aa6 <_strtod_l+0x666>
 8007e70:	f1ba 0f00 	cmp.w	sl, #0
 8007e74:	d11b      	bne.n	8007eae <_strtod_l+0xa6e>
 8007e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e7a:	b9f3      	cbnz	r3, 8007eba <_strtod_l+0xa7a>
 8007e7c:	4b6c      	ldr	r3, [pc, #432]	; (8008030 <_strtod_l+0xbf0>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4640      	mov	r0, r8
 8007e82:	4649      	mov	r1, r9
 8007e84:	f7f8 fe42 	bl	8000b0c <__aeabi_dcmplt>
 8007e88:	b9d0      	cbnz	r0, 8007ec0 <_strtod_l+0xa80>
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	4b6c      	ldr	r3, [pc, #432]	; (8008040 <_strtod_l+0xc00>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	f7f8 fbc9 	bl	8000628 <__aeabi_dmul>
 8007e96:	4680      	mov	r8, r0
 8007e98:	4689      	mov	r9, r1
 8007e9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007e9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007ea2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007eac:	e79d      	b.n	8007dea <_strtod_l+0x9aa>
 8007eae:	f1ba 0f01 	cmp.w	sl, #1
 8007eb2:	d102      	bne.n	8007eba <_strtod_l+0xa7a>
 8007eb4:	2f00      	cmp	r7, #0
 8007eb6:	f43f ad83 	beq.w	80079c0 <_strtod_l+0x580>
 8007eba:	4b62      	ldr	r3, [pc, #392]	; (8008044 <_strtod_l+0xc04>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	e78e      	b.n	8007dde <_strtod_l+0x99e>
 8007ec0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008040 <_strtod_l+0xc00>
 8007ec4:	f04f 0800 	mov.w	r8, #0
 8007ec8:	e7e7      	b.n	8007e9a <_strtod_l+0xa5a>
 8007eca:	4b5d      	ldr	r3, [pc, #372]	; (8008040 <_strtod_l+0xc00>)
 8007ecc:	4640      	mov	r0, r8
 8007ece:	4649      	mov	r1, r9
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f7f8 fba9 	bl	8000628 <__aeabi_dmul>
 8007ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ed8:	4680      	mov	r8, r0
 8007eda:	4689      	mov	r9, r1
 8007edc:	b933      	cbnz	r3, 8007eec <_strtod_l+0xaac>
 8007ede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee2:	900e      	str	r0, [sp, #56]	; 0x38
 8007ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ee6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007eea:	e7dd      	b.n	8007ea8 <_strtod_l+0xa68>
 8007eec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007ef0:	e7f9      	b.n	8007ee6 <_strtod_l+0xaa6>
 8007ef2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d1a8      	bne.n	8007e4e <_strtod_l+0xa0e>
 8007efc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f02:	0d1b      	lsrs	r3, r3, #20
 8007f04:	051b      	lsls	r3, r3, #20
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d1a1      	bne.n	8007e4e <_strtod_l+0xa0e>
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	f7f8 feeb 	bl	8000ce8 <__aeabi_d2lz>
 8007f12:	f7f8 fb5b 	bl	80005cc <__aeabi_l2d>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	4649      	mov	r1, r9
 8007f1e:	f7f8 f9cb 	bl	80002b8 <__aeabi_dsub>
 8007f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f28:	ea43 030a 	orr.w	r3, r3, sl
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	4680      	mov	r8, r0
 8007f30:	4689      	mov	r9, r1
 8007f32:	d055      	beq.n	8007fe0 <_strtod_l+0xba0>
 8007f34:	a336      	add	r3, pc, #216	; (adr r3, 8008010 <_strtod_l+0xbd0>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 fde7 	bl	8000b0c <__aeabi_dcmplt>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f47f acd0 	bne.w	80078e4 <_strtod_l+0x4a4>
 8007f44:	a334      	add	r3, pc, #208	; (adr r3, 8008018 <_strtod_l+0xbd8>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 fdfb 	bl	8000b48 <__aeabi_dcmpgt>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f af7b 	beq.w	8007e4e <_strtod_l+0xa0e>
 8007f58:	e4c4      	b.n	80078e4 <_strtod_l+0x4a4>
 8007f5a:	9b04      	ldr	r3, [sp, #16]
 8007f5c:	b333      	cbz	r3, 8007fac <_strtod_l+0xb6c>
 8007f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007f64:	d822      	bhi.n	8007fac <_strtod_l+0xb6c>
 8007f66:	a32e      	add	r3, pc, #184	; (adr r3, 8008020 <_strtod_l+0xbe0>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	4649      	mov	r1, r9
 8007f70:	f7f8 fdd6 	bl	8000b20 <__aeabi_dcmple>
 8007f74:	b1a0      	cbz	r0, 8007fa0 <_strtod_l+0xb60>
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	f7f8 fe2d 	bl	8000bd8 <__aeabi_d2uiz>
 8007f7e:	2801      	cmp	r0, #1
 8007f80:	bf38      	it	cc
 8007f82:	2001      	movcc	r0, #1
 8007f84:	f7f8 fad6 	bl	8000534 <__aeabi_ui2d>
 8007f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	4689      	mov	r9, r1
 8007f8e:	bb23      	cbnz	r3, 8007fda <_strtod_l+0xb9a>
 8007f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f94:	9010      	str	r0, [sp, #64]	; 0x40
 8007f96:	9311      	str	r3, [sp, #68]	; 0x44
 8007f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	9309      	str	r3, [sp, #36]	; 0x24
 8007fac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8007fb4:	eef0 0a68 	vmov.f32	s1, s17
 8007fb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007fbc:	f002 f8a6 	bl	800a10c <__ulp>
 8007fc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fc4:	ec53 2b10 	vmov	r2, r3, d0
 8007fc8:	f7f8 fb2e 	bl	8000628 <__aeabi_dmul>
 8007fcc:	ec53 2b18 	vmov	r2, r3, d8
 8007fd0:	f7f8 f974 	bl	80002bc <__adddf3>
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	468b      	mov	fp, r1
 8007fd8:	e78d      	b.n	8007ef6 <_strtod_l+0xab6>
 8007fda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007fde:	e7db      	b.n	8007f98 <_strtod_l+0xb58>
 8007fe0:	a311      	add	r3, pc, #68	; (adr r3, 8008028 <_strtod_l+0xbe8>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 fd91 	bl	8000b0c <__aeabi_dcmplt>
 8007fea:	e7b2      	b.n	8007f52 <_strtod_l+0xb12>
 8007fec:	2300      	movs	r3, #0
 8007fee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	f7ff ba6b 	b.w	80074d0 <_strtod_l+0x90>
 8007ffa:	2a65      	cmp	r2, #101	; 0x65
 8007ffc:	f43f ab5f 	beq.w	80076be <_strtod_l+0x27e>
 8008000:	2a45      	cmp	r2, #69	; 0x45
 8008002:	f43f ab5c 	beq.w	80076be <_strtod_l+0x27e>
 8008006:	2301      	movs	r3, #1
 8008008:	f7ff bb94 	b.w	8007734 <_strtod_l+0x2f4>
 800800c:	f3af 8000 	nop.w
 8008010:	94a03595 	.word	0x94a03595
 8008014:	3fdfffff 	.word	0x3fdfffff
 8008018:	35afe535 	.word	0x35afe535
 800801c:	3fe00000 	.word	0x3fe00000
 8008020:	ffc00000 	.word	0xffc00000
 8008024:	41dfffff 	.word	0x41dfffff
 8008028:	94a03595 	.word	0x94a03595
 800802c:	3fcfffff 	.word	0x3fcfffff
 8008030:	3ff00000 	.word	0x3ff00000
 8008034:	7ff00000 	.word	0x7ff00000
 8008038:	7fe00000 	.word	0x7fe00000
 800803c:	7c9fffff 	.word	0x7c9fffff
 8008040:	3fe00000 	.word	0x3fe00000
 8008044:	bff00000 	.word	0xbff00000
 8008048:	7fefffff 	.word	0x7fefffff

0800804c <_strtod_r>:
 800804c:	4b01      	ldr	r3, [pc, #4]	; (8008054 <_strtod_r+0x8>)
 800804e:	f7ff b9f7 	b.w	8007440 <_strtod_l>
 8008052:	bf00      	nop
 8008054:	20000084 	.word	0x20000084

08008058 <_strtol_l.constprop.0>:
 8008058:	2b01      	cmp	r3, #1
 800805a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805e:	d001      	beq.n	8008064 <_strtol_l.constprop.0+0xc>
 8008060:	2b24      	cmp	r3, #36	; 0x24
 8008062:	d906      	bls.n	8008072 <_strtol_l.constprop.0+0x1a>
 8008064:	f7fe f9f2 	bl	800644c <__errno>
 8008068:	2316      	movs	r3, #22
 800806a:	6003      	str	r3, [r0, #0]
 800806c:	2000      	movs	r0, #0
 800806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008158 <_strtol_l.constprop.0+0x100>
 8008076:	460d      	mov	r5, r1
 8008078:	462e      	mov	r6, r5
 800807a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800807e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008082:	f017 0708 	ands.w	r7, r7, #8
 8008086:	d1f7      	bne.n	8008078 <_strtol_l.constprop.0+0x20>
 8008088:	2c2d      	cmp	r4, #45	; 0x2d
 800808a:	d132      	bne.n	80080f2 <_strtol_l.constprop.0+0x9a>
 800808c:	782c      	ldrb	r4, [r5, #0]
 800808e:	2701      	movs	r7, #1
 8008090:	1cb5      	adds	r5, r6, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d05b      	beq.n	800814e <_strtol_l.constprop.0+0xf6>
 8008096:	2b10      	cmp	r3, #16
 8008098:	d109      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800809a:	2c30      	cmp	r4, #48	; 0x30
 800809c:	d107      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800809e:	782c      	ldrb	r4, [r5, #0]
 80080a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80080a4:	2c58      	cmp	r4, #88	; 0x58
 80080a6:	d14d      	bne.n	8008144 <_strtol_l.constprop.0+0xec>
 80080a8:	786c      	ldrb	r4, [r5, #1]
 80080aa:	2310      	movs	r3, #16
 80080ac:	3502      	adds	r5, #2
 80080ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80080b2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80080b6:	f04f 0c00 	mov.w	ip, #0
 80080ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80080be:	4666      	mov	r6, ip
 80080c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80080c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80080c8:	f1be 0f09 	cmp.w	lr, #9
 80080cc:	d816      	bhi.n	80080fc <_strtol_l.constprop.0+0xa4>
 80080ce:	4674      	mov	r4, lr
 80080d0:	42a3      	cmp	r3, r4
 80080d2:	dd24      	ble.n	800811e <_strtol_l.constprop.0+0xc6>
 80080d4:	f1bc 0f00 	cmp.w	ip, #0
 80080d8:	db1e      	blt.n	8008118 <_strtol_l.constprop.0+0xc0>
 80080da:	45b1      	cmp	r9, r6
 80080dc:	d31c      	bcc.n	8008118 <_strtol_l.constprop.0+0xc0>
 80080de:	d101      	bne.n	80080e4 <_strtol_l.constprop.0+0x8c>
 80080e0:	45a2      	cmp	sl, r4
 80080e2:	db19      	blt.n	8008118 <_strtol_l.constprop.0+0xc0>
 80080e4:	fb06 4603 	mla	r6, r6, r3, r4
 80080e8:	f04f 0c01 	mov.w	ip, #1
 80080ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080f0:	e7e8      	b.n	80080c4 <_strtol_l.constprop.0+0x6c>
 80080f2:	2c2b      	cmp	r4, #43	; 0x2b
 80080f4:	bf04      	itt	eq
 80080f6:	782c      	ldrbeq	r4, [r5, #0]
 80080f8:	1cb5      	addeq	r5, r6, #2
 80080fa:	e7ca      	b.n	8008092 <_strtol_l.constprop.0+0x3a>
 80080fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008100:	f1be 0f19 	cmp.w	lr, #25
 8008104:	d801      	bhi.n	800810a <_strtol_l.constprop.0+0xb2>
 8008106:	3c37      	subs	r4, #55	; 0x37
 8008108:	e7e2      	b.n	80080d0 <_strtol_l.constprop.0+0x78>
 800810a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800810e:	f1be 0f19 	cmp.w	lr, #25
 8008112:	d804      	bhi.n	800811e <_strtol_l.constprop.0+0xc6>
 8008114:	3c57      	subs	r4, #87	; 0x57
 8008116:	e7db      	b.n	80080d0 <_strtol_l.constprop.0+0x78>
 8008118:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800811c:	e7e6      	b.n	80080ec <_strtol_l.constprop.0+0x94>
 800811e:	f1bc 0f00 	cmp.w	ip, #0
 8008122:	da05      	bge.n	8008130 <_strtol_l.constprop.0+0xd8>
 8008124:	2322      	movs	r3, #34	; 0x22
 8008126:	6003      	str	r3, [r0, #0]
 8008128:	4646      	mov	r6, r8
 800812a:	b942      	cbnz	r2, 800813e <_strtol_l.constprop.0+0xe6>
 800812c:	4630      	mov	r0, r6
 800812e:	e79e      	b.n	800806e <_strtol_l.constprop.0+0x16>
 8008130:	b107      	cbz	r7, 8008134 <_strtol_l.constprop.0+0xdc>
 8008132:	4276      	negs	r6, r6
 8008134:	2a00      	cmp	r2, #0
 8008136:	d0f9      	beq.n	800812c <_strtol_l.constprop.0+0xd4>
 8008138:	f1bc 0f00 	cmp.w	ip, #0
 800813c:	d000      	beq.n	8008140 <_strtol_l.constprop.0+0xe8>
 800813e:	1e69      	subs	r1, r5, #1
 8008140:	6011      	str	r1, [r2, #0]
 8008142:	e7f3      	b.n	800812c <_strtol_l.constprop.0+0xd4>
 8008144:	2430      	movs	r4, #48	; 0x30
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1b1      	bne.n	80080ae <_strtol_l.constprop.0+0x56>
 800814a:	2308      	movs	r3, #8
 800814c:	e7af      	b.n	80080ae <_strtol_l.constprop.0+0x56>
 800814e:	2c30      	cmp	r4, #48	; 0x30
 8008150:	d0a5      	beq.n	800809e <_strtol_l.constprop.0+0x46>
 8008152:	230a      	movs	r3, #10
 8008154:	e7ab      	b.n	80080ae <_strtol_l.constprop.0+0x56>
 8008156:	bf00      	nop
 8008158:	0800c5d1 	.word	0x0800c5d1

0800815c <_strtol_r>:
 800815c:	f7ff bf7c 	b.w	8008058 <_strtol_l.constprop.0>

08008160 <quorem>:
 8008160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	6903      	ldr	r3, [r0, #16]
 8008166:	690c      	ldr	r4, [r1, #16]
 8008168:	42a3      	cmp	r3, r4
 800816a:	4607      	mov	r7, r0
 800816c:	f2c0 8081 	blt.w	8008272 <quorem+0x112>
 8008170:	3c01      	subs	r4, #1
 8008172:	f101 0814 	add.w	r8, r1, #20
 8008176:	f100 0514 	add.w	r5, r0, #20
 800817a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008188:	3301      	adds	r3, #1
 800818a:	429a      	cmp	r2, r3
 800818c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008194:	fbb2 f6f3 	udiv	r6, r2, r3
 8008198:	d331      	bcc.n	80081fe <quorem+0x9e>
 800819a:	f04f 0e00 	mov.w	lr, #0
 800819e:	4640      	mov	r0, r8
 80081a0:	46ac      	mov	ip, r5
 80081a2:	46f2      	mov	sl, lr
 80081a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80081a8:	b293      	uxth	r3, r2
 80081aa:	fb06 e303 	mla	r3, r6, r3, lr
 80081ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	ebaa 0303 	sub.w	r3, sl, r3
 80081b8:	f8dc a000 	ldr.w	sl, [ip]
 80081bc:	0c12      	lsrs	r2, r2, #16
 80081be:	fa13 f38a 	uxtah	r3, r3, sl
 80081c2:	fb06 e202 	mla	r2, r6, r2, lr
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	9b00      	ldr	r3, [sp, #0]
 80081ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ce:	b292      	uxth	r2, r2
 80081d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80081dc:	4581      	cmp	r9, r0
 80081de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e2:	f84c 3b04 	str.w	r3, [ip], #4
 80081e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081ea:	d2db      	bcs.n	80081a4 <quorem+0x44>
 80081ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80081f0:	b92b      	cbnz	r3, 80081fe <quorem+0x9e>
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	429d      	cmp	r5, r3
 80081f8:	461a      	mov	r2, r3
 80081fa:	d32e      	bcc.n	800825a <quorem+0xfa>
 80081fc:	613c      	str	r4, [r7, #16]
 80081fe:	4638      	mov	r0, r7
 8008200:	f001 fede 	bl	8009fc0 <__mcmp>
 8008204:	2800      	cmp	r0, #0
 8008206:	db24      	blt.n	8008252 <quorem+0xf2>
 8008208:	3601      	adds	r6, #1
 800820a:	4628      	mov	r0, r5
 800820c:	f04f 0c00 	mov.w	ip, #0
 8008210:	f858 2b04 	ldr.w	r2, [r8], #4
 8008214:	f8d0 e000 	ldr.w	lr, [r0]
 8008218:	b293      	uxth	r3, r2
 800821a:	ebac 0303 	sub.w	r3, ip, r3
 800821e:	0c12      	lsrs	r2, r2, #16
 8008220:	fa13 f38e 	uxtah	r3, r3, lr
 8008224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800822c:	b29b      	uxth	r3, r3
 800822e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008232:	45c1      	cmp	r9, r8
 8008234:	f840 3b04 	str.w	r3, [r0], #4
 8008238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800823c:	d2e8      	bcs.n	8008210 <quorem+0xb0>
 800823e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008246:	b922      	cbnz	r2, 8008252 <quorem+0xf2>
 8008248:	3b04      	subs	r3, #4
 800824a:	429d      	cmp	r5, r3
 800824c:	461a      	mov	r2, r3
 800824e:	d30a      	bcc.n	8008266 <quorem+0x106>
 8008250:	613c      	str	r4, [r7, #16]
 8008252:	4630      	mov	r0, r6
 8008254:	b003      	add	sp, #12
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	3b04      	subs	r3, #4
 800825e:	2a00      	cmp	r2, #0
 8008260:	d1cc      	bne.n	80081fc <quorem+0x9c>
 8008262:	3c01      	subs	r4, #1
 8008264:	e7c7      	b.n	80081f6 <quorem+0x96>
 8008266:	6812      	ldr	r2, [r2, #0]
 8008268:	3b04      	subs	r3, #4
 800826a:	2a00      	cmp	r2, #0
 800826c:	d1f0      	bne.n	8008250 <quorem+0xf0>
 800826e:	3c01      	subs	r4, #1
 8008270:	e7eb      	b.n	800824a <quorem+0xea>
 8008272:	2000      	movs	r0, #0
 8008274:	e7ee      	b.n	8008254 <quorem+0xf4>
	...

08008278 <_dtoa_r>:
 8008278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827c:	ed2d 8b04 	vpush	{d8-d9}
 8008280:	ec57 6b10 	vmov	r6, r7, d0
 8008284:	b093      	sub	sp, #76	; 0x4c
 8008286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800828c:	9106      	str	r1, [sp, #24]
 800828e:	ee10 aa10 	vmov	sl, s0
 8008292:	4604      	mov	r4, r0
 8008294:	9209      	str	r2, [sp, #36]	; 0x24
 8008296:	930c      	str	r3, [sp, #48]	; 0x30
 8008298:	46bb      	mov	fp, r7
 800829a:	b975      	cbnz	r5, 80082ba <_dtoa_r+0x42>
 800829c:	2010      	movs	r0, #16
 800829e:	f001 fb9b 	bl	80099d8 <malloc>
 80082a2:	4602      	mov	r2, r0
 80082a4:	6260      	str	r0, [r4, #36]	; 0x24
 80082a6:	b920      	cbnz	r0, 80082b2 <_dtoa_r+0x3a>
 80082a8:	4ba7      	ldr	r3, [pc, #668]	; (8008548 <_dtoa_r+0x2d0>)
 80082aa:	21ea      	movs	r1, #234	; 0xea
 80082ac:	48a7      	ldr	r0, [pc, #668]	; (800854c <_dtoa_r+0x2d4>)
 80082ae:	f003 faf5 	bl	800b89c <__assert_func>
 80082b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80082b6:	6005      	str	r5, [r0, #0]
 80082b8:	60c5      	str	r5, [r0, #12]
 80082ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082bc:	6819      	ldr	r1, [r3, #0]
 80082be:	b151      	cbz	r1, 80082d6 <_dtoa_r+0x5e>
 80082c0:	685a      	ldr	r2, [r3, #4]
 80082c2:	604a      	str	r2, [r1, #4]
 80082c4:	2301      	movs	r3, #1
 80082c6:	4093      	lsls	r3, r2
 80082c8:	608b      	str	r3, [r1, #8]
 80082ca:	4620      	mov	r0, r4
 80082cc:	f001 fbec 	bl	8009aa8 <_Bfree>
 80082d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	1e3b      	subs	r3, r7, #0
 80082d8:	bfaa      	itet	ge
 80082da:	2300      	movge	r3, #0
 80082dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082e0:	f8c8 3000 	strge.w	r3, [r8]
 80082e4:	4b9a      	ldr	r3, [pc, #616]	; (8008550 <_dtoa_r+0x2d8>)
 80082e6:	bfbc      	itt	lt
 80082e8:	2201      	movlt	r2, #1
 80082ea:	f8c8 2000 	strlt.w	r2, [r8]
 80082ee:	ea33 030b 	bics.w	r3, r3, fp
 80082f2:	d11b      	bne.n	800832c <_dtoa_r+0xb4>
 80082f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008300:	4333      	orrs	r3, r6
 8008302:	f000 8592 	beq.w	8008e2a <_dtoa_r+0xbb2>
 8008306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008308:	b963      	cbnz	r3, 8008324 <_dtoa_r+0xac>
 800830a:	4b92      	ldr	r3, [pc, #584]	; (8008554 <_dtoa_r+0x2dc>)
 800830c:	e022      	b.n	8008354 <_dtoa_r+0xdc>
 800830e:	4b92      	ldr	r3, [pc, #584]	; (8008558 <_dtoa_r+0x2e0>)
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	3308      	adds	r3, #8
 8008314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	9801      	ldr	r0, [sp, #4]
 800831a:	b013      	add	sp, #76	; 0x4c
 800831c:	ecbd 8b04 	vpop	{d8-d9}
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	4b8b      	ldr	r3, [pc, #556]	; (8008554 <_dtoa_r+0x2dc>)
 8008326:	9301      	str	r3, [sp, #4]
 8008328:	3303      	adds	r3, #3
 800832a:	e7f3      	b.n	8008314 <_dtoa_r+0x9c>
 800832c:	2200      	movs	r2, #0
 800832e:	2300      	movs	r3, #0
 8008330:	4650      	mov	r0, sl
 8008332:	4659      	mov	r1, fp
 8008334:	f7f8 fbe0 	bl	8000af8 <__aeabi_dcmpeq>
 8008338:	ec4b ab19 	vmov	d9, sl, fp
 800833c:	4680      	mov	r8, r0
 800833e:	b158      	cbz	r0, 8008358 <_dtoa_r+0xe0>
 8008340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008342:	2301      	movs	r3, #1
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 856b 	beq.w	8008e24 <_dtoa_r+0xbac>
 800834e:	4883      	ldr	r0, [pc, #524]	; (800855c <_dtoa_r+0x2e4>)
 8008350:	6018      	str	r0, [r3, #0]
 8008352:	1e43      	subs	r3, r0, #1
 8008354:	9301      	str	r3, [sp, #4]
 8008356:	e7df      	b.n	8008318 <_dtoa_r+0xa0>
 8008358:	ec4b ab10 	vmov	d0, sl, fp
 800835c:	aa10      	add	r2, sp, #64	; 0x40
 800835e:	a911      	add	r1, sp, #68	; 0x44
 8008360:	4620      	mov	r0, r4
 8008362:	f001 ff4f 	bl	800a204 <__d2b>
 8008366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800836a:	ee08 0a10 	vmov	s16, r0
 800836e:	2d00      	cmp	r5, #0
 8008370:	f000 8084 	beq.w	800847c <_dtoa_r+0x204>
 8008374:	ee19 3a90 	vmov	r3, s19
 8008378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800837c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008380:	4656      	mov	r6, sl
 8008382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800838a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800838e:	4b74      	ldr	r3, [pc, #464]	; (8008560 <_dtoa_r+0x2e8>)
 8008390:	2200      	movs	r2, #0
 8008392:	4630      	mov	r0, r6
 8008394:	4639      	mov	r1, r7
 8008396:	f7f7 ff8f 	bl	80002b8 <__aeabi_dsub>
 800839a:	a365      	add	r3, pc, #404	; (adr r3, 8008530 <_dtoa_r+0x2b8>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f8 f942 	bl	8000628 <__aeabi_dmul>
 80083a4:	a364      	add	r3, pc, #400	; (adr r3, 8008538 <_dtoa_r+0x2c0>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f7 ff87 	bl	80002bc <__adddf3>
 80083ae:	4606      	mov	r6, r0
 80083b0:	4628      	mov	r0, r5
 80083b2:	460f      	mov	r7, r1
 80083b4:	f7f8 f8ce 	bl	8000554 <__aeabi_i2d>
 80083b8:	a361      	add	r3, pc, #388	; (adr r3, 8008540 <_dtoa_r+0x2c8>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 f933 	bl	8000628 <__aeabi_dmul>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f7 ff77 	bl	80002bc <__adddf3>
 80083ce:	4606      	mov	r6, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	f7f8 fbd9 	bl	8000b88 <__aeabi_d2iz>
 80083d6:	2200      	movs	r2, #0
 80083d8:	9000      	str	r0, [sp, #0]
 80083da:	2300      	movs	r3, #0
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 fb94 	bl	8000b0c <__aeabi_dcmplt>
 80083e4:	b150      	cbz	r0, 80083fc <_dtoa_r+0x184>
 80083e6:	9800      	ldr	r0, [sp, #0]
 80083e8:	f7f8 f8b4 	bl	8000554 <__aeabi_i2d>
 80083ec:	4632      	mov	r2, r6
 80083ee:	463b      	mov	r3, r7
 80083f0:	f7f8 fb82 	bl	8000af8 <__aeabi_dcmpeq>
 80083f4:	b910      	cbnz	r0, 80083fc <_dtoa_r+0x184>
 80083f6:	9b00      	ldr	r3, [sp, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	9b00      	ldr	r3, [sp, #0]
 80083fe:	2b16      	cmp	r3, #22
 8008400:	d85a      	bhi.n	80084b8 <_dtoa_r+0x240>
 8008402:	9a00      	ldr	r2, [sp, #0]
 8008404:	4b57      	ldr	r3, [pc, #348]	; (8008564 <_dtoa_r+0x2ec>)
 8008406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	ec51 0b19 	vmov	r0, r1, d9
 8008412:	f7f8 fb7b 	bl	8000b0c <__aeabi_dcmplt>
 8008416:	2800      	cmp	r0, #0
 8008418:	d050      	beq.n	80084bc <_dtoa_r+0x244>
 800841a:	9b00      	ldr	r3, [sp, #0]
 800841c:	3b01      	subs	r3, #1
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	930b      	str	r3, [sp, #44]	; 0x2c
 8008424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008426:	1b5d      	subs	r5, r3, r5
 8008428:	1e6b      	subs	r3, r5, #1
 800842a:	9305      	str	r3, [sp, #20]
 800842c:	bf45      	ittet	mi
 800842e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008432:	9304      	strmi	r3, [sp, #16]
 8008434:	2300      	movpl	r3, #0
 8008436:	2300      	movmi	r3, #0
 8008438:	bf4c      	ite	mi
 800843a:	9305      	strmi	r3, [sp, #20]
 800843c:	9304      	strpl	r3, [sp, #16]
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	db3d      	blt.n	80084c0 <_dtoa_r+0x248>
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	9a00      	ldr	r2, [sp, #0]
 8008448:	920a      	str	r2, [sp, #40]	; 0x28
 800844a:	4413      	add	r3, r2
 800844c:	9305      	str	r3, [sp, #20]
 800844e:	2300      	movs	r3, #0
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	9b06      	ldr	r3, [sp, #24]
 8008454:	2b09      	cmp	r3, #9
 8008456:	f200 8089 	bhi.w	800856c <_dtoa_r+0x2f4>
 800845a:	2b05      	cmp	r3, #5
 800845c:	bfc4      	itt	gt
 800845e:	3b04      	subgt	r3, #4
 8008460:	9306      	strgt	r3, [sp, #24]
 8008462:	9b06      	ldr	r3, [sp, #24]
 8008464:	f1a3 0302 	sub.w	r3, r3, #2
 8008468:	bfcc      	ite	gt
 800846a:	2500      	movgt	r5, #0
 800846c:	2501      	movle	r5, #1
 800846e:	2b03      	cmp	r3, #3
 8008470:	f200 8087 	bhi.w	8008582 <_dtoa_r+0x30a>
 8008474:	e8df f003 	tbb	[pc, r3]
 8008478:	59383a2d 	.word	0x59383a2d
 800847c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008480:	441d      	add	r5, r3
 8008482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008486:	2b20      	cmp	r3, #32
 8008488:	bfc1      	itttt	gt
 800848a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800848e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008492:	fa0b f303 	lslgt.w	r3, fp, r3
 8008496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800849a:	bfda      	itte	le
 800849c:	f1c3 0320 	rsble	r3, r3, #32
 80084a0:	fa06 f003 	lslle.w	r0, r6, r3
 80084a4:	4318      	orrgt	r0, r3
 80084a6:	f7f8 f845 	bl	8000534 <__aeabi_ui2d>
 80084aa:	2301      	movs	r3, #1
 80084ac:	4606      	mov	r6, r0
 80084ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80084b2:	3d01      	subs	r5, #1
 80084b4:	930e      	str	r3, [sp, #56]	; 0x38
 80084b6:	e76a      	b.n	800838e <_dtoa_r+0x116>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7b2      	b.n	8008422 <_dtoa_r+0x1aa>
 80084bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80084be:	e7b1      	b.n	8008424 <_dtoa_r+0x1ac>
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	9a00      	ldr	r2, [sp, #0]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	9304      	str	r3, [sp, #16]
 80084c8:	4253      	negs	r3, r2
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	2300      	movs	r3, #0
 80084ce:	930a      	str	r3, [sp, #40]	; 0x28
 80084d0:	e7bf      	b.n	8008452 <_dtoa_r+0x1da>
 80084d2:	2300      	movs	r3, #0
 80084d4:	9308      	str	r3, [sp, #32]
 80084d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d8:	2b00      	cmp	r3, #0
 80084da:	dc55      	bgt.n	8008588 <_dtoa_r+0x310>
 80084dc:	2301      	movs	r3, #1
 80084de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084e2:	461a      	mov	r2, r3
 80084e4:	9209      	str	r2, [sp, #36]	; 0x24
 80084e6:	e00c      	b.n	8008502 <_dtoa_r+0x28a>
 80084e8:	2301      	movs	r3, #1
 80084ea:	e7f3      	b.n	80084d4 <_dtoa_r+0x25c>
 80084ec:	2300      	movs	r3, #0
 80084ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084f0:	9308      	str	r3, [sp, #32]
 80084f2:	9b00      	ldr	r3, [sp, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	9302      	str	r3, [sp, #8]
 80084f8:	3301      	adds	r3, #1
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	9303      	str	r3, [sp, #12]
 80084fe:	bfb8      	it	lt
 8008500:	2301      	movlt	r3, #1
 8008502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008504:	2200      	movs	r2, #0
 8008506:	6042      	str	r2, [r0, #4]
 8008508:	2204      	movs	r2, #4
 800850a:	f102 0614 	add.w	r6, r2, #20
 800850e:	429e      	cmp	r6, r3
 8008510:	6841      	ldr	r1, [r0, #4]
 8008512:	d93d      	bls.n	8008590 <_dtoa_r+0x318>
 8008514:	4620      	mov	r0, r4
 8008516:	f001 fa87 	bl	8009a28 <_Balloc>
 800851a:	9001      	str	r0, [sp, #4]
 800851c:	2800      	cmp	r0, #0
 800851e:	d13b      	bne.n	8008598 <_dtoa_r+0x320>
 8008520:	4b11      	ldr	r3, [pc, #68]	; (8008568 <_dtoa_r+0x2f0>)
 8008522:	4602      	mov	r2, r0
 8008524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008528:	e6c0      	b.n	80082ac <_dtoa_r+0x34>
 800852a:	2301      	movs	r3, #1
 800852c:	e7df      	b.n	80084ee <_dtoa_r+0x276>
 800852e:	bf00      	nop
 8008530:	636f4361 	.word	0x636f4361
 8008534:	3fd287a7 	.word	0x3fd287a7
 8008538:	8b60c8b3 	.word	0x8b60c8b3
 800853c:	3fc68a28 	.word	0x3fc68a28
 8008540:	509f79fb 	.word	0x509f79fb
 8008544:	3fd34413 	.word	0x3fd34413
 8008548:	0800c6de 	.word	0x0800c6de
 800854c:	0800c6f5 	.word	0x0800c6f5
 8008550:	7ff00000 	.word	0x7ff00000
 8008554:	0800c6da 	.word	0x0800c6da
 8008558:	0800c6d1 	.word	0x0800c6d1
 800855c:	0800c9b2 	.word	0x0800c9b2
 8008560:	3ff80000 	.word	0x3ff80000
 8008564:	0800c8c8 	.word	0x0800c8c8
 8008568:	0800c750 	.word	0x0800c750
 800856c:	2501      	movs	r5, #1
 800856e:	2300      	movs	r3, #0
 8008570:	9306      	str	r3, [sp, #24]
 8008572:	9508      	str	r5, [sp, #32]
 8008574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800857c:	2200      	movs	r2, #0
 800857e:	2312      	movs	r3, #18
 8008580:	e7b0      	b.n	80084e4 <_dtoa_r+0x26c>
 8008582:	2301      	movs	r3, #1
 8008584:	9308      	str	r3, [sp, #32]
 8008586:	e7f5      	b.n	8008574 <_dtoa_r+0x2fc>
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800858e:	e7b8      	b.n	8008502 <_dtoa_r+0x28a>
 8008590:	3101      	adds	r1, #1
 8008592:	6041      	str	r1, [r0, #4]
 8008594:	0052      	lsls	r2, r2, #1
 8008596:	e7b8      	b.n	800850a <_dtoa_r+0x292>
 8008598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859a:	9a01      	ldr	r2, [sp, #4]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	9b03      	ldr	r3, [sp, #12]
 80085a0:	2b0e      	cmp	r3, #14
 80085a2:	f200 809d 	bhi.w	80086e0 <_dtoa_r+0x468>
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	f000 809a 	beq.w	80086e0 <_dtoa_r+0x468>
 80085ac:	9b00      	ldr	r3, [sp, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dd32      	ble.n	8008618 <_dtoa_r+0x3a0>
 80085b2:	4ab7      	ldr	r2, [pc, #732]	; (8008890 <_dtoa_r+0x618>)
 80085b4:	f003 030f 	and.w	r3, r3, #15
 80085b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085c0:	9b00      	ldr	r3, [sp, #0]
 80085c2:	05d8      	lsls	r0, r3, #23
 80085c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80085c8:	d516      	bpl.n	80085f8 <_dtoa_r+0x380>
 80085ca:	4bb2      	ldr	r3, [pc, #712]	; (8008894 <_dtoa_r+0x61c>)
 80085cc:	ec51 0b19 	vmov	r0, r1, d9
 80085d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085d4:	f7f8 f952 	bl	800087c <__aeabi_ddiv>
 80085d8:	f007 070f 	and.w	r7, r7, #15
 80085dc:	4682      	mov	sl, r0
 80085de:	468b      	mov	fp, r1
 80085e0:	2503      	movs	r5, #3
 80085e2:	4eac      	ldr	r6, [pc, #688]	; (8008894 <_dtoa_r+0x61c>)
 80085e4:	b957      	cbnz	r7, 80085fc <_dtoa_r+0x384>
 80085e6:	4642      	mov	r2, r8
 80085e8:	464b      	mov	r3, r9
 80085ea:	4650      	mov	r0, sl
 80085ec:	4659      	mov	r1, fp
 80085ee:	f7f8 f945 	bl	800087c <__aeabi_ddiv>
 80085f2:	4682      	mov	sl, r0
 80085f4:	468b      	mov	fp, r1
 80085f6:	e028      	b.n	800864a <_dtoa_r+0x3d2>
 80085f8:	2502      	movs	r5, #2
 80085fa:	e7f2      	b.n	80085e2 <_dtoa_r+0x36a>
 80085fc:	07f9      	lsls	r1, r7, #31
 80085fe:	d508      	bpl.n	8008612 <_dtoa_r+0x39a>
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008608:	f7f8 f80e 	bl	8000628 <__aeabi_dmul>
 800860c:	3501      	adds	r5, #1
 800860e:	4680      	mov	r8, r0
 8008610:	4689      	mov	r9, r1
 8008612:	107f      	asrs	r7, r7, #1
 8008614:	3608      	adds	r6, #8
 8008616:	e7e5      	b.n	80085e4 <_dtoa_r+0x36c>
 8008618:	f000 809b 	beq.w	8008752 <_dtoa_r+0x4da>
 800861c:	9b00      	ldr	r3, [sp, #0]
 800861e:	4f9d      	ldr	r7, [pc, #628]	; (8008894 <_dtoa_r+0x61c>)
 8008620:	425e      	negs	r6, r3
 8008622:	4b9b      	ldr	r3, [pc, #620]	; (8008890 <_dtoa_r+0x618>)
 8008624:	f006 020f 	and.w	r2, r6, #15
 8008628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	ec51 0b19 	vmov	r0, r1, d9
 8008634:	f7f7 fff8 	bl	8000628 <__aeabi_dmul>
 8008638:	1136      	asrs	r6, r6, #4
 800863a:	4682      	mov	sl, r0
 800863c:	468b      	mov	fp, r1
 800863e:	2300      	movs	r3, #0
 8008640:	2502      	movs	r5, #2
 8008642:	2e00      	cmp	r6, #0
 8008644:	d17a      	bne.n	800873c <_dtoa_r+0x4c4>
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1d3      	bne.n	80085f2 <_dtoa_r+0x37a>
 800864a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 8082 	beq.w	8008756 <_dtoa_r+0x4de>
 8008652:	4b91      	ldr	r3, [pc, #580]	; (8008898 <_dtoa_r+0x620>)
 8008654:	2200      	movs	r2, #0
 8008656:	4650      	mov	r0, sl
 8008658:	4659      	mov	r1, fp
 800865a:	f7f8 fa57 	bl	8000b0c <__aeabi_dcmplt>
 800865e:	2800      	cmp	r0, #0
 8008660:	d079      	beq.n	8008756 <_dtoa_r+0x4de>
 8008662:	9b03      	ldr	r3, [sp, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d076      	beq.n	8008756 <_dtoa_r+0x4de>
 8008668:	9b02      	ldr	r3, [sp, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	dd36      	ble.n	80086dc <_dtoa_r+0x464>
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	4650      	mov	r0, sl
 8008672:	4659      	mov	r1, fp
 8008674:	1e5f      	subs	r7, r3, #1
 8008676:	2200      	movs	r2, #0
 8008678:	4b88      	ldr	r3, [pc, #544]	; (800889c <_dtoa_r+0x624>)
 800867a:	f7f7 ffd5 	bl	8000628 <__aeabi_dmul>
 800867e:	9e02      	ldr	r6, [sp, #8]
 8008680:	4682      	mov	sl, r0
 8008682:	468b      	mov	fp, r1
 8008684:	3501      	adds	r5, #1
 8008686:	4628      	mov	r0, r5
 8008688:	f7f7 ff64 	bl	8000554 <__aeabi_i2d>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	f7f7 ffca 	bl	8000628 <__aeabi_dmul>
 8008694:	4b82      	ldr	r3, [pc, #520]	; (80088a0 <_dtoa_r+0x628>)
 8008696:	2200      	movs	r2, #0
 8008698:	f7f7 fe10 	bl	80002bc <__adddf3>
 800869c:	46d0      	mov	r8, sl
 800869e:	46d9      	mov	r9, fp
 80086a0:	4682      	mov	sl, r0
 80086a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80086a6:	2e00      	cmp	r6, #0
 80086a8:	d158      	bne.n	800875c <_dtoa_r+0x4e4>
 80086aa:	4b7e      	ldr	r3, [pc, #504]	; (80088a4 <_dtoa_r+0x62c>)
 80086ac:	2200      	movs	r2, #0
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f7 fe01 	bl	80002b8 <__aeabi_dsub>
 80086b6:	4652      	mov	r2, sl
 80086b8:	465b      	mov	r3, fp
 80086ba:	4680      	mov	r8, r0
 80086bc:	4689      	mov	r9, r1
 80086be:	f7f8 fa43 	bl	8000b48 <__aeabi_dcmpgt>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f040 8295 	bne.w	8008bf2 <_dtoa_r+0x97a>
 80086c8:	4652      	mov	r2, sl
 80086ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80086ce:	4640      	mov	r0, r8
 80086d0:	4649      	mov	r1, r9
 80086d2:	f7f8 fa1b 	bl	8000b0c <__aeabi_dcmplt>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	f040 8289 	bne.w	8008bee <_dtoa_r+0x976>
 80086dc:	ec5b ab19 	vmov	sl, fp, d9
 80086e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f2c0 8148 	blt.w	8008978 <_dtoa_r+0x700>
 80086e8:	9a00      	ldr	r2, [sp, #0]
 80086ea:	2a0e      	cmp	r2, #14
 80086ec:	f300 8144 	bgt.w	8008978 <_dtoa_r+0x700>
 80086f0:	4b67      	ldr	r3, [pc, #412]	; (8008890 <_dtoa_r+0x618>)
 80086f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f280 80d5 	bge.w	80088ac <_dtoa_r+0x634>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f300 80d1 	bgt.w	80088ac <_dtoa_r+0x634>
 800870a:	f040 826f 	bne.w	8008bec <_dtoa_r+0x974>
 800870e:	4b65      	ldr	r3, [pc, #404]	; (80088a4 <_dtoa_r+0x62c>)
 8008710:	2200      	movs	r2, #0
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 ff87 	bl	8000628 <__aeabi_dmul>
 800871a:	4652      	mov	r2, sl
 800871c:	465b      	mov	r3, fp
 800871e:	f7f8 fa09 	bl	8000b34 <__aeabi_dcmpge>
 8008722:	9e03      	ldr	r6, [sp, #12]
 8008724:	4637      	mov	r7, r6
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 8245 	bne.w	8008bb6 <_dtoa_r+0x93e>
 800872c:	9d01      	ldr	r5, [sp, #4]
 800872e:	2331      	movs	r3, #49	; 0x31
 8008730:	f805 3b01 	strb.w	r3, [r5], #1
 8008734:	9b00      	ldr	r3, [sp, #0]
 8008736:	3301      	adds	r3, #1
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	e240      	b.n	8008bbe <_dtoa_r+0x946>
 800873c:	07f2      	lsls	r2, r6, #31
 800873e:	d505      	bpl.n	800874c <_dtoa_r+0x4d4>
 8008740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008744:	f7f7 ff70 	bl	8000628 <__aeabi_dmul>
 8008748:	3501      	adds	r5, #1
 800874a:	2301      	movs	r3, #1
 800874c:	1076      	asrs	r6, r6, #1
 800874e:	3708      	adds	r7, #8
 8008750:	e777      	b.n	8008642 <_dtoa_r+0x3ca>
 8008752:	2502      	movs	r5, #2
 8008754:	e779      	b.n	800864a <_dtoa_r+0x3d2>
 8008756:	9f00      	ldr	r7, [sp, #0]
 8008758:	9e03      	ldr	r6, [sp, #12]
 800875a:	e794      	b.n	8008686 <_dtoa_r+0x40e>
 800875c:	9901      	ldr	r1, [sp, #4]
 800875e:	4b4c      	ldr	r3, [pc, #304]	; (8008890 <_dtoa_r+0x618>)
 8008760:	4431      	add	r1, r6
 8008762:	910d      	str	r1, [sp, #52]	; 0x34
 8008764:	9908      	ldr	r1, [sp, #32]
 8008766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800876a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800876e:	2900      	cmp	r1, #0
 8008770:	d043      	beq.n	80087fa <_dtoa_r+0x582>
 8008772:	494d      	ldr	r1, [pc, #308]	; (80088a8 <_dtoa_r+0x630>)
 8008774:	2000      	movs	r0, #0
 8008776:	f7f8 f881 	bl	800087c <__aeabi_ddiv>
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f7f7 fd9b 	bl	80002b8 <__aeabi_dsub>
 8008782:	9d01      	ldr	r5, [sp, #4]
 8008784:	4682      	mov	sl, r0
 8008786:	468b      	mov	fp, r1
 8008788:	4649      	mov	r1, r9
 800878a:	4640      	mov	r0, r8
 800878c:	f7f8 f9fc 	bl	8000b88 <__aeabi_d2iz>
 8008790:	4606      	mov	r6, r0
 8008792:	f7f7 fedf 	bl	8000554 <__aeabi_i2d>
 8008796:	4602      	mov	r2, r0
 8008798:	460b      	mov	r3, r1
 800879a:	4640      	mov	r0, r8
 800879c:	4649      	mov	r1, r9
 800879e:	f7f7 fd8b 	bl	80002b8 <__aeabi_dsub>
 80087a2:	3630      	adds	r6, #48	; 0x30
 80087a4:	f805 6b01 	strb.w	r6, [r5], #1
 80087a8:	4652      	mov	r2, sl
 80087aa:	465b      	mov	r3, fp
 80087ac:	4680      	mov	r8, r0
 80087ae:	4689      	mov	r9, r1
 80087b0:	f7f8 f9ac 	bl	8000b0c <__aeabi_dcmplt>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d163      	bne.n	8008880 <_dtoa_r+0x608>
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	4936      	ldr	r1, [pc, #216]	; (8008898 <_dtoa_r+0x620>)
 80087be:	2000      	movs	r0, #0
 80087c0:	f7f7 fd7a 	bl	80002b8 <__aeabi_dsub>
 80087c4:	4652      	mov	r2, sl
 80087c6:	465b      	mov	r3, fp
 80087c8:	f7f8 f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	f040 80b5 	bne.w	800893c <_dtoa_r+0x6c4>
 80087d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087d4:	429d      	cmp	r5, r3
 80087d6:	d081      	beq.n	80086dc <_dtoa_r+0x464>
 80087d8:	4b30      	ldr	r3, [pc, #192]	; (800889c <_dtoa_r+0x624>)
 80087da:	2200      	movs	r2, #0
 80087dc:	4650      	mov	r0, sl
 80087de:	4659      	mov	r1, fp
 80087e0:	f7f7 ff22 	bl	8000628 <__aeabi_dmul>
 80087e4:	4b2d      	ldr	r3, [pc, #180]	; (800889c <_dtoa_r+0x624>)
 80087e6:	4682      	mov	sl, r0
 80087e8:	468b      	mov	fp, r1
 80087ea:	4640      	mov	r0, r8
 80087ec:	4649      	mov	r1, r9
 80087ee:	2200      	movs	r2, #0
 80087f0:	f7f7 ff1a 	bl	8000628 <__aeabi_dmul>
 80087f4:	4680      	mov	r8, r0
 80087f6:	4689      	mov	r9, r1
 80087f8:	e7c6      	b.n	8008788 <_dtoa_r+0x510>
 80087fa:	4650      	mov	r0, sl
 80087fc:	4659      	mov	r1, fp
 80087fe:	f7f7 ff13 	bl	8000628 <__aeabi_dmul>
 8008802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008804:	9d01      	ldr	r5, [sp, #4]
 8008806:	930f      	str	r3, [sp, #60]	; 0x3c
 8008808:	4682      	mov	sl, r0
 800880a:	468b      	mov	fp, r1
 800880c:	4649      	mov	r1, r9
 800880e:	4640      	mov	r0, r8
 8008810:	f7f8 f9ba 	bl	8000b88 <__aeabi_d2iz>
 8008814:	4606      	mov	r6, r0
 8008816:	f7f7 fe9d 	bl	8000554 <__aeabi_i2d>
 800881a:	3630      	adds	r6, #48	; 0x30
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4640      	mov	r0, r8
 8008822:	4649      	mov	r1, r9
 8008824:	f7f7 fd48 	bl	80002b8 <__aeabi_dsub>
 8008828:	f805 6b01 	strb.w	r6, [r5], #1
 800882c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800882e:	429d      	cmp	r5, r3
 8008830:	4680      	mov	r8, r0
 8008832:	4689      	mov	r9, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	d124      	bne.n	8008884 <_dtoa_r+0x60c>
 800883a:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <_dtoa_r+0x630>)
 800883c:	4650      	mov	r0, sl
 800883e:	4659      	mov	r1, fp
 8008840:	f7f7 fd3c 	bl	80002bc <__adddf3>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	4640      	mov	r0, r8
 800884a:	4649      	mov	r1, r9
 800884c:	f7f8 f97c 	bl	8000b48 <__aeabi_dcmpgt>
 8008850:	2800      	cmp	r0, #0
 8008852:	d173      	bne.n	800893c <_dtoa_r+0x6c4>
 8008854:	4652      	mov	r2, sl
 8008856:	465b      	mov	r3, fp
 8008858:	4913      	ldr	r1, [pc, #76]	; (80088a8 <_dtoa_r+0x630>)
 800885a:	2000      	movs	r0, #0
 800885c:	f7f7 fd2c 	bl	80002b8 <__aeabi_dsub>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7f8 f950 	bl	8000b0c <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	f43f af35 	beq.w	80086dc <_dtoa_r+0x464>
 8008872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008874:	1e6b      	subs	r3, r5, #1
 8008876:	930f      	str	r3, [sp, #60]	; 0x3c
 8008878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800887c:	2b30      	cmp	r3, #48	; 0x30
 800887e:	d0f8      	beq.n	8008872 <_dtoa_r+0x5fa>
 8008880:	9700      	str	r7, [sp, #0]
 8008882:	e049      	b.n	8008918 <_dtoa_r+0x6a0>
 8008884:	4b05      	ldr	r3, [pc, #20]	; (800889c <_dtoa_r+0x624>)
 8008886:	f7f7 fecf 	bl	8000628 <__aeabi_dmul>
 800888a:	4680      	mov	r8, r0
 800888c:	4689      	mov	r9, r1
 800888e:	e7bd      	b.n	800880c <_dtoa_r+0x594>
 8008890:	0800c8c8 	.word	0x0800c8c8
 8008894:	0800c8a0 	.word	0x0800c8a0
 8008898:	3ff00000 	.word	0x3ff00000
 800889c:	40240000 	.word	0x40240000
 80088a0:	401c0000 	.word	0x401c0000
 80088a4:	40140000 	.word	0x40140000
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	9d01      	ldr	r5, [sp, #4]
 80088ae:	4656      	mov	r6, sl
 80088b0:	465f      	mov	r7, fp
 80088b2:	4642      	mov	r2, r8
 80088b4:	464b      	mov	r3, r9
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f7 ffdf 	bl	800087c <__aeabi_ddiv>
 80088be:	f7f8 f963 	bl	8000b88 <__aeabi_d2iz>
 80088c2:	4682      	mov	sl, r0
 80088c4:	f7f7 fe46 	bl	8000554 <__aeabi_i2d>
 80088c8:	4642      	mov	r2, r8
 80088ca:	464b      	mov	r3, r9
 80088cc:	f7f7 feac 	bl	8000628 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088dc:	f7f7 fcec 	bl	80002b8 <__aeabi_dsub>
 80088e0:	f805 6b01 	strb.w	r6, [r5], #1
 80088e4:	9e01      	ldr	r6, [sp, #4]
 80088e6:	9f03      	ldr	r7, [sp, #12]
 80088e8:	1bae      	subs	r6, r5, r6
 80088ea:	42b7      	cmp	r7, r6
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	d135      	bne.n	800895e <_dtoa_r+0x6e6>
 80088f2:	f7f7 fce3 	bl	80002bc <__adddf3>
 80088f6:	4642      	mov	r2, r8
 80088f8:	464b      	mov	r3, r9
 80088fa:	4606      	mov	r6, r0
 80088fc:	460f      	mov	r7, r1
 80088fe:	f7f8 f923 	bl	8000b48 <__aeabi_dcmpgt>
 8008902:	b9d0      	cbnz	r0, 800893a <_dtoa_r+0x6c2>
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4630      	mov	r0, r6
 800890a:	4639      	mov	r1, r7
 800890c:	f7f8 f8f4 	bl	8000af8 <__aeabi_dcmpeq>
 8008910:	b110      	cbz	r0, 8008918 <_dtoa_r+0x6a0>
 8008912:	f01a 0f01 	tst.w	sl, #1
 8008916:	d110      	bne.n	800893a <_dtoa_r+0x6c2>
 8008918:	4620      	mov	r0, r4
 800891a:	ee18 1a10 	vmov	r1, s16
 800891e:	f001 f8c3 	bl	8009aa8 <_Bfree>
 8008922:	2300      	movs	r3, #0
 8008924:	9800      	ldr	r0, [sp, #0]
 8008926:	702b      	strb	r3, [r5, #0]
 8008928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800892a:	3001      	adds	r0, #1
 800892c:	6018      	str	r0, [r3, #0]
 800892e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008930:	2b00      	cmp	r3, #0
 8008932:	f43f acf1 	beq.w	8008318 <_dtoa_r+0xa0>
 8008936:	601d      	str	r5, [r3, #0]
 8008938:	e4ee      	b.n	8008318 <_dtoa_r+0xa0>
 800893a:	9f00      	ldr	r7, [sp, #0]
 800893c:	462b      	mov	r3, r5
 800893e:	461d      	mov	r5, r3
 8008940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008944:	2a39      	cmp	r2, #57	; 0x39
 8008946:	d106      	bne.n	8008956 <_dtoa_r+0x6de>
 8008948:	9a01      	ldr	r2, [sp, #4]
 800894a:	429a      	cmp	r2, r3
 800894c:	d1f7      	bne.n	800893e <_dtoa_r+0x6c6>
 800894e:	9901      	ldr	r1, [sp, #4]
 8008950:	2230      	movs	r2, #48	; 0x30
 8008952:	3701      	adds	r7, #1
 8008954:	700a      	strb	r2, [r1, #0]
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	3201      	adds	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e790      	b.n	8008880 <_dtoa_r+0x608>
 800895e:	4ba6      	ldr	r3, [pc, #664]	; (8008bf8 <_dtoa_r+0x980>)
 8008960:	2200      	movs	r2, #0
 8008962:	f7f7 fe61 	bl	8000628 <__aeabi_dmul>
 8008966:	2200      	movs	r2, #0
 8008968:	2300      	movs	r3, #0
 800896a:	4606      	mov	r6, r0
 800896c:	460f      	mov	r7, r1
 800896e:	f7f8 f8c3 	bl	8000af8 <__aeabi_dcmpeq>
 8008972:	2800      	cmp	r0, #0
 8008974:	d09d      	beq.n	80088b2 <_dtoa_r+0x63a>
 8008976:	e7cf      	b.n	8008918 <_dtoa_r+0x6a0>
 8008978:	9a08      	ldr	r2, [sp, #32]
 800897a:	2a00      	cmp	r2, #0
 800897c:	f000 80d7 	beq.w	8008b2e <_dtoa_r+0x8b6>
 8008980:	9a06      	ldr	r2, [sp, #24]
 8008982:	2a01      	cmp	r2, #1
 8008984:	f300 80ba 	bgt.w	8008afc <_dtoa_r+0x884>
 8008988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800898a:	2a00      	cmp	r2, #0
 800898c:	f000 80b2 	beq.w	8008af4 <_dtoa_r+0x87c>
 8008990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008994:	9e07      	ldr	r6, [sp, #28]
 8008996:	9d04      	ldr	r5, [sp, #16]
 8008998:	9a04      	ldr	r2, [sp, #16]
 800899a:	441a      	add	r2, r3
 800899c:	9204      	str	r2, [sp, #16]
 800899e:	9a05      	ldr	r2, [sp, #20]
 80089a0:	2101      	movs	r1, #1
 80089a2:	441a      	add	r2, r3
 80089a4:	4620      	mov	r0, r4
 80089a6:	9205      	str	r2, [sp, #20]
 80089a8:	f001 f980 	bl	8009cac <__i2b>
 80089ac:	4607      	mov	r7, r0
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	dd0c      	ble.n	80089cc <_dtoa_r+0x754>
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dd09      	ble.n	80089cc <_dtoa_r+0x754>
 80089b8:	42ab      	cmp	r3, r5
 80089ba:	9a04      	ldr	r2, [sp, #16]
 80089bc:	bfa8      	it	ge
 80089be:	462b      	movge	r3, r5
 80089c0:	1ad2      	subs	r2, r2, r3
 80089c2:	9204      	str	r2, [sp, #16]
 80089c4:	9a05      	ldr	r2, [sp, #20]
 80089c6:	1aed      	subs	r5, r5, r3
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	9305      	str	r3, [sp, #20]
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	b31b      	cbz	r3, 8008a18 <_dtoa_r+0x7a0>
 80089d0:	9b08      	ldr	r3, [sp, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80af 	beq.w	8008b36 <_dtoa_r+0x8be>
 80089d8:	2e00      	cmp	r6, #0
 80089da:	dd13      	ble.n	8008a04 <_dtoa_r+0x78c>
 80089dc:	4639      	mov	r1, r7
 80089de:	4632      	mov	r2, r6
 80089e0:	4620      	mov	r0, r4
 80089e2:	f001 fa23 	bl	8009e2c <__pow5mult>
 80089e6:	ee18 2a10 	vmov	r2, s16
 80089ea:	4601      	mov	r1, r0
 80089ec:	4607      	mov	r7, r0
 80089ee:	4620      	mov	r0, r4
 80089f0:	f001 f972 	bl	8009cd8 <__multiply>
 80089f4:	ee18 1a10 	vmov	r1, s16
 80089f8:	4680      	mov	r8, r0
 80089fa:	4620      	mov	r0, r4
 80089fc:	f001 f854 	bl	8009aa8 <_Bfree>
 8008a00:	ee08 8a10 	vmov	s16, r8
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	1b9a      	subs	r2, r3, r6
 8008a08:	d006      	beq.n	8008a18 <_dtoa_r+0x7a0>
 8008a0a:	ee18 1a10 	vmov	r1, s16
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f001 fa0c 	bl	8009e2c <__pow5mult>
 8008a14:	ee08 0a10 	vmov	s16, r0
 8008a18:	2101      	movs	r1, #1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	f001 f946 	bl	8009cac <__i2b>
 8008a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	4606      	mov	r6, r0
 8008a26:	f340 8088 	ble.w	8008b3a <_dtoa_r+0x8c2>
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	4601      	mov	r1, r0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f001 f9fc 	bl	8009e2c <__pow5mult>
 8008a34:	9b06      	ldr	r3, [sp, #24]
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	4606      	mov	r6, r0
 8008a3a:	f340 8081 	ble.w	8008b40 <_dtoa_r+0x8c8>
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	6933      	ldr	r3, [r6, #16]
 8008a44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a48:	6918      	ldr	r0, [r3, #16]
 8008a4a:	f001 f8df 	bl	8009c0c <__hi0bits>
 8008a4e:	f1c0 0020 	rsb	r0, r0, #32
 8008a52:	9b05      	ldr	r3, [sp, #20]
 8008a54:	4418      	add	r0, r3
 8008a56:	f010 001f 	ands.w	r0, r0, #31
 8008a5a:	f000 8092 	beq.w	8008b82 <_dtoa_r+0x90a>
 8008a5e:	f1c0 0320 	rsb	r3, r0, #32
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	f340 808a 	ble.w	8008b7c <_dtoa_r+0x904>
 8008a68:	f1c0 001c 	rsb	r0, r0, #28
 8008a6c:	9b04      	ldr	r3, [sp, #16]
 8008a6e:	4403      	add	r3, r0
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	9b05      	ldr	r3, [sp, #20]
 8008a74:	4403      	add	r3, r0
 8008a76:	4405      	add	r5, r0
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	9b04      	ldr	r3, [sp, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dd07      	ble.n	8008a90 <_dtoa_r+0x818>
 8008a80:	ee18 1a10 	vmov	r1, s16
 8008a84:	461a      	mov	r2, r3
 8008a86:	4620      	mov	r0, r4
 8008a88:	f001 fa2a 	bl	8009ee0 <__lshift>
 8008a8c:	ee08 0a10 	vmov	s16, r0
 8008a90:	9b05      	ldr	r3, [sp, #20]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	dd05      	ble.n	8008aa2 <_dtoa_r+0x82a>
 8008a96:	4631      	mov	r1, r6
 8008a98:	461a      	mov	r2, r3
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f001 fa20 	bl	8009ee0 <__lshift>
 8008aa0:	4606      	mov	r6, r0
 8008aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d06e      	beq.n	8008b86 <_dtoa_r+0x90e>
 8008aa8:	ee18 0a10 	vmov	r0, s16
 8008aac:	4631      	mov	r1, r6
 8008aae:	f001 fa87 	bl	8009fc0 <__mcmp>
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	da67      	bge.n	8008b86 <_dtoa_r+0x90e>
 8008ab6:	9b00      	ldr	r3, [sp, #0]
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	ee18 1a10 	vmov	r1, s16
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	220a      	movs	r2, #10
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f001 f811 	bl	8009aec <__multadd>
 8008aca:	9b08      	ldr	r3, [sp, #32]
 8008acc:	ee08 0a10 	vmov	s16, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 81b1 	beq.w	8008e38 <_dtoa_r+0xbc0>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	4639      	mov	r1, r7
 8008ada:	220a      	movs	r2, #10
 8008adc:	4620      	mov	r0, r4
 8008ade:	f001 f805 	bl	8009aec <__multadd>
 8008ae2:	9b02      	ldr	r3, [sp, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	4607      	mov	r7, r0
 8008ae8:	f300 808e 	bgt.w	8008c08 <_dtoa_r+0x990>
 8008aec:	9b06      	ldr	r3, [sp, #24]
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	dc51      	bgt.n	8008b96 <_dtoa_r+0x91e>
 8008af2:	e089      	b.n	8008c08 <_dtoa_r+0x990>
 8008af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008afa:	e74b      	b.n	8008994 <_dtoa_r+0x71c>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1e5e      	subs	r6, r3, #1
 8008b00:	9b07      	ldr	r3, [sp, #28]
 8008b02:	42b3      	cmp	r3, r6
 8008b04:	bfbf      	itttt	lt
 8008b06:	9b07      	ldrlt	r3, [sp, #28]
 8008b08:	9607      	strlt	r6, [sp, #28]
 8008b0a:	1af2      	sublt	r2, r6, r3
 8008b0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b0e:	bfb6      	itet	lt
 8008b10:	189b      	addlt	r3, r3, r2
 8008b12:	1b9e      	subge	r6, r3, r6
 8008b14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	bfb8      	it	lt
 8008b1a:	2600      	movlt	r6, #0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfb7      	itett	lt
 8008b20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008b24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008b28:	1a9d      	sublt	r5, r3, r2
 8008b2a:	2300      	movlt	r3, #0
 8008b2c:	e734      	b.n	8008998 <_dtoa_r+0x720>
 8008b2e:	9e07      	ldr	r6, [sp, #28]
 8008b30:	9d04      	ldr	r5, [sp, #16]
 8008b32:	9f08      	ldr	r7, [sp, #32]
 8008b34:	e73b      	b.n	80089ae <_dtoa_r+0x736>
 8008b36:	9a07      	ldr	r2, [sp, #28]
 8008b38:	e767      	b.n	8008a0a <_dtoa_r+0x792>
 8008b3a:	9b06      	ldr	r3, [sp, #24]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	dc18      	bgt.n	8008b72 <_dtoa_r+0x8fa>
 8008b40:	f1ba 0f00 	cmp.w	sl, #0
 8008b44:	d115      	bne.n	8008b72 <_dtoa_r+0x8fa>
 8008b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b4a:	b993      	cbnz	r3, 8008b72 <_dtoa_r+0x8fa>
 8008b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b50:	0d1b      	lsrs	r3, r3, #20
 8008b52:	051b      	lsls	r3, r3, #20
 8008b54:	b183      	cbz	r3, 8008b78 <_dtoa_r+0x900>
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	9b05      	ldr	r3, [sp, #20]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	9305      	str	r3, [sp, #20]
 8008b62:	f04f 0801 	mov.w	r8, #1
 8008b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f47f af6a 	bne.w	8008a42 <_dtoa_r+0x7ca>
 8008b6e:	2001      	movs	r0, #1
 8008b70:	e76f      	b.n	8008a52 <_dtoa_r+0x7da>
 8008b72:	f04f 0800 	mov.w	r8, #0
 8008b76:	e7f6      	b.n	8008b66 <_dtoa_r+0x8ee>
 8008b78:	4698      	mov	r8, r3
 8008b7a:	e7f4      	b.n	8008b66 <_dtoa_r+0x8ee>
 8008b7c:	f43f af7d 	beq.w	8008a7a <_dtoa_r+0x802>
 8008b80:	4618      	mov	r0, r3
 8008b82:	301c      	adds	r0, #28
 8008b84:	e772      	b.n	8008a6c <_dtoa_r+0x7f4>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dc37      	bgt.n	8008bfc <_dtoa_r+0x984>
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	dd34      	ble.n	8008bfc <_dtoa_r+0x984>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	9b02      	ldr	r3, [sp, #8]
 8008b98:	b96b      	cbnz	r3, 8008bb6 <_dtoa_r+0x93e>
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	2205      	movs	r2, #5
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 ffa4 	bl	8009aec <__multadd>
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	ee18 0a10 	vmov	r0, s16
 8008bac:	f001 fa08 	bl	8009fc0 <__mcmp>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f73f adbb 	bgt.w	800872c <_dtoa_r+0x4b4>
 8008bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb8:	9d01      	ldr	r5, [sp, #4]
 8008bba:	43db      	mvns	r3, r3
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	f04f 0800 	mov.w	r8, #0
 8008bc2:	4631      	mov	r1, r6
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 ff6f 	bl	8009aa8 <_Bfree>
 8008bca:	2f00      	cmp	r7, #0
 8008bcc:	f43f aea4 	beq.w	8008918 <_dtoa_r+0x6a0>
 8008bd0:	f1b8 0f00 	cmp.w	r8, #0
 8008bd4:	d005      	beq.n	8008be2 <_dtoa_r+0x96a>
 8008bd6:	45b8      	cmp	r8, r7
 8008bd8:	d003      	beq.n	8008be2 <_dtoa_r+0x96a>
 8008bda:	4641      	mov	r1, r8
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 ff63 	bl	8009aa8 <_Bfree>
 8008be2:	4639      	mov	r1, r7
 8008be4:	4620      	mov	r0, r4
 8008be6:	f000 ff5f 	bl	8009aa8 <_Bfree>
 8008bea:	e695      	b.n	8008918 <_dtoa_r+0x6a0>
 8008bec:	2600      	movs	r6, #0
 8008bee:	4637      	mov	r7, r6
 8008bf0:	e7e1      	b.n	8008bb6 <_dtoa_r+0x93e>
 8008bf2:	9700      	str	r7, [sp, #0]
 8008bf4:	4637      	mov	r7, r6
 8008bf6:	e599      	b.n	800872c <_dtoa_r+0x4b4>
 8008bf8:	40240000 	.word	0x40240000
 8008bfc:	9b08      	ldr	r3, [sp, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80ca 	beq.w	8008d98 <_dtoa_r+0xb20>
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	9302      	str	r3, [sp, #8]
 8008c08:	2d00      	cmp	r5, #0
 8008c0a:	dd05      	ble.n	8008c18 <_dtoa_r+0x9a0>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	462a      	mov	r2, r5
 8008c10:	4620      	mov	r0, r4
 8008c12:	f001 f965 	bl	8009ee0 <__lshift>
 8008c16:	4607      	mov	r7, r0
 8008c18:	f1b8 0f00 	cmp.w	r8, #0
 8008c1c:	d05b      	beq.n	8008cd6 <_dtoa_r+0xa5e>
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 ff01 	bl	8009a28 <_Balloc>
 8008c26:	4605      	mov	r5, r0
 8008c28:	b928      	cbnz	r0, 8008c36 <_dtoa_r+0x9be>
 8008c2a:	4b87      	ldr	r3, [pc, #540]	; (8008e48 <_dtoa_r+0xbd0>)
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c32:	f7ff bb3b 	b.w	80082ac <_dtoa_r+0x34>
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	3202      	adds	r2, #2
 8008c3a:	0092      	lsls	r2, r2, #2
 8008c3c:	f107 010c 	add.w	r1, r7, #12
 8008c40:	300c      	adds	r0, #12
 8008c42:	f000 fee3 	bl	8009a0c <memcpy>
 8008c46:	2201      	movs	r2, #1
 8008c48:	4629      	mov	r1, r5
 8008c4a:	4620      	mov	r0, r4
 8008c4c:	f001 f948 	bl	8009ee0 <__lshift>
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	f103 0901 	add.w	r9, r3, #1
 8008c56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	9305      	str	r3, [sp, #20]
 8008c5e:	f00a 0301 	and.w	r3, sl, #1
 8008c62:	46b8      	mov	r8, r7
 8008c64:	9304      	str	r3, [sp, #16]
 8008c66:	4607      	mov	r7, r0
 8008c68:	4631      	mov	r1, r6
 8008c6a:	ee18 0a10 	vmov	r0, s16
 8008c6e:	f7ff fa77 	bl	8008160 <quorem>
 8008c72:	4641      	mov	r1, r8
 8008c74:	9002      	str	r0, [sp, #8]
 8008c76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c7a:	ee18 0a10 	vmov	r0, s16
 8008c7e:	f001 f99f 	bl	8009fc0 <__mcmp>
 8008c82:	463a      	mov	r2, r7
 8008c84:	9003      	str	r0, [sp, #12]
 8008c86:	4631      	mov	r1, r6
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f001 f9b5 	bl	8009ff8 <__mdiff>
 8008c8e:	68c2      	ldr	r2, [r0, #12]
 8008c90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008c94:	4605      	mov	r5, r0
 8008c96:	bb02      	cbnz	r2, 8008cda <_dtoa_r+0xa62>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	ee18 0a10 	vmov	r0, s16
 8008c9e:	f001 f98f 	bl	8009fc0 <__mcmp>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	9207      	str	r2, [sp, #28]
 8008caa:	f000 fefd 	bl	8009aa8 <_Bfree>
 8008cae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008cb2:	ea43 0102 	orr.w	r1, r3, r2
 8008cb6:	9b04      	ldr	r3, [sp, #16]
 8008cb8:	430b      	orrs	r3, r1
 8008cba:	464d      	mov	r5, r9
 8008cbc:	d10f      	bne.n	8008cde <_dtoa_r+0xa66>
 8008cbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008cc2:	d02a      	beq.n	8008d1a <_dtoa_r+0xaa2>
 8008cc4:	9b03      	ldr	r3, [sp, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	dd02      	ble.n	8008cd0 <_dtoa_r+0xa58>
 8008cca:	9b02      	ldr	r3, [sp, #8]
 8008ccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008cd0:	f88b a000 	strb.w	sl, [fp]
 8008cd4:	e775      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	e7ba      	b.n	8008c50 <_dtoa_r+0x9d8>
 8008cda:	2201      	movs	r2, #1
 8008cdc:	e7e2      	b.n	8008ca4 <_dtoa_r+0xa2c>
 8008cde:	9b03      	ldr	r3, [sp, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	db04      	blt.n	8008cee <_dtoa_r+0xa76>
 8008ce4:	9906      	ldr	r1, [sp, #24]
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	9904      	ldr	r1, [sp, #16]
 8008cea:	430b      	orrs	r3, r1
 8008cec:	d122      	bne.n	8008d34 <_dtoa_r+0xabc>
 8008cee:	2a00      	cmp	r2, #0
 8008cf0:	ddee      	ble.n	8008cd0 <_dtoa_r+0xa58>
 8008cf2:	ee18 1a10 	vmov	r1, s16
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f001 f8f1 	bl	8009ee0 <__lshift>
 8008cfe:	4631      	mov	r1, r6
 8008d00:	ee08 0a10 	vmov	s16, r0
 8008d04:	f001 f95c 	bl	8009fc0 <__mcmp>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	dc03      	bgt.n	8008d14 <_dtoa_r+0xa9c>
 8008d0c:	d1e0      	bne.n	8008cd0 <_dtoa_r+0xa58>
 8008d0e:	f01a 0f01 	tst.w	sl, #1
 8008d12:	d0dd      	beq.n	8008cd0 <_dtoa_r+0xa58>
 8008d14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d18:	d1d7      	bne.n	8008cca <_dtoa_r+0xa52>
 8008d1a:	2339      	movs	r3, #57	; 0x39
 8008d1c:	f88b 3000 	strb.w	r3, [fp]
 8008d20:	462b      	mov	r3, r5
 8008d22:	461d      	mov	r5, r3
 8008d24:	3b01      	subs	r3, #1
 8008d26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d2a:	2a39      	cmp	r2, #57	; 0x39
 8008d2c:	d071      	beq.n	8008e12 <_dtoa_r+0xb9a>
 8008d2e:	3201      	adds	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e746      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	dd07      	ble.n	8008d48 <_dtoa_r+0xad0>
 8008d38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d3c:	d0ed      	beq.n	8008d1a <_dtoa_r+0xaa2>
 8008d3e:	f10a 0301 	add.w	r3, sl, #1
 8008d42:	f88b 3000 	strb.w	r3, [fp]
 8008d46:	e73c      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008d48:	9b05      	ldr	r3, [sp, #20]
 8008d4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d4e:	4599      	cmp	r9, r3
 8008d50:	d047      	beq.n	8008de2 <_dtoa_r+0xb6a>
 8008d52:	ee18 1a10 	vmov	r1, s16
 8008d56:	2300      	movs	r3, #0
 8008d58:	220a      	movs	r2, #10
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f000 fec6 	bl	8009aec <__multadd>
 8008d60:	45b8      	cmp	r8, r7
 8008d62:	ee08 0a10 	vmov	s16, r0
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	f04f 020a 	mov.w	r2, #10
 8008d6e:	4641      	mov	r1, r8
 8008d70:	4620      	mov	r0, r4
 8008d72:	d106      	bne.n	8008d82 <_dtoa_r+0xb0a>
 8008d74:	f000 feba 	bl	8009aec <__multadd>
 8008d78:	4680      	mov	r8, r0
 8008d7a:	4607      	mov	r7, r0
 8008d7c:	f109 0901 	add.w	r9, r9, #1
 8008d80:	e772      	b.n	8008c68 <_dtoa_r+0x9f0>
 8008d82:	f000 feb3 	bl	8009aec <__multadd>
 8008d86:	4639      	mov	r1, r7
 8008d88:	4680      	mov	r8, r0
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 feac 	bl	8009aec <__multadd>
 8008d94:	4607      	mov	r7, r0
 8008d96:	e7f1      	b.n	8008d7c <_dtoa_r+0xb04>
 8008d98:	9b03      	ldr	r3, [sp, #12]
 8008d9a:	9302      	str	r3, [sp, #8]
 8008d9c:	9d01      	ldr	r5, [sp, #4]
 8008d9e:	ee18 0a10 	vmov	r0, s16
 8008da2:	4631      	mov	r1, r6
 8008da4:	f7ff f9dc 	bl	8008160 <quorem>
 8008da8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	f805 ab01 	strb.w	sl, [r5], #1
 8008db2:	1aea      	subs	r2, r5, r3
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	4293      	cmp	r3, r2
 8008db8:	dd09      	ble.n	8008dce <_dtoa_r+0xb56>
 8008dba:	ee18 1a10 	vmov	r1, s16
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	220a      	movs	r2, #10
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f000 fe92 	bl	8009aec <__multadd>
 8008dc8:	ee08 0a10 	vmov	s16, r0
 8008dcc:	e7e7      	b.n	8008d9e <_dtoa_r+0xb26>
 8008dce:	9b02      	ldr	r3, [sp, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	bfc8      	it	gt
 8008dd4:	461d      	movgt	r5, r3
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	bfd8      	it	le
 8008dda:	2501      	movle	r5, #1
 8008ddc:	441d      	add	r5, r3
 8008dde:	f04f 0800 	mov.w	r8, #0
 8008de2:	ee18 1a10 	vmov	r1, s16
 8008de6:	2201      	movs	r2, #1
 8008de8:	4620      	mov	r0, r4
 8008dea:	f001 f879 	bl	8009ee0 <__lshift>
 8008dee:	4631      	mov	r1, r6
 8008df0:	ee08 0a10 	vmov	s16, r0
 8008df4:	f001 f8e4 	bl	8009fc0 <__mcmp>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dc91      	bgt.n	8008d20 <_dtoa_r+0xaa8>
 8008dfc:	d102      	bne.n	8008e04 <_dtoa_r+0xb8c>
 8008dfe:	f01a 0f01 	tst.w	sl, #1
 8008e02:	d18d      	bne.n	8008d20 <_dtoa_r+0xaa8>
 8008e04:	462b      	mov	r3, r5
 8008e06:	461d      	mov	r5, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a30      	cmp	r2, #48	; 0x30
 8008e0e:	d0fa      	beq.n	8008e06 <_dtoa_r+0xb8e>
 8008e10:	e6d7      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008e12:	9a01      	ldr	r2, [sp, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d184      	bne.n	8008d22 <_dtoa_r+0xaaa>
 8008e18:	9b00      	ldr	r3, [sp, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	2331      	movs	r3, #49	; 0x31
 8008e20:	7013      	strb	r3, [r2, #0]
 8008e22:	e6ce      	b.n	8008bc2 <_dtoa_r+0x94a>
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <_dtoa_r+0xbd4>)
 8008e26:	f7ff ba95 	b.w	8008354 <_dtoa_r+0xdc>
 8008e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f47f aa6e 	bne.w	800830e <_dtoa_r+0x96>
 8008e32:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <_dtoa_r+0xbd8>)
 8008e34:	f7ff ba8e 	b.w	8008354 <_dtoa_r+0xdc>
 8008e38:	9b02      	ldr	r3, [sp, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dcae      	bgt.n	8008d9c <_dtoa_r+0xb24>
 8008e3e:	9b06      	ldr	r3, [sp, #24]
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	f73f aea8 	bgt.w	8008b96 <_dtoa_r+0x91e>
 8008e46:	e7a9      	b.n	8008d9c <_dtoa_r+0xb24>
 8008e48:	0800c750 	.word	0x0800c750
 8008e4c:	0800c9b1 	.word	0x0800c9b1
 8008e50:	0800c6d1 	.word	0x0800c6d1

08008e54 <__sflush_r>:
 8008e54:	898a      	ldrh	r2, [r1, #12]
 8008e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	0710      	lsls	r0, r2, #28
 8008e5e:	460c      	mov	r4, r1
 8008e60:	d458      	bmi.n	8008f14 <__sflush_r+0xc0>
 8008e62:	684b      	ldr	r3, [r1, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dc05      	bgt.n	8008e74 <__sflush_r+0x20>
 8008e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dc02      	bgt.n	8008e74 <__sflush_r+0x20>
 8008e6e:	2000      	movs	r0, #0
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d0f9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e80:	682f      	ldr	r7, [r5, #0]
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	d032      	beq.n	8008eec <__sflush_r+0x98>
 8008e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	075a      	lsls	r2, r3, #29
 8008e8c:	d505      	bpl.n	8008e9a <__sflush_r+0x46>
 8008e8e:	6863      	ldr	r3, [r4, #4]
 8008e90:	1ac0      	subs	r0, r0, r3
 8008e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e94:	b10b      	cbz	r3, 8008e9a <__sflush_r+0x46>
 8008e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e98:	1ac0      	subs	r0, r0, r3
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea0:	6a21      	ldr	r1, [r4, #32]
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b0      	blx	r6
 8008ea6:	1c43      	adds	r3, r0, #1
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	d106      	bne.n	8008eba <__sflush_r+0x66>
 8008eac:	6829      	ldr	r1, [r5, #0]
 8008eae:	291d      	cmp	r1, #29
 8008eb0:	d82c      	bhi.n	8008f0c <__sflush_r+0xb8>
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	; (8008f5c <__sflush_r+0x108>)
 8008eb4:	40ca      	lsrs	r2, r1
 8008eb6:	07d6      	lsls	r6, r2, #31
 8008eb8:	d528      	bpl.n	8008f0c <__sflush_r+0xb8>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	6062      	str	r2, [r4, #4]
 8008ebe:	04d9      	lsls	r1, r3, #19
 8008ec0:	6922      	ldr	r2, [r4, #16]
 8008ec2:	6022      	str	r2, [r4, #0]
 8008ec4:	d504      	bpl.n	8008ed0 <__sflush_r+0x7c>
 8008ec6:	1c42      	adds	r2, r0, #1
 8008ec8:	d101      	bne.n	8008ece <__sflush_r+0x7a>
 8008eca:	682b      	ldr	r3, [r5, #0]
 8008ecc:	b903      	cbnz	r3, 8008ed0 <__sflush_r+0x7c>
 8008ece:	6560      	str	r0, [r4, #84]	; 0x54
 8008ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed2:	602f      	str	r7, [r5, #0]
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	d0ca      	beq.n	8008e6e <__sflush_r+0x1a>
 8008ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008edc:	4299      	cmp	r1, r3
 8008ede:	d002      	beq.n	8008ee6 <__sflush_r+0x92>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f001 fa79 	bl	800a3d8 <_free_r>
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8008eea:	e7c1      	b.n	8008e70 <__sflush_r+0x1c>
 8008eec:	6a21      	ldr	r1, [r4, #32]
 8008eee:	2301      	movs	r3, #1
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b0      	blx	r6
 8008ef4:	1c41      	adds	r1, r0, #1
 8008ef6:	d1c7      	bne.n	8008e88 <__sflush_r+0x34>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0c4      	beq.n	8008e88 <__sflush_r+0x34>
 8008efe:	2b1d      	cmp	r3, #29
 8008f00:	d001      	beq.n	8008f06 <__sflush_r+0xb2>
 8008f02:	2b16      	cmp	r3, #22
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0xb6>
 8008f06:	602f      	str	r7, [r5, #0]
 8008f08:	e7b1      	b.n	8008e6e <__sflush_r+0x1a>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f10:	81a3      	strh	r3, [r4, #12]
 8008f12:	e7ad      	b.n	8008e70 <__sflush_r+0x1c>
 8008f14:	690f      	ldr	r7, [r1, #16]
 8008f16:	2f00      	cmp	r7, #0
 8008f18:	d0a9      	beq.n	8008e6e <__sflush_r+0x1a>
 8008f1a:	0793      	lsls	r3, r2, #30
 8008f1c:	680e      	ldr	r6, [r1, #0]
 8008f1e:	bf08      	it	eq
 8008f20:	694b      	ldreq	r3, [r1, #20]
 8008f22:	600f      	str	r7, [r1, #0]
 8008f24:	bf18      	it	ne
 8008f26:	2300      	movne	r3, #0
 8008f28:	eba6 0807 	sub.w	r8, r6, r7
 8008f2c:	608b      	str	r3, [r1, #8]
 8008f2e:	f1b8 0f00 	cmp.w	r8, #0
 8008f32:	dd9c      	ble.n	8008e6e <__sflush_r+0x1a>
 8008f34:	6a21      	ldr	r1, [r4, #32]
 8008f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f38:	4643      	mov	r3, r8
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	47b0      	blx	r6
 8008f40:	2800      	cmp	r0, #0
 8008f42:	dc06      	bgt.n	8008f52 <__sflush_r+0xfe>
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4a:	81a3      	strh	r3, [r4, #12]
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f50:	e78e      	b.n	8008e70 <__sflush_r+0x1c>
 8008f52:	4407      	add	r7, r0
 8008f54:	eba8 0800 	sub.w	r8, r8, r0
 8008f58:	e7e9      	b.n	8008f2e <__sflush_r+0xda>
 8008f5a:	bf00      	nop
 8008f5c:	20400001 	.word	0x20400001

08008f60 <_fflush_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b913      	cbnz	r3, 8008f70 <_fflush_r+0x10>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	b118      	cbz	r0, 8008f7a <_fflush_r+0x1a>
 8008f72:	6983      	ldr	r3, [r0, #24]
 8008f74:	b90b      	cbnz	r3, 8008f7a <_fflush_r+0x1a>
 8008f76:	f000 f899 	bl	80090ac <__sinit>
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <_fflush_r+0x6c>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d11b      	bne.n	8008fb8 <_fflush_r+0x58>
 8008f80:	686c      	ldr	r4, [r5, #4]
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0ef      	beq.n	8008f6a <_fflush_r+0xa>
 8008f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f8c:	07d0      	lsls	r0, r2, #31
 8008f8e:	d404      	bmi.n	8008f9a <_fflush_r+0x3a>
 8008f90:	0599      	lsls	r1, r3, #22
 8008f92:	d402      	bmi.n	8008f9a <_fflush_r+0x3a>
 8008f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f96:	f000 fcb8 	bl	800990a <__retarget_lock_acquire_recursive>
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	f7ff ff59 	bl	8008e54 <__sflush_r>
 8008fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa4:	07da      	lsls	r2, r3, #31
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	d4e0      	bmi.n	8008f6c <_fflush_r+0xc>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	059b      	lsls	r3, r3, #22
 8008fae:	d4dd      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb2:	f000 fcab 	bl	800990c <__retarget_lock_release_recursive>
 8008fb6:	e7d9      	b.n	8008f6c <_fflush_r+0xc>
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <_fflush_r+0x70>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d101      	bne.n	8008fc2 <_fflush_r+0x62>
 8008fbe:	68ac      	ldr	r4, [r5, #8]
 8008fc0:	e7df      	b.n	8008f82 <_fflush_r+0x22>
 8008fc2:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <_fflush_r+0x74>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	bf08      	it	eq
 8008fc8:	68ec      	ldreq	r4, [r5, #12]
 8008fca:	e7da      	b.n	8008f82 <_fflush_r+0x22>
 8008fcc:	0800c784 	.word	0x0800c784
 8008fd0:	0800c7a4 	.word	0x0800c7a4
 8008fd4:	0800c764 	.word	0x0800c764

08008fd8 <fflush>:
 8008fd8:	4601      	mov	r1, r0
 8008fda:	b920      	cbnz	r0, 8008fe6 <fflush+0xe>
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <fflush+0x18>)
 8008fde:	4905      	ldr	r1, [pc, #20]	; (8008ff4 <fflush+0x1c>)
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f000 b8fe 	b.w	80091e2 <_fwalk_reent>
 8008fe6:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <fflush+0x20>)
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	f7ff bfb9 	b.w	8008f60 <_fflush_r>
 8008fee:	bf00      	nop
 8008ff0:	0800c540 	.word	0x0800c540
 8008ff4:	08008f61 	.word	0x08008f61
 8008ff8:	2000001c 	.word	0x2000001c

08008ffc <std>:
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	b510      	push	{r4, lr}
 8009000:	4604      	mov	r4, r0
 8009002:	e9c0 3300 	strd	r3, r3, [r0]
 8009006:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800900a:	6083      	str	r3, [r0, #8]
 800900c:	8181      	strh	r1, [r0, #12]
 800900e:	6643      	str	r3, [r0, #100]	; 0x64
 8009010:	81c2      	strh	r2, [r0, #14]
 8009012:	6183      	str	r3, [r0, #24]
 8009014:	4619      	mov	r1, r3
 8009016:	2208      	movs	r2, #8
 8009018:	305c      	adds	r0, #92	; 0x5c
 800901a:	f7fd fa41 	bl	80064a0 <memset>
 800901e:	4b05      	ldr	r3, [pc, #20]	; (8009034 <std+0x38>)
 8009020:	6263      	str	r3, [r4, #36]	; 0x24
 8009022:	4b05      	ldr	r3, [pc, #20]	; (8009038 <std+0x3c>)
 8009024:	62a3      	str	r3, [r4, #40]	; 0x28
 8009026:	4b05      	ldr	r3, [pc, #20]	; (800903c <std+0x40>)
 8009028:	62e3      	str	r3, [r4, #44]	; 0x2c
 800902a:	4b05      	ldr	r3, [pc, #20]	; (8009040 <std+0x44>)
 800902c:	6224      	str	r4, [r4, #32]
 800902e:	6323      	str	r3, [r4, #48]	; 0x30
 8009030:	bd10      	pop	{r4, pc}
 8009032:	bf00      	nop
 8009034:	0800b3a1 	.word	0x0800b3a1
 8009038:	0800b3c3 	.word	0x0800b3c3
 800903c:	0800b3fb 	.word	0x0800b3fb
 8009040:	0800b41f 	.word	0x0800b41f

08009044 <_cleanup_r>:
 8009044:	4901      	ldr	r1, [pc, #4]	; (800904c <_cleanup_r+0x8>)
 8009046:	f000 b8cc 	b.w	80091e2 <_fwalk_reent>
 800904a:	bf00      	nop
 800904c:	08008f61 	.word	0x08008f61

08009050 <__sfmoreglue>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	2268      	movs	r2, #104	; 0x68
 8009054:	1e4d      	subs	r5, r1, #1
 8009056:	4355      	muls	r5, r2
 8009058:	460e      	mov	r6, r1
 800905a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800905e:	f001 fa27 	bl	800a4b0 <_malloc_r>
 8009062:	4604      	mov	r4, r0
 8009064:	b140      	cbz	r0, 8009078 <__sfmoreglue+0x28>
 8009066:	2100      	movs	r1, #0
 8009068:	e9c0 1600 	strd	r1, r6, [r0]
 800906c:	300c      	adds	r0, #12
 800906e:	60a0      	str	r0, [r4, #8]
 8009070:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009074:	f7fd fa14 	bl	80064a0 <memset>
 8009078:	4620      	mov	r0, r4
 800907a:	bd70      	pop	{r4, r5, r6, pc}

0800907c <__sfp_lock_acquire>:
 800907c:	4801      	ldr	r0, [pc, #4]	; (8009084 <__sfp_lock_acquire+0x8>)
 800907e:	f000 bc44 	b.w	800990a <__retarget_lock_acquire_recursive>
 8009082:	bf00      	nop
 8009084:	2000042d 	.word	0x2000042d

08009088 <__sfp_lock_release>:
 8009088:	4801      	ldr	r0, [pc, #4]	; (8009090 <__sfp_lock_release+0x8>)
 800908a:	f000 bc3f 	b.w	800990c <__retarget_lock_release_recursive>
 800908e:	bf00      	nop
 8009090:	2000042d 	.word	0x2000042d

08009094 <__sinit_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sinit_lock_acquire+0x8>)
 8009096:	f000 bc38 	b.w	800990a <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	2000042e 	.word	0x2000042e

080090a0 <__sinit_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sinit_lock_release+0x8>)
 80090a2:	f000 bc33 	b.w	800990c <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	2000042e 	.word	0x2000042e

080090ac <__sinit>:
 80090ac:	b510      	push	{r4, lr}
 80090ae:	4604      	mov	r4, r0
 80090b0:	f7ff fff0 	bl	8009094 <__sinit_lock_acquire>
 80090b4:	69a3      	ldr	r3, [r4, #24]
 80090b6:	b11b      	cbz	r3, 80090c0 <__sinit+0x14>
 80090b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090bc:	f7ff bff0 	b.w	80090a0 <__sinit_lock_release>
 80090c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090c4:	6523      	str	r3, [r4, #80]	; 0x50
 80090c6:	4b13      	ldr	r3, [pc, #76]	; (8009114 <__sinit+0x68>)
 80090c8:	4a13      	ldr	r2, [pc, #76]	; (8009118 <__sinit+0x6c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80090ce:	42a3      	cmp	r3, r4
 80090d0:	bf04      	itt	eq
 80090d2:	2301      	moveq	r3, #1
 80090d4:	61a3      	streq	r3, [r4, #24]
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 f820 	bl	800911c <__sfp>
 80090dc:	6060      	str	r0, [r4, #4]
 80090de:	4620      	mov	r0, r4
 80090e0:	f000 f81c 	bl	800911c <__sfp>
 80090e4:	60a0      	str	r0, [r4, #8]
 80090e6:	4620      	mov	r0, r4
 80090e8:	f000 f818 	bl	800911c <__sfp>
 80090ec:	2200      	movs	r2, #0
 80090ee:	60e0      	str	r0, [r4, #12]
 80090f0:	2104      	movs	r1, #4
 80090f2:	6860      	ldr	r0, [r4, #4]
 80090f4:	f7ff ff82 	bl	8008ffc <std>
 80090f8:	68a0      	ldr	r0, [r4, #8]
 80090fa:	2201      	movs	r2, #1
 80090fc:	2109      	movs	r1, #9
 80090fe:	f7ff ff7d 	bl	8008ffc <std>
 8009102:	68e0      	ldr	r0, [r4, #12]
 8009104:	2202      	movs	r2, #2
 8009106:	2112      	movs	r1, #18
 8009108:	f7ff ff78 	bl	8008ffc <std>
 800910c:	2301      	movs	r3, #1
 800910e:	61a3      	str	r3, [r4, #24]
 8009110:	e7d2      	b.n	80090b8 <__sinit+0xc>
 8009112:	bf00      	nop
 8009114:	0800c540 	.word	0x0800c540
 8009118:	08009045 	.word	0x08009045

0800911c <__sfp>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	4607      	mov	r7, r0
 8009120:	f7ff ffac 	bl	800907c <__sfp_lock_acquire>
 8009124:	4b1e      	ldr	r3, [pc, #120]	; (80091a0 <__sfp+0x84>)
 8009126:	681e      	ldr	r6, [r3, #0]
 8009128:	69b3      	ldr	r3, [r6, #24]
 800912a:	b913      	cbnz	r3, 8009132 <__sfp+0x16>
 800912c:	4630      	mov	r0, r6
 800912e:	f7ff ffbd 	bl	80090ac <__sinit>
 8009132:	3648      	adds	r6, #72	; 0x48
 8009134:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009138:	3b01      	subs	r3, #1
 800913a:	d503      	bpl.n	8009144 <__sfp+0x28>
 800913c:	6833      	ldr	r3, [r6, #0]
 800913e:	b30b      	cbz	r3, 8009184 <__sfp+0x68>
 8009140:	6836      	ldr	r6, [r6, #0]
 8009142:	e7f7      	b.n	8009134 <__sfp+0x18>
 8009144:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009148:	b9d5      	cbnz	r5, 8009180 <__sfp+0x64>
 800914a:	4b16      	ldr	r3, [pc, #88]	; (80091a4 <__sfp+0x88>)
 800914c:	60e3      	str	r3, [r4, #12]
 800914e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009152:	6665      	str	r5, [r4, #100]	; 0x64
 8009154:	f000 fbd8 	bl	8009908 <__retarget_lock_init_recursive>
 8009158:	f7ff ff96 	bl	8009088 <__sfp_lock_release>
 800915c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009160:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009164:	6025      	str	r5, [r4, #0]
 8009166:	61a5      	str	r5, [r4, #24]
 8009168:	2208      	movs	r2, #8
 800916a:	4629      	mov	r1, r5
 800916c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009170:	f7fd f996 	bl	80064a0 <memset>
 8009174:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009178:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800917c:	4620      	mov	r0, r4
 800917e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009180:	3468      	adds	r4, #104	; 0x68
 8009182:	e7d9      	b.n	8009138 <__sfp+0x1c>
 8009184:	2104      	movs	r1, #4
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ff62 	bl	8009050 <__sfmoreglue>
 800918c:	4604      	mov	r4, r0
 800918e:	6030      	str	r0, [r6, #0]
 8009190:	2800      	cmp	r0, #0
 8009192:	d1d5      	bne.n	8009140 <__sfp+0x24>
 8009194:	f7ff ff78 	bl	8009088 <__sfp_lock_release>
 8009198:	230c      	movs	r3, #12
 800919a:	603b      	str	r3, [r7, #0]
 800919c:	e7ee      	b.n	800917c <__sfp+0x60>
 800919e:	bf00      	nop
 80091a0:	0800c540 	.word	0x0800c540
 80091a4:	ffff0001 	.word	0xffff0001

080091a8 <_fwalk>:
 80091a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ac:	460f      	mov	r7, r1
 80091ae:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091b2:	2600      	movs	r6, #0
 80091b4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80091b8:	f1b8 0801 	subs.w	r8, r8, #1
 80091bc:	d505      	bpl.n	80091ca <_fwalk+0x22>
 80091be:	6824      	ldr	r4, [r4, #0]
 80091c0:	2c00      	cmp	r4, #0
 80091c2:	d1f7      	bne.n	80091b4 <_fwalk+0xc>
 80091c4:	4630      	mov	r0, r6
 80091c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d906      	bls.n	80091de <_fwalk+0x36>
 80091d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d4:	3301      	adds	r3, #1
 80091d6:	d002      	beq.n	80091de <_fwalk+0x36>
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	4306      	orrs	r6, r0
 80091de:	3568      	adds	r5, #104	; 0x68
 80091e0:	e7ea      	b.n	80091b8 <_fwalk+0x10>

080091e2 <_fwalk_reent>:
 80091e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e6:	4606      	mov	r6, r0
 80091e8:	4688      	mov	r8, r1
 80091ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091ee:	2700      	movs	r7, #0
 80091f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091f4:	f1b9 0901 	subs.w	r9, r9, #1
 80091f8:	d505      	bpl.n	8009206 <_fwalk_reent+0x24>
 80091fa:	6824      	ldr	r4, [r4, #0]
 80091fc:	2c00      	cmp	r4, #0
 80091fe:	d1f7      	bne.n	80091f0 <_fwalk_reent+0xe>
 8009200:	4638      	mov	r0, r7
 8009202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009206:	89ab      	ldrh	r3, [r5, #12]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d907      	bls.n	800921c <_fwalk_reent+0x3a>
 800920c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009210:	3301      	adds	r3, #1
 8009212:	d003      	beq.n	800921c <_fwalk_reent+0x3a>
 8009214:	4629      	mov	r1, r5
 8009216:	4630      	mov	r0, r6
 8009218:	47c0      	blx	r8
 800921a:	4307      	orrs	r7, r0
 800921c:	3568      	adds	r5, #104	; 0x68
 800921e:	e7e9      	b.n	80091f4 <_fwalk_reent+0x12>

08009220 <rshift>:
 8009220:	6903      	ldr	r3, [r0, #16]
 8009222:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009226:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800922a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800922e:	f100 0414 	add.w	r4, r0, #20
 8009232:	dd45      	ble.n	80092c0 <rshift+0xa0>
 8009234:	f011 011f 	ands.w	r1, r1, #31
 8009238:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800923c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009240:	d10c      	bne.n	800925c <rshift+0x3c>
 8009242:	f100 0710 	add.w	r7, r0, #16
 8009246:	4629      	mov	r1, r5
 8009248:	42b1      	cmp	r1, r6
 800924a:	d334      	bcc.n	80092b6 <rshift+0x96>
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	1eea      	subs	r2, r5, #3
 8009252:	4296      	cmp	r6, r2
 8009254:	bf38      	it	cc
 8009256:	2300      	movcc	r3, #0
 8009258:	4423      	add	r3, r4
 800925a:	e015      	b.n	8009288 <rshift+0x68>
 800925c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009260:	f1c1 0820 	rsb	r8, r1, #32
 8009264:	40cf      	lsrs	r7, r1
 8009266:	f105 0e04 	add.w	lr, r5, #4
 800926a:	46a1      	mov	r9, r4
 800926c:	4576      	cmp	r6, lr
 800926e:	46f4      	mov	ip, lr
 8009270:	d815      	bhi.n	800929e <rshift+0x7e>
 8009272:	1a9a      	subs	r2, r3, r2
 8009274:	0092      	lsls	r2, r2, #2
 8009276:	3a04      	subs	r2, #4
 8009278:	3501      	adds	r5, #1
 800927a:	42ae      	cmp	r6, r5
 800927c:	bf38      	it	cc
 800927e:	2200      	movcc	r2, #0
 8009280:	18a3      	adds	r3, r4, r2
 8009282:	50a7      	str	r7, [r4, r2]
 8009284:	b107      	cbz	r7, 8009288 <rshift+0x68>
 8009286:	3304      	adds	r3, #4
 8009288:	1b1a      	subs	r2, r3, r4
 800928a:	42a3      	cmp	r3, r4
 800928c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009290:	bf08      	it	eq
 8009292:	2300      	moveq	r3, #0
 8009294:	6102      	str	r2, [r0, #16]
 8009296:	bf08      	it	eq
 8009298:	6143      	streq	r3, [r0, #20]
 800929a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800929e:	f8dc c000 	ldr.w	ip, [ip]
 80092a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80092a6:	ea4c 0707 	orr.w	r7, ip, r7
 80092aa:	f849 7b04 	str.w	r7, [r9], #4
 80092ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092b2:	40cf      	lsrs	r7, r1
 80092b4:	e7da      	b.n	800926c <rshift+0x4c>
 80092b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80092ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80092be:	e7c3      	b.n	8009248 <rshift+0x28>
 80092c0:	4623      	mov	r3, r4
 80092c2:	e7e1      	b.n	8009288 <rshift+0x68>

080092c4 <__hexdig_fun>:
 80092c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092c8:	2b09      	cmp	r3, #9
 80092ca:	d802      	bhi.n	80092d2 <__hexdig_fun+0xe>
 80092cc:	3820      	subs	r0, #32
 80092ce:	b2c0      	uxtb	r0, r0
 80092d0:	4770      	bx	lr
 80092d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	d801      	bhi.n	80092de <__hexdig_fun+0x1a>
 80092da:	3847      	subs	r0, #71	; 0x47
 80092dc:	e7f7      	b.n	80092ce <__hexdig_fun+0xa>
 80092de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d801      	bhi.n	80092ea <__hexdig_fun+0x26>
 80092e6:	3827      	subs	r0, #39	; 0x27
 80092e8:	e7f1      	b.n	80092ce <__hexdig_fun+0xa>
 80092ea:	2000      	movs	r0, #0
 80092ec:	4770      	bx	lr
	...

080092f0 <__gethex>:
 80092f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092f4:	ed2d 8b02 	vpush	{d8}
 80092f8:	b089      	sub	sp, #36	; 0x24
 80092fa:	ee08 0a10 	vmov	s16, r0
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	4bb4      	ldr	r3, [pc, #720]	; (80095d4 <__gethex+0x2e4>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	4618      	mov	r0, r3
 8009308:	468b      	mov	fp, r1
 800930a:	4690      	mov	r8, r2
 800930c:	f7f6 ff78 	bl	8000200 <strlen>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	f8db 2000 	ldr.w	r2, [fp]
 8009316:	4403      	add	r3, r0
 8009318:	4682      	mov	sl, r0
 800931a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800931e:	9305      	str	r3, [sp, #20]
 8009320:	1c93      	adds	r3, r2, #2
 8009322:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009326:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800932a:	32fe      	adds	r2, #254	; 0xfe
 800932c:	18d1      	adds	r1, r2, r3
 800932e:	461f      	mov	r7, r3
 8009330:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009334:	9100      	str	r1, [sp, #0]
 8009336:	2830      	cmp	r0, #48	; 0x30
 8009338:	d0f8      	beq.n	800932c <__gethex+0x3c>
 800933a:	f7ff ffc3 	bl	80092c4 <__hexdig_fun>
 800933e:	4604      	mov	r4, r0
 8009340:	2800      	cmp	r0, #0
 8009342:	d13a      	bne.n	80093ba <__gethex+0xca>
 8009344:	9901      	ldr	r1, [sp, #4]
 8009346:	4652      	mov	r2, sl
 8009348:	4638      	mov	r0, r7
 800934a:	f002 f86c 	bl	800b426 <strncmp>
 800934e:	4605      	mov	r5, r0
 8009350:	2800      	cmp	r0, #0
 8009352:	d168      	bne.n	8009426 <__gethex+0x136>
 8009354:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009358:	eb07 060a 	add.w	r6, r7, sl
 800935c:	f7ff ffb2 	bl	80092c4 <__hexdig_fun>
 8009360:	2800      	cmp	r0, #0
 8009362:	d062      	beq.n	800942a <__gethex+0x13a>
 8009364:	4633      	mov	r3, r6
 8009366:	7818      	ldrb	r0, [r3, #0]
 8009368:	2830      	cmp	r0, #48	; 0x30
 800936a:	461f      	mov	r7, r3
 800936c:	f103 0301 	add.w	r3, r3, #1
 8009370:	d0f9      	beq.n	8009366 <__gethex+0x76>
 8009372:	f7ff ffa7 	bl	80092c4 <__hexdig_fun>
 8009376:	2301      	movs	r3, #1
 8009378:	fab0 f480 	clz	r4, r0
 800937c:	0964      	lsrs	r4, r4, #5
 800937e:	4635      	mov	r5, r6
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	463a      	mov	r2, r7
 8009384:	4616      	mov	r6, r2
 8009386:	3201      	adds	r2, #1
 8009388:	7830      	ldrb	r0, [r6, #0]
 800938a:	f7ff ff9b 	bl	80092c4 <__hexdig_fun>
 800938e:	2800      	cmp	r0, #0
 8009390:	d1f8      	bne.n	8009384 <__gethex+0x94>
 8009392:	9901      	ldr	r1, [sp, #4]
 8009394:	4652      	mov	r2, sl
 8009396:	4630      	mov	r0, r6
 8009398:	f002 f845 	bl	800b426 <strncmp>
 800939c:	b980      	cbnz	r0, 80093c0 <__gethex+0xd0>
 800939e:	b94d      	cbnz	r5, 80093b4 <__gethex+0xc4>
 80093a0:	eb06 050a 	add.w	r5, r6, sl
 80093a4:	462a      	mov	r2, r5
 80093a6:	4616      	mov	r6, r2
 80093a8:	3201      	adds	r2, #1
 80093aa:	7830      	ldrb	r0, [r6, #0]
 80093ac:	f7ff ff8a 	bl	80092c4 <__hexdig_fun>
 80093b0:	2800      	cmp	r0, #0
 80093b2:	d1f8      	bne.n	80093a6 <__gethex+0xb6>
 80093b4:	1bad      	subs	r5, r5, r6
 80093b6:	00ad      	lsls	r5, r5, #2
 80093b8:	e004      	b.n	80093c4 <__gethex+0xd4>
 80093ba:	2400      	movs	r4, #0
 80093bc:	4625      	mov	r5, r4
 80093be:	e7e0      	b.n	8009382 <__gethex+0x92>
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	d1f7      	bne.n	80093b4 <__gethex+0xc4>
 80093c4:	7833      	ldrb	r3, [r6, #0]
 80093c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093ca:	2b50      	cmp	r3, #80	; 0x50
 80093cc:	d13b      	bne.n	8009446 <__gethex+0x156>
 80093ce:	7873      	ldrb	r3, [r6, #1]
 80093d0:	2b2b      	cmp	r3, #43	; 0x2b
 80093d2:	d02c      	beq.n	800942e <__gethex+0x13e>
 80093d4:	2b2d      	cmp	r3, #45	; 0x2d
 80093d6:	d02e      	beq.n	8009436 <__gethex+0x146>
 80093d8:	1c71      	adds	r1, r6, #1
 80093da:	f04f 0900 	mov.w	r9, #0
 80093de:	7808      	ldrb	r0, [r1, #0]
 80093e0:	f7ff ff70 	bl	80092c4 <__hexdig_fun>
 80093e4:	1e43      	subs	r3, r0, #1
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	2b18      	cmp	r3, #24
 80093ea:	d82c      	bhi.n	8009446 <__gethex+0x156>
 80093ec:	f1a0 0210 	sub.w	r2, r0, #16
 80093f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093f4:	f7ff ff66 	bl	80092c4 <__hexdig_fun>
 80093f8:	1e43      	subs	r3, r0, #1
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b18      	cmp	r3, #24
 80093fe:	d91d      	bls.n	800943c <__gethex+0x14c>
 8009400:	f1b9 0f00 	cmp.w	r9, #0
 8009404:	d000      	beq.n	8009408 <__gethex+0x118>
 8009406:	4252      	negs	r2, r2
 8009408:	4415      	add	r5, r2
 800940a:	f8cb 1000 	str.w	r1, [fp]
 800940e:	b1e4      	cbz	r4, 800944a <__gethex+0x15a>
 8009410:	9b00      	ldr	r3, [sp, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	bf14      	ite	ne
 8009416:	2700      	movne	r7, #0
 8009418:	2706      	moveq	r7, #6
 800941a:	4638      	mov	r0, r7
 800941c:	b009      	add	sp, #36	; 0x24
 800941e:	ecbd 8b02 	vpop	{d8}
 8009422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009426:	463e      	mov	r6, r7
 8009428:	4625      	mov	r5, r4
 800942a:	2401      	movs	r4, #1
 800942c:	e7ca      	b.n	80093c4 <__gethex+0xd4>
 800942e:	f04f 0900 	mov.w	r9, #0
 8009432:	1cb1      	adds	r1, r6, #2
 8009434:	e7d3      	b.n	80093de <__gethex+0xee>
 8009436:	f04f 0901 	mov.w	r9, #1
 800943a:	e7fa      	b.n	8009432 <__gethex+0x142>
 800943c:	230a      	movs	r3, #10
 800943e:	fb03 0202 	mla	r2, r3, r2, r0
 8009442:	3a10      	subs	r2, #16
 8009444:	e7d4      	b.n	80093f0 <__gethex+0x100>
 8009446:	4631      	mov	r1, r6
 8009448:	e7df      	b.n	800940a <__gethex+0x11a>
 800944a:	1bf3      	subs	r3, r6, r7
 800944c:	3b01      	subs	r3, #1
 800944e:	4621      	mov	r1, r4
 8009450:	2b07      	cmp	r3, #7
 8009452:	dc0b      	bgt.n	800946c <__gethex+0x17c>
 8009454:	ee18 0a10 	vmov	r0, s16
 8009458:	f000 fae6 	bl	8009a28 <_Balloc>
 800945c:	4604      	mov	r4, r0
 800945e:	b940      	cbnz	r0, 8009472 <__gethex+0x182>
 8009460:	4b5d      	ldr	r3, [pc, #372]	; (80095d8 <__gethex+0x2e8>)
 8009462:	4602      	mov	r2, r0
 8009464:	21de      	movs	r1, #222	; 0xde
 8009466:	485d      	ldr	r0, [pc, #372]	; (80095dc <__gethex+0x2ec>)
 8009468:	f002 fa18 	bl	800b89c <__assert_func>
 800946c:	3101      	adds	r1, #1
 800946e:	105b      	asrs	r3, r3, #1
 8009470:	e7ee      	b.n	8009450 <__gethex+0x160>
 8009472:	f100 0914 	add.w	r9, r0, #20
 8009476:	f04f 0b00 	mov.w	fp, #0
 800947a:	f1ca 0301 	rsb	r3, sl, #1
 800947e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009482:	f8cd b000 	str.w	fp, [sp]
 8009486:	9306      	str	r3, [sp, #24]
 8009488:	42b7      	cmp	r7, r6
 800948a:	d340      	bcc.n	800950e <__gethex+0x21e>
 800948c:	9802      	ldr	r0, [sp, #8]
 800948e:	9b00      	ldr	r3, [sp, #0]
 8009490:	f840 3b04 	str.w	r3, [r0], #4
 8009494:	eba0 0009 	sub.w	r0, r0, r9
 8009498:	1080      	asrs	r0, r0, #2
 800949a:	0146      	lsls	r6, r0, #5
 800949c:	6120      	str	r0, [r4, #16]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fbb4 	bl	8009c0c <__hi0bits>
 80094a4:	1a30      	subs	r0, r6, r0
 80094a6:	f8d8 6000 	ldr.w	r6, [r8]
 80094aa:	42b0      	cmp	r0, r6
 80094ac:	dd63      	ble.n	8009576 <__gethex+0x286>
 80094ae:	1b87      	subs	r7, r0, r6
 80094b0:	4639      	mov	r1, r7
 80094b2:	4620      	mov	r0, r4
 80094b4:	f000 ff58 	bl	800a368 <__any_on>
 80094b8:	4682      	mov	sl, r0
 80094ba:	b1a8      	cbz	r0, 80094e8 <__gethex+0x1f8>
 80094bc:	1e7b      	subs	r3, r7, #1
 80094be:	1159      	asrs	r1, r3, #5
 80094c0:	f003 021f 	and.w	r2, r3, #31
 80094c4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80094c8:	f04f 0a01 	mov.w	sl, #1
 80094cc:	fa0a f202 	lsl.w	r2, sl, r2
 80094d0:	420a      	tst	r2, r1
 80094d2:	d009      	beq.n	80094e8 <__gethex+0x1f8>
 80094d4:	4553      	cmp	r3, sl
 80094d6:	dd05      	ble.n	80094e4 <__gethex+0x1f4>
 80094d8:	1eb9      	subs	r1, r7, #2
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 ff44 	bl	800a368 <__any_on>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d145      	bne.n	8009570 <__gethex+0x280>
 80094e4:	f04f 0a02 	mov.w	sl, #2
 80094e8:	4639      	mov	r1, r7
 80094ea:	4620      	mov	r0, r4
 80094ec:	f7ff fe98 	bl	8009220 <rshift>
 80094f0:	443d      	add	r5, r7
 80094f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094f6:	42ab      	cmp	r3, r5
 80094f8:	da4c      	bge.n	8009594 <__gethex+0x2a4>
 80094fa:	ee18 0a10 	vmov	r0, s16
 80094fe:	4621      	mov	r1, r4
 8009500:	f000 fad2 	bl	8009aa8 <_Bfree>
 8009504:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009506:	2300      	movs	r3, #0
 8009508:	6013      	str	r3, [r2, #0]
 800950a:	27a3      	movs	r7, #163	; 0xa3
 800950c:	e785      	b.n	800941a <__gethex+0x12a>
 800950e:	1e73      	subs	r3, r6, #1
 8009510:	9a05      	ldr	r2, [sp, #20]
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009518:	4293      	cmp	r3, r2
 800951a:	d019      	beq.n	8009550 <__gethex+0x260>
 800951c:	f1bb 0f20 	cmp.w	fp, #32
 8009520:	d107      	bne.n	8009532 <__gethex+0x242>
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	9a00      	ldr	r2, [sp, #0]
 8009526:	f843 2b04 	str.w	r2, [r3], #4
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	2300      	movs	r3, #0
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	469b      	mov	fp, r3
 8009532:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009536:	f7ff fec5 	bl	80092c4 <__hexdig_fun>
 800953a:	9b00      	ldr	r3, [sp, #0]
 800953c:	f000 000f 	and.w	r0, r0, #15
 8009540:	fa00 f00b 	lsl.w	r0, r0, fp
 8009544:	4303      	orrs	r3, r0
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	f10b 0b04 	add.w	fp, fp, #4
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	e00d      	b.n	800956c <__gethex+0x27c>
 8009550:	9b03      	ldr	r3, [sp, #12]
 8009552:	9a06      	ldr	r2, [sp, #24]
 8009554:	4413      	add	r3, r2
 8009556:	42bb      	cmp	r3, r7
 8009558:	d3e0      	bcc.n	800951c <__gethex+0x22c>
 800955a:	4618      	mov	r0, r3
 800955c:	9901      	ldr	r1, [sp, #4]
 800955e:	9307      	str	r3, [sp, #28]
 8009560:	4652      	mov	r2, sl
 8009562:	f001 ff60 	bl	800b426 <strncmp>
 8009566:	9b07      	ldr	r3, [sp, #28]
 8009568:	2800      	cmp	r0, #0
 800956a:	d1d7      	bne.n	800951c <__gethex+0x22c>
 800956c:	461e      	mov	r6, r3
 800956e:	e78b      	b.n	8009488 <__gethex+0x198>
 8009570:	f04f 0a03 	mov.w	sl, #3
 8009574:	e7b8      	b.n	80094e8 <__gethex+0x1f8>
 8009576:	da0a      	bge.n	800958e <__gethex+0x29e>
 8009578:	1a37      	subs	r7, r6, r0
 800957a:	4621      	mov	r1, r4
 800957c:	ee18 0a10 	vmov	r0, s16
 8009580:	463a      	mov	r2, r7
 8009582:	f000 fcad 	bl	8009ee0 <__lshift>
 8009586:	1bed      	subs	r5, r5, r7
 8009588:	4604      	mov	r4, r0
 800958a:	f100 0914 	add.w	r9, r0, #20
 800958e:	f04f 0a00 	mov.w	sl, #0
 8009592:	e7ae      	b.n	80094f2 <__gethex+0x202>
 8009594:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009598:	42a8      	cmp	r0, r5
 800959a:	dd72      	ble.n	8009682 <__gethex+0x392>
 800959c:	1b45      	subs	r5, r0, r5
 800959e:	42ae      	cmp	r6, r5
 80095a0:	dc36      	bgt.n	8009610 <__gethex+0x320>
 80095a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d02a      	beq.n	8009600 <__gethex+0x310>
 80095aa:	2b03      	cmp	r3, #3
 80095ac:	d02c      	beq.n	8009608 <__gethex+0x318>
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d11c      	bne.n	80095ec <__gethex+0x2fc>
 80095b2:	42ae      	cmp	r6, r5
 80095b4:	d11a      	bne.n	80095ec <__gethex+0x2fc>
 80095b6:	2e01      	cmp	r6, #1
 80095b8:	d112      	bne.n	80095e0 <__gethex+0x2f0>
 80095ba:	9a04      	ldr	r2, [sp, #16]
 80095bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	2301      	movs	r3, #1
 80095c4:	6123      	str	r3, [r4, #16]
 80095c6:	f8c9 3000 	str.w	r3, [r9]
 80095ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095cc:	2762      	movs	r7, #98	; 0x62
 80095ce:	601c      	str	r4, [r3, #0]
 80095d0:	e723      	b.n	800941a <__gethex+0x12a>
 80095d2:	bf00      	nop
 80095d4:	0800c82c 	.word	0x0800c82c
 80095d8:	0800c750 	.word	0x0800c750
 80095dc:	0800c7c4 	.word	0x0800c7c4
 80095e0:	1e71      	subs	r1, r6, #1
 80095e2:	4620      	mov	r0, r4
 80095e4:	f000 fec0 	bl	800a368 <__any_on>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d1e6      	bne.n	80095ba <__gethex+0x2ca>
 80095ec:	ee18 0a10 	vmov	r0, s16
 80095f0:	4621      	mov	r1, r4
 80095f2:	f000 fa59 	bl	8009aa8 <_Bfree>
 80095f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095f8:	2300      	movs	r3, #0
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	2750      	movs	r7, #80	; 0x50
 80095fe:	e70c      	b.n	800941a <__gethex+0x12a>
 8009600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1f2      	bne.n	80095ec <__gethex+0x2fc>
 8009606:	e7d8      	b.n	80095ba <__gethex+0x2ca>
 8009608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1d5      	bne.n	80095ba <__gethex+0x2ca>
 800960e:	e7ed      	b.n	80095ec <__gethex+0x2fc>
 8009610:	1e6f      	subs	r7, r5, #1
 8009612:	f1ba 0f00 	cmp.w	sl, #0
 8009616:	d131      	bne.n	800967c <__gethex+0x38c>
 8009618:	b127      	cbz	r7, 8009624 <__gethex+0x334>
 800961a:	4639      	mov	r1, r7
 800961c:	4620      	mov	r0, r4
 800961e:	f000 fea3 	bl	800a368 <__any_on>
 8009622:	4682      	mov	sl, r0
 8009624:	117b      	asrs	r3, r7, #5
 8009626:	2101      	movs	r1, #1
 8009628:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800962c:	f007 071f 	and.w	r7, r7, #31
 8009630:	fa01 f707 	lsl.w	r7, r1, r7
 8009634:	421f      	tst	r7, r3
 8009636:	4629      	mov	r1, r5
 8009638:	4620      	mov	r0, r4
 800963a:	bf18      	it	ne
 800963c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009640:	1b76      	subs	r6, r6, r5
 8009642:	f7ff fded 	bl	8009220 <rshift>
 8009646:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800964a:	2702      	movs	r7, #2
 800964c:	f1ba 0f00 	cmp.w	sl, #0
 8009650:	d048      	beq.n	80096e4 <__gethex+0x3f4>
 8009652:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d015      	beq.n	8009686 <__gethex+0x396>
 800965a:	2b03      	cmp	r3, #3
 800965c:	d017      	beq.n	800968e <__gethex+0x39e>
 800965e:	2b01      	cmp	r3, #1
 8009660:	d109      	bne.n	8009676 <__gethex+0x386>
 8009662:	f01a 0f02 	tst.w	sl, #2
 8009666:	d006      	beq.n	8009676 <__gethex+0x386>
 8009668:	f8d9 0000 	ldr.w	r0, [r9]
 800966c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009670:	f01a 0f01 	tst.w	sl, #1
 8009674:	d10e      	bne.n	8009694 <__gethex+0x3a4>
 8009676:	f047 0710 	orr.w	r7, r7, #16
 800967a:	e033      	b.n	80096e4 <__gethex+0x3f4>
 800967c:	f04f 0a01 	mov.w	sl, #1
 8009680:	e7d0      	b.n	8009624 <__gethex+0x334>
 8009682:	2701      	movs	r7, #1
 8009684:	e7e2      	b.n	800964c <__gethex+0x35c>
 8009686:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009688:	f1c3 0301 	rsb	r3, r3, #1
 800968c:	9315      	str	r3, [sp, #84]	; 0x54
 800968e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0f0      	beq.n	8009676 <__gethex+0x386>
 8009694:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009698:	f104 0314 	add.w	r3, r4, #20
 800969c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096a0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096a4:	f04f 0c00 	mov.w	ip, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80096ae:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80096b2:	d01c      	beq.n	80096ee <__gethex+0x3fe>
 80096b4:	3201      	adds	r2, #1
 80096b6:	6002      	str	r2, [r0, #0]
 80096b8:	2f02      	cmp	r7, #2
 80096ba:	f104 0314 	add.w	r3, r4, #20
 80096be:	d13f      	bne.n	8009740 <__gethex+0x450>
 80096c0:	f8d8 2000 	ldr.w	r2, [r8]
 80096c4:	3a01      	subs	r2, #1
 80096c6:	42b2      	cmp	r2, r6
 80096c8:	d10a      	bne.n	80096e0 <__gethex+0x3f0>
 80096ca:	1171      	asrs	r1, r6, #5
 80096cc:	2201      	movs	r2, #1
 80096ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096d2:	f006 061f 	and.w	r6, r6, #31
 80096d6:	fa02 f606 	lsl.w	r6, r2, r6
 80096da:	421e      	tst	r6, r3
 80096dc:	bf18      	it	ne
 80096de:	4617      	movne	r7, r2
 80096e0:	f047 0720 	orr.w	r7, r7, #32
 80096e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096e6:	601c      	str	r4, [r3, #0]
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	601d      	str	r5, [r3, #0]
 80096ec:	e695      	b.n	800941a <__gethex+0x12a>
 80096ee:	4299      	cmp	r1, r3
 80096f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80096f4:	d8d8      	bhi.n	80096a8 <__gethex+0x3b8>
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	459b      	cmp	fp, r3
 80096fa:	db19      	blt.n	8009730 <__gethex+0x440>
 80096fc:	6861      	ldr	r1, [r4, #4]
 80096fe:	ee18 0a10 	vmov	r0, s16
 8009702:	3101      	adds	r1, #1
 8009704:	f000 f990 	bl	8009a28 <_Balloc>
 8009708:	4681      	mov	r9, r0
 800970a:	b918      	cbnz	r0, 8009714 <__gethex+0x424>
 800970c:	4b1a      	ldr	r3, [pc, #104]	; (8009778 <__gethex+0x488>)
 800970e:	4602      	mov	r2, r0
 8009710:	2184      	movs	r1, #132	; 0x84
 8009712:	e6a8      	b.n	8009466 <__gethex+0x176>
 8009714:	6922      	ldr	r2, [r4, #16]
 8009716:	3202      	adds	r2, #2
 8009718:	f104 010c 	add.w	r1, r4, #12
 800971c:	0092      	lsls	r2, r2, #2
 800971e:	300c      	adds	r0, #12
 8009720:	f000 f974 	bl	8009a0c <memcpy>
 8009724:	4621      	mov	r1, r4
 8009726:	ee18 0a10 	vmov	r0, s16
 800972a:	f000 f9bd 	bl	8009aa8 <_Bfree>
 800972e:	464c      	mov	r4, r9
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009738:	6122      	str	r2, [r4, #16]
 800973a:	2201      	movs	r2, #1
 800973c:	615a      	str	r2, [r3, #20]
 800973e:	e7bb      	b.n	80096b8 <__gethex+0x3c8>
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	455a      	cmp	r2, fp
 8009744:	dd0b      	ble.n	800975e <__gethex+0x46e>
 8009746:	2101      	movs	r1, #1
 8009748:	4620      	mov	r0, r4
 800974a:	f7ff fd69 	bl	8009220 <rshift>
 800974e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009752:	3501      	adds	r5, #1
 8009754:	42ab      	cmp	r3, r5
 8009756:	f6ff aed0 	blt.w	80094fa <__gethex+0x20a>
 800975a:	2701      	movs	r7, #1
 800975c:	e7c0      	b.n	80096e0 <__gethex+0x3f0>
 800975e:	f016 061f 	ands.w	r6, r6, #31
 8009762:	d0fa      	beq.n	800975a <__gethex+0x46a>
 8009764:	4453      	add	r3, sl
 8009766:	f1c6 0620 	rsb	r6, r6, #32
 800976a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800976e:	f000 fa4d 	bl	8009c0c <__hi0bits>
 8009772:	42b0      	cmp	r0, r6
 8009774:	dbe7      	blt.n	8009746 <__gethex+0x456>
 8009776:	e7f0      	b.n	800975a <__gethex+0x46a>
 8009778:	0800c750 	.word	0x0800c750

0800977c <L_shift>:
 800977c:	f1c2 0208 	rsb	r2, r2, #8
 8009780:	0092      	lsls	r2, r2, #2
 8009782:	b570      	push	{r4, r5, r6, lr}
 8009784:	f1c2 0620 	rsb	r6, r2, #32
 8009788:	6843      	ldr	r3, [r0, #4]
 800978a:	6804      	ldr	r4, [r0, #0]
 800978c:	fa03 f506 	lsl.w	r5, r3, r6
 8009790:	432c      	orrs	r4, r5
 8009792:	40d3      	lsrs	r3, r2
 8009794:	6004      	str	r4, [r0, #0]
 8009796:	f840 3f04 	str.w	r3, [r0, #4]!
 800979a:	4288      	cmp	r0, r1
 800979c:	d3f4      	bcc.n	8009788 <L_shift+0xc>
 800979e:	bd70      	pop	{r4, r5, r6, pc}

080097a0 <__match>:
 80097a0:	b530      	push	{r4, r5, lr}
 80097a2:	6803      	ldr	r3, [r0, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097aa:	b914      	cbnz	r4, 80097b2 <__match+0x12>
 80097ac:	6003      	str	r3, [r0, #0]
 80097ae:	2001      	movs	r0, #1
 80097b0:	bd30      	pop	{r4, r5, pc}
 80097b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097ba:	2d19      	cmp	r5, #25
 80097bc:	bf98      	it	ls
 80097be:	3220      	addls	r2, #32
 80097c0:	42a2      	cmp	r2, r4
 80097c2:	d0f0      	beq.n	80097a6 <__match+0x6>
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7f3      	b.n	80097b0 <__match+0x10>

080097c8 <__hexnan>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	680b      	ldr	r3, [r1, #0]
 80097ce:	115e      	asrs	r6, r3, #5
 80097d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097d4:	f013 031f 	ands.w	r3, r3, #31
 80097d8:	b087      	sub	sp, #28
 80097da:	bf18      	it	ne
 80097dc:	3604      	addne	r6, #4
 80097de:	2500      	movs	r5, #0
 80097e0:	1f37      	subs	r7, r6, #4
 80097e2:	4690      	mov	r8, r2
 80097e4:	6802      	ldr	r2, [r0, #0]
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	4682      	mov	sl, r0
 80097ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80097ee:	46b9      	mov	r9, r7
 80097f0:	463c      	mov	r4, r7
 80097f2:	9502      	str	r5, [sp, #8]
 80097f4:	46ab      	mov	fp, r5
 80097f6:	7851      	ldrb	r1, [r2, #1]
 80097f8:	1c53      	adds	r3, r2, #1
 80097fa:	9303      	str	r3, [sp, #12]
 80097fc:	b341      	cbz	r1, 8009850 <__hexnan+0x88>
 80097fe:	4608      	mov	r0, r1
 8009800:	9205      	str	r2, [sp, #20]
 8009802:	9104      	str	r1, [sp, #16]
 8009804:	f7ff fd5e 	bl	80092c4 <__hexdig_fun>
 8009808:	2800      	cmp	r0, #0
 800980a:	d14f      	bne.n	80098ac <__hexnan+0xe4>
 800980c:	9904      	ldr	r1, [sp, #16]
 800980e:	9a05      	ldr	r2, [sp, #20]
 8009810:	2920      	cmp	r1, #32
 8009812:	d818      	bhi.n	8009846 <__hexnan+0x7e>
 8009814:	9b02      	ldr	r3, [sp, #8]
 8009816:	459b      	cmp	fp, r3
 8009818:	dd13      	ble.n	8009842 <__hexnan+0x7a>
 800981a:	454c      	cmp	r4, r9
 800981c:	d206      	bcs.n	800982c <__hexnan+0x64>
 800981e:	2d07      	cmp	r5, #7
 8009820:	dc04      	bgt.n	800982c <__hexnan+0x64>
 8009822:	462a      	mov	r2, r5
 8009824:	4649      	mov	r1, r9
 8009826:	4620      	mov	r0, r4
 8009828:	f7ff ffa8 	bl	800977c <L_shift>
 800982c:	4544      	cmp	r4, r8
 800982e:	d950      	bls.n	80098d2 <__hexnan+0x10a>
 8009830:	2300      	movs	r3, #0
 8009832:	f1a4 0904 	sub.w	r9, r4, #4
 8009836:	f844 3c04 	str.w	r3, [r4, #-4]
 800983a:	f8cd b008 	str.w	fp, [sp, #8]
 800983e:	464c      	mov	r4, r9
 8009840:	461d      	mov	r5, r3
 8009842:	9a03      	ldr	r2, [sp, #12]
 8009844:	e7d7      	b.n	80097f6 <__hexnan+0x2e>
 8009846:	2929      	cmp	r1, #41	; 0x29
 8009848:	d156      	bne.n	80098f8 <__hexnan+0x130>
 800984a:	3202      	adds	r2, #2
 800984c:	f8ca 2000 	str.w	r2, [sl]
 8009850:	f1bb 0f00 	cmp.w	fp, #0
 8009854:	d050      	beq.n	80098f8 <__hexnan+0x130>
 8009856:	454c      	cmp	r4, r9
 8009858:	d206      	bcs.n	8009868 <__hexnan+0xa0>
 800985a:	2d07      	cmp	r5, #7
 800985c:	dc04      	bgt.n	8009868 <__hexnan+0xa0>
 800985e:	462a      	mov	r2, r5
 8009860:	4649      	mov	r1, r9
 8009862:	4620      	mov	r0, r4
 8009864:	f7ff ff8a 	bl	800977c <L_shift>
 8009868:	4544      	cmp	r4, r8
 800986a:	d934      	bls.n	80098d6 <__hexnan+0x10e>
 800986c:	f1a8 0204 	sub.w	r2, r8, #4
 8009870:	4623      	mov	r3, r4
 8009872:	f853 1b04 	ldr.w	r1, [r3], #4
 8009876:	f842 1f04 	str.w	r1, [r2, #4]!
 800987a:	429f      	cmp	r7, r3
 800987c:	d2f9      	bcs.n	8009872 <__hexnan+0xaa>
 800987e:	1b3b      	subs	r3, r7, r4
 8009880:	f023 0303 	bic.w	r3, r3, #3
 8009884:	3304      	adds	r3, #4
 8009886:	3401      	adds	r4, #1
 8009888:	3e03      	subs	r6, #3
 800988a:	42b4      	cmp	r4, r6
 800988c:	bf88      	it	hi
 800988e:	2304      	movhi	r3, #4
 8009890:	4443      	add	r3, r8
 8009892:	2200      	movs	r2, #0
 8009894:	f843 2b04 	str.w	r2, [r3], #4
 8009898:	429f      	cmp	r7, r3
 800989a:	d2fb      	bcs.n	8009894 <__hexnan+0xcc>
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	b91b      	cbnz	r3, 80098a8 <__hexnan+0xe0>
 80098a0:	4547      	cmp	r7, r8
 80098a2:	d127      	bne.n	80098f4 <__hexnan+0x12c>
 80098a4:	2301      	movs	r3, #1
 80098a6:	603b      	str	r3, [r7, #0]
 80098a8:	2005      	movs	r0, #5
 80098aa:	e026      	b.n	80098fa <__hexnan+0x132>
 80098ac:	3501      	adds	r5, #1
 80098ae:	2d08      	cmp	r5, #8
 80098b0:	f10b 0b01 	add.w	fp, fp, #1
 80098b4:	dd06      	ble.n	80098c4 <__hexnan+0xfc>
 80098b6:	4544      	cmp	r4, r8
 80098b8:	d9c3      	bls.n	8009842 <__hexnan+0x7a>
 80098ba:	2300      	movs	r3, #0
 80098bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80098c0:	2501      	movs	r5, #1
 80098c2:	3c04      	subs	r4, #4
 80098c4:	6822      	ldr	r2, [r4, #0]
 80098c6:	f000 000f 	and.w	r0, r0, #15
 80098ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80098ce:	6022      	str	r2, [r4, #0]
 80098d0:	e7b7      	b.n	8009842 <__hexnan+0x7a>
 80098d2:	2508      	movs	r5, #8
 80098d4:	e7b5      	b.n	8009842 <__hexnan+0x7a>
 80098d6:	9b01      	ldr	r3, [sp, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d0df      	beq.n	800989c <__hexnan+0xd4>
 80098dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098e0:	f1c3 0320 	rsb	r3, r3, #32
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
 80098e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098ec:	401a      	ands	r2, r3
 80098ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80098f2:	e7d3      	b.n	800989c <__hexnan+0xd4>
 80098f4:	3f04      	subs	r7, #4
 80098f6:	e7d1      	b.n	800989c <__hexnan+0xd4>
 80098f8:	2004      	movs	r0, #4
 80098fa:	b007      	add	sp, #28
 80098fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009900 <_localeconv_r>:
 8009900:	4800      	ldr	r0, [pc, #0]	; (8009904 <_localeconv_r+0x4>)
 8009902:	4770      	bx	lr
 8009904:	20000174 	.word	0x20000174

08009908 <__retarget_lock_init_recursive>:
 8009908:	4770      	bx	lr

0800990a <__retarget_lock_acquire_recursive>:
 800990a:	4770      	bx	lr

0800990c <__retarget_lock_release_recursive>:
 800990c:	4770      	bx	lr

0800990e <__swhatbuf_r>:
 800990e:	b570      	push	{r4, r5, r6, lr}
 8009910:	460e      	mov	r6, r1
 8009912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009916:	2900      	cmp	r1, #0
 8009918:	b096      	sub	sp, #88	; 0x58
 800991a:	4614      	mov	r4, r2
 800991c:	461d      	mov	r5, r3
 800991e:	da08      	bge.n	8009932 <__swhatbuf_r+0x24>
 8009920:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	602a      	str	r2, [r5, #0]
 8009928:	061a      	lsls	r2, r3, #24
 800992a:	d410      	bmi.n	800994e <__swhatbuf_r+0x40>
 800992c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009930:	e00e      	b.n	8009950 <__swhatbuf_r+0x42>
 8009932:	466a      	mov	r2, sp
 8009934:	f001 fff2 	bl	800b91c <_fstat_r>
 8009938:	2800      	cmp	r0, #0
 800993a:	dbf1      	blt.n	8009920 <__swhatbuf_r+0x12>
 800993c:	9a01      	ldr	r2, [sp, #4]
 800993e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009946:	425a      	negs	r2, r3
 8009948:	415a      	adcs	r2, r3
 800994a:	602a      	str	r2, [r5, #0]
 800994c:	e7ee      	b.n	800992c <__swhatbuf_r+0x1e>
 800994e:	2340      	movs	r3, #64	; 0x40
 8009950:	2000      	movs	r0, #0
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	b016      	add	sp, #88	; 0x58
 8009956:	bd70      	pop	{r4, r5, r6, pc}

08009958 <__smakebuf_r>:
 8009958:	898b      	ldrh	r3, [r1, #12]
 800995a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800995c:	079d      	lsls	r5, r3, #30
 800995e:	4606      	mov	r6, r0
 8009960:	460c      	mov	r4, r1
 8009962:	d507      	bpl.n	8009974 <__smakebuf_r+0x1c>
 8009964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009968:	6023      	str	r3, [r4, #0]
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	2301      	movs	r3, #1
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	b002      	add	sp, #8
 8009972:	bd70      	pop	{r4, r5, r6, pc}
 8009974:	ab01      	add	r3, sp, #4
 8009976:	466a      	mov	r2, sp
 8009978:	f7ff ffc9 	bl	800990e <__swhatbuf_r>
 800997c:	9900      	ldr	r1, [sp, #0]
 800997e:	4605      	mov	r5, r0
 8009980:	4630      	mov	r0, r6
 8009982:	f000 fd95 	bl	800a4b0 <_malloc_r>
 8009986:	b948      	cbnz	r0, 800999c <__smakebuf_r+0x44>
 8009988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800998c:	059a      	lsls	r2, r3, #22
 800998e:	d4ef      	bmi.n	8009970 <__smakebuf_r+0x18>
 8009990:	f023 0303 	bic.w	r3, r3, #3
 8009994:	f043 0302 	orr.w	r3, r3, #2
 8009998:	81a3      	strh	r3, [r4, #12]
 800999a:	e7e3      	b.n	8009964 <__smakebuf_r+0xc>
 800999c:	4b0d      	ldr	r3, [pc, #52]	; (80099d4 <__smakebuf_r+0x7c>)
 800999e:	62b3      	str	r3, [r6, #40]	; 0x28
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	6020      	str	r0, [r4, #0]
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	6163      	str	r3, [r4, #20]
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	6120      	str	r0, [r4, #16]
 80099b2:	b15b      	cbz	r3, 80099cc <__smakebuf_r+0x74>
 80099b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b8:	4630      	mov	r0, r6
 80099ba:	f001 ffc1 	bl	800b940 <_isatty_r>
 80099be:	b128      	cbz	r0, 80099cc <__smakebuf_r+0x74>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f023 0303 	bic.w	r3, r3, #3
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	89a0      	ldrh	r0, [r4, #12]
 80099ce:	4305      	orrs	r5, r0
 80099d0:	81a5      	strh	r5, [r4, #12]
 80099d2:	e7cd      	b.n	8009970 <__smakebuf_r+0x18>
 80099d4:	08009045 	.word	0x08009045

080099d8 <malloc>:
 80099d8:	4b02      	ldr	r3, [pc, #8]	; (80099e4 <malloc+0xc>)
 80099da:	4601      	mov	r1, r0
 80099dc:	6818      	ldr	r0, [r3, #0]
 80099de:	f000 bd67 	b.w	800a4b0 <_malloc_r>
 80099e2:	bf00      	nop
 80099e4:	2000001c 	.word	0x2000001c

080099e8 <__ascii_mbtowc>:
 80099e8:	b082      	sub	sp, #8
 80099ea:	b901      	cbnz	r1, 80099ee <__ascii_mbtowc+0x6>
 80099ec:	a901      	add	r1, sp, #4
 80099ee:	b142      	cbz	r2, 8009a02 <__ascii_mbtowc+0x1a>
 80099f0:	b14b      	cbz	r3, 8009a06 <__ascii_mbtowc+0x1e>
 80099f2:	7813      	ldrb	r3, [r2, #0]
 80099f4:	600b      	str	r3, [r1, #0]
 80099f6:	7812      	ldrb	r2, [r2, #0]
 80099f8:	1e10      	subs	r0, r2, #0
 80099fa:	bf18      	it	ne
 80099fc:	2001      	movne	r0, #1
 80099fe:	b002      	add	sp, #8
 8009a00:	4770      	bx	lr
 8009a02:	4610      	mov	r0, r2
 8009a04:	e7fb      	b.n	80099fe <__ascii_mbtowc+0x16>
 8009a06:	f06f 0001 	mvn.w	r0, #1
 8009a0a:	e7f8      	b.n	80099fe <__ascii_mbtowc+0x16>

08009a0c <memcpy>:
 8009a0c:	440a      	add	r2, r1
 8009a0e:	4291      	cmp	r1, r2
 8009a10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009a14:	d100      	bne.n	8009a18 <memcpy+0xc>
 8009a16:	4770      	bx	lr
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a22:	4291      	cmp	r1, r2
 8009a24:	d1f9      	bne.n	8009a1a <memcpy+0xe>
 8009a26:	bd10      	pop	{r4, pc}

08009a28 <_Balloc>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	b976      	cbnz	r6, 8009a50 <_Balloc+0x28>
 8009a32:	2010      	movs	r0, #16
 8009a34:	f7ff ffd0 	bl	80099d8 <malloc>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6260      	str	r0, [r4, #36]	; 0x24
 8009a3c:	b920      	cbnz	r0, 8009a48 <_Balloc+0x20>
 8009a3e:	4b18      	ldr	r3, [pc, #96]	; (8009aa0 <_Balloc+0x78>)
 8009a40:	4818      	ldr	r0, [pc, #96]	; (8009aa4 <_Balloc+0x7c>)
 8009a42:	2166      	movs	r1, #102	; 0x66
 8009a44:	f001 ff2a 	bl	800b89c <__assert_func>
 8009a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a4c:	6006      	str	r6, [r0, #0]
 8009a4e:	60c6      	str	r6, [r0, #12]
 8009a50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a52:	68f3      	ldr	r3, [r6, #12]
 8009a54:	b183      	cbz	r3, 8009a78 <_Balloc+0x50>
 8009a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a5e:	b9b8      	cbnz	r0, 8009a90 <_Balloc+0x68>
 8009a60:	2101      	movs	r1, #1
 8009a62:	fa01 f605 	lsl.w	r6, r1, r5
 8009a66:	1d72      	adds	r2, r6, #5
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 fc9d 	bl	800a3aa <_calloc_r>
 8009a70:	b160      	cbz	r0, 8009a8c <_Balloc+0x64>
 8009a72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a76:	e00e      	b.n	8009a96 <_Balloc+0x6e>
 8009a78:	2221      	movs	r2, #33	; 0x21
 8009a7a:	2104      	movs	r1, #4
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 fc94 	bl	800a3aa <_calloc_r>
 8009a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a84:	60f0      	str	r0, [r6, #12]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e4      	bne.n	8009a56 <_Balloc+0x2e>
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	bd70      	pop	{r4, r5, r6, pc}
 8009a90:	6802      	ldr	r2, [r0, #0]
 8009a92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a96:	2300      	movs	r3, #0
 8009a98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a9c:	e7f7      	b.n	8009a8e <_Balloc+0x66>
 8009a9e:	bf00      	nop
 8009aa0:	0800c6de 	.word	0x0800c6de
 8009aa4:	0800c840 	.word	0x0800c840

08009aa8 <_Bfree>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009aac:	4605      	mov	r5, r0
 8009aae:	460c      	mov	r4, r1
 8009ab0:	b976      	cbnz	r6, 8009ad0 <_Bfree+0x28>
 8009ab2:	2010      	movs	r0, #16
 8009ab4:	f7ff ff90 	bl	80099d8 <malloc>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	6268      	str	r0, [r5, #36]	; 0x24
 8009abc:	b920      	cbnz	r0, 8009ac8 <_Bfree+0x20>
 8009abe:	4b09      	ldr	r3, [pc, #36]	; (8009ae4 <_Bfree+0x3c>)
 8009ac0:	4809      	ldr	r0, [pc, #36]	; (8009ae8 <_Bfree+0x40>)
 8009ac2:	218a      	movs	r1, #138	; 0x8a
 8009ac4:	f001 feea 	bl	800b89c <__assert_func>
 8009ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009acc:	6006      	str	r6, [r0, #0]
 8009ace:	60c6      	str	r6, [r0, #12]
 8009ad0:	b13c      	cbz	r4, 8009ae2 <_Bfree+0x3a>
 8009ad2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ad4:	6862      	ldr	r2, [r4, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009adc:	6021      	str	r1, [r4, #0]
 8009ade:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ae2:	bd70      	pop	{r4, r5, r6, pc}
 8009ae4:	0800c6de 	.word	0x0800c6de
 8009ae8:	0800c840 	.word	0x0800c840

08009aec <__multadd>:
 8009aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af0:	690d      	ldr	r5, [r1, #16]
 8009af2:	4607      	mov	r7, r0
 8009af4:	460c      	mov	r4, r1
 8009af6:	461e      	mov	r6, r3
 8009af8:	f101 0c14 	add.w	ip, r1, #20
 8009afc:	2000      	movs	r0, #0
 8009afe:	f8dc 3000 	ldr.w	r3, [ip]
 8009b02:	b299      	uxth	r1, r3
 8009b04:	fb02 6101 	mla	r1, r2, r1, r6
 8009b08:	0c1e      	lsrs	r6, r3, #16
 8009b0a:	0c0b      	lsrs	r3, r1, #16
 8009b0c:	fb02 3306 	mla	r3, r2, r6, r3
 8009b10:	b289      	uxth	r1, r1
 8009b12:	3001      	adds	r0, #1
 8009b14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b18:	4285      	cmp	r5, r0
 8009b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b22:	dcec      	bgt.n	8009afe <__multadd+0x12>
 8009b24:	b30e      	cbz	r6, 8009b6a <__multadd+0x7e>
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	dc19      	bgt.n	8009b60 <__multadd+0x74>
 8009b2c:	6861      	ldr	r1, [r4, #4]
 8009b2e:	4638      	mov	r0, r7
 8009b30:	3101      	adds	r1, #1
 8009b32:	f7ff ff79 	bl	8009a28 <_Balloc>
 8009b36:	4680      	mov	r8, r0
 8009b38:	b928      	cbnz	r0, 8009b46 <__multadd+0x5a>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <__multadd+0x84>)
 8009b3e:	480d      	ldr	r0, [pc, #52]	; (8009b74 <__multadd+0x88>)
 8009b40:	21b5      	movs	r1, #181	; 0xb5
 8009b42:	f001 feab 	bl	800b89c <__assert_func>
 8009b46:	6922      	ldr	r2, [r4, #16]
 8009b48:	3202      	adds	r2, #2
 8009b4a:	f104 010c 	add.w	r1, r4, #12
 8009b4e:	0092      	lsls	r2, r2, #2
 8009b50:	300c      	adds	r0, #12
 8009b52:	f7ff ff5b 	bl	8009a0c <memcpy>
 8009b56:	4621      	mov	r1, r4
 8009b58:	4638      	mov	r0, r7
 8009b5a:	f7ff ffa5 	bl	8009aa8 <_Bfree>
 8009b5e:	4644      	mov	r4, r8
 8009b60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b64:	3501      	adds	r5, #1
 8009b66:	615e      	str	r6, [r3, #20]
 8009b68:	6125      	str	r5, [r4, #16]
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	0800c750 	.word	0x0800c750
 8009b74:	0800c840 	.word	0x0800c840

08009b78 <__s2b>:
 8009b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	4615      	mov	r5, r2
 8009b80:	461f      	mov	r7, r3
 8009b82:	2209      	movs	r2, #9
 8009b84:	3308      	adds	r3, #8
 8009b86:	4606      	mov	r6, r0
 8009b88:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b8c:	2100      	movs	r1, #0
 8009b8e:	2201      	movs	r2, #1
 8009b90:	429a      	cmp	r2, r3
 8009b92:	db09      	blt.n	8009ba8 <__s2b+0x30>
 8009b94:	4630      	mov	r0, r6
 8009b96:	f7ff ff47 	bl	8009a28 <_Balloc>
 8009b9a:	b940      	cbnz	r0, 8009bae <__s2b+0x36>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	4b19      	ldr	r3, [pc, #100]	; (8009c04 <__s2b+0x8c>)
 8009ba0:	4819      	ldr	r0, [pc, #100]	; (8009c08 <__s2b+0x90>)
 8009ba2:	21ce      	movs	r1, #206	; 0xce
 8009ba4:	f001 fe7a 	bl	800b89c <__assert_func>
 8009ba8:	0052      	lsls	r2, r2, #1
 8009baa:	3101      	adds	r1, #1
 8009bac:	e7f0      	b.n	8009b90 <__s2b+0x18>
 8009bae:	9b08      	ldr	r3, [sp, #32]
 8009bb0:	6143      	str	r3, [r0, #20]
 8009bb2:	2d09      	cmp	r5, #9
 8009bb4:	f04f 0301 	mov.w	r3, #1
 8009bb8:	6103      	str	r3, [r0, #16]
 8009bba:	dd16      	ble.n	8009bea <__s2b+0x72>
 8009bbc:	f104 0909 	add.w	r9, r4, #9
 8009bc0:	46c8      	mov	r8, r9
 8009bc2:	442c      	add	r4, r5
 8009bc4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bc8:	4601      	mov	r1, r0
 8009bca:	3b30      	subs	r3, #48	; 0x30
 8009bcc:	220a      	movs	r2, #10
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ff8c 	bl	8009aec <__multadd>
 8009bd4:	45a0      	cmp	r8, r4
 8009bd6:	d1f5      	bne.n	8009bc4 <__s2b+0x4c>
 8009bd8:	f1a5 0408 	sub.w	r4, r5, #8
 8009bdc:	444c      	add	r4, r9
 8009bde:	1b2d      	subs	r5, r5, r4
 8009be0:	1963      	adds	r3, r4, r5
 8009be2:	42bb      	cmp	r3, r7
 8009be4:	db04      	blt.n	8009bf0 <__s2b+0x78>
 8009be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bea:	340a      	adds	r4, #10
 8009bec:	2509      	movs	r5, #9
 8009bee:	e7f6      	b.n	8009bde <__s2b+0x66>
 8009bf0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bf4:	4601      	mov	r1, r0
 8009bf6:	3b30      	subs	r3, #48	; 0x30
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	f7ff ff76 	bl	8009aec <__multadd>
 8009c00:	e7ee      	b.n	8009be0 <__s2b+0x68>
 8009c02:	bf00      	nop
 8009c04:	0800c750 	.word	0x0800c750
 8009c08:	0800c840 	.word	0x0800c840

08009c0c <__hi0bits>:
 8009c0c:	0c03      	lsrs	r3, r0, #16
 8009c0e:	041b      	lsls	r3, r3, #16
 8009c10:	b9d3      	cbnz	r3, 8009c48 <__hi0bits+0x3c>
 8009c12:	0400      	lsls	r0, r0, #16
 8009c14:	2310      	movs	r3, #16
 8009c16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c1a:	bf04      	itt	eq
 8009c1c:	0200      	lsleq	r0, r0, #8
 8009c1e:	3308      	addeq	r3, #8
 8009c20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c24:	bf04      	itt	eq
 8009c26:	0100      	lsleq	r0, r0, #4
 8009c28:	3304      	addeq	r3, #4
 8009c2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c2e:	bf04      	itt	eq
 8009c30:	0080      	lsleq	r0, r0, #2
 8009c32:	3302      	addeq	r3, #2
 8009c34:	2800      	cmp	r0, #0
 8009c36:	db05      	blt.n	8009c44 <__hi0bits+0x38>
 8009c38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c3c:	f103 0301 	add.w	r3, r3, #1
 8009c40:	bf08      	it	eq
 8009c42:	2320      	moveq	r3, #32
 8009c44:	4618      	mov	r0, r3
 8009c46:	4770      	bx	lr
 8009c48:	2300      	movs	r3, #0
 8009c4a:	e7e4      	b.n	8009c16 <__hi0bits+0xa>

08009c4c <__lo0bits>:
 8009c4c:	6803      	ldr	r3, [r0, #0]
 8009c4e:	f013 0207 	ands.w	r2, r3, #7
 8009c52:	4601      	mov	r1, r0
 8009c54:	d00b      	beq.n	8009c6e <__lo0bits+0x22>
 8009c56:	07da      	lsls	r2, r3, #31
 8009c58:	d423      	bmi.n	8009ca2 <__lo0bits+0x56>
 8009c5a:	0798      	lsls	r0, r3, #30
 8009c5c:	bf49      	itett	mi
 8009c5e:	085b      	lsrmi	r3, r3, #1
 8009c60:	089b      	lsrpl	r3, r3, #2
 8009c62:	2001      	movmi	r0, #1
 8009c64:	600b      	strmi	r3, [r1, #0]
 8009c66:	bf5c      	itt	pl
 8009c68:	600b      	strpl	r3, [r1, #0]
 8009c6a:	2002      	movpl	r0, #2
 8009c6c:	4770      	bx	lr
 8009c6e:	b298      	uxth	r0, r3
 8009c70:	b9a8      	cbnz	r0, 8009c9e <__lo0bits+0x52>
 8009c72:	0c1b      	lsrs	r3, r3, #16
 8009c74:	2010      	movs	r0, #16
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	b90a      	cbnz	r2, 8009c7e <__lo0bits+0x32>
 8009c7a:	3008      	adds	r0, #8
 8009c7c:	0a1b      	lsrs	r3, r3, #8
 8009c7e:	071a      	lsls	r2, r3, #28
 8009c80:	bf04      	itt	eq
 8009c82:	091b      	lsreq	r3, r3, #4
 8009c84:	3004      	addeq	r0, #4
 8009c86:	079a      	lsls	r2, r3, #30
 8009c88:	bf04      	itt	eq
 8009c8a:	089b      	lsreq	r3, r3, #2
 8009c8c:	3002      	addeq	r0, #2
 8009c8e:	07da      	lsls	r2, r3, #31
 8009c90:	d403      	bmi.n	8009c9a <__lo0bits+0x4e>
 8009c92:	085b      	lsrs	r3, r3, #1
 8009c94:	f100 0001 	add.w	r0, r0, #1
 8009c98:	d005      	beq.n	8009ca6 <__lo0bits+0x5a>
 8009c9a:	600b      	str	r3, [r1, #0]
 8009c9c:	4770      	bx	lr
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	e7e9      	b.n	8009c76 <__lo0bits+0x2a>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	4770      	bx	lr
 8009ca6:	2020      	movs	r0, #32
 8009ca8:	4770      	bx	lr
	...

08009cac <__i2b>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	460c      	mov	r4, r1
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	f7ff feb9 	bl	8009a28 <_Balloc>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	b928      	cbnz	r0, 8009cc6 <__i2b+0x1a>
 8009cba:	4b05      	ldr	r3, [pc, #20]	; (8009cd0 <__i2b+0x24>)
 8009cbc:	4805      	ldr	r0, [pc, #20]	; (8009cd4 <__i2b+0x28>)
 8009cbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009cc2:	f001 fdeb 	bl	800b89c <__assert_func>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	6144      	str	r4, [r0, #20]
 8009cca:	6103      	str	r3, [r0, #16]
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	0800c750 	.word	0x0800c750
 8009cd4:	0800c840 	.word	0x0800c840

08009cd8 <__multiply>:
 8009cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	4691      	mov	r9, r2
 8009cde:	690a      	ldr	r2, [r1, #16]
 8009ce0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	bfb8      	it	lt
 8009ce8:	460b      	movlt	r3, r1
 8009cea:	460c      	mov	r4, r1
 8009cec:	bfbc      	itt	lt
 8009cee:	464c      	movlt	r4, r9
 8009cf0:	4699      	movlt	r9, r3
 8009cf2:	6927      	ldr	r7, [r4, #16]
 8009cf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cf8:	68a3      	ldr	r3, [r4, #8]
 8009cfa:	6861      	ldr	r1, [r4, #4]
 8009cfc:	eb07 060a 	add.w	r6, r7, sl
 8009d00:	42b3      	cmp	r3, r6
 8009d02:	b085      	sub	sp, #20
 8009d04:	bfb8      	it	lt
 8009d06:	3101      	addlt	r1, #1
 8009d08:	f7ff fe8e 	bl	8009a28 <_Balloc>
 8009d0c:	b930      	cbnz	r0, 8009d1c <__multiply+0x44>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	4b44      	ldr	r3, [pc, #272]	; (8009e24 <__multiply+0x14c>)
 8009d12:	4845      	ldr	r0, [pc, #276]	; (8009e28 <__multiply+0x150>)
 8009d14:	f240 115d 	movw	r1, #349	; 0x15d
 8009d18:	f001 fdc0 	bl	800b89c <__assert_func>
 8009d1c:	f100 0514 	add.w	r5, r0, #20
 8009d20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d24:	462b      	mov	r3, r5
 8009d26:	2200      	movs	r2, #0
 8009d28:	4543      	cmp	r3, r8
 8009d2a:	d321      	bcc.n	8009d70 <__multiply+0x98>
 8009d2c:	f104 0314 	add.w	r3, r4, #20
 8009d30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d34:	f109 0314 	add.w	r3, r9, #20
 8009d38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d3c:	9202      	str	r2, [sp, #8]
 8009d3e:	1b3a      	subs	r2, r7, r4
 8009d40:	3a15      	subs	r2, #21
 8009d42:	f022 0203 	bic.w	r2, r2, #3
 8009d46:	3204      	adds	r2, #4
 8009d48:	f104 0115 	add.w	r1, r4, #21
 8009d4c:	428f      	cmp	r7, r1
 8009d4e:	bf38      	it	cc
 8009d50:	2204      	movcc	r2, #4
 8009d52:	9201      	str	r2, [sp, #4]
 8009d54:	9a02      	ldr	r2, [sp, #8]
 8009d56:	9303      	str	r3, [sp, #12]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d80c      	bhi.n	8009d76 <__multiply+0x9e>
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	dd03      	ble.n	8009d68 <__multiply+0x90>
 8009d60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d05a      	beq.n	8009e1e <__multiply+0x146>
 8009d68:	6106      	str	r6, [r0, #16]
 8009d6a:	b005      	add	sp, #20
 8009d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d70:	f843 2b04 	str.w	r2, [r3], #4
 8009d74:	e7d8      	b.n	8009d28 <__multiply+0x50>
 8009d76:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d7a:	f1ba 0f00 	cmp.w	sl, #0
 8009d7e:	d024      	beq.n	8009dca <__multiply+0xf2>
 8009d80:	f104 0e14 	add.w	lr, r4, #20
 8009d84:	46a9      	mov	r9, r5
 8009d86:	f04f 0c00 	mov.w	ip, #0
 8009d8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d8e:	f8d9 1000 	ldr.w	r1, [r9]
 8009d92:	fa1f fb82 	uxth.w	fp, r2
 8009d96:	b289      	uxth	r1, r1
 8009d98:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009da0:	f8d9 2000 	ldr.w	r2, [r9]
 8009da4:	4461      	add	r1, ip
 8009da6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009daa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009db2:	b289      	uxth	r1, r1
 8009db4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009db8:	4577      	cmp	r7, lr
 8009dba:	f849 1b04 	str.w	r1, [r9], #4
 8009dbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dc2:	d8e2      	bhi.n	8009d8a <__multiply+0xb2>
 8009dc4:	9a01      	ldr	r2, [sp, #4]
 8009dc6:	f845 c002 	str.w	ip, [r5, r2]
 8009dca:	9a03      	ldr	r2, [sp, #12]
 8009dcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	f1b9 0f00 	cmp.w	r9, #0
 8009dd6:	d020      	beq.n	8009e1a <__multiply+0x142>
 8009dd8:	6829      	ldr	r1, [r5, #0]
 8009dda:	f104 0c14 	add.w	ip, r4, #20
 8009dde:	46ae      	mov	lr, r5
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	f8bc b000 	ldrh.w	fp, [ip]
 8009de8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dec:	fb09 220b 	mla	r2, r9, fp, r2
 8009df0:	4492      	add	sl, r2
 8009df2:	b289      	uxth	r1, r1
 8009df4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009df8:	f84e 1b04 	str.w	r1, [lr], #4
 8009dfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e00:	f8be 1000 	ldrh.w	r1, [lr]
 8009e04:	0c12      	lsrs	r2, r2, #16
 8009e06:	fb09 1102 	mla	r1, r9, r2, r1
 8009e0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009e0e:	4567      	cmp	r7, ip
 8009e10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e14:	d8e6      	bhi.n	8009de4 <__multiply+0x10c>
 8009e16:	9a01      	ldr	r2, [sp, #4]
 8009e18:	50a9      	str	r1, [r5, r2]
 8009e1a:	3504      	adds	r5, #4
 8009e1c:	e79a      	b.n	8009d54 <__multiply+0x7c>
 8009e1e:	3e01      	subs	r6, #1
 8009e20:	e79c      	b.n	8009d5c <__multiply+0x84>
 8009e22:	bf00      	nop
 8009e24:	0800c750 	.word	0x0800c750
 8009e28:	0800c840 	.word	0x0800c840

08009e2c <__pow5mult>:
 8009e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e30:	4615      	mov	r5, r2
 8009e32:	f012 0203 	ands.w	r2, r2, #3
 8009e36:	4606      	mov	r6, r0
 8009e38:	460f      	mov	r7, r1
 8009e3a:	d007      	beq.n	8009e4c <__pow5mult+0x20>
 8009e3c:	4c25      	ldr	r4, [pc, #148]	; (8009ed4 <__pow5mult+0xa8>)
 8009e3e:	3a01      	subs	r2, #1
 8009e40:	2300      	movs	r3, #0
 8009e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e46:	f7ff fe51 	bl	8009aec <__multadd>
 8009e4a:	4607      	mov	r7, r0
 8009e4c:	10ad      	asrs	r5, r5, #2
 8009e4e:	d03d      	beq.n	8009ecc <__pow5mult+0xa0>
 8009e50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e52:	b97c      	cbnz	r4, 8009e74 <__pow5mult+0x48>
 8009e54:	2010      	movs	r0, #16
 8009e56:	f7ff fdbf 	bl	80099d8 <malloc>
 8009e5a:	4602      	mov	r2, r0
 8009e5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009e5e:	b928      	cbnz	r0, 8009e6c <__pow5mult+0x40>
 8009e60:	4b1d      	ldr	r3, [pc, #116]	; (8009ed8 <__pow5mult+0xac>)
 8009e62:	481e      	ldr	r0, [pc, #120]	; (8009edc <__pow5mult+0xb0>)
 8009e64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e68:	f001 fd18 	bl	800b89c <__assert_func>
 8009e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e70:	6004      	str	r4, [r0, #0]
 8009e72:	60c4      	str	r4, [r0, #12]
 8009e74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e7c:	b94c      	cbnz	r4, 8009e92 <__pow5mult+0x66>
 8009e7e:	f240 2171 	movw	r1, #625	; 0x271
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ff12 	bl	8009cac <__i2b>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e8e:	4604      	mov	r4, r0
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	f04f 0900 	mov.w	r9, #0
 8009e96:	07eb      	lsls	r3, r5, #31
 8009e98:	d50a      	bpl.n	8009eb0 <__pow5mult+0x84>
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f7ff ff1a 	bl	8009cd8 <__multiply>
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f7ff fdfd 	bl	8009aa8 <_Bfree>
 8009eae:	4647      	mov	r7, r8
 8009eb0:	106d      	asrs	r5, r5, #1
 8009eb2:	d00b      	beq.n	8009ecc <__pow5mult+0xa0>
 8009eb4:	6820      	ldr	r0, [r4, #0]
 8009eb6:	b938      	cbnz	r0, 8009ec8 <__pow5mult+0x9c>
 8009eb8:	4622      	mov	r2, r4
 8009eba:	4621      	mov	r1, r4
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	f7ff ff0b 	bl	8009cd8 <__multiply>
 8009ec2:	6020      	str	r0, [r4, #0]
 8009ec4:	f8c0 9000 	str.w	r9, [r0]
 8009ec8:	4604      	mov	r4, r0
 8009eca:	e7e4      	b.n	8009e96 <__pow5mult+0x6a>
 8009ecc:	4638      	mov	r0, r7
 8009ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed2:	bf00      	nop
 8009ed4:	0800c990 	.word	0x0800c990
 8009ed8:	0800c6de 	.word	0x0800c6de
 8009edc:	0800c840 	.word	0x0800c840

08009ee0 <__lshift>:
 8009ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	6849      	ldr	r1, [r1, #4]
 8009ee8:	6923      	ldr	r3, [r4, #16]
 8009eea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009eee:	68a3      	ldr	r3, [r4, #8]
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	4691      	mov	r9, r2
 8009ef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ef8:	f108 0601 	add.w	r6, r8, #1
 8009efc:	42b3      	cmp	r3, r6
 8009efe:	db0b      	blt.n	8009f18 <__lshift+0x38>
 8009f00:	4638      	mov	r0, r7
 8009f02:	f7ff fd91 	bl	8009a28 <_Balloc>
 8009f06:	4605      	mov	r5, r0
 8009f08:	b948      	cbnz	r0, 8009f1e <__lshift+0x3e>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	4b2a      	ldr	r3, [pc, #168]	; (8009fb8 <__lshift+0xd8>)
 8009f0e:	482b      	ldr	r0, [pc, #172]	; (8009fbc <__lshift+0xdc>)
 8009f10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009f14:	f001 fcc2 	bl	800b89c <__assert_func>
 8009f18:	3101      	adds	r1, #1
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	e7ee      	b.n	8009efc <__lshift+0x1c>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	f100 0114 	add.w	r1, r0, #20
 8009f24:	f100 0210 	add.w	r2, r0, #16
 8009f28:	4618      	mov	r0, r3
 8009f2a:	4553      	cmp	r3, sl
 8009f2c:	db37      	blt.n	8009f9e <__lshift+0xbe>
 8009f2e:	6920      	ldr	r0, [r4, #16]
 8009f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f34:	f104 0314 	add.w	r3, r4, #20
 8009f38:	f019 091f 	ands.w	r9, r9, #31
 8009f3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f44:	d02f      	beq.n	8009fa6 <__lshift+0xc6>
 8009f46:	f1c9 0e20 	rsb	lr, r9, #32
 8009f4a:	468a      	mov	sl, r1
 8009f4c:	f04f 0c00 	mov.w	ip, #0
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	fa02 f209 	lsl.w	r2, r2, r9
 8009f56:	ea42 020c 	orr.w	r2, r2, ip
 8009f5a:	f84a 2b04 	str.w	r2, [sl], #4
 8009f5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f62:	4298      	cmp	r0, r3
 8009f64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f68:	d8f2      	bhi.n	8009f50 <__lshift+0x70>
 8009f6a:	1b03      	subs	r3, r0, r4
 8009f6c:	3b15      	subs	r3, #21
 8009f6e:	f023 0303 	bic.w	r3, r3, #3
 8009f72:	3304      	adds	r3, #4
 8009f74:	f104 0215 	add.w	r2, r4, #21
 8009f78:	4290      	cmp	r0, r2
 8009f7a:	bf38      	it	cc
 8009f7c:	2304      	movcc	r3, #4
 8009f7e:	f841 c003 	str.w	ip, [r1, r3]
 8009f82:	f1bc 0f00 	cmp.w	ip, #0
 8009f86:	d001      	beq.n	8009f8c <__lshift+0xac>
 8009f88:	f108 0602 	add.w	r6, r8, #2
 8009f8c:	3e01      	subs	r6, #1
 8009f8e:	4638      	mov	r0, r7
 8009f90:	612e      	str	r6, [r5, #16]
 8009f92:	4621      	mov	r1, r4
 8009f94:	f7ff fd88 	bl	8009aa8 <_Bfree>
 8009f98:	4628      	mov	r0, r5
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	e7c1      	b.n	8009f2a <__lshift+0x4a>
 8009fa6:	3904      	subs	r1, #4
 8009fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fb0:	4298      	cmp	r0, r3
 8009fb2:	d8f9      	bhi.n	8009fa8 <__lshift+0xc8>
 8009fb4:	e7ea      	b.n	8009f8c <__lshift+0xac>
 8009fb6:	bf00      	nop
 8009fb8:	0800c750 	.word	0x0800c750
 8009fbc:	0800c840 	.word	0x0800c840

08009fc0 <__mcmp>:
 8009fc0:	b530      	push	{r4, r5, lr}
 8009fc2:	6902      	ldr	r2, [r0, #16]
 8009fc4:	690c      	ldr	r4, [r1, #16]
 8009fc6:	1b12      	subs	r2, r2, r4
 8009fc8:	d10e      	bne.n	8009fe8 <__mcmp+0x28>
 8009fca:	f100 0314 	add.w	r3, r0, #20
 8009fce:	3114      	adds	r1, #20
 8009fd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fe0:	42a5      	cmp	r5, r4
 8009fe2:	d003      	beq.n	8009fec <__mcmp+0x2c>
 8009fe4:	d305      	bcc.n	8009ff2 <__mcmp+0x32>
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	4610      	mov	r0, r2
 8009fea:	bd30      	pop	{r4, r5, pc}
 8009fec:	4283      	cmp	r3, r0
 8009fee:	d3f3      	bcc.n	8009fd8 <__mcmp+0x18>
 8009ff0:	e7fa      	b.n	8009fe8 <__mcmp+0x28>
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ff6:	e7f7      	b.n	8009fe8 <__mcmp+0x28>

08009ff8 <__mdiff>:
 8009ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	4606      	mov	r6, r0
 800a000:	4611      	mov	r1, r2
 800a002:	4620      	mov	r0, r4
 800a004:	4690      	mov	r8, r2
 800a006:	f7ff ffdb 	bl	8009fc0 <__mcmp>
 800a00a:	1e05      	subs	r5, r0, #0
 800a00c:	d110      	bne.n	800a030 <__mdiff+0x38>
 800a00e:	4629      	mov	r1, r5
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff fd09 	bl	8009a28 <_Balloc>
 800a016:	b930      	cbnz	r0, 800a026 <__mdiff+0x2e>
 800a018:	4b3a      	ldr	r3, [pc, #232]	; (800a104 <__mdiff+0x10c>)
 800a01a:	4602      	mov	r2, r0
 800a01c:	f240 2132 	movw	r1, #562	; 0x232
 800a020:	4839      	ldr	r0, [pc, #228]	; (800a108 <__mdiff+0x110>)
 800a022:	f001 fc3b 	bl	800b89c <__assert_func>
 800a026:	2301      	movs	r3, #1
 800a028:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a02c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a030:	bfa4      	itt	ge
 800a032:	4643      	movge	r3, r8
 800a034:	46a0      	movge	r8, r4
 800a036:	4630      	mov	r0, r6
 800a038:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a03c:	bfa6      	itte	ge
 800a03e:	461c      	movge	r4, r3
 800a040:	2500      	movge	r5, #0
 800a042:	2501      	movlt	r5, #1
 800a044:	f7ff fcf0 	bl	8009a28 <_Balloc>
 800a048:	b920      	cbnz	r0, 800a054 <__mdiff+0x5c>
 800a04a:	4b2e      	ldr	r3, [pc, #184]	; (800a104 <__mdiff+0x10c>)
 800a04c:	4602      	mov	r2, r0
 800a04e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a052:	e7e5      	b.n	800a020 <__mdiff+0x28>
 800a054:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a058:	6926      	ldr	r6, [r4, #16]
 800a05a:	60c5      	str	r5, [r0, #12]
 800a05c:	f104 0914 	add.w	r9, r4, #20
 800a060:	f108 0514 	add.w	r5, r8, #20
 800a064:	f100 0e14 	add.w	lr, r0, #20
 800a068:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a06c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a070:	f108 0210 	add.w	r2, r8, #16
 800a074:	46f2      	mov	sl, lr
 800a076:	2100      	movs	r1, #0
 800a078:	f859 3b04 	ldr.w	r3, [r9], #4
 800a07c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a080:	fa1f f883 	uxth.w	r8, r3
 800a084:	fa11 f18b 	uxtah	r1, r1, fp
 800a088:	0c1b      	lsrs	r3, r3, #16
 800a08a:	eba1 0808 	sub.w	r8, r1, r8
 800a08e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a092:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a096:	fa1f f888 	uxth.w	r8, r8
 800a09a:	1419      	asrs	r1, r3, #16
 800a09c:	454e      	cmp	r6, r9
 800a09e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0a2:	f84a 3b04 	str.w	r3, [sl], #4
 800a0a6:	d8e7      	bhi.n	800a078 <__mdiff+0x80>
 800a0a8:	1b33      	subs	r3, r6, r4
 800a0aa:	3b15      	subs	r3, #21
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	3415      	adds	r4, #21
 800a0b4:	42a6      	cmp	r6, r4
 800a0b6:	bf38      	it	cc
 800a0b8:	2304      	movcc	r3, #4
 800a0ba:	441d      	add	r5, r3
 800a0bc:	4473      	add	r3, lr
 800a0be:	469e      	mov	lr, r3
 800a0c0:	462e      	mov	r6, r5
 800a0c2:	4566      	cmp	r6, ip
 800a0c4:	d30e      	bcc.n	800a0e4 <__mdiff+0xec>
 800a0c6:	f10c 0203 	add.w	r2, ip, #3
 800a0ca:	1b52      	subs	r2, r2, r5
 800a0cc:	f022 0203 	bic.w	r2, r2, #3
 800a0d0:	3d03      	subs	r5, #3
 800a0d2:	45ac      	cmp	ip, r5
 800a0d4:	bf38      	it	cc
 800a0d6:	2200      	movcc	r2, #0
 800a0d8:	441a      	add	r2, r3
 800a0da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a0de:	b17b      	cbz	r3, 800a100 <__mdiff+0x108>
 800a0e0:	6107      	str	r7, [r0, #16]
 800a0e2:	e7a3      	b.n	800a02c <__mdiff+0x34>
 800a0e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0e8:	fa11 f288 	uxtah	r2, r1, r8
 800a0ec:	1414      	asrs	r4, r2, #16
 800a0ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0f2:	b292      	uxth	r2, r2
 800a0f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0f8:	f84e 2b04 	str.w	r2, [lr], #4
 800a0fc:	1421      	asrs	r1, r4, #16
 800a0fe:	e7e0      	b.n	800a0c2 <__mdiff+0xca>
 800a100:	3f01      	subs	r7, #1
 800a102:	e7ea      	b.n	800a0da <__mdiff+0xe2>
 800a104:	0800c750 	.word	0x0800c750
 800a108:	0800c840 	.word	0x0800c840

0800a10c <__ulp>:
 800a10c:	b082      	sub	sp, #8
 800a10e:	ed8d 0b00 	vstr	d0, [sp]
 800a112:	9b01      	ldr	r3, [sp, #4]
 800a114:	4912      	ldr	r1, [pc, #72]	; (800a160 <__ulp+0x54>)
 800a116:	4019      	ands	r1, r3
 800a118:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a11c:	2900      	cmp	r1, #0
 800a11e:	dd05      	ble.n	800a12c <__ulp+0x20>
 800a120:	2200      	movs	r2, #0
 800a122:	460b      	mov	r3, r1
 800a124:	ec43 2b10 	vmov	d0, r2, r3
 800a128:	b002      	add	sp, #8
 800a12a:	4770      	bx	lr
 800a12c:	4249      	negs	r1, r1
 800a12e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a132:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a136:	f04f 0200 	mov.w	r2, #0
 800a13a:	f04f 0300 	mov.w	r3, #0
 800a13e:	da04      	bge.n	800a14a <__ulp+0x3e>
 800a140:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a144:	fa41 f300 	asr.w	r3, r1, r0
 800a148:	e7ec      	b.n	800a124 <__ulp+0x18>
 800a14a:	f1a0 0114 	sub.w	r1, r0, #20
 800a14e:	291e      	cmp	r1, #30
 800a150:	bfda      	itte	le
 800a152:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a156:	fa20 f101 	lsrle.w	r1, r0, r1
 800a15a:	2101      	movgt	r1, #1
 800a15c:	460a      	mov	r2, r1
 800a15e:	e7e1      	b.n	800a124 <__ulp+0x18>
 800a160:	7ff00000 	.word	0x7ff00000

0800a164 <__b2d>:
 800a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a166:	6905      	ldr	r5, [r0, #16]
 800a168:	f100 0714 	add.w	r7, r0, #20
 800a16c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a170:	1f2e      	subs	r6, r5, #4
 800a172:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a176:	4620      	mov	r0, r4
 800a178:	f7ff fd48 	bl	8009c0c <__hi0bits>
 800a17c:	f1c0 0320 	rsb	r3, r0, #32
 800a180:	280a      	cmp	r0, #10
 800a182:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a200 <__b2d+0x9c>
 800a186:	600b      	str	r3, [r1, #0]
 800a188:	dc14      	bgt.n	800a1b4 <__b2d+0x50>
 800a18a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a18e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a192:	42b7      	cmp	r7, r6
 800a194:	ea41 030c 	orr.w	r3, r1, ip
 800a198:	bf34      	ite	cc
 800a19a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a19e:	2100      	movcs	r1, #0
 800a1a0:	3015      	adds	r0, #21
 800a1a2:	fa04 f000 	lsl.w	r0, r4, r0
 800a1a6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a1aa:	ea40 0201 	orr.w	r2, r0, r1
 800a1ae:	ec43 2b10 	vmov	d0, r2, r3
 800a1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1b4:	42b7      	cmp	r7, r6
 800a1b6:	bf3a      	itte	cc
 800a1b8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a1bc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a1c0:	2100      	movcs	r1, #0
 800a1c2:	380b      	subs	r0, #11
 800a1c4:	d017      	beq.n	800a1f6 <__b2d+0x92>
 800a1c6:	f1c0 0c20 	rsb	ip, r0, #32
 800a1ca:	fa04 f500 	lsl.w	r5, r4, r0
 800a1ce:	42be      	cmp	r6, r7
 800a1d0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a1d4:	ea45 0504 	orr.w	r5, r5, r4
 800a1d8:	bf8c      	ite	hi
 800a1da:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a1de:	2400      	movls	r4, #0
 800a1e0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a1e4:	fa01 f000 	lsl.w	r0, r1, r0
 800a1e8:	fa24 f40c 	lsr.w	r4, r4, ip
 800a1ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a1f0:	ea40 0204 	orr.w	r2, r0, r4
 800a1f4:	e7db      	b.n	800a1ae <__b2d+0x4a>
 800a1f6:	ea44 030c 	orr.w	r3, r4, ip
 800a1fa:	460a      	mov	r2, r1
 800a1fc:	e7d7      	b.n	800a1ae <__b2d+0x4a>
 800a1fe:	bf00      	nop
 800a200:	3ff00000 	.word	0x3ff00000

0800a204 <__d2b>:
 800a204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a208:	4689      	mov	r9, r1
 800a20a:	2101      	movs	r1, #1
 800a20c:	ec57 6b10 	vmov	r6, r7, d0
 800a210:	4690      	mov	r8, r2
 800a212:	f7ff fc09 	bl	8009a28 <_Balloc>
 800a216:	4604      	mov	r4, r0
 800a218:	b930      	cbnz	r0, 800a228 <__d2b+0x24>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b25      	ldr	r3, [pc, #148]	; (800a2b4 <__d2b+0xb0>)
 800a21e:	4826      	ldr	r0, [pc, #152]	; (800a2b8 <__d2b+0xb4>)
 800a220:	f240 310a 	movw	r1, #778	; 0x30a
 800a224:	f001 fb3a 	bl	800b89c <__assert_func>
 800a228:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a22c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a230:	bb35      	cbnz	r5, 800a280 <__d2b+0x7c>
 800a232:	2e00      	cmp	r6, #0
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	d028      	beq.n	800a28a <__d2b+0x86>
 800a238:	4668      	mov	r0, sp
 800a23a:	9600      	str	r6, [sp, #0]
 800a23c:	f7ff fd06 	bl	8009c4c <__lo0bits>
 800a240:	9900      	ldr	r1, [sp, #0]
 800a242:	b300      	cbz	r0, 800a286 <__d2b+0x82>
 800a244:	9a01      	ldr	r2, [sp, #4]
 800a246:	f1c0 0320 	rsb	r3, r0, #32
 800a24a:	fa02 f303 	lsl.w	r3, r2, r3
 800a24e:	430b      	orrs	r3, r1
 800a250:	40c2      	lsrs	r2, r0
 800a252:	6163      	str	r3, [r4, #20]
 800a254:	9201      	str	r2, [sp, #4]
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	61a3      	str	r3, [r4, #24]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	bf14      	ite	ne
 800a25e:	2202      	movne	r2, #2
 800a260:	2201      	moveq	r2, #1
 800a262:	6122      	str	r2, [r4, #16]
 800a264:	b1d5      	cbz	r5, 800a29c <__d2b+0x98>
 800a266:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a26a:	4405      	add	r5, r0
 800a26c:	f8c9 5000 	str.w	r5, [r9]
 800a270:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a274:	f8c8 0000 	str.w	r0, [r8]
 800a278:	4620      	mov	r0, r4
 800a27a:	b003      	add	sp, #12
 800a27c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a284:	e7d5      	b.n	800a232 <__d2b+0x2e>
 800a286:	6161      	str	r1, [r4, #20]
 800a288:	e7e5      	b.n	800a256 <__d2b+0x52>
 800a28a:	a801      	add	r0, sp, #4
 800a28c:	f7ff fcde 	bl	8009c4c <__lo0bits>
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	6163      	str	r3, [r4, #20]
 800a294:	2201      	movs	r2, #1
 800a296:	6122      	str	r2, [r4, #16]
 800a298:	3020      	adds	r0, #32
 800a29a:	e7e3      	b.n	800a264 <__d2b+0x60>
 800a29c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2a4:	f8c9 0000 	str.w	r0, [r9]
 800a2a8:	6918      	ldr	r0, [r3, #16]
 800a2aa:	f7ff fcaf 	bl	8009c0c <__hi0bits>
 800a2ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2b2:	e7df      	b.n	800a274 <__d2b+0x70>
 800a2b4:	0800c750 	.word	0x0800c750
 800a2b8:	0800c840 	.word	0x0800c840

0800a2bc <__ratio>:
 800a2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	4688      	mov	r8, r1
 800a2c2:	4669      	mov	r1, sp
 800a2c4:	4681      	mov	r9, r0
 800a2c6:	f7ff ff4d 	bl	800a164 <__b2d>
 800a2ca:	a901      	add	r1, sp, #4
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	ec55 4b10 	vmov	r4, r5, d0
 800a2d2:	f7ff ff47 	bl	800a164 <__b2d>
 800a2d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2de:	eba3 0c02 	sub.w	ip, r3, r2
 800a2e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2ec:	ec51 0b10 	vmov	r0, r1, d0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfd6      	itet	le
 800a2f4:	460a      	movle	r2, r1
 800a2f6:	462a      	movgt	r2, r5
 800a2f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	462f      	mov	r7, r5
 800a300:	bfd4      	ite	le
 800a302:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a306:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a30a:	4620      	mov	r0, r4
 800a30c:	ee10 2a10 	vmov	r2, s0
 800a310:	465b      	mov	r3, fp
 800a312:	4639      	mov	r1, r7
 800a314:	f7f6 fab2 	bl	800087c <__aeabi_ddiv>
 800a318:	ec41 0b10 	vmov	d0, r0, r1
 800a31c:	b003      	add	sp, #12
 800a31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a322 <__copybits>:
 800a322:	3901      	subs	r1, #1
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	1149      	asrs	r1, r1, #5
 800a328:	6914      	ldr	r4, [r2, #16]
 800a32a:	3101      	adds	r1, #1
 800a32c:	f102 0314 	add.w	r3, r2, #20
 800a330:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a334:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a338:	1f05      	subs	r5, r0, #4
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	d30c      	bcc.n	800a358 <__copybits+0x36>
 800a33e:	1aa3      	subs	r3, r4, r2
 800a340:	3b11      	subs	r3, #17
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	3211      	adds	r2, #17
 800a348:	42a2      	cmp	r2, r4
 800a34a:	bf88      	it	hi
 800a34c:	2300      	movhi	r3, #0
 800a34e:	4418      	add	r0, r3
 800a350:	2300      	movs	r3, #0
 800a352:	4288      	cmp	r0, r1
 800a354:	d305      	bcc.n	800a362 <__copybits+0x40>
 800a356:	bd70      	pop	{r4, r5, r6, pc}
 800a358:	f853 6b04 	ldr.w	r6, [r3], #4
 800a35c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a360:	e7eb      	b.n	800a33a <__copybits+0x18>
 800a362:	f840 3b04 	str.w	r3, [r0], #4
 800a366:	e7f4      	b.n	800a352 <__copybits+0x30>

0800a368 <__any_on>:
 800a368:	f100 0214 	add.w	r2, r0, #20
 800a36c:	6900      	ldr	r0, [r0, #16]
 800a36e:	114b      	asrs	r3, r1, #5
 800a370:	4298      	cmp	r0, r3
 800a372:	b510      	push	{r4, lr}
 800a374:	db11      	blt.n	800a39a <__any_on+0x32>
 800a376:	dd0a      	ble.n	800a38e <__any_on+0x26>
 800a378:	f011 011f 	ands.w	r1, r1, #31
 800a37c:	d007      	beq.n	800a38e <__any_on+0x26>
 800a37e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a382:	fa24 f001 	lsr.w	r0, r4, r1
 800a386:	fa00 f101 	lsl.w	r1, r0, r1
 800a38a:	428c      	cmp	r4, r1
 800a38c:	d10b      	bne.n	800a3a6 <__any_on+0x3e>
 800a38e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a392:	4293      	cmp	r3, r2
 800a394:	d803      	bhi.n	800a39e <__any_on+0x36>
 800a396:	2000      	movs	r0, #0
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	4603      	mov	r3, r0
 800a39c:	e7f7      	b.n	800a38e <__any_on+0x26>
 800a39e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	d0f5      	beq.n	800a392 <__any_on+0x2a>
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	e7f6      	b.n	800a398 <__any_on+0x30>

0800a3aa <_calloc_r>:
 800a3aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3ac:	fba1 2402 	umull	r2, r4, r1, r2
 800a3b0:	b94c      	cbnz	r4, 800a3c6 <_calloc_r+0x1c>
 800a3b2:	4611      	mov	r1, r2
 800a3b4:	9201      	str	r2, [sp, #4]
 800a3b6:	f000 f87b 	bl	800a4b0 <_malloc_r>
 800a3ba:	9a01      	ldr	r2, [sp, #4]
 800a3bc:	4605      	mov	r5, r0
 800a3be:	b930      	cbnz	r0, 800a3ce <_calloc_r+0x24>
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	b003      	add	sp, #12
 800a3c4:	bd30      	pop	{r4, r5, pc}
 800a3c6:	220c      	movs	r2, #12
 800a3c8:	6002      	str	r2, [r0, #0]
 800a3ca:	2500      	movs	r5, #0
 800a3cc:	e7f8      	b.n	800a3c0 <_calloc_r+0x16>
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f7fc f866 	bl	80064a0 <memset>
 800a3d4:	e7f4      	b.n	800a3c0 <_calloc_r+0x16>
	...

0800a3d8 <_free_r>:
 800a3d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a3da:	2900      	cmp	r1, #0
 800a3dc:	d044      	beq.n	800a468 <_free_r+0x90>
 800a3de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e2:	9001      	str	r0, [sp, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f1a1 0404 	sub.w	r4, r1, #4
 800a3ea:	bfb8      	it	lt
 800a3ec:	18e4      	addlt	r4, r4, r3
 800a3ee:	f001 fae3 	bl	800b9b8 <__malloc_lock>
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	; (800a46c <_free_r+0x94>)
 800a3f4:	9801      	ldr	r0, [sp, #4]
 800a3f6:	6813      	ldr	r3, [r2, #0]
 800a3f8:	b933      	cbnz	r3, 800a408 <_free_r+0x30>
 800a3fa:	6063      	str	r3, [r4, #4]
 800a3fc:	6014      	str	r4, [r2, #0]
 800a3fe:	b003      	add	sp, #12
 800a400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a404:	f001 bade 	b.w	800b9c4 <__malloc_unlock>
 800a408:	42a3      	cmp	r3, r4
 800a40a:	d908      	bls.n	800a41e <_free_r+0x46>
 800a40c:	6825      	ldr	r5, [r4, #0]
 800a40e:	1961      	adds	r1, r4, r5
 800a410:	428b      	cmp	r3, r1
 800a412:	bf01      	itttt	eq
 800a414:	6819      	ldreq	r1, [r3, #0]
 800a416:	685b      	ldreq	r3, [r3, #4]
 800a418:	1949      	addeq	r1, r1, r5
 800a41a:	6021      	streq	r1, [r4, #0]
 800a41c:	e7ed      	b.n	800a3fa <_free_r+0x22>
 800a41e:	461a      	mov	r2, r3
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	b10b      	cbz	r3, 800a428 <_free_r+0x50>
 800a424:	42a3      	cmp	r3, r4
 800a426:	d9fa      	bls.n	800a41e <_free_r+0x46>
 800a428:	6811      	ldr	r1, [r2, #0]
 800a42a:	1855      	adds	r5, r2, r1
 800a42c:	42a5      	cmp	r5, r4
 800a42e:	d10b      	bne.n	800a448 <_free_r+0x70>
 800a430:	6824      	ldr	r4, [r4, #0]
 800a432:	4421      	add	r1, r4
 800a434:	1854      	adds	r4, r2, r1
 800a436:	42a3      	cmp	r3, r4
 800a438:	6011      	str	r1, [r2, #0]
 800a43a:	d1e0      	bne.n	800a3fe <_free_r+0x26>
 800a43c:	681c      	ldr	r4, [r3, #0]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	6053      	str	r3, [r2, #4]
 800a442:	4421      	add	r1, r4
 800a444:	6011      	str	r1, [r2, #0]
 800a446:	e7da      	b.n	800a3fe <_free_r+0x26>
 800a448:	d902      	bls.n	800a450 <_free_r+0x78>
 800a44a:	230c      	movs	r3, #12
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	e7d6      	b.n	800a3fe <_free_r+0x26>
 800a450:	6825      	ldr	r5, [r4, #0]
 800a452:	1961      	adds	r1, r4, r5
 800a454:	428b      	cmp	r3, r1
 800a456:	bf04      	itt	eq
 800a458:	6819      	ldreq	r1, [r3, #0]
 800a45a:	685b      	ldreq	r3, [r3, #4]
 800a45c:	6063      	str	r3, [r4, #4]
 800a45e:	bf04      	itt	eq
 800a460:	1949      	addeq	r1, r1, r5
 800a462:	6021      	streq	r1, [r4, #0]
 800a464:	6054      	str	r4, [r2, #4]
 800a466:	e7ca      	b.n	800a3fe <_free_r+0x26>
 800a468:	b003      	add	sp, #12
 800a46a:	bd30      	pop	{r4, r5, pc}
 800a46c:	20000430 	.word	0x20000430

0800a470 <sbrk_aligned>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4e0e      	ldr	r6, [pc, #56]	; (800a4ac <sbrk_aligned+0x3c>)
 800a474:	460c      	mov	r4, r1
 800a476:	6831      	ldr	r1, [r6, #0]
 800a478:	4605      	mov	r5, r0
 800a47a:	b911      	cbnz	r1, 800a482 <sbrk_aligned+0x12>
 800a47c:	f000 ff48 	bl	800b310 <_sbrk_r>
 800a480:	6030      	str	r0, [r6, #0]
 800a482:	4621      	mov	r1, r4
 800a484:	4628      	mov	r0, r5
 800a486:	f000 ff43 	bl	800b310 <_sbrk_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d00a      	beq.n	800a4a4 <sbrk_aligned+0x34>
 800a48e:	1cc4      	adds	r4, r0, #3
 800a490:	f024 0403 	bic.w	r4, r4, #3
 800a494:	42a0      	cmp	r0, r4
 800a496:	d007      	beq.n	800a4a8 <sbrk_aligned+0x38>
 800a498:	1a21      	subs	r1, r4, r0
 800a49a:	4628      	mov	r0, r5
 800a49c:	f000 ff38 	bl	800b310 <_sbrk_r>
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d101      	bne.n	800a4a8 <sbrk_aligned+0x38>
 800a4a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	20000434 	.word	0x20000434

0800a4b0 <_malloc_r>:
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	1ccd      	adds	r5, r1, #3
 800a4b6:	f025 0503 	bic.w	r5, r5, #3
 800a4ba:	3508      	adds	r5, #8
 800a4bc:	2d0c      	cmp	r5, #12
 800a4be:	bf38      	it	cc
 800a4c0:	250c      	movcc	r5, #12
 800a4c2:	2d00      	cmp	r5, #0
 800a4c4:	4607      	mov	r7, r0
 800a4c6:	db01      	blt.n	800a4cc <_malloc_r+0x1c>
 800a4c8:	42a9      	cmp	r1, r5
 800a4ca:	d905      	bls.n	800a4d8 <_malloc_r+0x28>
 800a4cc:	230c      	movs	r3, #12
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	2600      	movs	r6, #0
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d8:	4e2e      	ldr	r6, [pc, #184]	; (800a594 <_malloc_r+0xe4>)
 800a4da:	f001 fa6d 	bl	800b9b8 <__malloc_lock>
 800a4de:	6833      	ldr	r3, [r6, #0]
 800a4e0:	461c      	mov	r4, r3
 800a4e2:	bb34      	cbnz	r4, 800a532 <_malloc_r+0x82>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	f7ff ffc2 	bl	800a470 <sbrk_aligned>
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	d14d      	bne.n	800a58e <_malloc_r+0xde>
 800a4f2:	6834      	ldr	r4, [r6, #0]
 800a4f4:	4626      	mov	r6, r4
 800a4f6:	2e00      	cmp	r6, #0
 800a4f8:	d140      	bne.n	800a57c <_malloc_r+0xcc>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4638      	mov	r0, r7
 800a500:	eb04 0803 	add.w	r8, r4, r3
 800a504:	f000 ff04 	bl	800b310 <_sbrk_r>
 800a508:	4580      	cmp	r8, r0
 800a50a:	d13a      	bne.n	800a582 <_malloc_r+0xd2>
 800a50c:	6821      	ldr	r1, [r4, #0]
 800a50e:	3503      	adds	r5, #3
 800a510:	1a6d      	subs	r5, r5, r1
 800a512:	f025 0503 	bic.w	r5, r5, #3
 800a516:	3508      	adds	r5, #8
 800a518:	2d0c      	cmp	r5, #12
 800a51a:	bf38      	it	cc
 800a51c:	250c      	movcc	r5, #12
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ffa5 	bl	800a470 <sbrk_aligned>
 800a526:	3001      	adds	r0, #1
 800a528:	d02b      	beq.n	800a582 <_malloc_r+0xd2>
 800a52a:	6823      	ldr	r3, [r4, #0]
 800a52c:	442b      	add	r3, r5
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	e00e      	b.n	800a550 <_malloc_r+0xa0>
 800a532:	6822      	ldr	r2, [r4, #0]
 800a534:	1b52      	subs	r2, r2, r5
 800a536:	d41e      	bmi.n	800a576 <_malloc_r+0xc6>
 800a538:	2a0b      	cmp	r2, #11
 800a53a:	d916      	bls.n	800a56a <_malloc_r+0xba>
 800a53c:	1961      	adds	r1, r4, r5
 800a53e:	42a3      	cmp	r3, r4
 800a540:	6025      	str	r5, [r4, #0]
 800a542:	bf18      	it	ne
 800a544:	6059      	strne	r1, [r3, #4]
 800a546:	6863      	ldr	r3, [r4, #4]
 800a548:	bf08      	it	eq
 800a54a:	6031      	streq	r1, [r6, #0]
 800a54c:	5162      	str	r2, [r4, r5]
 800a54e:	604b      	str	r3, [r1, #4]
 800a550:	4638      	mov	r0, r7
 800a552:	f104 060b 	add.w	r6, r4, #11
 800a556:	f001 fa35 	bl	800b9c4 <__malloc_unlock>
 800a55a:	f026 0607 	bic.w	r6, r6, #7
 800a55e:	1d23      	adds	r3, r4, #4
 800a560:	1af2      	subs	r2, r6, r3
 800a562:	d0b6      	beq.n	800a4d2 <_malloc_r+0x22>
 800a564:	1b9b      	subs	r3, r3, r6
 800a566:	50a3      	str	r3, [r4, r2]
 800a568:	e7b3      	b.n	800a4d2 <_malloc_r+0x22>
 800a56a:	6862      	ldr	r2, [r4, #4]
 800a56c:	42a3      	cmp	r3, r4
 800a56e:	bf0c      	ite	eq
 800a570:	6032      	streq	r2, [r6, #0]
 800a572:	605a      	strne	r2, [r3, #4]
 800a574:	e7ec      	b.n	800a550 <_malloc_r+0xa0>
 800a576:	4623      	mov	r3, r4
 800a578:	6864      	ldr	r4, [r4, #4]
 800a57a:	e7b2      	b.n	800a4e2 <_malloc_r+0x32>
 800a57c:	4634      	mov	r4, r6
 800a57e:	6876      	ldr	r6, [r6, #4]
 800a580:	e7b9      	b.n	800a4f6 <_malloc_r+0x46>
 800a582:	230c      	movs	r3, #12
 800a584:	603b      	str	r3, [r7, #0]
 800a586:	4638      	mov	r0, r7
 800a588:	f001 fa1c 	bl	800b9c4 <__malloc_unlock>
 800a58c:	e7a1      	b.n	800a4d2 <_malloc_r+0x22>
 800a58e:	6025      	str	r5, [r4, #0]
 800a590:	e7de      	b.n	800a550 <_malloc_r+0xa0>
 800a592:	bf00      	nop
 800a594:	20000430 	.word	0x20000430

0800a598 <__ssputs_r>:
 800a598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a59c:	688e      	ldr	r6, [r1, #8]
 800a59e:	429e      	cmp	r6, r3
 800a5a0:	4682      	mov	sl, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	4690      	mov	r8, r2
 800a5a6:	461f      	mov	r7, r3
 800a5a8:	d838      	bhi.n	800a61c <__ssputs_r+0x84>
 800a5aa:	898a      	ldrh	r2, [r1, #12]
 800a5ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a5b0:	d032      	beq.n	800a618 <__ssputs_r+0x80>
 800a5b2:	6825      	ldr	r5, [r4, #0]
 800a5b4:	6909      	ldr	r1, [r1, #16]
 800a5b6:	eba5 0901 	sub.w	r9, r5, r1
 800a5ba:	6965      	ldr	r5, [r4, #20]
 800a5bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	444b      	add	r3, r9
 800a5c8:	106d      	asrs	r5, r5, #1
 800a5ca:	429d      	cmp	r5, r3
 800a5cc:	bf38      	it	cc
 800a5ce:	461d      	movcc	r5, r3
 800a5d0:	0553      	lsls	r3, r2, #21
 800a5d2:	d531      	bpl.n	800a638 <__ssputs_r+0xa0>
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	f7ff ff6b 	bl	800a4b0 <_malloc_r>
 800a5da:	4606      	mov	r6, r0
 800a5dc:	b950      	cbnz	r0, 800a5f4 <__ssputs_r+0x5c>
 800a5de:	230c      	movs	r3, #12
 800a5e0:	f8ca 3000 	str.w	r3, [sl]
 800a5e4:	89a3      	ldrh	r3, [r4, #12]
 800a5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ea:	81a3      	strh	r3, [r4, #12]
 800a5ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f4:	6921      	ldr	r1, [r4, #16]
 800a5f6:	464a      	mov	r2, r9
 800a5f8:	f7ff fa08 	bl	8009a0c <memcpy>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	6126      	str	r6, [r4, #16]
 800a60a:	6165      	str	r5, [r4, #20]
 800a60c:	444e      	add	r6, r9
 800a60e:	eba5 0509 	sub.w	r5, r5, r9
 800a612:	6026      	str	r6, [r4, #0]
 800a614:	60a5      	str	r5, [r4, #8]
 800a616:	463e      	mov	r6, r7
 800a618:	42be      	cmp	r6, r7
 800a61a:	d900      	bls.n	800a61e <__ssputs_r+0x86>
 800a61c:	463e      	mov	r6, r7
 800a61e:	6820      	ldr	r0, [r4, #0]
 800a620:	4632      	mov	r2, r6
 800a622:	4641      	mov	r1, r8
 800a624:	f001 f9ae 	bl	800b984 <memmove>
 800a628:	68a3      	ldr	r3, [r4, #8]
 800a62a:	1b9b      	subs	r3, r3, r6
 800a62c:	60a3      	str	r3, [r4, #8]
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	4433      	add	r3, r6
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	2000      	movs	r0, #0
 800a636:	e7db      	b.n	800a5f0 <__ssputs_r+0x58>
 800a638:	462a      	mov	r2, r5
 800a63a:	f001 f9c9 	bl	800b9d0 <_realloc_r>
 800a63e:	4606      	mov	r6, r0
 800a640:	2800      	cmp	r0, #0
 800a642:	d1e1      	bne.n	800a608 <__ssputs_r+0x70>
 800a644:	6921      	ldr	r1, [r4, #16]
 800a646:	4650      	mov	r0, sl
 800a648:	f7ff fec6 	bl	800a3d8 <_free_r>
 800a64c:	e7c7      	b.n	800a5de <__ssputs_r+0x46>
	...

0800a650 <_svfiprintf_r>:
 800a650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	4698      	mov	r8, r3
 800a656:	898b      	ldrh	r3, [r1, #12]
 800a658:	061b      	lsls	r3, r3, #24
 800a65a:	b09d      	sub	sp, #116	; 0x74
 800a65c:	4607      	mov	r7, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	4614      	mov	r4, r2
 800a662:	d50e      	bpl.n	800a682 <_svfiprintf_r+0x32>
 800a664:	690b      	ldr	r3, [r1, #16]
 800a666:	b963      	cbnz	r3, 800a682 <_svfiprintf_r+0x32>
 800a668:	2140      	movs	r1, #64	; 0x40
 800a66a:	f7ff ff21 	bl	800a4b0 <_malloc_r>
 800a66e:	6028      	str	r0, [r5, #0]
 800a670:	6128      	str	r0, [r5, #16]
 800a672:	b920      	cbnz	r0, 800a67e <_svfiprintf_r+0x2e>
 800a674:	230c      	movs	r3, #12
 800a676:	603b      	str	r3, [r7, #0]
 800a678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a67c:	e0d1      	b.n	800a822 <_svfiprintf_r+0x1d2>
 800a67e:	2340      	movs	r3, #64	; 0x40
 800a680:	616b      	str	r3, [r5, #20]
 800a682:	2300      	movs	r3, #0
 800a684:	9309      	str	r3, [sp, #36]	; 0x24
 800a686:	2320      	movs	r3, #32
 800a688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a68c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a690:	2330      	movs	r3, #48	; 0x30
 800a692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a83c <_svfiprintf_r+0x1ec>
 800a696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a69a:	f04f 0901 	mov.w	r9, #1
 800a69e:	4623      	mov	r3, r4
 800a6a0:	469a      	mov	sl, r3
 800a6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6a6:	b10a      	cbz	r2, 800a6ac <_svfiprintf_r+0x5c>
 800a6a8:	2a25      	cmp	r2, #37	; 0x25
 800a6aa:	d1f9      	bne.n	800a6a0 <_svfiprintf_r+0x50>
 800a6ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a6b0:	d00b      	beq.n	800a6ca <_svfiprintf_r+0x7a>
 800a6b2:	465b      	mov	r3, fp
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	f7ff ff6d 	bl	800a598 <__ssputs_r>
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f000 80aa 	beq.w	800a818 <_svfiprintf_r+0x1c8>
 800a6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6c6:	445a      	add	r2, fp
 800a6c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	f000 80a2 	beq.w	800a818 <_svfiprintf_r+0x1c8>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6de:	f10a 0a01 	add.w	sl, sl, #1
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	9307      	str	r3, [sp, #28]
 800a6e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a6ec:	4654      	mov	r4, sl
 800a6ee:	2205      	movs	r2, #5
 800a6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6f4:	4851      	ldr	r0, [pc, #324]	; (800a83c <_svfiprintf_r+0x1ec>)
 800a6f6:	f7f5 fd8b 	bl	8000210 <memchr>
 800a6fa:	9a04      	ldr	r2, [sp, #16]
 800a6fc:	b9d8      	cbnz	r0, 800a736 <_svfiprintf_r+0xe6>
 800a6fe:	06d0      	lsls	r0, r2, #27
 800a700:	bf44      	itt	mi
 800a702:	2320      	movmi	r3, #32
 800a704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a708:	0711      	lsls	r1, r2, #28
 800a70a:	bf44      	itt	mi
 800a70c:	232b      	movmi	r3, #43	; 0x2b
 800a70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a712:	f89a 3000 	ldrb.w	r3, [sl]
 800a716:	2b2a      	cmp	r3, #42	; 0x2a
 800a718:	d015      	beq.n	800a746 <_svfiprintf_r+0xf6>
 800a71a:	9a07      	ldr	r2, [sp, #28]
 800a71c:	4654      	mov	r4, sl
 800a71e:	2000      	movs	r0, #0
 800a720:	f04f 0c0a 	mov.w	ip, #10
 800a724:	4621      	mov	r1, r4
 800a726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a72a:	3b30      	subs	r3, #48	; 0x30
 800a72c:	2b09      	cmp	r3, #9
 800a72e:	d94e      	bls.n	800a7ce <_svfiprintf_r+0x17e>
 800a730:	b1b0      	cbz	r0, 800a760 <_svfiprintf_r+0x110>
 800a732:	9207      	str	r2, [sp, #28]
 800a734:	e014      	b.n	800a760 <_svfiprintf_r+0x110>
 800a736:	eba0 0308 	sub.w	r3, r0, r8
 800a73a:	fa09 f303 	lsl.w	r3, r9, r3
 800a73e:	4313      	orrs	r3, r2
 800a740:	9304      	str	r3, [sp, #16]
 800a742:	46a2      	mov	sl, r4
 800a744:	e7d2      	b.n	800a6ec <_svfiprintf_r+0x9c>
 800a746:	9b03      	ldr	r3, [sp, #12]
 800a748:	1d19      	adds	r1, r3, #4
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	9103      	str	r1, [sp, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	bfbb      	ittet	lt
 800a752:	425b      	neglt	r3, r3
 800a754:	f042 0202 	orrlt.w	r2, r2, #2
 800a758:	9307      	strge	r3, [sp, #28]
 800a75a:	9307      	strlt	r3, [sp, #28]
 800a75c:	bfb8      	it	lt
 800a75e:	9204      	strlt	r2, [sp, #16]
 800a760:	7823      	ldrb	r3, [r4, #0]
 800a762:	2b2e      	cmp	r3, #46	; 0x2e
 800a764:	d10c      	bne.n	800a780 <_svfiprintf_r+0x130>
 800a766:	7863      	ldrb	r3, [r4, #1]
 800a768:	2b2a      	cmp	r3, #42	; 0x2a
 800a76a:	d135      	bne.n	800a7d8 <_svfiprintf_r+0x188>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	1d1a      	adds	r2, r3, #4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	9203      	str	r2, [sp, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfb8      	it	lt
 800a778:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a77c:	3402      	adds	r4, #2
 800a77e:	9305      	str	r3, [sp, #20]
 800a780:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a84c <_svfiprintf_r+0x1fc>
 800a784:	7821      	ldrb	r1, [r4, #0]
 800a786:	2203      	movs	r2, #3
 800a788:	4650      	mov	r0, sl
 800a78a:	f7f5 fd41 	bl	8000210 <memchr>
 800a78e:	b140      	cbz	r0, 800a7a2 <_svfiprintf_r+0x152>
 800a790:	2340      	movs	r3, #64	; 0x40
 800a792:	eba0 000a 	sub.w	r0, r0, sl
 800a796:	fa03 f000 	lsl.w	r0, r3, r0
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	4303      	orrs	r3, r0
 800a79e:	3401      	adds	r4, #1
 800a7a0:	9304      	str	r3, [sp, #16]
 800a7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a6:	4826      	ldr	r0, [pc, #152]	; (800a840 <_svfiprintf_r+0x1f0>)
 800a7a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ac:	2206      	movs	r2, #6
 800a7ae:	f7f5 fd2f 	bl	8000210 <memchr>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d038      	beq.n	800a828 <_svfiprintf_r+0x1d8>
 800a7b6:	4b23      	ldr	r3, [pc, #140]	; (800a844 <_svfiprintf_r+0x1f4>)
 800a7b8:	bb1b      	cbnz	r3, 800a802 <_svfiprintf_r+0x1b2>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	3307      	adds	r3, #7
 800a7be:	f023 0307 	bic.w	r3, r3, #7
 800a7c2:	3308      	adds	r3, #8
 800a7c4:	9303      	str	r3, [sp, #12]
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c8:	4433      	add	r3, r6
 800a7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800a7cc:	e767      	b.n	800a69e <_svfiprintf_r+0x4e>
 800a7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7d2:	460c      	mov	r4, r1
 800a7d4:	2001      	movs	r0, #1
 800a7d6:	e7a5      	b.n	800a724 <_svfiprintf_r+0xd4>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	3401      	adds	r4, #1
 800a7dc:	9305      	str	r3, [sp, #20]
 800a7de:	4619      	mov	r1, r3
 800a7e0:	f04f 0c0a 	mov.w	ip, #10
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7ea:	3a30      	subs	r2, #48	; 0x30
 800a7ec:	2a09      	cmp	r2, #9
 800a7ee:	d903      	bls.n	800a7f8 <_svfiprintf_r+0x1a8>
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d0c5      	beq.n	800a780 <_svfiprintf_r+0x130>
 800a7f4:	9105      	str	r1, [sp, #20]
 800a7f6:	e7c3      	b.n	800a780 <_svfiprintf_r+0x130>
 800a7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	2301      	movs	r3, #1
 800a800:	e7f0      	b.n	800a7e4 <_svfiprintf_r+0x194>
 800a802:	ab03      	add	r3, sp, #12
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	462a      	mov	r2, r5
 800a808:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <_svfiprintf_r+0x1f8>)
 800a80a:	a904      	add	r1, sp, #16
 800a80c:	4638      	mov	r0, r7
 800a80e:	f7fb feef 	bl	80065f0 <_printf_float>
 800a812:	1c42      	adds	r2, r0, #1
 800a814:	4606      	mov	r6, r0
 800a816:	d1d6      	bne.n	800a7c6 <_svfiprintf_r+0x176>
 800a818:	89ab      	ldrh	r3, [r5, #12]
 800a81a:	065b      	lsls	r3, r3, #25
 800a81c:	f53f af2c 	bmi.w	800a678 <_svfiprintf_r+0x28>
 800a820:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a822:	b01d      	add	sp, #116	; 0x74
 800a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a828:	ab03      	add	r3, sp, #12
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	462a      	mov	r2, r5
 800a82e:	4b06      	ldr	r3, [pc, #24]	; (800a848 <_svfiprintf_r+0x1f8>)
 800a830:	a904      	add	r1, sp, #16
 800a832:	4638      	mov	r0, r7
 800a834:	f7fc f980 	bl	8006b38 <_printf_i>
 800a838:	e7eb      	b.n	800a812 <_svfiprintf_r+0x1c2>
 800a83a:	bf00      	nop
 800a83c:	0800c99c 	.word	0x0800c99c
 800a840:	0800c9a6 	.word	0x0800c9a6
 800a844:	080065f1 	.word	0x080065f1
 800a848:	0800a599 	.word	0x0800a599
 800a84c:	0800c9a2 	.word	0x0800c9a2

0800a850 <__sfputc_r>:
 800a850:	6893      	ldr	r3, [r2, #8]
 800a852:	3b01      	subs	r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	b410      	push	{r4}
 800a858:	6093      	str	r3, [r2, #8]
 800a85a:	da08      	bge.n	800a86e <__sfputc_r+0x1e>
 800a85c:	6994      	ldr	r4, [r2, #24]
 800a85e:	42a3      	cmp	r3, r4
 800a860:	db01      	blt.n	800a866 <__sfputc_r+0x16>
 800a862:	290a      	cmp	r1, #10
 800a864:	d103      	bne.n	800a86e <__sfputc_r+0x1e>
 800a866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a86a:	f000 bf37 	b.w	800b6dc <__swbuf_r>
 800a86e:	6813      	ldr	r3, [r2, #0]
 800a870:	1c58      	adds	r0, r3, #1
 800a872:	6010      	str	r0, [r2, #0]
 800a874:	7019      	strb	r1, [r3, #0]
 800a876:	4608      	mov	r0, r1
 800a878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <__sfputs_r>:
 800a87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a880:	4606      	mov	r6, r0
 800a882:	460f      	mov	r7, r1
 800a884:	4614      	mov	r4, r2
 800a886:	18d5      	adds	r5, r2, r3
 800a888:	42ac      	cmp	r4, r5
 800a88a:	d101      	bne.n	800a890 <__sfputs_r+0x12>
 800a88c:	2000      	movs	r0, #0
 800a88e:	e007      	b.n	800a8a0 <__sfputs_r+0x22>
 800a890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a894:	463a      	mov	r2, r7
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ffda 	bl	800a850 <__sfputc_r>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d1f3      	bne.n	800a888 <__sfputs_r+0xa>
 800a8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8a4 <_vfiprintf_r>:
 800a8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	b09d      	sub	sp, #116	; 0x74
 800a8ac:	4614      	mov	r4, r2
 800a8ae:	4698      	mov	r8, r3
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	b118      	cbz	r0, 800a8bc <_vfiprintf_r+0x18>
 800a8b4:	6983      	ldr	r3, [r0, #24]
 800a8b6:	b90b      	cbnz	r3, 800a8bc <_vfiprintf_r+0x18>
 800a8b8:	f7fe fbf8 	bl	80090ac <__sinit>
 800a8bc:	4b89      	ldr	r3, [pc, #548]	; (800aae4 <_vfiprintf_r+0x240>)
 800a8be:	429d      	cmp	r5, r3
 800a8c0:	d11b      	bne.n	800a8fa <_vfiprintf_r+0x56>
 800a8c2:	6875      	ldr	r5, [r6, #4]
 800a8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c6:	07d9      	lsls	r1, r3, #31
 800a8c8:	d405      	bmi.n	800a8d6 <_vfiprintf_r+0x32>
 800a8ca:	89ab      	ldrh	r3, [r5, #12]
 800a8cc:	059a      	lsls	r2, r3, #22
 800a8ce:	d402      	bmi.n	800a8d6 <_vfiprintf_r+0x32>
 800a8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d2:	f7ff f81a 	bl	800990a <__retarget_lock_acquire_recursive>
 800a8d6:	89ab      	ldrh	r3, [r5, #12]
 800a8d8:	071b      	lsls	r3, r3, #28
 800a8da:	d501      	bpl.n	800a8e0 <_vfiprintf_r+0x3c>
 800a8dc:	692b      	ldr	r3, [r5, #16]
 800a8de:	b9eb      	cbnz	r3, 800a91c <_vfiprintf_r+0x78>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f000 ff6c 	bl	800b7c0 <__swsetup_r>
 800a8e8:	b1c0      	cbz	r0, 800a91c <_vfiprintf_r+0x78>
 800a8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8ec:	07dc      	lsls	r4, r3, #31
 800a8ee:	d50e      	bpl.n	800a90e <_vfiprintf_r+0x6a>
 800a8f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8f4:	b01d      	add	sp, #116	; 0x74
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fa:	4b7b      	ldr	r3, [pc, #492]	; (800aae8 <_vfiprintf_r+0x244>)
 800a8fc:	429d      	cmp	r5, r3
 800a8fe:	d101      	bne.n	800a904 <_vfiprintf_r+0x60>
 800a900:	68b5      	ldr	r5, [r6, #8]
 800a902:	e7df      	b.n	800a8c4 <_vfiprintf_r+0x20>
 800a904:	4b79      	ldr	r3, [pc, #484]	; (800aaec <_vfiprintf_r+0x248>)
 800a906:	429d      	cmp	r5, r3
 800a908:	bf08      	it	eq
 800a90a:	68f5      	ldreq	r5, [r6, #12]
 800a90c:	e7da      	b.n	800a8c4 <_vfiprintf_r+0x20>
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	0598      	lsls	r0, r3, #22
 800a912:	d4ed      	bmi.n	800a8f0 <_vfiprintf_r+0x4c>
 800a914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a916:	f7fe fff9 	bl	800990c <__retarget_lock_release_recursive>
 800a91a:	e7e9      	b.n	800a8f0 <_vfiprintf_r+0x4c>
 800a91c:	2300      	movs	r3, #0
 800a91e:	9309      	str	r3, [sp, #36]	; 0x24
 800a920:	2320      	movs	r3, #32
 800a922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a926:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92a:	2330      	movs	r3, #48	; 0x30
 800a92c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aaf0 <_vfiprintf_r+0x24c>
 800a930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a934:	f04f 0901 	mov.w	r9, #1
 800a938:	4623      	mov	r3, r4
 800a93a:	469a      	mov	sl, r3
 800a93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a940:	b10a      	cbz	r2, 800a946 <_vfiprintf_r+0xa2>
 800a942:	2a25      	cmp	r2, #37	; 0x25
 800a944:	d1f9      	bne.n	800a93a <_vfiprintf_r+0x96>
 800a946:	ebba 0b04 	subs.w	fp, sl, r4
 800a94a:	d00b      	beq.n	800a964 <_vfiprintf_r+0xc0>
 800a94c:	465b      	mov	r3, fp
 800a94e:	4622      	mov	r2, r4
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ff93 	bl	800a87e <__sfputs_r>
 800a958:	3001      	adds	r0, #1
 800a95a:	f000 80aa 	beq.w	800aab2 <_vfiprintf_r+0x20e>
 800a95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a960:	445a      	add	r2, fp
 800a962:	9209      	str	r2, [sp, #36]	; 0x24
 800a964:	f89a 3000 	ldrb.w	r3, [sl]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 80a2 	beq.w	800aab2 <_vfiprintf_r+0x20e>
 800a96e:	2300      	movs	r3, #0
 800a970:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a978:	f10a 0a01 	add.w	sl, sl, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a984:	931a      	str	r3, [sp, #104]	; 0x68
 800a986:	4654      	mov	r4, sl
 800a988:	2205      	movs	r2, #5
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4858      	ldr	r0, [pc, #352]	; (800aaf0 <_vfiprintf_r+0x24c>)
 800a990:	f7f5 fc3e 	bl	8000210 <memchr>
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	b9d8      	cbnz	r0, 800a9d0 <_vfiprintf_r+0x12c>
 800a998:	06d1      	lsls	r1, r2, #27
 800a99a:	bf44      	itt	mi
 800a99c:	2320      	movmi	r3, #32
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a2:	0713      	lsls	r3, r2, #28
 800a9a4:	bf44      	itt	mi
 800a9a6:	232b      	movmi	r3, #43	; 0x2b
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b2:	d015      	beq.n	800a9e0 <_vfiprintf_r+0x13c>
 800a9b4:	9a07      	ldr	r2, [sp, #28]
 800a9b6:	4654      	mov	r4, sl
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f04f 0c0a 	mov.w	ip, #10
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c4:	3b30      	subs	r3, #48	; 0x30
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d94e      	bls.n	800aa68 <_vfiprintf_r+0x1c4>
 800a9ca:	b1b0      	cbz	r0, 800a9fa <_vfiprintf_r+0x156>
 800a9cc:	9207      	str	r2, [sp, #28]
 800a9ce:	e014      	b.n	800a9fa <_vfiprintf_r+0x156>
 800a9d0:	eba0 0308 	sub.w	r3, r0, r8
 800a9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	46a2      	mov	sl, r4
 800a9de:	e7d2      	b.n	800a986 <_vfiprintf_r+0xe2>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	1d19      	adds	r1, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbb      	ittet	lt
 800a9ec:	425b      	neglt	r3, r3
 800a9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f2:	9307      	strge	r3, [sp, #28]
 800a9f4:	9307      	strlt	r3, [sp, #28]
 800a9f6:	bfb8      	it	lt
 800a9f8:	9204      	strlt	r2, [sp, #16]
 800a9fa:	7823      	ldrb	r3, [r4, #0]
 800a9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800a9fe:	d10c      	bne.n	800aa1a <_vfiprintf_r+0x176>
 800aa00:	7863      	ldrb	r3, [r4, #1]
 800aa02:	2b2a      	cmp	r3, #42	; 0x2a
 800aa04:	d135      	bne.n	800aa72 <_vfiprintf_r+0x1ce>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfb8      	it	lt
 800aa12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa16:	3402      	adds	r4, #2
 800aa18:	9305      	str	r3, [sp, #20]
 800aa1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab00 <_vfiprintf_r+0x25c>
 800aa1e:	7821      	ldrb	r1, [r4, #0]
 800aa20:	2203      	movs	r2, #3
 800aa22:	4650      	mov	r0, sl
 800aa24:	f7f5 fbf4 	bl	8000210 <memchr>
 800aa28:	b140      	cbz	r0, 800aa3c <_vfiprintf_r+0x198>
 800aa2a:	2340      	movs	r3, #64	; 0x40
 800aa2c:	eba0 000a 	sub.w	r0, r0, sl
 800aa30:	fa03 f000 	lsl.w	r0, r3, r0
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	4303      	orrs	r3, r0
 800aa38:	3401      	adds	r4, #1
 800aa3a:	9304      	str	r3, [sp, #16]
 800aa3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa40:	482c      	ldr	r0, [pc, #176]	; (800aaf4 <_vfiprintf_r+0x250>)
 800aa42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa46:	2206      	movs	r2, #6
 800aa48:	f7f5 fbe2 	bl	8000210 <memchr>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d03f      	beq.n	800aad0 <_vfiprintf_r+0x22c>
 800aa50:	4b29      	ldr	r3, [pc, #164]	; (800aaf8 <_vfiprintf_r+0x254>)
 800aa52:	bb1b      	cbnz	r3, 800aa9c <_vfiprintf_r+0x1f8>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	3307      	adds	r3, #7
 800aa58:	f023 0307 	bic.w	r3, r3, #7
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	9303      	str	r3, [sp, #12]
 800aa60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa62:	443b      	add	r3, r7
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	e767      	b.n	800a938 <_vfiprintf_r+0x94>
 800aa68:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6c:	460c      	mov	r4, r1
 800aa6e:	2001      	movs	r0, #1
 800aa70:	e7a5      	b.n	800a9be <_vfiprintf_r+0x11a>
 800aa72:	2300      	movs	r3, #0
 800aa74:	3401      	adds	r4, #1
 800aa76:	9305      	str	r3, [sp, #20]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f04f 0c0a 	mov.w	ip, #10
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa84:	3a30      	subs	r2, #48	; 0x30
 800aa86:	2a09      	cmp	r2, #9
 800aa88:	d903      	bls.n	800aa92 <_vfiprintf_r+0x1ee>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0c5      	beq.n	800aa1a <_vfiprintf_r+0x176>
 800aa8e:	9105      	str	r1, [sp, #20]
 800aa90:	e7c3      	b.n	800aa1a <_vfiprintf_r+0x176>
 800aa92:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa96:	4604      	mov	r4, r0
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e7f0      	b.n	800aa7e <_vfiprintf_r+0x1da>
 800aa9c:	ab03      	add	r3, sp, #12
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	462a      	mov	r2, r5
 800aaa2:	4b16      	ldr	r3, [pc, #88]	; (800aafc <_vfiprintf_r+0x258>)
 800aaa4:	a904      	add	r1, sp, #16
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	f7fb fda2 	bl	80065f0 <_printf_float>
 800aaac:	4607      	mov	r7, r0
 800aaae:	1c78      	adds	r0, r7, #1
 800aab0:	d1d6      	bne.n	800aa60 <_vfiprintf_r+0x1bc>
 800aab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab4:	07d9      	lsls	r1, r3, #31
 800aab6:	d405      	bmi.n	800aac4 <_vfiprintf_r+0x220>
 800aab8:	89ab      	ldrh	r3, [r5, #12]
 800aaba:	059a      	lsls	r2, r3, #22
 800aabc:	d402      	bmi.n	800aac4 <_vfiprintf_r+0x220>
 800aabe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac0:	f7fe ff24 	bl	800990c <__retarget_lock_release_recursive>
 800aac4:	89ab      	ldrh	r3, [r5, #12]
 800aac6:	065b      	lsls	r3, r3, #25
 800aac8:	f53f af12 	bmi.w	800a8f0 <_vfiprintf_r+0x4c>
 800aacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aace:	e711      	b.n	800a8f4 <_vfiprintf_r+0x50>
 800aad0:	ab03      	add	r3, sp, #12
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	462a      	mov	r2, r5
 800aad6:	4b09      	ldr	r3, [pc, #36]	; (800aafc <_vfiprintf_r+0x258>)
 800aad8:	a904      	add	r1, sp, #16
 800aada:	4630      	mov	r0, r6
 800aadc:	f7fc f82c 	bl	8006b38 <_printf_i>
 800aae0:	e7e4      	b.n	800aaac <_vfiprintf_r+0x208>
 800aae2:	bf00      	nop
 800aae4:	0800c784 	.word	0x0800c784
 800aae8:	0800c7a4 	.word	0x0800c7a4
 800aaec:	0800c764 	.word	0x0800c764
 800aaf0:	0800c99c 	.word	0x0800c99c
 800aaf4:	0800c9a6 	.word	0x0800c9a6
 800aaf8:	080065f1 	.word	0x080065f1
 800aafc:	0800a87f 	.word	0x0800a87f
 800ab00:	0800c9a2 	.word	0x0800c9a2

0800ab04 <__svfiscanf_r>:
 800ab04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab08:	461d      	mov	r5, r3
 800ab0a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800ab0c:	07df      	lsls	r7, r3, #31
 800ab0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800ab12:	4606      	mov	r6, r0
 800ab14:	460c      	mov	r4, r1
 800ab16:	4692      	mov	sl, r2
 800ab18:	d405      	bmi.n	800ab26 <__svfiscanf_r+0x22>
 800ab1a:	898b      	ldrh	r3, [r1, #12]
 800ab1c:	0598      	lsls	r0, r3, #22
 800ab1e:	d402      	bmi.n	800ab26 <__svfiscanf_r+0x22>
 800ab20:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800ab22:	f7fe fef2 	bl	800990a <__retarget_lock_acquire_recursive>
 800ab26:	2300      	movs	r3, #0
 800ab28:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800ab2c:	4ba6      	ldr	r3, [pc, #664]	; (800adc8 <__svfiscanf_r+0x2c4>)
 800ab2e:	93a0      	str	r3, [sp, #640]	; 0x280
 800ab30:	f10d 0804 	add.w	r8, sp, #4
 800ab34:	4ba5      	ldr	r3, [pc, #660]	; (800adcc <__svfiscanf_r+0x2c8>)
 800ab36:	4fa6      	ldr	r7, [pc, #664]	; (800add0 <__svfiscanf_r+0x2cc>)
 800ab38:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800add4 <__svfiscanf_r+0x2d0>
 800ab3c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ab40:	93a1      	str	r3, [sp, #644]	; 0x284
 800ab42:	9500      	str	r5, [sp, #0]
 800ab44:	f89a 3000 	ldrb.w	r3, [sl]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	f000 8173 	beq.w	800ae34 <__svfiscanf_r+0x330>
 800ab4e:	5dd9      	ldrb	r1, [r3, r7]
 800ab50:	f011 0108 	ands.w	r1, r1, #8
 800ab54:	f10a 0501 	add.w	r5, sl, #1
 800ab58:	d019      	beq.n	800ab8e <__svfiscanf_r+0x8a>
 800ab5a:	6863      	ldr	r3, [r4, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dd0f      	ble.n	800ab80 <__svfiscanf_r+0x7c>
 800ab60:	6823      	ldr	r3, [r4, #0]
 800ab62:	781a      	ldrb	r2, [r3, #0]
 800ab64:	5cba      	ldrb	r2, [r7, r2]
 800ab66:	0711      	lsls	r1, r2, #28
 800ab68:	d401      	bmi.n	800ab6e <__svfiscanf_r+0x6a>
 800ab6a:	46aa      	mov	sl, r5
 800ab6c:	e7ea      	b.n	800ab44 <__svfiscanf_r+0x40>
 800ab6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ab70:	3201      	adds	r2, #1
 800ab72:	9245      	str	r2, [sp, #276]	; 0x114
 800ab74:	6862      	ldr	r2, [r4, #4]
 800ab76:	3301      	adds	r3, #1
 800ab78:	3a01      	subs	r2, #1
 800ab7a:	6062      	str	r2, [r4, #4]
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	e7ec      	b.n	800ab5a <__svfiscanf_r+0x56>
 800ab80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ab82:	4621      	mov	r1, r4
 800ab84:	4630      	mov	r0, r6
 800ab86:	4798      	blx	r3
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0e9      	beq.n	800ab60 <__svfiscanf_r+0x5c>
 800ab8c:	e7ed      	b.n	800ab6a <__svfiscanf_r+0x66>
 800ab8e:	2b25      	cmp	r3, #37	; 0x25
 800ab90:	d012      	beq.n	800abb8 <__svfiscanf_r+0xb4>
 800ab92:	469a      	mov	sl, r3
 800ab94:	6863      	ldr	r3, [r4, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f340 8095 	ble.w	800acc6 <__svfiscanf_r+0x1c2>
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	7813      	ldrb	r3, [r2, #0]
 800aba0:	4553      	cmp	r3, sl
 800aba2:	f040 8147 	bne.w	800ae34 <__svfiscanf_r+0x330>
 800aba6:	6863      	ldr	r3, [r4, #4]
 800aba8:	3b01      	subs	r3, #1
 800abaa:	6063      	str	r3, [r4, #4]
 800abac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800abae:	3201      	adds	r2, #1
 800abb0:	3301      	adds	r3, #1
 800abb2:	6022      	str	r2, [r4, #0]
 800abb4:	9345      	str	r3, [sp, #276]	; 0x114
 800abb6:	e7d8      	b.n	800ab6a <__svfiscanf_r+0x66>
 800abb8:	9141      	str	r1, [sp, #260]	; 0x104
 800abba:	9143      	str	r1, [sp, #268]	; 0x10c
 800abbc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800abc0:	2b2a      	cmp	r3, #42	; 0x2a
 800abc2:	bf02      	ittt	eq
 800abc4:	2310      	moveq	r3, #16
 800abc6:	9341      	streq	r3, [sp, #260]	; 0x104
 800abc8:	f10a 0502 	addeq.w	r5, sl, #2
 800abcc:	220a      	movs	r2, #10
 800abce:	46aa      	mov	sl, r5
 800abd0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800abd4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800abd8:	2b09      	cmp	r3, #9
 800abda:	d91e      	bls.n	800ac1a <__svfiscanf_r+0x116>
 800abdc:	487d      	ldr	r0, [pc, #500]	; (800add4 <__svfiscanf_r+0x2d0>)
 800abde:	2203      	movs	r2, #3
 800abe0:	f7f5 fb16 	bl	8000210 <memchr>
 800abe4:	b140      	cbz	r0, 800abf8 <__svfiscanf_r+0xf4>
 800abe6:	2301      	movs	r3, #1
 800abe8:	eba0 0009 	sub.w	r0, r0, r9
 800abec:	fa03 f000 	lsl.w	r0, r3, r0
 800abf0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800abf2:	4318      	orrs	r0, r3
 800abf4:	9041      	str	r0, [sp, #260]	; 0x104
 800abf6:	4655      	mov	r5, sl
 800abf8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800abfc:	2b78      	cmp	r3, #120	; 0x78
 800abfe:	d807      	bhi.n	800ac10 <__svfiscanf_r+0x10c>
 800ac00:	2b57      	cmp	r3, #87	; 0x57
 800ac02:	d811      	bhi.n	800ac28 <__svfiscanf_r+0x124>
 800ac04:	2b25      	cmp	r3, #37	; 0x25
 800ac06:	d0c4      	beq.n	800ab92 <__svfiscanf_r+0x8e>
 800ac08:	d858      	bhi.n	800acbc <__svfiscanf_r+0x1b8>
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 80c8 	beq.w	800ada0 <__svfiscanf_r+0x29c>
 800ac10:	2303      	movs	r3, #3
 800ac12:	9347      	str	r3, [sp, #284]	; 0x11c
 800ac14:	230a      	movs	r3, #10
 800ac16:	9342      	str	r3, [sp, #264]	; 0x108
 800ac18:	e07c      	b.n	800ad14 <__svfiscanf_r+0x210>
 800ac1a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800ac1c:	fb02 1103 	mla	r1, r2, r3, r1
 800ac20:	3930      	subs	r1, #48	; 0x30
 800ac22:	9143      	str	r1, [sp, #268]	; 0x10c
 800ac24:	4655      	mov	r5, sl
 800ac26:	e7d2      	b.n	800abce <__svfiscanf_r+0xca>
 800ac28:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800ac2c:	2a20      	cmp	r2, #32
 800ac2e:	d8ef      	bhi.n	800ac10 <__svfiscanf_r+0x10c>
 800ac30:	a101      	add	r1, pc, #4	; (adr r1, 800ac38 <__svfiscanf_r+0x134>)
 800ac32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac36:	bf00      	nop
 800ac38:	0800acff 	.word	0x0800acff
 800ac3c:	0800ac11 	.word	0x0800ac11
 800ac40:	0800ac11 	.word	0x0800ac11
 800ac44:	0800ad5d 	.word	0x0800ad5d
 800ac48:	0800ac11 	.word	0x0800ac11
 800ac4c:	0800ac11 	.word	0x0800ac11
 800ac50:	0800ac11 	.word	0x0800ac11
 800ac54:	0800ac11 	.word	0x0800ac11
 800ac58:	0800ac11 	.word	0x0800ac11
 800ac5c:	0800ac11 	.word	0x0800ac11
 800ac60:	0800ac11 	.word	0x0800ac11
 800ac64:	0800ad73 	.word	0x0800ad73
 800ac68:	0800ad49 	.word	0x0800ad49
 800ac6c:	0800acc3 	.word	0x0800acc3
 800ac70:	0800acc3 	.word	0x0800acc3
 800ac74:	0800acc3 	.word	0x0800acc3
 800ac78:	0800ac11 	.word	0x0800ac11
 800ac7c:	0800ad4d 	.word	0x0800ad4d
 800ac80:	0800ac11 	.word	0x0800ac11
 800ac84:	0800ac11 	.word	0x0800ac11
 800ac88:	0800ac11 	.word	0x0800ac11
 800ac8c:	0800ac11 	.word	0x0800ac11
 800ac90:	0800ad83 	.word	0x0800ad83
 800ac94:	0800ad55 	.word	0x0800ad55
 800ac98:	0800acf7 	.word	0x0800acf7
 800ac9c:	0800ac11 	.word	0x0800ac11
 800aca0:	0800ac11 	.word	0x0800ac11
 800aca4:	0800ad7f 	.word	0x0800ad7f
 800aca8:	0800ac11 	.word	0x0800ac11
 800acac:	0800ad49 	.word	0x0800ad49
 800acb0:	0800ac11 	.word	0x0800ac11
 800acb4:	0800ac11 	.word	0x0800ac11
 800acb8:	0800acff 	.word	0x0800acff
 800acbc:	3b45      	subs	r3, #69	; 0x45
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d8a6      	bhi.n	800ac10 <__svfiscanf_r+0x10c>
 800acc2:	2305      	movs	r3, #5
 800acc4:	e025      	b.n	800ad12 <__svfiscanf_r+0x20e>
 800acc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800acc8:	4621      	mov	r1, r4
 800acca:	4630      	mov	r0, r6
 800accc:	4798      	blx	r3
 800acce:	2800      	cmp	r0, #0
 800acd0:	f43f af64 	beq.w	800ab9c <__svfiscanf_r+0x98>
 800acd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acd6:	07da      	lsls	r2, r3, #31
 800acd8:	f140 80a4 	bpl.w	800ae24 <__svfiscanf_r+0x320>
 800acdc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800acde:	2800      	cmp	r0, #0
 800ace0:	d067      	beq.n	800adb2 <__svfiscanf_r+0x2ae>
 800ace2:	89a3      	ldrh	r3, [r4, #12]
 800ace4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ace8:	bf18      	it	ne
 800acea:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800acee:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800acf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800acf8:	f042 0220 	orr.w	r2, r2, #32
 800acfc:	9241      	str	r2, [sp, #260]	; 0x104
 800acfe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800ad00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad04:	9241      	str	r2, [sp, #260]	; 0x104
 800ad06:	2210      	movs	r2, #16
 800ad08:	2b6f      	cmp	r3, #111	; 0x6f
 800ad0a:	9242      	str	r2, [sp, #264]	; 0x108
 800ad0c:	bf34      	ite	cc
 800ad0e:	2303      	movcc	r3, #3
 800ad10:	2304      	movcs	r3, #4
 800ad12:	9347      	str	r3, [sp, #284]	; 0x11c
 800ad14:	6863      	ldr	r3, [r4, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dd4e      	ble.n	800adb8 <__svfiscanf_r+0x2b4>
 800ad1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ad1c:	065b      	lsls	r3, r3, #25
 800ad1e:	d404      	bmi.n	800ad2a <__svfiscanf_r+0x226>
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	781a      	ldrb	r2, [r3, #0]
 800ad24:	5cba      	ldrb	r2, [r7, r2]
 800ad26:	0710      	lsls	r0, r2, #28
 800ad28:	d456      	bmi.n	800add8 <__svfiscanf_r+0x2d4>
 800ad2a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	dc65      	bgt.n	800adfc <__svfiscanf_r+0x2f8>
 800ad30:	466b      	mov	r3, sp
 800ad32:	4622      	mov	r2, r4
 800ad34:	a941      	add	r1, sp, #260	; 0x104
 800ad36:	4630      	mov	r0, r6
 800ad38:	f000 f8b2 	bl	800aea0 <_scanf_chars>
 800ad3c:	2801      	cmp	r0, #1
 800ad3e:	d079      	beq.n	800ae34 <__svfiscanf_r+0x330>
 800ad40:	2802      	cmp	r0, #2
 800ad42:	f47f af12 	bne.w	800ab6a <__svfiscanf_r+0x66>
 800ad46:	e7c5      	b.n	800acd4 <__svfiscanf_r+0x1d0>
 800ad48:	220a      	movs	r2, #10
 800ad4a:	e7dd      	b.n	800ad08 <__svfiscanf_r+0x204>
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	9342      	str	r3, [sp, #264]	; 0x108
 800ad50:	2303      	movs	r3, #3
 800ad52:	e7de      	b.n	800ad12 <__svfiscanf_r+0x20e>
 800ad54:	2308      	movs	r3, #8
 800ad56:	9342      	str	r3, [sp, #264]	; 0x108
 800ad58:	2304      	movs	r3, #4
 800ad5a:	e7da      	b.n	800ad12 <__svfiscanf_r+0x20e>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4640      	mov	r0, r8
 800ad60:	f000 fae6 	bl	800b330 <__sccl>
 800ad64:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ad66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad6a:	9341      	str	r3, [sp, #260]	; 0x104
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e7cf      	b.n	800ad12 <__svfiscanf_r+0x20e>
 800ad72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ad74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad78:	9341      	str	r3, [sp, #260]	; 0x104
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e7c9      	b.n	800ad12 <__svfiscanf_r+0x20e>
 800ad7e:	2302      	movs	r3, #2
 800ad80:	e7c7      	b.n	800ad12 <__svfiscanf_r+0x20e>
 800ad82:	9841      	ldr	r0, [sp, #260]	; 0x104
 800ad84:	06c3      	lsls	r3, r0, #27
 800ad86:	f53f aef0 	bmi.w	800ab6a <__svfiscanf_r+0x66>
 800ad8a:	9b00      	ldr	r3, [sp, #0]
 800ad8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ad8e:	1d19      	adds	r1, r3, #4
 800ad90:	9100      	str	r1, [sp, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f010 0f01 	tst.w	r0, #1
 800ad98:	bf14      	ite	ne
 800ad9a:	801a      	strhne	r2, [r3, #0]
 800ad9c:	601a      	streq	r2, [r3, #0]
 800ad9e:	e6e4      	b.n	800ab6a <__svfiscanf_r+0x66>
 800ada0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada2:	07d8      	lsls	r0, r3, #31
 800ada4:	d405      	bmi.n	800adb2 <__svfiscanf_r+0x2ae>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	0599      	lsls	r1, r3, #22
 800adaa:	d402      	bmi.n	800adb2 <__svfiscanf_r+0x2ae>
 800adac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adae:	f7fe fdad 	bl	800990c <__retarget_lock_release_recursive>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800adb6:	e79a      	b.n	800acee <__svfiscanf_r+0x1ea>
 800adb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800adba:	4621      	mov	r1, r4
 800adbc:	4630      	mov	r0, r6
 800adbe:	4798      	blx	r3
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d0aa      	beq.n	800ad1a <__svfiscanf_r+0x216>
 800adc4:	e786      	b.n	800acd4 <__svfiscanf_r+0x1d0>
 800adc6:	bf00      	nop
 800adc8:	0800b5ad 	.word	0x0800b5ad
 800adcc:	0800b1e9 	.word	0x0800b1e9
 800add0:	0800c5d1 	.word	0x0800c5d1
 800add4:	0800c9a2 	.word	0x0800c9a2
 800add8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800adda:	3201      	adds	r2, #1
 800addc:	9245      	str	r2, [sp, #276]	; 0x114
 800adde:	6862      	ldr	r2, [r4, #4]
 800ade0:	3a01      	subs	r2, #1
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	6062      	str	r2, [r4, #4]
 800ade6:	dd02      	ble.n	800adee <__svfiscanf_r+0x2ea>
 800ade8:	3301      	adds	r3, #1
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	e798      	b.n	800ad20 <__svfiscanf_r+0x21c>
 800adee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800adf0:	4621      	mov	r1, r4
 800adf2:	4630      	mov	r0, r6
 800adf4:	4798      	blx	r3
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d092      	beq.n	800ad20 <__svfiscanf_r+0x21c>
 800adfa:	e76b      	b.n	800acd4 <__svfiscanf_r+0x1d0>
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	dc06      	bgt.n	800ae0e <__svfiscanf_r+0x30a>
 800ae00:	466b      	mov	r3, sp
 800ae02:	4622      	mov	r2, r4
 800ae04:	a941      	add	r1, sp, #260	; 0x104
 800ae06:	4630      	mov	r0, r6
 800ae08:	f000 f8a4 	bl	800af54 <_scanf_i>
 800ae0c:	e796      	b.n	800ad3c <__svfiscanf_r+0x238>
 800ae0e:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <__svfiscanf_r+0x348>)
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f43f aeaa 	beq.w	800ab6a <__svfiscanf_r+0x66>
 800ae16:	466b      	mov	r3, sp
 800ae18:	4622      	mov	r2, r4
 800ae1a:	a941      	add	r1, sp, #260	; 0x104
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	f7fb ffb1 	bl	8006d84 <_scanf_float>
 800ae22:	e78b      	b.n	800ad3c <__svfiscanf_r+0x238>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	0599      	lsls	r1, r3, #22
 800ae28:	f53f af58 	bmi.w	800acdc <__svfiscanf_r+0x1d8>
 800ae2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae2e:	f7fe fd6d 	bl	800990c <__retarget_lock_release_recursive>
 800ae32:	e753      	b.n	800acdc <__svfiscanf_r+0x1d8>
 800ae34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae36:	07da      	lsls	r2, r3, #31
 800ae38:	d405      	bmi.n	800ae46 <__svfiscanf_r+0x342>
 800ae3a:	89a3      	ldrh	r3, [r4, #12]
 800ae3c:	059b      	lsls	r3, r3, #22
 800ae3e:	d402      	bmi.n	800ae46 <__svfiscanf_r+0x342>
 800ae40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae42:	f7fe fd63 	bl	800990c <__retarget_lock_release_recursive>
 800ae46:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ae48:	e751      	b.n	800acee <__svfiscanf_r+0x1ea>
 800ae4a:	bf00      	nop
 800ae4c:	08006d85 	.word	0x08006d85

0800ae50 <_vfiscanf_r>:
 800ae50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae52:	460c      	mov	r4, r1
 800ae54:	4605      	mov	r5, r0
 800ae56:	b138      	cbz	r0, 800ae68 <_vfiscanf_r+0x18>
 800ae58:	6981      	ldr	r1, [r0, #24]
 800ae5a:	b929      	cbnz	r1, 800ae68 <_vfiscanf_r+0x18>
 800ae5c:	e9cd 2300 	strd	r2, r3, [sp]
 800ae60:	f7fe f924 	bl	80090ac <__sinit>
 800ae64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae68:	490a      	ldr	r1, [pc, #40]	; (800ae94 <_vfiscanf_r+0x44>)
 800ae6a:	428c      	cmp	r4, r1
 800ae6c:	d107      	bne.n	800ae7e <_vfiscanf_r+0x2e>
 800ae6e:	686c      	ldr	r4, [r5, #4]
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	b003      	add	sp, #12
 800ae76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae7a:	f7ff be43 	b.w	800ab04 <__svfiscanf_r>
 800ae7e:	4906      	ldr	r1, [pc, #24]	; (800ae98 <_vfiscanf_r+0x48>)
 800ae80:	428c      	cmp	r4, r1
 800ae82:	d101      	bne.n	800ae88 <_vfiscanf_r+0x38>
 800ae84:	68ac      	ldr	r4, [r5, #8]
 800ae86:	e7f3      	b.n	800ae70 <_vfiscanf_r+0x20>
 800ae88:	4904      	ldr	r1, [pc, #16]	; (800ae9c <_vfiscanf_r+0x4c>)
 800ae8a:	428c      	cmp	r4, r1
 800ae8c:	bf08      	it	eq
 800ae8e:	68ec      	ldreq	r4, [r5, #12]
 800ae90:	e7ee      	b.n	800ae70 <_vfiscanf_r+0x20>
 800ae92:	bf00      	nop
 800ae94:	0800c784 	.word	0x0800c784
 800ae98:	0800c7a4 	.word	0x0800c7a4
 800ae9c:	0800c764 	.word	0x0800c764

0800aea0 <_scanf_chars>:
 800aea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aea4:	4615      	mov	r5, r2
 800aea6:	688a      	ldr	r2, [r1, #8]
 800aea8:	4680      	mov	r8, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	b932      	cbnz	r2, 800aebc <_scanf_chars+0x1c>
 800aeae:	698a      	ldr	r2, [r1, #24]
 800aeb0:	2a00      	cmp	r2, #0
 800aeb2:	bf0c      	ite	eq
 800aeb4:	2201      	moveq	r2, #1
 800aeb6:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800aeba:	608a      	str	r2, [r1, #8]
 800aebc:	6822      	ldr	r2, [r4, #0]
 800aebe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800af50 <_scanf_chars+0xb0>
 800aec2:	06d1      	lsls	r1, r2, #27
 800aec4:	bf5f      	itttt	pl
 800aec6:	681a      	ldrpl	r2, [r3, #0]
 800aec8:	1d11      	addpl	r1, r2, #4
 800aeca:	6019      	strpl	r1, [r3, #0]
 800aecc:	6816      	ldrpl	r6, [r2, #0]
 800aece:	2700      	movs	r7, #0
 800aed0:	69a0      	ldr	r0, [r4, #24]
 800aed2:	b188      	cbz	r0, 800aef8 <_scanf_chars+0x58>
 800aed4:	2801      	cmp	r0, #1
 800aed6:	d107      	bne.n	800aee8 <_scanf_chars+0x48>
 800aed8:	682a      	ldr	r2, [r5, #0]
 800aeda:	7811      	ldrb	r1, [r2, #0]
 800aedc:	6962      	ldr	r2, [r4, #20]
 800aede:	5c52      	ldrb	r2, [r2, r1]
 800aee0:	b952      	cbnz	r2, 800aef8 <_scanf_chars+0x58>
 800aee2:	2f00      	cmp	r7, #0
 800aee4:	d031      	beq.n	800af4a <_scanf_chars+0xaa>
 800aee6:	e022      	b.n	800af2e <_scanf_chars+0x8e>
 800aee8:	2802      	cmp	r0, #2
 800aeea:	d120      	bne.n	800af2e <_scanf_chars+0x8e>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	f813 3009 	ldrb.w	r3, [r3, r9]
 800aef4:	071b      	lsls	r3, r3, #28
 800aef6:	d41a      	bmi.n	800af2e <_scanf_chars+0x8e>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	06da      	lsls	r2, r3, #27
 800aefc:	bf5e      	ittt	pl
 800aefe:	682b      	ldrpl	r3, [r5, #0]
 800af00:	781b      	ldrbpl	r3, [r3, #0]
 800af02:	f806 3b01 	strbpl.w	r3, [r6], #1
 800af06:	682a      	ldr	r2, [r5, #0]
 800af08:	686b      	ldr	r3, [r5, #4]
 800af0a:	3201      	adds	r2, #1
 800af0c:	602a      	str	r2, [r5, #0]
 800af0e:	68a2      	ldr	r2, [r4, #8]
 800af10:	3b01      	subs	r3, #1
 800af12:	3a01      	subs	r2, #1
 800af14:	606b      	str	r3, [r5, #4]
 800af16:	3701      	adds	r7, #1
 800af18:	60a2      	str	r2, [r4, #8]
 800af1a:	b142      	cbz	r2, 800af2e <_scanf_chars+0x8e>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	dcd7      	bgt.n	800aed0 <_scanf_chars+0x30>
 800af20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800af24:	4629      	mov	r1, r5
 800af26:	4640      	mov	r0, r8
 800af28:	4798      	blx	r3
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d0d0      	beq.n	800aed0 <_scanf_chars+0x30>
 800af2e:	6823      	ldr	r3, [r4, #0]
 800af30:	f013 0310 	ands.w	r3, r3, #16
 800af34:	d105      	bne.n	800af42 <_scanf_chars+0xa2>
 800af36:	68e2      	ldr	r2, [r4, #12]
 800af38:	3201      	adds	r2, #1
 800af3a:	60e2      	str	r2, [r4, #12]
 800af3c:	69a2      	ldr	r2, [r4, #24]
 800af3e:	b102      	cbz	r2, 800af42 <_scanf_chars+0xa2>
 800af40:	7033      	strb	r3, [r6, #0]
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	443b      	add	r3, r7
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	2000      	movs	r0, #0
 800af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4e:	bf00      	nop
 800af50:	0800c5d1 	.word	0x0800c5d1

0800af54 <_scanf_i>:
 800af54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af58:	4698      	mov	r8, r3
 800af5a:	4b76      	ldr	r3, [pc, #472]	; (800b134 <_scanf_i+0x1e0>)
 800af5c:	460c      	mov	r4, r1
 800af5e:	4682      	mov	sl, r0
 800af60:	4616      	mov	r6, r2
 800af62:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af66:	b087      	sub	sp, #28
 800af68:	ab03      	add	r3, sp, #12
 800af6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800af6e:	4b72      	ldr	r3, [pc, #456]	; (800b138 <_scanf_i+0x1e4>)
 800af70:	69a1      	ldr	r1, [r4, #24]
 800af72:	4a72      	ldr	r2, [pc, #456]	; (800b13c <_scanf_i+0x1e8>)
 800af74:	2903      	cmp	r1, #3
 800af76:	bf18      	it	ne
 800af78:	461a      	movne	r2, r3
 800af7a:	68a3      	ldr	r3, [r4, #8]
 800af7c:	9201      	str	r2, [sp, #4]
 800af7e:	1e5a      	subs	r2, r3, #1
 800af80:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af84:	bf88      	it	hi
 800af86:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800af8a:	4627      	mov	r7, r4
 800af8c:	bf82      	ittt	hi
 800af8e:	eb03 0905 	addhi.w	r9, r3, r5
 800af92:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af96:	60a3      	strhi	r3, [r4, #8]
 800af98:	f857 3b1c 	ldr.w	r3, [r7], #28
 800af9c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800afa0:	bf98      	it	ls
 800afa2:	f04f 0900 	movls.w	r9, #0
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	463d      	mov	r5, r7
 800afaa:	f04f 0b00 	mov.w	fp, #0
 800afae:	6831      	ldr	r1, [r6, #0]
 800afb0:	ab03      	add	r3, sp, #12
 800afb2:	7809      	ldrb	r1, [r1, #0]
 800afb4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800afb8:	2202      	movs	r2, #2
 800afba:	f7f5 f929 	bl	8000210 <memchr>
 800afbe:	b328      	cbz	r0, 800b00c <_scanf_i+0xb8>
 800afc0:	f1bb 0f01 	cmp.w	fp, #1
 800afc4:	d159      	bne.n	800b07a <_scanf_i+0x126>
 800afc6:	6862      	ldr	r2, [r4, #4]
 800afc8:	b92a      	cbnz	r2, 800afd6 <_scanf_i+0x82>
 800afca:	6822      	ldr	r2, [r4, #0]
 800afcc:	2308      	movs	r3, #8
 800afce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afd2:	6063      	str	r3, [r4, #4]
 800afd4:	6022      	str	r2, [r4, #0]
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800afdc:	6022      	str	r2, [r4, #0]
 800afde:	68a2      	ldr	r2, [r4, #8]
 800afe0:	1e51      	subs	r1, r2, #1
 800afe2:	60a1      	str	r1, [r4, #8]
 800afe4:	b192      	cbz	r2, 800b00c <_scanf_i+0xb8>
 800afe6:	6832      	ldr	r2, [r6, #0]
 800afe8:	1c51      	adds	r1, r2, #1
 800afea:	6031      	str	r1, [r6, #0]
 800afec:	7812      	ldrb	r2, [r2, #0]
 800afee:	f805 2b01 	strb.w	r2, [r5], #1
 800aff2:	6872      	ldr	r2, [r6, #4]
 800aff4:	3a01      	subs	r2, #1
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	6072      	str	r2, [r6, #4]
 800affa:	dc07      	bgt.n	800b00c <_scanf_i+0xb8>
 800affc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b000:	4631      	mov	r1, r6
 800b002:	4650      	mov	r0, sl
 800b004:	4790      	blx	r2
 800b006:	2800      	cmp	r0, #0
 800b008:	f040 8085 	bne.w	800b116 <_scanf_i+0x1c2>
 800b00c:	f10b 0b01 	add.w	fp, fp, #1
 800b010:	f1bb 0f03 	cmp.w	fp, #3
 800b014:	d1cb      	bne.n	800afae <_scanf_i+0x5a>
 800b016:	6863      	ldr	r3, [r4, #4]
 800b018:	b90b      	cbnz	r3, 800b01e <_scanf_i+0xca>
 800b01a:	230a      	movs	r3, #10
 800b01c:	6063      	str	r3, [r4, #4]
 800b01e:	6863      	ldr	r3, [r4, #4]
 800b020:	4947      	ldr	r1, [pc, #284]	; (800b140 <_scanf_i+0x1ec>)
 800b022:	6960      	ldr	r0, [r4, #20]
 800b024:	1ac9      	subs	r1, r1, r3
 800b026:	f000 f983 	bl	800b330 <__sccl>
 800b02a:	f04f 0b00 	mov.w	fp, #0
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	6822      	ldr	r2, [r4, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d03d      	beq.n	800b0b2 <_scanf_i+0x15e>
 800b036:	6831      	ldr	r1, [r6, #0]
 800b038:	6960      	ldr	r0, [r4, #20]
 800b03a:	f891 c000 	ldrb.w	ip, [r1]
 800b03e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b042:	2800      	cmp	r0, #0
 800b044:	d035      	beq.n	800b0b2 <_scanf_i+0x15e>
 800b046:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b04a:	d124      	bne.n	800b096 <_scanf_i+0x142>
 800b04c:	0510      	lsls	r0, r2, #20
 800b04e:	d522      	bpl.n	800b096 <_scanf_i+0x142>
 800b050:	f10b 0b01 	add.w	fp, fp, #1
 800b054:	f1b9 0f00 	cmp.w	r9, #0
 800b058:	d003      	beq.n	800b062 <_scanf_i+0x10e>
 800b05a:	3301      	adds	r3, #1
 800b05c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b060:	60a3      	str	r3, [r4, #8]
 800b062:	6873      	ldr	r3, [r6, #4]
 800b064:	3b01      	subs	r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	6073      	str	r3, [r6, #4]
 800b06a:	dd1b      	ble.n	800b0a4 <_scanf_i+0x150>
 800b06c:	6833      	ldr	r3, [r6, #0]
 800b06e:	3301      	adds	r3, #1
 800b070:	6033      	str	r3, [r6, #0]
 800b072:	68a3      	ldr	r3, [r4, #8]
 800b074:	3b01      	subs	r3, #1
 800b076:	60a3      	str	r3, [r4, #8]
 800b078:	e7d9      	b.n	800b02e <_scanf_i+0xda>
 800b07a:	f1bb 0f02 	cmp.w	fp, #2
 800b07e:	d1ae      	bne.n	800afde <_scanf_i+0x8a>
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b086:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b08a:	d1bf      	bne.n	800b00c <_scanf_i+0xb8>
 800b08c:	2310      	movs	r3, #16
 800b08e:	6063      	str	r3, [r4, #4]
 800b090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b094:	e7a2      	b.n	800afdc <_scanf_i+0x88>
 800b096:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b09a:	6022      	str	r2, [r4, #0]
 800b09c:	780b      	ldrb	r3, [r1, #0]
 800b09e:	f805 3b01 	strb.w	r3, [r5], #1
 800b0a2:	e7de      	b.n	800b062 <_scanf_i+0x10e>
 800b0a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	4798      	blx	r3
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0df      	beq.n	800b072 <_scanf_i+0x11e>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	05db      	lsls	r3, r3, #23
 800b0b6:	d50d      	bpl.n	800b0d4 <_scanf_i+0x180>
 800b0b8:	42bd      	cmp	r5, r7
 800b0ba:	d909      	bls.n	800b0d0 <_scanf_i+0x17c>
 800b0bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b0c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0c4:	4632      	mov	r2, r6
 800b0c6:	4650      	mov	r0, sl
 800b0c8:	4798      	blx	r3
 800b0ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800b0ce:	464d      	mov	r5, r9
 800b0d0:	42bd      	cmp	r5, r7
 800b0d2:	d02d      	beq.n	800b130 <_scanf_i+0x1dc>
 800b0d4:	6822      	ldr	r2, [r4, #0]
 800b0d6:	f012 0210 	ands.w	r2, r2, #16
 800b0da:	d113      	bne.n	800b104 <_scanf_i+0x1b0>
 800b0dc:	702a      	strb	r2, [r5, #0]
 800b0de:	6863      	ldr	r3, [r4, #4]
 800b0e0:	9e01      	ldr	r6, [sp, #4]
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	4650      	mov	r0, sl
 800b0e6:	47b0      	blx	r6
 800b0e8:	6821      	ldr	r1, [r4, #0]
 800b0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ee:	f011 0f20 	tst.w	r1, #32
 800b0f2:	d013      	beq.n	800b11c <_scanf_i+0x1c8>
 800b0f4:	1d1a      	adds	r2, r3, #4
 800b0f6:	f8c8 2000 	str.w	r2, [r8]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	6018      	str	r0, [r3, #0]
 800b0fe:	68e3      	ldr	r3, [r4, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	60e3      	str	r3, [r4, #12]
 800b104:	1bed      	subs	r5, r5, r7
 800b106:	44ab      	add	fp, r5
 800b108:	6925      	ldr	r5, [r4, #16]
 800b10a:	445d      	add	r5, fp
 800b10c:	6125      	str	r5, [r4, #16]
 800b10e:	2000      	movs	r0, #0
 800b110:	b007      	add	sp, #28
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	f04f 0b00 	mov.w	fp, #0
 800b11a:	e7ca      	b.n	800b0b2 <_scanf_i+0x15e>
 800b11c:	1d1a      	adds	r2, r3, #4
 800b11e:	f8c8 2000 	str.w	r2, [r8]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f011 0f01 	tst.w	r1, #1
 800b128:	bf14      	ite	ne
 800b12a:	8018      	strhne	r0, [r3, #0]
 800b12c:	6018      	streq	r0, [r3, #0]
 800b12e:	e7e6      	b.n	800b0fe <_scanf_i+0x1aa>
 800b130:	2001      	movs	r0, #1
 800b132:	e7ed      	b.n	800b110 <_scanf_i+0x1bc>
 800b134:	0800bcc0 	.word	0x0800bcc0
 800b138:	0800b535 	.word	0x0800b535
 800b13c:	0800815d 	.word	0x0800815d
 800b140:	0800c9c6 	.word	0x0800c9c6

0800b144 <_putc_r>:
 800b144:	b570      	push	{r4, r5, r6, lr}
 800b146:	460d      	mov	r5, r1
 800b148:	4614      	mov	r4, r2
 800b14a:	4606      	mov	r6, r0
 800b14c:	b118      	cbz	r0, 800b156 <_putc_r+0x12>
 800b14e:	6983      	ldr	r3, [r0, #24]
 800b150:	b90b      	cbnz	r3, 800b156 <_putc_r+0x12>
 800b152:	f7fd ffab 	bl	80090ac <__sinit>
 800b156:	4b1c      	ldr	r3, [pc, #112]	; (800b1c8 <_putc_r+0x84>)
 800b158:	429c      	cmp	r4, r3
 800b15a:	d124      	bne.n	800b1a6 <_putc_r+0x62>
 800b15c:	6874      	ldr	r4, [r6, #4]
 800b15e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b160:	07d8      	lsls	r0, r3, #31
 800b162:	d405      	bmi.n	800b170 <_putc_r+0x2c>
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	0599      	lsls	r1, r3, #22
 800b168:	d402      	bmi.n	800b170 <_putc_r+0x2c>
 800b16a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b16c:	f7fe fbcd 	bl	800990a <__retarget_lock_acquire_recursive>
 800b170:	68a3      	ldr	r3, [r4, #8]
 800b172:	3b01      	subs	r3, #1
 800b174:	2b00      	cmp	r3, #0
 800b176:	60a3      	str	r3, [r4, #8]
 800b178:	da05      	bge.n	800b186 <_putc_r+0x42>
 800b17a:	69a2      	ldr	r2, [r4, #24]
 800b17c:	4293      	cmp	r3, r2
 800b17e:	db1c      	blt.n	800b1ba <_putc_r+0x76>
 800b180:	b2eb      	uxtb	r3, r5
 800b182:	2b0a      	cmp	r3, #10
 800b184:	d019      	beq.n	800b1ba <_putc_r+0x76>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	6022      	str	r2, [r4, #0]
 800b18c:	701d      	strb	r5, [r3, #0]
 800b18e:	b2ed      	uxtb	r5, r5
 800b190:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b192:	07da      	lsls	r2, r3, #31
 800b194:	d405      	bmi.n	800b1a2 <_putc_r+0x5e>
 800b196:	89a3      	ldrh	r3, [r4, #12]
 800b198:	059b      	lsls	r3, r3, #22
 800b19a:	d402      	bmi.n	800b1a2 <_putc_r+0x5e>
 800b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b19e:	f7fe fbb5 	bl	800990c <__retarget_lock_release_recursive>
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	bd70      	pop	{r4, r5, r6, pc}
 800b1a6:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <_putc_r+0x88>)
 800b1a8:	429c      	cmp	r4, r3
 800b1aa:	d101      	bne.n	800b1b0 <_putc_r+0x6c>
 800b1ac:	68b4      	ldr	r4, [r6, #8]
 800b1ae:	e7d6      	b.n	800b15e <_putc_r+0x1a>
 800b1b0:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <_putc_r+0x8c>)
 800b1b2:	429c      	cmp	r4, r3
 800b1b4:	bf08      	it	eq
 800b1b6:	68f4      	ldreq	r4, [r6, #12]
 800b1b8:	e7d1      	b.n	800b15e <_putc_r+0x1a>
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	4622      	mov	r2, r4
 800b1be:	4630      	mov	r0, r6
 800b1c0:	f000 fa8c 	bl	800b6dc <__swbuf_r>
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	e7e3      	b.n	800b190 <_putc_r+0x4c>
 800b1c8:	0800c784 	.word	0x0800c784
 800b1cc:	0800c7a4 	.word	0x0800c7a4
 800b1d0:	0800c764 	.word	0x0800c764

0800b1d4 <lflush>:
 800b1d4:	8983      	ldrh	r3, [r0, #12]
 800b1d6:	f003 0309 	and.w	r3, r3, #9
 800b1da:	2b09      	cmp	r3, #9
 800b1dc:	d101      	bne.n	800b1e2 <lflush+0xe>
 800b1de:	f7fd befb 	b.w	8008fd8 <fflush>
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	4770      	bx	lr
	...

0800b1e8 <__srefill_r>:
 800b1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	4605      	mov	r5, r0
 800b1ee:	b118      	cbz	r0, 800b1f8 <__srefill_r+0x10>
 800b1f0:	6983      	ldr	r3, [r0, #24]
 800b1f2:	b90b      	cbnz	r3, 800b1f8 <__srefill_r+0x10>
 800b1f4:	f7fd ff5a 	bl	80090ac <__sinit>
 800b1f8:	4b3b      	ldr	r3, [pc, #236]	; (800b2e8 <__srefill_r+0x100>)
 800b1fa:	429c      	cmp	r4, r3
 800b1fc:	d10a      	bne.n	800b214 <__srefill_r+0x2c>
 800b1fe:	686c      	ldr	r4, [r5, #4]
 800b200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b204:	2300      	movs	r3, #0
 800b206:	6063      	str	r3, [r4, #4]
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	069e      	lsls	r6, r3, #26
 800b20c:	d50c      	bpl.n	800b228 <__srefill_r+0x40>
 800b20e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b212:	e066      	b.n	800b2e2 <__srefill_r+0xfa>
 800b214:	4b35      	ldr	r3, [pc, #212]	; (800b2ec <__srefill_r+0x104>)
 800b216:	429c      	cmp	r4, r3
 800b218:	d101      	bne.n	800b21e <__srefill_r+0x36>
 800b21a:	68ac      	ldr	r4, [r5, #8]
 800b21c:	e7f0      	b.n	800b200 <__srefill_r+0x18>
 800b21e:	4b34      	ldr	r3, [pc, #208]	; (800b2f0 <__srefill_r+0x108>)
 800b220:	429c      	cmp	r4, r3
 800b222:	bf08      	it	eq
 800b224:	68ec      	ldreq	r4, [r5, #12]
 800b226:	e7eb      	b.n	800b200 <__srefill_r+0x18>
 800b228:	0758      	lsls	r0, r3, #29
 800b22a:	d448      	bmi.n	800b2be <__srefill_r+0xd6>
 800b22c:	06d9      	lsls	r1, r3, #27
 800b22e:	d405      	bmi.n	800b23c <__srefill_r+0x54>
 800b230:	2309      	movs	r3, #9
 800b232:	602b      	str	r3, [r5, #0]
 800b234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	e7e8      	b.n	800b20e <__srefill_r+0x26>
 800b23c:	071a      	lsls	r2, r3, #28
 800b23e:	d50b      	bpl.n	800b258 <__srefill_r+0x70>
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f7fd fe8c 	bl	8008f60 <_fflush_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d1e0      	bne.n	800b20e <__srefill_r+0x26>
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	60a0      	str	r0, [r4, #8]
 800b250:	f023 0308 	bic.w	r3, r3, #8
 800b254:	81a3      	strh	r3, [r4, #12]
 800b256:	61a0      	str	r0, [r4, #24]
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	f043 0304 	orr.w	r3, r3, #4
 800b25e:	81a3      	strh	r3, [r4, #12]
 800b260:	6923      	ldr	r3, [r4, #16]
 800b262:	b91b      	cbnz	r3, 800b26c <__srefill_r+0x84>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f7fe fb76 	bl	8009958 <__smakebuf_r>
 800b26c:	89a6      	ldrh	r6, [r4, #12]
 800b26e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800b272:	07b3      	lsls	r3, r6, #30
 800b274:	d00f      	beq.n	800b296 <__srefill_r+0xae>
 800b276:	2301      	movs	r3, #1
 800b278:	81a3      	strh	r3, [r4, #12]
 800b27a:	4b1e      	ldr	r3, [pc, #120]	; (800b2f4 <__srefill_r+0x10c>)
 800b27c:	491e      	ldr	r1, [pc, #120]	; (800b2f8 <__srefill_r+0x110>)
 800b27e:	6818      	ldr	r0, [r3, #0]
 800b280:	f006 0609 	and.w	r6, r6, #9
 800b284:	f7fd ff90 	bl	80091a8 <_fwalk>
 800b288:	2e09      	cmp	r6, #9
 800b28a:	81a7      	strh	r7, [r4, #12]
 800b28c:	d103      	bne.n	800b296 <__srefill_r+0xae>
 800b28e:	4621      	mov	r1, r4
 800b290:	4628      	mov	r0, r5
 800b292:	f7fd fddf 	bl	8008e54 <__sflush_r>
 800b296:	6922      	ldr	r2, [r4, #16]
 800b298:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b29a:	6963      	ldr	r3, [r4, #20]
 800b29c:	6a21      	ldr	r1, [r4, #32]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	47b0      	blx	r6
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	6060      	str	r0, [r4, #4]
 800b2a8:	dc1c      	bgt.n	800b2e4 <__srefill_r+0xfc>
 800b2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ae:	bf17      	itett	ne
 800b2b0:	2200      	movne	r2, #0
 800b2b2:	f043 0320 	orreq.w	r3, r3, #32
 800b2b6:	6062      	strne	r2, [r4, #4]
 800b2b8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800b2bc:	e7bc      	b.n	800b238 <__srefill_r+0x50>
 800b2be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2c0:	2900      	cmp	r1, #0
 800b2c2:	d0cd      	beq.n	800b260 <__srefill_r+0x78>
 800b2c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2c8:	4299      	cmp	r1, r3
 800b2ca:	d002      	beq.n	800b2d2 <__srefill_r+0xea>
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	f7ff f883 	bl	800a3d8 <_free_r>
 800b2d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2d4:	6063      	str	r3, [r4, #4]
 800b2d6:	2000      	movs	r0, #0
 800b2d8:	6360      	str	r0, [r4, #52]	; 0x34
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d0c0      	beq.n	800b260 <__srefill_r+0x78>
 800b2de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	e7fc      	b.n	800b2e2 <__srefill_r+0xfa>
 800b2e8:	0800c784 	.word	0x0800c784
 800b2ec:	0800c7a4 	.word	0x0800c7a4
 800b2f0:	0800c764 	.word	0x0800c764
 800b2f4:	0800c540 	.word	0x0800c540
 800b2f8:	0800b1d5 	.word	0x0800b1d5
 800b2fc:	00000000 	.word	0x00000000

0800b300 <nan>:
 800b300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b308 <nan+0x8>
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	00000000 	.word	0x00000000
 800b30c:	7ff80000 	.word	0x7ff80000

0800b310 <_sbrk_r>:
 800b310:	b538      	push	{r3, r4, r5, lr}
 800b312:	4d06      	ldr	r5, [pc, #24]	; (800b32c <_sbrk_r+0x1c>)
 800b314:	2300      	movs	r3, #0
 800b316:	4604      	mov	r4, r0
 800b318:	4608      	mov	r0, r1
 800b31a:	602b      	str	r3, [r5, #0]
 800b31c:	f7fa ffde 	bl	80062dc <_sbrk>
 800b320:	1c43      	adds	r3, r0, #1
 800b322:	d102      	bne.n	800b32a <_sbrk_r+0x1a>
 800b324:	682b      	ldr	r3, [r5, #0]
 800b326:	b103      	cbz	r3, 800b32a <_sbrk_r+0x1a>
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	20000438 	.word	0x20000438

0800b330 <__sccl>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	780b      	ldrb	r3, [r1, #0]
 800b334:	4604      	mov	r4, r0
 800b336:	2b5e      	cmp	r3, #94	; 0x5e
 800b338:	bf0b      	itete	eq
 800b33a:	784b      	ldrbeq	r3, [r1, #1]
 800b33c:	1c48      	addne	r0, r1, #1
 800b33e:	1c88      	addeq	r0, r1, #2
 800b340:	2200      	movne	r2, #0
 800b342:	bf08      	it	eq
 800b344:	2201      	moveq	r2, #1
 800b346:	1e61      	subs	r1, r4, #1
 800b348:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b34c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b350:	42a9      	cmp	r1, r5
 800b352:	d1fb      	bne.n	800b34c <__sccl+0x1c>
 800b354:	b90b      	cbnz	r3, 800b35a <__sccl+0x2a>
 800b356:	3801      	subs	r0, #1
 800b358:	bd70      	pop	{r4, r5, r6, pc}
 800b35a:	f082 0201 	eor.w	r2, r2, #1
 800b35e:	54e2      	strb	r2, [r4, r3]
 800b360:	4605      	mov	r5, r0
 800b362:	4628      	mov	r0, r5
 800b364:	f810 1b01 	ldrb.w	r1, [r0], #1
 800b368:	292d      	cmp	r1, #45	; 0x2d
 800b36a:	d006      	beq.n	800b37a <__sccl+0x4a>
 800b36c:	295d      	cmp	r1, #93	; 0x5d
 800b36e:	d0f3      	beq.n	800b358 <__sccl+0x28>
 800b370:	b909      	cbnz	r1, 800b376 <__sccl+0x46>
 800b372:	4628      	mov	r0, r5
 800b374:	e7f0      	b.n	800b358 <__sccl+0x28>
 800b376:	460b      	mov	r3, r1
 800b378:	e7f1      	b.n	800b35e <__sccl+0x2e>
 800b37a:	786e      	ldrb	r6, [r5, #1]
 800b37c:	2e5d      	cmp	r6, #93	; 0x5d
 800b37e:	d0fa      	beq.n	800b376 <__sccl+0x46>
 800b380:	42b3      	cmp	r3, r6
 800b382:	dcf8      	bgt.n	800b376 <__sccl+0x46>
 800b384:	3502      	adds	r5, #2
 800b386:	4619      	mov	r1, r3
 800b388:	3101      	adds	r1, #1
 800b38a:	428e      	cmp	r6, r1
 800b38c:	5462      	strb	r2, [r4, r1]
 800b38e:	dcfb      	bgt.n	800b388 <__sccl+0x58>
 800b390:	1af1      	subs	r1, r6, r3
 800b392:	3901      	subs	r1, #1
 800b394:	1c58      	adds	r0, r3, #1
 800b396:	42b3      	cmp	r3, r6
 800b398:	bfa8      	it	ge
 800b39a:	2100      	movge	r1, #0
 800b39c:	1843      	adds	r3, r0, r1
 800b39e:	e7e0      	b.n	800b362 <__sccl+0x32>

0800b3a0 <__sread>:
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a8:	f000 fb42 	bl	800ba30 <_read_r>
 800b3ac:	2800      	cmp	r0, #0
 800b3ae:	bfab      	itete	ge
 800b3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b3b4:	181b      	addge	r3, r3, r0
 800b3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3ba:	bfac      	ite	ge
 800b3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3be:	81a3      	strhlt	r3, [r4, #12]
 800b3c0:	bd10      	pop	{r4, pc}

0800b3c2 <__swrite>:
 800b3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c6:	461f      	mov	r7, r3
 800b3c8:	898b      	ldrh	r3, [r1, #12]
 800b3ca:	05db      	lsls	r3, r3, #23
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	4616      	mov	r6, r2
 800b3d2:	d505      	bpl.n	800b3e0 <__swrite+0x1e>
 800b3d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3d8:	2302      	movs	r3, #2
 800b3da:	2200      	movs	r2, #0
 800b3dc:	f000 fac0 	bl	800b960 <_lseek_r>
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3ea:	81a3      	strh	r3, [r4, #12]
 800b3ec:	4632      	mov	r2, r6
 800b3ee:	463b      	mov	r3, r7
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f6:	f000 b9d1 	b.w	800b79c <_write_r>

0800b3fa <__sseek>:
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b402:	f000 faad 	bl	800b960 <_lseek_r>
 800b406:	1c43      	adds	r3, r0, #1
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	bf15      	itete	ne
 800b40c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b416:	81a3      	strheq	r3, [r4, #12]
 800b418:	bf18      	it	ne
 800b41a:	81a3      	strhne	r3, [r4, #12]
 800b41c:	bd10      	pop	{r4, pc}

0800b41e <__sclose>:
 800b41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b422:	f000 ba59 	b.w	800b8d8 <_close_r>

0800b426 <strncmp>:
 800b426:	b510      	push	{r4, lr}
 800b428:	b17a      	cbz	r2, 800b44a <strncmp+0x24>
 800b42a:	4603      	mov	r3, r0
 800b42c:	3901      	subs	r1, #1
 800b42e:	1884      	adds	r4, r0, r2
 800b430:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b434:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b438:	4290      	cmp	r0, r2
 800b43a:	d101      	bne.n	800b440 <strncmp+0x1a>
 800b43c:	42a3      	cmp	r3, r4
 800b43e:	d101      	bne.n	800b444 <strncmp+0x1e>
 800b440:	1a80      	subs	r0, r0, r2
 800b442:	bd10      	pop	{r4, pc}
 800b444:	2800      	cmp	r0, #0
 800b446:	d1f3      	bne.n	800b430 <strncmp+0xa>
 800b448:	e7fa      	b.n	800b440 <strncmp+0x1a>
 800b44a:	4610      	mov	r0, r2
 800b44c:	e7f9      	b.n	800b442 <strncmp+0x1c>
	...

0800b450 <_strtoul_l.constprop.0>:
 800b450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b454:	4f36      	ldr	r7, [pc, #216]	; (800b530 <_strtoul_l.constprop.0+0xe0>)
 800b456:	4686      	mov	lr, r0
 800b458:	460d      	mov	r5, r1
 800b45a:	4628      	mov	r0, r5
 800b45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b460:	5de6      	ldrb	r6, [r4, r7]
 800b462:	f016 0608 	ands.w	r6, r6, #8
 800b466:	d1f8      	bne.n	800b45a <_strtoul_l.constprop.0+0xa>
 800b468:	2c2d      	cmp	r4, #45	; 0x2d
 800b46a:	d12f      	bne.n	800b4cc <_strtoul_l.constprop.0+0x7c>
 800b46c:	782c      	ldrb	r4, [r5, #0]
 800b46e:	2601      	movs	r6, #1
 800b470:	1c85      	adds	r5, r0, #2
 800b472:	2b00      	cmp	r3, #0
 800b474:	d057      	beq.n	800b526 <_strtoul_l.constprop.0+0xd6>
 800b476:	2b10      	cmp	r3, #16
 800b478:	d109      	bne.n	800b48e <_strtoul_l.constprop.0+0x3e>
 800b47a:	2c30      	cmp	r4, #48	; 0x30
 800b47c:	d107      	bne.n	800b48e <_strtoul_l.constprop.0+0x3e>
 800b47e:	7828      	ldrb	r0, [r5, #0]
 800b480:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b484:	2858      	cmp	r0, #88	; 0x58
 800b486:	d149      	bne.n	800b51c <_strtoul_l.constprop.0+0xcc>
 800b488:	786c      	ldrb	r4, [r5, #1]
 800b48a:	2310      	movs	r3, #16
 800b48c:	3502      	adds	r5, #2
 800b48e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b492:	2700      	movs	r7, #0
 800b494:	fbb8 f8f3 	udiv	r8, r8, r3
 800b498:	fb03 f908 	mul.w	r9, r3, r8
 800b49c:	ea6f 0909 	mvn.w	r9, r9
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b4a6:	f1bc 0f09 	cmp.w	ip, #9
 800b4aa:	d814      	bhi.n	800b4d6 <_strtoul_l.constprop.0+0x86>
 800b4ac:	4664      	mov	r4, ip
 800b4ae:	42a3      	cmp	r3, r4
 800b4b0:	dd22      	ble.n	800b4f8 <_strtoul_l.constprop.0+0xa8>
 800b4b2:	2f00      	cmp	r7, #0
 800b4b4:	db1d      	blt.n	800b4f2 <_strtoul_l.constprop.0+0xa2>
 800b4b6:	4580      	cmp	r8, r0
 800b4b8:	d31b      	bcc.n	800b4f2 <_strtoul_l.constprop.0+0xa2>
 800b4ba:	d101      	bne.n	800b4c0 <_strtoul_l.constprop.0+0x70>
 800b4bc:	45a1      	cmp	r9, r4
 800b4be:	db18      	blt.n	800b4f2 <_strtoul_l.constprop.0+0xa2>
 800b4c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b4c4:	2701      	movs	r7, #1
 800b4c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4ca:	e7ea      	b.n	800b4a2 <_strtoul_l.constprop.0+0x52>
 800b4cc:	2c2b      	cmp	r4, #43	; 0x2b
 800b4ce:	bf04      	itt	eq
 800b4d0:	782c      	ldrbeq	r4, [r5, #0]
 800b4d2:	1c85      	addeq	r5, r0, #2
 800b4d4:	e7cd      	b.n	800b472 <_strtoul_l.constprop.0+0x22>
 800b4d6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b4da:	f1bc 0f19 	cmp.w	ip, #25
 800b4de:	d801      	bhi.n	800b4e4 <_strtoul_l.constprop.0+0x94>
 800b4e0:	3c37      	subs	r4, #55	; 0x37
 800b4e2:	e7e4      	b.n	800b4ae <_strtoul_l.constprop.0+0x5e>
 800b4e4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4e8:	f1bc 0f19 	cmp.w	ip, #25
 800b4ec:	d804      	bhi.n	800b4f8 <_strtoul_l.constprop.0+0xa8>
 800b4ee:	3c57      	subs	r4, #87	; 0x57
 800b4f0:	e7dd      	b.n	800b4ae <_strtoul_l.constprop.0+0x5e>
 800b4f2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b4f6:	e7e6      	b.n	800b4c6 <_strtoul_l.constprop.0+0x76>
 800b4f8:	2f00      	cmp	r7, #0
 800b4fa:	da07      	bge.n	800b50c <_strtoul_l.constprop.0+0xbc>
 800b4fc:	2322      	movs	r3, #34	; 0x22
 800b4fe:	f8ce 3000 	str.w	r3, [lr]
 800b502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b506:	b932      	cbnz	r2, 800b516 <_strtoul_l.constprop.0+0xc6>
 800b508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b50c:	b106      	cbz	r6, 800b510 <_strtoul_l.constprop.0+0xc0>
 800b50e:	4240      	negs	r0, r0
 800b510:	2a00      	cmp	r2, #0
 800b512:	d0f9      	beq.n	800b508 <_strtoul_l.constprop.0+0xb8>
 800b514:	b107      	cbz	r7, 800b518 <_strtoul_l.constprop.0+0xc8>
 800b516:	1e69      	subs	r1, r5, #1
 800b518:	6011      	str	r1, [r2, #0]
 800b51a:	e7f5      	b.n	800b508 <_strtoul_l.constprop.0+0xb8>
 800b51c:	2430      	movs	r4, #48	; 0x30
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1b5      	bne.n	800b48e <_strtoul_l.constprop.0+0x3e>
 800b522:	2308      	movs	r3, #8
 800b524:	e7b3      	b.n	800b48e <_strtoul_l.constprop.0+0x3e>
 800b526:	2c30      	cmp	r4, #48	; 0x30
 800b528:	d0a9      	beq.n	800b47e <_strtoul_l.constprop.0+0x2e>
 800b52a:	230a      	movs	r3, #10
 800b52c:	e7af      	b.n	800b48e <_strtoul_l.constprop.0+0x3e>
 800b52e:	bf00      	nop
 800b530:	0800c5d1 	.word	0x0800c5d1

0800b534 <_strtoul_r>:
 800b534:	f7ff bf8c 	b.w	800b450 <_strtoul_l.constprop.0>

0800b538 <__submore>:
 800b538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53c:	460c      	mov	r4, r1
 800b53e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b544:	4299      	cmp	r1, r3
 800b546:	d11d      	bne.n	800b584 <__submore+0x4c>
 800b548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b54c:	f7fe ffb0 	bl	800a4b0 <_malloc_r>
 800b550:	b918      	cbnz	r0, 800b55a <__submore+0x22>
 800b552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b55e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b560:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b564:	6360      	str	r0, [r4, #52]	; 0x34
 800b566:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b56a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b56e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b572:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b576:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b57a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b57e:	6020      	str	r0, [r4, #0]
 800b580:	2000      	movs	r0, #0
 800b582:	e7e8      	b.n	800b556 <__submore+0x1e>
 800b584:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b586:	0077      	lsls	r7, r6, #1
 800b588:	463a      	mov	r2, r7
 800b58a:	f000 fa21 	bl	800b9d0 <_realloc_r>
 800b58e:	4605      	mov	r5, r0
 800b590:	2800      	cmp	r0, #0
 800b592:	d0de      	beq.n	800b552 <__submore+0x1a>
 800b594:	eb00 0806 	add.w	r8, r0, r6
 800b598:	4601      	mov	r1, r0
 800b59a:	4632      	mov	r2, r6
 800b59c:	4640      	mov	r0, r8
 800b59e:	f7fe fa35 	bl	8009a0c <memcpy>
 800b5a2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b5a6:	f8c4 8000 	str.w	r8, [r4]
 800b5aa:	e7e9      	b.n	800b580 <__submore+0x48>

0800b5ac <_ungetc_r>:
 800b5ac:	b570      	push	{r4, r5, r6, lr}
 800b5ae:	4614      	mov	r4, r2
 800b5b0:	1c4a      	adds	r2, r1, #1
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	d103      	bne.n	800b5c0 <_ungetc_r+0x14>
 800b5b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b5bc:	4628      	mov	r0, r5
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	b118      	cbz	r0, 800b5ca <_ungetc_r+0x1e>
 800b5c2:	6983      	ldr	r3, [r0, #24]
 800b5c4:	b90b      	cbnz	r3, 800b5ca <_ungetc_r+0x1e>
 800b5c6:	f7fd fd71 	bl	80090ac <__sinit>
 800b5ca:	4b41      	ldr	r3, [pc, #260]	; (800b6d0 <_ungetc_r+0x124>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d11d      	bne.n	800b60c <_ungetc_r+0x60>
 800b5d0:	6874      	ldr	r4, [r6, #4]
 800b5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5d4:	07db      	lsls	r3, r3, #31
 800b5d6:	d405      	bmi.n	800b5e4 <_ungetc_r+0x38>
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	0598      	lsls	r0, r3, #22
 800b5dc:	d402      	bmi.n	800b5e4 <_ungetc_r+0x38>
 800b5de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5e0:	f7fe f993 	bl	800990a <__retarget_lock_acquire_recursive>
 800b5e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5e8:	f023 0320 	bic.w	r3, r3, #32
 800b5ec:	0759      	lsls	r1, r3, #29
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	d42d      	bmi.n	800b650 <_ungetc_r+0xa4>
 800b5f4:	06d3      	lsls	r3, r2, #27
 800b5f6:	d413      	bmi.n	800b620 <_ungetc_r+0x74>
 800b5f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5fa:	07dd      	lsls	r5, r3, #31
 800b5fc:	d4dc      	bmi.n	800b5b8 <_ungetc_r+0xc>
 800b5fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b602:	d1d9      	bne.n	800b5b8 <_ungetc_r+0xc>
 800b604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b606:	f7fe f981 	bl	800990c <__retarget_lock_release_recursive>
 800b60a:	e7d5      	b.n	800b5b8 <_ungetc_r+0xc>
 800b60c:	4b31      	ldr	r3, [pc, #196]	; (800b6d4 <_ungetc_r+0x128>)
 800b60e:	429c      	cmp	r4, r3
 800b610:	d101      	bne.n	800b616 <_ungetc_r+0x6a>
 800b612:	68b4      	ldr	r4, [r6, #8]
 800b614:	e7dd      	b.n	800b5d2 <_ungetc_r+0x26>
 800b616:	4b30      	ldr	r3, [pc, #192]	; (800b6d8 <_ungetc_r+0x12c>)
 800b618:	429c      	cmp	r4, r3
 800b61a:	bf08      	it	eq
 800b61c:	68f4      	ldreq	r4, [r6, #12]
 800b61e:	e7d8      	b.n	800b5d2 <_ungetc_r+0x26>
 800b620:	0710      	lsls	r0, r2, #28
 800b622:	d511      	bpl.n	800b648 <_ungetc_r+0x9c>
 800b624:	4621      	mov	r1, r4
 800b626:	4630      	mov	r0, r6
 800b628:	f7fd fc9a 	bl	8008f60 <_fflush_r>
 800b62c:	b130      	cbz	r0, 800b63c <_ungetc_r+0x90>
 800b62e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b630:	07d9      	lsls	r1, r3, #31
 800b632:	d4c1      	bmi.n	800b5b8 <_ungetc_r+0xc>
 800b634:	89a3      	ldrh	r3, [r4, #12]
 800b636:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b63a:	e7e2      	b.n	800b602 <_ungetc_r+0x56>
 800b63c:	89a3      	ldrh	r3, [r4, #12]
 800b63e:	60a0      	str	r0, [r4, #8]
 800b640:	f023 0308 	bic.w	r3, r3, #8
 800b644:	81a3      	strh	r3, [r4, #12]
 800b646:	61a0      	str	r0, [r4, #24]
 800b648:	89a3      	ldrh	r3, [r4, #12]
 800b64a:	f043 0304 	orr.w	r3, r3, #4
 800b64e:	81a3      	strh	r3, [r4, #12]
 800b650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b652:	6862      	ldr	r2, [r4, #4]
 800b654:	b2ed      	uxtb	r5, r5
 800b656:	b1d3      	cbz	r3, 800b68e <_ungetc_r+0xe2>
 800b658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b65a:	4293      	cmp	r3, r2
 800b65c:	dc05      	bgt.n	800b66a <_ungetc_r+0xbe>
 800b65e:	4621      	mov	r1, r4
 800b660:	4630      	mov	r0, r6
 800b662:	f7ff ff69 	bl	800b538 <__submore>
 800b666:	2800      	cmp	r0, #0
 800b668:	d1e1      	bne.n	800b62e <_ungetc_r+0x82>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	1e5a      	subs	r2, r3, #1
 800b66e:	6022      	str	r2, [r4, #0]
 800b670:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b674:	6863      	ldr	r3, [r4, #4]
 800b676:	3301      	adds	r3, #1
 800b678:	6063      	str	r3, [r4, #4]
 800b67a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b67c:	07da      	lsls	r2, r3, #31
 800b67e:	d49d      	bmi.n	800b5bc <_ungetc_r+0x10>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	059b      	lsls	r3, r3, #22
 800b684:	d49a      	bmi.n	800b5bc <_ungetc_r+0x10>
 800b686:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b688:	f7fe f940 	bl	800990c <__retarget_lock_release_recursive>
 800b68c:	e796      	b.n	800b5bc <_ungetc_r+0x10>
 800b68e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b690:	6920      	ldr	r0, [r4, #16]
 800b692:	6823      	ldr	r3, [r4, #0]
 800b694:	f001 0101 	and.w	r1, r1, #1
 800b698:	b160      	cbz	r0, 800b6b4 <_ungetc_r+0x108>
 800b69a:	4298      	cmp	r0, r3
 800b69c:	d20a      	bcs.n	800b6b4 <_ungetc_r+0x108>
 800b69e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800b6a2:	42a8      	cmp	r0, r5
 800b6a4:	d106      	bne.n	800b6b4 <_ungetc_r+0x108>
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	3201      	adds	r2, #1
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	6062      	str	r2, [r4, #4]
 800b6ae:	2900      	cmp	r1, #0
 800b6b0:	d184      	bne.n	800b5bc <_ungetc_r+0x10>
 800b6b2:	e7e5      	b.n	800b680 <_ungetc_r+0xd4>
 800b6b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b6b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6bc:	6363      	str	r3, [r4, #52]	; 0x34
 800b6be:	2303      	movs	r3, #3
 800b6c0:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6c2:	4623      	mov	r3, r4
 800b6c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	6063      	str	r3, [r4, #4]
 800b6ce:	e7ee      	b.n	800b6ae <_ungetc_r+0x102>
 800b6d0:	0800c784 	.word	0x0800c784
 800b6d4:	0800c7a4 	.word	0x0800c7a4
 800b6d8:	0800c764 	.word	0x0800c764

0800b6dc <__swbuf_r>:
 800b6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6de:	460e      	mov	r6, r1
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	4605      	mov	r5, r0
 800b6e4:	b118      	cbz	r0, 800b6ee <__swbuf_r+0x12>
 800b6e6:	6983      	ldr	r3, [r0, #24]
 800b6e8:	b90b      	cbnz	r3, 800b6ee <__swbuf_r+0x12>
 800b6ea:	f7fd fcdf 	bl	80090ac <__sinit>
 800b6ee:	4b21      	ldr	r3, [pc, #132]	; (800b774 <__swbuf_r+0x98>)
 800b6f0:	429c      	cmp	r4, r3
 800b6f2:	d12b      	bne.n	800b74c <__swbuf_r+0x70>
 800b6f4:	686c      	ldr	r4, [r5, #4]
 800b6f6:	69a3      	ldr	r3, [r4, #24]
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	89a3      	ldrh	r3, [r4, #12]
 800b6fc:	071a      	lsls	r2, r3, #28
 800b6fe:	d52f      	bpl.n	800b760 <__swbuf_r+0x84>
 800b700:	6923      	ldr	r3, [r4, #16]
 800b702:	b36b      	cbz	r3, 800b760 <__swbuf_r+0x84>
 800b704:	6923      	ldr	r3, [r4, #16]
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	1ac0      	subs	r0, r0, r3
 800b70a:	6963      	ldr	r3, [r4, #20]
 800b70c:	b2f6      	uxtb	r6, r6
 800b70e:	4283      	cmp	r3, r0
 800b710:	4637      	mov	r7, r6
 800b712:	dc04      	bgt.n	800b71e <__swbuf_r+0x42>
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f7fd fc22 	bl	8008f60 <_fflush_r>
 800b71c:	bb30      	cbnz	r0, 800b76c <__swbuf_r+0x90>
 800b71e:	68a3      	ldr	r3, [r4, #8]
 800b720:	3b01      	subs	r3, #1
 800b722:	60a3      	str	r3, [r4, #8]
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	1c5a      	adds	r2, r3, #1
 800b728:	6022      	str	r2, [r4, #0]
 800b72a:	701e      	strb	r6, [r3, #0]
 800b72c:	6963      	ldr	r3, [r4, #20]
 800b72e:	3001      	adds	r0, #1
 800b730:	4283      	cmp	r3, r0
 800b732:	d004      	beq.n	800b73e <__swbuf_r+0x62>
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	07db      	lsls	r3, r3, #31
 800b738:	d506      	bpl.n	800b748 <__swbuf_r+0x6c>
 800b73a:	2e0a      	cmp	r6, #10
 800b73c:	d104      	bne.n	800b748 <__swbuf_r+0x6c>
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	f7fd fc0d 	bl	8008f60 <_fflush_r>
 800b746:	b988      	cbnz	r0, 800b76c <__swbuf_r+0x90>
 800b748:	4638      	mov	r0, r7
 800b74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b74c:	4b0a      	ldr	r3, [pc, #40]	; (800b778 <__swbuf_r+0x9c>)
 800b74e:	429c      	cmp	r4, r3
 800b750:	d101      	bne.n	800b756 <__swbuf_r+0x7a>
 800b752:	68ac      	ldr	r4, [r5, #8]
 800b754:	e7cf      	b.n	800b6f6 <__swbuf_r+0x1a>
 800b756:	4b09      	ldr	r3, [pc, #36]	; (800b77c <__swbuf_r+0xa0>)
 800b758:	429c      	cmp	r4, r3
 800b75a:	bf08      	it	eq
 800b75c:	68ec      	ldreq	r4, [r5, #12]
 800b75e:	e7ca      	b.n	800b6f6 <__swbuf_r+0x1a>
 800b760:	4621      	mov	r1, r4
 800b762:	4628      	mov	r0, r5
 800b764:	f000 f82c 	bl	800b7c0 <__swsetup_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d0cb      	beq.n	800b704 <__swbuf_r+0x28>
 800b76c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b770:	e7ea      	b.n	800b748 <__swbuf_r+0x6c>
 800b772:	bf00      	nop
 800b774:	0800c784 	.word	0x0800c784
 800b778:	0800c7a4 	.word	0x0800c7a4
 800b77c:	0800c764 	.word	0x0800c764

0800b780 <__ascii_wctomb>:
 800b780:	b149      	cbz	r1, 800b796 <__ascii_wctomb+0x16>
 800b782:	2aff      	cmp	r2, #255	; 0xff
 800b784:	bf85      	ittet	hi
 800b786:	238a      	movhi	r3, #138	; 0x8a
 800b788:	6003      	strhi	r3, [r0, #0]
 800b78a:	700a      	strbls	r2, [r1, #0]
 800b78c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b790:	bf98      	it	ls
 800b792:	2001      	movls	r0, #1
 800b794:	4770      	bx	lr
 800b796:	4608      	mov	r0, r1
 800b798:	4770      	bx	lr
	...

0800b79c <_write_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	4d07      	ldr	r5, [pc, #28]	; (800b7bc <_write_r+0x20>)
 800b7a0:	4604      	mov	r4, r0
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	602a      	str	r2, [r5, #0]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	f7fa fd45 	bl	800623a <_write>
 800b7b0:	1c43      	adds	r3, r0, #1
 800b7b2:	d102      	bne.n	800b7ba <_write_r+0x1e>
 800b7b4:	682b      	ldr	r3, [r5, #0]
 800b7b6:	b103      	cbz	r3, 800b7ba <_write_r+0x1e>
 800b7b8:	6023      	str	r3, [r4, #0]
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	20000438 	.word	0x20000438

0800b7c0 <__swsetup_r>:
 800b7c0:	4b32      	ldr	r3, [pc, #200]	; (800b88c <__swsetup_r+0xcc>)
 800b7c2:	b570      	push	{r4, r5, r6, lr}
 800b7c4:	681d      	ldr	r5, [r3, #0]
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	b125      	cbz	r5, 800b7d6 <__swsetup_r+0x16>
 800b7cc:	69ab      	ldr	r3, [r5, #24]
 800b7ce:	b913      	cbnz	r3, 800b7d6 <__swsetup_r+0x16>
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	f7fd fc6b 	bl	80090ac <__sinit>
 800b7d6:	4b2e      	ldr	r3, [pc, #184]	; (800b890 <__swsetup_r+0xd0>)
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	d10f      	bne.n	800b7fc <__swsetup_r+0x3c>
 800b7dc:	686c      	ldr	r4, [r5, #4]
 800b7de:	89a3      	ldrh	r3, [r4, #12]
 800b7e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7e4:	0719      	lsls	r1, r3, #28
 800b7e6:	d42c      	bmi.n	800b842 <__swsetup_r+0x82>
 800b7e8:	06dd      	lsls	r5, r3, #27
 800b7ea:	d411      	bmi.n	800b810 <__swsetup_r+0x50>
 800b7ec:	2309      	movs	r3, #9
 800b7ee:	6033      	str	r3, [r6, #0]
 800b7f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7f4:	81a3      	strh	r3, [r4, #12]
 800b7f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7fa:	e03e      	b.n	800b87a <__swsetup_r+0xba>
 800b7fc:	4b25      	ldr	r3, [pc, #148]	; (800b894 <__swsetup_r+0xd4>)
 800b7fe:	429c      	cmp	r4, r3
 800b800:	d101      	bne.n	800b806 <__swsetup_r+0x46>
 800b802:	68ac      	ldr	r4, [r5, #8]
 800b804:	e7eb      	b.n	800b7de <__swsetup_r+0x1e>
 800b806:	4b24      	ldr	r3, [pc, #144]	; (800b898 <__swsetup_r+0xd8>)
 800b808:	429c      	cmp	r4, r3
 800b80a:	bf08      	it	eq
 800b80c:	68ec      	ldreq	r4, [r5, #12]
 800b80e:	e7e6      	b.n	800b7de <__swsetup_r+0x1e>
 800b810:	0758      	lsls	r0, r3, #29
 800b812:	d512      	bpl.n	800b83a <__swsetup_r+0x7a>
 800b814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b816:	b141      	cbz	r1, 800b82a <__swsetup_r+0x6a>
 800b818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b81c:	4299      	cmp	r1, r3
 800b81e:	d002      	beq.n	800b826 <__swsetup_r+0x66>
 800b820:	4630      	mov	r0, r6
 800b822:	f7fe fdd9 	bl	800a3d8 <_free_r>
 800b826:	2300      	movs	r3, #0
 800b828:	6363      	str	r3, [r4, #52]	; 0x34
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b830:	81a3      	strh	r3, [r4, #12]
 800b832:	2300      	movs	r3, #0
 800b834:	6063      	str	r3, [r4, #4]
 800b836:	6923      	ldr	r3, [r4, #16]
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	89a3      	ldrh	r3, [r4, #12]
 800b83c:	f043 0308 	orr.w	r3, r3, #8
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	6923      	ldr	r3, [r4, #16]
 800b844:	b94b      	cbnz	r3, 800b85a <__swsetup_r+0x9a>
 800b846:	89a3      	ldrh	r3, [r4, #12]
 800b848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b84c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b850:	d003      	beq.n	800b85a <__swsetup_r+0x9a>
 800b852:	4621      	mov	r1, r4
 800b854:	4630      	mov	r0, r6
 800b856:	f7fe f87f 	bl	8009958 <__smakebuf_r>
 800b85a:	89a0      	ldrh	r0, [r4, #12]
 800b85c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b860:	f010 0301 	ands.w	r3, r0, #1
 800b864:	d00a      	beq.n	800b87c <__swsetup_r+0xbc>
 800b866:	2300      	movs	r3, #0
 800b868:	60a3      	str	r3, [r4, #8]
 800b86a:	6963      	ldr	r3, [r4, #20]
 800b86c:	425b      	negs	r3, r3
 800b86e:	61a3      	str	r3, [r4, #24]
 800b870:	6923      	ldr	r3, [r4, #16]
 800b872:	b943      	cbnz	r3, 800b886 <__swsetup_r+0xc6>
 800b874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b878:	d1ba      	bne.n	800b7f0 <__swsetup_r+0x30>
 800b87a:	bd70      	pop	{r4, r5, r6, pc}
 800b87c:	0781      	lsls	r1, r0, #30
 800b87e:	bf58      	it	pl
 800b880:	6963      	ldrpl	r3, [r4, #20]
 800b882:	60a3      	str	r3, [r4, #8]
 800b884:	e7f4      	b.n	800b870 <__swsetup_r+0xb0>
 800b886:	2000      	movs	r0, #0
 800b888:	e7f7      	b.n	800b87a <__swsetup_r+0xba>
 800b88a:	bf00      	nop
 800b88c:	2000001c 	.word	0x2000001c
 800b890:	0800c784 	.word	0x0800c784
 800b894:	0800c7a4 	.word	0x0800c7a4
 800b898:	0800c764 	.word	0x0800c764

0800b89c <__assert_func>:
 800b89c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b89e:	4614      	mov	r4, r2
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <__assert_func+0x2c>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4605      	mov	r5, r0
 800b8a8:	68d8      	ldr	r0, [r3, #12]
 800b8aa:	b14c      	cbz	r4, 800b8c0 <__assert_func+0x24>
 800b8ac:	4b07      	ldr	r3, [pc, #28]	; (800b8cc <__assert_func+0x30>)
 800b8ae:	9100      	str	r1, [sp, #0]
 800b8b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8b4:	4906      	ldr	r1, [pc, #24]	; (800b8d0 <__assert_func+0x34>)
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	f000 f81e 	bl	800b8f8 <fiprintf>
 800b8bc:	f000 f8ca 	bl	800ba54 <abort>
 800b8c0:	4b04      	ldr	r3, [pc, #16]	; (800b8d4 <__assert_func+0x38>)
 800b8c2:	461c      	mov	r4, r3
 800b8c4:	e7f3      	b.n	800b8ae <__assert_func+0x12>
 800b8c6:	bf00      	nop
 800b8c8:	2000001c 	.word	0x2000001c
 800b8cc:	0800c9c8 	.word	0x0800c9c8
 800b8d0:	0800c9d5 	.word	0x0800c9d5
 800b8d4:	0800ca03 	.word	0x0800ca03

0800b8d8 <_close_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d06      	ldr	r5, [pc, #24]	; (800b8f4 <_close_r+0x1c>)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	602b      	str	r3, [r5, #0]
 800b8e4:	f7fa fcc5 	bl	8006272 <_close>
 800b8e8:	1c43      	adds	r3, r0, #1
 800b8ea:	d102      	bne.n	800b8f2 <_close_r+0x1a>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	b103      	cbz	r3, 800b8f2 <_close_r+0x1a>
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	bd38      	pop	{r3, r4, r5, pc}
 800b8f4:	20000438 	.word	0x20000438

0800b8f8 <fiprintf>:
 800b8f8:	b40e      	push	{r1, r2, r3}
 800b8fa:	b503      	push	{r0, r1, lr}
 800b8fc:	4601      	mov	r1, r0
 800b8fe:	ab03      	add	r3, sp, #12
 800b900:	4805      	ldr	r0, [pc, #20]	; (800b918 <fiprintf+0x20>)
 800b902:	f853 2b04 	ldr.w	r2, [r3], #4
 800b906:	6800      	ldr	r0, [r0, #0]
 800b908:	9301      	str	r3, [sp, #4]
 800b90a:	f7fe ffcb 	bl	800a8a4 <_vfiprintf_r>
 800b90e:	b002      	add	sp, #8
 800b910:	f85d eb04 	ldr.w	lr, [sp], #4
 800b914:	b003      	add	sp, #12
 800b916:	4770      	bx	lr
 800b918:	2000001c 	.word	0x2000001c

0800b91c <_fstat_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d07      	ldr	r5, [pc, #28]	; (800b93c <_fstat_r+0x20>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	4611      	mov	r1, r2
 800b928:	602b      	str	r3, [r5, #0]
 800b92a:	f7fa fcae 	bl	800628a <_fstat>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	d102      	bne.n	800b938 <_fstat_r+0x1c>
 800b932:	682b      	ldr	r3, [r5, #0]
 800b934:	b103      	cbz	r3, 800b938 <_fstat_r+0x1c>
 800b936:	6023      	str	r3, [r4, #0]
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	bf00      	nop
 800b93c:	20000438 	.word	0x20000438

0800b940 <_isatty_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d06      	ldr	r5, [pc, #24]	; (800b95c <_isatty_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	f7fa fcad 	bl	80062aa <_isatty>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_isatty_r+0x1a>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_isatty_r+0x1a>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	20000438 	.word	0x20000438

0800b960 <_lseek_r>:
 800b960:	b538      	push	{r3, r4, r5, lr}
 800b962:	4d07      	ldr	r5, [pc, #28]	; (800b980 <_lseek_r+0x20>)
 800b964:	4604      	mov	r4, r0
 800b966:	4608      	mov	r0, r1
 800b968:	4611      	mov	r1, r2
 800b96a:	2200      	movs	r2, #0
 800b96c:	602a      	str	r2, [r5, #0]
 800b96e:	461a      	mov	r2, r3
 800b970:	f7fa fca6 	bl	80062c0 <_lseek>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_lseek_r+0x1e>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_lseek_r+0x1e>
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	20000438 	.word	0x20000438

0800b984 <memmove>:
 800b984:	4288      	cmp	r0, r1
 800b986:	b510      	push	{r4, lr}
 800b988:	eb01 0402 	add.w	r4, r1, r2
 800b98c:	d902      	bls.n	800b994 <memmove+0x10>
 800b98e:	4284      	cmp	r4, r0
 800b990:	4623      	mov	r3, r4
 800b992:	d807      	bhi.n	800b9a4 <memmove+0x20>
 800b994:	1e43      	subs	r3, r0, #1
 800b996:	42a1      	cmp	r1, r4
 800b998:	d008      	beq.n	800b9ac <memmove+0x28>
 800b99a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b99e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9a2:	e7f8      	b.n	800b996 <memmove+0x12>
 800b9a4:	4402      	add	r2, r0
 800b9a6:	4601      	mov	r1, r0
 800b9a8:	428a      	cmp	r2, r1
 800b9aa:	d100      	bne.n	800b9ae <memmove+0x2a>
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9b6:	e7f7      	b.n	800b9a8 <memmove+0x24>

0800b9b8 <__malloc_lock>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__malloc_lock+0x8>)
 800b9ba:	f7fd bfa6 	b.w	800990a <__retarget_lock_acquire_recursive>
 800b9be:	bf00      	nop
 800b9c0:	2000042c 	.word	0x2000042c

0800b9c4 <__malloc_unlock>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	; (800b9cc <__malloc_unlock+0x8>)
 800b9c6:	f7fd bfa1 	b.w	800990c <__retarget_lock_release_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	2000042c 	.word	0x2000042c

0800b9d0 <_realloc_r>:
 800b9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	4614      	mov	r4, r2
 800b9d8:	460e      	mov	r6, r1
 800b9da:	b921      	cbnz	r1, 800b9e6 <_realloc_r+0x16>
 800b9dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	f7fe bd65 	b.w	800a4b0 <_malloc_r>
 800b9e6:	b92a      	cbnz	r2, 800b9f4 <_realloc_r+0x24>
 800b9e8:	f7fe fcf6 	bl	800a3d8 <_free_r>
 800b9ec:	4625      	mov	r5, r4
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f4:	f000 f835 	bl	800ba62 <_malloc_usable_size_r>
 800b9f8:	4284      	cmp	r4, r0
 800b9fa:	4607      	mov	r7, r0
 800b9fc:	d802      	bhi.n	800ba04 <_realloc_r+0x34>
 800b9fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba02:	d812      	bhi.n	800ba2a <_realloc_r+0x5a>
 800ba04:	4621      	mov	r1, r4
 800ba06:	4640      	mov	r0, r8
 800ba08:	f7fe fd52 	bl	800a4b0 <_malloc_r>
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d0ed      	beq.n	800b9ee <_realloc_r+0x1e>
 800ba12:	42bc      	cmp	r4, r7
 800ba14:	4622      	mov	r2, r4
 800ba16:	4631      	mov	r1, r6
 800ba18:	bf28      	it	cs
 800ba1a:	463a      	movcs	r2, r7
 800ba1c:	f7fd fff6 	bl	8009a0c <memcpy>
 800ba20:	4631      	mov	r1, r6
 800ba22:	4640      	mov	r0, r8
 800ba24:	f7fe fcd8 	bl	800a3d8 <_free_r>
 800ba28:	e7e1      	b.n	800b9ee <_realloc_r+0x1e>
 800ba2a:	4635      	mov	r5, r6
 800ba2c:	e7df      	b.n	800b9ee <_realloc_r+0x1e>
	...

0800ba30 <_read_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4d07      	ldr	r5, [pc, #28]	; (800ba50 <_read_r+0x20>)
 800ba34:	4604      	mov	r4, r0
 800ba36:	4608      	mov	r0, r1
 800ba38:	4611      	mov	r1, r2
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	602a      	str	r2, [r5, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f7fa fbde 	bl	8006200 <_read>
 800ba44:	1c43      	adds	r3, r0, #1
 800ba46:	d102      	bne.n	800ba4e <_read_r+0x1e>
 800ba48:	682b      	ldr	r3, [r5, #0]
 800ba4a:	b103      	cbz	r3, 800ba4e <_read_r+0x1e>
 800ba4c:	6023      	str	r3, [r4, #0]
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	20000438 	.word	0x20000438

0800ba54 <abort>:
 800ba54:	b508      	push	{r3, lr}
 800ba56:	2006      	movs	r0, #6
 800ba58:	f000 f834 	bl	800bac4 <raise>
 800ba5c:	2001      	movs	r0, #1
 800ba5e:	f7fa fbc5 	bl	80061ec <_exit>

0800ba62 <_malloc_usable_size_r>:
 800ba62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba66:	1f18      	subs	r0, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bfbc      	itt	lt
 800ba6c:	580b      	ldrlt	r3, [r1, r0]
 800ba6e:	18c0      	addlt	r0, r0, r3
 800ba70:	4770      	bx	lr

0800ba72 <_raise_r>:
 800ba72:	291f      	cmp	r1, #31
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4604      	mov	r4, r0
 800ba78:	460d      	mov	r5, r1
 800ba7a:	d904      	bls.n	800ba86 <_raise_r+0x14>
 800ba7c:	2316      	movs	r3, #22
 800ba7e:	6003      	str	r3, [r0, #0]
 800ba80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba84:	bd38      	pop	{r3, r4, r5, pc}
 800ba86:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba88:	b112      	cbz	r2, 800ba90 <_raise_r+0x1e>
 800ba8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba8e:	b94b      	cbnz	r3, 800baa4 <_raise_r+0x32>
 800ba90:	4620      	mov	r0, r4
 800ba92:	f000 f831 	bl	800baf8 <_getpid_r>
 800ba96:	462a      	mov	r2, r5
 800ba98:	4601      	mov	r1, r0
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa0:	f000 b818 	b.w	800bad4 <_kill_r>
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d00a      	beq.n	800babe <_raise_r+0x4c>
 800baa8:	1c59      	adds	r1, r3, #1
 800baaa:	d103      	bne.n	800bab4 <_raise_r+0x42>
 800baac:	2316      	movs	r3, #22
 800baae:	6003      	str	r3, [r0, #0]
 800bab0:	2001      	movs	r0, #1
 800bab2:	e7e7      	b.n	800ba84 <_raise_r+0x12>
 800bab4:	2400      	movs	r4, #0
 800bab6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baba:	4628      	mov	r0, r5
 800babc:	4798      	blx	r3
 800babe:	2000      	movs	r0, #0
 800bac0:	e7e0      	b.n	800ba84 <_raise_r+0x12>
	...

0800bac4 <raise>:
 800bac4:	4b02      	ldr	r3, [pc, #8]	; (800bad0 <raise+0xc>)
 800bac6:	4601      	mov	r1, r0
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	f7ff bfd2 	b.w	800ba72 <_raise_r>
 800bace:	bf00      	nop
 800bad0:	2000001c 	.word	0x2000001c

0800bad4 <_kill_r>:
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4d07      	ldr	r5, [pc, #28]	; (800baf4 <_kill_r+0x20>)
 800bad8:	2300      	movs	r3, #0
 800bada:	4604      	mov	r4, r0
 800badc:	4608      	mov	r0, r1
 800bade:	4611      	mov	r1, r2
 800bae0:	602b      	str	r3, [r5, #0]
 800bae2:	f7fa fb73 	bl	80061cc <_kill>
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	d102      	bne.n	800baf0 <_kill_r+0x1c>
 800baea:	682b      	ldr	r3, [r5, #0]
 800baec:	b103      	cbz	r3, 800baf0 <_kill_r+0x1c>
 800baee:	6023      	str	r3, [r4, #0]
 800baf0:	bd38      	pop	{r3, r4, r5, pc}
 800baf2:	bf00      	nop
 800baf4:	20000438 	.word	0x20000438

0800baf8 <_getpid_r>:
 800baf8:	f7fa bb60 	b.w	80061bc <_getpid>

0800bafc <_init>:
 800bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafe:	bf00      	nop
 800bb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb02:	bc08      	pop	{r3}
 800bb04:	469e      	mov	lr, r3
 800bb06:	4770      	bx	lr

0800bb08 <_fini>:
 800bb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb0a:	bf00      	nop
 800bb0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb0e:	bc08      	pop	{r3}
 800bb10:	469e      	mov	lr, r3
 800bb12:	4770      	bx	lr
