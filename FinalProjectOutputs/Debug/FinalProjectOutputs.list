
FinalProjectOutputs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d574  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0800d738  0800d738  0001d738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6b4  0800e6b4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6b4  0800e6b4  0001e6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6bc  0800e6bc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6bc  0800e6bc  0001e6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e6c0  0800e6c0  0001e6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800e6c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  200001ec  0800e8b0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  0800e8b0  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bdda  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000315b  00000000  00000000  0003bff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  0003f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013d0  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003cdd  00000000  00000000  00041a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d13  00000000  00000000  000456e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124572  00000000  00000000  0005e3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  0018296a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007204  00000000  00000000  00182a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00189c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800d71c 	.word	0x0800d71c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	0800d71c 	.word	0x0800d71c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f001 fba4 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f80d 	bl	8001058 <HAL_InitTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104a:	f006 fcef 	bl	8007a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_InitTick+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fbb1 	bl	80027ea <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10f      	bne.n	80010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d809      	bhi.n	80010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f001 fb7b 	bl	8002796 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_InitTick+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e001      	b.n	80010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000004 	.word	0x20000004
 80010c8:	20000014 	.word	0x20000014
 80010cc:	20000000 	.word	0x20000000

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	20000208 	.word	0x20000208

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000208 	.word	0x20000208

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000004 	.word	0x20000004

08001158 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	609a      	str	r2, [r3, #8]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3360      	adds	r3, #96	; 0x60
 80011d2:	461a      	mov	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <LL_ADC_SetOffset+0x44>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	4313      	orrs	r3, r2
 80011f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011f8:	bf00      	nop
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	03fff000 	.word	0x03fff000

08001208 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3360      	adds	r3, #96	; 0x60
 8001216:	461a      	mov	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3360      	adds	r3, #96	; 0x60
 8001244:	461a      	mov	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	431a      	orrs	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800125e:	bf00      	nop
 8001260:	371c      	adds	r7, #28
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	615a      	str	r2, [r3, #20]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012a4:	2301      	movs	r3, #1
 80012a6:	e000      	b.n	80012aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	60b9      	str	r1, [r7, #8]
 80012c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3330      	adds	r3, #48	; 0x30
 80012c6:	461a      	mov	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	4413      	add	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	211f      	movs	r1, #31
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	401a      	ands	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	0e9b      	lsrs	r3, r3, #26
 80012ee:	f003 011f 	and.w	r1, r3, #31
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f003 031f 	and.w	r3, r3, #31
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	431a      	orrs	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800130e:	b480      	push	{r7}
 8001310:	b087      	sub	sp, #28
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3314      	adds	r3, #20
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0e5b      	lsrs	r3, r3, #25
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0d1b      	lsrs	r3, r3, #20
 8001336:	f003 031f 	and.w	r3, r3, #31
 800133a:	2107      	movs	r1, #7
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	401a      	ands	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	0d1b      	lsrs	r3, r3, #20
 8001348:	f003 031f 	and.w	r3, r3, #31
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	fa01 f303 	lsl.w	r3, r1, r3
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001358:	bf00      	nop
 800135a:	371c      	adds	r7, #28
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800137c:	43db      	mvns	r3, r3
 800137e:	401a      	ands	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0318 	and.w	r3, r3, #24
 8001386:	4908      	ldr	r1, [pc, #32]	; (80013a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001388:	40d9      	lsrs	r1, r3
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	400b      	ands	r3, r1
 800138e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001392:	431a      	orrs	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	0007ffff 	.word	0x0007ffff

080013ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6093      	str	r3, [r2, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001484:	f043 0202 	orr.w	r2, r3, #2
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <LL_ADC_IsEnabled+0x18>
 80014ac:	2301      	movs	r3, #1
 80014ae:	e000      	b.n	80014b2 <LL_ADC_IsEnabled+0x1a>
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_IsDisableOngoing+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_IsDisableOngoing+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f8:	f043 0204 	orr.w	r2, r3, #4
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800151c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001520:	f043 0210 	orr.w	r2, r3, #16
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b04      	cmp	r3, #4
 8001546:	d101      	bne.n	800154c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800156a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800156e:	f043 0220 	orr.w	r2, r3, #32
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b08      	cmp	r3, #8
 8001594:	d101      	bne.n	800159a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e12f      	b.n	8001822 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f006 fa4f 	bl	8007a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fef1 	bl	80013d0 <LL_ADC_IsDeepPowerDownEnabled>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fed7 	bl	80013ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff0c 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d115      	bne.n	800163a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fef0 	bl	80013f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001618:	4b84      	ldr	r3, [pc, #528]	; (800182c <HAL_ADC_Init+0x284>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	099b      	lsrs	r3, r3, #6
 800161e:	4a84      	ldr	r2, [pc, #528]	; (8001830 <HAL_ADC_Init+0x288>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800162c:	e002      	b.n	8001634 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff feee 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d10d      	bne.n	8001666 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164e:	f043 0210 	orr.w	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	f043 0201 	orr.w	r2, r3, #1
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff62 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 8001670:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	f040 80c8 	bne.w	8001810 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f040 80c4 	bne.w	8001810 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001690:	f043 0202 	orr.w	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fefb 	bl	8001498 <LL_ADC_IsEnabled>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10b      	bne.n	80016c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016a8:	4862      	ldr	r0, [pc, #392]	; (8001834 <HAL_ADC_Init+0x28c>)
 80016aa:	f7ff fef5 	bl	8001498 <LL_ADC_IsEnabled>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4619      	mov	r1, r3
 80016ba:	485f      	ldr	r0, [pc, #380]	; (8001838 <HAL_ADC_Init+0x290>)
 80016bc:	f7ff fd4c 	bl	8001158 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7e5b      	ldrb	r3, [r3, #25]
 80016c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80016d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80016d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d106      	bne.n	80016fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	045b      	lsls	r3, r3, #17
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	d009      	beq.n	8001718 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	4b47      	ldr	r3, [pc, #284]	; (800183c <HAL_ADC_Init+0x294>)
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	430b      	orrs	r3, r1
 800172a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff feff 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 8001736:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff20 	bl	8001582 <LL_ADC_INJ_IsConversionOngoing>
 8001742:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d140      	bne.n	80017cc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d13d      	bne.n	80017cc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
 8001758:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800175a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001762:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001772:	f023 0306 	bic.w	r3, r3, #6
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	430b      	orrs	r3, r1
 800177e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001786:	2b01      	cmp	r3, #1
 8001788:	d118      	bne.n	80017bc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001794:	f023 0304 	bic.w	r3, r3, #4
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017a0:	4311      	orrs	r1, r2
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017a6:	4311      	orrs	r1, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ac:	430a      	orrs	r2, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	e007      	b.n	80017cc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	691a      	ldr	r2, [r3, #16]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d10c      	bne.n	80017ee <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f023 010f 	bic.w	r1, r3, #15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	1e5a      	subs	r2, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	e007      	b.n	80017fe <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020f 	bic.w	r2, r2, #15
 80017fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	f023 0303 	bic.w	r3, r3, #3
 8001806:	f043 0201 	orr.w	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	; 0x58
 800180e:	e007      	b.n	8001820 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f043 0210 	orr.w	r2, r3, #16
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001820:	7ffb      	ldrb	r3, [r7, #31]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000014 	.word	0x20000014
 8001830:	053e2d63 	.word	0x053e2d63
 8001834:	50040000 	.word	0x50040000
 8001838:	50040300 	.word	0x50040300
 800183c:	fff0c007 	.word	0xfff0c007

08001840 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fe71 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d14f      	bne.n	80018f8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Start+0x26>
 8001862:	2302      	movs	r3, #2
 8001864:	e04b      	b.n	80018fe <HAL_ADC_Start+0xbe>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fdd0 	bl	8002414 <ADC_Enable>
 8001874:	4603      	mov	r3, r0
 8001876:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d137      	bne.n	80018ee <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189e:	d106      	bne.n	80018ae <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	f023 0206 	bic.w	r2, r3, #6
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ac:	e002      	b.n	80018b4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	221c      	movs	r2, #28
 80018ba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fdfc 	bl	80014e4 <LL_ADC_REG_StartConversion>
 80018ec:	e006      	b.n	80018fc <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80018f6:	e001      	b.n	80018fc <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
 80018fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_ADC_Stop+0x16>
 8001918:	2302      	movs	r3, #2
 800191a:	e023      	b.n	8001964 <HAL_ADC_Stop+0x5e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001924:	2103      	movs	r1, #3
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fcb8 	bl	800229c <ADC_ConversionStop>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d111      	bne.n	800195a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 fdf2 	bl	8002520 <ADC_Disable>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800194e:	f023 0301 	bic.w	r3, r3, #1
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d102      	bne.n	8001984 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800197e:	2308      	movs	r3, #8
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	e010      	b.n	80019a6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001996:	f043 0220 	orr.w	r2, r3, #32
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06f      	b.n	8001a82 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80019a2:	2304      	movs	r3, #4
 80019a4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019a6:	f7ff fba7 	bl	80010f8 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019ac:	e021      	b.n	80019f2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019b4:	d01d      	beq.n	80019f2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80019b6:	f7ff fb9f 	bl	80010f8 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d302      	bcc.n	80019cc <HAL_ADC_PollForConversion+0x60>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d112      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10b      	bne.n	80019f2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f043 0204 	orr.w	r2, r3, #4
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e047      	b.n	8001a82 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0d6      	beq.n	80019ae <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fc3d 	bl	8001290 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01c      	beq.n	8001a56 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e5b      	ldrb	r3, [r3, #25]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d118      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b08      	cmp	r3, #8
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	f043 0201 	orr.w	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d104      	bne.n	8001a6e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2208      	movs	r2, #8
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	e008      	b.n	8001a80 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	220c      	movs	r2, #12
 8001a7e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b0b6      	sub	sp, #216	; 0xd8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d101      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x22>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e3d5      	b.n	8002272 <HAL_ADC_ConfigChannel+0x7ce>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd2e 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 83ba 	bne.w	8002254 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d824      	bhi.n	8001b32 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	3b02      	subs	r3, #2
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d81b      	bhi.n	8001b2a <HAL_ADC_ConfigChannel+0x86>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_ADC_ConfigChannel+0x54>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b11 	.word	0x08001b11
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b21 	.word	0x08001b21
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	605a      	str	r2, [r3, #4]
          break;
 8001b0e:	e011      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2212      	movs	r2, #18
 8001b14:	605a      	str	r2, [r3, #4]
          break;
 8001b16:	e00d      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2218      	movs	r2, #24
 8001b1c:	605a      	str	r2, [r3, #4]
          break;
 8001b1e:	e009      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b26:	605a      	str	r2, [r3, #4]
          break;
 8001b28:	e004      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2206      	movs	r2, #6
 8001b2e:	605a      	str	r2, [r3, #4]
          break;
 8001b30:	e000      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b32:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	461a      	mov	r2, r3
 8001b42:	f7ff fbb8 	bl	80012b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fcf2 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 8001b50:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fd12 	bl	8001582 <LL_ADC_INJ_IsConversionOngoing>
 8001b5e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 81c1 	bne.w	8001eee <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 81bc 	bne.w	8001eee <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7ff fbbf 	bl	800130e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fb66 	bl	800126a <LL_ADC_SetSamplingTimeCommonConfig>
 8001b9e:	e00e      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6819      	ldr	r1, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	461a      	mov	r2, r3
 8001bae:	f7ff fbae 	bl	800130e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fb56 	bl	800126a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	695a      	ldr	r2, [r3, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00a      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6818      	ldr	r0, [r3, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6919      	ldr	r1, [r3, #16]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf0:	f7ff fae6 	bl	80011c0 <LL_ADC_SetOffset>
 8001bf4:	e17b      	b.n	8001eee <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb03 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10a      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0x17e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2100      	movs	r1, #0
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff faf8 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	0e9b      	lsrs	r3, r3, #26
 8001c1c:	f003 021f 	and.w	r2, r3, #31
 8001c20:	e01e      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x1bc>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff faed 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001c50:	2320      	movs	r3, #32
 8001c52:	e004      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001c54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c58:	fab3 f383 	clz	r3, r3
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x1d4>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	e018      	b.n	8001caa <HAL_ADC_ConfigChannel+0x206>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c84:	fa93 f3a3 	rbit	r3, r3
 8001c88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c94:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	e004      	b.n	8001caa <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d106      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fabc 	bl	8001234 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff faa0 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x244>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fa95 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	0e9b      	lsrs	r3, r3, #26
 8001ce2:	f003 021f 	and.w	r2, r3, #31
 8001ce6:	e01e      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x282>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fa8a 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cfe:	fa93 f3a3 	rbit	r3, r3
 8001d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001d16:	2320      	movs	r3, #32
 8001d18:	e004      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x29a>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	0e9b      	lsrs	r3, r3, #26
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	e018      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x2cc>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e004      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001d66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d106      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fa59 	bl	8001234 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fa3d 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10a      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x30a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fa32 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	0e9b      	lsrs	r3, r3, #26
 8001da8:	f003 021f 	and.w	r2, r3, #31
 8001dac:	e01e      	b.n	8001dec <HAL_ADC_ConfigChannel+0x348>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2102      	movs	r1, #2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fa27 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001ddc:	2320      	movs	r3, #32
 8001dde:	e004      	b.n	8001dea <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001de0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x360>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	e016      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x38e>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e10:	fa93 f3a3 	rbit	r3, r3
 8001e14:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001e24:	2320      	movs	r3, #32
 8001e26:	e004      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d106      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f9f8 	bl	8001234 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2103      	movs	r1, #3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff f9dc 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10a      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x3cc>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2103      	movs	r1, #3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f9d1 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	0e9b      	lsrs	r3, r3, #26
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	e017      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3fc>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2103      	movs	r1, #3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff f9c6 	bl	8001208 <LL_ADC_GetOffsetChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001e92:	2320      	movs	r3, #32
 8001e94:	e003      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x414>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	e011      	b.n	8001edc <HAL_ADC_ConfigChannel+0x438>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	e003      	b.n	8001edc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d106      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2103      	movs	r1, #3
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f9a3 	bl	8001234 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fad0 	bl	8001498 <LL_ADC_IsEnabled>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8140 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6819      	ldr	r1, [r3, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f7ff fa29 	bl	8001364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	4a8f      	ldr	r2, [pc, #572]	; (8002154 <HAL_ADC_ConfigChannel+0x6b0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 8131 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10b      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x4a2>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b09      	cmp	r3, #9
 8001f3c:	bf94      	ite	ls
 8001f3e:	2301      	movls	r3, #1
 8001f40:	2300      	movhi	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	e019      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x4d6>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f56:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e003      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001f62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	2b09      	cmp	r3, #9
 8001f72:	bf94      	ite	ls
 8001f74:	2301      	movls	r3, #1
 8001f76:	2300      	movhi	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d079      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x4f6>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	0e9b      	lsrs	r3, r3, #26
 8001f90:	3301      	adds	r3, #1
 8001f92:	069b      	lsls	r3, r3, #26
 8001f94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f98:	e015      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x522>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001faa:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e003      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	069b      	lsls	r3, r3, #26
 8001fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x542>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	e017      	b.n	8002016 <HAL_ADC_ConfigChannel+0x572>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001ffe:	2320      	movs	r3, #32
 8002000:	e003      	b.n	800200a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2101      	movs	r1, #1
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	ea42 0103 	orr.w	r1, r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <HAL_ADC_ConfigChannel+0x598>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	3301      	adds	r3, #1
 800202e:	f003 021f 	and.w	r2, r3, #31
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	e018      	b.n	800206e <HAL_ADC_ConfigChannel+0x5ca>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002044:	fa93 f3a3 	rbit	r3, r3
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800204a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800204e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002054:	2320      	movs	r3, #32
 8002056:	e003      	b.n	8002060 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f003 021f 	and.w	r2, r3, #31
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800206e:	430b      	orrs	r3, r1
 8002070:	e081      	b.n	8002176 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_ADC_ConfigChannel+0x5ea>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	3301      	adds	r3, #1
 8002086:	069b      	lsls	r3, r3, #26
 8002088:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208c:	e015      	b.n	80020ba <HAL_ADC_ConfigChannel+0x616>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800209c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800209e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80020a6:	2320      	movs	r3, #32
 80020a8:	e003      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	fab3 f383 	clz	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	069b      	lsls	r3, r3, #26
 80020b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d109      	bne.n	80020da <HAL_ADC_ConfigChannel+0x636>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e9b      	lsrs	r3, r3, #26
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2101      	movs	r1, #1
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	e017      	b.n	800210a <HAL_ADC_ConfigChannel+0x666>
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	61fb      	str	r3, [r7, #28]
  return result;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 80020f2:	2320      	movs	r3, #32
 80020f4:	e003      	b.n	80020fe <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	3301      	adds	r3, #1
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2101      	movs	r1, #1
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	ea42 0103 	orr.w	r1, r2, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10d      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x692>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	3301      	adds	r3, #1
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	3b1e      	subs	r3, #30
 800212e:	051b      	lsls	r3, r3, #20
 8002130:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002134:	e01e      	b.n	8002174 <HAL_ADC_ConfigChannel+0x6d0>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	613b      	str	r3, [r7, #16]
  return result;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e006      	b.n	8002160 <HAL_ADC_ConfigChannel+0x6bc>
 8002152:	bf00      	nop
 8002154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	430b      	orrs	r3, r1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff f8c7 	bl	800130e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_ADC_ConfigChannel+0x7d8>)
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d06c      	beq.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	483c      	ldr	r0, [pc, #240]	; (8002280 <HAL_ADC_ConfigChannel+0x7dc>)
 800218e:	f7ff f809 	bl	80011a4 <LL_ADC_GetCommonPathInternalCh>
 8002192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a3a      	ldr	r2, [pc, #232]	; (8002284 <HAL_ADC_ConfigChannel+0x7e0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d127      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a35      	ldr	r2, [pc, #212]	; (8002288 <HAL_ADC_ConfigChannel+0x7e4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d157      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021be:	4619      	mov	r1, r3
 80021c0:	482f      	ldr	r0, [pc, #188]	; (8002280 <HAL_ADC_ConfigChannel+0x7dc>)
 80021c2:	f7fe ffdc 	bl	800117e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <HAL_ADC_ConfigChannel+0x7e8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	099b      	lsrs	r3, r3, #6
 80021cc:	4a30      	ldr	r2, [pc, #192]	; (8002290 <HAL_ADC_ConfigChannel+0x7ec>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	099b      	lsrs	r3, r3, #6
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e0:	e002      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f9      	bne.n	80021e2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ee:	e03a      	b.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_ADC_ConfigChannel+0x7f0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d113      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x77e>
 80021fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_ADC_ConfigChannel+0x7e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d12a      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002218:	4619      	mov	r1, r3
 800221a:	4819      	ldr	r0, [pc, #100]	; (8002280 <HAL_ADC_ConfigChannel+0x7dc>)
 800221c:	f7fe ffaf 	bl	800117e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002220:	e021      	b.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1c      	ldr	r2, [pc, #112]	; (8002298 <HAL_ADC_ConfigChannel+0x7f4>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d11c      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800222c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d116      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <HAL_ADC_ConfigChannel+0x7e4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d111      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800224a:	4619      	mov	r1, r3
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <HAL_ADC_ConfigChannel+0x7dc>)
 800224e:	f7fe ff96 	bl	800117e <LL_ADC_SetCommonPathInternalCh>
 8002252:	e008      	b.n	8002266 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800226e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002272:	4618      	mov	r0, r3
 8002274:	37d8      	adds	r7, #216	; 0xd8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	80080000 	.word	0x80080000
 8002280:	50040300 	.word	0x50040300
 8002284:	c7520000 	.word	0xc7520000
 8002288:	50040000 	.word	0x50040000
 800228c:	20000014 	.word	0x20000014
 8002290:	053e2d63 	.word	0x053e2d63
 8002294:	cb840000 	.word	0xcb840000
 8002298:	80000001 	.word	0x80000001

0800229c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b088      	sub	sp, #32
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff f93e 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 80022b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f95f 	bl	8001582 <LL_ADC_INJ_IsConversionOngoing>
 80022c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d103      	bne.n	80022d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8098 	beq.w	8002404 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d02a      	beq.n	8002338 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7e5b      	ldrb	r3, [r3, #25]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d126      	bne.n	8002338 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7e1b      	ldrb	r3, [r3, #24]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d122      	bne.n	8002338 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80022f2:	2301      	movs	r3, #1
 80022f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022f6:	e014      	b.n	8002322 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	4a45      	ldr	r2, [pc, #276]	; (8002410 <ADC_ConversionStop+0x174>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d90d      	bls.n	800231c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e074      	b.n	8002406 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d1e3      	bne.n	80022f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2240      	movs	r2, #64	; 0x40
 8002336:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d014      	beq.n	8002368 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f8f6 	bl	8001534 <LL_ADC_REG_IsConversionOngoing>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00c      	beq.n	8002368 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff f8b3 	bl	80014be <LL_ADC_IsDisableOngoing>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f8d2 	bl	800150c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d014      	beq.n	8002398 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f905 	bl	8001582 <LL_ADC_INJ_IsConversionOngoing>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00c      	beq.n	8002398 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f89b 	bl	80014be <LL_ADC_IsDisableOngoing>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d104      	bne.n	8002398 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f8e1 	bl	800155a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d005      	beq.n	80023aa <ADC_ConversionStop+0x10e>
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d105      	bne.n	80023b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023a4:	230c      	movs	r3, #12
 80023a6:	617b      	str	r3, [r7, #20]
        break;
 80023a8:	e005      	b.n	80023b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023aa:	2308      	movs	r3, #8
 80023ac:	617b      	str	r3, [r7, #20]
        break;
 80023ae:	e002      	b.n	80023b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023b0:	2304      	movs	r3, #4
 80023b2:	617b      	str	r3, [r7, #20]
        break;
 80023b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023b6:	f7fe fe9f 	bl	80010f8 <HAL_GetTick>
 80023ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023bc:	e01b      	b.n	80023f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023be:	f7fe fe9b 	bl	80010f8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d914      	bls.n	80023f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1dc      	bne.n	80023be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	a33fffff 	.word	0xa33fffff

08002414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800241c:	2300      	movs	r3, #0
 800241e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff f837 	bl	8001498 <LL_ADC_IsEnabled>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d169      	bne.n	8002504 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <ADC_Enable+0xfc>)
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00d      	beq.n	800245a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f043 0210 	orr.w	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e055      	b.n	8002506 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fff2 	bl	8001448 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002464:	482b      	ldr	r0, [pc, #172]	; (8002514 <ADC_Enable+0x100>)
 8002466:	f7fe fe9d 	bl	80011a4 <LL_ADC_GetCommonPathInternalCh>
 800246a:	4603      	mov	r3, r0
 800246c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d013      	beq.n	800249c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002474:	4b28      	ldr	r3, [pc, #160]	; (8002518 <ADC_Enable+0x104>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	4a28      	ldr	r2, [pc, #160]	; (800251c <ADC_Enable+0x108>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	4613      	mov	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	4413      	add	r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800248e:	e002      	b.n	8002496 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	3b01      	subs	r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f9      	bne.n	8002490 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800249c:	f7fe fe2c 	bl	80010f8 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a2:	e028      	b.n	80024f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fff5 	bl	8001498 <LL_ADC_IsEnabled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d104      	bne.n	80024be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe ffc5 	bl	8001448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024be:	f7fe fe1b 	bl	80010f8 <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d914      	bls.n	80024f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d00d      	beq.n	80024f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e007      	b.n	8002506 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d1cf      	bne.n	80024a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	8000003f 	.word	0x8000003f
 8002514:	50040300 	.word	0x50040300
 8002518:	20000014 	.word	0x20000014
 800251c:	053e2d63 	.word	0x053e2d63

08002520 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe ffc6 	bl	80014be <LL_ADC_IsDisableOngoing>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe ffad 	bl	8001498 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d047      	beq.n	80025d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d144      	bne.n	80025d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030d 	and.w	r3, r3, #13
 8002554:	2b01      	cmp	r3, #1
 8002556:	d10c      	bne.n	8002572 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe ff87 	bl	8001470 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2203      	movs	r2, #3
 8002568:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800256a:	f7fe fdc5 	bl	80010f8 <HAL_GetTick>
 800256e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002570:	e029      	b.n	80025c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e023      	b.n	80025d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800258e:	f7fe fdb3 	bl	80010f8 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d914      	bls.n	80025c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e007      	b.n	80025d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1dc      	bne.n	800258e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e014      	b.n	800283e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f005 f98f 	bl	8007b48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2202      	movs	r2, #2
 800282e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	795b      	ldrb	r3, [r3, #5]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_DAC_Start_DMA+0x1e>
 8002862:	2302      	movs	r3, #2
 8002864:	e0ab      	b.n	80029be <HAL_DAC_Start_DMA+0x176>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2202      	movs	r2, #2
 8002870:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d12f      	bne.n	80028d8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4a52      	ldr	r2, [pc, #328]	; (80029c8 <HAL_DAC_Start_DMA+0x180>)
 800287e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a51      	ldr	r2, [pc, #324]	; (80029cc <HAL_DAC_Start_DMA+0x184>)
 8002886:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a50      	ldr	r2, [pc, #320]	; (80029d0 <HAL_DAC_Start_DMA+0x188>)
 800288e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800289e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d013      	beq.n	80028ce <HAL_DAC_Start_DMA+0x86>
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d845      	bhi.n	8002938 <HAL_DAC_Start_DMA+0xf0>
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_DAC_Start_DMA+0x72>
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d005      	beq.n	80028c4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80028b8:	e03e      	b.n	8002938 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3308      	adds	r3, #8
 80028c0:	613b      	str	r3, [r7, #16]
        break;
 80028c2:	e03c      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	330c      	adds	r3, #12
 80028ca:	613b      	str	r3, [r7, #16]
        break;
 80028cc:	e037      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3310      	adds	r3, #16
 80028d4:	613b      	str	r3, [r7, #16]
        break;
 80028d6:	e032      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a3d      	ldr	r2, [pc, #244]	; (80029d4 <HAL_DAC_Start_DMA+0x18c>)
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <HAL_DAC_Start_DMA+0x190>)
 80028e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	4a3b      	ldr	r2, [pc, #236]	; (80029dc <HAL_DAC_Start_DMA+0x194>)
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d013      	beq.n	800292e <HAL_DAC_Start_DMA+0xe6>
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	2b08      	cmp	r3, #8
 800290a:	d817      	bhi.n	800293c <HAL_DAC_Start_DMA+0xf4>
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_DAC_Start_DMA+0xd2>
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d005      	beq.n	8002924 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002918:	e010      	b.n	800293c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3314      	adds	r3, #20
 8002920:	613b      	str	r3, [r7, #16]
        break;
 8002922:	e00c      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3318      	adds	r3, #24
 800292a:	613b      	str	r3, [r7, #16]
        break;
 800292c:	e007      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	331c      	adds	r3, #28
 8002934:	613b      	str	r3, [r7, #16]
        break;
 8002936:	e002      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
        break;
 8002938:	bf00      	nop
 800293a:	e000      	b.n	800293e <HAL_DAC_Start_DMA+0xf6>
        break;
 800293c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d111      	bne.n	8002968 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002952:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6898      	ldr	r0, [r3, #8]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	f000 fb15 	bl	8002f8c <HAL_DMA_Start_IT>
 8002962:	4603      	mov	r3, r0
 8002964:	75fb      	strb	r3, [r7, #23]
 8002966:	e010      	b.n	800298a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002976:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68d8      	ldr	r0, [r3, #12]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	f000 fb03 	bl	8002f8c <HAL_DMA_Start_IT>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10c      	bne.n	80029b0 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6819      	ldr	r1, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2201      	movs	r2, #1
 80029a4:	409a      	lsls	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	e005      	b.n	80029bc <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f043 0204 	orr.w	r2, r3, #4
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	08002d29 	.word	0x08002d29
 80029cc:	08002d4b 	.word	0x08002d4b
 80029d0:	08002d67 	.word	0x08002d67
 80029d4:	08002dd1 	.word	0x08002dd1
 80029d8:	08002df3 	.word	0x08002df3
 80029dc:	08002e0f 	.word	0x08002e0f

080029e0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43da      	mvns	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	400a      	ands	r2, r1
 8002a06:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2201      	movs	r2, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	400a      	ands	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10d      	bne.n	8002a46 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb27 	bl	8003082 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e00c      	b.n	8002a60 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb19 	bl	8003082 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a5e:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	795b      	ldrb	r3, [r3, #5]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_DAC_ConfigChannel+0x1c>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e12a      	b.n	8002d1a <HAL_DAC_ConfigChannel+0x272>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2202      	movs	r2, #2
 8002ace:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d174      	bne.n	8002bc2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe fb0e 	bl	80010f8 <HAL_GetTick>
 8002adc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d134      	bne.n	8002b4e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ae4:	e011      	b.n	8002b0a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ae6:	f7fe fb07 	bl	80010f8 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d90a      	bls.n	8002b0a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f043 0208 	orr.w	r2, r3, #8
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2203      	movs	r2, #3
 8002b04:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e107      	b.n	8002d1a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e6      	bne.n	8002ae6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7fe faf9 	bl	8001110 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	69d2      	ldr	r2, [r2, #28]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
 8002b28:	e01e      	b.n	8002b68 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b2a:	f7fe fae5 	bl	80010f8 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d90a      	bls.n	8002b4e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f043 0208 	orr.w	r2, r3, #8
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2203      	movs	r2, #3
 8002b48:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0e5      	b.n	8002d1a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	dbe8      	blt.n	8002b2a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7fe fad9 	bl	8001110 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	69d2      	ldr	r2, [r2, #28]
 8002b66:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b78:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	ea02 0103 	and.w	r1, r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	21ff      	movs	r1, #255	; 0xff
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	ea02 0103 	and.w	r1, r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d11d      	bne.n	8002c06 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	221f      	movs	r2, #31
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f003 0310 	and.w	r3, r3, #16
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69fa      	ldr	r2, [r7, #28]
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2207      	movs	r2, #7
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	400a      	ands	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0310 	and.w	r3, r3, #16
 8002c7a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002caa:	d104      	bne.n	8002cb6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	e018      	b.n	8002ce8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002cc8:	f001 fc06 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8002ccc:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	4a14      	ldr	r2, [pc, #80]	; (8002d24 <HAL_DAC_ConfigChannel+0x27c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d904      	bls.n	8002ce0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cdc:	61fb      	str	r3, [r7, #28]
 8002cde:	e003      	b.n	8002ce8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ce6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	22c0      	movs	r2, #192	; 0xc0
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3720      	adds	r7, #32
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	04c4b400 	.word	0x04c4b400

08002d28 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff fe97 	bl	8002a6a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	711a      	strb	r2, [r3, #4]
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f7ff fe90 	bl	8002a7e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f043 0204 	orr.w	r2, r3, #4
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff fe86 	bl	8002a92 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	711a      	strb	r2, [r3, #4]
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7ff ffd8 	bl	8002d94 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	711a      	strb	r2, [r3, #4]
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b084      	sub	sp, #16
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff ffd1 	bl	8002da8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f043 0204 	orr.w	r2, r3, #4
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff ffc7 	bl	8002dbc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	711a      	strb	r2, [r3, #4]
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e08d      	b.n	8002f6a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_DMA_Init+0x138>)
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d80f      	bhi.n	8002e7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_DMA_Init+0x13c>)
 8002e62:	4413      	add	r3, r2
 8002e64:	4a45      	ldr	r2, [pc, #276]	; (8002f7c <HAL_DMA_Init+0x140>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	009a      	lsls	r2, r3, #2
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a42      	ldr	r2, [pc, #264]	; (8002f80 <HAL_DMA_Init+0x144>)
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
 8002e78:	e00e      	b.n	8002e98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <HAL_DMA_Init+0x148>)
 8002e82:	4413      	add	r3, r2
 8002e84:	4a3d      	ldr	r2, [pc, #244]	; (8002f7c <HAL_DMA_Init+0x140>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	009a      	lsls	r2, r3, #2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a3c      	ldr	r2, [pc, #240]	; (8002f88 <HAL_DMA_Init+0x14c>)
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa12 	bl	8003314 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef8:	d102      	bne.n	8002f00 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f14:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_DMA_Init+0x104>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d80c      	bhi.n	8002f40 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa32 	bl	8003390 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e008      	b.n	8002f52 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40020407 	.word	0x40020407
 8002f78:	bffdfff8 	.word	0xbffdfff8
 8002f7c:	cccccccd 	.word	0xcccccccd
 8002f80:	40020000 	.word	0x40020000
 8002f84:	bffdfbf8 	.word	0xbffdfbf8
 8002f88:	40020400 	.word	0x40020400

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_DMA_Start_IT+0x20>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e066      	b.n	800307a <HAL_DMA_Start_IT+0xee>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d155      	bne.n	800306c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f957 	bl	8003298 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 020e 	orr.w	r2, r2, #14
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e00f      	b.n	8003024 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0204 	bic.w	r2, r2, #4
 8003012:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 020a 	orr.w	r2, r2, #10
 8003022:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800303c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003040:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003058:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f042 0201 	orr.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e005      	b.n	8003078 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003078:	7dfb      	ldrb	r3, [r7, #23]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d008      	beq.n	80030ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e040      	b.n	800312e <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 020e 	bic.w	r2, r2, #14
 80030ba:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ca:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0201 	bic.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	f003 021c 	and.w	r2, r3, #28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80030f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800311a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f003 031c 	and.w	r3, r3, #28
 800315a:	2204      	movs	r2, #4
 800315c:	409a      	lsls	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d026      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x7a>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d021      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0204 	bic.w	r2, r2, #4
 800318c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003192:	f003 021c 	and.w	r2, r3, #28
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2104      	movs	r1, #4
 800319c:	fa01 f202 	lsl.w	r2, r1, r2
 80031a0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d071      	beq.n	800328e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031b2:	e06c      	b.n	800328e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	f003 031c 	and.w	r3, r3, #28
 80031bc:	2202      	movs	r2, #2
 80031be:	409a      	lsls	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d02e      	beq.n	8003226 <HAL_DMA_IRQHandler+0xec>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d029      	beq.n	8003226 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10b      	bne.n	80031f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 020a 	bic.w	r2, r2, #10
 80031ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fc:	f003 021c 	and.w	r2, r3, #28
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	2102      	movs	r1, #2
 8003206:	fa01 f202 	lsl.w	r2, r1, r2
 800320a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d038      	beq.n	800328e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003224:	e033      	b.n	800328e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f003 031c 	and.w	r3, r3, #28
 800322e:	2208      	movs	r2, #8
 8003230:	409a      	lsls	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d02a      	beq.n	8003290 <HAL_DMA_IRQHandler+0x156>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b00      	cmp	r3, #0
 8003242:	d025      	beq.n	8003290 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 020e 	bic.w	r2, r2, #14
 8003252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f003 021c 	and.w	r2, r3, #28
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f202 	lsl.w	r2, r1, r2
 8003266:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003282:	2b00      	cmp	r3, #0
 8003284:	d004      	beq.n	8003290 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800328e:	bf00      	nop
 8003290:	bf00      	nop
}
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032ae:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80032c0:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f003 021c 	and.w	r2, r3, #28
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f202 	lsl.w	r2, r1, r2
 80032d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d108      	bne.n	80032f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032f6:	e007      	b.n	8003308 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	60da      	str	r2, [r3, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b17      	ldr	r3, [pc, #92]	; (8003380 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003324:	429a      	cmp	r2, r3
 8003326:	d80a      	bhi.n	800333e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003334:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6493      	str	r3, [r2, #72]	; 0x48
 800333c:	e007      	b.n	800334e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	009a      	lsls	r2, r3, #2
 8003346:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003348:	4413      	add	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b2db      	uxtb	r3, r3
 8003354:	3b08      	subs	r3, #8
 8003356:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003358:	fba2 2303 	umull	r2, r3, r2, r3
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a0a      	ldr	r2, [pc, #40]	; (800338c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003364:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40020407 	.word	0x40020407
 8003384:	4002081c 	.word	0x4002081c
 8003388:	cccccccd 	.word	0xcccccccd
 800338c:	40020880 	.word	0x40020880

08003390 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80033b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2201      	movs	r2, #1
 80033be:	409a      	lsls	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	1000823f 	.word	0x1000823f
 80033d4:	40020940 	.word	0x40020940

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e6:	e166      	b.n	80036b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2101      	movs	r1, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8158 	beq.w	80036b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d005      	beq.n	8003418 <HAL_GPIO_Init+0x40>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d130      	bne.n	800347a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	2203      	movs	r2, #3
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800344e:	2201      	movs	r2, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4013      	ands	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	091b      	lsrs	r3, r3, #4
 8003464:	f003 0201 	and.w	r2, r3, #1
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b03      	cmp	r3, #3
 8003484:	d017      	beq.n	80034b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d123      	bne.n	800350a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	08da      	lsrs	r2, r3, #3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3208      	adds	r2, #8
 80034ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	6939      	ldr	r1, [r7, #16]
 8003506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	2203      	movs	r2, #3
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 0203 	and.w	r2, r3, #3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80b2 	beq.w	80036b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 800354e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003550:	4a60      	ldr	r2, [pc, #384]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6613      	str	r3, [r2, #96]	; 0x60
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_GPIO_Init+0x2fc>)
 800355a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	60bb      	str	r3, [r7, #8]
 8003562:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003564:	4a5c      	ldr	r2, [pc, #368]	; (80036d8 <HAL_GPIO_Init+0x300>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800358e:	d02b      	beq.n	80035e8 <HAL_GPIO_Init+0x210>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a52      	ldr	r2, [pc, #328]	; (80036dc <HAL_GPIO_Init+0x304>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d025      	beq.n	80035e4 <HAL_GPIO_Init+0x20c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a51      	ldr	r2, [pc, #324]	; (80036e0 <HAL_GPIO_Init+0x308>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d01f      	beq.n	80035e0 <HAL_GPIO_Init+0x208>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a50      	ldr	r2, [pc, #320]	; (80036e4 <HAL_GPIO_Init+0x30c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d019      	beq.n	80035dc <HAL_GPIO_Init+0x204>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a4f      	ldr	r2, [pc, #316]	; (80036e8 <HAL_GPIO_Init+0x310>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_GPIO_Init+0x200>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a4e      	ldr	r2, [pc, #312]	; (80036ec <HAL_GPIO_Init+0x314>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00d      	beq.n	80035d4 <HAL_GPIO_Init+0x1fc>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a4d      	ldr	r2, [pc, #308]	; (80036f0 <HAL_GPIO_Init+0x318>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d007      	beq.n	80035d0 <HAL_GPIO_Init+0x1f8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <HAL_GPIO_Init+0x31c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d101      	bne.n	80035cc <HAL_GPIO_Init+0x1f4>
 80035c8:	2307      	movs	r3, #7
 80035ca:	e00e      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035cc:	2308      	movs	r3, #8
 80035ce:	e00c      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035d0:	2306      	movs	r3, #6
 80035d2:	e00a      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035d4:	2305      	movs	r3, #5
 80035d6:	e008      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035d8:	2304      	movs	r3, #4
 80035da:	e006      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035dc:	2303      	movs	r3, #3
 80035de:	e004      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e002      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_GPIO_Init+0x212>
 80035e8:	2300      	movs	r3, #0
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	f002 0203 	and.w	r2, r2, #3
 80035f0:	0092      	lsls	r2, r2, #2
 80035f2:	4093      	lsls	r3, r2
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035fa:	4937      	ldr	r1, [pc, #220]	; (80036d8 <HAL_GPIO_Init+0x300>)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	089b      	lsrs	r3, r3, #2
 8003600:	3302      	adds	r3, #2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003608:	4b3b      	ldr	r3, [pc, #236]	; (80036f8 <HAL_GPIO_Init+0x320>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	43db      	mvns	r3, r3
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800362c:	4a32      	ldr	r2, [pc, #200]	; (80036f8 <HAL_GPIO_Init+0x320>)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003632:	4b31      	ldr	r3, [pc, #196]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003656:	4a28      	ldr	r2, [pc, #160]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_GPIO_Init+0x320>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	43db      	mvns	r3, r3
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4013      	ands	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003680:	4a1d      	ldr	r2, [pc, #116]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003686:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <HAL_GPIO_Init+0x320>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	43db      	mvns	r3, r3
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	4013      	ands	r3, r2
 8003694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036aa:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <HAL_GPIO_Init+0x320>)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3301      	adds	r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f47f ae91 	bne.w	80033e8 <HAL_GPIO_Init+0x10>
  }
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40010000 	.word	0x40010000
 80036dc:	48000400 	.word	0x48000400
 80036e0:	48000800 	.word	0x48000800
 80036e4:	48000c00 	.word	0x48000c00
 80036e8:	48001000 	.word	0x48001000
 80036ec:	48001400 	.word	0x48001400
 80036f0:	48001800 	.word	0x48001800
 80036f4:	48001c00 	.word	0x48001c00
 80036f8:	40010400 	.word	0x40010400

080036fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	460b      	mov	r3, r1
 8003706:	807b      	strh	r3, [r7, #2]
 8003708:	4613      	mov	r3, r2
 800370a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800370c:	787b      	ldrb	r3, [r7, #1]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003718:	e002      	b.n	8003720 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4013      	ands	r3, r2
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	43d9      	mvns	r1, r3
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	400b      	ands	r3, r1
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	4603      	mov	r3, r0
 8003768:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800376a:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d006      	beq.n	8003784 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003776:	4a05      	ldr	r2, [pc, #20]	; (800378c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003778:	88fb      	ldrh	r3, [r7, #6]
 800377a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 f90c 	bl	800699c <HAL_GPIO_EXTI_Callback>
  }
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40010400 	.word	0x40010400

08003790 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <HAL_PWREx_GetVoltageRange+0x3c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800379c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037a0:	d102      	bne.n	80037a8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80037a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a6:	e00b      	b.n	80037c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_PWREx_GetVoltageRange+0x3c>)
 80037aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b6:	d102      	bne.n	80037be <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80037b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037bc:	e000      	b.n	80037c0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80037be:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40007000 	.word	0x40007000

080037d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d141      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037de:	4b4b      	ldr	r3, [pc, #300]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ea:	d131      	bne.n	8003850 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ec:	4b47      	ldr	r3, [pc, #284]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f2:	4a46      	ldr	r2, [pc, #280]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fc:	4b43      	ldr	r3, [pc, #268]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003804:	4a41      	ldr	r2, [pc, #260]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800380a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800380c:	4b40      	ldr	r3, [pc, #256]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2232      	movs	r2, #50	; 0x32
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	4a3f      	ldr	r2, [pc, #252]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	0c9b      	lsrs	r3, r3, #18
 800381e:	3301      	adds	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003822:	e002      	b.n	800382a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	3b01      	subs	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800382a:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003836:	d102      	bne.n	800383e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f2      	bne.n	8003824 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800383e:	4b33      	ldr	r3, [pc, #204]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d158      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e057      	b.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003856:	4a2d      	ldr	r2, [pc, #180]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800385c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003860:	e04d      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003868:	d141      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800386a:	4b28      	ldr	r3, [pc, #160]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003876:	d131      	bne.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003878:	4b24      	ldr	r3, [pc, #144]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800387e:	4a23      	ldr	r2, [pc, #140]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2232      	movs	r2, #50	; 0x32
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038a4:	fba2 2303 	umull	r2, r3, r2, r3
 80038a8:	0c9b      	lsrs	r3, r3, #18
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ae:	e002      	b.n	80038b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d102      	bne.n	80038ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f2      	bne.n	80038b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d6:	d112      	bne.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e011      	b.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038dc:	4b0b      	ldr	r3, [pc, #44]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038e2:	4a0a      	ldr	r2, [pc, #40]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038ec:	e007      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038fc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40007000 	.word	0x40007000
 8003910:	20000014 	.word	0x20000014
 8003914:	431bde83 	.word	0x431bde83

08003918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f000 bc08 	b.w	800413c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392c:	4b96      	ldr	r3, [pc, #600]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003936:	4b94      	ldr	r3, [pc, #592]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80e4 	beq.w	8003b16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_RCC_OscConfig+0x4c>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	f040 808b 	bne.w	8003a72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b01      	cmp	r3, #1
 8003960:	f040 8087 	bne.w	8003a72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003964:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x64>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e3df      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	4b81      	ldr	r3, [pc, #516]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_RCC_OscConfig+0x7e>
 800398c:	4b7e      	ldr	r3, [pc, #504]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003994:	e005      	b.n	80039a2 <HAL_RCC_OscConfig+0x8a>
 8003996:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d223      	bcs.n	80039ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fdcc 	bl	8004548 <RCC_SetFlashLatencyFromMSIRange>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e3c0      	b.n	800413c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ba:	4b73      	ldr	r3, [pc, #460]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a72      	ldr	r2, [pc, #456]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b70      	ldr	r3, [pc, #448]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	496d      	ldr	r1, [pc, #436]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d8:	4b6b      	ldr	r3, [pc, #428]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	4968      	ldr	r1, [pc, #416]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
 80039ec:	e025      	b.n	8003a3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ee:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4960      	ldr	r1, [pc, #384]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	495b      	ldr	r1, [pc, #364]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fd8c 	bl	8004548 <RCC_SetFlashLatencyFromMSIRange>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e380      	b.n	800413c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3a:	f000 fcc1 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b51      	ldr	r3, [pc, #324]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	4950      	ldr	r1, [pc, #320]	; (8003b8c <HAL_RCC_OscConfig+0x274>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	4a4e      	ldr	r2, [pc, #312]	; (8003b90 <HAL_RCC_OscConfig+0x278>)
 8003a58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	; (8003b94 <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fafa 	bl	8001058 <HAL_InitTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d052      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	e364      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d032      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a86:	f7fd fb37 	bl	80010f8 <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a8e:	f7fd fb33 	bl	80010f8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e34d      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa0:	4b39      	ldr	r3, [pc, #228]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aac:	4b36      	ldr	r3, [pc, #216]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a35      	ldr	r2, [pc, #212]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b33      	ldr	r3, [pc, #204]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4930      	ldr	r1, [pc, #192]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aca:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	492b      	ldr	r1, [pc, #172]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
 8003ade:	e01a      	b.n	8003b16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fb04 	bl	80010f8 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af4:	f7fd fb00 	bl	80010f8 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e31a      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1dc>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d073      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x21c>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d10e      	bne.n	8003b4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d063      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d15f      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e2f7      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x24c>
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a0b      	ldr	r2, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e025      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6c:	d114      	bne.n	8003b98 <HAL_RCC_OscConfig+0x280>
 8003b6e:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a02      	ldr	r2, [pc, #8]	; (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e013      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	0800d9a4 	.word	0x0800d9a4
 8003b90:	20000014 	.word	0x20000014
 8003b94:	20000000 	.word	0x20000000
 8003b98:	4ba0      	ldr	r3, [pc, #640]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a9f      	ldr	r2, [pc, #636]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b9d      	ldr	r3, [pc, #628]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a9c      	ldr	r2, [pc, #624]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fa9e 	bl	80010f8 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fd fa9a 	bl	80010f8 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e2b4      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd2:	4b92      	ldr	r3, [pc, #584]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x2a8>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd fa8a 	bl	80010f8 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd fa86 	bl	80010f8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e2a0      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2d0>
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d060      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x310>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b0c      	cmp	r3, #12
 8003c20:	d119      	bne.n	8003c56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d116      	bne.n	8003c56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c28:	4b7c      	ldr	r3, [pc, #496]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x328>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e27d      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b76      	ldr	r3, [pc, #472]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	4973      	ldr	r1, [pc, #460]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c54:	e040      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d023      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5e:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6e      	ldr	r2, [pc, #440]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fa45 	bl	80010f8 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fd fa41 	bl	80010f8 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e25b      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c84:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b62      	ldr	r3, [pc, #392]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	495f      	ldr	r1, [pc, #380]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
 8003ca4:	e018      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5c      	ldr	r2, [pc, #368]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fa21 	bl	80010f8 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd fa1d 	bl	80010f8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e237      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ccc:	4b53      	ldr	r3, [pc, #332]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cf2:	4a4a      	ldr	r2, [pc, #296]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd f9fc 	bl	80010f8 <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d04:	f7fd f9f8 	bl	80010f8 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e212      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d16:	4b41      	ldr	r3, [pc, #260]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3ec>
 8003d24:	e01b      	b.n	8003d5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d26:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fd f9df 	bl	80010f8 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fd f9db 	bl	80010f8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e1f5      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d50:	4b32      	ldr	r3, [pc, #200]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ef      	bne.n	8003d3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80a6 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d70:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	4a26      	ldr	r2, [pc, #152]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
 8003d88:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d118      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db0:	f7fd f9a2 	bl	80010f8 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd f99e 	bl	80010f8 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1b8      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d108      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4d8>
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dee:	e029      	b.n	8003e44 <HAL_RCC_OscConfig+0x52c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d115      	bne.n	8003e24 <HAL_RCC_OscConfig+0x50c>
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a03      	ldr	r2, [pc, #12]	; (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e18:	e014      	b.n	8003e44 <HAL_RCC_OscConfig+0x52c>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	4b9d      	ldr	r3, [pc, #628]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	4a9c      	ldr	r2, [pc, #624]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e34:	4b99      	ldr	r3, [pc, #612]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a98      	ldr	r2, [pc, #608]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d016      	beq.n	8003e7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd f954 	bl	80010f8 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fd f950 	bl	80010f8 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e168      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ed      	beq.n	8003e54 <HAL_RCC_OscConfig+0x53c>
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd f93d 	bl	80010f8 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd f939 	bl	80010f8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e151      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	4b80      	ldr	r3, [pc, #512]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ed      	bne.n	8003e82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	4a7a      	ldr	r2, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d03c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ecc:	4b73      	ldr	r3, [pc, #460]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed2:	4a72      	ldr	r2, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd f90c 	bl	80010f8 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee4:	f7fd f908 	bl	80010f8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e122      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ef6:	4b69      	ldr	r3, [pc, #420]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x5cc>
 8003f04:	e01b      	b.n	8003f3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f06:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f0c:	4a63      	ldr	r2, [pc, #396]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd f8ef 	bl	80010f8 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f1e:	f7fd f8eb 	bl	80010f8 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e105      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f30:	4b5a      	ldr	r3, [pc, #360]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80f9 	beq.w	800413a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	f040 80cf 	bne.w	80040f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f52:	4b52      	ldr	r3, [pc, #328]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d12c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	3b01      	subs	r3, #1
 8003f72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d123      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d11b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d113      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d109      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d071      	beq.n	80040a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d068      	beq.n	8004098 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fc6:	4b35      	ldr	r3, [pc, #212]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fd2:	4b32      	ldr	r3, [pc, #200]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0ac      	b.n	800413c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8003fe8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fee:	f7fd f883 	bl	80010f8 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd f87f 	bl	80010f8 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e099      	b.n	800413c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004008:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCC_OscConfig+0x784>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004014:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <HAL_RCC_OscConfig+0x788>)
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004024:	3a01      	subs	r2, #1
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800402e:	0212      	lsls	r2, r2, #8
 8004030:	4311      	orrs	r1, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	3a01      	subs	r2, #1
 800403a:	0552      	lsls	r2, r2, #21
 800403c:	4311      	orrs	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004042:	0852      	lsrs	r2, r2, #1
 8004044:	3a01      	subs	r2, #1
 8004046:	0652      	lsls	r2, r2, #25
 8004048:	4311      	orrs	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800404e:	06d2      	lsls	r2, r2, #27
 8004050:	430a      	orrs	r2, r1
 8004052:	4912      	ldr	r1, [pc, #72]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8004054:	4313      	orrs	r3, r2
 8004056:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_RCC_OscConfig+0x784>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_RCC_OscConfig+0x784>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCC_OscConfig+0x784>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a0c      	ldr	r2, [pc, #48]	; (800409c <HAL_RCC_OscConfig+0x784>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004070:	f7fd f842 	bl	80010f8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd f83e 	bl	80010f8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e058      	b.n	800413c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_RCC_OscConfig+0x784>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004096:	e050      	b.n	800413a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04f      	b.n	800413c <HAL_RCC_OscConfig+0x824>
 800409c:	40021000 	.word	0x40021000
 80040a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a4:	4b27      	ldr	r3, [pc, #156]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d144      	bne.n	800413a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040b0:	4b24      	ldr	r3, [pc, #144]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a23      	ldr	r2, [pc, #140]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040bc:	4b21      	ldr	r3, [pc, #132]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040c8:	f7fd f816 	bl	80010f8 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fd f812 	bl	80010f8 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e02c      	b.n	800413c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x7b8>
 80040ee:	e024      	b.n	800413a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d01f      	beq.n	8004136 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a12      	ldr	r2, [pc, #72]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7fc fff9 	bl	80010f8 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fc fff5 	bl	80010f8 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e00f      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	4b09      	ldr	r3, [pc, #36]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4905      	ldr	r1, [pc, #20]	; (8004144 <HAL_RCC_OscConfig+0x82c>)
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_OscConfig+0x830>)
 8004130:	4013      	ands	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
 8004134:	e001      	b.n	800413a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	feeefffc 	.word	0xfeeefffc

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e11d      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b90      	ldr	r3, [pc, #576]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b8d      	ldr	r3, [pc, #564]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 020f 	bic.w	r2, r3, #15
 800417a:	498b      	ldr	r1, [pc, #556]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b89      	ldr	r3, [pc, #548]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e105      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4b81      	ldr	r3, [pc, #516]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d908      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	497b      	ldr	r1, [pc, #492]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d079      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d11e      	bne.n	8004214 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d6:	4b75      	ldr	r3, [pc, #468]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0dc      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80041e6:	f000 fa09 	bl	80045fc <RCC_GetSysClockFreqFromPLLSource>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a70      	ldr	r2, [pc, #448]	; (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d946      	bls.n	8004280 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041f2:	4b6e      	ldr	r3, [pc, #440]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d140      	bne.n	8004280 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041fe:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004206:	4a69      	ldr	r2, [pc, #420]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e035      	b.n	8004280 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421c:	4b63      	ldr	r3, [pc, #396]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d115      	bne.n	8004254 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0b9      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004234:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ad      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0a5      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004254:	f000 f8b4 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004258:	4603      	mov	r3, r0
 800425a:	4a55      	ldr	r2, [pc, #340]	; (80043b0 <HAL_RCC_ClockConfig+0x264>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d90f      	bls.n	8004280 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004260:	4b52      	ldr	r3, [pc, #328]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800426c:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004274:	4a4d      	ldr	r2, [pc, #308]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004280:	4b4a      	ldr	r3, [pc, #296]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 0203 	bic.w	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4947      	ldr	r1, [pc, #284]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004292:	f7fc ff31 	bl	80010f8 <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fc ff2d 	bl	80010f8 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e077      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b0:	4b3e      	ldr	r3, [pc, #248]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 020c 	and.w	r2, r3, #12
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1eb      	bne.n	800429a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042c8:	4b38      	ldr	r3, [pc, #224]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a37      	ldr	r2, [pc, #220]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d208      	bcs.n	8004302 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b2e      	ldr	r3, [pc, #184]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	492b      	ldr	r1, [pc, #172]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d210      	bcs.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 020f 	bic.w	r2, r3, #15
 8004318:	4923      	ldr	r1, [pc, #140]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e036      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433e:	4b1b      	ldr	r3, [pc, #108]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4918      	ldr	r1, [pc, #96]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435c:	4b13      	ldr	r3, [pc, #76]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4910      	ldr	r1, [pc, #64]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004370:	f000 f826 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	490c      	ldr	r1, [pc, #48]	; (80043b4 <HAL_RCC_ClockConfig+0x268>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	4a0a      	ldr	r2, [pc, #40]	; (80043b8 <HAL_RCC_ClockConfig+0x26c>)
 800438e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_RCC_ClockConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc fe5f 	bl	8001058 <HAL_InitTick>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]

  return status;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40021000 	.word	0x40021000
 80043b0:	04c4b400 	.word	0x04c4b400
 80043b4:	0800d9a4 	.word	0x0800d9a4
 80043b8:	20000014 	.word	0x20000014
 80043bc:	20000000 	.word	0x20000000

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	; 0x24
 80043c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ce:	4b3e      	ldr	r3, [pc, #248]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	4b3b      	ldr	r3, [pc, #236]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x34>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d121      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d11e      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043f4:	4b34      	ldr	r3, [pc, #208]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004400:	4b31      	ldr	r3, [pc, #196]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e005      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004410:	4b2d      	ldr	r3, [pc, #180]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800441c:	4a2b      	ldr	r2, [pc, #172]	; (80044cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004424:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d102      	bne.n	800443e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e004      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d101      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004446:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d134      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444e:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0xa6>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d003      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0xac>
 8004464:	e005      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004468:	617b      	str	r3, [r7, #20]
      break;
 800446a:	e005      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800446e:	617b      	str	r3, [r7, #20]
      break;
 8004470:	e002      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	617b      	str	r3, [r7, #20]
      break;
 8004476:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	fb03 f202 	mul.w	r2, r3, r2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0e5b      	lsrs	r3, r3, #25
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	3301      	adds	r3, #1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044b8:	69bb      	ldr	r3, [r7, #24]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	; 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	0800d9bc 	.word	0x0800d9bc
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000014 	.word	0x20000014

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	0800d9b4 	.word	0x0800d9b4

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004520:	f7ff ffda 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0adb      	lsrs	r3, r3, #11
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4904      	ldr	r1, [pc, #16]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	0800d9b4 	.word	0x0800d9b4

08004548 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f916 	bl	8003790 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
 8004566:	e014      	b.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	; 0x58
 8004574:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004580:	f7ff f906 	bl	8003790 <HAL_PWREx_GetVoltageRange>
 8004584:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004586:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458a:	4a1a      	ldr	r2, [pc, #104]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800458c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004590:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004598:	d10b      	bne.n	80045b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2b80      	cmp	r3, #128	; 0x80
 800459e:	d913      	bls.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2ba0      	cmp	r3, #160	; 0xa0
 80045a4:	d902      	bls.n	80045ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a6:	2302      	movs	r3, #2
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e00d      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ac:	2301      	movs	r3, #1
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	e00a      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b7f      	cmp	r3, #127	; 0x7f
 80045b6:	d902      	bls.n	80045be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80045b8:	2302      	movs	r3, #2
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e004      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b70      	cmp	r3, #112	; 0x70
 80045c2:	d101      	bne.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c4:	2301      	movs	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 020f 	bic.w	r2, r3, #15
 80045d0:	4909      	ldr	r1, [pc, #36]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40022000 	.word	0x40022000

080045fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004602:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d00b      	beq.n	800462a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d825      	bhi.n	8004664 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d008      	beq.n	8004630 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11f      	bne.n	8004664 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004626:	613b      	str	r3, [r7, #16]
    break;
 8004628:	e01f      	b.n	800466a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800462a:	4b25      	ldr	r3, [pc, #148]	; (80046c0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800462c:	613b      	str	r3, [r7, #16]
    break;
 800462e:	e01c      	b.n	800466a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800463c:	4b1e      	ldr	r3, [pc, #120]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	0a1b      	lsrs	r3, r3, #8
 8004644:	f003 030f 	and.w	r3, r3, #15
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e005      	b.n	8004658 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004658:	4a1a      	ldr	r2, [pc, #104]	; (80046c4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004660:	613b      	str	r3, [r7, #16]
    break;
 8004662:	e002      	b.n	800466a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004664:	2300      	movs	r3, #0
 8004666:	613b      	str	r3, [r7, #16]
    break;
 8004668:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800466a:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	3301      	adds	r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	fb03 f202 	mul.w	r2, r3, r2
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	0e5b      	lsrs	r3, r3, #25
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	3301      	adds	r3, #1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80046aa:	683b      	ldr	r3, [r7, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40021000 	.word	0x40021000
 80046bc:	00f42400 	.word	0x00f42400
 80046c0:	007a1200 	.word	0x007a1200
 80046c4:	0800d9bc 	.word	0x0800d9bc

080046c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046d0:	2300      	movs	r3, #0
 80046d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d4:	2300      	movs	r3, #0
 80046d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d040      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d02a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d825      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80046f0:	2b60      	cmp	r3, #96	; 0x60
 80046f2:	d026      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046f4:	2b60      	cmp	r3, #96	; 0x60
 80046f6:	d821      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80046f8:	2b40      	cmp	r3, #64	; 0x40
 80046fa:	d006      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x42>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d81d      	bhi.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d010      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004708:	e018      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	4a88      	ldr	r2, [pc, #544]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004716:	e015      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fb02 	bl	8004d28 <RCCEx_PLLSAI1_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004728:	e00c      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3320      	adds	r3, #32
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fbed 	bl	8004f10 <RCCEx_PLLSAI2_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473a:	e003      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	74fb      	strb	r3, [r7, #19]
      break;
 8004740:	e000      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004742:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800474a:	4b79      	ldr	r3, [pc, #484]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800474c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004750:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004758:	4975      	ldr	r1, [pc, #468]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004760:	e001      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d047      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477a:	d030      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x116>
 800477c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004780:	d82a      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004786:	d02a      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478c:	d824      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004792:	d008      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004798:	d81e      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a2:	d010      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047a4:	e018      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047a6:	4b62      	ldr	r3, [pc, #392]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	4a61      	ldr	r2, [pc, #388]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047b2:	e015      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fab4 	bl	8004d28 <RCCEx_PLLSAI1_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047c4:	e00c      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3320      	adds	r3, #32
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fb9f 	bl	8004f10 <RCCEx_PLLSAI2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d6:	e003      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	74fb      	strb	r3, [r7, #19]
      break;
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80047de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047e6:	4b52      	ldr	r3, [pc, #328]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f4:	494e      	ldr	r1, [pc, #312]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80047fc:	e001      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 809f 	beq.w	800494e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004810:	2300      	movs	r3, #0
 8004812:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004814:	4b46      	ldr	r3, [pc, #280]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00d      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	4b41      	ldr	r3, [pc, #260]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	4a40      	ldr	r2, [pc, #256]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	6593      	str	r3, [r2, #88]	; 0x58
 8004836:	4b3e      	ldr	r3, [pc, #248]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3a      	ldr	r2, [pc, #232]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800484c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004850:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004852:	f7fc fc51 	bl	80010f8 <HAL_GetTick>
 8004856:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004858:	e009      	b.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fc fc4d 	bl	80010f8 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d902      	bls.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	74fb      	strb	r3, [r7, #19]
        break;
 800486c:	e005      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0ef      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800487a:	7cfb      	ldrb	r3, [r7, #19]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d15b      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004880:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01f      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	429a      	cmp	r2, r3
 800489c:	d019      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ca:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d016      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fc fc0c 	bl	80010f8 <HAL_GetTick>
 80048e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048e2:	e00b      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e4:	f7fc fc08 	bl	80010f8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d902      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	74fb      	strb	r3, [r7, #19]
            break;
 80048fa:	e006      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d0ec      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800490a:	7cfb      	ldrb	r3, [r7, #19]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10c      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004916:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004928:	e008      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	74bb      	strb	r3, [r7, #18]
 800492e:	e005      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493c:	7c7b      	ldrb	r3, [r7, #17]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d105      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004942:	4ba0      	ldr	r3, [pc, #640]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	4a9f      	ldr	r2, [pc, #636]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800495a:	4b9a      	ldr	r3, [pc, #616]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004960:	f023 0203 	bic.w	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	4996      	ldr	r1, [pc, #600]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800497c:	4b91      	ldr	r3, [pc, #580]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004982:	f023 020c 	bic.w	r2, r3, #12
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	498e      	ldr	r1, [pc, #568]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800499e:	4b89      	ldr	r3, [pc, #548]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	4985      	ldr	r1, [pc, #532]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049c0:	4b80      	ldr	r3, [pc, #512]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ce:	497d      	ldr	r1, [pc, #500]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049e2:	4b78      	ldr	r3, [pc, #480]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f0:	4974      	ldr	r1, [pc, #464]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a04:	4b6f      	ldr	r3, [pc, #444]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a12:	496c      	ldr	r1, [pc, #432]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a26:	4b67      	ldr	r3, [pc, #412]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a34:	4963      	ldr	r1, [pc, #396]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a48:	4b5e      	ldr	r3, [pc, #376]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a56:	495b      	ldr	r1, [pc, #364]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a6a:	4b56      	ldr	r3, [pc, #344]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	4952      	ldr	r1, [pc, #328]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a8c:	4b4d      	ldr	r3, [pc, #308]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	494a      	ldr	r1, [pc, #296]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aae:	4b45      	ldr	r3, [pc, #276]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004abc:	4941      	ldr	r1, [pc, #260]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ad0:	4b3c      	ldr	r3, [pc, #240]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ade:	4939      	ldr	r1, [pc, #228]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d028      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af2:	4b34      	ldr	r3, [pc, #208]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b00:	4930      	ldr	r1, [pc, #192]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b10:	d106      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4a2b      	ldr	r2, [pc, #172]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b1c:	60d3      	str	r3, [r2, #12]
 8004b1e:	e011      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	2101      	movs	r1, #1
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 f8f9 	bl	8004d28 <RCCEx_PLLSAI1_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b3a:	7cfb      	ldrb	r3, [r7, #19]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d04d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b58:	d108      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b6a:	e012      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004b6c:	4b15      	ldr	r3, [pc, #84]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b7c:	4b11      	ldr	r3, [pc, #68]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8a:	490e      	ldr	r1, [pc, #56]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b9a:	d106      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b9c:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4a08      	ldr	r2, [pc, #32]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba6:	60d3      	str	r3, [r2, #12]
 8004ba8:	e020      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb2:	d109      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bb4:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbe:	60d3      	str	r3, [r2, #12]
 8004bc0:	e014      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd0:	d10c      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 f8a5 	bl	8004d28 <RCCEx_PLLSAI1_Config>
 8004bde:	4603      	mov	r3, r0
 8004be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d028      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bf8:	4b4a      	ldr	r3, [pc, #296]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	4947      	ldr	r1, [pc, #284]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c16:	d106      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a41      	ldr	r2, [pc, #260]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e011      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c2e:	d10c      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	3304      	adds	r3, #4
 8004c34:	2101      	movs	r1, #1
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f876 	bl	8004d28 <RCCEx_PLLSAI1_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01e      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c56:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c66:	492f      	ldr	r1, [pc, #188]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2102      	movs	r1, #2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f851 	bl	8004d28 <RCCEx_PLLSAI1_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c8a:	7cfb      	ldrb	r3, [r7, #19]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ca0:	4b20      	ldr	r3, [pc, #128]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ca6:	f023 0204 	bic.w	r2, r3, #4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cb0:	491c      	ldr	r1, [pc, #112]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004cc4:	4b17      	ldr	r3, [pc, #92]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cca:	f023 0218 	bic.w	r2, r3, #24
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	4913      	ldr	r1, [pc, #76]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d017      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf8:	490a      	ldr	r1, [pc, #40]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d0a:	d105      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d0c:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d18:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000

08004d28 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d32:	2300      	movs	r3, #0
 8004d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d36:	4b72      	ldr	r3, [pc, #456]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00e      	beq.n	8004d60 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d42:	4b6f      	ldr	r3, [pc, #444]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f003 0203 	and.w	r2, r3, #3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d103      	bne.n	8004d5a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
       ||
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d142      	bne.n	8004de0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	73fb      	strb	r3, [r7, #15]
 8004d5e:	e03f      	b.n	8004de0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d018      	beq.n	8004d9a <RCCEx_PLLSAI1_Config+0x72>
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d825      	bhi.n	8004db8 <RCCEx_PLLSAI1_Config+0x90>
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d002      	beq.n	8004d76 <RCCEx_PLLSAI1_Config+0x4e>
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d009      	beq.n	8004d88 <RCCEx_PLLSAI1_Config+0x60>
 8004d74:	e020      	b.n	8004db8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d76:	4b62      	ldr	r3, [pc, #392]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d11d      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d86:	e01a      	b.n	8004dbe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d88:	4b5d      	ldr	r3, [pc, #372]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d116      	bne.n	8004dc2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e013      	b.n	8004dc2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d9a:	4b59      	ldr	r3, [pc, #356]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004da6:	4b56      	ldr	r3, [pc, #344]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004db6:	e006      	b.n	8004dc6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      break;
 8004dbc:	e004      	b.n	8004dc8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e002      	b.n	8004dc8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e000      	b.n	8004dc8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d108      	bne.n	8004de0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004dce:	4b4c      	ldr	r3, [pc, #304]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 0203 	bic.w	r2, r3, #3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4949      	ldr	r1, [pc, #292]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8086 	bne.w	8004ef4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004de8:	4b45      	ldr	r3, [pc, #276]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a44      	ldr	r2, [pc, #272]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df4:	f7fc f980 	bl	80010f8 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dfc:	f7fc f97c 	bl	80010f8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
        break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e10:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1ef      	bne.n	8004dfc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d168      	bne.n	8004ef4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d113      	bne.n	8004e50 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e28:	4b35      	ldr	r3, [pc, #212]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	0211      	lsls	r1, r2, #8
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	68d2      	ldr	r2, [r2, #12]
 8004e3a:	06d2      	lsls	r2, r2, #27
 8004e3c:	4311      	orrs	r1, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6852      	ldr	r2, [r2, #4]
 8004e42:	3a01      	subs	r2, #1
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	430a      	orrs	r2, r1
 8004e48:	492d      	ldr	r1, [pc, #180]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	610b      	str	r3, [r1, #16]
 8004e4e:	e02d      	b.n	8004eac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d115      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e56:	4b2a      	ldr	r3, [pc, #168]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0211      	lsls	r1, r2, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6912      	ldr	r2, [r2, #16]
 8004e68:	0852      	lsrs	r2, r2, #1
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	0552      	lsls	r2, r2, #21
 8004e6e:	4311      	orrs	r1, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6852      	ldr	r2, [r2, #4]
 8004e74:	3a01      	subs	r2, #1
 8004e76:	0112      	lsls	r2, r2, #4
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	4921      	ldr	r1, [pc, #132]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]
 8004e80:	e014      	b.n	8004eac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e82:	4b1f      	ldr	r3, [pc, #124]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	4b21      	ldr	r3, [pc, #132]	; (8004f0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6892      	ldr	r2, [r2, #8]
 8004e8e:	0211      	lsls	r1, r2, #8
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6952      	ldr	r2, [r2, #20]
 8004e94:	0852      	lsrs	r2, r2, #1
 8004e96:	3a01      	subs	r2, #1
 8004e98:	0652      	lsls	r2, r2, #25
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6852      	ldr	r2, [r2, #4]
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	4916      	ldr	r1, [pc, #88]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004eac:	4b14      	ldr	r3, [pc, #80]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a13      	ldr	r2, [pc, #76]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb8:	f7fc f91e 	bl	80010f8 <HAL_GetTick>
 8004ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ebe:	e009      	b.n	8004ed4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ec0:	f7fc f91a 	bl	80010f8 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	d902      	bls.n	8004ed4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8004ed2:	e005      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ed4:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ef      	beq.n	8004ec0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	4904      	ldr	r1, [pc, #16]	; (8004f00 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	07ff800f 	.word	0x07ff800f
 8004f08:	ff9f800f 	.word	0xff9f800f
 8004f0c:	f9ff800f 	.word	0xf9ff800f

08004f10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f1e:	4b72      	ldr	r3, [pc, #456]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00e      	beq.n	8004f48 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f2a:	4b6f      	ldr	r3, [pc, #444]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f003 0203 	and.w	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d103      	bne.n	8004f42 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d142      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	73fb      	strb	r3, [r7, #15]
 8004f46:	e03f      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d018      	beq.n	8004f82 <RCCEx_PLLSAI2_Config+0x72>
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d825      	bhi.n	8004fa0 <RCCEx_PLLSAI2_Config+0x90>
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d002      	beq.n	8004f5e <RCCEx_PLLSAI2_Config+0x4e>
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d009      	beq.n	8004f70 <RCCEx_PLLSAI2_Config+0x60>
 8004f5c:	e020      	b.n	8004fa0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f5e:	4b62      	ldr	r3, [pc, #392]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11d      	bne.n	8004fa6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f6e:	e01a      	b.n	8004fa6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f70:	4b5d      	ldr	r3, [pc, #372]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d116      	bne.n	8004faa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f80:	e013      	b.n	8004faa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f82:	4b59      	ldr	r3, [pc, #356]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10f      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f8e:	4b56      	ldr	r3, [pc, #344]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f9e:	e006      	b.n	8004fae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa4:	e004      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fa6:	bf00      	nop
 8004fa8:	e002      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004faa:	bf00      	nop
 8004fac:	e000      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d108      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4949      	ldr	r1, [pc, #292]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f040 8086 	bne.w	80050dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fd0:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a44      	ldr	r2, [pc, #272]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fdc:	f7fc f88c 	bl	80010f8 <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fe2:	e009      	b.n	8004ff8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fe4:	f7fc f888 	bl	80010f8 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d902      	bls.n	8004ff8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ff6:	e005      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ef      	bne.n	8004fe4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005004:	7bfb      	ldrb	r3, [r7, #15]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d168      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d113      	bne.n	8005038 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005010:	4b35      	ldr	r3, [pc, #212]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005012:	695a      	ldr	r2, [r3, #20]
 8005014:	4b35      	ldr	r3, [pc, #212]	; (80050ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8005016:	4013      	ands	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6892      	ldr	r2, [r2, #8]
 800501c:	0211      	lsls	r1, r2, #8
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68d2      	ldr	r2, [r2, #12]
 8005022:	06d2      	lsls	r2, r2, #27
 8005024:	4311      	orrs	r1, r2
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6852      	ldr	r2, [r2, #4]
 800502a:	3a01      	subs	r2, #1
 800502c:	0112      	lsls	r2, r2, #4
 800502e:	430a      	orrs	r2, r1
 8005030:	492d      	ldr	r1, [pc, #180]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005032:	4313      	orrs	r3, r2
 8005034:	614b      	str	r3, [r1, #20]
 8005036:	e02d      	b.n	8005094 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d115      	bne.n	800506a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800503e:	4b2a      	ldr	r3, [pc, #168]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005044:	4013      	ands	r3, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6892      	ldr	r2, [r2, #8]
 800504a:	0211      	lsls	r1, r2, #8
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6912      	ldr	r2, [r2, #16]
 8005050:	0852      	lsrs	r2, r2, #1
 8005052:	3a01      	subs	r2, #1
 8005054:	0552      	lsls	r2, r2, #21
 8005056:	4311      	orrs	r1, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	3a01      	subs	r2, #1
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	430a      	orrs	r2, r1
 8005062:	4921      	ldr	r1, [pc, #132]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005064:	4313      	orrs	r3, r2
 8005066:	614b      	str	r3, [r1, #20]
 8005068:	e014      	b.n	8005094 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800506a:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	4b21      	ldr	r3, [pc, #132]	; (80050f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005070:	4013      	ands	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6892      	ldr	r2, [r2, #8]
 8005076:	0211      	lsls	r1, r2, #8
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6952      	ldr	r2, [r2, #20]
 800507c:	0852      	lsrs	r2, r2, #1
 800507e:	3a01      	subs	r2, #1
 8005080:	0652      	lsls	r2, r2, #25
 8005082:	4311      	orrs	r1, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6852      	ldr	r2, [r2, #4]
 8005088:	3a01      	subs	r2, #1
 800508a:	0112      	lsls	r2, r2, #4
 800508c:	430a      	orrs	r2, r1
 800508e:	4916      	ldr	r1, [pc, #88]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005094:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc f82a 	bl	80010f8 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a8:	f7fc f826 	bl	80010f8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
          break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ef      	beq.n	80050a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	4904      	ldr	r1, [pc, #16]	; (80050e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000
 80050ec:	07ff800f 	.word	0x07ff800f
 80050f0:	ff9f800f 	.word	0xff9f800f
 80050f4:	f9ff800f 	.word	0xf9ff800f

080050f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e049      	b.n	800519e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d106      	bne.n	8005124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f002 fd80 	bl	8007c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3304      	adds	r3, #4
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f000 fab6 	bl	80056a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d001      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e04f      	b.n	8005260 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a23      	ldr	r2, [pc, #140]	; (800526c <HAL_TIM_Base_Start_IT+0xc4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01d      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x76>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ea:	d018      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x76>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <HAL_TIM_Base_Start_IT+0xc8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x76>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <HAL_TIM_Base_Start_IT+0xcc>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00e      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x76>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <HAL_TIM_Base_Start_IT+0xd0>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d009      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x76>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1b      	ldr	r2, [pc, #108]	; (800527c <HAL_TIM_Base_Start_IT+0xd4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d004      	beq.n	800521e <HAL_TIM_Base_Start_IT+0x76>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a19      	ldr	r2, [pc, #100]	; (8005280 <HAL_TIM_Base_Start_IT+0xd8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d115      	bne.n	800524a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <HAL_TIM_Base_Start_IT+0xdc>)
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2b06      	cmp	r3, #6
 800522e:	d015      	beq.n	800525c <HAL_TIM_Base_Start_IT+0xb4>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005236:	d011      	beq.n	800525c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005248:	e008      	b.n	800525c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0201 	orr.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e000      	b.n	800525e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40000400 	.word	0x40000400
 8005274:	40000800 	.word	0x40000800
 8005278:	40000c00 	.word	0x40000c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	00010007 	.word	0x00010007

08005288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	2b02      	cmp	r3, #2
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0202 	mvn.w	r2, #2
 80052b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9ce 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f9c0 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f9d1 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0304 	and.w	r3, r3, #4
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0204 	mvn.w	r2, #4
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f9a4 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f996 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f9a7 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b08      	cmp	r3, #8
 8005344:	d122      	bne.n	800538c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b08      	cmp	r3, #8
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0208 	mvn.w	r2, #8
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2204      	movs	r2, #4
 8005362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f97a 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f96c 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f97d 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b10      	cmp	r3, #16
 8005398:	d122      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0310 	and.w	r3, r3, #16
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d11b      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0210 	mvn.w	r2, #16
 80053b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2208      	movs	r2, #8
 80053b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f950 	bl	800566c <HAL_TIM_IC_CaptureCallback>
 80053cc:	e005      	b.n	80053da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f942 	bl	8005658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f953 	bl	8005680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0301 	and.w	r3, r3, #1
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d10e      	bne.n	800540c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d107      	bne.n	800540c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0201 	mvn.w	r2, #1
 8005404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fb0c 	bl	8006a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005416:	2b80      	cmp	r3, #128	; 0x80
 8005418:	d10e      	bne.n	8005438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005424:	2b80      	cmp	r3, #128	; 0x80
 8005426:	d107      	bne.n	8005438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fafe 	bl	8005a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005446:	d10e      	bne.n	8005466 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005452:	2b80      	cmp	r3, #128	; 0x80
 8005454:	d107      	bne.n	8005466 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800545e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 faf1 	bl	8005a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d10e      	bne.n	8005492 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d107      	bne.n	8005492 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f901 	bl	8005694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0320 	and.w	r3, r3, #32
 800549c:	2b20      	cmp	r3, #32
 800549e:	d10e      	bne.n	80054be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d107      	bne.n	80054be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f06f 0220 	mvn.w	r2, #32
 80054b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fab1 	bl	8005a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054be:	bf00      	nop
 80054c0:	3708      	adds	r7, #8
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b084      	sub	sp, #16
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_ConfigClockSource+0x1c>
 80054de:	2302      	movs	r3, #2
 80054e0:	e0b6      	b.n	8005650 <HAL_TIM_ConfigClockSource+0x18a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2202      	movs	r2, #2
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005500:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005504:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551e:	d03e      	beq.n	800559e <HAL_TIM_ConfigClockSource+0xd8>
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005524:	f200 8087 	bhi.w	8005636 <HAL_TIM_ConfigClockSource+0x170>
 8005528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552c:	f000 8086 	beq.w	800563c <HAL_TIM_ConfigClockSource+0x176>
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005534:	d87f      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 8005536:	2b70      	cmp	r3, #112	; 0x70
 8005538:	d01a      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xaa>
 800553a:	2b70      	cmp	r3, #112	; 0x70
 800553c:	d87b      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 800553e:	2b60      	cmp	r3, #96	; 0x60
 8005540:	d050      	beq.n	80055e4 <HAL_TIM_ConfigClockSource+0x11e>
 8005542:	2b60      	cmp	r3, #96	; 0x60
 8005544:	d877      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 8005546:	2b50      	cmp	r3, #80	; 0x50
 8005548:	d03c      	beq.n	80055c4 <HAL_TIM_ConfigClockSource+0xfe>
 800554a:	2b50      	cmp	r3, #80	; 0x50
 800554c:	d873      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d058      	beq.n	8005604 <HAL_TIM_ConfigClockSource+0x13e>
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d86f      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 8005556:	2b30      	cmp	r3, #48	; 0x30
 8005558:	d064      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x15e>
 800555a:	2b30      	cmp	r3, #48	; 0x30
 800555c:	d86b      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 800555e:	2b20      	cmp	r3, #32
 8005560:	d060      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x15e>
 8005562:	2b20      	cmp	r3, #32
 8005564:	d867      	bhi.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d05c      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x15e>
 800556a:	2b10      	cmp	r3, #16
 800556c:	d05a      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0x15e>
 800556e:	e062      	b.n	8005636 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f000 f9a6 	bl	80058d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005592:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	609a      	str	r2, [r3, #8]
      break;
 800559c:	e04f      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f000 f98f 	bl	80058d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055c0:	609a      	str	r2, [r3, #8]
      break;
 80055c2:	e03c      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	6859      	ldr	r1, [r3, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	461a      	mov	r2, r3
 80055d2:	f000 f903 	bl	80057dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2150      	movs	r1, #80	; 0x50
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 f95c 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 80055e2:	e02c      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	461a      	mov	r2, r3
 80055f2:	f000 f922 	bl	800583a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2160      	movs	r1, #96	; 0x60
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f94c 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8005602:	e01c      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	461a      	mov	r2, r3
 8005612:	f000 f8e3 	bl	80057dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2140      	movs	r1, #64	; 0x40
 800561c:	4618      	mov	r0, r3
 800561e:	f000 f93c 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8005622:	e00c      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f000 f933 	bl	800589a <TIM_ITRx_SetConfig>
      break;
 8005634:	e003      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	73fb      	strb	r3, [r7, #15]
      break;
 800563a:	e000      	b.n	800563e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800563c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a40      	ldr	r2, [pc, #256]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a3d      	ldr	r2, [pc, #244]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a3c      	ldr	r2, [pc, #240]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3b      	ldr	r2, [pc, #236]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3a      	ldr	r2, [pc, #232]	; (80057cc <TIM_Base_SetConfig+0x124>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d108      	bne.n	80056fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <TIM_Base_SetConfig+0x114>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01f      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005708:	d01b      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2c      	ldr	r2, [pc, #176]	; (80057c0 <TIM_Base_SetConfig+0x118>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d017      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a2b      	ldr	r2, [pc, #172]	; (80057c4 <TIM_Base_SetConfig+0x11c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2a      	ldr	r2, [pc, #168]	; (80057c8 <TIM_Base_SetConfig+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00f      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a29      	ldr	r2, [pc, #164]	; (80057cc <TIM_Base_SetConfig+0x124>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <TIM_Base_SetConfig+0x128>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d007      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <TIM_Base_SetConfig+0x12c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_Base_SetConfig+0x9a>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a26      	ldr	r2, [pc, #152]	; (80057d8 <TIM_Base_SetConfig+0x130>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a10      	ldr	r2, [pc, #64]	; (80057bc <TIM_Base_SetConfig+0x114>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00f      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a12      	ldr	r2, [pc, #72]	; (80057cc <TIM_Base_SetConfig+0x124>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a11      	ldr	r2, [pc, #68]	; (80057d0 <TIM_Base_SetConfig+0x128>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <TIM_Base_SetConfig+0x12c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0xf8>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0f      	ldr	r2, [pc, #60]	; (80057d8 <TIM_Base_SetConfig+0x130>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40013400 	.word	0x40013400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40014400 	.word	0x40014400
 80057d8:	40014800 	.word	0x40014800

080057dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f023 030a 	bic.w	r3, r3, #10
 8005818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583a:	b480      	push	{r7}
 800583c:	b087      	sub	sp, #28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	f023 0210 	bic.w	r2, r3, #16
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005864:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005876:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4313      	orrs	r3, r2
 8005880:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f043 0307 	orr.w	r3, r3, #7
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	021a      	lsls	r2, r3, #8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	609a      	str	r2, [r3, #8]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005924:	2302      	movs	r3, #2
 8005926:	e068      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2e      	ldr	r2, [pc, #184]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2d      	ldr	r2, [pc, #180]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d108      	bne.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005962:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d018      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10c      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	40014000 	.word	0x40014000

08005a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e042      	b.n	8005af4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 f907 	bl	8007c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	; 0x24
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f998 	bl	8005dd4 <UART_SetConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e022      	b.n	8005af4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fc88 	bl	80063cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fd0f 	bl	8006510 <UART_CheckIdleState>
 8005af2:	4603      	mov	r3, r0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	f040 8084 	bne.w	8005c20 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_UART_Transmit+0x28>
 8005b1e:	88fb      	ldrh	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d101      	bne.n	8005b28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e07c      	b.n	8005c22 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d101      	bne.n	8005b36 <HAL_UART_Transmit+0x3a>
 8005b32:	2302      	movs	r3, #2
 8005b34:	e075      	b.n	8005c22 <HAL_UART_Transmit+0x126>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2221      	movs	r2, #33	; 0x21
 8005b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b4e:	f7fb fad3 	bl	80010f8 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	88fa      	ldrh	r2, [r7, #6]
 8005b60:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d108      	bne.n	8005b80 <HAL_UART_Transmit+0x84>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d104      	bne.n	8005b80 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	e003      	b.n	8005b88 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005b90:	e02d      	b.n	8005bee <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	; 0x80
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fd02 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e03a      	b.n	8005c22 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	881a      	ldrh	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	3302      	adds	r3, #2
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	e008      	b.n	8005bdc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	781a      	ldrb	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	b292      	uxth	r2, r2
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1cb      	bne.n	8005b92 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2200      	movs	r2, #0
 8005c02:	2140      	movs	r1, #64	; 0x40
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fcce 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e006      	b.n	8005c22 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b08a      	sub	sp, #40	; 0x28
 8005c2e:	af02      	add	r7, sp, #8
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c40:	2b20      	cmp	r3, #32
 8005c42:	f040 80c1 	bne.w	8005dc8 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d002      	beq.n	8005c52 <HAL_UART_Receive+0x28>
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e0b9      	b.n	8005dca <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Receive+0x3a>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0b2      	b.n	8005dca <HAL_UART_Receive+0x1a0>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2222      	movs	r2, #34	; 0x22
 8005c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c82:	f7fb fa39 	bl	80010f8 <HAL_GetTick>
 8005c86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	88fa      	ldrh	r2, [r7, #6]
 8005c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca0:	d10e      	bne.n	8005cc0 <HAL_UART_Receive+0x96>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d105      	bne.n	8005cb6 <HAL_UART_Receive+0x8c>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005cb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cb4:	e02d      	b.n	8005d12 <HAL_UART_Receive+0xe8>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	22ff      	movs	r2, #255	; 0xff
 8005cba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cbe:	e028      	b.n	8005d12 <HAL_UART_Receive+0xe8>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10d      	bne.n	8005ce4 <HAL_UART_Receive+0xba>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <HAL_UART_Receive+0xb0>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	22ff      	movs	r2, #255	; 0xff
 8005cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cd8:	e01b      	b.n	8005d12 <HAL_UART_Receive+0xe8>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	227f      	movs	r2, #127	; 0x7f
 8005cde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ce2:	e016      	b.n	8005d12 <HAL_UART_Receive+0xe8>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cec:	d10d      	bne.n	8005d0a <HAL_UART_Receive+0xe0>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <HAL_UART_Receive+0xd6>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	227f      	movs	r2, #127	; 0x7f
 8005cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005cfe:	e008      	b.n	8005d12 <HAL_UART_Receive+0xe8>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	223f      	movs	r2, #63	; 0x3f
 8005d04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d08:	e003      	b.n	8005d12 <HAL_UART_Receive+0xe8>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d22:	d108      	bne.n	8005d36 <HAL_UART_Receive+0x10c>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d104      	bne.n	8005d36 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	61bb      	str	r3, [r7, #24]
 8005d34:	e003      	b.n	8005d3e <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005d46:	e033      	b.n	8005db0 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2120      	movs	r1, #32
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fc27 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e033      	b.n	8005dca <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10c      	bne.n	8005d82 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	8a7b      	ldrh	r3, [r7, #18]
 8005d72:	4013      	ands	r3, r2
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	3302      	adds	r3, #2
 8005d7e:	61bb      	str	r3, [r7, #24]
 8005d80:	e00d      	b.n	8005d9e <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	8a7b      	ldrh	r3, [r7, #18]
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	4013      	ands	r3, r2
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1c5      	bne.n	8005d48 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e000      	b.n	8005dca <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd8:	b08c      	sub	sp, #48	; 0x30
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4baa      	ldr	r3, [pc, #680]	; (80060ac <UART_SetConfig+0x2d8>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	6812      	ldr	r2, [r2, #0]
 8005e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e0c:	430b      	orrs	r3, r1
 8005e0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a9f      	ldr	r2, [pc, #636]	; (80060b0 <UART_SetConfig+0x2dc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005e4a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	f023 010f 	bic.w	r1, r3, #15
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a90      	ldr	r2, [pc, #576]	; (80060b4 <UART_SetConfig+0x2e0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d125      	bne.n	8005ec4 <UART_SetConfig+0xf0>
 8005e78:	4b8f      	ldr	r3, [pc, #572]	; (80060b8 <UART_SetConfig+0x2e4>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	f003 0303 	and.w	r3, r3, #3
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d81a      	bhi.n	8005ebc <UART_SetConfig+0xe8>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0xb8>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	08005ea5 	.word	0x08005ea5
 8005e98:	08005eb5 	.word	0x08005eb5
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea2:	e116      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eaa:	e112      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb2:	e10e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eba:	e10a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ec2:	e106      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a7c      	ldr	r2, [pc, #496]	; (80060bc <UART_SetConfig+0x2e8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d138      	bne.n	8005f40 <UART_SetConfig+0x16c>
 8005ece:	4b7a      	ldr	r3, [pc, #488]	; (80060b8 <UART_SetConfig+0x2e4>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	f003 030c 	and.w	r3, r3, #12
 8005ed8:	2b0c      	cmp	r3, #12
 8005eda:	d82d      	bhi.n	8005f38 <UART_SetConfig+0x164>
 8005edc:	a201      	add	r2, pc, #4	; (adr r2, 8005ee4 <UART_SetConfig+0x110>)
 8005ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee2:	bf00      	nop
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	08005f39 	.word	0x08005f39
 8005ef0:	08005f39 	.word	0x08005f39
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f39 	.word	0x08005f39
 8005efc:	08005f39 	.word	0x08005f39
 8005f00:	08005f39 	.word	0x08005f39
 8005f04:	08005f21 	.word	0x08005f21
 8005f08:	08005f39 	.word	0x08005f39
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	08005f39 	.word	0x08005f39
 8005f14:	08005f31 	.word	0x08005f31
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1e:	e0d8      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f20:	2302      	movs	r3, #2
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f26:	e0d4      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2e:	e0d0      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f36:	e0cc      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3e:	e0c8      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a5e      	ldr	r2, [pc, #376]	; (80060c0 <UART_SetConfig+0x2ec>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d125      	bne.n	8005f96 <UART_SetConfig+0x1c2>
 8005f4a:	4b5b      	ldr	r3, [pc, #364]	; (80060b8 <UART_SetConfig+0x2e4>)
 8005f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f50:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f54:	2b30      	cmp	r3, #48	; 0x30
 8005f56:	d016      	beq.n	8005f86 <UART_SetConfig+0x1b2>
 8005f58:	2b30      	cmp	r3, #48	; 0x30
 8005f5a:	d818      	bhi.n	8005f8e <UART_SetConfig+0x1ba>
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d00a      	beq.n	8005f76 <UART_SetConfig+0x1a2>
 8005f60:	2b20      	cmp	r3, #32
 8005f62:	d814      	bhi.n	8005f8e <UART_SetConfig+0x1ba>
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <UART_SetConfig+0x19a>
 8005f68:	2b10      	cmp	r3, #16
 8005f6a:	d008      	beq.n	8005f7e <UART_SetConfig+0x1aa>
 8005f6c:	e00f      	b.n	8005f8e <UART_SetConfig+0x1ba>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f74:	e0ad      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f76:	2302      	movs	r3, #2
 8005f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f7c:	e0a9      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f7e:	2304      	movs	r3, #4
 8005f80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f84:	e0a5      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f86:	2308      	movs	r3, #8
 8005f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f8c:	e0a1      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f8e:	2310      	movs	r3, #16
 8005f90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f94:	e09d      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a4a      	ldr	r2, [pc, #296]	; (80060c4 <UART_SetConfig+0x2f0>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d125      	bne.n	8005fec <UART_SetConfig+0x218>
 8005fa0:	4b45      	ldr	r3, [pc, #276]	; (80060b8 <UART_SetConfig+0x2e4>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005faa:	2bc0      	cmp	r3, #192	; 0xc0
 8005fac:	d016      	beq.n	8005fdc <UART_SetConfig+0x208>
 8005fae:	2bc0      	cmp	r3, #192	; 0xc0
 8005fb0:	d818      	bhi.n	8005fe4 <UART_SetConfig+0x210>
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d00a      	beq.n	8005fcc <UART_SetConfig+0x1f8>
 8005fb6:	2b80      	cmp	r3, #128	; 0x80
 8005fb8:	d814      	bhi.n	8005fe4 <UART_SetConfig+0x210>
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <UART_SetConfig+0x1f0>
 8005fbe:	2b40      	cmp	r3, #64	; 0x40
 8005fc0:	d008      	beq.n	8005fd4 <UART_SetConfig+0x200>
 8005fc2:	e00f      	b.n	8005fe4 <UART_SetConfig+0x210>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fca:	e082      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd2:	e07e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fda:	e07a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe2:	e076      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fea:	e072      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a35      	ldr	r2, [pc, #212]	; (80060c8 <UART_SetConfig+0x2f4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d12a      	bne.n	800604c <UART_SetConfig+0x278>
 8005ff6:	4b30      	ldr	r3, [pc, #192]	; (80060b8 <UART_SetConfig+0x2e4>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006000:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006004:	d01a      	beq.n	800603c <UART_SetConfig+0x268>
 8006006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800600a:	d81b      	bhi.n	8006044 <UART_SetConfig+0x270>
 800600c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006010:	d00c      	beq.n	800602c <UART_SetConfig+0x258>
 8006012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006016:	d815      	bhi.n	8006044 <UART_SetConfig+0x270>
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <UART_SetConfig+0x250>
 800601c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006020:	d008      	beq.n	8006034 <UART_SetConfig+0x260>
 8006022:	e00f      	b.n	8006044 <UART_SetConfig+0x270>
 8006024:	2300      	movs	r3, #0
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800602a:	e052      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800602c:	2302      	movs	r3, #2
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006032:	e04e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800603a:	e04a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006042:	e046      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604a:	e042      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a17      	ldr	r2, [pc, #92]	; (80060b0 <UART_SetConfig+0x2dc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d13a      	bne.n	80060cc <UART_SetConfig+0x2f8>
 8006056:	4b18      	ldr	r3, [pc, #96]	; (80060b8 <UART_SetConfig+0x2e4>)
 8006058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006064:	d01a      	beq.n	800609c <UART_SetConfig+0x2c8>
 8006066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800606a:	d81b      	bhi.n	80060a4 <UART_SetConfig+0x2d0>
 800606c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006070:	d00c      	beq.n	800608c <UART_SetConfig+0x2b8>
 8006072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006076:	d815      	bhi.n	80060a4 <UART_SetConfig+0x2d0>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <UART_SetConfig+0x2b0>
 800607c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006080:	d008      	beq.n	8006094 <UART_SetConfig+0x2c0>
 8006082:	e00f      	b.n	80060a4 <UART_SetConfig+0x2d0>
 8006084:	2300      	movs	r3, #0
 8006086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608a:	e022      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800608c:	2302      	movs	r3, #2
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006092:	e01e      	b.n	80060d2 <UART_SetConfig+0x2fe>
 8006094:	2304      	movs	r3, #4
 8006096:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800609a:	e01a      	b.n	80060d2 <UART_SetConfig+0x2fe>
 800609c:	2308      	movs	r3, #8
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060a2:	e016      	b.n	80060d2 <UART_SetConfig+0x2fe>
 80060a4:	2310      	movs	r3, #16
 80060a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060aa:	e012      	b.n	80060d2 <UART_SetConfig+0x2fe>
 80060ac:	cfff69f3 	.word	0xcfff69f3
 80060b0:	40008000 	.word	0x40008000
 80060b4:	40013800 	.word	0x40013800
 80060b8:	40021000 	.word	0x40021000
 80060bc:	40004400 	.word	0x40004400
 80060c0:	40004800 	.word	0x40004800
 80060c4:	40004c00 	.word	0x40004c00
 80060c8:	40005000 	.word	0x40005000
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4aae      	ldr	r2, [pc, #696]	; (8006390 <UART_SetConfig+0x5bc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	f040 8097 	bne.w	800620c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d823      	bhi.n	800612e <UART_SetConfig+0x35a>
 80060e6:	a201      	add	r2, pc, #4	; (adr r2, 80060ec <UART_SetConfig+0x318>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	08006111 	.word	0x08006111
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	08006119 	.word	0x08006119
 80060f8:	0800612f 	.word	0x0800612f
 80060fc:	0800611f 	.word	0x0800611f
 8006100:	0800612f 	.word	0x0800612f
 8006104:	0800612f 	.word	0x0800612f
 8006108:	0800612f 	.word	0x0800612f
 800610c:	08006127 	.word	0x08006127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fe f9ee 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8006114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006116:	e010      	b.n	800613a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006118:	4b9e      	ldr	r3, [pc, #632]	; (8006394 <UART_SetConfig+0x5c0>)
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800611c:	e00d      	b.n	800613a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611e:	f7fe f94f 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006124:	e009      	b.n	800613a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800612c:	e005      	b.n	800613a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8130 	beq.w	80063a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	4a94      	ldr	r2, [pc, #592]	; (8006398 <UART_SetConfig+0x5c4>)
 8006148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614c:	461a      	mov	r2, r3
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	fbb3 f3f2 	udiv	r3, r3, r2
 8006154:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	429a      	cmp	r2, r3
 8006164:	d305      	bcc.n	8006172 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	429a      	cmp	r2, r3
 8006170:	d903      	bls.n	800617a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006178:	e113      	b.n	80063a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	2200      	movs	r2, #0
 800617e:	60bb      	str	r3, [r7, #8]
 8006180:	60fa      	str	r2, [r7, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	4a84      	ldr	r2, [pc, #528]	; (8006398 <UART_SetConfig+0x5c4>)
 8006188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800618c:	b29b      	uxth	r3, r3
 800618e:	2200      	movs	r2, #0
 8006190:	603b      	str	r3, [r7, #0]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800619c:	f7fa fd8c 	bl	8000cb8 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4610      	mov	r0, r2
 80061a6:	4619      	mov	r1, r3
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	020b      	lsls	r3, r1, #8
 80061b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80061b6:	0202      	lsls	r2, r0, #8
 80061b8:	6979      	ldr	r1, [r7, #20]
 80061ba:	6849      	ldr	r1, [r1, #4]
 80061bc:	0849      	lsrs	r1, r1, #1
 80061be:	2000      	movs	r0, #0
 80061c0:	460c      	mov	r4, r1
 80061c2:	4605      	mov	r5, r0
 80061c4:	eb12 0804 	adds.w	r8, r2, r4
 80061c8:	eb43 0905 	adc.w	r9, r3, r5
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	469a      	mov	sl, r3
 80061d4:	4693      	mov	fp, r2
 80061d6:	4652      	mov	r2, sl
 80061d8:	465b      	mov	r3, fp
 80061da:	4640      	mov	r0, r8
 80061dc:	4649      	mov	r1, r9
 80061de:	f7fa fd6b 	bl	8000cb8 <__aeabi_uldivmod>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4613      	mov	r3, r2
 80061e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061f0:	d308      	bcc.n	8006204 <UART_SetConfig+0x430>
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f8:	d204      	bcs.n	8006204 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a3a      	ldr	r2, [r7, #32]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	e0ce      	b.n	80063a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800620a:	e0ca      	b.n	80063a2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006214:	d166      	bne.n	80062e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800621a:	2b08      	cmp	r3, #8
 800621c:	d827      	bhi.n	800626e <UART_SetConfig+0x49a>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x450>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	0800626f 	.word	0x0800626f
 8006234:	0800625f 	.word	0x0800625f
 8006238:	0800626f 	.word	0x0800626f
 800623c:	0800626f 	.word	0x0800626f
 8006240:	0800626f 	.word	0x0800626f
 8006244:	08006267 	.word	0x08006267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7fe f952 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 800624c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800624e:	e014      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7fe f964 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8006254:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006256:	e010      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006258:	4b4e      	ldr	r3, [pc, #312]	; (8006394 <UART_SetConfig+0x5c0>)
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800625c:	e00d      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625e:	f7fe f8af 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8006262:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006264:	e009      	b.n	800627a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800626c:	e005      	b.n	800627a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8090 	beq.w	80063a2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006286:	4a44      	ldr	r2, [pc, #272]	; (8006398 <UART_SetConfig+0x5c4>)
 8006288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628c:	461a      	mov	r2, r3
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	fbb3 f3f2 	udiv	r3, r3, r2
 8006294:	005a      	lsls	r2, r3, #1
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	441a      	add	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	2b0f      	cmp	r3, #15
 80062ac:	d916      	bls.n	80062dc <UART_SetConfig+0x508>
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b4:	d212      	bcs.n	80062dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f023 030f 	bic.w	r3, r3, #15
 80062be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f003 0307 	and.w	r3, r3, #7
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	8bfb      	ldrh	r3, [r7, #30]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	8bfa      	ldrh	r2, [r7, #30]
 80062d8:	60da      	str	r2, [r3, #12]
 80062da:	e062      	b.n	80063a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062e2:	e05e      	b.n	80063a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80062e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d828      	bhi.n	800633e <UART_SetConfig+0x56a>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x520>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800633f 	.word	0x0800633f
 800630c:	0800633f 	.word	0x0800633f
 8006310:	0800633f 	.word	0x0800633f
 8006314:	08006337 	.word	0x08006337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006318:	f7fe f8ea 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 800631c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800631e:	e014      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006320:	f7fe f8fc 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8006324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006326:	e010      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006328:	4b1a      	ldr	r3, [pc, #104]	; (8006394 <UART_SetConfig+0x5c0>)
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800632c:	e00d      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800632e:	f7fe f847 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8006332:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006334:	e009      	b.n	800634a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800633a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800633c:	e005      	b.n	800634a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006348:	bf00      	nop
    }

    if (pclk != 0U)
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d028      	beq.n	80063a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	4a10      	ldr	r2, [pc, #64]	; (8006398 <UART_SetConfig+0x5c4>)
 8006356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800635a:	461a      	mov	r2, r3
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	441a      	add	r2, r3
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006372:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	2b0f      	cmp	r3, #15
 8006378:	d910      	bls.n	800639c <UART_SetConfig+0x5c8>
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d20c      	bcs.n	800639c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	b29a      	uxth	r2, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60da      	str	r2, [r3, #12]
 800638c:	e009      	b.n	80063a2 <UART_SetConfig+0x5ce>
 800638e:	bf00      	nop
 8006390:	40008000 	.word	0x40008000
 8006394:	00f42400 	.word	0x00f42400
 8006398:	0800d97c 	.word	0x0800d97c
      }
      else
      {
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2200      	movs	r2, #0
 80063bc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80063be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3730      	adds	r7, #48	; 0x30
 80063c6:	46bd      	mov	sp, r7
 80063c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080063cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00a      	beq.n	80063f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	430a      	orrs	r2, r1
 80063f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00a      	beq.n	8006418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00a      	beq.n	800643a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	430a      	orrs	r2, r1
 8006438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643e:	f003 0308 	and.w	r3, r3, #8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	430a      	orrs	r2, r1
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01a      	beq.n	80064e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ca:	d10a      	bne.n	80064e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	430a      	orrs	r2, r1
 80064e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	605a      	str	r2, [r3, #4]
  }
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af02      	add	r7, sp, #8
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006520:	f7fa fdea 	bl	80010f8 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d10e      	bne.n	8006552 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f82f 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e025      	b.n	800659e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b04      	cmp	r3, #4
 800655e:	d10e      	bne.n	800657e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006560:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f819 	bl	80065a6 <UART_WaitOnFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e00f      	b.n	800659e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b09c      	sub	sp, #112	; 0x70
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	603b      	str	r3, [r7, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b6:	e0a9      	b.n	800670c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065be:	f000 80a5 	beq.w	800670c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c2:	f7fa fd99 	bl	80010f8 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d302      	bcc.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80065d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d140      	bne.n	800665a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065ec:	667b      	str	r3, [r7, #100]	; 0x64
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80065fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e6      	bne.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3308      	adds	r3, #8
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	663b      	str	r3, [r7, #96]	; 0x60
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3308      	adds	r3, #8
 8006628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800662a:	64ba      	str	r2, [r7, #72]	; 0x48
 800662c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2220      	movs	r2, #32
 800664a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e069      	b.n	800672e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0304 	and.w	r3, r3, #4
 8006664:	2b00      	cmp	r3, #0
 8006666:	d051      	beq.n	800670c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006676:	d149      	bne.n	800670c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006680:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	461a      	mov	r2, r3
 800669e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
 80066a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e6      	bne.n	8006682 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3308      	adds	r3, #8
 80066ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	e853 3f00 	ldrex	r3, [r3]
 80066c2:	613b      	str	r3, [r7, #16]
   return(result);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3308      	adds	r3, #8
 80066d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80066d4:	623a      	str	r2, [r7, #32]
 80066d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d8:	69f9      	ldr	r1, [r7, #28]
 80066da:	6a3a      	ldr	r2, [r7, #32]
 80066dc:	e841 2300 	strex	r3, r2, [r1]
 80066e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1e5      	bne.n	80066b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e010      	b.n	800672e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	4013      	ands	r3, r2
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	461a      	mov	r2, r3
 8006724:	79fb      	ldrb	r3, [r7, #7]
 8006726:	429a      	cmp	r2, r3
 8006728:	f43f af46 	beq.w	80065b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3770      	adds	r7, #112	; 0x70
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_UARTEx_DisableFifoMode+0x16>
 8006748:	2302      	movs	r3, #2
 800674a:	e027      	b.n	800679c <HAL_UARTEx_DisableFifoMode+0x66>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2224      	movs	r2, #36	; 0x24
 8006758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800677a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d101      	bne.n	80067c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067bc:	2302      	movs	r3, #2
 80067be:	e02d      	b.n	800681c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2224      	movs	r2, #36	; 0x24
 80067cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0201 	bic.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f84f 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006838:	2302      	movs	r3, #2
 800683a:	e02d      	b.n	8006898 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f811 	bl	80068a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068c0:	e031      	b.n	8006926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068c2:	2308      	movs	r3, #8
 80068c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068c6:	2308      	movs	r3, #8
 80068c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	0e5b      	lsrs	r3, r3, #25
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	0f5b      	lsrs	r3, r3, #29
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	7b3a      	ldrb	r2, [r7, #12]
 80068ee:	4911      	ldr	r1, [pc, #68]	; (8006934 <UARTEx_SetNbDataToProcess+0x94>)
 80068f0:	5c8a      	ldrb	r2, [r1, r2]
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80068f6:	7b3a      	ldrb	r2, [r7, #12]
 80068f8:	490f      	ldr	r1, [pc, #60]	; (8006938 <UARTEx_SetNbDataToProcess+0x98>)
 80068fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80068fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006900:	b29a      	uxth	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	7b7a      	ldrb	r2, [r7, #13]
 800690c:	4909      	ldr	r1, [pc, #36]	; (8006934 <UARTEx_SetNbDataToProcess+0x94>)
 800690e:	5c8a      	ldrb	r2, [r1, r2]
 8006910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006914:	7b7a      	ldrb	r2, [r7, #13]
 8006916:	4908      	ldr	r1, [pc, #32]	; (8006938 <UARTEx_SetNbDataToProcess+0x98>)
 8006918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800691a:	fb93 f3f2 	sdiv	r3, r3, r2
 800691e:	b29a      	uxth	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	0800d994 	.word	0x0800d994
 8006938:	0800d99c 	.word	0x0800d99c

0800693c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006944:	1d39      	adds	r1, r7, #4
 8006946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800694a:	2201      	movs	r2, #1
 800694c:	4803      	ldr	r0, [pc, #12]	; (800695c <__io_putchar+0x20>)
 800694e:	f7ff f8d5 	bl	8005afc <HAL_UART_Transmit>
  return ch;
 8006952:	687b      	ldr	r3, [r7, #4]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000380 	.word	0x20000380

08006960 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <__io_getchar+0x38>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2208      	movs	r2, #8
 8006970:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006972:	1df9      	adds	r1, r7, #7
 8006974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006978:	2201      	movs	r2, #1
 800697a:	4807      	ldr	r0, [pc, #28]	; (8006998 <__io_getchar+0x38>)
 800697c:	f7ff f955 	bl	8005c2a <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006980:	1df9      	adds	r1, r7, #7
 8006982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006986:	2201      	movs	r2, #1
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <__io_getchar+0x38>)
 800698a:	f7ff f8b7 	bl	8005afc <HAL_UART_Transmit>
  return ch;
 800698e:	79fb      	ldrb	r3, [r7, #7]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000380 	.word	0x20000380

0800699c <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	80fb      	strh	r3, [r7, #6]
	printf("Interrupt \n\r");
 80069a6:	4817      	ldr	r0, [pc, #92]	; (8006a04 <HAL_GPIO_EXTI_Callback+0x68>)
 80069a8:	f002 fa1a 	bl	8008de0 <iprintf>
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 80069ac:	88fb      	ldrh	r3, [r7, #6]
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b2:	d123      	bne.n	80069fc <HAL_GPIO_EXTI_Callback+0x60>
		printf("Button Pressed. \n\r");
 80069b4:	4814      	ldr	r0, [pc, #80]	; (8006a08 <HAL_GPIO_EXTI_Callback+0x6c>)
 80069b6:	f002 fa13 	bl	8008de0 <iprintf>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80069ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069be:	4813      	ldr	r0, [pc, #76]	; (8006a0c <HAL_GPIO_EXTI_Callback+0x70>)
 80069c0:	f7fc feb4 	bl	800372c <HAL_GPIO_TogglePin>
		mode = (mode+1)%2;
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <HAL_GPIO_EXTI_Callback+0x74>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	bfb8      	it	lt
 80069d2:	425b      	neglt	r3, r3
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <HAL_GPIO_EXTI_Callback+0x74>)
 80069d8:	701a      	strb	r2, [r3, #0]
		if (mode == 1) {
 80069da:	4b0d      	ldr	r3, [pc, #52]	; (8006a10 <HAL_GPIO_EXTI_Callback+0x74>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d106      	bne.n	80069f0 <HAL_GPIO_EXTI_Callback+0x54>
			printf("Taking input Morse input (array), displaying letter to terminal. \n\r");
 80069e2:	480c      	ldr	r0, [pc, #48]	; (8006a14 <HAL_GPIO_EXTI_Callback+0x78>)
 80069e4:	f002 f9fc 	bl	8008de0 <iprintf>
			printf("Press one more letter to end current translation. \n\r");
 80069e8:	480b      	ldr	r0, [pc, #44]	; (8006a18 <HAL_GPIO_EXTI_Callback+0x7c>)
 80069ea:	f002 f9f9 	bl	8008de0 <iprintf>
		} else {
			printf("Taking letter input from terminal, outputting Morse. \n\r");
			printf("Press the spacebar to end current translation. \n\r");
		}
	}
}
 80069ee:	e005      	b.n	80069fc <HAL_GPIO_EXTI_Callback+0x60>
			printf("Taking letter input from terminal, outputting Morse. \n\r");
 80069f0:	480a      	ldr	r0, [pc, #40]	; (8006a1c <HAL_GPIO_EXTI_Callback+0x80>)
 80069f2:	f002 f9f5 	bl	8008de0 <iprintf>
			printf("Press the spacebar to end current translation. \n\r");
 80069f6:	480a      	ldr	r0, [pc, #40]	; (8006a20 <HAL_GPIO_EXTI_Callback+0x84>)
 80069f8:	f002 f9f2 	bl	8008de0 <iprintf>
}
 80069fc:	bf00      	nop
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	0800d738 	.word	0x0800d738
 8006a08:	0800d748 	.word	0x0800d748
 8006a0c:	48000400 	.word	0x48000400
 8006a10:	2000041c 	.word	0x2000041c
 8006a14:	0800d75c 	.word	0x0800d75c
 8006a18:	0800d7a0 	.word	0x0800d7a0
 8006a1c:	0800d7d8 	.word	0x0800d7d8
 8006a20:	0800d810 	.word	0x0800d810

08006a24 <HAL_TIM_PeriodElapsedCallback>:

/**
 * Interrupt method to increment the counter at every millisecond
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PeriodElapsedCallback+0x1a>
		millis++;
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a05      	ldr	r2, [pc, #20]	; (8006a50 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8006a3c:	6013      	str	r3, [r2, #0]
	}
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000334 	.word	0x20000334
 8006a50:	20000420 	.word	0x20000420

08006a54 <updateMorseLetter>:

/**
 * Update global variables for the Morse array based on the inputted letter
 */
void updateMorseLetter(char letter){
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]

	// \0s for space
	morseLetterSize = 4;
 8006a5e:	4bb6      	ldr	r3, [pc, #728]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006a60:	2204      	movs	r2, #4
 8006a62:	601a      	str	r2, [r3, #0]
	morseLetter[0] = '\0'; morseLetter[1] = '\0'; morseLetter[2] = '\0'; morseLetter[3] = '\0';
 8006a64:	4bb5      	ldr	r3, [pc, #724]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	4bb4      	ldr	r3, [pc, #720]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	705a      	strb	r2, [r3, #1]
 8006a70:	4bb2      	ldr	r3, [pc, #712]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	709a      	strb	r2, [r3, #2]
 8006a76:	4bb1      	ldr	r3, [pc, #708]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	70da      	strb	r2, [r3, #3]
	switch (letter)
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	3b61      	subs	r3, #97	; 0x61
 8006a80:	2b19      	cmp	r3, #25
 8006a82:	f200 819a 	bhi.w	8006dba <updateMorseLetter+0x366>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <updateMorseLetter+0x38>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006af5 	.word	0x08006af5
 8006a90:	08006b09 	.word	0x08006b09
 8006a94:	08006b29 	.word	0x08006b29
 8006a98:	08006b49 	.word	0x08006b49
 8006a9c:	08006b63 	.word	0x08006b63
 8006aa0:	08006b71 	.word	0x08006b71
 8006aa4:	08006b91 	.word	0x08006b91
 8006aa8:	08006bab 	.word	0x08006bab
 8006aac:	08006bcb 	.word	0x08006bcb
 8006ab0:	08006bdf 	.word	0x08006bdf
 8006ab4:	08006bff 	.word	0x08006bff
 8006ab8:	08006c19 	.word	0x08006c19
 8006abc:	08006c39 	.word	0x08006c39
 8006ac0:	08006c4d 	.word	0x08006c4d
 8006ac4:	08006c61 	.word	0x08006c61
 8006ac8:	08006c7b 	.word	0x08006c7b
 8006acc:	08006c9b 	.word	0x08006c9b
 8006ad0:	08006cbb 	.word	0x08006cbb
 8006ad4:	08006cd5 	.word	0x08006cd5
 8006ad8:	08006cef 	.word	0x08006cef
 8006adc:	08006cfd 	.word	0x08006cfd
 8006ae0:	08006d17 	.word	0x08006d17
 8006ae4:	08006d41 	.word	0x08006d41
 8006ae8:	08006d5b 	.word	0x08006d5b
 8006aec:	08006d7b 	.word	0x08006d7b
 8006af0:	08006d9b 	.word	0x08006d9b
	{
		case 'a':
			morseLetter[0] = '.'; morseLetter[1] = '-';
 8006af4:	4b91      	ldr	r3, [pc, #580]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006af6:	222e      	movs	r2, #46	; 0x2e
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	4b90      	ldr	r3, [pc, #576]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006afc:	222d      	movs	r2, #45	; 0x2d
 8006afe:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8006b00:	4b8d      	ldr	r3, [pc, #564]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006b02:	2202      	movs	r2, #2
 8006b04:	601a      	str	r2, [r3, #0]
			break;
 8006b06:	e158      	b.n	8006dba <updateMorseLetter+0x366>
		case 'b':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8006b08:	4b8c      	ldr	r3, [pc, #560]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b0a:	222d      	movs	r2, #45	; 0x2d
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	4b8b      	ldr	r3, [pc, #556]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b10:	222e      	movs	r2, #46	; 0x2e
 8006b12:	705a      	strb	r2, [r3, #1]
 8006b14:	4b89      	ldr	r3, [pc, #548]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b16:	222e      	movs	r2, #46	; 0x2e
 8006b18:	709a      	strb	r2, [r3, #2]
 8006b1a:	4b88      	ldr	r3, [pc, #544]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b1c:	222e      	movs	r2, #46	; 0x2e
 8006b1e:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006b20:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006b22:	2204      	movs	r2, #4
 8006b24:	601a      	str	r2, [r3, #0]
			break;
 8006b26:	e148      	b.n	8006dba <updateMorseLetter+0x366>
		case 'c':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8006b28:	4b84      	ldr	r3, [pc, #528]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b2a:	222d      	movs	r2, #45	; 0x2d
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	4b83      	ldr	r3, [pc, #524]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b30:	222e      	movs	r2, #46	; 0x2e
 8006b32:	705a      	strb	r2, [r3, #1]
 8006b34:	4b81      	ldr	r3, [pc, #516]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b36:	222d      	movs	r2, #45	; 0x2d
 8006b38:	709a      	strb	r2, [r3, #2]
 8006b3a:	4b80      	ldr	r3, [pc, #512]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b3c:	222e      	movs	r2, #46	; 0x2e
 8006b3e:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006b40:	4b7d      	ldr	r3, [pc, #500]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006b42:	2204      	movs	r2, #4
 8006b44:	601a      	str	r2, [r3, #0]
			break;
 8006b46:	e138      	b.n	8006dba <updateMorseLetter+0x366>
		case 'd':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.';
 8006b48:	4b7c      	ldr	r3, [pc, #496]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b4a:	222d      	movs	r2, #45	; 0x2d
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	4b7b      	ldr	r3, [pc, #492]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b50:	222e      	movs	r2, #46	; 0x2e
 8006b52:	705a      	strb	r2, [r3, #1]
 8006b54:	4b79      	ldr	r3, [pc, #484]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b56:	222e      	movs	r2, #46	; 0x2e
 8006b58:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006b5a:	4b77      	ldr	r3, [pc, #476]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	601a      	str	r2, [r3, #0]
			break;
 8006b60:	e12b      	b.n	8006dba <updateMorseLetter+0x366>
		case 'e':
			morseLetter[0] = '.';
 8006b62:	4b76      	ldr	r3, [pc, #472]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b64:	222e      	movs	r2, #46	; 0x2e
 8006b66:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 8006b68:	4b73      	ldr	r3, [pc, #460]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]
			break;
 8006b6e:	e124      	b.n	8006dba <updateMorseLetter+0x366>
		case 'f':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8006b70:	4b72      	ldr	r3, [pc, #456]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b72:	222e      	movs	r2, #46	; 0x2e
 8006b74:	701a      	strb	r2, [r3, #0]
 8006b76:	4b71      	ldr	r3, [pc, #452]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b78:	222e      	movs	r2, #46	; 0x2e
 8006b7a:	705a      	strb	r2, [r3, #1]
 8006b7c:	4b6f      	ldr	r3, [pc, #444]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b7e:	222d      	movs	r2, #45	; 0x2d
 8006b80:	709a      	strb	r2, [r3, #2]
 8006b82:	4b6e      	ldr	r3, [pc, #440]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b84:	222e      	movs	r2, #46	; 0x2e
 8006b86:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006b88:	4b6b      	ldr	r3, [pc, #428]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	601a      	str	r2, [r3, #0]
			break;
 8006b8e:	e114      	b.n	8006dba <updateMorseLetter+0x366>
		case 'g':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8006b90:	4b6a      	ldr	r3, [pc, #424]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b92:	222d      	movs	r2, #45	; 0x2d
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	4b69      	ldr	r3, [pc, #420]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b98:	222d      	movs	r2, #45	; 0x2d
 8006b9a:	705a      	strb	r2, [r3, #1]
 8006b9c:	4b67      	ldr	r3, [pc, #412]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006b9e:	222e      	movs	r2, #46	; 0x2e
 8006ba0:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006ba2:	4b65      	ldr	r3, [pc, #404]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	601a      	str	r2, [r3, #0]
			break;
 8006ba8:	e107      	b.n	8006dba <updateMorseLetter+0x366>
		case 'h':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8006baa:	4b64      	ldr	r3, [pc, #400]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bac:	222e      	movs	r2, #46	; 0x2e
 8006bae:	701a      	strb	r2, [r3, #0]
 8006bb0:	4b62      	ldr	r3, [pc, #392]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bb2:	222e      	movs	r2, #46	; 0x2e
 8006bb4:	705a      	strb	r2, [r3, #1]
 8006bb6:	4b61      	ldr	r3, [pc, #388]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bb8:	222e      	movs	r2, #46	; 0x2e
 8006bba:	709a      	strb	r2, [r3, #2]
 8006bbc:	4b5f      	ldr	r3, [pc, #380]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bbe:	222e      	movs	r2, #46	; 0x2e
 8006bc0:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006bc2:	4b5d      	ldr	r3, [pc, #372]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006bc4:	2204      	movs	r2, #4
 8006bc6:	601a      	str	r2, [r3, #0]
			break;
 8006bc8:	e0f7      	b.n	8006dba <updateMorseLetter+0x366>
		case 'i':
			morseLetter[0] = '.'; morseLetter[1] = '.';
 8006bca:	4b5c      	ldr	r3, [pc, #368]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bcc:	222e      	movs	r2, #46	; 0x2e
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	4b5a      	ldr	r3, [pc, #360]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bd2:	222e      	movs	r2, #46	; 0x2e
 8006bd4:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8006bd6:	4b58      	ldr	r3, [pc, #352]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006bd8:	2202      	movs	r2, #2
 8006bda:	601a      	str	r2, [r3, #0]
			break;
 8006bdc:	e0ed      	b.n	8006dba <updateMorseLetter+0x366>
		case 'j':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8006bde:	4b57      	ldr	r3, [pc, #348]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006be0:	222e      	movs	r2, #46	; 0x2e
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006be6:	222d      	movs	r2, #45	; 0x2d
 8006be8:	705a      	strb	r2, [r3, #1]
 8006bea:	4b54      	ldr	r3, [pc, #336]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bec:	222d      	movs	r2, #45	; 0x2d
 8006bee:	709a      	strb	r2, [r3, #2]
 8006bf0:	4b52      	ldr	r3, [pc, #328]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006bf2:	222d      	movs	r2, #45	; 0x2d
 8006bf4:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006bf6:	4b50      	ldr	r3, [pc, #320]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006bf8:	2204      	movs	r2, #4
 8006bfa:	601a      	str	r2, [r3, #0]
			break;
 8006bfc:	e0dd      	b.n	8006dba <updateMorseLetter+0x366>
		case 'k':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8006bfe:	4b4f      	ldr	r3, [pc, #316]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c00:	222d      	movs	r2, #45	; 0x2d
 8006c02:	701a      	strb	r2, [r3, #0]
 8006c04:	4b4d      	ldr	r3, [pc, #308]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c06:	222e      	movs	r2, #46	; 0x2e
 8006c08:	705a      	strb	r2, [r3, #1]
 8006c0a:	4b4c      	ldr	r3, [pc, #304]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c0c:	222d      	movs	r2, #45	; 0x2d
 8006c0e:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006c10:	4b49      	ldr	r3, [pc, #292]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006c12:	2203      	movs	r2, #3
 8006c14:	601a      	str	r2, [r3, #0]
			break;
 8006c16:	e0d0      	b.n	8006dba <updateMorseLetter+0x366>
		case 'l':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8006c18:	4b48      	ldr	r3, [pc, #288]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c1a:	222e      	movs	r2, #46	; 0x2e
 8006c1c:	701a      	strb	r2, [r3, #0]
 8006c1e:	4b47      	ldr	r3, [pc, #284]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c20:	222d      	movs	r2, #45	; 0x2d
 8006c22:	705a      	strb	r2, [r3, #1]
 8006c24:	4b45      	ldr	r3, [pc, #276]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c26:	222e      	movs	r2, #46	; 0x2e
 8006c28:	709a      	strb	r2, [r3, #2]
 8006c2a:	4b44      	ldr	r3, [pc, #272]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c2c:	222e      	movs	r2, #46	; 0x2e
 8006c2e:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006c30:	4b41      	ldr	r3, [pc, #260]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006c32:	2204      	movs	r2, #4
 8006c34:	601a      	str	r2, [r3, #0]
			break;
 8006c36:	e0c0      	b.n	8006dba <updateMorseLetter+0x366>
		case 'm':
			morseLetter[0] = '-'; morseLetter[1] = '-';
 8006c38:	4b40      	ldr	r3, [pc, #256]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c3a:	222d      	movs	r2, #45	; 0x2d
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	4b3f      	ldr	r3, [pc, #252]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c40:	222d      	movs	r2, #45	; 0x2d
 8006c42:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8006c44:	4b3c      	ldr	r3, [pc, #240]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006c46:	2202      	movs	r2, #2
 8006c48:	601a      	str	r2, [r3, #0]
			break;
 8006c4a:	e0b6      	b.n	8006dba <updateMorseLetter+0x366>
		case 'n':
			morseLetter[0] = '-'; morseLetter[1] = '.';
 8006c4c:	4b3b      	ldr	r3, [pc, #236]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c4e:	222d      	movs	r2, #45	; 0x2d
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	4b3a      	ldr	r3, [pc, #232]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c54:	222e      	movs	r2, #46	; 0x2e
 8006c56:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8006c58:	4b37      	ldr	r3, [pc, #220]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	601a      	str	r2, [r3, #0]
			break;
 8006c5e:	e0ac      	b.n	8006dba <updateMorseLetter+0x366>
		case 'o':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '-';
 8006c60:	4b36      	ldr	r3, [pc, #216]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c62:	222d      	movs	r2, #45	; 0x2d
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c68:	222d      	movs	r2, #45	; 0x2d
 8006c6a:	705a      	strb	r2, [r3, #1]
 8006c6c:	4b33      	ldr	r3, [pc, #204]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c6e:	222d      	movs	r2, #45	; 0x2d
 8006c70:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006c72:	4b31      	ldr	r3, [pc, #196]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006c74:	2203      	movs	r2, #3
 8006c76:	601a      	str	r2, [r3, #0]
			break;
 8006c78:	e09f      	b.n	8006dba <updateMorseLetter+0x366>
		case 'p':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8006c7a:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c7c:	222e      	movs	r2, #46	; 0x2e
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	4b2e      	ldr	r3, [pc, #184]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c82:	222d      	movs	r2, #45	; 0x2d
 8006c84:	705a      	strb	r2, [r3, #1]
 8006c86:	4b2d      	ldr	r3, [pc, #180]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c88:	222d      	movs	r2, #45	; 0x2d
 8006c8a:	709a      	strb	r2, [r3, #2]
 8006c8c:	4b2b      	ldr	r3, [pc, #172]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c8e:	222e      	movs	r2, #46	; 0x2e
 8006c90:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006c92:	4b29      	ldr	r3, [pc, #164]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006c94:	2204      	movs	r2, #4
 8006c96:	601a      	str	r2, [r3, #0]
			break;
 8006c98:	e08f      	b.n	8006dba <updateMorseLetter+0x366>
		case 'q':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8006c9a:	4b28      	ldr	r3, [pc, #160]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006c9c:	222d      	movs	r2, #45	; 0x2d
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006ca2:	222d      	movs	r2, #45	; 0x2d
 8006ca4:	705a      	strb	r2, [r3, #1]
 8006ca6:	4b25      	ldr	r3, [pc, #148]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006ca8:	222e      	movs	r2, #46	; 0x2e
 8006caa:	709a      	strb	r2, [r3, #2]
 8006cac:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cae:	222d      	movs	r2, #45	; 0x2d
 8006cb0:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006cb2:	4b21      	ldr	r3, [pc, #132]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006cb4:	2204      	movs	r2, #4
 8006cb6:	601a      	str	r2, [r3, #0]
			break;
 8006cb8:	e07f      	b.n	8006dba <updateMorseLetter+0x366>
		case 'r':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8006cba:	4b20      	ldr	r3, [pc, #128]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cbc:	222e      	movs	r2, #46	; 0x2e
 8006cbe:	701a      	strb	r2, [r3, #0]
 8006cc0:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cc2:	222d      	movs	r2, #45	; 0x2d
 8006cc4:	705a      	strb	r2, [r3, #1]
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cc8:	222e      	movs	r2, #46	; 0x2e
 8006cca:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006cce:	2203      	movs	r2, #3
 8006cd0:	601a      	str	r2, [r3, #0]
			break;
 8006cd2:	e072      	b.n	8006dba <updateMorseLetter+0x366>
		case 's':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.';
 8006cd4:	4b19      	ldr	r3, [pc, #100]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cd6:	222e      	movs	r2, #46	; 0x2e
 8006cd8:	701a      	strb	r2, [r3, #0]
 8006cda:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cdc:	222e      	movs	r2, #46	; 0x2e
 8006cde:	705a      	strb	r2, [r3, #1]
 8006ce0:	4b16      	ldr	r3, [pc, #88]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006ce2:	222e      	movs	r2, #46	; 0x2e
 8006ce4:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006ce6:	4b14      	ldr	r3, [pc, #80]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006ce8:	2203      	movs	r2, #3
 8006cea:	601a      	str	r2, [r3, #0]
			break;
 8006cec:	e065      	b.n	8006dba <updateMorseLetter+0x366>
		case 't':
			morseLetter[0] = '-';
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cf0:	222d      	movs	r2, #45	; 0x2d
 8006cf2:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 8006cf4:	4b10      	ldr	r3, [pc, #64]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
			break;
 8006cfa:	e05e      	b.n	8006dba <updateMorseLetter+0x366>
		case 'u':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006cfe:	222e      	movs	r2, #46	; 0x2e
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006d04:	222e      	movs	r2, #46	; 0x2e
 8006d06:	705a      	strb	r2, [r3, #1]
 8006d08:	4b0c      	ldr	r3, [pc, #48]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006d0a:	222d      	movs	r2, #45	; 0x2d
 8006d0c:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006d10:	2203      	movs	r2, #3
 8006d12:	601a      	str	r2, [r3, #0]
			break;
 8006d14:	e051      	b.n	8006dba <updateMorseLetter+0x366>
		case 'v':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006d18:	222e      	movs	r2, #46	; 0x2e
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006d1e:	222e      	movs	r2, #46	; 0x2e
 8006d20:	705a      	strb	r2, [r3, #1]
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006d24:	222e      	movs	r2, #46	; 0x2e
 8006d26:	709a      	strb	r2, [r3, #2]
 8006d28:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <updateMorseLetter+0x2e8>)
 8006d2a:	222d      	movs	r2, #45	; 0x2d
 8006d2c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006d2e:	4b02      	ldr	r3, [pc, #8]	; (8006d38 <updateMorseLetter+0x2e4>)
 8006d30:	2204      	movs	r2, #4
 8006d32:	601a      	str	r2, [r3, #0]
			break;
 8006d34:	e041      	b.n	8006dba <updateMorseLetter+0x366>
 8006d36:	bf00      	nop
 8006d38:	20000414 	.word	0x20000414
 8006d3c:	20000418 	.word	0x20000418
		case 'w':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-';
 8006d40:	4b21      	ldr	r3, [pc, #132]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d42:	222e      	movs	r2, #46	; 0x2e
 8006d44:	701a      	strb	r2, [r3, #0]
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d48:	222d      	movs	r2, #45	; 0x2d
 8006d4a:	705a      	strb	r2, [r3, #1]
 8006d4c:	4b1e      	ldr	r3, [pc, #120]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d4e:	222d      	movs	r2, #45	; 0x2d
 8006d50:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8006d52:	4b1e      	ldr	r3, [pc, #120]	; (8006dcc <updateMorseLetter+0x378>)
 8006d54:	2203      	movs	r2, #3
 8006d56:	601a      	str	r2, [r3, #0]
			break;
 8006d58:	e02f      	b.n	8006dba <updateMorseLetter+0x366>
		case 'x':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8006d5a:	4b1b      	ldr	r3, [pc, #108]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d5c:	222d      	movs	r2, #45	; 0x2d
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d62:	222e      	movs	r2, #46	; 0x2e
 8006d64:	705a      	strb	r2, [r3, #1]
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d68:	222e      	movs	r2, #46	; 0x2e
 8006d6a:	709a      	strb	r2, [r3, #2]
 8006d6c:	4b16      	ldr	r3, [pc, #88]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d6e:	222d      	movs	r2, #45	; 0x2d
 8006d70:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006d72:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <updateMorseLetter+0x378>)
 8006d74:	2204      	movs	r2, #4
 8006d76:	601a      	str	r2, [r3, #0]
			break;
 8006d78:	e01f      	b.n	8006dba <updateMorseLetter+0x366>
		case 'y':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d7c:	222d      	movs	r2, #45	; 0x2d
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d82:	222e      	movs	r2, #46	; 0x2e
 8006d84:	705a      	strb	r2, [r3, #1]
 8006d86:	4b10      	ldr	r3, [pc, #64]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d88:	222d      	movs	r2, #45	; 0x2d
 8006d8a:	709a      	strb	r2, [r3, #2]
 8006d8c:	4b0e      	ldr	r3, [pc, #56]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d8e:	222d      	movs	r2, #45	; 0x2d
 8006d90:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006d92:	4b0e      	ldr	r3, [pc, #56]	; (8006dcc <updateMorseLetter+0x378>)
 8006d94:	2204      	movs	r2, #4
 8006d96:	601a      	str	r2, [r3, #0]
			break;
 8006d98:	e00f      	b.n	8006dba <updateMorseLetter+0x366>
		case 'z':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8006d9a:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <updateMorseLetter+0x374>)
 8006d9c:	222d      	movs	r2, #45	; 0x2d
 8006d9e:	701a      	strb	r2, [r3, #0]
 8006da0:	4b09      	ldr	r3, [pc, #36]	; (8006dc8 <updateMorseLetter+0x374>)
 8006da2:	222d      	movs	r2, #45	; 0x2d
 8006da4:	705a      	strb	r2, [r3, #1]
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <updateMorseLetter+0x374>)
 8006da8:	222e      	movs	r2, #46	; 0x2e
 8006daa:	709a      	strb	r2, [r3, #2]
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <updateMorseLetter+0x374>)
 8006dae:	222e      	movs	r2, #46	; 0x2e
 8006db0:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8006db2:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <updateMorseLetter+0x378>)
 8006db4:	2204      	movs	r2, #4
 8006db6:	601a      	str	r2, [r3, #0]
	}
}
 8006db8:	e7ff      	b.n	8006dba <updateMorseLetter+0x366>
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	20000418 	.word	0x20000418
 8006dcc:	20000414 	.word	0x20000414

08006dd0 <printMorseLetter>:

/**
 * print the current Morse array to the serial terminal
 */
void printMorseLetter() {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
	if (morseLetter[0] == '\0') {
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <printMorseLetter+0x44>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d103      	bne.n	8006de6 <printMorseLetter+0x16>
		printf(" *space* ");
 8006dde:	480e      	ldr	r0, [pc, #56]	; (8006e18 <printMorseLetter+0x48>)
 8006de0:	f001 fffe 	bl	8008de0 <iprintf>
	} else {
		for (int i = 0; i < morseLetterSize; i++){
			printf("%c", morseLetter[i]);
		}
	}
}
 8006de4:	e011      	b.n	8006e0a <printMorseLetter+0x3a>
		for (int i = 0; i < morseLetterSize; i++){
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
 8006dea:	e009      	b.n	8006e00 <printMorseLetter+0x30>
			printf("%c", morseLetter[i]);
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <printMorseLetter+0x44>)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f002 f80b 	bl	8008e10 <putchar>
		for (int i = 0; i < morseLetterSize; i++){
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	4b06      	ldr	r3, [pc, #24]	; (8006e1c <printMorseLetter+0x4c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	dbf0      	blt.n	8006dec <printMorseLetter+0x1c>
}
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000418 	.word	0x20000418
 8006e18:	0800d844 	.word	0x0800d844
 8006e1c:	20000414 	.word	0x20000414

08006e20 <playMorseToSpeaker>:

/**
 * Play the current Morse array to the DAC speaker (and display on LED)
 */
void playMorseToSpeaker(char *morseArray, int morseArraySize) {
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af02      	add	r7, sp, #8
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < morseArraySize; i++) {
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e055      	b.n	8006edc <playMorseToSpeaker+0xbc>
		if (morseArray[i] == '.') {
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b2e      	cmp	r3, #46	; 0x2e
 8006e3a:	d123      	bne.n	8006e84 <playMorseToSpeaker+0x64>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *beepArray, (uint32_t) beepArraySize, DAC_ALIGN_12B_R);
 8006e3c:	4b2d      	ldr	r3, [pc, #180]	; (8006ef4 <playMorseToSpeaker+0xd4>)
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b2d      	ldr	r3, [pc, #180]	; (8006ef8 <playMorseToSpeaker+0xd8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4619      	mov	r1, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	2100      	movs	r1, #0
 8006e50:	482a      	ldr	r0, [pc, #168]	; (8006efc <playMorseToSpeaker+0xdc>)
 8006e52:	f7fb fcf9 	bl	8002848 <HAL_DAC_Start_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8006e56:	2120      	movs	r1, #32
 8006e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e5c:	f7fc fc66 	bl	800372c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e64:	f7fa f954 	bl	8001110 <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4824      	ldr	r0, [pc, #144]	; (8006efc <playMorseToSpeaker+0xdc>)
 8006e6c:	f7fb fdb8 	bl	80029e0 <HAL_DAC_Stop_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8006e70:	2120      	movs	r1, #32
 8006e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e76:	f7fc fc59 	bl	800372c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006e7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e7e:	f7fa f947 	bl	8001110 <HAL_Delay>
 8006e82:	e028      	b.n	8006ed6 <playMorseToSpeaker+0xb6>
		} else if (morseArray[i] == '-') {
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b2d      	cmp	r3, #45	; 0x2d
 8006e8e:	d12d      	bne.n	8006eec <playMorseToSpeaker+0xcc>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *beepArray, (uint32_t) beepArraySize, DAC_ALIGN_12B_R);
 8006e90:	4b18      	ldr	r3, [pc, #96]	; (8006ef4 <playMorseToSpeaker+0xd4>)
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	4b18      	ldr	r3, [pc, #96]	; (8006ef8 <playMorseToSpeaker+0xd8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4815      	ldr	r0, [pc, #84]	; (8006efc <playMorseToSpeaker+0xdc>)
 8006ea6:	f7fb fccf 	bl	8002848 <HAL_DAC_Start_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8006eaa:	2120      	movs	r1, #32
 8006eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eb0:	f7fc fc3c 	bl	800372c <HAL_GPIO_TogglePin>
			HAL_Delay(600);
 8006eb4:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006eb8:	f7fa f92a 	bl	8001110 <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	480f      	ldr	r0, [pc, #60]	; (8006efc <playMorseToSpeaker+0xdc>)
 8006ec0:	f7fb fd8e 	bl	80029e0 <HAL_DAC_Stop_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8006ec4:	2120      	movs	r1, #32
 8006ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eca:	f7fc fc2f 	bl	800372c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8006ece:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006ed2:	f7fa f91d 	bl	8001110 <HAL_Delay>
	for (int i = 0; i < morseArraySize; i++) {
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	dba5      	blt.n	8006e30 <playMorseToSpeaker+0x10>
		} else {
			return;
		}
	}
	printf("\n\r");
 8006ee4:	4806      	ldr	r0, [pc, #24]	; (8006f00 <playMorseToSpeaker+0xe0>)
 8006ee6:	f001 ff7b 	bl	8008de0 <iprintf>
 8006eea:	e000      	b.n	8006eee <playMorseToSpeaker+0xce>
			return;
 8006eec:	bf00      	nop
}
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20000444 	.word	0x20000444
 8006ef8:	20000010 	.word	0x20000010
 8006efc:	20000274 	.word	0x20000274
 8006f00:	0800d850 	.word	0x0800d850

08006f04 <getLetterFromMorse>:

/**
 * Get a letter from the inputted Morse array
 */
char getLetterFromMorse(char *morseArray, int morseArraySize) {
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
	char nullChar = '\0';
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
	if (morseArraySize == 0) {return nullChar;}
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <getLetterFromMorse+0x18>
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	e0bc      	b.n	8007096 <getLetterFromMorse+0x192>
	switch (morseArray[0]) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b2d      	cmp	r3, #45	; 0x2d
 8006f22:	d05e      	beq.n	8006fe2 <getLetterFromMorse+0xde>
 8006f24:	2b2e      	cmp	r3, #46	; 0x2e
 8006f26:	f040 80b5 	bne.w	8007094 <getLetterFromMorse+0x190>
	case '.':
		if (morseArraySize == 1) {return 'E';}
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <getLetterFromMorse+0x30>
 8006f30:	2345      	movs	r3, #69	; 0x45
 8006f32:	e0b0      	b.n	8007096 <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3301      	adds	r3, #1
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b2d      	cmp	r3, #45	; 0x2d
 8006f3c:	d029      	beq.n	8006f92 <getLetterFromMorse+0x8e>
 8006f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f40:	d14f      	bne.n	8006fe2 <getLetterFromMorse+0xde>
		case '.':
			if (morseArraySize == 2) {return 'I';}
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d101      	bne.n	8006f4c <getLetterFromMorse+0x48>
 8006f48:	2349      	movs	r3, #73	; 0x49
 8006f4a:	e0a4      	b.n	8007096 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3302      	adds	r3, #2
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b2d      	cmp	r3, #45	; 0x2d
 8006f54:	d011      	beq.n	8006f7a <getLetterFromMorse+0x76>
 8006f56:	2b2e      	cmp	r3, #46	; 0x2e
 8006f58:	d11b      	bne.n	8006f92 <getLetterFromMorse+0x8e>
			case '.':
				if (morseArraySize == 3) {return 'S';}
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d101      	bne.n	8006f64 <getLetterFromMorse+0x60>
 8006f60:	2353      	movs	r3, #83	; 0x53
 8006f62:	e098      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	3303      	adds	r3, #3
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b2d      	cmp	r3, #45	; 0x2d
 8006f6c:	d003      	beq.n	8006f76 <getLetterFromMorse+0x72>
 8006f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f70:	d103      	bne.n	8006f7a <getLetterFromMorse+0x76>
				case '.':
					return 'H';
 8006f72:	2348      	movs	r3, #72	; 0x48
 8006f74:	e08f      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					return 'V';
 8006f76:	2356      	movs	r3, #86	; 0x56
 8006f78:	e08d      	b.n	8007096 <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'U';}
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d101      	bne.n	8006f84 <getLetterFromMorse+0x80>
 8006f80:	2355      	movs	r3, #85	; 0x55
 8006f82:	e088      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3303      	adds	r3, #3
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8c:	d101      	bne.n	8006f92 <getLetterFromMorse+0x8e>
				case '.':
					return 'F';
 8006f8e:	2346      	movs	r3, #70	; 0x46
 8006f90:	e081      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					;
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'A';}
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d101      	bne.n	8006f9c <getLetterFromMorse+0x98>
 8006f98:	2341      	movs	r3, #65	; 0x41
 8006f9a:	e07c      	b.n	8007096 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8006fa4:	d00d      	beq.n	8006fc2 <getLetterFromMorse+0xbe>
 8006fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fa8:	d11b      	bne.n	8006fe2 <getLetterFromMorse+0xde>
			case '.':
				if (morseArraySize == 3) {return 'R';}
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d101      	bne.n	8006fb4 <getLetterFromMorse+0xb0>
 8006fb0:	2352      	movs	r3, #82	; 0x52
 8006fb2:	e070      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3303      	adds	r3, #3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b2e      	cmp	r3, #46	; 0x2e
 8006fbc:	d101      	bne.n	8006fc2 <getLetterFromMorse+0xbe>
				case '.':
					return 'L';
 8006fbe:	234c      	movs	r3, #76	; 0x4c
 8006fc0:	e069      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					;
				}
			case '-':
				if (morseArraySize == 3) {return 'W';}
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d101      	bne.n	8006fcc <getLetterFromMorse+0xc8>
 8006fc8:	2357      	movs	r3, #87	; 0x57
 8006fca:	e064      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3303      	adds	r3, #3
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b2d      	cmp	r3, #45	; 0x2d
 8006fd4:	d003      	beq.n	8006fde <getLetterFromMorse+0xda>
 8006fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd8:	d103      	bne.n	8006fe2 <getLetterFromMorse+0xde>
				case '.':
					return 'P';
 8006fda:	2350      	movs	r3, #80	; 0x50
 8006fdc:	e05b      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					return 'J';
 8006fde:	234a      	movs	r3, #74	; 0x4a
 8006fe0:	e059      	b.n	8007096 <getLetterFromMorse+0x192>
				}
			}
		}
	case '-':
		if (morseArraySize == 1) {return 'T';}
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <getLetterFromMorse+0xe8>
 8006fe8:	2354      	movs	r3, #84	; 0x54
 8006fea:	e054      	b.n	8007096 <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ff4:	d02d      	beq.n	8007052 <getLetterFromMorse+0x14e>
 8006ff6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ff8:	d14c      	bne.n	8007094 <getLetterFromMorse+0x190>
		case '.':
			if (morseArraySize == 2) {return 'N';}
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d101      	bne.n	8007004 <getLetterFromMorse+0x100>
 8007000:	234e      	movs	r3, #78	; 0x4e
 8007002:	e048      	b.n	8007096 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3302      	adds	r3, #2
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b2d      	cmp	r3, #45	; 0x2d
 800700c:	d011      	beq.n	8007032 <getLetterFromMorse+0x12e>
 800700e:	2b2e      	cmp	r3, #46	; 0x2e
 8007010:	d11f      	bne.n	8007052 <getLetterFromMorse+0x14e>
			case '.':
				if (morseArraySize == 3) {return 'D';}
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b03      	cmp	r3, #3
 8007016:	d101      	bne.n	800701c <getLetterFromMorse+0x118>
 8007018:	2344      	movs	r3, #68	; 0x44
 800701a:	e03c      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3303      	adds	r3, #3
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b2d      	cmp	r3, #45	; 0x2d
 8007024:	d003      	beq.n	800702e <getLetterFromMorse+0x12a>
 8007026:	2b2e      	cmp	r3, #46	; 0x2e
 8007028:	d103      	bne.n	8007032 <getLetterFromMorse+0x12e>
				case '.':
					return 'B';
 800702a:	2342      	movs	r3, #66	; 0x42
 800702c:	e033      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					return 'X';
 800702e:	2358      	movs	r3, #88	; 0x58
 8007030:	e031      	b.n	8007096 <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'K';}
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d101      	bne.n	800703c <getLetterFromMorse+0x138>
 8007038:	234b      	movs	r3, #75	; 0x4b
 800703a:	e02c      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	3303      	adds	r3, #3
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b2d      	cmp	r3, #45	; 0x2d
 8007044:	d003      	beq.n	800704e <getLetterFromMorse+0x14a>
 8007046:	2b2e      	cmp	r3, #46	; 0x2e
 8007048:	d103      	bne.n	8007052 <getLetterFromMorse+0x14e>
				case '.':
					return 'C';
 800704a:	2343      	movs	r3, #67	; 0x43
 800704c:	e023      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					return 'Y';
 800704e:	2359      	movs	r3, #89	; 0x59
 8007050:	e021      	b.n	8007096 <getLetterFromMorse+0x192>
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'M';}
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d101      	bne.n	800705c <getLetterFromMorse+0x158>
 8007058:	234d      	movs	r3, #77	; 0x4d
 800705a:	e01c      	b.n	8007096 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3302      	adds	r3, #2
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	2b2d      	cmp	r3, #45	; 0x2d
 8007064:	d011      	beq.n	800708a <getLetterFromMorse+0x186>
 8007066:	2b2e      	cmp	r3, #46	; 0x2e
 8007068:	d114      	bne.n	8007094 <getLetterFromMorse+0x190>
			case '.':
				if (morseArraySize == 3) {return 'G';}
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b03      	cmp	r3, #3
 800706e:	d101      	bne.n	8007074 <getLetterFromMorse+0x170>
 8007070:	2347      	movs	r3, #71	; 0x47
 8007072:	e010      	b.n	8007096 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3303      	adds	r3, #3
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b2d      	cmp	r3, #45	; 0x2d
 800707c:	d003      	beq.n	8007086 <getLetterFromMorse+0x182>
 800707e:	2b2e      	cmp	r3, #46	; 0x2e
 8007080:	d103      	bne.n	800708a <getLetterFromMorse+0x186>
				case '.':
					return 'Z';
 8007082:	235a      	movs	r3, #90	; 0x5a
 8007084:	e007      	b.n	8007096 <getLetterFromMorse+0x192>
				case '-':
					return 'Q';
 8007086:	2351      	movs	r3, #81	; 0x51
 8007088:	e005      	b.n	8007096 <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'O';}
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b03      	cmp	r3, #3
 800708e:	d101      	bne.n	8007094 <getLetterFromMorse+0x190>
 8007090:	234f      	movs	r3, #79	; 0x4f
 8007092:	e000      	b.n	8007096 <getLetterFromMorse+0x192>
					;
				}
			}
		}
	}
	return nullChar;
 8007094:	7bfb      	ldrb	r3, [r7, #15]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <calcMorseArray>:

/**
 * Calculate the corresponding letter associated with the code
 */
void calcMorseArray() {
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
	// Clear the code array
	for (int i = 0; i < 5; i++) code[i] = '\000';
 80070aa:	2300      	movs	r3, #0
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	e007      	b.n	80070c0 <calcMorseArray+0x1c>
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <calcMorseArray+0x80>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	3301      	adds	r3, #1
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	ddf4      	ble.n	80070b0 <calcMorseArray+0xc>

	// Translate the delays into the appropriate symbols (i.e. '.', '-')
	for (int i = 0; i < 5; i++) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	603b      	str	r3, [r7, #0]
 80070ca:	e020      	b.n	800710e <calcMorseArray+0x6a>
		if (delays[i] == 0) break;
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <calcMorseArray+0x84>)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01e      	beq.n	8007116 <calcMorseArray+0x72>

		if (delays[i] >= 300) code[i] = '-';
 80070d8:	4a13      	ldr	r2, [pc, #76]	; (8007128 <calcMorseArray+0x84>)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80070e4:	db04      	blt.n	80070f0 <calcMorseArray+0x4c>
 80070e6:	4a0f      	ldr	r2, [pc, #60]	; (8007124 <calcMorseArray+0x80>)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	4413      	add	r3, r2
 80070ec:	222d      	movs	r2, #45	; 0x2d
 80070ee:	701a      	strb	r2, [r3, #0]
		if (delays[i] < 300) code[i] = '.';
 80070f0:	4a0d      	ldr	r2, [pc, #52]	; (8007128 <calcMorseArray+0x84>)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80070fc:	da04      	bge.n	8007108 <calcMorseArray+0x64>
 80070fe:	4a09      	ldr	r2, [pc, #36]	; (8007124 <calcMorseArray+0x80>)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	4413      	add	r3, r2
 8007104:	222e      	movs	r2, #46	; 0x2e
 8007106:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	3301      	adds	r3, #1
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b04      	cmp	r3, #4
 8007112:	dddb      	ble.n	80070cc <calcMorseArray+0x28>
	}
}
 8007114:	e000      	b.n	8007118 <calcMorseArray+0x74>
		if (delays[i] == 0) break;
 8007116:	bf00      	nop
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	2000043c 	.word	0x2000043c
 8007128:	20000428 	.word	0x20000428

0800712c <waitForADCPress>:

/**
 * Wait for the ADC input to be pressed returns 0 when pressed or 1 when timeouts
 */
int waitForADCPress(int i) {
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_ADC_Start(&hadc1);
 8007134:	481a      	ldr	r0, [pc, #104]	; (80071a0 <waitForADCPress+0x74>)
 8007136:	f7fa fb83 	bl	8001840 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 800713a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800713e:	4818      	ldr	r0, [pc, #96]	; (80071a0 <waitForADCPress+0x74>)
 8007140:	f7fa fc14 	bl	800196c <HAL_ADC_PollForConversion>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d121      	bne.n	800718e <waitForADCPress+0x62>
			if (HAL_ADC_GetValue(&hadc1) <= 1000) {
 800714a:	4815      	ldr	r0, [pc, #84]	; (80071a0 <waitForADCPress+0x74>)
 800714c:	f7fa fc9d 	bl	8001a8a <HAL_ADC_GetValue>
 8007150:	4603      	mov	r3, r0
 8007152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007156:	d804      	bhi.n	8007162 <waitForADCPress+0x36>
				HAL_ADC_Stop(&hadc1);
 8007158:	4811      	ldr	r0, [pc, #68]	; (80071a0 <waitForADCPress+0x74>)
 800715a:	f7fa fbd4 	bl	8001906 <HAL_ADC_Stop>
				return 0;
 800715e:	2300      	movs	r3, #0
 8007160:	e019      	b.n	8007196 <waitForADCPress+0x6a>
			}
			if (i > 0 && millis - (start + delays[i - 1]) >= 2000) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd12      	ble.n	800718e <waitForADCPress+0x62>
 8007168:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <waitForADCPress+0x78>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3b01      	subs	r3, #1
 8007170:	490d      	ldr	r1, [pc, #52]	; (80071a8 <waitForADCPress+0x7c>)
 8007172:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007176:	4b0d      	ldr	r3, [pc, #52]	; (80071ac <waitForADCPress+0x80>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	440b      	add	r3, r1
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007182:	db04      	blt.n	800718e <waitForADCPress+0x62>
				HAL_ADC_Stop(&hadc1);
 8007184:	4806      	ldr	r0, [pc, #24]	; (80071a0 <waitForADCPress+0x74>)
 8007186:	f7fa fbbe 	bl	8001906 <HAL_ADC_Stop>
				return 1;
 800718a:	2301      	movs	r3, #1
 800718c:	e003      	b.n	8007196 <waitForADCPress+0x6a>
			}
		}
		HAL_ADC_Stop(&hadc1);
 800718e:	4804      	ldr	r0, [pc, #16]	; (80071a0 <waitForADCPress+0x74>)
 8007190:	f7fa fbb9 	bl	8001906 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 8007194:	e7ce      	b.n	8007134 <waitForADCPress+0x8>
	}
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	2000020c 	.word	0x2000020c
 80071a4:	20000420 	.word	0x20000420
 80071a8:	20000428 	.word	0x20000428
 80071ac:	20000424 	.word	0x20000424

080071b0 <waitForADCRelease>:

/**
 * Wait for the ADC input to be released
 */
void waitForADCRelease() {
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
	while (1) {
		HAL_ADC_Start(&hadc1);
 80071b4:	480d      	ldr	r0, [pc, #52]	; (80071ec <waitForADCRelease+0x3c>)
 80071b6:	f7fa fb43 	bl	8001840 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80071ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80071be:	480b      	ldr	r0, [pc, #44]	; (80071ec <waitForADCRelease+0x3c>)
 80071c0:	f7fa fbd4 	bl	800196c <HAL_ADC_PollForConversion>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <waitForADCRelease+0x30>
			if (HAL_ADC_GetValue(&hadc1) > 1000) {
 80071ca:	4808      	ldr	r0, [pc, #32]	; (80071ec <waitForADCRelease+0x3c>)
 80071cc:	f7fa fc5d 	bl	8001a8a <HAL_ADC_GetValue>
 80071d0:	4603      	mov	r3, r0
 80071d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071d6:	d903      	bls.n	80071e0 <waitForADCRelease+0x30>
				HAL_ADC_Stop(&hadc1);
 80071d8:	4804      	ldr	r0, [pc, #16]	; (80071ec <waitForADCRelease+0x3c>)
 80071da:	f7fa fb94 	bl	8001906 <HAL_ADC_Stop>
				return;
 80071de:	e003      	b.n	80071e8 <waitForADCRelease+0x38>
			}
		}
		HAL_ADC_Stop(&hadc1);
 80071e0:	4802      	ldr	r0, [pc, #8]	; (80071ec <waitForADCRelease+0x3c>)
 80071e2:	f7fa fb90 	bl	8001906 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 80071e6:	e7e5      	b.n	80071b4 <waitForADCRelease+0x4>
	}
}
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	2000020c 	.word	0x2000020c

080071f0 <getMorseInput>:

/**
 * Wait for the user to input up to 5 signals
 * returns the size of the input Morse
 */
int getMorseInput() {
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
	// Start the timer at 0 ms
	millis = 0;
 80071f6:	4b20      	ldr	r3, [pc, #128]	; (8007278 <getMorseInput+0x88>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim5);
 80071fc:	481f      	ldr	r0, [pc, #124]	; (800727c <getMorseInput+0x8c>)
 80071fe:	f7fd ffd3 	bl	80051a8 <HAL_TIM_Base_Start_IT>

	// Clear the delay array
	for (int i = 0; i < 5; i++) delays[i] = 0;
 8007202:	2300      	movs	r3, #0
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	e007      	b.n	8007218 <getMorseInput+0x28>
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <getMorseInput+0x90>)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2100      	movs	r1, #0
 800720e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3301      	adds	r3, #1
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2b04      	cmp	r3, #4
 800721c:	ddf4      	ble.n	8007208 <getMorseInput+0x18>

	// Ask for up to 5 signals (i < 6 because return is in the next iteration)
	for (int i = 0; i < 6; i++) {
 800721e:	2300      	movs	r3, #0
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	e021      	b.n	8007268 <getMorseInput+0x78>
		// Wait while the button is not pressed
		if (waitForADCPress(i) == 1) {
 8007224:	6838      	ldr	r0, [r7, #0]
 8007226:	f7ff ff81 	bl	800712c <waitForADCPress>
 800722a:	4603      	mov	r3, r0
 800722c:	2b01      	cmp	r3, #1
 800722e:	d103      	bne.n	8007238 <getMorseInput+0x48>
			calcMorseArray();
 8007230:	f7ff ff38 	bl	80070a4 <calcMorseArray>
			return i;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	e01a      	b.n	800726e <getMorseInput+0x7e>
		}
		HAL_Delay(10);
 8007238:	200a      	movs	r0, #10
 800723a:	f7f9 ff69 	bl	8001110 <HAL_Delay>
		start = millis;
 800723e:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <getMorseInput+0x88>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a10      	ldr	r2, [pc, #64]	; (8007284 <getMorseInput+0x94>)
 8007244:	6013      	str	r3, [r2, #0]

		// Wait until the button is released
		waitForADCRelease();
 8007246:	f7ff ffb3 	bl	80071b0 <waitForADCRelease>
		HAL_Delay(10);
 800724a:	200a      	movs	r0, #10
 800724c:	f7f9 ff60 	bl	8001110 <HAL_Delay>
		delays[i] = millis - start;
 8007250:	4b09      	ldr	r3, [pc, #36]	; (8007278 <getMorseInput+0x88>)
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	4b0b      	ldr	r3, [pc, #44]	; (8007284 <getMorseInput+0x94>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	4909      	ldr	r1, [pc, #36]	; (8007280 <getMorseInput+0x90>)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b05      	cmp	r3, #5
 800726c:	ddda      	ble.n	8007224 <getMorseInput+0x34>
	}
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000420 	.word	0x20000420
 800727c:	20000334 	.word	0x20000334
 8007280:	20000428 	.word	0x20000428
 8007284:	20000424 	.word	0x20000424

08007288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b085      	sub	sp, #20
 800728c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	/*
	 * mode 0 for taking input from terminal, outputting Morse code
	 * mode 1 for taking input of array for Morse letter, displaying letter to terminal
	 */
mode = 0;
 800728e:	4b8d      	ldr	r3, [pc, #564]	; (80074c4 <main+0x23c>)
 8007290:	2200      	movs	r2, #0
 8007292:	701a      	strb	r2, [r3, #0]
char ADC = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	70fb      	strb	r3, [r7, #3]


morseInputArray[0] = '\0';
 8007298:	4b8b      	ldr	r3, [pc, #556]	; (80074c8 <main+0x240>)
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
morseInputArray[1] = '\0';
 800729e:	4b8a      	ldr	r3, [pc, #552]	; (80074c8 <main+0x240>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	705a      	strb	r2, [r3, #1]
morseInputArray[2] = '\0';
 80072a4:	4b88      	ldr	r3, [pc, #544]	; (80074c8 <main+0x240>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	709a      	strb	r2, [r3, #2]
morseInputArray[3] = '\0';
 80072aa:	4b87      	ldr	r3, [pc, #540]	; (80074c8 <main+0x240>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	70da      	strb	r2, [r3, #3]
morseInputArraySize = 0;
 80072b0:	4b86      	ldr	r3, [pc, #536]	; (80074cc <main+0x244>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]


notSpace = 1; // 1 is true
 80072b6:	4b86      	ldr	r3, [pc, #536]	; (80074d0 <main+0x248>)
 80072b8:	2201      	movs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072bc:	f7f9 feb4 	bl	8001028 <HAL_Init>

  /* USER CODE BEGIN Init */
  // for scanf
  setvbuf(stdin, NULL, _IONBF, 0);
 80072c0:	4b84      	ldr	r3, [pc, #528]	; (80074d4 <main+0x24c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6858      	ldr	r0, [r3, #4]
 80072c6:	2300      	movs	r3, #0
 80072c8:	2202      	movs	r2, #2
 80072ca:	2100      	movs	r1, #0
 80072cc:	f001 fdce 	bl	8008e6c <setvbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072d0:	f000 f92c 	bl	800752c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072d4:	f000 fb2a 	bl	800792c <MX_GPIO_Init>
  MX_DMA_Init();
 80072d8:	f000 fafe 	bl	80078d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80072dc:	f000 fab0 	bl	8007840 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80072e0:	f000 f9dc 	bl	800769c <MX_DAC1_Init>
  MX_TIM2_Init();
 80072e4:	f000 fa0e 	bl	8007704 <MX_TIM2_Init>
  MX_ADC1_Init();
 80072e8:	f000 f972 	bl	80075d0 <MX_ADC1_Init>
  MX_TIM5_Init();
 80072ec:	f000 fa58 	bl	80077a0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 80072f0:	4879      	ldr	r0, [pc, #484]	; (80074d8 <main+0x250>)
 80072f2:	f7fd ff59 	bl	80051a8 <HAL_TIM_Base_Start_IT>

  /*
   * Initialize beeps
   */
  for (int i = 0; i < beepArraySize; i++) {
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
 80072fa:	e02a      	b.n	8007352 <main+0xca>
	  beepArray[i] = (arm_sin_f32(2*PI*i/beepArraySize)+1)*(1365); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	ee07 3a90 	vmov	s15, r3
 8007302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007306:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80074dc <main+0x254>
 800730a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800730e:	4b74      	ldr	r3, [pc, #464]	; (80074e0 <main+0x258>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800731a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800731e:	eeb0 0a66 	vmov.f32	s0, s13
 8007322:	f000 fe5d 	bl	8007fe0 <arm_sin_f32>
 8007326:	eef0 7a40 	vmov.f32	s15, s0
 800732a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007332:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80074e4 <main+0x25c>
 8007336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800733a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733e:	ee17 3a90 	vmov	r3, s15
 8007342:	b299      	uxth	r1, r3
 8007344:	4a68      	ldr	r2, [pc, #416]	; (80074e8 <main+0x260>)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < beepArraySize; i++) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3301      	adds	r3, #1
 8007350:	607b      	str	r3, [r7, #4]
 8007352:	4b63      	ldr	r3, [pc, #396]	; (80074e0 <main+0x258>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	dbcf      	blt.n	80072fc <main+0x74>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (mode == 0) { // taking input from terminal, outputting Morse code
 800735c:	4b59      	ldr	r3, [pc, #356]	; (80074c4 <main+0x23c>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d123      	bne.n	80073ac <main+0x124>
		  // get character from user
		  printf("Input a character: ");
 8007364:	4861      	ldr	r0, [pc, #388]	; (80074ec <main+0x264>)
 8007366:	f001 fd3b 	bl	8008de0 <iprintf>
		  scanf("%c", &inputChar);
 800736a:	4961      	ldr	r1, [pc, #388]	; (80074f0 <main+0x268>)
 800736c:	4861      	ldr	r0, [pc, #388]	; (80074f4 <main+0x26c>)
 800736e:	f001 fd65 	bl	8008e3c <iscanf>
		  printf("\n\rYou entered: %c \n\r", inputChar); // print character
 8007372:	4b5f      	ldr	r3, [pc, #380]	; (80074f0 <main+0x268>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	485f      	ldr	r0, [pc, #380]	; (80074f8 <main+0x270>)
 800737a:	f001 fd31 	bl	8008de0 <iprintf>
		  //printf("ASCII Character: %d \n\r", inputChar); // print ASCII value

		  // Update, display, and play the Morse letter
		  updateMorseLetter(inputChar);
 800737e:	4b5c      	ldr	r3, [pc, #368]	; (80074f0 <main+0x268>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fb66 	bl	8006a54 <updateMorseLetter>
		  printf("Morse Translation: ");
 8007388:	485c      	ldr	r0, [pc, #368]	; (80074fc <main+0x274>)
 800738a:	f001 fd29 	bl	8008de0 <iprintf>
		  printMorseLetter();
 800738e:	f7ff fd1f 	bl	8006dd0 <printMorseLetter>
		  printf("\n\r");
 8007392:	485b      	ldr	r0, [pc, #364]	; (8007500 <main+0x278>)
 8007394:	f001 fd24 	bl	8008de0 <iprintf>
		  playMorseToSpeaker(morseLetter, morseLetterSize);
 8007398:	4b5a      	ldr	r3, [pc, #360]	; (8007504 <main+0x27c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4619      	mov	r1, r3
 800739e:	485a      	ldr	r0, [pc, #360]	; (8007508 <main+0x280>)
 80073a0:	f7ff fd3e 	bl	8006e20 <playMorseToSpeaker>
		  HAL_Delay(1000);
 80073a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80073a8:	f7f9 feb2 	bl	8001110 <HAL_Delay>

	  }

	  if (mode == 1) { // taking input of array for Morse letter, displaying letter to terminal
 80073ac:	4b45      	ldr	r3, [pc, #276]	; (80074c4 <main+0x23c>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d1d3      	bne.n	800735c <main+0xd4>
		  if (ADC == 0) {
 80073b4:	78fb      	ldrb	r3, [r7, #3]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d14d      	bne.n	8007456 <main+0x1ce>
		  	  // reset input stuff
			  notSpace = 1;
 80073ba:	4b45      	ldr	r3, [pc, #276]	; (80074d0 <main+0x248>)
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
			  morseInputArraySize = 0;
 80073c0:	4b42      	ldr	r3, [pc, #264]	; (80074cc <main+0x244>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
			  morseInputArray[0] = '\0'; morseInputArray[1] = '\0'; morseInputArray[2] = '\0'; morseInputArray[3] = '\0';
 80073c6:	4b40      	ldr	r3, [pc, #256]	; (80074c8 <main+0x240>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
 80073cc:	4b3e      	ldr	r3, [pc, #248]	; (80074c8 <main+0x240>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	705a      	strb	r2, [r3, #1]
 80073d2:	4b3d      	ldr	r3, [pc, #244]	; (80074c8 <main+0x240>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	709a      	strb	r2, [r3, #2]
 80073d8:	4b3b      	ldr	r3, [pc, #236]	; (80074c8 <main+0x240>)
 80073da:	2200      	movs	r2, #0
 80073dc:	70da      	strb	r2, [r3, #3]
			  // get user input until space input
			  printf("\n\rInput Morse (. and - with a space at the end)\n\r");
 80073de:	484b      	ldr	r0, [pc, #300]	; (800750c <main+0x284>)
 80073e0:	f001 fcfe 	bl	8008de0 <iprintf>
			  while (notSpace == 1) {
 80073e4:	e01f      	b.n	8007426 <main+0x19e>
				  scanf("%c", &inputChar);
 80073e6:	4942      	ldr	r1, [pc, #264]	; (80074f0 <main+0x268>)
 80073e8:	4842      	ldr	r0, [pc, #264]	; (80074f4 <main+0x26c>)
 80073ea:	f001 fd27 	bl	8008e3c <iscanf>
				  if (inputChar == 32) {
 80073ee:	4b40      	ldr	r3, [pc, #256]	; (80074f0 <main+0x268>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d106      	bne.n	8007404 <main+0x17c>
					  printf("\n\rSpace Inputed\n\r");
 80073f6:	4846      	ldr	r0, [pc, #280]	; (8007510 <main+0x288>)
 80073f8:	f001 fcf2 	bl	8008de0 <iprintf>
					  notSpace = 0;
 80073fc:	4b34      	ldr	r3, [pc, #208]	; (80074d0 <main+0x248>)
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]
					  break;
 8007402:	e014      	b.n	800742e <main+0x1a6>
				  }
				  printf(" You entered: %c\n\r", inputChar);
 8007404:	4b3a      	ldr	r3, [pc, #232]	; (80074f0 <main+0x268>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	4619      	mov	r1, r3
 800740a:	4842      	ldr	r0, [pc, #264]	; (8007514 <main+0x28c>)
 800740c:	f001 fce8 	bl	8008de0 <iprintf>
				  morseInputArray[morseInputArraySize] = inputChar;
 8007410:	4b2e      	ldr	r3, [pc, #184]	; (80074cc <main+0x244>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a36      	ldr	r2, [pc, #216]	; (80074f0 <main+0x268>)
 8007416:	7811      	ldrb	r1, [r2, #0]
 8007418:	4a2b      	ldr	r2, [pc, #172]	; (80074c8 <main+0x240>)
 800741a:	54d1      	strb	r1, [r2, r3]
				  morseInputArraySize = morseInputArraySize+1;
 800741c:	4b2b      	ldr	r3, [pc, #172]	; (80074cc <main+0x244>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	4a2a      	ldr	r2, [pc, #168]	; (80074cc <main+0x244>)
 8007424:	6013      	str	r3, [r2, #0]
			  while (notSpace == 1) {
 8007426:	4b2a      	ldr	r3, [pc, #168]	; (80074d0 <main+0x248>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d0db      	beq.n	80073e6 <main+0x15e>
			  }
			  // get morse input from ADC
			  letterToPrint = getLetterFromMorse(morseInputArray, morseInputArraySize);
 800742e:	4b27      	ldr	r3, [pc, #156]	; (80074cc <main+0x244>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4619      	mov	r1, r3
 8007434:	4824      	ldr	r0, [pc, #144]	; (80074c8 <main+0x240>)
 8007436:	f7ff fd65 	bl	8006f04 <getLetterFromMorse>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	4b36      	ldr	r3, [pc, #216]	; (8007518 <main+0x290>)
 8007440:	701a      	strb	r2, [r3, #0]
			  printf("Letter from  input: %c \n\r", letterToPrint);
 8007442:	4b35      	ldr	r3, [pc, #212]	; (8007518 <main+0x290>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	4619      	mov	r1, r3
 8007448:	4834      	ldr	r0, [pc, #208]	; (800751c <main+0x294>)
 800744a:	f001 fcc9 	bl	8008de0 <iprintf>
			  HAL_Delay(500);
 800744e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007452:	f7f9 fe5d 	bl	8001110 <HAL_Delay>

		  }
		  if (ADC == 1)  {
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	2b01      	cmp	r3, #1
 800745a:	f47f af7f 	bne.w	800735c <main+0xd4>
			  printf("\n\rInput Morse using the analog stick (wait 2 seconds when done)\n\r");
 800745e:	4830      	ldr	r0, [pc, #192]	; (8007520 <main+0x298>)
 8007460:	f001 fcbe 	bl	8008de0 <iprintf>
			  morseInputArraySize = getMorseInput();
 8007464:	f7ff fec4 	bl	80071f0 <getMorseInput>
 8007468:	4603      	mov	r3, r0
 800746a:	4a18      	ldr	r2, [pc, #96]	; (80074cc <main+0x244>)
 800746c:	6013      	str	r3, [r2, #0]
			  printf("\n\rYou entered: %c%c%c%c%c\n\r", code[0], code[1], code[2], code[3], code[4]);
 800746e:	4b2d      	ldr	r3, [pc, #180]	; (8007524 <main+0x29c>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <main+0x29c>)
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	4618      	mov	r0, r3
 800747a:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <main+0x29c>)
 800747c:	789b      	ldrb	r3, [r3, #2]
 800747e:	461c      	mov	r4, r3
 8007480:	4b28      	ldr	r3, [pc, #160]	; (8007524 <main+0x29c>)
 8007482:	78db      	ldrb	r3, [r3, #3]
 8007484:	461a      	mov	r2, r3
 8007486:	4b27      	ldr	r3, [pc, #156]	; (8007524 <main+0x29c>)
 8007488:	791b      	ldrb	r3, [r3, #4]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	9200      	str	r2, [sp, #0]
 800748e:	4623      	mov	r3, r4
 8007490:	4602      	mov	r2, r0
 8007492:	4825      	ldr	r0, [pc, #148]	; (8007528 <main+0x2a0>)
 8007494:	f001 fca4 	bl	8008de0 <iprintf>

			  // display letter corresponding to input
			  letterToPrint = getLetterFromMorse(code, morseInputArraySize);
 8007498:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <main+0x244>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4619      	mov	r1, r3
 800749e:	4821      	ldr	r0, [pc, #132]	; (8007524 <main+0x29c>)
 80074a0:	f7ff fd30 	bl	8006f04 <getLetterFromMorse>
 80074a4:	4603      	mov	r3, r0
 80074a6:	461a      	mov	r2, r3
 80074a8:	4b1b      	ldr	r3, [pc, #108]	; (8007518 <main+0x290>)
 80074aa:	701a      	strb	r2, [r3, #0]
			  printf("Letter from  input: %c \n\r", letterToPrint);
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <main+0x290>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	4619      	mov	r1, r3
 80074b2:	481a      	ldr	r0, [pc, #104]	; (800751c <main+0x294>)
 80074b4:	f001 fc94 	bl	8008de0 <iprintf>
			  HAL_Delay(500);
 80074b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80074bc:	f7f9 fe28 	bl	8001110 <HAL_Delay>
	  if (mode == 0) { // taking input from terminal, outputting Morse code
 80074c0:	e74c      	b.n	800735c <main+0xd4>
 80074c2:	bf00      	nop
 80074c4:	2000041c 	.word	0x2000041c
 80074c8:	20000008 	.word	0x20000008
 80074cc:	2000000c 	.word	0x2000000c
 80074d0:	2000049d 	.word	0x2000049d
 80074d4:	20000018 	.word	0x20000018
 80074d8:	200002e8 	.word	0x200002e8
 80074dc:	40c90fdb 	.word	0x40c90fdb
 80074e0:	20000010 	.word	0x20000010
 80074e4:	44aaa000 	.word	0x44aaa000
 80074e8:	20000444 	.word	0x20000444
 80074ec:	0800d854 	.word	0x0800d854
 80074f0:	20000410 	.word	0x20000410
 80074f4:	0800d868 	.word	0x0800d868
 80074f8:	0800d86c 	.word	0x0800d86c
 80074fc:	0800d884 	.word	0x0800d884
 8007500:	0800d850 	.word	0x0800d850
 8007504:	20000414 	.word	0x20000414
 8007508:	20000418 	.word	0x20000418
 800750c:	0800d898 	.word	0x0800d898
 8007510:	0800d8cc 	.word	0x0800d8cc
 8007514:	0800d8e0 	.word	0x0800d8e0
 8007518:	2000049c 	.word	0x2000049c
 800751c:	0800d8f4 	.word	0x0800d8f4
 8007520:	0800d910 	.word	0x0800d910
 8007524:	2000043c 	.word	0x2000043c
 8007528:	0800d954 	.word	0x0800d954

0800752c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b096      	sub	sp, #88	; 0x58
 8007530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007532:	f107 0314 	add.w	r3, r7, #20
 8007536:	2244      	movs	r2, #68	; 0x44
 8007538:	2100      	movs	r1, #0
 800753a:	4618      	mov	r0, r3
 800753c:	f000 fdce 	bl	80080dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007540:	463b      	mov	r3, r7
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	605a      	str	r2, [r3, #4]
 8007548:	609a      	str	r2, [r3, #8]
 800754a:	60da      	str	r2, [r3, #12]
 800754c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800754e:	2000      	movs	r0, #0
 8007550:	f7fc f93e 	bl	80037d0 <HAL_PWREx_ControlVoltageScaling>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800755a:	f000 fa61 	bl	8007a20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800755e:	2310      	movs	r3, #16
 8007560:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007562:	2301      	movs	r3, #1
 8007564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800756a:	2360      	movs	r3, #96	; 0x60
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800756e:	2302      	movs	r3, #2
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007572:	2301      	movs	r3, #1
 8007574:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007576:	2301      	movs	r3, #1
 8007578:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800757a:	233c      	movs	r3, #60	; 0x3c
 800757c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800757e:	2302      	movs	r3, #2
 8007580:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007582:	2302      	movs	r3, #2
 8007584:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007586:	2302      	movs	r3, #2
 8007588:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	4618      	mov	r0, r3
 8007590:	f7fc f9c2 	bl	8003918 <HAL_RCC_OscConfig>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800759a:	f000 fa41 	bl	8007a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800759e:	230f      	movs	r3, #15
 80075a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075a2:	2303      	movs	r3, #3
 80075a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80075ae:	2300      	movs	r3, #0
 80075b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80075b2:	463b      	mov	r3, r7
 80075b4:	2105      	movs	r1, #5
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fc fdc8 	bl	800414c <HAL_RCC_ClockConfig>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80075c2:	f000 fa2d 	bl	8007a20 <Error_Handler>
  }
}
 80075c6:	bf00      	nop
 80075c8:	3758      	adds	r7, #88	; 0x58
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80075d6:	463b      	mov	r3, r7
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	605a      	str	r2, [r3, #4]
 80075de:	609a      	str	r2, [r3, #8]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	611a      	str	r2, [r3, #16]
 80075e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80075e6:	4b2a      	ldr	r3, [pc, #168]	; (8007690 <MX_ADC1_Init+0xc0>)
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <MX_ADC1_Init+0xc4>)
 80075ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80075ec:	4b28      	ldr	r3, [pc, #160]	; (8007690 <MX_ADC1_Init+0xc0>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80075f2:	4b27      	ldr	r3, [pc, #156]	; (8007690 <MX_ADC1_Init+0xc0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80075f8:	4b25      	ldr	r3, [pc, #148]	; (8007690 <MX_ADC1_Init+0xc0>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007600:	2200      	movs	r2, #0
 8007602:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007604:	4b22      	ldr	r3, [pc, #136]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007606:	2204      	movs	r2, #4
 8007608:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800760a:	4b21      	ldr	r3, [pc, #132]	; (8007690 <MX_ADC1_Init+0xc0>)
 800760c:	2200      	movs	r2, #0
 800760e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007610:	4b1f      	ldr	r3, [pc, #124]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007612:	2201      	movs	r2, #1
 8007614:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007616:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007618:	2201      	movs	r2, #1
 800761a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800761c:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <MX_ADC1_Init+0xc0>)
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007624:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007626:	2200      	movs	r2, #0
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800762a:	4b19      	ldr	r3, [pc, #100]	; (8007690 <MX_ADC1_Init+0xc0>)
 800762c:	2200      	movs	r2, #0
 800762e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007630:	4b17      	ldr	r3, [pc, #92]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007632:	2200      	movs	r2, #0
 8007634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007638:	4b15      	ldr	r3, [pc, #84]	; (8007690 <MX_ADC1_Init+0xc0>)
 800763a:	2200      	movs	r2, #0
 800763c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800763e:	4b14      	ldr	r3, [pc, #80]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8007646:	4b12      	ldr	r3, [pc, #72]	; (8007690 <MX_ADC1_Init+0xc0>)
 8007648:	2204      	movs	r2, #4
 800764a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800764c:	4810      	ldr	r0, [pc, #64]	; (8007690 <MX_ADC1_Init+0xc0>)
 800764e:	f7f9 ffab 	bl	80015a8 <HAL_ADC_Init>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8007658:	f000 f9e2 	bl	8007a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800765c:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <MX_ADC1_Init+0xc8>)
 800765e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007660:	2306      	movs	r3, #6
 8007662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007664:	2300      	movs	r3, #0
 8007666:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007668:	237f      	movs	r3, #127	; 0x7f
 800766a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800766c:	2304      	movs	r3, #4
 800766e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007674:	463b      	mov	r3, r7
 8007676:	4619      	mov	r1, r3
 8007678:	4805      	ldr	r0, [pc, #20]	; (8007690 <MX_ADC1_Init+0xc0>)
 800767a:	f7fa fa13 	bl	8001aa4 <HAL_ADC_ConfigChannel>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8007684:	f000 f9cc 	bl	8007a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007688:	bf00      	nop
 800768a:	3718      	adds	r7, #24
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	2000020c 	.word	0x2000020c
 8007694:	50040000 	.word	0x50040000
 8007698:	04300002 	.word	0x04300002

0800769c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80076a2:	463b      	mov	r3, r7
 80076a4:	2228      	movs	r2, #40	; 0x28
 80076a6:	2100      	movs	r1, #0
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fd17 	bl	80080dc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80076ae:	4b13      	ldr	r3, [pc, #76]	; (80076fc <MX_DAC1_Init+0x60>)
 80076b0:	4a13      	ldr	r2, [pc, #76]	; (8007700 <MX_DAC1_Init+0x64>)
 80076b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80076b4:	4811      	ldr	r0, [pc, #68]	; (80076fc <MX_DAC1_Init+0x60>)
 80076b6:	f7fb f8a4 	bl	8002802 <HAL_DAC_Init>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d001      	beq.n	80076c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80076c0:	f000 f9ae 	bl	8007a20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80076c8:	230a      	movs	r3, #10
 80076ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80076cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80076de:	463b      	mov	r3, r7
 80076e0:	2200      	movs	r2, #0
 80076e2:	4619      	mov	r1, r3
 80076e4:	4805      	ldr	r0, [pc, #20]	; (80076fc <MX_DAC1_Init+0x60>)
 80076e6:	f7fb f9df 	bl	8002aa8 <HAL_DAC_ConfigChannel>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80076f0:	f000 f996 	bl	8007a20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80076f4:	bf00      	nop
 80076f6:	3728      	adds	r7, #40	; 0x28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000274 	.word	0x20000274
 8007700:	40007400 	.word	0x40007400

08007704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	2200      	movs	r2, #0
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	605a      	str	r2, [r3, #4]
 8007714:	609a      	str	r2, [r3, #8]
 8007716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007718:	1d3b      	adds	r3, r7, #4
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	605a      	str	r2, [r3, #4]
 8007720:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007722:	4b1e      	ldr	r3, [pc, #120]	; (800779c <MX_TIM2_Init+0x98>)
 8007724:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007728:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800772a:	4b1c      	ldr	r3, [pc, #112]	; (800779c <MX_TIM2_Init+0x98>)
 800772c:	2200      	movs	r2, #0
 800772e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007730:	4b1a      	ldr	r3, [pc, #104]	; (800779c <MX_TIM2_Init+0x98>)
 8007732:	2200      	movs	r2, #0
 8007734:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8007736:	4b19      	ldr	r3, [pc, #100]	; (800779c <MX_TIM2_Init+0x98>)
 8007738:	f640 22a1 	movw	r2, #2721	; 0xaa1
 800773c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800773e:	4b17      	ldr	r3, [pc, #92]	; (800779c <MX_TIM2_Init+0x98>)
 8007740:	2200      	movs	r2, #0
 8007742:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007744:	4b15      	ldr	r3, [pc, #84]	; (800779c <MX_TIM2_Init+0x98>)
 8007746:	2200      	movs	r2, #0
 8007748:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800774a:	4814      	ldr	r0, [pc, #80]	; (800779c <MX_TIM2_Init+0x98>)
 800774c:	f7fd fcd4 	bl	80050f8 <HAL_TIM_Base_Init>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007756:	f000 f963 	bl	8007a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800775a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800775e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007760:	f107 0310 	add.w	r3, r7, #16
 8007764:	4619      	mov	r1, r3
 8007766:	480d      	ldr	r0, [pc, #52]	; (800779c <MX_TIM2_Init+0x98>)
 8007768:	f7fd fead 	bl	80054c6 <HAL_TIM_ConfigClockSource>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007772:	f000 f955 	bl	8007a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007776:	2320      	movs	r3, #32
 8007778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800777e:	1d3b      	adds	r3, r7, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4806      	ldr	r0, [pc, #24]	; (800779c <MX_TIM2_Init+0x98>)
 8007784:	f7fe f8c4 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800778e:	f000 f947 	bl	8007a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007792:	bf00      	nop
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200002e8 	.word	0x200002e8

080077a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077a6:	f107 0310 	add.w	r3, r7, #16
 80077aa:	2200      	movs	r2, #0
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	605a      	str	r2, [r3, #4]
 80077b0:	609a      	str	r2, [r3, #8]
 80077b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077b4:	1d3b      	adds	r3, r7, #4
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
 80077ba:	605a      	str	r2, [r3, #4]
 80077bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80077be:	4b1d      	ldr	r3, [pc, #116]	; (8007834 <MX_TIM5_Init+0x94>)
 80077c0:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <MX_TIM5_Init+0x98>)
 80077c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80077c4:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <MX_TIM5_Init+0x94>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077ca:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <MX_TIM5_Init+0x94>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 120000;
 80077d0:	4b18      	ldr	r3, [pc, #96]	; (8007834 <MX_TIM5_Init+0x94>)
 80077d2:	4a1a      	ldr	r2, [pc, #104]	; (800783c <MX_TIM5_Init+0x9c>)
 80077d4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077d6:	4b17      	ldr	r3, [pc, #92]	; (8007834 <MX_TIM5_Init+0x94>)
 80077d8:	2200      	movs	r2, #0
 80077da:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077dc:	4b15      	ldr	r3, [pc, #84]	; (8007834 <MX_TIM5_Init+0x94>)
 80077de:	2200      	movs	r2, #0
 80077e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80077e2:	4814      	ldr	r0, [pc, #80]	; (8007834 <MX_TIM5_Init+0x94>)
 80077e4:	f7fd fc88 	bl	80050f8 <HAL_TIM_Base_Init>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80077ee:	f000 f917 	bl	8007a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80077f8:	f107 0310 	add.w	r3, r7, #16
 80077fc:	4619      	mov	r1, r3
 80077fe:	480d      	ldr	r0, [pc, #52]	; (8007834 <MX_TIM5_Init+0x94>)
 8007800:	f7fd fe61 	bl	80054c6 <HAL_TIM_ConfigClockSource>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800780a:	f000 f909 	bl	8007a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800780e:	2300      	movs	r3, #0
 8007810:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007816:	1d3b      	adds	r3, r7, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4806      	ldr	r0, [pc, #24]	; (8007834 <MX_TIM5_Init+0x94>)
 800781c:	f7fe f878 	bl	8005910 <HAL_TIMEx_MasterConfigSynchronization>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8007826:	f000 f8fb 	bl	8007a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800782a:	bf00      	nop
 800782c:	3720      	adds	r7, #32
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000334 	.word	0x20000334
 8007838:	40000c00 	.word	0x40000c00
 800783c:	0001d4c0 	.word	0x0001d4c0

08007840 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007844:	4b22      	ldr	r3, [pc, #136]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007846:	4a23      	ldr	r2, [pc, #140]	; (80078d4 <MX_USART1_UART_Init+0x94>)
 8007848:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800784a:	4b21      	ldr	r3, [pc, #132]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 800784c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007850:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007852:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007854:	2200      	movs	r2, #0
 8007856:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007858:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 800785a:	2200      	movs	r2, #0
 800785c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800785e:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007860:	2200      	movs	r2, #0
 8007862:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007864:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007866:	220c      	movs	r2, #12
 8007868:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800786a:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 800786c:	2200      	movs	r2, #0
 800786e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007870:	4b17      	ldr	r3, [pc, #92]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007872:	2200      	movs	r2, #0
 8007874:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007876:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007878:	2200      	movs	r2, #0
 800787a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800787c:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 800787e:	2200      	movs	r2, #0
 8007880:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007882:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 8007884:	2200      	movs	r2, #0
 8007886:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007888:	4811      	ldr	r0, [pc, #68]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 800788a:	f7fe f8e7 	bl	8005a5c <HAL_UART_Init>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007894:	f000 f8c4 	bl	8007a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007898:	2100      	movs	r1, #0
 800789a:	480d      	ldr	r0, [pc, #52]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 800789c:	f7fe ff84 	bl	80067a8 <HAL_UARTEx_SetTxFifoThreshold>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80078a6:	f000 f8bb 	bl	8007a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80078aa:	2100      	movs	r1, #0
 80078ac:	4808      	ldr	r0, [pc, #32]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 80078ae:	f7fe ffb9 	bl	8006824 <HAL_UARTEx_SetRxFifoThreshold>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d001      	beq.n	80078bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80078b8:	f000 f8b2 	bl	8007a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80078bc:	4804      	ldr	r0, [pc, #16]	; (80078d0 <MX_USART1_UART_Init+0x90>)
 80078be:	f7fe ff3a 	bl	8006736 <HAL_UARTEx_DisableFifoMode>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80078c8:	f000 f8aa 	bl	8007a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80078cc:	bf00      	nop
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000380 	.word	0x20000380
 80078d4:	40013800 	.word	0x40013800

080078d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80078de:	4b12      	ldr	r3, [pc, #72]	; (8007928 <MX_DMA_Init+0x50>)
 80078e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e2:	4a11      	ldr	r2, [pc, #68]	; (8007928 <MX_DMA_Init+0x50>)
 80078e4:	f043 0304 	orr.w	r3, r3, #4
 80078e8:	6493      	str	r3, [r2, #72]	; 0x48
 80078ea:	4b0f      	ldr	r3, [pc, #60]	; (8007928 <MX_DMA_Init+0x50>)
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	607b      	str	r3, [r7, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <MX_DMA_Init+0x50>)
 80078f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078fa:	4a0b      	ldr	r2, [pc, #44]	; (8007928 <MX_DMA_Init+0x50>)
 80078fc:	f043 0301 	orr.w	r3, r3, #1
 8007900:	6493      	str	r3, [r2, #72]	; 0x48
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <MX_DMA_Init+0x50>)
 8007904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	603b      	str	r3, [r7, #0]
 800790c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	200b      	movs	r0, #11
 8007914:	f7fa ff3f 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007918:	200b      	movs	r0, #11
 800791a:	f7fa ff58 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40021000 	.word	0x40021000

0800792c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007932:	f107 030c 	add.w	r3, r7, #12
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	605a      	str	r2, [r3, #4]
 800793c:	609a      	str	r2, [r3, #8]
 800793e:	60da      	str	r2, [r3, #12]
 8007940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007942:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007946:	4a33      	ldr	r2, [pc, #204]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007948:	f043 0304 	orr.w	r3, r3, #4
 800794c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800794e:	4b31      	ldr	r3, [pc, #196]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	60bb      	str	r3, [r7, #8]
 8007958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800795a:	4b2e      	ldr	r3, [pc, #184]	; (8007a14 <MX_GPIO_Init+0xe8>)
 800795c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795e:	4a2d      	ldr	r2, [pc, #180]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007966:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	607b      	str	r3, [r7, #4]
 8007970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007972:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007976:	4a27      	ldr	r2, [pc, #156]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007978:	f043 0302 	orr.w	r3, r3, #2
 800797c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800797e:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <MX_GPIO_Init+0xe8>)
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 800798a:	2200      	movs	r2, #0
 800798c:	2120      	movs	r1, #32
 800798e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007992:	f7fb feb3 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8007996:	2200      	movs	r2, #0
 8007998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800799c:	481e      	ldr	r0, [pc, #120]	; (8007a18 <MX_GPIO_Init+0xec>)
 800799e:	f7fb fead 	bl	80036fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 80079a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80079a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80079ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 80079b2:	f107 030c 	add.w	r3, r7, #12
 80079b6:	4619      	mov	r1, r3
 80079b8:	4818      	ldr	r0, [pc, #96]	; (8007a1c <MX_GPIO_Init+0xf0>)
 80079ba:	f7fb fd0d 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 80079be:	2320      	movs	r3, #32
 80079c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079c2:	2301      	movs	r3, #1
 80079c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 80079ce:	f107 030c 	add.w	r3, r7, #12
 80079d2:	4619      	mov	r1, r3
 80079d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079d8:	f7fb fcfe 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 80079dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079e2:	2301      	movs	r3, #1
 80079e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 80079ee:	f107 030c 	add.w	r3, r7, #12
 80079f2:	4619      	mov	r1, r3
 80079f4:	4808      	ldr	r0, [pc, #32]	; (8007a18 <MX_GPIO_Init+0xec>)
 80079f6:	f7fb fcef 	bl	80033d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80079fa:	2200      	movs	r2, #0
 80079fc:	2100      	movs	r1, #0
 80079fe:	2028      	movs	r0, #40	; 0x28
 8007a00:	f7fa fec9 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007a04:	2028      	movs	r0, #40	; 0x28
 8007a06:	f7fa fee2 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 8007a0a:	bf00      	nop
 8007a0c:	3720      	adds	r7, #32
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	40021000 	.word	0x40021000
 8007a18:	48000400 	.word	0x48000400
 8007a1c:	48000800 	.word	0x48000800

08007a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007a24:	b672      	cpsid	i
}
 8007a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007a28:	e7fe      	b.n	8007a28 <Error_Handler+0x8>
	...

08007a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a32:	4b0f      	ldr	r3, [pc, #60]	; (8007a70 <HAL_MspInit+0x44>)
 8007a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a36:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <HAL_MspInit+0x44>)
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8007a3e:	4b0c      	ldr	r3, [pc, #48]	; (8007a70 <HAL_MspInit+0x44>)
 8007a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <HAL_MspInit+0x44>)
 8007a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4e:	4a08      	ldr	r2, [pc, #32]	; (8007a70 <HAL_MspInit+0x44>)
 8007a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a54:	6593      	str	r3, [r2, #88]	; 0x58
 8007a56:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <HAL_MspInit+0x44>)
 8007a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	40021000 	.word	0x40021000

08007a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b0ae      	sub	sp, #184	; 0xb8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	605a      	str	r2, [r3, #4]
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	60da      	str	r2, [r3, #12]
 8007a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007a8c:	f107 0310 	add.w	r3, r7, #16
 8007a90:	2294      	movs	r2, #148	; 0x94
 8007a92:	2100      	movs	r1, #0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 fb21 	bl	80080dc <memset>
  if(hadc->Instance==ADC1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a27      	ldr	r2, [pc, #156]	; (8007b3c <HAL_ADC_MspInit+0xc8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d146      	bne.n	8007b32 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007aa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007aa8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8007aaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8007aba:	2318      	movs	r3, #24
 8007abc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fc fdf7 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8007ae0:	f7ff ff9e 	bl	8007a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8007ae4:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <HAL_ADC_MspInit+0xcc>)
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ae8:	4a15      	ldr	r2, [pc, #84]	; (8007b40 <HAL_ADC_MspInit+0xcc>)
 8007aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007af0:	4b13      	ldr	r3, [pc, #76]	; (8007b40 <HAL_ADC_MspInit+0xcc>)
 8007af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afc:	4b10      	ldr	r3, [pc, #64]	; (8007b40 <HAL_ADC_MspInit+0xcc>)
 8007afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b00:	4a0f      	ldr	r2, [pc, #60]	; (8007b40 <HAL_ADC_MspInit+0xcc>)
 8007b02:	f043 0304 	orr.w	r3, r3, #4
 8007b06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b08:	4b0d      	ldr	r3, [pc, #52]	; (8007b40 <HAL_ADC_MspInit+0xcc>)
 8007b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	60bb      	str	r3, [r7, #8]
 8007b12:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007b14:	2301      	movs	r3, #1
 8007b16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007b1a:	230b      	movs	r3, #11
 8007b1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b20:	2300      	movs	r3, #0
 8007b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b26:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4805      	ldr	r0, [pc, #20]	; (8007b44 <HAL_ADC_MspInit+0xd0>)
 8007b2e:	f7fb fc53 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007b32:	bf00      	nop
 8007b34:	37b8      	adds	r7, #184	; 0xb8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	50040000 	.word	0x50040000
 8007b40:	40021000 	.word	0x40021000
 8007b44:	48000800 	.word	0x48000800

08007b48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08a      	sub	sp, #40	; 0x28
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b50:	f107 0314 	add.w	r3, r7, #20
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	609a      	str	r2, [r3, #8]
 8007b5c:	60da      	str	r2, [r3, #12]
 8007b5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <HAL_DAC_MspInit+0xcc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d14f      	bne.n	8007c0a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007b6a:	4b2b      	ldr	r3, [pc, #172]	; (8007c18 <HAL_DAC_MspInit+0xd0>)
 8007b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b6e:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <HAL_DAC_MspInit+0xd0>)
 8007b70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b74:	6593      	str	r3, [r2, #88]	; 0x58
 8007b76:	4b28      	ldr	r3, [pc, #160]	; (8007c18 <HAL_DAC_MspInit+0xd0>)
 8007b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b7e:	613b      	str	r3, [r7, #16]
 8007b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b82:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <HAL_DAC_MspInit+0xd0>)
 8007b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b86:	4a24      	ldr	r2, [pc, #144]	; (8007c18 <HAL_DAC_MspInit+0xd0>)
 8007b88:	f043 0301 	orr.w	r3, r3, #1
 8007b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b8e:	4b22      	ldr	r3, [pc, #136]	; (8007c18 <HAL_DAC_MspInit+0xd0>)
 8007b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007b9a:	2310      	movs	r3, #16
 8007b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ba6:	f107 0314 	add.w	r3, r7, #20
 8007baa:	4619      	mov	r1, r3
 8007bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bb0:	f7fb fc12 	bl	80033d8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bb6:	4a1a      	ldr	r2, [pc, #104]	; (8007c20 <HAL_DAC_MspInit+0xd8>)
 8007bb8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007bba:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bbc:	2206      	movs	r2, #6
 8007bbe:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007bc0:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007bcc:	4b13      	ldr	r3, [pc, #76]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bce:	2280      	movs	r2, #128	; 0x80
 8007bd0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bd8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007bda:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007be0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007be2:	4b0e      	ldr	r3, [pc, #56]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007be4:	2220      	movs	r2, #32
 8007be6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007be8:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007bee:	480b      	ldr	r0, [pc, #44]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007bf0:	f7fb f924 	bl	8002e3c <HAL_DMA_Init>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007bfa:	f7ff ff11 	bl	8007a20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a06      	ldr	r2, [pc, #24]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007c02:	609a      	str	r2, [r3, #8]
 8007c04:	4a05      	ldr	r2, [pc, #20]	; (8007c1c <HAL_DAC_MspInit+0xd4>)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007c0a:	bf00      	nop
 8007c0c:	3728      	adds	r7, #40	; 0x28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40007400 	.word	0x40007400
 8007c18:	40021000 	.word	0x40021000
 8007c1c:	20000288 	.word	0x20000288
 8007c20:	40020008 	.word	0x40020008

08007c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c34:	d10c      	bne.n	8007c50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c36:	4b15      	ldr	r3, [pc, #84]	; (8007c8c <HAL_TIM_Base_MspInit+0x68>)
 8007c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c3a:	4a14      	ldr	r2, [pc, #80]	; (8007c8c <HAL_TIM_Base_MspInit+0x68>)
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	6593      	str	r3, [r2, #88]	; 0x58
 8007c42:	4b12      	ldr	r3, [pc, #72]	; (8007c8c <HAL_TIM_Base_MspInit+0x68>)
 8007c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8007c4e:	e018      	b.n	8007c82 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <HAL_TIM_Base_MspInit+0x6c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d113      	bne.n	8007c82 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007c5a:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <HAL_TIM_Base_MspInit+0x68>)
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c5e:	4a0b      	ldr	r2, [pc, #44]	; (8007c8c <HAL_TIM_Base_MspInit+0x68>)
 8007c60:	f043 0308 	orr.w	r3, r3, #8
 8007c64:	6593      	str	r3, [r2, #88]	; 0x58
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <HAL_TIM_Base_MspInit+0x68>)
 8007c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6a:	f003 0308 	and.w	r3, r3, #8
 8007c6e:	60bb      	str	r3, [r7, #8]
 8007c70:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8007c72:	2200      	movs	r2, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	2032      	movs	r0, #50	; 0x32
 8007c78:	f7fa fd8d 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007c7c:	2032      	movs	r0, #50	; 0x32
 8007c7e:	f7fa fda6 	bl	80027ce <HAL_NVIC_EnableIRQ>
}
 8007c82:	bf00      	nop
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40021000 	.word	0x40021000
 8007c90:	40000c00 	.word	0x40000c00

08007c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b0ae      	sub	sp, #184	; 0xb8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007cac:	f107 0310 	add.w	r3, r7, #16
 8007cb0:	2294      	movs	r2, #148	; 0x94
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fa11 	bl	80080dc <memset>
  if(huart->Instance==USART1)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a21      	ldr	r2, [pc, #132]	; (8007d44 <HAL_UART_MspInit+0xb0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d13a      	bne.n	8007d3a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ccc:	f107 0310 	add.w	r3, r7, #16
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fc fcf9 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d001      	beq.n	8007ce0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8007cdc:	f7ff fea0 	bl	8007a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <HAL_UART_MspInit+0xb4>)
 8007ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce4:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <HAL_UART_MspInit+0xb4>)
 8007ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cea:	6613      	str	r3, [r2, #96]	; 0x60
 8007cec:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <HAL_UART_MspInit+0xb4>)
 8007cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf4:	60fb      	str	r3, [r7, #12]
 8007cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <HAL_UART_MspInit+0xb4>)
 8007cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfc:	4a12      	ldr	r2, [pc, #72]	; (8007d48 <HAL_UART_MspInit+0xb4>)
 8007cfe:	f043 0302 	orr.w	r3, r3, #2
 8007d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d04:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <HAL_UART_MspInit+0xb4>)
 8007d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007d10:	23c0      	movs	r3, #192	; 0xc0
 8007d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d16:	2302      	movs	r3, #2
 8007d18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d22:	2303      	movs	r3, #3
 8007d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007d28:	2307      	movs	r3, #7
 8007d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007d32:	4619      	mov	r1, r3
 8007d34:	4805      	ldr	r0, [pc, #20]	; (8007d4c <HAL_UART_MspInit+0xb8>)
 8007d36:	f7fb fb4f 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007d3a:	bf00      	nop
 8007d3c:	37b8      	adds	r7, #184	; 0xb8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40013800 	.word	0x40013800
 8007d48:	40021000 	.word	0x40021000
 8007d4c:	48000400 	.word	0x48000400

08007d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007d54:	e7fe      	b.n	8007d54 <NMI_Handler+0x4>

08007d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007d56:	b480      	push	{r7}
 8007d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007d5a:	e7fe      	b.n	8007d5a <HardFault_Handler+0x4>

08007d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007d60:	e7fe      	b.n	8007d60 <MemManage_Handler+0x4>

08007d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007d62:	b480      	push	{r7}
 8007d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007d66:	e7fe      	b.n	8007d66 <BusFault_Handler+0x4>

08007d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007d6c:	e7fe      	b.n	8007d6c <UsageFault_Handler+0x4>

08007d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007d72:	bf00      	nop
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007d8e:	bf00      	nop
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007d9c:	f7f9 f998 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007da0:	bf00      	nop
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007da8:	4802      	ldr	r0, [pc, #8]	; (8007db4 <DMA1_Channel1_IRQHandler+0x10>)
 8007daa:	f7fb f9c6 	bl	800313a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000288 	.word	0x20000288

08007db8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 8007dbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007dc0:	f7fb fcce 	bl	8003760 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007dc4:	bf00      	nop
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007dcc:	4802      	ldr	r0, [pc, #8]	; (8007dd8 <TIM5_IRQHandler+0x10>)
 8007dce:	f7fd fa5b 	bl	8005288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007dd2:	bf00      	nop
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000334 	.word	0x20000334

08007ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
  return 1;
 8007de0:	2301      	movs	r3, #1
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <_kill>:

int _kill(int pid, int sig)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007df6:	f000 f939 	bl	800806c <__errno>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2216      	movs	r2, #22
 8007dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8007e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <_exit>:

void _exit (int status)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff ffe7 	bl	8007dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8007e1e:	e7fe      	b.n	8007e1e <_exit+0x12>

08007e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e00a      	b.n	8007e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007e32:	f7fe fd95 	bl	8006960 <__io_getchar>
 8007e36:	4601      	mov	r1, r0
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	60ba      	str	r2, [r7, #8]
 8007e3e:	b2ca      	uxtb	r2, r1
 8007e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	3301      	adds	r3, #1
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	dbf0      	blt.n	8007e32 <_read+0x12>
  }

  return len;
 8007e50:	687b      	ldr	r3, [r7, #4]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b086      	sub	sp, #24
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	e009      	b.n	8007e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	1c5a      	adds	r2, r3, #1
 8007e70:	60ba      	str	r2, [r7, #8]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fe fd61 	bl	800693c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	dbf1      	blt.n	8007e6c <_write+0x12>
  }
  return len;
 8007e88:	687b      	ldr	r3, [r7, #4]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <_close>:

int _close(int file)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007eba:	605a      	str	r2, [r3, #4]
  return 0;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <_isatty>:

int _isatty(int file)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007ed2:	2301      	movs	r3, #1
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f04:	4a14      	ldr	r2, [pc, #80]	; (8007f58 <_sbrk+0x5c>)
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <_sbrk+0x60>)
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f10:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <_sbrk+0x64>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d102      	bne.n	8007f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <_sbrk+0x64>)
 8007f1a:	4a12      	ldr	r2, [pc, #72]	; (8007f64 <_sbrk+0x68>)
 8007f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <_sbrk+0x64>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4413      	add	r3, r2
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d207      	bcs.n	8007f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f2c:	f000 f89e 	bl	800806c <__errno>
 8007f30:	4603      	mov	r3, r0
 8007f32:	220c      	movs	r2, #12
 8007f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f3a:	e009      	b.n	8007f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <_sbrk+0x64>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f42:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <_sbrk+0x64>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	4a05      	ldr	r2, [pc, #20]	; (8007f60 <_sbrk+0x64>)
 8007f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200a0000 	.word	0x200a0000
 8007f5c:	00000400 	.word	0x00000400
 8007f60:	200004a0 	.word	0x200004a0
 8007f64:	200004b8 	.word	0x200004b8

08007f68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <SystemInit+0x20>)
 8007f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f72:	4a05      	ldr	r2, [pc, #20]	; (8007f88 <SystemInit+0x20>)
 8007f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8007f7c:	bf00      	nop
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	e000ed00 	.word	0xe000ed00

08007f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007f90:	f7ff ffea 	bl	8007f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007f94:	480c      	ldr	r0, [pc, #48]	; (8007fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007f96:	490d      	ldr	r1, [pc, #52]	; (8007fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007f98:	4a0d      	ldr	r2, [pc, #52]	; (8007fd0 <LoopForever+0xe>)
  movs r3, #0
 8007f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f9c:	e002      	b.n	8007fa4 <LoopCopyDataInit>

08007f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007fa2:	3304      	adds	r3, #4

08007fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007fa8:	d3f9      	bcc.n	8007f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007faa:	4a0a      	ldr	r2, [pc, #40]	; (8007fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007fac:	4c0a      	ldr	r4, [pc, #40]	; (8007fd8 <LoopForever+0x16>)
  movs r3, #0
 8007fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007fb0:	e001      	b.n	8007fb6 <LoopFillZerobss>

08007fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007fb4:	3204      	adds	r2, #4

08007fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007fb8:	d3fb      	bcc.n	8007fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007fba:	f000 f85d 	bl	8008078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007fbe:	f7ff f963 	bl	8007288 <main>

08007fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8007fc2:	e7fe      	b.n	8007fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007fc4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8007fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007fcc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8007fd0:	0800e6c4 	.word	0x0800e6c4
  ldr r2, =_sbss
 8007fd4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8007fd8:	200004b4 	.word	0x200004b4

08007fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007fdc:	e7fe      	b.n	8007fdc <ADC1_IRQHandler>
	...

08007fe0 <arm_sin_f32>:
 8007fe0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008060 <arm_sin_f32+0x80>
 8007fe4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007fe8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007ff4:	d504      	bpl.n	8008000 <arm_sin_f32+0x20>
 8007ff6:	ee17 3a90 	vmov	r3, s15
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008004:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008064 <arm_sin_f32+0x84>
 8008008:	ee30 0a67 	vsub.f32	s0, s0, s15
 800800c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008010:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008014:	ee17 3a90 	vmov	r3, s15
 8008018:	b29b      	uxth	r3, r3
 800801a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800801e:	d21a      	bcs.n	8008056 <arm_sin_f32+0x76>
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008028:	1c59      	adds	r1, r3, #1
 800802a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800802e:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <arm_sin_f32+0x88>)
 8008030:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008038:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800803c:	ed93 7a00 	vldr	s14, [r3]
 8008040:	edd2 6a00 	vldr	s13, [r2]
 8008044:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008048:	ee20 0a26 	vmul.f32	s0, s0, s13
 800804c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008050:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008054:	4770      	bx	lr
 8008056:	ee30 0a47 	vsub.f32	s0, s0, s14
 800805a:	2101      	movs	r1, #1
 800805c:	2300      	movs	r3, #0
 800805e:	e7e6      	b.n	800802e <arm_sin_f32+0x4e>
 8008060:	3e22f983 	.word	0x3e22f983
 8008064:	44000000 	.word	0x44000000
 8008068:	0800d9ec 	.word	0x0800d9ec

0800806c <__errno>:
 800806c:	4b01      	ldr	r3, [pc, #4]	; (8008074 <__errno+0x8>)
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000018 	.word	0x20000018

08008078 <__libc_init_array>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4d0d      	ldr	r5, [pc, #52]	; (80080b0 <__libc_init_array+0x38>)
 800807c:	4c0d      	ldr	r4, [pc, #52]	; (80080b4 <__libc_init_array+0x3c>)
 800807e:	1b64      	subs	r4, r4, r5
 8008080:	10a4      	asrs	r4, r4, #2
 8008082:	2600      	movs	r6, #0
 8008084:	42a6      	cmp	r6, r4
 8008086:	d109      	bne.n	800809c <__libc_init_array+0x24>
 8008088:	4d0b      	ldr	r5, [pc, #44]	; (80080b8 <__libc_init_array+0x40>)
 800808a:	4c0c      	ldr	r4, [pc, #48]	; (80080bc <__libc_init_array+0x44>)
 800808c:	f005 fb46 	bl	800d71c <_init>
 8008090:	1b64      	subs	r4, r4, r5
 8008092:	10a4      	asrs	r4, r4, #2
 8008094:	2600      	movs	r6, #0
 8008096:	42a6      	cmp	r6, r4
 8008098:	d105      	bne.n	80080a6 <__libc_init_array+0x2e>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a0:	4798      	blx	r3
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7ee      	b.n	8008084 <__libc_init_array+0xc>
 80080a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080aa:	4798      	blx	r3
 80080ac:	3601      	adds	r6, #1
 80080ae:	e7f2      	b.n	8008096 <__libc_init_array+0x1e>
 80080b0:	0800e6bc 	.word	0x0800e6bc
 80080b4:	0800e6bc 	.word	0x0800e6bc
 80080b8:	0800e6bc 	.word	0x0800e6bc
 80080bc:	0800e6c0 	.word	0x0800e6c0

080080c0 <memcpy>:
 80080c0:	440a      	add	r2, r1
 80080c2:	4291      	cmp	r1, r2
 80080c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080c8:	d100      	bne.n	80080cc <memcpy+0xc>
 80080ca:	4770      	bx	lr
 80080cc:	b510      	push	{r4, lr}
 80080ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d1f9      	bne.n	80080ce <memcpy+0xe>
 80080da:	bd10      	pop	{r4, pc}

080080dc <memset>:
 80080dc:	4402      	add	r2, r0
 80080de:	4603      	mov	r3, r0
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d100      	bne.n	80080e6 <memset+0xa>
 80080e4:	4770      	bx	lr
 80080e6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ea:	e7f9      	b.n	80080e0 <memset+0x4>

080080ec <__cvt>:
 80080ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	ec55 4b10 	vmov	r4, r5, d0
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	460e      	mov	r6, r1
 80080f8:	4619      	mov	r1, r3
 80080fa:	462b      	mov	r3, r5
 80080fc:	bfbb      	ittet	lt
 80080fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008102:	461d      	movlt	r5, r3
 8008104:	2300      	movge	r3, #0
 8008106:	232d      	movlt	r3, #45	; 0x2d
 8008108:	700b      	strb	r3, [r1, #0]
 800810a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800810c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008110:	4691      	mov	r9, r2
 8008112:	f023 0820 	bic.w	r8, r3, #32
 8008116:	bfbc      	itt	lt
 8008118:	4622      	movlt	r2, r4
 800811a:	4614      	movlt	r4, r2
 800811c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008120:	d005      	beq.n	800812e <__cvt+0x42>
 8008122:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008126:	d100      	bne.n	800812a <__cvt+0x3e>
 8008128:	3601      	adds	r6, #1
 800812a:	2102      	movs	r1, #2
 800812c:	e000      	b.n	8008130 <__cvt+0x44>
 800812e:	2103      	movs	r1, #3
 8008130:	ab03      	add	r3, sp, #12
 8008132:	9301      	str	r3, [sp, #4]
 8008134:	ab02      	add	r3, sp, #8
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	ec45 4b10 	vmov	d0, r4, r5
 800813c:	4653      	mov	r3, sl
 800813e:	4632      	mov	r2, r6
 8008140:	f001 feba 	bl	8009eb8 <_dtoa_r>
 8008144:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008148:	4607      	mov	r7, r0
 800814a:	d102      	bne.n	8008152 <__cvt+0x66>
 800814c:	f019 0f01 	tst.w	r9, #1
 8008150:	d022      	beq.n	8008198 <__cvt+0xac>
 8008152:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008156:	eb07 0906 	add.w	r9, r7, r6
 800815a:	d110      	bne.n	800817e <__cvt+0x92>
 800815c:	783b      	ldrb	r3, [r7, #0]
 800815e:	2b30      	cmp	r3, #48	; 0x30
 8008160:	d10a      	bne.n	8008178 <__cvt+0x8c>
 8008162:	2200      	movs	r2, #0
 8008164:	2300      	movs	r3, #0
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fcc5 	bl	8000af8 <__aeabi_dcmpeq>
 800816e:	b918      	cbnz	r0, 8008178 <__cvt+0x8c>
 8008170:	f1c6 0601 	rsb	r6, r6, #1
 8008174:	f8ca 6000 	str.w	r6, [sl]
 8008178:	f8da 3000 	ldr.w	r3, [sl]
 800817c:	4499      	add	r9, r3
 800817e:	2200      	movs	r2, #0
 8008180:	2300      	movs	r3, #0
 8008182:	4620      	mov	r0, r4
 8008184:	4629      	mov	r1, r5
 8008186:	f7f8 fcb7 	bl	8000af8 <__aeabi_dcmpeq>
 800818a:	b108      	cbz	r0, 8008190 <__cvt+0xa4>
 800818c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008190:	2230      	movs	r2, #48	; 0x30
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	454b      	cmp	r3, r9
 8008196:	d307      	bcc.n	80081a8 <__cvt+0xbc>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800819c:	1bdb      	subs	r3, r3, r7
 800819e:	4638      	mov	r0, r7
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	b004      	add	sp, #16
 80081a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a8:	1c59      	adds	r1, r3, #1
 80081aa:	9103      	str	r1, [sp, #12]
 80081ac:	701a      	strb	r2, [r3, #0]
 80081ae:	e7f0      	b.n	8008192 <__cvt+0xa6>

080081b0 <__exponent>:
 80081b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081b2:	4603      	mov	r3, r0
 80081b4:	2900      	cmp	r1, #0
 80081b6:	bfb8      	it	lt
 80081b8:	4249      	neglt	r1, r1
 80081ba:	f803 2b02 	strb.w	r2, [r3], #2
 80081be:	bfb4      	ite	lt
 80081c0:	222d      	movlt	r2, #45	; 0x2d
 80081c2:	222b      	movge	r2, #43	; 0x2b
 80081c4:	2909      	cmp	r1, #9
 80081c6:	7042      	strb	r2, [r0, #1]
 80081c8:	dd2a      	ble.n	8008220 <__exponent+0x70>
 80081ca:	f10d 0407 	add.w	r4, sp, #7
 80081ce:	46a4      	mov	ip, r4
 80081d0:	270a      	movs	r7, #10
 80081d2:	46a6      	mov	lr, r4
 80081d4:	460a      	mov	r2, r1
 80081d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80081da:	fb07 1516 	mls	r5, r7, r6, r1
 80081de:	3530      	adds	r5, #48	; 0x30
 80081e0:	2a63      	cmp	r2, #99	; 0x63
 80081e2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80081e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80081ea:	4631      	mov	r1, r6
 80081ec:	dcf1      	bgt.n	80081d2 <__exponent+0x22>
 80081ee:	3130      	adds	r1, #48	; 0x30
 80081f0:	f1ae 0502 	sub.w	r5, lr, #2
 80081f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80081f8:	1c44      	adds	r4, r0, #1
 80081fa:	4629      	mov	r1, r5
 80081fc:	4561      	cmp	r1, ip
 80081fe:	d30a      	bcc.n	8008216 <__exponent+0x66>
 8008200:	f10d 0209 	add.w	r2, sp, #9
 8008204:	eba2 020e 	sub.w	r2, r2, lr
 8008208:	4565      	cmp	r5, ip
 800820a:	bf88      	it	hi
 800820c:	2200      	movhi	r2, #0
 800820e:	4413      	add	r3, r2
 8008210:	1a18      	subs	r0, r3, r0
 8008212:	b003      	add	sp, #12
 8008214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800821a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800821e:	e7ed      	b.n	80081fc <__exponent+0x4c>
 8008220:	2330      	movs	r3, #48	; 0x30
 8008222:	3130      	adds	r1, #48	; 0x30
 8008224:	7083      	strb	r3, [r0, #2]
 8008226:	70c1      	strb	r1, [r0, #3]
 8008228:	1d03      	adds	r3, r0, #4
 800822a:	e7f1      	b.n	8008210 <__exponent+0x60>

0800822c <_printf_float>:
 800822c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008230:	ed2d 8b02 	vpush	{d8}
 8008234:	b08d      	sub	sp, #52	; 0x34
 8008236:	460c      	mov	r4, r1
 8008238:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800823c:	4616      	mov	r6, r2
 800823e:	461f      	mov	r7, r3
 8008240:	4605      	mov	r5, r0
 8008242:	f003 f97d 	bl	800b540 <_localeconv_r>
 8008246:	f8d0 a000 	ldr.w	sl, [r0]
 800824a:	4650      	mov	r0, sl
 800824c:	f7f7 ffd8 	bl	8000200 <strlen>
 8008250:	2300      	movs	r3, #0
 8008252:	930a      	str	r3, [sp, #40]	; 0x28
 8008254:	6823      	ldr	r3, [r4, #0]
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	f8d8 3000 	ldr.w	r3, [r8]
 800825c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008260:	3307      	adds	r3, #7
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	f103 0208 	add.w	r2, r3, #8
 800826a:	f8c8 2000 	str.w	r2, [r8]
 800826e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008272:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008276:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800827a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800827e:	9307      	str	r3, [sp, #28]
 8008280:	f8cd 8018 	str.w	r8, [sp, #24]
 8008284:	ee08 0a10 	vmov	s16, r0
 8008288:	4b9f      	ldr	r3, [pc, #636]	; (8008508 <_printf_float+0x2dc>)
 800828a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800828e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008292:	f7f8 fc63 	bl	8000b5c <__aeabi_dcmpun>
 8008296:	bb88      	cbnz	r0, 80082fc <_printf_float+0xd0>
 8008298:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800829c:	4b9a      	ldr	r3, [pc, #616]	; (8008508 <_printf_float+0x2dc>)
 800829e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082a2:	f7f8 fc3d 	bl	8000b20 <__aeabi_dcmple>
 80082a6:	bb48      	cbnz	r0, 80082fc <_printf_float+0xd0>
 80082a8:	2200      	movs	r2, #0
 80082aa:	2300      	movs	r3, #0
 80082ac:	4640      	mov	r0, r8
 80082ae:	4649      	mov	r1, r9
 80082b0:	f7f8 fc2c 	bl	8000b0c <__aeabi_dcmplt>
 80082b4:	b110      	cbz	r0, 80082bc <_printf_float+0x90>
 80082b6:	232d      	movs	r3, #45	; 0x2d
 80082b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082bc:	4b93      	ldr	r3, [pc, #588]	; (800850c <_printf_float+0x2e0>)
 80082be:	4894      	ldr	r0, [pc, #592]	; (8008510 <_printf_float+0x2e4>)
 80082c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80082c4:	bf94      	ite	ls
 80082c6:	4698      	movls	r8, r3
 80082c8:	4680      	movhi	r8, r0
 80082ca:	2303      	movs	r3, #3
 80082cc:	6123      	str	r3, [r4, #16]
 80082ce:	9b05      	ldr	r3, [sp, #20]
 80082d0:	f023 0204 	bic.w	r2, r3, #4
 80082d4:	6022      	str	r2, [r4, #0]
 80082d6:	f04f 0900 	mov.w	r9, #0
 80082da:	9700      	str	r7, [sp, #0]
 80082dc:	4633      	mov	r3, r6
 80082de:	aa0b      	add	r2, sp, #44	; 0x2c
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f9d8 	bl	8008698 <_printf_common>
 80082e8:	3001      	adds	r0, #1
 80082ea:	f040 8090 	bne.w	800840e <_printf_float+0x1e2>
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082f2:	b00d      	add	sp, #52	; 0x34
 80082f4:	ecbd 8b02 	vpop	{d8}
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fc2a 	bl	8000b5c <__aeabi_dcmpun>
 8008308:	b140      	cbz	r0, 800831c <_printf_float+0xf0>
 800830a:	464b      	mov	r3, r9
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfbc      	itt	lt
 8008310:	232d      	movlt	r3, #45	; 0x2d
 8008312:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008316:	487f      	ldr	r0, [pc, #508]	; (8008514 <_printf_float+0x2e8>)
 8008318:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <_printf_float+0x2ec>)
 800831a:	e7d1      	b.n	80082c0 <_printf_float+0x94>
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008322:	9206      	str	r2, [sp, #24]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	d13f      	bne.n	80083a8 <_printf_float+0x17c>
 8008328:	2306      	movs	r3, #6
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	9b05      	ldr	r3, [sp, #20]
 800832e:	6861      	ldr	r1, [r4, #4]
 8008330:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008334:	2300      	movs	r3, #0
 8008336:	9303      	str	r3, [sp, #12]
 8008338:	ab0a      	add	r3, sp, #40	; 0x28
 800833a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800833e:	ab09      	add	r3, sp, #36	; 0x24
 8008340:	ec49 8b10 	vmov	d0, r8, r9
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800834c:	4628      	mov	r0, r5
 800834e:	f7ff fecd 	bl	80080ec <__cvt>
 8008352:	9b06      	ldr	r3, [sp, #24]
 8008354:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008356:	2b47      	cmp	r3, #71	; 0x47
 8008358:	4680      	mov	r8, r0
 800835a:	d108      	bne.n	800836e <_printf_float+0x142>
 800835c:	1cc8      	adds	r0, r1, #3
 800835e:	db02      	blt.n	8008366 <_printf_float+0x13a>
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	4299      	cmp	r1, r3
 8008364:	dd41      	ble.n	80083ea <_printf_float+0x1be>
 8008366:	f1ab 0b02 	sub.w	fp, fp, #2
 800836a:	fa5f fb8b 	uxtb.w	fp, fp
 800836e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008372:	d820      	bhi.n	80083b6 <_printf_float+0x18a>
 8008374:	3901      	subs	r1, #1
 8008376:	465a      	mov	r2, fp
 8008378:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800837c:	9109      	str	r1, [sp, #36]	; 0x24
 800837e:	f7ff ff17 	bl	80081b0 <__exponent>
 8008382:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008384:	1813      	adds	r3, r2, r0
 8008386:	2a01      	cmp	r2, #1
 8008388:	4681      	mov	r9, r0
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	dc02      	bgt.n	8008394 <_printf_float+0x168>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d2      	lsls	r2, r2, #31
 8008392:	d501      	bpl.n	8008398 <_printf_float+0x16c>
 8008394:	3301      	adds	r3, #1
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800839c:	2b00      	cmp	r3, #0
 800839e:	d09c      	beq.n	80082da <_printf_float+0xae>
 80083a0:	232d      	movs	r3, #45	; 0x2d
 80083a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083a6:	e798      	b.n	80082da <_printf_float+0xae>
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	2a47      	cmp	r2, #71	; 0x47
 80083ac:	d1be      	bne.n	800832c <_printf_float+0x100>
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1bc      	bne.n	800832c <_printf_float+0x100>
 80083b2:	2301      	movs	r3, #1
 80083b4:	e7b9      	b.n	800832a <_printf_float+0xfe>
 80083b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80083ba:	d118      	bne.n	80083ee <_printf_float+0x1c2>
 80083bc:	2900      	cmp	r1, #0
 80083be:	6863      	ldr	r3, [r4, #4]
 80083c0:	dd0b      	ble.n	80083da <_printf_float+0x1ae>
 80083c2:	6121      	str	r1, [r4, #16]
 80083c4:	b913      	cbnz	r3, 80083cc <_printf_float+0x1a0>
 80083c6:	6822      	ldr	r2, [r4, #0]
 80083c8:	07d0      	lsls	r0, r2, #31
 80083ca:	d502      	bpl.n	80083d2 <_printf_float+0x1a6>
 80083cc:	3301      	adds	r3, #1
 80083ce:	440b      	add	r3, r1
 80083d0:	6123      	str	r3, [r4, #16]
 80083d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80083d4:	f04f 0900 	mov.w	r9, #0
 80083d8:	e7de      	b.n	8008398 <_printf_float+0x16c>
 80083da:	b913      	cbnz	r3, 80083e2 <_printf_float+0x1b6>
 80083dc:	6822      	ldr	r2, [r4, #0]
 80083de:	07d2      	lsls	r2, r2, #31
 80083e0:	d501      	bpl.n	80083e6 <_printf_float+0x1ba>
 80083e2:	3302      	adds	r3, #2
 80083e4:	e7f4      	b.n	80083d0 <_printf_float+0x1a4>
 80083e6:	2301      	movs	r3, #1
 80083e8:	e7f2      	b.n	80083d0 <_printf_float+0x1a4>
 80083ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f0:	4299      	cmp	r1, r3
 80083f2:	db05      	blt.n	8008400 <_printf_float+0x1d4>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	6121      	str	r1, [r4, #16]
 80083f8:	07d8      	lsls	r0, r3, #31
 80083fa:	d5ea      	bpl.n	80083d2 <_printf_float+0x1a6>
 80083fc:	1c4b      	adds	r3, r1, #1
 80083fe:	e7e7      	b.n	80083d0 <_printf_float+0x1a4>
 8008400:	2900      	cmp	r1, #0
 8008402:	bfd4      	ite	le
 8008404:	f1c1 0202 	rsble	r2, r1, #2
 8008408:	2201      	movgt	r2, #1
 800840a:	4413      	add	r3, r2
 800840c:	e7e0      	b.n	80083d0 <_printf_float+0x1a4>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	055a      	lsls	r2, r3, #21
 8008412:	d407      	bmi.n	8008424 <_printf_float+0x1f8>
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	4642      	mov	r2, r8
 8008418:	4631      	mov	r1, r6
 800841a:	4628      	mov	r0, r5
 800841c:	47b8      	blx	r7
 800841e:	3001      	adds	r0, #1
 8008420:	d12c      	bne.n	800847c <_printf_float+0x250>
 8008422:	e764      	b.n	80082ee <_printf_float+0xc2>
 8008424:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008428:	f240 80e0 	bls.w	80085ec <_printf_float+0x3c0>
 800842c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008430:	2200      	movs	r2, #0
 8008432:	2300      	movs	r3, #0
 8008434:	f7f8 fb60 	bl	8000af8 <__aeabi_dcmpeq>
 8008438:	2800      	cmp	r0, #0
 800843a:	d034      	beq.n	80084a6 <_printf_float+0x27a>
 800843c:	4a37      	ldr	r2, [pc, #220]	; (800851c <_printf_float+0x2f0>)
 800843e:	2301      	movs	r3, #1
 8008440:	4631      	mov	r1, r6
 8008442:	4628      	mov	r0, r5
 8008444:	47b8      	blx	r7
 8008446:	3001      	adds	r0, #1
 8008448:	f43f af51 	beq.w	80082ee <_printf_float+0xc2>
 800844c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008450:	429a      	cmp	r2, r3
 8008452:	db02      	blt.n	800845a <_printf_float+0x22e>
 8008454:	6823      	ldr	r3, [r4, #0]
 8008456:	07d8      	lsls	r0, r3, #31
 8008458:	d510      	bpl.n	800847c <_printf_float+0x250>
 800845a:	ee18 3a10 	vmov	r3, s16
 800845e:	4652      	mov	r2, sl
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f af41 	beq.w	80082ee <_printf_float+0xc2>
 800846c:	f04f 0800 	mov.w	r8, #0
 8008470:	f104 091a 	add.w	r9, r4, #26
 8008474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008476:	3b01      	subs	r3, #1
 8008478:	4543      	cmp	r3, r8
 800847a:	dc09      	bgt.n	8008490 <_printf_float+0x264>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	f100 8105 	bmi.w	800868e <_printf_float+0x462>
 8008484:	68e0      	ldr	r0, [r4, #12]
 8008486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008488:	4298      	cmp	r0, r3
 800848a:	bfb8      	it	lt
 800848c:	4618      	movlt	r0, r3
 800848e:	e730      	b.n	80082f2 <_printf_float+0xc6>
 8008490:	2301      	movs	r3, #1
 8008492:	464a      	mov	r2, r9
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af27 	beq.w	80082ee <_printf_float+0xc2>
 80084a0:	f108 0801 	add.w	r8, r8, #1
 80084a4:	e7e6      	b.n	8008474 <_printf_float+0x248>
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc39      	bgt.n	8008520 <_printf_float+0x2f4>
 80084ac:	4a1b      	ldr	r2, [pc, #108]	; (800851c <_printf_float+0x2f0>)
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f af19 	beq.w	80082ee <_printf_float+0xc2>
 80084bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084c0:	4313      	orrs	r3, r2
 80084c2:	d102      	bne.n	80084ca <_printf_float+0x29e>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07d9      	lsls	r1, r3, #31
 80084c8:	d5d8      	bpl.n	800847c <_printf_float+0x250>
 80084ca:	ee18 3a10 	vmov	r3, s16
 80084ce:	4652      	mov	r2, sl
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af09 	beq.w	80082ee <_printf_float+0xc2>
 80084dc:	f04f 0900 	mov.w	r9, #0
 80084e0:	f104 0a1a 	add.w	sl, r4, #26
 80084e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084e6:	425b      	negs	r3, r3
 80084e8:	454b      	cmp	r3, r9
 80084ea:	dc01      	bgt.n	80084f0 <_printf_float+0x2c4>
 80084ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ee:	e792      	b.n	8008416 <_printf_float+0x1ea>
 80084f0:	2301      	movs	r3, #1
 80084f2:	4652      	mov	r2, sl
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f aef7 	beq.w	80082ee <_printf_float+0xc2>
 8008500:	f109 0901 	add.w	r9, r9, #1
 8008504:	e7ee      	b.n	80084e4 <_printf_float+0x2b8>
 8008506:	bf00      	nop
 8008508:	7fefffff 	.word	0x7fefffff
 800850c:	0800e1f4 	.word	0x0800e1f4
 8008510:	0800e1f8 	.word	0x0800e1f8
 8008514:	0800e200 	.word	0x0800e200
 8008518:	0800e1fc 	.word	0x0800e1fc
 800851c:	0800e661 	.word	0x0800e661
 8008520:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008522:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008524:	429a      	cmp	r2, r3
 8008526:	bfa8      	it	ge
 8008528:	461a      	movge	r2, r3
 800852a:	2a00      	cmp	r2, #0
 800852c:	4691      	mov	r9, r2
 800852e:	dc37      	bgt.n	80085a0 <_printf_float+0x374>
 8008530:	f04f 0b00 	mov.w	fp, #0
 8008534:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008538:	f104 021a 	add.w	r2, r4, #26
 800853c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	eba3 0309 	sub.w	r3, r3, r9
 8008544:	455b      	cmp	r3, fp
 8008546:	dc33      	bgt.n	80085b0 <_printf_float+0x384>
 8008548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800854c:	429a      	cmp	r2, r3
 800854e:	db3b      	blt.n	80085c8 <_printf_float+0x39c>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d438      	bmi.n	80085c8 <_printf_float+0x39c>
 8008556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008558:	9a05      	ldr	r2, [sp, #20]
 800855a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800855c:	1a9a      	subs	r2, r3, r2
 800855e:	eba3 0901 	sub.w	r9, r3, r1
 8008562:	4591      	cmp	r9, r2
 8008564:	bfa8      	it	ge
 8008566:	4691      	movge	r9, r2
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	dc35      	bgt.n	80085da <_printf_float+0x3ae>
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008576:	f104 0a1a 	add.w	sl, r4, #26
 800857a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	eba3 0309 	sub.w	r3, r3, r9
 8008584:	4543      	cmp	r3, r8
 8008586:	f77f af79 	ble.w	800847c <_printf_float+0x250>
 800858a:	2301      	movs	r3, #1
 800858c:	4652      	mov	r2, sl
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	f43f aeaa 	beq.w	80082ee <_printf_float+0xc2>
 800859a:	f108 0801 	add.w	r8, r8, #1
 800859e:	e7ec      	b.n	800857a <_printf_float+0x34e>
 80085a0:	4613      	mov	r3, r2
 80085a2:	4631      	mov	r1, r6
 80085a4:	4642      	mov	r2, r8
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	d1c0      	bne.n	8008530 <_printf_float+0x304>
 80085ae:	e69e      	b.n	80082ee <_printf_float+0xc2>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	9205      	str	r2, [sp, #20]
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f ae97 	beq.w	80082ee <_printf_float+0xc2>
 80085c0:	9a05      	ldr	r2, [sp, #20]
 80085c2:	f10b 0b01 	add.w	fp, fp, #1
 80085c6:	e7b9      	b.n	800853c <_printf_float+0x310>
 80085c8:	ee18 3a10 	vmov	r3, s16
 80085cc:	4652      	mov	r2, sl
 80085ce:	4631      	mov	r1, r6
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b8      	blx	r7
 80085d4:	3001      	adds	r0, #1
 80085d6:	d1be      	bne.n	8008556 <_printf_float+0x32a>
 80085d8:	e689      	b.n	80082ee <_printf_float+0xc2>
 80085da:	9a05      	ldr	r2, [sp, #20]
 80085dc:	464b      	mov	r3, r9
 80085de:	4442      	add	r2, r8
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	d1c1      	bne.n	800856e <_printf_float+0x342>
 80085ea:	e680      	b.n	80082ee <_printf_float+0xc2>
 80085ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085ee:	2a01      	cmp	r2, #1
 80085f0:	dc01      	bgt.n	80085f6 <_printf_float+0x3ca>
 80085f2:	07db      	lsls	r3, r3, #31
 80085f4:	d538      	bpl.n	8008668 <_printf_float+0x43c>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4642      	mov	r2, r8
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	f43f ae74 	beq.w	80082ee <_printf_float+0xc2>
 8008606:	ee18 3a10 	vmov	r3, s16
 800860a:	4652      	mov	r2, sl
 800860c:	4631      	mov	r1, r6
 800860e:	4628      	mov	r0, r5
 8008610:	47b8      	blx	r7
 8008612:	3001      	adds	r0, #1
 8008614:	f43f ae6b 	beq.w	80082ee <_printf_float+0xc2>
 8008618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800861c:	2200      	movs	r2, #0
 800861e:	2300      	movs	r3, #0
 8008620:	f7f8 fa6a 	bl	8000af8 <__aeabi_dcmpeq>
 8008624:	b9d8      	cbnz	r0, 800865e <_printf_float+0x432>
 8008626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008628:	f108 0201 	add.w	r2, r8, #1
 800862c:	3b01      	subs	r3, #1
 800862e:	4631      	mov	r1, r6
 8008630:	4628      	mov	r0, r5
 8008632:	47b8      	blx	r7
 8008634:	3001      	adds	r0, #1
 8008636:	d10e      	bne.n	8008656 <_printf_float+0x42a>
 8008638:	e659      	b.n	80082ee <_printf_float+0xc2>
 800863a:	2301      	movs	r3, #1
 800863c:	4652      	mov	r2, sl
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	f43f ae52 	beq.w	80082ee <_printf_float+0xc2>
 800864a:	f108 0801 	add.w	r8, r8, #1
 800864e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008650:	3b01      	subs	r3, #1
 8008652:	4543      	cmp	r3, r8
 8008654:	dcf1      	bgt.n	800863a <_printf_float+0x40e>
 8008656:	464b      	mov	r3, r9
 8008658:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800865c:	e6dc      	b.n	8008418 <_printf_float+0x1ec>
 800865e:	f04f 0800 	mov.w	r8, #0
 8008662:	f104 0a1a 	add.w	sl, r4, #26
 8008666:	e7f2      	b.n	800864e <_printf_float+0x422>
 8008668:	2301      	movs	r3, #1
 800866a:	4642      	mov	r2, r8
 800866c:	e7df      	b.n	800862e <_printf_float+0x402>
 800866e:	2301      	movs	r3, #1
 8008670:	464a      	mov	r2, r9
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	47b8      	blx	r7
 8008678:	3001      	adds	r0, #1
 800867a:	f43f ae38 	beq.w	80082ee <_printf_float+0xc2>
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	68e3      	ldr	r3, [r4, #12]
 8008684:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008686:	1a5b      	subs	r3, r3, r1
 8008688:	4543      	cmp	r3, r8
 800868a:	dcf0      	bgt.n	800866e <_printf_float+0x442>
 800868c:	e6fa      	b.n	8008484 <_printf_float+0x258>
 800868e:	f04f 0800 	mov.w	r8, #0
 8008692:	f104 0919 	add.w	r9, r4, #25
 8008696:	e7f4      	b.n	8008682 <_printf_float+0x456>

08008698 <_printf_common>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	4616      	mov	r6, r2
 800869e:	4699      	mov	r9, r3
 80086a0:	688a      	ldr	r2, [r1, #8]
 80086a2:	690b      	ldr	r3, [r1, #16]
 80086a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	bfb8      	it	lt
 80086ac:	4613      	movlt	r3, r2
 80086ae:	6033      	str	r3, [r6, #0]
 80086b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086b4:	4607      	mov	r7, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	b10a      	cbz	r2, 80086be <_printf_common+0x26>
 80086ba:	3301      	adds	r3, #1
 80086bc:	6033      	str	r3, [r6, #0]
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	0699      	lsls	r1, r3, #26
 80086c2:	bf42      	ittt	mi
 80086c4:	6833      	ldrmi	r3, [r6, #0]
 80086c6:	3302      	addmi	r3, #2
 80086c8:	6033      	strmi	r3, [r6, #0]
 80086ca:	6825      	ldr	r5, [r4, #0]
 80086cc:	f015 0506 	ands.w	r5, r5, #6
 80086d0:	d106      	bne.n	80086e0 <_printf_common+0x48>
 80086d2:	f104 0a19 	add.w	sl, r4, #25
 80086d6:	68e3      	ldr	r3, [r4, #12]
 80086d8:	6832      	ldr	r2, [r6, #0]
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	42ab      	cmp	r3, r5
 80086de:	dc26      	bgt.n	800872e <_printf_common+0x96>
 80086e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086e4:	1e13      	subs	r3, r2, #0
 80086e6:	6822      	ldr	r2, [r4, #0]
 80086e8:	bf18      	it	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	0692      	lsls	r2, r2, #26
 80086ee:	d42b      	bmi.n	8008748 <_printf_common+0xb0>
 80086f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086f4:	4649      	mov	r1, r9
 80086f6:	4638      	mov	r0, r7
 80086f8:	47c0      	blx	r8
 80086fa:	3001      	adds	r0, #1
 80086fc:	d01e      	beq.n	800873c <_printf_common+0xa4>
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	68e5      	ldr	r5, [r4, #12]
 8008702:	6832      	ldr	r2, [r6, #0]
 8008704:	f003 0306 	and.w	r3, r3, #6
 8008708:	2b04      	cmp	r3, #4
 800870a:	bf08      	it	eq
 800870c:	1aad      	subeq	r5, r5, r2
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	6922      	ldr	r2, [r4, #16]
 8008712:	bf0c      	ite	eq
 8008714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008718:	2500      	movne	r5, #0
 800871a:	4293      	cmp	r3, r2
 800871c:	bfc4      	itt	gt
 800871e:	1a9b      	subgt	r3, r3, r2
 8008720:	18ed      	addgt	r5, r5, r3
 8008722:	2600      	movs	r6, #0
 8008724:	341a      	adds	r4, #26
 8008726:	42b5      	cmp	r5, r6
 8008728:	d11a      	bne.n	8008760 <_printf_common+0xc8>
 800872a:	2000      	movs	r0, #0
 800872c:	e008      	b.n	8008740 <_printf_common+0xa8>
 800872e:	2301      	movs	r3, #1
 8008730:	4652      	mov	r2, sl
 8008732:	4649      	mov	r1, r9
 8008734:	4638      	mov	r0, r7
 8008736:	47c0      	blx	r8
 8008738:	3001      	adds	r0, #1
 800873a:	d103      	bne.n	8008744 <_printf_common+0xac>
 800873c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	3501      	adds	r5, #1
 8008746:	e7c6      	b.n	80086d6 <_printf_common+0x3e>
 8008748:	18e1      	adds	r1, r4, r3
 800874a:	1c5a      	adds	r2, r3, #1
 800874c:	2030      	movs	r0, #48	; 0x30
 800874e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008752:	4422      	add	r2, r4
 8008754:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008758:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800875c:	3302      	adds	r3, #2
 800875e:	e7c7      	b.n	80086f0 <_printf_common+0x58>
 8008760:	2301      	movs	r3, #1
 8008762:	4622      	mov	r2, r4
 8008764:	4649      	mov	r1, r9
 8008766:	4638      	mov	r0, r7
 8008768:	47c0      	blx	r8
 800876a:	3001      	adds	r0, #1
 800876c:	d0e6      	beq.n	800873c <_printf_common+0xa4>
 800876e:	3601      	adds	r6, #1
 8008770:	e7d9      	b.n	8008726 <_printf_common+0x8e>
	...

08008774 <_printf_i>:
 8008774:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008778:	7e0f      	ldrb	r7, [r1, #24]
 800877a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800877c:	2f78      	cmp	r7, #120	; 0x78
 800877e:	4691      	mov	r9, r2
 8008780:	4680      	mov	r8, r0
 8008782:	460c      	mov	r4, r1
 8008784:	469a      	mov	sl, r3
 8008786:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800878a:	d807      	bhi.n	800879c <_printf_i+0x28>
 800878c:	2f62      	cmp	r7, #98	; 0x62
 800878e:	d80a      	bhi.n	80087a6 <_printf_i+0x32>
 8008790:	2f00      	cmp	r7, #0
 8008792:	f000 80d8 	beq.w	8008946 <_printf_i+0x1d2>
 8008796:	2f58      	cmp	r7, #88	; 0x58
 8008798:	f000 80a3 	beq.w	80088e2 <_printf_i+0x16e>
 800879c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087a4:	e03a      	b.n	800881c <_printf_i+0xa8>
 80087a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087aa:	2b15      	cmp	r3, #21
 80087ac:	d8f6      	bhi.n	800879c <_printf_i+0x28>
 80087ae:	a101      	add	r1, pc, #4	; (adr r1, 80087b4 <_printf_i+0x40>)
 80087b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b4:	0800880d 	.word	0x0800880d
 80087b8:	08008821 	.word	0x08008821
 80087bc:	0800879d 	.word	0x0800879d
 80087c0:	0800879d 	.word	0x0800879d
 80087c4:	0800879d 	.word	0x0800879d
 80087c8:	0800879d 	.word	0x0800879d
 80087cc:	08008821 	.word	0x08008821
 80087d0:	0800879d 	.word	0x0800879d
 80087d4:	0800879d 	.word	0x0800879d
 80087d8:	0800879d 	.word	0x0800879d
 80087dc:	0800879d 	.word	0x0800879d
 80087e0:	0800892d 	.word	0x0800892d
 80087e4:	08008851 	.word	0x08008851
 80087e8:	0800890f 	.word	0x0800890f
 80087ec:	0800879d 	.word	0x0800879d
 80087f0:	0800879d 	.word	0x0800879d
 80087f4:	0800894f 	.word	0x0800894f
 80087f8:	0800879d 	.word	0x0800879d
 80087fc:	08008851 	.word	0x08008851
 8008800:	0800879d 	.word	0x0800879d
 8008804:	0800879d 	.word	0x0800879d
 8008808:	08008917 	.word	0x08008917
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	1d1a      	adds	r2, r3, #4
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	602a      	str	r2, [r5, #0]
 8008814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008818:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800881c:	2301      	movs	r3, #1
 800881e:	e0a3      	b.n	8008968 <_printf_i+0x1f4>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	6829      	ldr	r1, [r5, #0]
 8008824:	0606      	lsls	r6, r0, #24
 8008826:	f101 0304 	add.w	r3, r1, #4
 800882a:	d50a      	bpl.n	8008842 <_printf_i+0xce>
 800882c:	680e      	ldr	r6, [r1, #0]
 800882e:	602b      	str	r3, [r5, #0]
 8008830:	2e00      	cmp	r6, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xc8>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	4276      	negs	r6, r6
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800883c:	485e      	ldr	r0, [pc, #376]	; (80089b8 <_printf_i+0x244>)
 800883e:	230a      	movs	r3, #10
 8008840:	e019      	b.n	8008876 <_printf_i+0x102>
 8008842:	680e      	ldr	r6, [r1, #0]
 8008844:	602b      	str	r3, [r5, #0]
 8008846:	f010 0f40 	tst.w	r0, #64	; 0x40
 800884a:	bf18      	it	ne
 800884c:	b236      	sxthne	r6, r6
 800884e:	e7ef      	b.n	8008830 <_printf_i+0xbc>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	6820      	ldr	r0, [r4, #0]
 8008854:	1d19      	adds	r1, r3, #4
 8008856:	6029      	str	r1, [r5, #0]
 8008858:	0601      	lsls	r1, r0, #24
 800885a:	d501      	bpl.n	8008860 <_printf_i+0xec>
 800885c:	681e      	ldr	r6, [r3, #0]
 800885e:	e002      	b.n	8008866 <_printf_i+0xf2>
 8008860:	0646      	lsls	r6, r0, #25
 8008862:	d5fb      	bpl.n	800885c <_printf_i+0xe8>
 8008864:	881e      	ldrh	r6, [r3, #0]
 8008866:	4854      	ldr	r0, [pc, #336]	; (80089b8 <_printf_i+0x244>)
 8008868:	2f6f      	cmp	r7, #111	; 0x6f
 800886a:	bf0c      	ite	eq
 800886c:	2308      	moveq	r3, #8
 800886e:	230a      	movne	r3, #10
 8008870:	2100      	movs	r1, #0
 8008872:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008876:	6865      	ldr	r5, [r4, #4]
 8008878:	60a5      	str	r5, [r4, #8]
 800887a:	2d00      	cmp	r5, #0
 800887c:	bfa2      	ittt	ge
 800887e:	6821      	ldrge	r1, [r4, #0]
 8008880:	f021 0104 	bicge.w	r1, r1, #4
 8008884:	6021      	strge	r1, [r4, #0]
 8008886:	b90e      	cbnz	r6, 800888c <_printf_i+0x118>
 8008888:	2d00      	cmp	r5, #0
 800888a:	d04d      	beq.n	8008928 <_printf_i+0x1b4>
 800888c:	4615      	mov	r5, r2
 800888e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008892:	fb03 6711 	mls	r7, r3, r1, r6
 8008896:	5dc7      	ldrb	r7, [r0, r7]
 8008898:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800889c:	4637      	mov	r7, r6
 800889e:	42bb      	cmp	r3, r7
 80088a0:	460e      	mov	r6, r1
 80088a2:	d9f4      	bls.n	800888e <_printf_i+0x11a>
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d10b      	bne.n	80088c0 <_printf_i+0x14c>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	07de      	lsls	r6, r3, #31
 80088ac:	d508      	bpl.n	80088c0 <_printf_i+0x14c>
 80088ae:	6923      	ldr	r3, [r4, #16]
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4299      	cmp	r1, r3
 80088b4:	bfde      	ittt	le
 80088b6:	2330      	movle	r3, #48	; 0x30
 80088b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80088c0:	1b52      	subs	r2, r2, r5
 80088c2:	6122      	str	r2, [r4, #16]
 80088c4:	f8cd a000 	str.w	sl, [sp]
 80088c8:	464b      	mov	r3, r9
 80088ca:	aa03      	add	r2, sp, #12
 80088cc:	4621      	mov	r1, r4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fee2 	bl	8008698 <_printf_common>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d14c      	bne.n	8008972 <_printf_i+0x1fe>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088dc:	b004      	add	sp, #16
 80088de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088e2:	4835      	ldr	r0, [pc, #212]	; (80089b8 <_printf_i+0x244>)
 80088e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088e8:	6829      	ldr	r1, [r5, #0]
 80088ea:	6823      	ldr	r3, [r4, #0]
 80088ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80088f0:	6029      	str	r1, [r5, #0]
 80088f2:	061d      	lsls	r5, r3, #24
 80088f4:	d514      	bpl.n	8008920 <_printf_i+0x1ac>
 80088f6:	07df      	lsls	r7, r3, #31
 80088f8:	bf44      	itt	mi
 80088fa:	f043 0320 	orrmi.w	r3, r3, #32
 80088fe:	6023      	strmi	r3, [r4, #0]
 8008900:	b91e      	cbnz	r6, 800890a <_printf_i+0x196>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	f023 0320 	bic.w	r3, r3, #32
 8008908:	6023      	str	r3, [r4, #0]
 800890a:	2310      	movs	r3, #16
 800890c:	e7b0      	b.n	8008870 <_printf_i+0xfc>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f043 0320 	orr.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	2378      	movs	r3, #120	; 0x78
 8008918:	4828      	ldr	r0, [pc, #160]	; (80089bc <_printf_i+0x248>)
 800891a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800891e:	e7e3      	b.n	80088e8 <_printf_i+0x174>
 8008920:	0659      	lsls	r1, r3, #25
 8008922:	bf48      	it	mi
 8008924:	b2b6      	uxthmi	r6, r6
 8008926:	e7e6      	b.n	80088f6 <_printf_i+0x182>
 8008928:	4615      	mov	r5, r2
 800892a:	e7bb      	b.n	80088a4 <_printf_i+0x130>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	6826      	ldr	r6, [r4, #0]
 8008930:	6961      	ldr	r1, [r4, #20]
 8008932:	1d18      	adds	r0, r3, #4
 8008934:	6028      	str	r0, [r5, #0]
 8008936:	0635      	lsls	r5, r6, #24
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	d501      	bpl.n	8008940 <_printf_i+0x1cc>
 800893c:	6019      	str	r1, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0x1d2>
 8008940:	0670      	lsls	r0, r6, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0x1c8>
 8008944:	8019      	strh	r1, [r3, #0]
 8008946:	2300      	movs	r3, #0
 8008948:	6123      	str	r3, [r4, #16]
 800894a:	4615      	mov	r5, r2
 800894c:	e7ba      	b.n	80088c4 <_printf_i+0x150>
 800894e:	682b      	ldr	r3, [r5, #0]
 8008950:	1d1a      	adds	r2, r3, #4
 8008952:	602a      	str	r2, [r5, #0]
 8008954:	681d      	ldr	r5, [r3, #0]
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	2100      	movs	r1, #0
 800895a:	4628      	mov	r0, r5
 800895c:	f7f7 fc58 	bl	8000210 <memchr>
 8008960:	b108      	cbz	r0, 8008966 <_printf_i+0x1f2>
 8008962:	1b40      	subs	r0, r0, r5
 8008964:	6060      	str	r0, [r4, #4]
 8008966:	6863      	ldr	r3, [r4, #4]
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008970:	e7a8      	b.n	80088c4 <_printf_i+0x150>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	462a      	mov	r2, r5
 8008976:	4649      	mov	r1, r9
 8008978:	4640      	mov	r0, r8
 800897a:	47d0      	blx	sl
 800897c:	3001      	adds	r0, #1
 800897e:	d0ab      	beq.n	80088d8 <_printf_i+0x164>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	079b      	lsls	r3, r3, #30
 8008984:	d413      	bmi.n	80089ae <_printf_i+0x23a>
 8008986:	68e0      	ldr	r0, [r4, #12]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	4298      	cmp	r0, r3
 800898c:	bfb8      	it	lt
 800898e:	4618      	movlt	r0, r3
 8008990:	e7a4      	b.n	80088dc <_printf_i+0x168>
 8008992:	2301      	movs	r3, #1
 8008994:	4632      	mov	r2, r6
 8008996:	4649      	mov	r1, r9
 8008998:	4640      	mov	r0, r8
 800899a:	47d0      	blx	sl
 800899c:	3001      	adds	r0, #1
 800899e:	d09b      	beq.n	80088d8 <_printf_i+0x164>
 80089a0:	3501      	adds	r5, #1
 80089a2:	68e3      	ldr	r3, [r4, #12]
 80089a4:	9903      	ldr	r1, [sp, #12]
 80089a6:	1a5b      	subs	r3, r3, r1
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dcf2      	bgt.n	8008992 <_printf_i+0x21e>
 80089ac:	e7eb      	b.n	8008986 <_printf_i+0x212>
 80089ae:	2500      	movs	r5, #0
 80089b0:	f104 0619 	add.w	r6, r4, #25
 80089b4:	e7f5      	b.n	80089a2 <_printf_i+0x22e>
 80089b6:	bf00      	nop
 80089b8:	0800e204 	.word	0x0800e204
 80089bc:	0800e215 	.word	0x0800e215

080089c0 <_scanf_float>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	b087      	sub	sp, #28
 80089c6:	4617      	mov	r7, r2
 80089c8:	9303      	str	r3, [sp, #12]
 80089ca:	688b      	ldr	r3, [r1, #8]
 80089cc:	1e5a      	subs	r2, r3, #1
 80089ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089d2:	bf83      	ittte	hi
 80089d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089d8:	195b      	addhi	r3, r3, r5
 80089da:	9302      	strhi	r3, [sp, #8]
 80089dc:	2300      	movls	r3, #0
 80089de:	bf86      	itte	hi
 80089e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089e4:	608b      	strhi	r3, [r1, #8]
 80089e6:	9302      	strls	r3, [sp, #8]
 80089e8:	680b      	ldr	r3, [r1, #0]
 80089ea:	468b      	mov	fp, r1
 80089ec:	2500      	movs	r5, #0
 80089ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80089f2:	f84b 3b1c 	str.w	r3, [fp], #28
 80089f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089fa:	4680      	mov	r8, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	465e      	mov	r6, fp
 8008a00:	46aa      	mov	sl, r5
 8008a02:	46a9      	mov	r9, r5
 8008a04:	9501      	str	r5, [sp, #4]
 8008a06:	68a2      	ldr	r2, [r4, #8]
 8008a08:	b152      	cbz	r2, 8008a20 <_scanf_float+0x60>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	2b4e      	cmp	r3, #78	; 0x4e
 8008a10:	d864      	bhi.n	8008adc <_scanf_float+0x11c>
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	d83c      	bhi.n	8008a90 <_scanf_float+0xd0>
 8008a16:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008a1a:	b2c8      	uxtb	r0, r1
 8008a1c:	280e      	cmp	r0, #14
 8008a1e:	d93a      	bls.n	8008a96 <_scanf_float+0xd6>
 8008a20:	f1b9 0f00 	cmp.w	r9, #0
 8008a24:	d003      	beq.n	8008a2e <_scanf_float+0x6e>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008a32:	f1ba 0f01 	cmp.w	sl, #1
 8008a36:	f200 8113 	bhi.w	8008c60 <_scanf_float+0x2a0>
 8008a3a:	455e      	cmp	r6, fp
 8008a3c:	f200 8105 	bhi.w	8008c4a <_scanf_float+0x28a>
 8008a40:	2501      	movs	r5, #1
 8008a42:	4628      	mov	r0, r5
 8008a44:	b007      	add	sp, #28
 8008a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008a4e:	2a0d      	cmp	r2, #13
 8008a50:	d8e6      	bhi.n	8008a20 <_scanf_float+0x60>
 8008a52:	a101      	add	r1, pc, #4	; (adr r1, 8008a58 <_scanf_float+0x98>)
 8008a54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a58:	08008b97 	.word	0x08008b97
 8008a5c:	08008a21 	.word	0x08008a21
 8008a60:	08008a21 	.word	0x08008a21
 8008a64:	08008a21 	.word	0x08008a21
 8008a68:	08008bf7 	.word	0x08008bf7
 8008a6c:	08008bcf 	.word	0x08008bcf
 8008a70:	08008a21 	.word	0x08008a21
 8008a74:	08008a21 	.word	0x08008a21
 8008a78:	08008ba5 	.word	0x08008ba5
 8008a7c:	08008a21 	.word	0x08008a21
 8008a80:	08008a21 	.word	0x08008a21
 8008a84:	08008a21 	.word	0x08008a21
 8008a88:	08008a21 	.word	0x08008a21
 8008a8c:	08008b5d 	.word	0x08008b5d
 8008a90:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a94:	e7db      	b.n	8008a4e <_scanf_float+0x8e>
 8008a96:	290e      	cmp	r1, #14
 8008a98:	d8c2      	bhi.n	8008a20 <_scanf_float+0x60>
 8008a9a:	a001      	add	r0, pc, #4	; (adr r0, 8008aa0 <_scanf_float+0xe0>)
 8008a9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008aa0:	08008b4f 	.word	0x08008b4f
 8008aa4:	08008a21 	.word	0x08008a21
 8008aa8:	08008b4f 	.word	0x08008b4f
 8008aac:	08008be3 	.word	0x08008be3
 8008ab0:	08008a21 	.word	0x08008a21
 8008ab4:	08008afd 	.word	0x08008afd
 8008ab8:	08008b39 	.word	0x08008b39
 8008abc:	08008b39 	.word	0x08008b39
 8008ac0:	08008b39 	.word	0x08008b39
 8008ac4:	08008b39 	.word	0x08008b39
 8008ac8:	08008b39 	.word	0x08008b39
 8008acc:	08008b39 	.word	0x08008b39
 8008ad0:	08008b39 	.word	0x08008b39
 8008ad4:	08008b39 	.word	0x08008b39
 8008ad8:	08008b39 	.word	0x08008b39
 8008adc:	2b6e      	cmp	r3, #110	; 0x6e
 8008ade:	d809      	bhi.n	8008af4 <_scanf_float+0x134>
 8008ae0:	2b60      	cmp	r3, #96	; 0x60
 8008ae2:	d8b2      	bhi.n	8008a4a <_scanf_float+0x8a>
 8008ae4:	2b54      	cmp	r3, #84	; 0x54
 8008ae6:	d077      	beq.n	8008bd8 <_scanf_float+0x218>
 8008ae8:	2b59      	cmp	r3, #89	; 0x59
 8008aea:	d199      	bne.n	8008a20 <_scanf_float+0x60>
 8008aec:	2d07      	cmp	r5, #7
 8008aee:	d197      	bne.n	8008a20 <_scanf_float+0x60>
 8008af0:	2508      	movs	r5, #8
 8008af2:	e029      	b.n	8008b48 <_scanf_float+0x188>
 8008af4:	2b74      	cmp	r3, #116	; 0x74
 8008af6:	d06f      	beq.n	8008bd8 <_scanf_float+0x218>
 8008af8:	2b79      	cmp	r3, #121	; 0x79
 8008afa:	e7f6      	b.n	8008aea <_scanf_float+0x12a>
 8008afc:	6821      	ldr	r1, [r4, #0]
 8008afe:	05c8      	lsls	r0, r1, #23
 8008b00:	d51a      	bpl.n	8008b38 <_scanf_float+0x178>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008b08:	6021      	str	r1, [r4, #0]
 8008b0a:	f109 0901 	add.w	r9, r9, #1
 8008b0e:	b11b      	cbz	r3, 8008b18 <_scanf_float+0x158>
 8008b10:	3b01      	subs	r3, #1
 8008b12:	3201      	adds	r2, #1
 8008b14:	9302      	str	r3, [sp, #8]
 8008b16:	60a2      	str	r2, [r4, #8]
 8008b18:	68a3      	ldr	r3, [r4, #8]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6923      	ldr	r3, [r4, #16]
 8008b20:	3301      	adds	r3, #1
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	607b      	str	r3, [r7, #4]
 8008b2c:	f340 8084 	ble.w	8008c38 <_scanf_float+0x278>
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	e766      	b.n	8008a06 <_scanf_float+0x46>
 8008b38:	eb1a 0f05 	cmn.w	sl, r5
 8008b3c:	f47f af70 	bne.w	8008a20 <_scanf_float+0x60>
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	f806 3b01 	strb.w	r3, [r6], #1
 8008b4c:	e7e4      	b.n	8008b18 <_scanf_float+0x158>
 8008b4e:	6822      	ldr	r2, [r4, #0]
 8008b50:	0610      	lsls	r0, r2, #24
 8008b52:	f57f af65 	bpl.w	8008a20 <_scanf_float+0x60>
 8008b56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b5a:	e7f4      	b.n	8008b46 <_scanf_float+0x186>
 8008b5c:	f1ba 0f00 	cmp.w	sl, #0
 8008b60:	d10e      	bne.n	8008b80 <_scanf_float+0x1c0>
 8008b62:	f1b9 0f00 	cmp.w	r9, #0
 8008b66:	d10e      	bne.n	8008b86 <_scanf_float+0x1c6>
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b6e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b72:	d108      	bne.n	8008b86 <_scanf_float+0x1c6>
 8008b74:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	f04f 0a01 	mov.w	sl, #1
 8008b7e:	e7e3      	b.n	8008b48 <_scanf_float+0x188>
 8008b80:	f1ba 0f02 	cmp.w	sl, #2
 8008b84:	d055      	beq.n	8008c32 <_scanf_float+0x272>
 8008b86:	2d01      	cmp	r5, #1
 8008b88:	d002      	beq.n	8008b90 <_scanf_float+0x1d0>
 8008b8a:	2d04      	cmp	r5, #4
 8008b8c:	f47f af48 	bne.w	8008a20 <_scanf_float+0x60>
 8008b90:	3501      	adds	r5, #1
 8008b92:	b2ed      	uxtb	r5, r5
 8008b94:	e7d8      	b.n	8008b48 <_scanf_float+0x188>
 8008b96:	f1ba 0f01 	cmp.w	sl, #1
 8008b9a:	f47f af41 	bne.w	8008a20 <_scanf_float+0x60>
 8008b9e:	f04f 0a02 	mov.w	sl, #2
 8008ba2:	e7d1      	b.n	8008b48 <_scanf_float+0x188>
 8008ba4:	b97d      	cbnz	r5, 8008bc6 <_scanf_float+0x206>
 8008ba6:	f1b9 0f00 	cmp.w	r9, #0
 8008baa:	f47f af3c 	bne.w	8008a26 <_scanf_float+0x66>
 8008bae:	6822      	ldr	r2, [r4, #0]
 8008bb0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008bb4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008bb8:	f47f af39 	bne.w	8008a2e <_scanf_float+0x6e>
 8008bbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	2501      	movs	r5, #1
 8008bc4:	e7c0      	b.n	8008b48 <_scanf_float+0x188>
 8008bc6:	2d03      	cmp	r5, #3
 8008bc8:	d0e2      	beq.n	8008b90 <_scanf_float+0x1d0>
 8008bca:	2d05      	cmp	r5, #5
 8008bcc:	e7de      	b.n	8008b8c <_scanf_float+0x1cc>
 8008bce:	2d02      	cmp	r5, #2
 8008bd0:	f47f af26 	bne.w	8008a20 <_scanf_float+0x60>
 8008bd4:	2503      	movs	r5, #3
 8008bd6:	e7b7      	b.n	8008b48 <_scanf_float+0x188>
 8008bd8:	2d06      	cmp	r5, #6
 8008bda:	f47f af21 	bne.w	8008a20 <_scanf_float+0x60>
 8008bde:	2507      	movs	r5, #7
 8008be0:	e7b2      	b.n	8008b48 <_scanf_float+0x188>
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	0591      	lsls	r1, r2, #22
 8008be6:	f57f af1b 	bpl.w	8008a20 <_scanf_float+0x60>
 8008bea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008bee:	6022      	str	r2, [r4, #0]
 8008bf0:	f8cd 9004 	str.w	r9, [sp, #4]
 8008bf4:	e7a8      	b.n	8008b48 <_scanf_float+0x188>
 8008bf6:	6822      	ldr	r2, [r4, #0]
 8008bf8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008bfc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008c00:	d006      	beq.n	8008c10 <_scanf_float+0x250>
 8008c02:	0550      	lsls	r0, r2, #21
 8008c04:	f57f af0c 	bpl.w	8008a20 <_scanf_float+0x60>
 8008c08:	f1b9 0f00 	cmp.w	r9, #0
 8008c0c:	f43f af0f 	beq.w	8008a2e <_scanf_float+0x6e>
 8008c10:	0591      	lsls	r1, r2, #22
 8008c12:	bf58      	it	pl
 8008c14:	9901      	ldrpl	r1, [sp, #4]
 8008c16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008c1a:	bf58      	it	pl
 8008c1c:	eba9 0101 	subpl.w	r1, r9, r1
 8008c20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008c24:	bf58      	it	pl
 8008c26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	f04f 0900 	mov.w	r9, #0
 8008c30:	e78a      	b.n	8008b48 <_scanf_float+0x188>
 8008c32:	f04f 0a03 	mov.w	sl, #3
 8008c36:	e787      	b.n	8008b48 <_scanf_float+0x188>
 8008c38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	4640      	mov	r0, r8
 8008c40:	4798      	blx	r3
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f43f aedf 	beq.w	8008a06 <_scanf_float+0x46>
 8008c48:	e6ea      	b.n	8008a20 <_scanf_float+0x60>
 8008c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c52:	463a      	mov	r2, r7
 8008c54:	4640      	mov	r0, r8
 8008c56:	4798      	blx	r3
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	6123      	str	r3, [r4, #16]
 8008c5e:	e6ec      	b.n	8008a3a <_scanf_float+0x7a>
 8008c60:	1e6b      	subs	r3, r5, #1
 8008c62:	2b06      	cmp	r3, #6
 8008c64:	d825      	bhi.n	8008cb2 <_scanf_float+0x2f2>
 8008c66:	2d02      	cmp	r5, #2
 8008c68:	d836      	bhi.n	8008cd8 <_scanf_float+0x318>
 8008c6a:	455e      	cmp	r6, fp
 8008c6c:	f67f aee8 	bls.w	8008a40 <_scanf_float+0x80>
 8008c70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c78:	463a      	mov	r2, r7
 8008c7a:	4640      	mov	r0, r8
 8008c7c:	4798      	blx	r3
 8008c7e:	6923      	ldr	r3, [r4, #16]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	6123      	str	r3, [r4, #16]
 8008c84:	e7f1      	b.n	8008c6a <_scanf_float+0x2aa>
 8008c86:	9802      	ldr	r0, [sp, #8]
 8008c88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c90:	9002      	str	r0, [sp, #8]
 8008c92:	463a      	mov	r2, r7
 8008c94:	4640      	mov	r0, r8
 8008c96:	4798      	blx	r3
 8008c98:	6923      	ldr	r3, [r4, #16]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008ca2:	fa5f fa8a 	uxtb.w	sl, sl
 8008ca6:	f1ba 0f02 	cmp.w	sl, #2
 8008caa:	d1ec      	bne.n	8008c86 <_scanf_float+0x2c6>
 8008cac:	3d03      	subs	r5, #3
 8008cae:	b2ed      	uxtb	r5, r5
 8008cb0:	1b76      	subs	r6, r6, r5
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	05da      	lsls	r2, r3, #23
 8008cb6:	d52f      	bpl.n	8008d18 <_scanf_float+0x358>
 8008cb8:	055b      	lsls	r3, r3, #21
 8008cba:	d510      	bpl.n	8008cde <_scanf_float+0x31e>
 8008cbc:	455e      	cmp	r6, fp
 8008cbe:	f67f aebf 	bls.w	8008a40 <_scanf_float+0x80>
 8008cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cca:	463a      	mov	r2, r7
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4798      	blx	r3
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	e7f1      	b.n	8008cbc <_scanf_float+0x2fc>
 8008cd8:	46aa      	mov	sl, r5
 8008cda:	9602      	str	r6, [sp, #8]
 8008cdc:	e7df      	b.n	8008c9e <_scanf_float+0x2de>
 8008cde:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ce2:	6923      	ldr	r3, [r4, #16]
 8008ce4:	2965      	cmp	r1, #101	; 0x65
 8008ce6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008cea:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008cee:	6123      	str	r3, [r4, #16]
 8008cf0:	d00c      	beq.n	8008d0c <_scanf_float+0x34c>
 8008cf2:	2945      	cmp	r1, #69	; 0x45
 8008cf4:	d00a      	beq.n	8008d0c <_scanf_float+0x34c>
 8008cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008cfa:	463a      	mov	r2, r7
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	4798      	blx	r3
 8008d00:	6923      	ldr	r3, [r4, #16]
 8008d02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	1eb5      	subs	r5, r6, #2
 8008d0a:	6123      	str	r3, [r4, #16]
 8008d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d10:	463a      	mov	r2, r7
 8008d12:	4640      	mov	r0, r8
 8008d14:	4798      	blx	r3
 8008d16:	462e      	mov	r6, r5
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	f015 0510 	ands.w	r5, r5, #16
 8008d1e:	d159      	bne.n	8008dd4 <_scanf_float+0x414>
 8008d20:	7035      	strb	r5, [r6, #0]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2c:	d11b      	bne.n	8008d66 <_scanf_float+0x3a6>
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	454b      	cmp	r3, r9
 8008d32:	eba3 0209 	sub.w	r2, r3, r9
 8008d36:	d123      	bne.n	8008d80 <_scanf_float+0x3c0>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4659      	mov	r1, fp
 8008d3c:	4640      	mov	r0, r8
 8008d3e:	f000 ffa5 	bl	8009c8c <_strtod_r>
 8008d42:	6822      	ldr	r2, [r4, #0]
 8008d44:	9b03      	ldr	r3, [sp, #12]
 8008d46:	f012 0f02 	tst.w	r2, #2
 8008d4a:	ec57 6b10 	vmov	r6, r7, d0
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	d021      	beq.n	8008d96 <_scanf_float+0x3d6>
 8008d52:	9903      	ldr	r1, [sp, #12]
 8008d54:	1d1a      	adds	r2, r3, #4
 8008d56:	600a      	str	r2, [r1, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	e9c3 6700 	strd	r6, r7, [r3]
 8008d5e:	68e3      	ldr	r3, [r4, #12]
 8008d60:	3301      	adds	r3, #1
 8008d62:	60e3      	str	r3, [r4, #12]
 8008d64:	e66d      	b.n	8008a42 <_scanf_float+0x82>
 8008d66:	9b04      	ldr	r3, [sp, #16]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0e5      	beq.n	8008d38 <_scanf_float+0x378>
 8008d6c:	9905      	ldr	r1, [sp, #20]
 8008d6e:	230a      	movs	r3, #10
 8008d70:	462a      	mov	r2, r5
 8008d72:	3101      	adds	r1, #1
 8008d74:	4640      	mov	r0, r8
 8008d76:	f001 f811 	bl	8009d9c <_strtol_r>
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	9e05      	ldr	r6, [sp, #20]
 8008d7e:	1ac2      	subs	r2, r0, r3
 8008d80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008d84:	429e      	cmp	r6, r3
 8008d86:	bf28      	it	cs
 8008d88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d8c:	4912      	ldr	r1, [pc, #72]	; (8008dd8 <_scanf_float+0x418>)
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f000 f938 	bl	8009004 <siprintf>
 8008d94:	e7d0      	b.n	8008d38 <_scanf_float+0x378>
 8008d96:	9903      	ldr	r1, [sp, #12]
 8008d98:	f012 0f04 	tst.w	r2, #4
 8008d9c:	f103 0204 	add.w	r2, r3, #4
 8008da0:	600a      	str	r2, [r1, #0]
 8008da2:	d1d9      	bne.n	8008d58 <_scanf_float+0x398>
 8008da4:	f8d3 8000 	ldr.w	r8, [r3]
 8008da8:	ee10 2a10 	vmov	r2, s0
 8008dac:	ee10 0a10 	vmov	r0, s0
 8008db0:	463b      	mov	r3, r7
 8008db2:	4639      	mov	r1, r7
 8008db4:	f7f7 fed2 	bl	8000b5c <__aeabi_dcmpun>
 8008db8:	b128      	cbz	r0, 8008dc6 <_scanf_float+0x406>
 8008dba:	4808      	ldr	r0, [pc, #32]	; (8008ddc <_scanf_float+0x41c>)
 8008dbc:	f000 f91c 	bl	8008ff8 <nanf>
 8008dc0:	ed88 0a00 	vstr	s0, [r8]
 8008dc4:	e7cb      	b.n	8008d5e <_scanf_float+0x39e>
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	f7f7 ff25 	bl	8000c18 <__aeabi_d2f>
 8008dce:	f8c8 0000 	str.w	r0, [r8]
 8008dd2:	e7c4      	b.n	8008d5e <_scanf_float+0x39e>
 8008dd4:	2500      	movs	r5, #0
 8008dd6:	e634      	b.n	8008a42 <_scanf_float+0x82>
 8008dd8:	0800e226 	.word	0x0800e226
 8008ddc:	0800e6b3 	.word	0x0800e6b3

08008de0 <iprintf>:
 8008de0:	b40f      	push	{r0, r1, r2, r3}
 8008de2:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <iprintf+0x2c>)
 8008de4:	b513      	push	{r0, r1, r4, lr}
 8008de6:	681c      	ldr	r4, [r3, #0]
 8008de8:	b124      	cbz	r4, 8008df4 <iprintf+0x14>
 8008dea:	69a3      	ldr	r3, [r4, #24]
 8008dec:	b913      	cbnz	r3, 8008df4 <iprintf+0x14>
 8008dee:	4620      	mov	r0, r4
 8008df0:	f001 ff7c 	bl	800acec <__sinit>
 8008df4:	ab05      	add	r3, sp, #20
 8008df6:	9a04      	ldr	r2, [sp, #16]
 8008df8:	68a1      	ldr	r1, [r4, #8]
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f003 fb63 	bl	800c4c8 <_vfiprintf_r>
 8008e02:	b002      	add	sp, #8
 8008e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e08:	b004      	add	sp, #16
 8008e0a:	4770      	bx	lr
 8008e0c:	20000018 	.word	0x20000018

08008e10 <putchar>:
 8008e10:	4b09      	ldr	r3, [pc, #36]	; (8008e38 <putchar+0x28>)
 8008e12:	b513      	push	{r0, r1, r4, lr}
 8008e14:	681c      	ldr	r4, [r3, #0]
 8008e16:	4601      	mov	r1, r0
 8008e18:	b134      	cbz	r4, 8008e28 <putchar+0x18>
 8008e1a:	69a3      	ldr	r3, [r4, #24]
 8008e1c:	b923      	cbnz	r3, 8008e28 <putchar+0x18>
 8008e1e:	9001      	str	r0, [sp, #4]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f001 ff63 	bl	800acec <__sinit>
 8008e26:	9901      	ldr	r1, [sp, #4]
 8008e28:	68a2      	ldr	r2, [r4, #8]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	b002      	add	sp, #8
 8008e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e32:	f003 bf99 	b.w	800cd68 <_putc_r>
 8008e36:	bf00      	nop
 8008e38:	20000018 	.word	0x20000018

08008e3c <iscanf>:
 8008e3c:	b40f      	push	{r0, r1, r2, r3}
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <iscanf+0x2c>)
 8008e40:	b513      	push	{r0, r1, r4, lr}
 8008e42:	681c      	ldr	r4, [r3, #0]
 8008e44:	b124      	cbz	r4, 8008e50 <iscanf+0x14>
 8008e46:	69a3      	ldr	r3, [r4, #24]
 8008e48:	b913      	cbnz	r3, 8008e50 <iscanf+0x14>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f001 ff4e 	bl	800acec <__sinit>
 8008e50:	ab05      	add	r3, sp, #20
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	6861      	ldr	r1, [r4, #4]
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f003 fe0b 	bl	800ca74 <_vfiscanf_r>
 8008e5e:	b002      	add	sp, #8
 8008e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e64:	b004      	add	sp, #16
 8008e66:	4770      	bx	lr
 8008e68:	20000018 	.word	0x20000018

08008e6c <setvbuf>:
 8008e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	461d      	mov	r5, r3
 8008e72:	4b5d      	ldr	r3, [pc, #372]	; (8008fe8 <setvbuf+0x17c>)
 8008e74:	681f      	ldr	r7, [r3, #0]
 8008e76:	4604      	mov	r4, r0
 8008e78:	460e      	mov	r6, r1
 8008e7a:	4690      	mov	r8, r2
 8008e7c:	b127      	cbz	r7, 8008e88 <setvbuf+0x1c>
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	b913      	cbnz	r3, 8008e88 <setvbuf+0x1c>
 8008e82:	4638      	mov	r0, r7
 8008e84:	f001 ff32 	bl	800acec <__sinit>
 8008e88:	4b58      	ldr	r3, [pc, #352]	; (8008fec <setvbuf+0x180>)
 8008e8a:	429c      	cmp	r4, r3
 8008e8c:	d167      	bne.n	8008f5e <setvbuf+0xf2>
 8008e8e:	687c      	ldr	r4, [r7, #4]
 8008e90:	f1b8 0f02 	cmp.w	r8, #2
 8008e94:	d006      	beq.n	8008ea4 <setvbuf+0x38>
 8008e96:	f1b8 0f01 	cmp.w	r8, #1
 8008e9a:	f200 809f 	bhi.w	8008fdc <setvbuf+0x170>
 8008e9e:	2d00      	cmp	r5, #0
 8008ea0:	f2c0 809c 	blt.w	8008fdc <setvbuf+0x170>
 8008ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ea6:	07db      	lsls	r3, r3, #31
 8008ea8:	d405      	bmi.n	8008eb6 <setvbuf+0x4a>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	0598      	lsls	r0, r3, #22
 8008eae:	d402      	bmi.n	8008eb6 <setvbuf+0x4a>
 8008eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb2:	f002 fb4a 	bl	800b54a <__retarget_lock_acquire_recursive>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f001 fe71 	bl	800aba0 <_fflush_r>
 8008ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ec0:	b141      	cbz	r1, 8008ed4 <setvbuf+0x68>
 8008ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	d002      	beq.n	8008ed0 <setvbuf+0x64>
 8008eca:	4638      	mov	r0, r7
 8008ecc:	f003 f896 	bl	800bffc <_free_r>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6363      	str	r3, [r4, #52]	; 0x34
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	61a3      	str	r3, [r4, #24]
 8008ed8:	6063      	str	r3, [r4, #4]
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	0619      	lsls	r1, r3, #24
 8008ede:	d503      	bpl.n	8008ee8 <setvbuf+0x7c>
 8008ee0:	6921      	ldr	r1, [r4, #16]
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	f003 f88a 	bl	800bffc <_free_r>
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008eee:	f023 0303 	bic.w	r3, r3, #3
 8008ef2:	f1b8 0f02 	cmp.w	r8, #2
 8008ef6:	81a3      	strh	r3, [r4, #12]
 8008ef8:	d06c      	beq.n	8008fd4 <setvbuf+0x168>
 8008efa:	ab01      	add	r3, sp, #4
 8008efc:	466a      	mov	r2, sp
 8008efe:	4621      	mov	r1, r4
 8008f00:	4638      	mov	r0, r7
 8008f02:	f002 fb24 	bl	800b54e <__swhatbuf_r>
 8008f06:	89a3      	ldrh	r3, [r4, #12]
 8008f08:	4318      	orrs	r0, r3
 8008f0a:	81a0      	strh	r0, [r4, #12]
 8008f0c:	2d00      	cmp	r5, #0
 8008f0e:	d130      	bne.n	8008f72 <setvbuf+0x106>
 8008f10:	9d00      	ldr	r5, [sp, #0]
 8008f12:	4628      	mov	r0, r5
 8008f14:	f002 fb80 	bl	800b618 <malloc>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	d155      	bne.n	8008fca <setvbuf+0x15e>
 8008f1e:	f8dd 9000 	ldr.w	r9, [sp]
 8008f22:	45a9      	cmp	r9, r5
 8008f24:	d14a      	bne.n	8008fbc <setvbuf+0x150>
 8008f26:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	60a2      	str	r2, [r4, #8]
 8008f2e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008f32:	6022      	str	r2, [r4, #0]
 8008f34:	6122      	str	r2, [r4, #16]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f3c:	6162      	str	r2, [r4, #20]
 8008f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f40:	f043 0302 	orr.w	r3, r3, #2
 8008f44:	07d2      	lsls	r2, r2, #31
 8008f46:	81a3      	strh	r3, [r4, #12]
 8008f48:	d405      	bmi.n	8008f56 <setvbuf+0xea>
 8008f4a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008f4e:	d102      	bne.n	8008f56 <setvbuf+0xea>
 8008f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f52:	f002 fafb 	bl	800b54c <__retarget_lock_release_recursive>
 8008f56:	4628      	mov	r0, r5
 8008f58:	b003      	add	sp, #12
 8008f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	4b24      	ldr	r3, [pc, #144]	; (8008ff0 <setvbuf+0x184>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d101      	bne.n	8008f68 <setvbuf+0xfc>
 8008f64:	68bc      	ldr	r4, [r7, #8]
 8008f66:	e793      	b.n	8008e90 <setvbuf+0x24>
 8008f68:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <setvbuf+0x188>)
 8008f6a:	429c      	cmp	r4, r3
 8008f6c:	bf08      	it	eq
 8008f6e:	68fc      	ldreq	r4, [r7, #12]
 8008f70:	e78e      	b.n	8008e90 <setvbuf+0x24>
 8008f72:	2e00      	cmp	r6, #0
 8008f74:	d0cd      	beq.n	8008f12 <setvbuf+0xa6>
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	b913      	cbnz	r3, 8008f80 <setvbuf+0x114>
 8008f7a:	4638      	mov	r0, r7
 8008f7c:	f001 feb6 	bl	800acec <__sinit>
 8008f80:	f1b8 0f01 	cmp.w	r8, #1
 8008f84:	bf08      	it	eq
 8008f86:	89a3      	ldrheq	r3, [r4, #12]
 8008f88:	6026      	str	r6, [r4, #0]
 8008f8a:	bf04      	itt	eq
 8008f8c:	f043 0301 	orreq.w	r3, r3, #1
 8008f90:	81a3      	strheq	r3, [r4, #12]
 8008f92:	89a2      	ldrh	r2, [r4, #12]
 8008f94:	f012 0308 	ands.w	r3, r2, #8
 8008f98:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008f9c:	d01c      	beq.n	8008fd8 <setvbuf+0x16c>
 8008f9e:	07d3      	lsls	r3, r2, #31
 8008fa0:	bf41      	itttt	mi
 8008fa2:	2300      	movmi	r3, #0
 8008fa4:	426d      	negmi	r5, r5
 8008fa6:	60a3      	strmi	r3, [r4, #8]
 8008fa8:	61a5      	strmi	r5, [r4, #24]
 8008faa:	bf58      	it	pl
 8008fac:	60a5      	strpl	r5, [r4, #8]
 8008fae:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008fb0:	f015 0501 	ands.w	r5, r5, #1
 8008fb4:	d115      	bne.n	8008fe2 <setvbuf+0x176>
 8008fb6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008fba:	e7c8      	b.n	8008f4e <setvbuf+0xe2>
 8008fbc:	4648      	mov	r0, r9
 8008fbe:	f002 fb2b 	bl	800b618 <malloc>
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d0ae      	beq.n	8008f26 <setvbuf+0xba>
 8008fc8:	464d      	mov	r5, r9
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	e7d0      	b.n	8008f76 <setvbuf+0x10a>
 8008fd4:	2500      	movs	r5, #0
 8008fd6:	e7a8      	b.n	8008f2a <setvbuf+0xbe>
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	e7e8      	b.n	8008fae <setvbuf+0x142>
 8008fdc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008fe0:	e7b9      	b.n	8008f56 <setvbuf+0xea>
 8008fe2:	2500      	movs	r5, #0
 8008fe4:	e7b7      	b.n	8008f56 <setvbuf+0xea>
 8008fe6:	bf00      	nop
 8008fe8:	20000018 	.word	0x20000018
 8008fec:	0800e434 	.word	0x0800e434
 8008ff0:	0800e454 	.word	0x0800e454
 8008ff4:	0800e414 	.word	0x0800e414

08008ff8 <nanf>:
 8008ff8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009000 <nanf+0x8>
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	7fc00000 	.word	0x7fc00000

08009004 <siprintf>:
 8009004:	b40e      	push	{r1, r2, r3}
 8009006:	b500      	push	{lr}
 8009008:	b09c      	sub	sp, #112	; 0x70
 800900a:	ab1d      	add	r3, sp, #116	; 0x74
 800900c:	9002      	str	r0, [sp, #8]
 800900e:	9006      	str	r0, [sp, #24]
 8009010:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009014:	4809      	ldr	r0, [pc, #36]	; (800903c <siprintf+0x38>)
 8009016:	9107      	str	r1, [sp, #28]
 8009018:	9104      	str	r1, [sp, #16]
 800901a:	4909      	ldr	r1, [pc, #36]	; (8009040 <siprintf+0x3c>)
 800901c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009020:	9105      	str	r1, [sp, #20]
 8009022:	6800      	ldr	r0, [r0, #0]
 8009024:	9301      	str	r3, [sp, #4]
 8009026:	a902      	add	r1, sp, #8
 8009028:	f003 f924 	bl	800c274 <_svfiprintf_r>
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
 8009032:	b01c      	add	sp, #112	; 0x70
 8009034:	f85d eb04 	ldr.w	lr, [sp], #4
 8009038:	b003      	add	sp, #12
 800903a:	4770      	bx	lr
 800903c:	20000018 	.word	0x20000018
 8009040:	ffff0208 	.word	0xffff0208

08009044 <sulp>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1
 800904a:	ec45 4b10 	vmov	d0, r4, r5
 800904e:	4616      	mov	r6, r2
 8009050:	f002 fe6e 	bl	800bd30 <__ulp>
 8009054:	ec51 0b10 	vmov	r0, r1, d0
 8009058:	b17e      	cbz	r6, 800907a <sulp+0x36>
 800905a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800905e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009062:	2b00      	cmp	r3, #0
 8009064:	dd09      	ble.n	800907a <sulp+0x36>
 8009066:	051b      	lsls	r3, r3, #20
 8009068:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800906c:	2400      	movs	r4, #0
 800906e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009072:	4622      	mov	r2, r4
 8009074:	462b      	mov	r3, r5
 8009076:	f7f7 fad7 	bl	8000628 <__aeabi_dmul>
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	0000      	movs	r0, r0
	...

08009080 <_strtod_l>:
 8009080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009084:	ed2d 8b02 	vpush	{d8}
 8009088:	b09d      	sub	sp, #116	; 0x74
 800908a:	461f      	mov	r7, r3
 800908c:	2300      	movs	r3, #0
 800908e:	9318      	str	r3, [sp, #96]	; 0x60
 8009090:	4ba2      	ldr	r3, [pc, #648]	; (800931c <_strtod_l+0x29c>)
 8009092:	9213      	str	r2, [sp, #76]	; 0x4c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	4604      	mov	r4, r0
 800909a:	4618      	mov	r0, r3
 800909c:	4688      	mov	r8, r1
 800909e:	f7f7 f8af 	bl	8000200 <strlen>
 80090a2:	f04f 0a00 	mov.w	sl, #0
 80090a6:	4605      	mov	r5, r0
 80090a8:	f04f 0b00 	mov.w	fp, #0
 80090ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80090b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090b2:	781a      	ldrb	r2, [r3, #0]
 80090b4:	2a2b      	cmp	r2, #43	; 0x2b
 80090b6:	d04e      	beq.n	8009156 <_strtod_l+0xd6>
 80090b8:	d83b      	bhi.n	8009132 <_strtod_l+0xb2>
 80090ba:	2a0d      	cmp	r2, #13
 80090bc:	d834      	bhi.n	8009128 <_strtod_l+0xa8>
 80090be:	2a08      	cmp	r2, #8
 80090c0:	d834      	bhi.n	800912c <_strtod_l+0xac>
 80090c2:	2a00      	cmp	r2, #0
 80090c4:	d03e      	beq.n	8009144 <_strtod_l+0xc4>
 80090c6:	2300      	movs	r3, #0
 80090c8:	930a      	str	r3, [sp, #40]	; 0x28
 80090ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80090cc:	7833      	ldrb	r3, [r6, #0]
 80090ce:	2b30      	cmp	r3, #48	; 0x30
 80090d0:	f040 80b0 	bne.w	8009234 <_strtod_l+0x1b4>
 80090d4:	7873      	ldrb	r3, [r6, #1]
 80090d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80090da:	2b58      	cmp	r3, #88	; 0x58
 80090dc:	d168      	bne.n	80091b0 <_strtod_l+0x130>
 80090de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	ab18      	add	r3, sp, #96	; 0x60
 80090e4:	9702      	str	r7, [sp, #8]
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	4a8d      	ldr	r2, [pc, #564]	; (8009320 <_strtod_l+0x2a0>)
 80090ea:	ab19      	add	r3, sp, #100	; 0x64
 80090ec:	a917      	add	r1, sp, #92	; 0x5c
 80090ee:	4620      	mov	r0, r4
 80090f0:	f001 ff1e 	bl	800af30 <__gethex>
 80090f4:	f010 0707 	ands.w	r7, r0, #7
 80090f8:	4605      	mov	r5, r0
 80090fa:	d005      	beq.n	8009108 <_strtod_l+0x88>
 80090fc:	2f06      	cmp	r7, #6
 80090fe:	d12c      	bne.n	800915a <_strtod_l+0xda>
 8009100:	3601      	adds	r6, #1
 8009102:	2300      	movs	r3, #0
 8009104:	9617      	str	r6, [sp, #92]	; 0x5c
 8009106:	930a      	str	r3, [sp, #40]	; 0x28
 8009108:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800910a:	2b00      	cmp	r3, #0
 800910c:	f040 8590 	bne.w	8009c30 <_strtod_l+0xbb0>
 8009110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009112:	b1eb      	cbz	r3, 8009150 <_strtod_l+0xd0>
 8009114:	4652      	mov	r2, sl
 8009116:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800911a:	ec43 2b10 	vmov	d0, r2, r3
 800911e:	b01d      	add	sp, #116	; 0x74
 8009120:	ecbd 8b02 	vpop	{d8}
 8009124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009128:	2a20      	cmp	r2, #32
 800912a:	d1cc      	bne.n	80090c6 <_strtod_l+0x46>
 800912c:	3301      	adds	r3, #1
 800912e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009130:	e7be      	b.n	80090b0 <_strtod_l+0x30>
 8009132:	2a2d      	cmp	r2, #45	; 0x2d
 8009134:	d1c7      	bne.n	80090c6 <_strtod_l+0x46>
 8009136:	2201      	movs	r2, #1
 8009138:	920a      	str	r2, [sp, #40]	; 0x28
 800913a:	1c5a      	adds	r2, r3, #1
 800913c:	9217      	str	r2, [sp, #92]	; 0x5c
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d1c2      	bne.n	80090ca <_strtod_l+0x4a>
 8009144:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009146:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800914a:	2b00      	cmp	r3, #0
 800914c:	f040 856e 	bne.w	8009c2c <_strtod_l+0xbac>
 8009150:	4652      	mov	r2, sl
 8009152:	465b      	mov	r3, fp
 8009154:	e7e1      	b.n	800911a <_strtod_l+0x9a>
 8009156:	2200      	movs	r2, #0
 8009158:	e7ee      	b.n	8009138 <_strtod_l+0xb8>
 800915a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800915c:	b13a      	cbz	r2, 800916e <_strtod_l+0xee>
 800915e:	2135      	movs	r1, #53	; 0x35
 8009160:	a81a      	add	r0, sp, #104	; 0x68
 8009162:	f002 fef0 	bl	800bf46 <__copybits>
 8009166:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009168:	4620      	mov	r0, r4
 800916a:	f002 faaf 	bl	800b6cc <_Bfree>
 800916e:	3f01      	subs	r7, #1
 8009170:	2f04      	cmp	r7, #4
 8009172:	d806      	bhi.n	8009182 <_strtod_l+0x102>
 8009174:	e8df f007 	tbb	[pc, r7]
 8009178:	1714030a 	.word	0x1714030a
 800917c:	0a          	.byte	0x0a
 800917d:	00          	.byte	0x00
 800917e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009182:	0728      	lsls	r0, r5, #28
 8009184:	d5c0      	bpl.n	8009108 <_strtod_l+0x88>
 8009186:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800918a:	e7bd      	b.n	8009108 <_strtod_l+0x88>
 800918c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009190:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009192:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009196:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800919a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800919e:	e7f0      	b.n	8009182 <_strtod_l+0x102>
 80091a0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009324 <_strtod_l+0x2a4>
 80091a4:	e7ed      	b.n	8009182 <_strtod_l+0x102>
 80091a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80091aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80091ae:	e7e8      	b.n	8009182 <_strtod_l+0x102>
 80091b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	9217      	str	r2, [sp, #92]	; 0x5c
 80091b6:	785b      	ldrb	r3, [r3, #1]
 80091b8:	2b30      	cmp	r3, #48	; 0x30
 80091ba:	d0f9      	beq.n	80091b0 <_strtod_l+0x130>
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d0a3      	beq.n	8009108 <_strtod_l+0x88>
 80091c0:	2301      	movs	r3, #1
 80091c2:	f04f 0900 	mov.w	r9, #0
 80091c6:	9304      	str	r3, [sp, #16]
 80091c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091ca:	9308      	str	r3, [sp, #32]
 80091cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80091d0:	464f      	mov	r7, r9
 80091d2:	220a      	movs	r2, #10
 80091d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80091d6:	7806      	ldrb	r6, [r0, #0]
 80091d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80091dc:	b2d9      	uxtb	r1, r3
 80091de:	2909      	cmp	r1, #9
 80091e0:	d92a      	bls.n	8009238 <_strtod_l+0x1b8>
 80091e2:	9905      	ldr	r1, [sp, #20]
 80091e4:	462a      	mov	r2, r5
 80091e6:	f003 ff2e 	bl	800d046 <strncmp>
 80091ea:	b398      	cbz	r0, 8009254 <_strtod_l+0x1d4>
 80091ec:	2000      	movs	r0, #0
 80091ee:	4632      	mov	r2, r6
 80091f0:	463d      	mov	r5, r7
 80091f2:	9005      	str	r0, [sp, #20]
 80091f4:	4603      	mov	r3, r0
 80091f6:	2a65      	cmp	r2, #101	; 0x65
 80091f8:	d001      	beq.n	80091fe <_strtod_l+0x17e>
 80091fa:	2a45      	cmp	r2, #69	; 0x45
 80091fc:	d118      	bne.n	8009230 <_strtod_l+0x1b0>
 80091fe:	b91d      	cbnz	r5, 8009208 <_strtod_l+0x188>
 8009200:	9a04      	ldr	r2, [sp, #16]
 8009202:	4302      	orrs	r2, r0
 8009204:	d09e      	beq.n	8009144 <_strtod_l+0xc4>
 8009206:	2500      	movs	r5, #0
 8009208:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800920c:	f108 0201 	add.w	r2, r8, #1
 8009210:	9217      	str	r2, [sp, #92]	; 0x5c
 8009212:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009216:	2a2b      	cmp	r2, #43	; 0x2b
 8009218:	d075      	beq.n	8009306 <_strtod_l+0x286>
 800921a:	2a2d      	cmp	r2, #45	; 0x2d
 800921c:	d07b      	beq.n	8009316 <_strtod_l+0x296>
 800921e:	f04f 0c00 	mov.w	ip, #0
 8009222:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009226:	2909      	cmp	r1, #9
 8009228:	f240 8082 	bls.w	8009330 <_strtod_l+0x2b0>
 800922c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009230:	2600      	movs	r6, #0
 8009232:	e09d      	b.n	8009370 <_strtod_l+0x2f0>
 8009234:	2300      	movs	r3, #0
 8009236:	e7c4      	b.n	80091c2 <_strtod_l+0x142>
 8009238:	2f08      	cmp	r7, #8
 800923a:	bfd8      	it	le
 800923c:	9907      	ldrle	r1, [sp, #28]
 800923e:	f100 0001 	add.w	r0, r0, #1
 8009242:	bfda      	itte	le
 8009244:	fb02 3301 	mlale	r3, r2, r1, r3
 8009248:	9307      	strle	r3, [sp, #28]
 800924a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800924e:	3701      	adds	r7, #1
 8009250:	9017      	str	r0, [sp, #92]	; 0x5c
 8009252:	e7bf      	b.n	80091d4 <_strtod_l+0x154>
 8009254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009256:	195a      	adds	r2, r3, r5
 8009258:	9217      	str	r2, [sp, #92]	; 0x5c
 800925a:	5d5a      	ldrb	r2, [r3, r5]
 800925c:	2f00      	cmp	r7, #0
 800925e:	d037      	beq.n	80092d0 <_strtod_l+0x250>
 8009260:	9005      	str	r0, [sp, #20]
 8009262:	463d      	mov	r5, r7
 8009264:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009268:	2b09      	cmp	r3, #9
 800926a:	d912      	bls.n	8009292 <_strtod_l+0x212>
 800926c:	2301      	movs	r3, #1
 800926e:	e7c2      	b.n	80091f6 <_strtod_l+0x176>
 8009270:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009272:	1c5a      	adds	r2, r3, #1
 8009274:	9217      	str	r2, [sp, #92]	; 0x5c
 8009276:	785a      	ldrb	r2, [r3, #1]
 8009278:	3001      	adds	r0, #1
 800927a:	2a30      	cmp	r2, #48	; 0x30
 800927c:	d0f8      	beq.n	8009270 <_strtod_l+0x1f0>
 800927e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009282:	2b08      	cmp	r3, #8
 8009284:	f200 84d9 	bhi.w	8009c3a <_strtod_l+0xbba>
 8009288:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800928a:	9005      	str	r0, [sp, #20]
 800928c:	2000      	movs	r0, #0
 800928e:	9308      	str	r3, [sp, #32]
 8009290:	4605      	mov	r5, r0
 8009292:	3a30      	subs	r2, #48	; 0x30
 8009294:	f100 0301 	add.w	r3, r0, #1
 8009298:	d014      	beq.n	80092c4 <_strtod_l+0x244>
 800929a:	9905      	ldr	r1, [sp, #20]
 800929c:	4419      	add	r1, r3
 800929e:	9105      	str	r1, [sp, #20]
 80092a0:	462b      	mov	r3, r5
 80092a2:	eb00 0e05 	add.w	lr, r0, r5
 80092a6:	210a      	movs	r1, #10
 80092a8:	4573      	cmp	r3, lr
 80092aa:	d113      	bne.n	80092d4 <_strtod_l+0x254>
 80092ac:	182b      	adds	r3, r5, r0
 80092ae:	2b08      	cmp	r3, #8
 80092b0:	f105 0501 	add.w	r5, r5, #1
 80092b4:	4405      	add	r5, r0
 80092b6:	dc1c      	bgt.n	80092f2 <_strtod_l+0x272>
 80092b8:	9907      	ldr	r1, [sp, #28]
 80092ba:	230a      	movs	r3, #10
 80092bc:	fb03 2301 	mla	r3, r3, r1, r2
 80092c0:	9307      	str	r3, [sp, #28]
 80092c2:	2300      	movs	r3, #0
 80092c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80092c6:	1c51      	adds	r1, r2, #1
 80092c8:	9117      	str	r1, [sp, #92]	; 0x5c
 80092ca:	7852      	ldrb	r2, [r2, #1]
 80092cc:	4618      	mov	r0, r3
 80092ce:	e7c9      	b.n	8009264 <_strtod_l+0x1e4>
 80092d0:	4638      	mov	r0, r7
 80092d2:	e7d2      	b.n	800927a <_strtod_l+0x1fa>
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	dc04      	bgt.n	80092e2 <_strtod_l+0x262>
 80092d8:	9e07      	ldr	r6, [sp, #28]
 80092da:	434e      	muls	r6, r1
 80092dc:	9607      	str	r6, [sp, #28]
 80092de:	3301      	adds	r3, #1
 80092e0:	e7e2      	b.n	80092a8 <_strtod_l+0x228>
 80092e2:	f103 0c01 	add.w	ip, r3, #1
 80092e6:	f1bc 0f10 	cmp.w	ip, #16
 80092ea:	bfd8      	it	le
 80092ec:	fb01 f909 	mulle.w	r9, r1, r9
 80092f0:	e7f5      	b.n	80092de <_strtod_l+0x25e>
 80092f2:	2d10      	cmp	r5, #16
 80092f4:	bfdc      	itt	le
 80092f6:	230a      	movle	r3, #10
 80092f8:	fb03 2909 	mlale	r9, r3, r9, r2
 80092fc:	e7e1      	b.n	80092c2 <_strtod_l+0x242>
 80092fe:	2300      	movs	r3, #0
 8009300:	9305      	str	r3, [sp, #20]
 8009302:	2301      	movs	r3, #1
 8009304:	e77c      	b.n	8009200 <_strtod_l+0x180>
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	f108 0202 	add.w	r2, r8, #2
 800930e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009310:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009314:	e785      	b.n	8009222 <_strtod_l+0x1a2>
 8009316:	f04f 0c01 	mov.w	ip, #1
 800931a:	e7f6      	b.n	800930a <_strtod_l+0x28a>
 800931c:	0800e4dc 	.word	0x0800e4dc
 8009320:	0800e22c 	.word	0x0800e22c
 8009324:	7ff00000 	.word	0x7ff00000
 8009328:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800932a:	1c51      	adds	r1, r2, #1
 800932c:	9117      	str	r1, [sp, #92]	; 0x5c
 800932e:	7852      	ldrb	r2, [r2, #1]
 8009330:	2a30      	cmp	r2, #48	; 0x30
 8009332:	d0f9      	beq.n	8009328 <_strtod_l+0x2a8>
 8009334:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009338:	2908      	cmp	r1, #8
 800933a:	f63f af79 	bhi.w	8009230 <_strtod_l+0x1b0>
 800933e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009342:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009344:	9206      	str	r2, [sp, #24]
 8009346:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009348:	1c51      	adds	r1, r2, #1
 800934a:	9117      	str	r1, [sp, #92]	; 0x5c
 800934c:	7852      	ldrb	r2, [r2, #1]
 800934e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009352:	2e09      	cmp	r6, #9
 8009354:	d937      	bls.n	80093c6 <_strtod_l+0x346>
 8009356:	9e06      	ldr	r6, [sp, #24]
 8009358:	1b89      	subs	r1, r1, r6
 800935a:	2908      	cmp	r1, #8
 800935c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009360:	dc02      	bgt.n	8009368 <_strtod_l+0x2e8>
 8009362:	4576      	cmp	r6, lr
 8009364:	bfa8      	it	ge
 8009366:	4676      	movge	r6, lr
 8009368:	f1bc 0f00 	cmp.w	ip, #0
 800936c:	d000      	beq.n	8009370 <_strtod_l+0x2f0>
 800936e:	4276      	negs	r6, r6
 8009370:	2d00      	cmp	r5, #0
 8009372:	d14d      	bne.n	8009410 <_strtod_l+0x390>
 8009374:	9904      	ldr	r1, [sp, #16]
 8009376:	4301      	orrs	r1, r0
 8009378:	f47f aec6 	bne.w	8009108 <_strtod_l+0x88>
 800937c:	2b00      	cmp	r3, #0
 800937e:	f47f aee1 	bne.w	8009144 <_strtod_l+0xc4>
 8009382:	2a69      	cmp	r2, #105	; 0x69
 8009384:	d027      	beq.n	80093d6 <_strtod_l+0x356>
 8009386:	dc24      	bgt.n	80093d2 <_strtod_l+0x352>
 8009388:	2a49      	cmp	r2, #73	; 0x49
 800938a:	d024      	beq.n	80093d6 <_strtod_l+0x356>
 800938c:	2a4e      	cmp	r2, #78	; 0x4e
 800938e:	f47f aed9 	bne.w	8009144 <_strtod_l+0xc4>
 8009392:	499f      	ldr	r1, [pc, #636]	; (8009610 <_strtod_l+0x590>)
 8009394:	a817      	add	r0, sp, #92	; 0x5c
 8009396:	f002 f823 	bl	800b3e0 <__match>
 800939a:	2800      	cmp	r0, #0
 800939c:	f43f aed2 	beq.w	8009144 <_strtod_l+0xc4>
 80093a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b28      	cmp	r3, #40	; 0x28
 80093a6:	d12d      	bne.n	8009404 <_strtod_l+0x384>
 80093a8:	499a      	ldr	r1, [pc, #616]	; (8009614 <_strtod_l+0x594>)
 80093aa:	aa1a      	add	r2, sp, #104	; 0x68
 80093ac:	a817      	add	r0, sp, #92	; 0x5c
 80093ae:	f002 f82b 	bl	800b408 <__hexnan>
 80093b2:	2805      	cmp	r0, #5
 80093b4:	d126      	bne.n	8009404 <_strtod_l+0x384>
 80093b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80093bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80093c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80093c4:	e6a0      	b.n	8009108 <_strtod_l+0x88>
 80093c6:	210a      	movs	r1, #10
 80093c8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80093cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80093d0:	e7b9      	b.n	8009346 <_strtod_l+0x2c6>
 80093d2:	2a6e      	cmp	r2, #110	; 0x6e
 80093d4:	e7db      	b.n	800938e <_strtod_l+0x30e>
 80093d6:	4990      	ldr	r1, [pc, #576]	; (8009618 <_strtod_l+0x598>)
 80093d8:	a817      	add	r0, sp, #92	; 0x5c
 80093da:	f002 f801 	bl	800b3e0 <__match>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f43f aeb0 	beq.w	8009144 <_strtod_l+0xc4>
 80093e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093e6:	498d      	ldr	r1, [pc, #564]	; (800961c <_strtod_l+0x59c>)
 80093e8:	3b01      	subs	r3, #1
 80093ea:	a817      	add	r0, sp, #92	; 0x5c
 80093ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80093ee:	f001 fff7 	bl	800b3e0 <__match>
 80093f2:	b910      	cbnz	r0, 80093fa <_strtod_l+0x37a>
 80093f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093f6:	3301      	adds	r3, #1
 80093f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80093fa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800962c <_strtod_l+0x5ac>
 80093fe:	f04f 0a00 	mov.w	sl, #0
 8009402:	e681      	b.n	8009108 <_strtod_l+0x88>
 8009404:	4886      	ldr	r0, [pc, #536]	; (8009620 <_strtod_l+0x5a0>)
 8009406:	f003 fd8b 	bl	800cf20 <nan>
 800940a:	ec5b ab10 	vmov	sl, fp, d0
 800940e:	e67b      	b.n	8009108 <_strtod_l+0x88>
 8009410:	9b05      	ldr	r3, [sp, #20]
 8009412:	9807      	ldr	r0, [sp, #28]
 8009414:	1af3      	subs	r3, r6, r3
 8009416:	2f00      	cmp	r7, #0
 8009418:	bf08      	it	eq
 800941a:	462f      	moveq	r7, r5
 800941c:	2d10      	cmp	r5, #16
 800941e:	9306      	str	r3, [sp, #24]
 8009420:	46a8      	mov	r8, r5
 8009422:	bfa8      	it	ge
 8009424:	f04f 0810 	movge.w	r8, #16
 8009428:	f7f7 f884 	bl	8000534 <__aeabi_ui2d>
 800942c:	2d09      	cmp	r5, #9
 800942e:	4682      	mov	sl, r0
 8009430:	468b      	mov	fp, r1
 8009432:	dd13      	ble.n	800945c <_strtod_l+0x3dc>
 8009434:	4b7b      	ldr	r3, [pc, #492]	; (8009624 <_strtod_l+0x5a4>)
 8009436:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800943a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800943e:	f7f7 f8f3 	bl	8000628 <__aeabi_dmul>
 8009442:	4682      	mov	sl, r0
 8009444:	4648      	mov	r0, r9
 8009446:	468b      	mov	fp, r1
 8009448:	f7f7 f874 	bl	8000534 <__aeabi_ui2d>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4650      	mov	r0, sl
 8009452:	4659      	mov	r1, fp
 8009454:	f7f6 ff32 	bl	80002bc <__adddf3>
 8009458:	4682      	mov	sl, r0
 800945a:	468b      	mov	fp, r1
 800945c:	2d0f      	cmp	r5, #15
 800945e:	dc38      	bgt.n	80094d2 <_strtod_l+0x452>
 8009460:	9b06      	ldr	r3, [sp, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f43f ae50 	beq.w	8009108 <_strtod_l+0x88>
 8009468:	dd24      	ble.n	80094b4 <_strtod_l+0x434>
 800946a:	2b16      	cmp	r3, #22
 800946c:	dc0b      	bgt.n	8009486 <_strtod_l+0x406>
 800946e:	496d      	ldr	r1, [pc, #436]	; (8009624 <_strtod_l+0x5a4>)
 8009470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009478:	4652      	mov	r2, sl
 800947a:	465b      	mov	r3, fp
 800947c:	f7f7 f8d4 	bl	8000628 <__aeabi_dmul>
 8009480:	4682      	mov	sl, r0
 8009482:	468b      	mov	fp, r1
 8009484:	e640      	b.n	8009108 <_strtod_l+0x88>
 8009486:	9a06      	ldr	r2, [sp, #24]
 8009488:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800948c:	4293      	cmp	r3, r2
 800948e:	db20      	blt.n	80094d2 <_strtod_l+0x452>
 8009490:	4c64      	ldr	r4, [pc, #400]	; (8009624 <_strtod_l+0x5a4>)
 8009492:	f1c5 050f 	rsb	r5, r5, #15
 8009496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800949a:	4652      	mov	r2, sl
 800949c:	465b      	mov	r3, fp
 800949e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094a2:	f7f7 f8c1 	bl	8000628 <__aeabi_dmul>
 80094a6:	9b06      	ldr	r3, [sp, #24]
 80094a8:	1b5d      	subs	r5, r3, r5
 80094aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80094ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80094b2:	e7e3      	b.n	800947c <_strtod_l+0x3fc>
 80094b4:	9b06      	ldr	r3, [sp, #24]
 80094b6:	3316      	adds	r3, #22
 80094b8:	db0b      	blt.n	80094d2 <_strtod_l+0x452>
 80094ba:	9b05      	ldr	r3, [sp, #20]
 80094bc:	1b9e      	subs	r6, r3, r6
 80094be:	4b59      	ldr	r3, [pc, #356]	; (8009624 <_strtod_l+0x5a4>)
 80094c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80094c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094c8:	4650      	mov	r0, sl
 80094ca:	4659      	mov	r1, fp
 80094cc:	f7f7 f9d6 	bl	800087c <__aeabi_ddiv>
 80094d0:	e7d6      	b.n	8009480 <_strtod_l+0x400>
 80094d2:	9b06      	ldr	r3, [sp, #24]
 80094d4:	eba5 0808 	sub.w	r8, r5, r8
 80094d8:	4498      	add	r8, r3
 80094da:	f1b8 0f00 	cmp.w	r8, #0
 80094de:	dd74      	ble.n	80095ca <_strtod_l+0x54a>
 80094e0:	f018 030f 	ands.w	r3, r8, #15
 80094e4:	d00a      	beq.n	80094fc <_strtod_l+0x47c>
 80094e6:	494f      	ldr	r1, [pc, #316]	; (8009624 <_strtod_l+0x5a4>)
 80094e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094ec:	4652      	mov	r2, sl
 80094ee:	465b      	mov	r3, fp
 80094f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094f4:	f7f7 f898 	bl	8000628 <__aeabi_dmul>
 80094f8:	4682      	mov	sl, r0
 80094fa:	468b      	mov	fp, r1
 80094fc:	f038 080f 	bics.w	r8, r8, #15
 8009500:	d04f      	beq.n	80095a2 <_strtod_l+0x522>
 8009502:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009506:	dd22      	ble.n	800954e <_strtod_l+0x4ce>
 8009508:	2500      	movs	r5, #0
 800950a:	462e      	mov	r6, r5
 800950c:	9507      	str	r5, [sp, #28]
 800950e:	9505      	str	r5, [sp, #20]
 8009510:	2322      	movs	r3, #34	; 0x22
 8009512:	f8df b118 	ldr.w	fp, [pc, #280]	; 800962c <_strtod_l+0x5ac>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	f04f 0a00 	mov.w	sl, #0
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f43f adf2 	beq.w	8009108 <_strtod_l+0x88>
 8009524:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009526:	4620      	mov	r0, r4
 8009528:	f002 f8d0 	bl	800b6cc <_Bfree>
 800952c:	9905      	ldr	r1, [sp, #20]
 800952e:	4620      	mov	r0, r4
 8009530:	f002 f8cc 	bl	800b6cc <_Bfree>
 8009534:	4631      	mov	r1, r6
 8009536:	4620      	mov	r0, r4
 8009538:	f002 f8c8 	bl	800b6cc <_Bfree>
 800953c:	9907      	ldr	r1, [sp, #28]
 800953e:	4620      	mov	r0, r4
 8009540:	f002 f8c4 	bl	800b6cc <_Bfree>
 8009544:	4629      	mov	r1, r5
 8009546:	4620      	mov	r0, r4
 8009548:	f002 f8c0 	bl	800b6cc <_Bfree>
 800954c:	e5dc      	b.n	8009108 <_strtod_l+0x88>
 800954e:	4b36      	ldr	r3, [pc, #216]	; (8009628 <_strtod_l+0x5a8>)
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	2300      	movs	r3, #0
 8009554:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009558:	4650      	mov	r0, sl
 800955a:	4659      	mov	r1, fp
 800955c:	4699      	mov	r9, r3
 800955e:	f1b8 0f01 	cmp.w	r8, #1
 8009562:	dc21      	bgt.n	80095a8 <_strtod_l+0x528>
 8009564:	b10b      	cbz	r3, 800956a <_strtod_l+0x4ea>
 8009566:	4682      	mov	sl, r0
 8009568:	468b      	mov	fp, r1
 800956a:	4b2f      	ldr	r3, [pc, #188]	; (8009628 <_strtod_l+0x5a8>)
 800956c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009570:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009574:	4652      	mov	r2, sl
 8009576:	465b      	mov	r3, fp
 8009578:	e9d9 0100 	ldrd	r0, r1, [r9]
 800957c:	f7f7 f854 	bl	8000628 <__aeabi_dmul>
 8009580:	4b2a      	ldr	r3, [pc, #168]	; (800962c <_strtod_l+0x5ac>)
 8009582:	460a      	mov	r2, r1
 8009584:	400b      	ands	r3, r1
 8009586:	492a      	ldr	r1, [pc, #168]	; (8009630 <_strtod_l+0x5b0>)
 8009588:	428b      	cmp	r3, r1
 800958a:	4682      	mov	sl, r0
 800958c:	d8bc      	bhi.n	8009508 <_strtod_l+0x488>
 800958e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009592:	428b      	cmp	r3, r1
 8009594:	bf86      	itte	hi
 8009596:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009634 <_strtod_l+0x5b4>
 800959a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800959e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80095a2:	2300      	movs	r3, #0
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	e084      	b.n	80096b2 <_strtod_l+0x632>
 80095a8:	f018 0f01 	tst.w	r8, #1
 80095ac:	d005      	beq.n	80095ba <_strtod_l+0x53a>
 80095ae:	9b04      	ldr	r3, [sp, #16]
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f7 f838 	bl	8000628 <__aeabi_dmul>
 80095b8:	2301      	movs	r3, #1
 80095ba:	9a04      	ldr	r2, [sp, #16]
 80095bc:	3208      	adds	r2, #8
 80095be:	f109 0901 	add.w	r9, r9, #1
 80095c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80095c6:	9204      	str	r2, [sp, #16]
 80095c8:	e7c9      	b.n	800955e <_strtod_l+0x4de>
 80095ca:	d0ea      	beq.n	80095a2 <_strtod_l+0x522>
 80095cc:	f1c8 0800 	rsb	r8, r8, #0
 80095d0:	f018 020f 	ands.w	r2, r8, #15
 80095d4:	d00a      	beq.n	80095ec <_strtod_l+0x56c>
 80095d6:	4b13      	ldr	r3, [pc, #76]	; (8009624 <_strtod_l+0x5a4>)
 80095d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095dc:	4650      	mov	r0, sl
 80095de:	4659      	mov	r1, fp
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f7 f94a 	bl	800087c <__aeabi_ddiv>
 80095e8:	4682      	mov	sl, r0
 80095ea:	468b      	mov	fp, r1
 80095ec:	ea5f 1828 	movs.w	r8, r8, asr #4
 80095f0:	d0d7      	beq.n	80095a2 <_strtod_l+0x522>
 80095f2:	f1b8 0f1f 	cmp.w	r8, #31
 80095f6:	dd1f      	ble.n	8009638 <_strtod_l+0x5b8>
 80095f8:	2500      	movs	r5, #0
 80095fa:	462e      	mov	r6, r5
 80095fc:	9507      	str	r5, [sp, #28]
 80095fe:	9505      	str	r5, [sp, #20]
 8009600:	2322      	movs	r3, #34	; 0x22
 8009602:	f04f 0a00 	mov.w	sl, #0
 8009606:	f04f 0b00 	mov.w	fp, #0
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	e786      	b.n	800951c <_strtod_l+0x49c>
 800960e:	bf00      	nop
 8009610:	0800e201 	.word	0x0800e201
 8009614:	0800e240 	.word	0x0800e240
 8009618:	0800e1f9 	.word	0x0800e1f9
 800961c:	0800e384 	.word	0x0800e384
 8009620:	0800e6b3 	.word	0x0800e6b3
 8009624:	0800e578 	.word	0x0800e578
 8009628:	0800e550 	.word	0x0800e550
 800962c:	7ff00000 	.word	0x7ff00000
 8009630:	7ca00000 	.word	0x7ca00000
 8009634:	7fefffff 	.word	0x7fefffff
 8009638:	f018 0310 	ands.w	r3, r8, #16
 800963c:	bf18      	it	ne
 800963e:	236a      	movne	r3, #106	; 0x6a
 8009640:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80099f0 <_strtod_l+0x970>
 8009644:	9304      	str	r3, [sp, #16]
 8009646:	4650      	mov	r0, sl
 8009648:	4659      	mov	r1, fp
 800964a:	2300      	movs	r3, #0
 800964c:	f018 0f01 	tst.w	r8, #1
 8009650:	d004      	beq.n	800965c <_strtod_l+0x5dc>
 8009652:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009656:	f7f6 ffe7 	bl	8000628 <__aeabi_dmul>
 800965a:	2301      	movs	r3, #1
 800965c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009660:	f109 0908 	add.w	r9, r9, #8
 8009664:	d1f2      	bne.n	800964c <_strtod_l+0x5cc>
 8009666:	b10b      	cbz	r3, 800966c <_strtod_l+0x5ec>
 8009668:	4682      	mov	sl, r0
 800966a:	468b      	mov	fp, r1
 800966c:	9b04      	ldr	r3, [sp, #16]
 800966e:	b1c3      	cbz	r3, 80096a2 <_strtod_l+0x622>
 8009670:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009674:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009678:	2b00      	cmp	r3, #0
 800967a:	4659      	mov	r1, fp
 800967c:	dd11      	ble.n	80096a2 <_strtod_l+0x622>
 800967e:	2b1f      	cmp	r3, #31
 8009680:	f340 8124 	ble.w	80098cc <_strtod_l+0x84c>
 8009684:	2b34      	cmp	r3, #52	; 0x34
 8009686:	bfde      	ittt	le
 8009688:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800968c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009690:	fa03 f202 	lslle.w	r2, r3, r2
 8009694:	f04f 0a00 	mov.w	sl, #0
 8009698:	bfcc      	ite	gt
 800969a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800969e:	ea02 0b01 	andle.w	fp, r2, r1
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	4650      	mov	r0, sl
 80096a8:	4659      	mov	r1, fp
 80096aa:	f7f7 fa25 	bl	8000af8 <__aeabi_dcmpeq>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d1a2      	bne.n	80095f8 <_strtod_l+0x578>
 80096b2:	9b07      	ldr	r3, [sp, #28]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	9908      	ldr	r1, [sp, #32]
 80096b8:	462b      	mov	r3, r5
 80096ba:	463a      	mov	r2, r7
 80096bc:	4620      	mov	r0, r4
 80096be:	f002 f86d 	bl	800b79c <__s2b>
 80096c2:	9007      	str	r0, [sp, #28]
 80096c4:	2800      	cmp	r0, #0
 80096c6:	f43f af1f 	beq.w	8009508 <_strtod_l+0x488>
 80096ca:	9b05      	ldr	r3, [sp, #20]
 80096cc:	1b9e      	subs	r6, r3, r6
 80096ce:	9b06      	ldr	r3, [sp, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	bfb4      	ite	lt
 80096d4:	4633      	movlt	r3, r6
 80096d6:	2300      	movge	r3, #0
 80096d8:	930c      	str	r3, [sp, #48]	; 0x30
 80096da:	9b06      	ldr	r3, [sp, #24]
 80096dc:	2500      	movs	r5, #0
 80096de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80096e2:	9312      	str	r3, [sp, #72]	; 0x48
 80096e4:	462e      	mov	r6, r5
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	4620      	mov	r0, r4
 80096ea:	6859      	ldr	r1, [r3, #4]
 80096ec:	f001 ffae 	bl	800b64c <_Balloc>
 80096f0:	9005      	str	r0, [sp, #20]
 80096f2:	2800      	cmp	r0, #0
 80096f4:	f43f af0c 	beq.w	8009510 <_strtod_l+0x490>
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	3202      	adds	r2, #2
 80096fe:	f103 010c 	add.w	r1, r3, #12
 8009702:	0092      	lsls	r2, r2, #2
 8009704:	300c      	adds	r0, #12
 8009706:	f7fe fcdb 	bl	80080c0 <memcpy>
 800970a:	ec4b ab10 	vmov	d0, sl, fp
 800970e:	aa1a      	add	r2, sp, #104	; 0x68
 8009710:	a919      	add	r1, sp, #100	; 0x64
 8009712:	4620      	mov	r0, r4
 8009714:	f002 fb88 	bl	800be28 <__d2b>
 8009718:	ec4b ab18 	vmov	d8, sl, fp
 800971c:	9018      	str	r0, [sp, #96]	; 0x60
 800971e:	2800      	cmp	r0, #0
 8009720:	f43f aef6 	beq.w	8009510 <_strtod_l+0x490>
 8009724:	2101      	movs	r1, #1
 8009726:	4620      	mov	r0, r4
 8009728:	f002 f8d2 	bl	800b8d0 <__i2b>
 800972c:	4606      	mov	r6, r0
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f aeee 	beq.w	8009510 <_strtod_l+0x490>
 8009734:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009736:	9904      	ldr	r1, [sp, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	bfab      	itete	ge
 800973c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800973e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009740:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009742:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009746:	bfac      	ite	ge
 8009748:	eb03 0902 	addge.w	r9, r3, r2
 800974c:	1ad7      	sublt	r7, r2, r3
 800974e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009750:	eba3 0801 	sub.w	r8, r3, r1
 8009754:	4490      	add	r8, r2
 8009756:	4ba1      	ldr	r3, [pc, #644]	; (80099dc <_strtod_l+0x95c>)
 8009758:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800975c:	4598      	cmp	r8, r3
 800975e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009762:	f280 80c7 	bge.w	80098f4 <_strtod_l+0x874>
 8009766:	eba3 0308 	sub.w	r3, r3, r8
 800976a:	2b1f      	cmp	r3, #31
 800976c:	eba2 0203 	sub.w	r2, r2, r3
 8009770:	f04f 0101 	mov.w	r1, #1
 8009774:	f300 80b1 	bgt.w	80098da <_strtod_l+0x85a>
 8009778:	fa01 f303 	lsl.w	r3, r1, r3
 800977c:	930d      	str	r3, [sp, #52]	; 0x34
 800977e:	2300      	movs	r3, #0
 8009780:	9308      	str	r3, [sp, #32]
 8009782:	eb09 0802 	add.w	r8, r9, r2
 8009786:	9b04      	ldr	r3, [sp, #16]
 8009788:	45c1      	cmp	r9, r8
 800978a:	4417      	add	r7, r2
 800978c:	441f      	add	r7, r3
 800978e:	464b      	mov	r3, r9
 8009790:	bfa8      	it	ge
 8009792:	4643      	movge	r3, r8
 8009794:	42bb      	cmp	r3, r7
 8009796:	bfa8      	it	ge
 8009798:	463b      	movge	r3, r7
 800979a:	2b00      	cmp	r3, #0
 800979c:	bfc2      	ittt	gt
 800979e:	eba8 0803 	subgt.w	r8, r8, r3
 80097a2:	1aff      	subgt	r7, r7, r3
 80097a4:	eba9 0903 	subgt.w	r9, r9, r3
 80097a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	dd17      	ble.n	80097de <_strtod_l+0x75e>
 80097ae:	4631      	mov	r1, r6
 80097b0:	461a      	mov	r2, r3
 80097b2:	4620      	mov	r0, r4
 80097b4:	f002 f94c 	bl	800ba50 <__pow5mult>
 80097b8:	4606      	mov	r6, r0
 80097ba:	2800      	cmp	r0, #0
 80097bc:	f43f aea8 	beq.w	8009510 <_strtod_l+0x490>
 80097c0:	4601      	mov	r1, r0
 80097c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80097c4:	4620      	mov	r0, r4
 80097c6:	f002 f899 	bl	800b8fc <__multiply>
 80097ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80097cc:	2800      	cmp	r0, #0
 80097ce:	f43f ae9f 	beq.w	8009510 <_strtod_l+0x490>
 80097d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097d4:	4620      	mov	r0, r4
 80097d6:	f001 ff79 	bl	800b6cc <_Bfree>
 80097da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097dc:	9318      	str	r3, [sp, #96]	; 0x60
 80097de:	f1b8 0f00 	cmp.w	r8, #0
 80097e2:	f300 808c 	bgt.w	80098fe <_strtod_l+0x87e>
 80097e6:	9b06      	ldr	r3, [sp, #24]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	dd08      	ble.n	80097fe <_strtod_l+0x77e>
 80097ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097ee:	9905      	ldr	r1, [sp, #20]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f002 f92d 	bl	800ba50 <__pow5mult>
 80097f6:	9005      	str	r0, [sp, #20]
 80097f8:	2800      	cmp	r0, #0
 80097fa:	f43f ae89 	beq.w	8009510 <_strtod_l+0x490>
 80097fe:	2f00      	cmp	r7, #0
 8009800:	dd08      	ble.n	8009814 <_strtod_l+0x794>
 8009802:	9905      	ldr	r1, [sp, #20]
 8009804:	463a      	mov	r2, r7
 8009806:	4620      	mov	r0, r4
 8009808:	f002 f97c 	bl	800bb04 <__lshift>
 800980c:	9005      	str	r0, [sp, #20]
 800980e:	2800      	cmp	r0, #0
 8009810:	f43f ae7e 	beq.w	8009510 <_strtod_l+0x490>
 8009814:	f1b9 0f00 	cmp.w	r9, #0
 8009818:	dd08      	ble.n	800982c <_strtod_l+0x7ac>
 800981a:	4631      	mov	r1, r6
 800981c:	464a      	mov	r2, r9
 800981e:	4620      	mov	r0, r4
 8009820:	f002 f970 	bl	800bb04 <__lshift>
 8009824:	4606      	mov	r6, r0
 8009826:	2800      	cmp	r0, #0
 8009828:	f43f ae72 	beq.w	8009510 <_strtod_l+0x490>
 800982c:	9a05      	ldr	r2, [sp, #20]
 800982e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009830:	4620      	mov	r0, r4
 8009832:	f002 f9f3 	bl	800bc1c <__mdiff>
 8009836:	4605      	mov	r5, r0
 8009838:	2800      	cmp	r0, #0
 800983a:	f43f ae69 	beq.w	8009510 <_strtod_l+0x490>
 800983e:	68c3      	ldr	r3, [r0, #12]
 8009840:	930b      	str	r3, [sp, #44]	; 0x2c
 8009842:	2300      	movs	r3, #0
 8009844:	60c3      	str	r3, [r0, #12]
 8009846:	4631      	mov	r1, r6
 8009848:	f002 f9cc 	bl	800bbe4 <__mcmp>
 800984c:	2800      	cmp	r0, #0
 800984e:	da60      	bge.n	8009912 <_strtod_l+0x892>
 8009850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009852:	ea53 030a 	orrs.w	r3, r3, sl
 8009856:	f040 8082 	bne.w	800995e <_strtod_l+0x8de>
 800985a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800985e:	2b00      	cmp	r3, #0
 8009860:	d17d      	bne.n	800995e <_strtod_l+0x8de>
 8009862:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009866:	0d1b      	lsrs	r3, r3, #20
 8009868:	051b      	lsls	r3, r3, #20
 800986a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800986e:	d976      	bls.n	800995e <_strtod_l+0x8de>
 8009870:	696b      	ldr	r3, [r5, #20]
 8009872:	b913      	cbnz	r3, 800987a <_strtod_l+0x7fa>
 8009874:	692b      	ldr	r3, [r5, #16]
 8009876:	2b01      	cmp	r3, #1
 8009878:	dd71      	ble.n	800995e <_strtod_l+0x8de>
 800987a:	4629      	mov	r1, r5
 800987c:	2201      	movs	r2, #1
 800987e:	4620      	mov	r0, r4
 8009880:	f002 f940 	bl	800bb04 <__lshift>
 8009884:	4631      	mov	r1, r6
 8009886:	4605      	mov	r5, r0
 8009888:	f002 f9ac 	bl	800bbe4 <__mcmp>
 800988c:	2800      	cmp	r0, #0
 800988e:	dd66      	ble.n	800995e <_strtod_l+0x8de>
 8009890:	9904      	ldr	r1, [sp, #16]
 8009892:	4a53      	ldr	r2, [pc, #332]	; (80099e0 <_strtod_l+0x960>)
 8009894:	465b      	mov	r3, fp
 8009896:	2900      	cmp	r1, #0
 8009898:	f000 8081 	beq.w	800999e <_strtod_l+0x91e>
 800989c:	ea02 010b 	and.w	r1, r2, fp
 80098a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80098a4:	dc7b      	bgt.n	800999e <_strtod_l+0x91e>
 80098a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80098aa:	f77f aea9 	ble.w	8009600 <_strtod_l+0x580>
 80098ae:	4b4d      	ldr	r3, [pc, #308]	; (80099e4 <_strtod_l+0x964>)
 80098b0:	4650      	mov	r0, sl
 80098b2:	4659      	mov	r1, fp
 80098b4:	2200      	movs	r2, #0
 80098b6:	f7f6 feb7 	bl	8000628 <__aeabi_dmul>
 80098ba:	460b      	mov	r3, r1
 80098bc:	4303      	orrs	r3, r0
 80098be:	bf08      	it	eq
 80098c0:	2322      	moveq	r3, #34	; 0x22
 80098c2:	4682      	mov	sl, r0
 80098c4:	468b      	mov	fp, r1
 80098c6:	bf08      	it	eq
 80098c8:	6023      	streq	r3, [r4, #0]
 80098ca:	e62b      	b.n	8009524 <_strtod_l+0x4a4>
 80098cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098d0:	fa02 f303 	lsl.w	r3, r2, r3
 80098d4:	ea03 0a0a 	and.w	sl, r3, sl
 80098d8:	e6e3      	b.n	80096a2 <_strtod_l+0x622>
 80098da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80098de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80098e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80098e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80098ea:	fa01 f308 	lsl.w	r3, r1, r8
 80098ee:	9308      	str	r3, [sp, #32]
 80098f0:	910d      	str	r1, [sp, #52]	; 0x34
 80098f2:	e746      	b.n	8009782 <_strtod_l+0x702>
 80098f4:	2300      	movs	r3, #0
 80098f6:	9308      	str	r3, [sp, #32]
 80098f8:	2301      	movs	r3, #1
 80098fa:	930d      	str	r3, [sp, #52]	; 0x34
 80098fc:	e741      	b.n	8009782 <_strtod_l+0x702>
 80098fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009900:	4642      	mov	r2, r8
 8009902:	4620      	mov	r0, r4
 8009904:	f002 f8fe 	bl	800bb04 <__lshift>
 8009908:	9018      	str	r0, [sp, #96]	; 0x60
 800990a:	2800      	cmp	r0, #0
 800990c:	f47f af6b 	bne.w	80097e6 <_strtod_l+0x766>
 8009910:	e5fe      	b.n	8009510 <_strtod_l+0x490>
 8009912:	465f      	mov	r7, fp
 8009914:	d16e      	bne.n	80099f4 <_strtod_l+0x974>
 8009916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800991c:	b342      	cbz	r2, 8009970 <_strtod_l+0x8f0>
 800991e:	4a32      	ldr	r2, [pc, #200]	; (80099e8 <_strtod_l+0x968>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d128      	bne.n	8009976 <_strtod_l+0x8f6>
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	4651      	mov	r1, sl
 8009928:	b1eb      	cbz	r3, 8009966 <_strtod_l+0x8e6>
 800992a:	4b2d      	ldr	r3, [pc, #180]	; (80099e0 <_strtod_l+0x960>)
 800992c:	403b      	ands	r3, r7
 800992e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009932:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009936:	d819      	bhi.n	800996c <_strtod_l+0x8ec>
 8009938:	0d1b      	lsrs	r3, r3, #20
 800993a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800993e:	fa02 f303 	lsl.w	r3, r2, r3
 8009942:	4299      	cmp	r1, r3
 8009944:	d117      	bne.n	8009976 <_strtod_l+0x8f6>
 8009946:	4b29      	ldr	r3, [pc, #164]	; (80099ec <_strtod_l+0x96c>)
 8009948:	429f      	cmp	r7, r3
 800994a:	d102      	bne.n	8009952 <_strtod_l+0x8d2>
 800994c:	3101      	adds	r1, #1
 800994e:	f43f addf 	beq.w	8009510 <_strtod_l+0x490>
 8009952:	4b23      	ldr	r3, [pc, #140]	; (80099e0 <_strtod_l+0x960>)
 8009954:	403b      	ands	r3, r7
 8009956:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800995a:	f04f 0a00 	mov.w	sl, #0
 800995e:	9b04      	ldr	r3, [sp, #16]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1a4      	bne.n	80098ae <_strtod_l+0x82e>
 8009964:	e5de      	b.n	8009524 <_strtod_l+0x4a4>
 8009966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800996a:	e7ea      	b.n	8009942 <_strtod_l+0x8c2>
 800996c:	4613      	mov	r3, r2
 800996e:	e7e8      	b.n	8009942 <_strtod_l+0x8c2>
 8009970:	ea53 030a 	orrs.w	r3, r3, sl
 8009974:	d08c      	beq.n	8009890 <_strtod_l+0x810>
 8009976:	9b08      	ldr	r3, [sp, #32]
 8009978:	b1db      	cbz	r3, 80099b2 <_strtod_l+0x932>
 800997a:	423b      	tst	r3, r7
 800997c:	d0ef      	beq.n	800995e <_strtod_l+0x8de>
 800997e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009980:	9a04      	ldr	r2, [sp, #16]
 8009982:	4650      	mov	r0, sl
 8009984:	4659      	mov	r1, fp
 8009986:	b1c3      	cbz	r3, 80099ba <_strtod_l+0x93a>
 8009988:	f7ff fb5c 	bl	8009044 <sulp>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	ec51 0b18 	vmov	r0, r1, d8
 8009994:	f7f6 fc92 	bl	80002bc <__adddf3>
 8009998:	4682      	mov	sl, r0
 800999a:	468b      	mov	fp, r1
 800999c:	e7df      	b.n	800995e <_strtod_l+0x8de>
 800999e:	4013      	ands	r3, r2
 80099a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80099a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80099a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80099ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80099b0:	e7d5      	b.n	800995e <_strtod_l+0x8de>
 80099b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b4:	ea13 0f0a 	tst.w	r3, sl
 80099b8:	e7e0      	b.n	800997c <_strtod_l+0x8fc>
 80099ba:	f7ff fb43 	bl	8009044 <sulp>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	ec51 0b18 	vmov	r0, r1, d8
 80099c6:	f7f6 fc77 	bl	80002b8 <__aeabi_dsub>
 80099ca:	2200      	movs	r2, #0
 80099cc:	2300      	movs	r3, #0
 80099ce:	4682      	mov	sl, r0
 80099d0:	468b      	mov	fp, r1
 80099d2:	f7f7 f891 	bl	8000af8 <__aeabi_dcmpeq>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d0c1      	beq.n	800995e <_strtod_l+0x8de>
 80099da:	e611      	b.n	8009600 <_strtod_l+0x580>
 80099dc:	fffffc02 	.word	0xfffffc02
 80099e0:	7ff00000 	.word	0x7ff00000
 80099e4:	39500000 	.word	0x39500000
 80099e8:	000fffff 	.word	0x000fffff
 80099ec:	7fefffff 	.word	0x7fefffff
 80099f0:	0800e258 	.word	0x0800e258
 80099f4:	4631      	mov	r1, r6
 80099f6:	4628      	mov	r0, r5
 80099f8:	f002 fa72 	bl	800bee0 <__ratio>
 80099fc:	ec59 8b10 	vmov	r8, r9, d0
 8009a00:	ee10 0a10 	vmov	r0, s0
 8009a04:	2200      	movs	r2, #0
 8009a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a0a:	4649      	mov	r1, r9
 8009a0c:	f7f7 f888 	bl	8000b20 <__aeabi_dcmple>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d07a      	beq.n	8009b0a <_strtod_l+0xa8a>
 8009a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d04a      	beq.n	8009ab0 <_strtod_l+0xa30>
 8009a1a:	4b95      	ldr	r3, [pc, #596]	; (8009c70 <_strtod_l+0xbf0>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a22:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009c70 <_strtod_l+0xbf0>
 8009a26:	f04f 0800 	mov.w	r8, #0
 8009a2a:	4b92      	ldr	r3, [pc, #584]	; (8009c74 <_strtod_l+0xbf4>)
 8009a2c:	403b      	ands	r3, r7
 8009a2e:	930d      	str	r3, [sp, #52]	; 0x34
 8009a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a32:	4b91      	ldr	r3, [pc, #580]	; (8009c78 <_strtod_l+0xbf8>)
 8009a34:	429a      	cmp	r2, r3
 8009a36:	f040 80b0 	bne.w	8009b9a <_strtod_l+0xb1a>
 8009a3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009a42:	ec4b ab10 	vmov	d0, sl, fp
 8009a46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009a4a:	f002 f971 	bl	800bd30 <__ulp>
 8009a4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009a52:	ec53 2b10 	vmov	r2, r3, d0
 8009a56:	f7f6 fde7 	bl	8000628 <__aeabi_dmul>
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	465b      	mov	r3, fp
 8009a5e:	f7f6 fc2d 	bl	80002bc <__adddf3>
 8009a62:	460b      	mov	r3, r1
 8009a64:	4983      	ldr	r1, [pc, #524]	; (8009c74 <_strtod_l+0xbf4>)
 8009a66:	4a85      	ldr	r2, [pc, #532]	; (8009c7c <_strtod_l+0xbfc>)
 8009a68:	4019      	ands	r1, r3
 8009a6a:	4291      	cmp	r1, r2
 8009a6c:	4682      	mov	sl, r0
 8009a6e:	d960      	bls.n	8009b32 <_strtod_l+0xab2>
 8009a70:	ee18 3a90 	vmov	r3, s17
 8009a74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d104      	bne.n	8009a86 <_strtod_l+0xa06>
 8009a7c:	ee18 3a10 	vmov	r3, s16
 8009a80:	3301      	adds	r3, #1
 8009a82:	f43f ad45 	beq.w	8009510 <_strtod_l+0x490>
 8009a86:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009c88 <_strtod_l+0xc08>
 8009a8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009a8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a90:	4620      	mov	r0, r4
 8009a92:	f001 fe1b 	bl	800b6cc <_Bfree>
 8009a96:	9905      	ldr	r1, [sp, #20]
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f001 fe17 	bl	800b6cc <_Bfree>
 8009a9e:	4631      	mov	r1, r6
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f001 fe13 	bl	800b6cc <_Bfree>
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f001 fe0f 	bl	800b6cc <_Bfree>
 8009aae:	e61a      	b.n	80096e6 <_strtod_l+0x666>
 8009ab0:	f1ba 0f00 	cmp.w	sl, #0
 8009ab4:	d11b      	bne.n	8009aee <_strtod_l+0xa6e>
 8009ab6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aba:	b9f3      	cbnz	r3, 8009afa <_strtod_l+0xa7a>
 8009abc:	4b6c      	ldr	r3, [pc, #432]	; (8009c70 <_strtod_l+0xbf0>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	4640      	mov	r0, r8
 8009ac2:	4649      	mov	r1, r9
 8009ac4:	f7f7 f822 	bl	8000b0c <__aeabi_dcmplt>
 8009ac8:	b9d0      	cbnz	r0, 8009b00 <_strtod_l+0xa80>
 8009aca:	4640      	mov	r0, r8
 8009acc:	4649      	mov	r1, r9
 8009ace:	4b6c      	ldr	r3, [pc, #432]	; (8009c80 <_strtod_l+0xc00>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f7f6 fda9 	bl	8000628 <__aeabi_dmul>
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	4689      	mov	r9, r1
 8009ada:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ade:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009ae2:	9315      	str	r3, [sp, #84]	; 0x54
 8009ae4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009ae8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009aec:	e79d      	b.n	8009a2a <_strtod_l+0x9aa>
 8009aee:	f1ba 0f01 	cmp.w	sl, #1
 8009af2:	d102      	bne.n	8009afa <_strtod_l+0xa7a>
 8009af4:	2f00      	cmp	r7, #0
 8009af6:	f43f ad83 	beq.w	8009600 <_strtod_l+0x580>
 8009afa:	4b62      	ldr	r3, [pc, #392]	; (8009c84 <_strtod_l+0xc04>)
 8009afc:	2200      	movs	r2, #0
 8009afe:	e78e      	b.n	8009a1e <_strtod_l+0x99e>
 8009b00:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009c80 <_strtod_l+0xc00>
 8009b04:	f04f 0800 	mov.w	r8, #0
 8009b08:	e7e7      	b.n	8009ada <_strtod_l+0xa5a>
 8009b0a:	4b5d      	ldr	r3, [pc, #372]	; (8009c80 <_strtod_l+0xc00>)
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4649      	mov	r1, r9
 8009b10:	2200      	movs	r2, #0
 8009b12:	f7f6 fd89 	bl	8000628 <__aeabi_dmul>
 8009b16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b18:	4680      	mov	r8, r0
 8009b1a:	4689      	mov	r9, r1
 8009b1c:	b933      	cbnz	r3, 8009b2c <_strtod_l+0xaac>
 8009b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b22:	900e      	str	r0, [sp, #56]	; 0x38
 8009b24:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009b2a:	e7dd      	b.n	8009ae8 <_strtod_l+0xa68>
 8009b2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009b30:	e7f9      	b.n	8009b26 <_strtod_l+0xaa6>
 8009b32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1a8      	bne.n	8009a8e <_strtod_l+0xa0e>
 8009b3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b42:	0d1b      	lsrs	r3, r3, #20
 8009b44:	051b      	lsls	r3, r3, #20
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d1a1      	bne.n	8009a8e <_strtod_l+0xa0e>
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f7 f8cb 	bl	8000ce8 <__aeabi_d2lz>
 8009b52:	f7f6 fd3b 	bl	80005cc <__aeabi_l2d>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	f7f6 fbab 	bl	80002b8 <__aeabi_dsub>
 8009b62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b68:	ea43 030a 	orr.w	r3, r3, sl
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	d055      	beq.n	8009c20 <_strtod_l+0xba0>
 8009b74:	a336      	add	r3, pc, #216	; (adr r3, 8009c50 <_strtod_l+0xbd0>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 ffc7 	bl	8000b0c <__aeabi_dcmplt>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f47f acd0 	bne.w	8009524 <_strtod_l+0x4a4>
 8009b84:	a334      	add	r3, pc, #208	; (adr r3, 8009c58 <_strtod_l+0xbd8>)
 8009b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	f7f6 ffdb 	bl	8000b48 <__aeabi_dcmpgt>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	f43f af7b 	beq.w	8009a8e <_strtod_l+0xa0e>
 8009b98:	e4c4      	b.n	8009524 <_strtod_l+0x4a4>
 8009b9a:	9b04      	ldr	r3, [sp, #16]
 8009b9c:	b333      	cbz	r3, 8009bec <_strtod_l+0xb6c>
 8009b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ba0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ba4:	d822      	bhi.n	8009bec <_strtod_l+0xb6c>
 8009ba6:	a32e      	add	r3, pc, #184	; (adr r3, 8009c60 <_strtod_l+0xbe0>)
 8009ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bac:	4640      	mov	r0, r8
 8009bae:	4649      	mov	r1, r9
 8009bb0:	f7f6 ffb6 	bl	8000b20 <__aeabi_dcmple>
 8009bb4:	b1a0      	cbz	r0, 8009be0 <_strtod_l+0xb60>
 8009bb6:	4649      	mov	r1, r9
 8009bb8:	4640      	mov	r0, r8
 8009bba:	f7f7 f80d 	bl	8000bd8 <__aeabi_d2uiz>
 8009bbe:	2801      	cmp	r0, #1
 8009bc0:	bf38      	it	cc
 8009bc2:	2001      	movcc	r0, #1
 8009bc4:	f7f6 fcb6 	bl	8000534 <__aeabi_ui2d>
 8009bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4689      	mov	r9, r1
 8009bce:	bb23      	cbnz	r3, 8009c1a <_strtod_l+0xb9a>
 8009bd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bd4:	9010      	str	r0, [sp, #64]	; 0x40
 8009bd6:	9311      	str	r3, [sp, #68]	; 0x44
 8009bd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009bdc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009be4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009be8:	1a9b      	subs	r3, r3, r2
 8009bea:	9309      	str	r3, [sp, #36]	; 0x24
 8009bec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009bf0:	eeb0 0a48 	vmov.f32	s0, s16
 8009bf4:	eef0 0a68 	vmov.f32	s1, s17
 8009bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009bfc:	f002 f898 	bl	800bd30 <__ulp>
 8009c00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c04:	ec53 2b10 	vmov	r2, r3, d0
 8009c08:	f7f6 fd0e 	bl	8000628 <__aeabi_dmul>
 8009c0c:	ec53 2b18 	vmov	r2, r3, d8
 8009c10:	f7f6 fb54 	bl	80002bc <__adddf3>
 8009c14:	4682      	mov	sl, r0
 8009c16:	468b      	mov	fp, r1
 8009c18:	e78d      	b.n	8009b36 <_strtod_l+0xab6>
 8009c1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009c1e:	e7db      	b.n	8009bd8 <_strtod_l+0xb58>
 8009c20:	a311      	add	r3, pc, #68	; (adr r3, 8009c68 <_strtod_l+0xbe8>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 ff71 	bl	8000b0c <__aeabi_dcmplt>
 8009c2a:	e7b2      	b.n	8009b92 <_strtod_l+0xb12>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c34:	6013      	str	r3, [r2, #0]
 8009c36:	f7ff ba6b 	b.w	8009110 <_strtod_l+0x90>
 8009c3a:	2a65      	cmp	r2, #101	; 0x65
 8009c3c:	f43f ab5f 	beq.w	80092fe <_strtod_l+0x27e>
 8009c40:	2a45      	cmp	r2, #69	; 0x45
 8009c42:	f43f ab5c 	beq.w	80092fe <_strtod_l+0x27e>
 8009c46:	2301      	movs	r3, #1
 8009c48:	f7ff bb94 	b.w	8009374 <_strtod_l+0x2f4>
 8009c4c:	f3af 8000 	nop.w
 8009c50:	94a03595 	.word	0x94a03595
 8009c54:	3fdfffff 	.word	0x3fdfffff
 8009c58:	35afe535 	.word	0x35afe535
 8009c5c:	3fe00000 	.word	0x3fe00000
 8009c60:	ffc00000 	.word	0xffc00000
 8009c64:	41dfffff 	.word	0x41dfffff
 8009c68:	94a03595 	.word	0x94a03595
 8009c6c:	3fcfffff 	.word	0x3fcfffff
 8009c70:	3ff00000 	.word	0x3ff00000
 8009c74:	7ff00000 	.word	0x7ff00000
 8009c78:	7fe00000 	.word	0x7fe00000
 8009c7c:	7c9fffff 	.word	0x7c9fffff
 8009c80:	3fe00000 	.word	0x3fe00000
 8009c84:	bff00000 	.word	0xbff00000
 8009c88:	7fefffff 	.word	0x7fefffff

08009c8c <_strtod_r>:
 8009c8c:	4b01      	ldr	r3, [pc, #4]	; (8009c94 <_strtod_r+0x8>)
 8009c8e:	f7ff b9f7 	b.w	8009080 <_strtod_l>
 8009c92:	bf00      	nop
 8009c94:	20000080 	.word	0x20000080

08009c98 <_strtol_l.constprop.0>:
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9e:	d001      	beq.n	8009ca4 <_strtol_l.constprop.0+0xc>
 8009ca0:	2b24      	cmp	r3, #36	; 0x24
 8009ca2:	d906      	bls.n	8009cb2 <_strtol_l.constprop.0+0x1a>
 8009ca4:	f7fe f9e2 	bl	800806c <__errno>
 8009ca8:	2316      	movs	r3, #22
 8009caa:	6003      	str	r3, [r0, #0]
 8009cac:	2000      	movs	r0, #0
 8009cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009d98 <_strtol_l.constprop.0+0x100>
 8009cb6:	460d      	mov	r5, r1
 8009cb8:	462e      	mov	r6, r5
 8009cba:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009cc2:	f017 0708 	ands.w	r7, r7, #8
 8009cc6:	d1f7      	bne.n	8009cb8 <_strtol_l.constprop.0+0x20>
 8009cc8:	2c2d      	cmp	r4, #45	; 0x2d
 8009cca:	d132      	bne.n	8009d32 <_strtol_l.constprop.0+0x9a>
 8009ccc:	782c      	ldrb	r4, [r5, #0]
 8009cce:	2701      	movs	r7, #1
 8009cd0:	1cb5      	adds	r5, r6, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d05b      	beq.n	8009d8e <_strtol_l.constprop.0+0xf6>
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d109      	bne.n	8009cee <_strtol_l.constprop.0+0x56>
 8009cda:	2c30      	cmp	r4, #48	; 0x30
 8009cdc:	d107      	bne.n	8009cee <_strtol_l.constprop.0+0x56>
 8009cde:	782c      	ldrb	r4, [r5, #0]
 8009ce0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ce4:	2c58      	cmp	r4, #88	; 0x58
 8009ce6:	d14d      	bne.n	8009d84 <_strtol_l.constprop.0+0xec>
 8009ce8:	786c      	ldrb	r4, [r5, #1]
 8009cea:	2310      	movs	r3, #16
 8009cec:	3502      	adds	r5, #2
 8009cee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009cf2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009cf6:	f04f 0c00 	mov.w	ip, #0
 8009cfa:	fbb8 f9f3 	udiv	r9, r8, r3
 8009cfe:	4666      	mov	r6, ip
 8009d00:	fb03 8a19 	mls	sl, r3, r9, r8
 8009d04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009d08:	f1be 0f09 	cmp.w	lr, #9
 8009d0c:	d816      	bhi.n	8009d3c <_strtol_l.constprop.0+0xa4>
 8009d0e:	4674      	mov	r4, lr
 8009d10:	42a3      	cmp	r3, r4
 8009d12:	dd24      	ble.n	8009d5e <_strtol_l.constprop.0+0xc6>
 8009d14:	f1bc 0f00 	cmp.w	ip, #0
 8009d18:	db1e      	blt.n	8009d58 <_strtol_l.constprop.0+0xc0>
 8009d1a:	45b1      	cmp	r9, r6
 8009d1c:	d31c      	bcc.n	8009d58 <_strtol_l.constprop.0+0xc0>
 8009d1e:	d101      	bne.n	8009d24 <_strtol_l.constprop.0+0x8c>
 8009d20:	45a2      	cmp	sl, r4
 8009d22:	db19      	blt.n	8009d58 <_strtol_l.constprop.0+0xc0>
 8009d24:	fb06 4603 	mla	r6, r6, r3, r4
 8009d28:	f04f 0c01 	mov.w	ip, #1
 8009d2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d30:	e7e8      	b.n	8009d04 <_strtol_l.constprop.0+0x6c>
 8009d32:	2c2b      	cmp	r4, #43	; 0x2b
 8009d34:	bf04      	itt	eq
 8009d36:	782c      	ldrbeq	r4, [r5, #0]
 8009d38:	1cb5      	addeq	r5, r6, #2
 8009d3a:	e7ca      	b.n	8009cd2 <_strtol_l.constprop.0+0x3a>
 8009d3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009d40:	f1be 0f19 	cmp.w	lr, #25
 8009d44:	d801      	bhi.n	8009d4a <_strtol_l.constprop.0+0xb2>
 8009d46:	3c37      	subs	r4, #55	; 0x37
 8009d48:	e7e2      	b.n	8009d10 <_strtol_l.constprop.0+0x78>
 8009d4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009d4e:	f1be 0f19 	cmp.w	lr, #25
 8009d52:	d804      	bhi.n	8009d5e <_strtol_l.constprop.0+0xc6>
 8009d54:	3c57      	subs	r4, #87	; 0x57
 8009d56:	e7db      	b.n	8009d10 <_strtol_l.constprop.0+0x78>
 8009d58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009d5c:	e7e6      	b.n	8009d2c <_strtol_l.constprop.0+0x94>
 8009d5e:	f1bc 0f00 	cmp.w	ip, #0
 8009d62:	da05      	bge.n	8009d70 <_strtol_l.constprop.0+0xd8>
 8009d64:	2322      	movs	r3, #34	; 0x22
 8009d66:	6003      	str	r3, [r0, #0]
 8009d68:	4646      	mov	r6, r8
 8009d6a:	b942      	cbnz	r2, 8009d7e <_strtol_l.constprop.0+0xe6>
 8009d6c:	4630      	mov	r0, r6
 8009d6e:	e79e      	b.n	8009cae <_strtol_l.constprop.0+0x16>
 8009d70:	b107      	cbz	r7, 8009d74 <_strtol_l.constprop.0+0xdc>
 8009d72:	4276      	negs	r6, r6
 8009d74:	2a00      	cmp	r2, #0
 8009d76:	d0f9      	beq.n	8009d6c <_strtol_l.constprop.0+0xd4>
 8009d78:	f1bc 0f00 	cmp.w	ip, #0
 8009d7c:	d000      	beq.n	8009d80 <_strtol_l.constprop.0+0xe8>
 8009d7e:	1e69      	subs	r1, r5, #1
 8009d80:	6011      	str	r1, [r2, #0]
 8009d82:	e7f3      	b.n	8009d6c <_strtol_l.constprop.0+0xd4>
 8009d84:	2430      	movs	r4, #48	; 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1b1      	bne.n	8009cee <_strtol_l.constprop.0+0x56>
 8009d8a:	2308      	movs	r3, #8
 8009d8c:	e7af      	b.n	8009cee <_strtol_l.constprop.0+0x56>
 8009d8e:	2c30      	cmp	r4, #48	; 0x30
 8009d90:	d0a5      	beq.n	8009cde <_strtol_l.constprop.0+0x46>
 8009d92:	230a      	movs	r3, #10
 8009d94:	e7ab      	b.n	8009cee <_strtol_l.constprop.0+0x56>
 8009d96:	bf00      	nop
 8009d98:	0800e281 	.word	0x0800e281

08009d9c <_strtol_r>:
 8009d9c:	f7ff bf7c 	b.w	8009c98 <_strtol_l.constprop.0>

08009da0 <quorem>:
 8009da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	6903      	ldr	r3, [r0, #16]
 8009da6:	690c      	ldr	r4, [r1, #16]
 8009da8:	42a3      	cmp	r3, r4
 8009daa:	4607      	mov	r7, r0
 8009dac:	f2c0 8081 	blt.w	8009eb2 <quorem+0x112>
 8009db0:	3c01      	subs	r4, #1
 8009db2:	f101 0814 	add.w	r8, r1, #20
 8009db6:	f100 0514 	add.w	r5, r0, #20
 8009dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009dd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dd8:	d331      	bcc.n	8009e3e <quorem+0x9e>
 8009dda:	f04f 0e00 	mov.w	lr, #0
 8009dde:	4640      	mov	r0, r8
 8009de0:	46ac      	mov	ip, r5
 8009de2:	46f2      	mov	sl, lr
 8009de4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009de8:	b293      	uxth	r3, r2
 8009dea:	fb06 e303 	mla	r3, r6, r3, lr
 8009dee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ebaa 0303 	sub.w	r3, sl, r3
 8009df8:	f8dc a000 	ldr.w	sl, [ip]
 8009dfc:	0c12      	lsrs	r2, r2, #16
 8009dfe:	fa13 f38a 	uxtah	r3, r3, sl
 8009e02:	fb06 e202 	mla	r2, r6, r2, lr
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	9b00      	ldr	r3, [sp, #0]
 8009e0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e0e:	b292      	uxth	r2, r2
 8009e10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e18:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e1c:	4581      	cmp	r9, r0
 8009e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e22:	f84c 3b04 	str.w	r3, [ip], #4
 8009e26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e2a:	d2db      	bcs.n	8009de4 <quorem+0x44>
 8009e2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e30:	b92b      	cbnz	r3, 8009e3e <quorem+0x9e>
 8009e32:	9b01      	ldr	r3, [sp, #4]
 8009e34:	3b04      	subs	r3, #4
 8009e36:	429d      	cmp	r5, r3
 8009e38:	461a      	mov	r2, r3
 8009e3a:	d32e      	bcc.n	8009e9a <quorem+0xfa>
 8009e3c:	613c      	str	r4, [r7, #16]
 8009e3e:	4638      	mov	r0, r7
 8009e40:	f001 fed0 	bl	800bbe4 <__mcmp>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	db24      	blt.n	8009e92 <quorem+0xf2>
 8009e48:	3601      	adds	r6, #1
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e54:	f8d0 e000 	ldr.w	lr, [r0]
 8009e58:	b293      	uxth	r3, r2
 8009e5a:	ebac 0303 	sub.w	r3, ip, r3
 8009e5e:	0c12      	lsrs	r2, r2, #16
 8009e60:	fa13 f38e 	uxtah	r3, r3, lr
 8009e64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e72:	45c1      	cmp	r9, r8
 8009e74:	f840 3b04 	str.w	r3, [r0], #4
 8009e78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e7c:	d2e8      	bcs.n	8009e50 <quorem+0xb0>
 8009e7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e86:	b922      	cbnz	r2, 8009e92 <quorem+0xf2>
 8009e88:	3b04      	subs	r3, #4
 8009e8a:	429d      	cmp	r5, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	d30a      	bcc.n	8009ea6 <quorem+0x106>
 8009e90:	613c      	str	r4, [r7, #16]
 8009e92:	4630      	mov	r0, r6
 8009e94:	b003      	add	sp, #12
 8009e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9a:	6812      	ldr	r2, [r2, #0]
 8009e9c:	3b04      	subs	r3, #4
 8009e9e:	2a00      	cmp	r2, #0
 8009ea0:	d1cc      	bne.n	8009e3c <quorem+0x9c>
 8009ea2:	3c01      	subs	r4, #1
 8009ea4:	e7c7      	b.n	8009e36 <quorem+0x96>
 8009ea6:	6812      	ldr	r2, [r2, #0]
 8009ea8:	3b04      	subs	r3, #4
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d1f0      	bne.n	8009e90 <quorem+0xf0>
 8009eae:	3c01      	subs	r4, #1
 8009eb0:	e7eb      	b.n	8009e8a <quorem+0xea>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e7ee      	b.n	8009e94 <quorem+0xf4>
	...

08009eb8 <_dtoa_r>:
 8009eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ebc:	ed2d 8b04 	vpush	{d8-d9}
 8009ec0:	ec57 6b10 	vmov	r6, r7, d0
 8009ec4:	b093      	sub	sp, #76	; 0x4c
 8009ec6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009ec8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009ecc:	9106      	str	r1, [sp, #24]
 8009ece:	ee10 aa10 	vmov	sl, s0
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed6:	930c      	str	r3, [sp, #48]	; 0x30
 8009ed8:	46bb      	mov	fp, r7
 8009eda:	b975      	cbnz	r5, 8009efa <_dtoa_r+0x42>
 8009edc:	2010      	movs	r0, #16
 8009ede:	f001 fb9b 	bl	800b618 <malloc>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	6260      	str	r0, [r4, #36]	; 0x24
 8009ee6:	b920      	cbnz	r0, 8009ef2 <_dtoa_r+0x3a>
 8009ee8:	4ba7      	ldr	r3, [pc, #668]	; (800a188 <_dtoa_r+0x2d0>)
 8009eea:	21ea      	movs	r1, #234	; 0xea
 8009eec:	48a7      	ldr	r0, [pc, #668]	; (800a18c <_dtoa_r+0x2d4>)
 8009eee:	f003 fae5 	bl	800d4bc <__assert_func>
 8009ef2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009ef6:	6005      	str	r5, [r0, #0]
 8009ef8:	60c5      	str	r5, [r0, #12]
 8009efa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009efc:	6819      	ldr	r1, [r3, #0]
 8009efe:	b151      	cbz	r1, 8009f16 <_dtoa_r+0x5e>
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	604a      	str	r2, [r1, #4]
 8009f04:	2301      	movs	r3, #1
 8009f06:	4093      	lsls	r3, r2
 8009f08:	608b      	str	r3, [r1, #8]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f001 fbde 	bl	800b6cc <_Bfree>
 8009f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	1e3b      	subs	r3, r7, #0
 8009f18:	bfaa      	itet	ge
 8009f1a:	2300      	movge	r3, #0
 8009f1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009f20:	f8c8 3000 	strge.w	r3, [r8]
 8009f24:	4b9a      	ldr	r3, [pc, #616]	; (800a190 <_dtoa_r+0x2d8>)
 8009f26:	bfbc      	itt	lt
 8009f28:	2201      	movlt	r2, #1
 8009f2a:	f8c8 2000 	strlt.w	r2, [r8]
 8009f2e:	ea33 030b 	bics.w	r3, r3, fp
 8009f32:	d11b      	bne.n	8009f6c <_dtoa_r+0xb4>
 8009f34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f36:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f3a:	6013      	str	r3, [r2, #0]
 8009f3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f40:	4333      	orrs	r3, r6
 8009f42:	f000 8592 	beq.w	800aa6a <_dtoa_r+0xbb2>
 8009f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f48:	b963      	cbnz	r3, 8009f64 <_dtoa_r+0xac>
 8009f4a:	4b92      	ldr	r3, [pc, #584]	; (800a194 <_dtoa_r+0x2dc>)
 8009f4c:	e022      	b.n	8009f94 <_dtoa_r+0xdc>
 8009f4e:	4b92      	ldr	r3, [pc, #584]	; (800a198 <_dtoa_r+0x2e0>)
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	3308      	adds	r3, #8
 8009f54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	9801      	ldr	r0, [sp, #4]
 8009f5a:	b013      	add	sp, #76	; 0x4c
 8009f5c:	ecbd 8b04 	vpop	{d8-d9}
 8009f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	4b8b      	ldr	r3, [pc, #556]	; (800a194 <_dtoa_r+0x2dc>)
 8009f66:	9301      	str	r3, [sp, #4]
 8009f68:	3303      	adds	r3, #3
 8009f6a:	e7f3      	b.n	8009f54 <_dtoa_r+0x9c>
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	2300      	movs	r3, #0
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	f7f6 fdc0 	bl	8000af8 <__aeabi_dcmpeq>
 8009f78:	ec4b ab19 	vmov	d9, sl, fp
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	b158      	cbz	r0, 8009f98 <_dtoa_r+0xe0>
 8009f80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f82:	2301      	movs	r3, #1
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	f000 856b 	beq.w	800aa64 <_dtoa_r+0xbac>
 8009f8e:	4883      	ldr	r0, [pc, #524]	; (800a19c <_dtoa_r+0x2e4>)
 8009f90:	6018      	str	r0, [r3, #0]
 8009f92:	1e43      	subs	r3, r0, #1
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	e7df      	b.n	8009f58 <_dtoa_r+0xa0>
 8009f98:	ec4b ab10 	vmov	d0, sl, fp
 8009f9c:	aa10      	add	r2, sp, #64	; 0x40
 8009f9e:	a911      	add	r1, sp, #68	; 0x44
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f001 ff41 	bl	800be28 <__d2b>
 8009fa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009faa:	ee08 0a10 	vmov	s16, r0
 8009fae:	2d00      	cmp	r5, #0
 8009fb0:	f000 8084 	beq.w	800a0bc <_dtoa_r+0x204>
 8009fb4:	ee19 3a90 	vmov	r3, s19
 8009fb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009fc0:	4656      	mov	r6, sl
 8009fc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009fca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009fce:	4b74      	ldr	r3, [pc, #464]	; (800a1a0 <_dtoa_r+0x2e8>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 f96f 	bl	80002b8 <__aeabi_dsub>
 8009fda:	a365      	add	r3, pc, #404	; (adr r3, 800a170 <_dtoa_r+0x2b8>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 fb22 	bl	8000628 <__aeabi_dmul>
 8009fe4:	a364      	add	r3, pc, #400	; (adr r3, 800a178 <_dtoa_r+0x2c0>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	f7f6 f967 	bl	80002bc <__adddf3>
 8009fee:	4606      	mov	r6, r0
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	460f      	mov	r7, r1
 8009ff4:	f7f6 faae 	bl	8000554 <__aeabi_i2d>
 8009ff8:	a361      	add	r3, pc, #388	; (adr r3, 800a180 <_dtoa_r+0x2c8>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 fb13 	bl	8000628 <__aeabi_dmul>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4630      	mov	r0, r6
 800a008:	4639      	mov	r1, r7
 800a00a:	f7f6 f957 	bl	80002bc <__adddf3>
 800a00e:	4606      	mov	r6, r0
 800a010:	460f      	mov	r7, r1
 800a012:	f7f6 fdb9 	bl	8000b88 <__aeabi_d2iz>
 800a016:	2200      	movs	r2, #0
 800a018:	9000      	str	r0, [sp, #0]
 800a01a:	2300      	movs	r3, #0
 800a01c:	4630      	mov	r0, r6
 800a01e:	4639      	mov	r1, r7
 800a020:	f7f6 fd74 	bl	8000b0c <__aeabi_dcmplt>
 800a024:	b150      	cbz	r0, 800a03c <_dtoa_r+0x184>
 800a026:	9800      	ldr	r0, [sp, #0]
 800a028:	f7f6 fa94 	bl	8000554 <__aeabi_i2d>
 800a02c:	4632      	mov	r2, r6
 800a02e:	463b      	mov	r3, r7
 800a030:	f7f6 fd62 	bl	8000af8 <__aeabi_dcmpeq>
 800a034:	b910      	cbnz	r0, 800a03c <_dtoa_r+0x184>
 800a036:	9b00      	ldr	r3, [sp, #0]
 800a038:	3b01      	subs	r3, #1
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	9b00      	ldr	r3, [sp, #0]
 800a03e:	2b16      	cmp	r3, #22
 800a040:	d85a      	bhi.n	800a0f8 <_dtoa_r+0x240>
 800a042:	9a00      	ldr	r2, [sp, #0]
 800a044:	4b57      	ldr	r3, [pc, #348]	; (800a1a4 <_dtoa_r+0x2ec>)
 800a046:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	ec51 0b19 	vmov	r0, r1, d9
 800a052:	f7f6 fd5b 	bl	8000b0c <__aeabi_dcmplt>
 800a056:	2800      	cmp	r0, #0
 800a058:	d050      	beq.n	800a0fc <_dtoa_r+0x244>
 800a05a:	9b00      	ldr	r3, [sp, #0]
 800a05c:	3b01      	subs	r3, #1
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2300      	movs	r3, #0
 800a062:	930b      	str	r3, [sp, #44]	; 0x2c
 800a064:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a066:	1b5d      	subs	r5, r3, r5
 800a068:	1e6b      	subs	r3, r5, #1
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	bf45      	ittet	mi
 800a06e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a072:	9304      	strmi	r3, [sp, #16]
 800a074:	2300      	movpl	r3, #0
 800a076:	2300      	movmi	r3, #0
 800a078:	bf4c      	ite	mi
 800a07a:	9305      	strmi	r3, [sp, #20]
 800a07c:	9304      	strpl	r3, [sp, #16]
 800a07e:	9b00      	ldr	r3, [sp, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	db3d      	blt.n	800a100 <_dtoa_r+0x248>
 800a084:	9b05      	ldr	r3, [sp, #20]
 800a086:	9a00      	ldr	r2, [sp, #0]
 800a088:	920a      	str	r2, [sp, #40]	; 0x28
 800a08a:	4413      	add	r3, r2
 800a08c:	9305      	str	r3, [sp, #20]
 800a08e:	2300      	movs	r3, #0
 800a090:	9307      	str	r3, [sp, #28]
 800a092:	9b06      	ldr	r3, [sp, #24]
 800a094:	2b09      	cmp	r3, #9
 800a096:	f200 8089 	bhi.w	800a1ac <_dtoa_r+0x2f4>
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	bfc4      	itt	gt
 800a09e:	3b04      	subgt	r3, #4
 800a0a0:	9306      	strgt	r3, [sp, #24]
 800a0a2:	9b06      	ldr	r3, [sp, #24]
 800a0a4:	f1a3 0302 	sub.w	r3, r3, #2
 800a0a8:	bfcc      	ite	gt
 800a0aa:	2500      	movgt	r5, #0
 800a0ac:	2501      	movle	r5, #1
 800a0ae:	2b03      	cmp	r3, #3
 800a0b0:	f200 8087 	bhi.w	800a1c2 <_dtoa_r+0x30a>
 800a0b4:	e8df f003 	tbb	[pc, r3]
 800a0b8:	59383a2d 	.word	0x59383a2d
 800a0bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0c0:	441d      	add	r5, r3
 800a0c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	bfc1      	itttt	gt
 800a0ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a0d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a0d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a0da:	bfda      	itte	le
 800a0dc:	f1c3 0320 	rsble	r3, r3, #32
 800a0e0:	fa06 f003 	lslle.w	r0, r6, r3
 800a0e4:	4318      	orrgt	r0, r3
 800a0e6:	f7f6 fa25 	bl	8000534 <__aeabi_ui2d>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	4606      	mov	r6, r0
 800a0ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0f2:	3d01      	subs	r5, #1
 800a0f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a0f6:	e76a      	b.n	8009fce <_dtoa_r+0x116>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e7b2      	b.n	800a062 <_dtoa_r+0x1aa>
 800a0fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a0fe:	e7b1      	b.n	800a064 <_dtoa_r+0x1ac>
 800a100:	9b04      	ldr	r3, [sp, #16]
 800a102:	9a00      	ldr	r2, [sp, #0]
 800a104:	1a9b      	subs	r3, r3, r2
 800a106:	9304      	str	r3, [sp, #16]
 800a108:	4253      	negs	r3, r2
 800a10a:	9307      	str	r3, [sp, #28]
 800a10c:	2300      	movs	r3, #0
 800a10e:	930a      	str	r3, [sp, #40]	; 0x28
 800a110:	e7bf      	b.n	800a092 <_dtoa_r+0x1da>
 800a112:	2300      	movs	r3, #0
 800a114:	9308      	str	r3, [sp, #32]
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dc55      	bgt.n	800a1c8 <_dtoa_r+0x310>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a122:	461a      	mov	r2, r3
 800a124:	9209      	str	r2, [sp, #36]	; 0x24
 800a126:	e00c      	b.n	800a142 <_dtoa_r+0x28a>
 800a128:	2301      	movs	r3, #1
 800a12a:	e7f3      	b.n	800a114 <_dtoa_r+0x25c>
 800a12c:	2300      	movs	r3, #0
 800a12e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a130:	9308      	str	r3, [sp, #32]
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	4413      	add	r3, r2
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	3301      	adds	r3, #1
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	9303      	str	r3, [sp, #12]
 800a13e:	bfb8      	it	lt
 800a140:	2301      	movlt	r3, #1
 800a142:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a144:	2200      	movs	r2, #0
 800a146:	6042      	str	r2, [r0, #4]
 800a148:	2204      	movs	r2, #4
 800a14a:	f102 0614 	add.w	r6, r2, #20
 800a14e:	429e      	cmp	r6, r3
 800a150:	6841      	ldr	r1, [r0, #4]
 800a152:	d93d      	bls.n	800a1d0 <_dtoa_r+0x318>
 800a154:	4620      	mov	r0, r4
 800a156:	f001 fa79 	bl	800b64c <_Balloc>
 800a15a:	9001      	str	r0, [sp, #4]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d13b      	bne.n	800a1d8 <_dtoa_r+0x320>
 800a160:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <_dtoa_r+0x2f0>)
 800a162:	4602      	mov	r2, r0
 800a164:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a168:	e6c0      	b.n	8009eec <_dtoa_r+0x34>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e7df      	b.n	800a12e <_dtoa_r+0x276>
 800a16e:	bf00      	nop
 800a170:	636f4361 	.word	0x636f4361
 800a174:	3fd287a7 	.word	0x3fd287a7
 800a178:	8b60c8b3 	.word	0x8b60c8b3
 800a17c:	3fc68a28 	.word	0x3fc68a28
 800a180:	509f79fb 	.word	0x509f79fb
 800a184:	3fd34413 	.word	0x3fd34413
 800a188:	0800e38e 	.word	0x0800e38e
 800a18c:	0800e3a5 	.word	0x0800e3a5
 800a190:	7ff00000 	.word	0x7ff00000
 800a194:	0800e38a 	.word	0x0800e38a
 800a198:	0800e381 	.word	0x0800e381
 800a19c:	0800e662 	.word	0x0800e662
 800a1a0:	3ff80000 	.word	0x3ff80000
 800a1a4:	0800e578 	.word	0x0800e578
 800a1a8:	0800e400 	.word	0x0800e400
 800a1ac:	2501      	movs	r5, #1
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9306      	str	r3, [sp, #24]
 800a1b2:	9508      	str	r5, [sp, #32]
 800a1b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2312      	movs	r3, #18
 800a1c0:	e7b0      	b.n	800a124 <_dtoa_r+0x26c>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	9308      	str	r3, [sp, #32]
 800a1c6:	e7f5      	b.n	800a1b4 <_dtoa_r+0x2fc>
 800a1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1ce:	e7b8      	b.n	800a142 <_dtoa_r+0x28a>
 800a1d0:	3101      	adds	r1, #1
 800a1d2:	6041      	str	r1, [r0, #4]
 800a1d4:	0052      	lsls	r2, r2, #1
 800a1d6:	e7b8      	b.n	800a14a <_dtoa_r+0x292>
 800a1d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1da:	9a01      	ldr	r2, [sp, #4]
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	2b0e      	cmp	r3, #14
 800a1e2:	f200 809d 	bhi.w	800a320 <_dtoa_r+0x468>
 800a1e6:	2d00      	cmp	r5, #0
 800a1e8:	f000 809a 	beq.w	800a320 <_dtoa_r+0x468>
 800a1ec:	9b00      	ldr	r3, [sp, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dd32      	ble.n	800a258 <_dtoa_r+0x3a0>
 800a1f2:	4ab7      	ldr	r2, [pc, #732]	; (800a4d0 <_dtoa_r+0x618>)
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a200:	9b00      	ldr	r3, [sp, #0]
 800a202:	05d8      	lsls	r0, r3, #23
 800a204:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a208:	d516      	bpl.n	800a238 <_dtoa_r+0x380>
 800a20a:	4bb2      	ldr	r3, [pc, #712]	; (800a4d4 <_dtoa_r+0x61c>)
 800a20c:	ec51 0b19 	vmov	r0, r1, d9
 800a210:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a214:	f7f6 fb32 	bl	800087c <__aeabi_ddiv>
 800a218:	f007 070f 	and.w	r7, r7, #15
 800a21c:	4682      	mov	sl, r0
 800a21e:	468b      	mov	fp, r1
 800a220:	2503      	movs	r5, #3
 800a222:	4eac      	ldr	r6, [pc, #688]	; (800a4d4 <_dtoa_r+0x61c>)
 800a224:	b957      	cbnz	r7, 800a23c <_dtoa_r+0x384>
 800a226:	4642      	mov	r2, r8
 800a228:	464b      	mov	r3, r9
 800a22a:	4650      	mov	r0, sl
 800a22c:	4659      	mov	r1, fp
 800a22e:	f7f6 fb25 	bl	800087c <__aeabi_ddiv>
 800a232:	4682      	mov	sl, r0
 800a234:	468b      	mov	fp, r1
 800a236:	e028      	b.n	800a28a <_dtoa_r+0x3d2>
 800a238:	2502      	movs	r5, #2
 800a23a:	e7f2      	b.n	800a222 <_dtoa_r+0x36a>
 800a23c:	07f9      	lsls	r1, r7, #31
 800a23e:	d508      	bpl.n	800a252 <_dtoa_r+0x39a>
 800a240:	4640      	mov	r0, r8
 800a242:	4649      	mov	r1, r9
 800a244:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a248:	f7f6 f9ee 	bl	8000628 <__aeabi_dmul>
 800a24c:	3501      	adds	r5, #1
 800a24e:	4680      	mov	r8, r0
 800a250:	4689      	mov	r9, r1
 800a252:	107f      	asrs	r7, r7, #1
 800a254:	3608      	adds	r6, #8
 800a256:	e7e5      	b.n	800a224 <_dtoa_r+0x36c>
 800a258:	f000 809b 	beq.w	800a392 <_dtoa_r+0x4da>
 800a25c:	9b00      	ldr	r3, [sp, #0]
 800a25e:	4f9d      	ldr	r7, [pc, #628]	; (800a4d4 <_dtoa_r+0x61c>)
 800a260:	425e      	negs	r6, r3
 800a262:	4b9b      	ldr	r3, [pc, #620]	; (800a4d0 <_dtoa_r+0x618>)
 800a264:	f006 020f 	and.w	r2, r6, #15
 800a268:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a270:	ec51 0b19 	vmov	r0, r1, d9
 800a274:	f7f6 f9d8 	bl	8000628 <__aeabi_dmul>
 800a278:	1136      	asrs	r6, r6, #4
 800a27a:	4682      	mov	sl, r0
 800a27c:	468b      	mov	fp, r1
 800a27e:	2300      	movs	r3, #0
 800a280:	2502      	movs	r5, #2
 800a282:	2e00      	cmp	r6, #0
 800a284:	d17a      	bne.n	800a37c <_dtoa_r+0x4c4>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d1d3      	bne.n	800a232 <_dtoa_r+0x37a>
 800a28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 8082 	beq.w	800a396 <_dtoa_r+0x4de>
 800a292:	4b91      	ldr	r3, [pc, #580]	; (800a4d8 <_dtoa_r+0x620>)
 800a294:	2200      	movs	r2, #0
 800a296:	4650      	mov	r0, sl
 800a298:	4659      	mov	r1, fp
 800a29a:	f7f6 fc37 	bl	8000b0c <__aeabi_dcmplt>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d079      	beq.n	800a396 <_dtoa_r+0x4de>
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d076      	beq.n	800a396 <_dtoa_r+0x4de>
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dd36      	ble.n	800a31c <_dtoa_r+0x464>
 800a2ae:	9b00      	ldr	r3, [sp, #0]
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	4659      	mov	r1, fp
 800a2b4:	1e5f      	subs	r7, r3, #1
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	4b88      	ldr	r3, [pc, #544]	; (800a4dc <_dtoa_r+0x624>)
 800a2ba:	f7f6 f9b5 	bl	8000628 <__aeabi_dmul>
 800a2be:	9e02      	ldr	r6, [sp, #8]
 800a2c0:	4682      	mov	sl, r0
 800a2c2:	468b      	mov	fp, r1
 800a2c4:	3501      	adds	r5, #1
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	f7f6 f944 	bl	8000554 <__aeabi_i2d>
 800a2cc:	4652      	mov	r2, sl
 800a2ce:	465b      	mov	r3, fp
 800a2d0:	f7f6 f9aa 	bl	8000628 <__aeabi_dmul>
 800a2d4:	4b82      	ldr	r3, [pc, #520]	; (800a4e0 <_dtoa_r+0x628>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f7f5 fff0 	bl	80002bc <__adddf3>
 800a2dc:	46d0      	mov	r8, sl
 800a2de:	46d9      	mov	r9, fp
 800a2e0:	4682      	mov	sl, r0
 800a2e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a2e6:	2e00      	cmp	r6, #0
 800a2e8:	d158      	bne.n	800a39c <_dtoa_r+0x4e4>
 800a2ea:	4b7e      	ldr	r3, [pc, #504]	; (800a4e4 <_dtoa_r+0x62c>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f5 ffe1 	bl	80002b8 <__aeabi_dsub>
 800a2f6:	4652      	mov	r2, sl
 800a2f8:	465b      	mov	r3, fp
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	4689      	mov	r9, r1
 800a2fe:	f7f6 fc23 	bl	8000b48 <__aeabi_dcmpgt>
 800a302:	2800      	cmp	r0, #0
 800a304:	f040 8295 	bne.w	800a832 <_dtoa_r+0x97a>
 800a308:	4652      	mov	r2, sl
 800a30a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a30e:	4640      	mov	r0, r8
 800a310:	4649      	mov	r1, r9
 800a312:	f7f6 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	f040 8289 	bne.w	800a82e <_dtoa_r+0x976>
 800a31c:	ec5b ab19 	vmov	sl, fp, d9
 800a320:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a322:	2b00      	cmp	r3, #0
 800a324:	f2c0 8148 	blt.w	800a5b8 <_dtoa_r+0x700>
 800a328:	9a00      	ldr	r2, [sp, #0]
 800a32a:	2a0e      	cmp	r2, #14
 800a32c:	f300 8144 	bgt.w	800a5b8 <_dtoa_r+0x700>
 800a330:	4b67      	ldr	r3, [pc, #412]	; (800a4d0 <_dtoa_r+0x618>)
 800a332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a336:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	f280 80d5 	bge.w	800a4ec <_dtoa_r+0x634>
 800a342:	9b03      	ldr	r3, [sp, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	f300 80d1 	bgt.w	800a4ec <_dtoa_r+0x634>
 800a34a:	f040 826f 	bne.w	800a82c <_dtoa_r+0x974>
 800a34e:	4b65      	ldr	r3, [pc, #404]	; (800a4e4 <_dtoa_r+0x62c>)
 800a350:	2200      	movs	r2, #0
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f6 f967 	bl	8000628 <__aeabi_dmul>
 800a35a:	4652      	mov	r2, sl
 800a35c:	465b      	mov	r3, fp
 800a35e:	f7f6 fbe9 	bl	8000b34 <__aeabi_dcmpge>
 800a362:	9e03      	ldr	r6, [sp, #12]
 800a364:	4637      	mov	r7, r6
 800a366:	2800      	cmp	r0, #0
 800a368:	f040 8245 	bne.w	800a7f6 <_dtoa_r+0x93e>
 800a36c:	9d01      	ldr	r5, [sp, #4]
 800a36e:	2331      	movs	r3, #49	; 0x31
 800a370:	f805 3b01 	strb.w	r3, [r5], #1
 800a374:	9b00      	ldr	r3, [sp, #0]
 800a376:	3301      	adds	r3, #1
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	e240      	b.n	800a7fe <_dtoa_r+0x946>
 800a37c:	07f2      	lsls	r2, r6, #31
 800a37e:	d505      	bpl.n	800a38c <_dtoa_r+0x4d4>
 800a380:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a384:	f7f6 f950 	bl	8000628 <__aeabi_dmul>
 800a388:	3501      	adds	r5, #1
 800a38a:	2301      	movs	r3, #1
 800a38c:	1076      	asrs	r6, r6, #1
 800a38e:	3708      	adds	r7, #8
 800a390:	e777      	b.n	800a282 <_dtoa_r+0x3ca>
 800a392:	2502      	movs	r5, #2
 800a394:	e779      	b.n	800a28a <_dtoa_r+0x3d2>
 800a396:	9f00      	ldr	r7, [sp, #0]
 800a398:	9e03      	ldr	r6, [sp, #12]
 800a39a:	e794      	b.n	800a2c6 <_dtoa_r+0x40e>
 800a39c:	9901      	ldr	r1, [sp, #4]
 800a39e:	4b4c      	ldr	r3, [pc, #304]	; (800a4d0 <_dtoa_r+0x618>)
 800a3a0:	4431      	add	r1, r6
 800a3a2:	910d      	str	r1, [sp, #52]	; 0x34
 800a3a4:	9908      	ldr	r1, [sp, #32]
 800a3a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3ae:	2900      	cmp	r1, #0
 800a3b0:	d043      	beq.n	800a43a <_dtoa_r+0x582>
 800a3b2:	494d      	ldr	r1, [pc, #308]	; (800a4e8 <_dtoa_r+0x630>)
 800a3b4:	2000      	movs	r0, #0
 800a3b6:	f7f6 fa61 	bl	800087c <__aeabi_ddiv>
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	465b      	mov	r3, fp
 800a3be:	f7f5 ff7b 	bl	80002b8 <__aeabi_dsub>
 800a3c2:	9d01      	ldr	r5, [sp, #4]
 800a3c4:	4682      	mov	sl, r0
 800a3c6:	468b      	mov	fp, r1
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	4640      	mov	r0, r8
 800a3cc:	f7f6 fbdc 	bl	8000b88 <__aeabi_d2iz>
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	f7f6 f8bf 	bl	8000554 <__aeabi_i2d>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	460b      	mov	r3, r1
 800a3da:	4640      	mov	r0, r8
 800a3dc:	4649      	mov	r1, r9
 800a3de:	f7f5 ff6b 	bl	80002b8 <__aeabi_dsub>
 800a3e2:	3630      	adds	r6, #48	; 0x30
 800a3e4:	f805 6b01 	strb.w	r6, [r5], #1
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	465b      	mov	r3, fp
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	4689      	mov	r9, r1
 800a3f0:	f7f6 fb8c 	bl	8000b0c <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d163      	bne.n	800a4c0 <_dtoa_r+0x608>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	464b      	mov	r3, r9
 800a3fc:	4936      	ldr	r1, [pc, #216]	; (800a4d8 <_dtoa_r+0x620>)
 800a3fe:	2000      	movs	r0, #0
 800a400:	f7f5 ff5a 	bl	80002b8 <__aeabi_dsub>
 800a404:	4652      	mov	r2, sl
 800a406:	465b      	mov	r3, fp
 800a408:	f7f6 fb80 	bl	8000b0c <__aeabi_dcmplt>
 800a40c:	2800      	cmp	r0, #0
 800a40e:	f040 80b5 	bne.w	800a57c <_dtoa_r+0x6c4>
 800a412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a414:	429d      	cmp	r5, r3
 800a416:	d081      	beq.n	800a31c <_dtoa_r+0x464>
 800a418:	4b30      	ldr	r3, [pc, #192]	; (800a4dc <_dtoa_r+0x624>)
 800a41a:	2200      	movs	r2, #0
 800a41c:	4650      	mov	r0, sl
 800a41e:	4659      	mov	r1, fp
 800a420:	f7f6 f902 	bl	8000628 <__aeabi_dmul>
 800a424:	4b2d      	ldr	r3, [pc, #180]	; (800a4dc <_dtoa_r+0x624>)
 800a426:	4682      	mov	sl, r0
 800a428:	468b      	mov	fp, r1
 800a42a:	4640      	mov	r0, r8
 800a42c:	4649      	mov	r1, r9
 800a42e:	2200      	movs	r2, #0
 800a430:	f7f6 f8fa 	bl	8000628 <__aeabi_dmul>
 800a434:	4680      	mov	r8, r0
 800a436:	4689      	mov	r9, r1
 800a438:	e7c6      	b.n	800a3c8 <_dtoa_r+0x510>
 800a43a:	4650      	mov	r0, sl
 800a43c:	4659      	mov	r1, fp
 800a43e:	f7f6 f8f3 	bl	8000628 <__aeabi_dmul>
 800a442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a444:	9d01      	ldr	r5, [sp, #4]
 800a446:	930f      	str	r3, [sp, #60]	; 0x3c
 800a448:	4682      	mov	sl, r0
 800a44a:	468b      	mov	fp, r1
 800a44c:	4649      	mov	r1, r9
 800a44e:	4640      	mov	r0, r8
 800a450:	f7f6 fb9a 	bl	8000b88 <__aeabi_d2iz>
 800a454:	4606      	mov	r6, r0
 800a456:	f7f6 f87d 	bl	8000554 <__aeabi_i2d>
 800a45a:	3630      	adds	r6, #48	; 0x30
 800a45c:	4602      	mov	r2, r0
 800a45e:	460b      	mov	r3, r1
 800a460:	4640      	mov	r0, r8
 800a462:	4649      	mov	r1, r9
 800a464:	f7f5 ff28 	bl	80002b8 <__aeabi_dsub>
 800a468:	f805 6b01 	strb.w	r6, [r5], #1
 800a46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a46e:	429d      	cmp	r5, r3
 800a470:	4680      	mov	r8, r0
 800a472:	4689      	mov	r9, r1
 800a474:	f04f 0200 	mov.w	r2, #0
 800a478:	d124      	bne.n	800a4c4 <_dtoa_r+0x60c>
 800a47a:	4b1b      	ldr	r3, [pc, #108]	; (800a4e8 <_dtoa_r+0x630>)
 800a47c:	4650      	mov	r0, sl
 800a47e:	4659      	mov	r1, fp
 800a480:	f7f5 ff1c 	bl	80002bc <__adddf3>
 800a484:	4602      	mov	r2, r0
 800a486:	460b      	mov	r3, r1
 800a488:	4640      	mov	r0, r8
 800a48a:	4649      	mov	r1, r9
 800a48c:	f7f6 fb5c 	bl	8000b48 <__aeabi_dcmpgt>
 800a490:	2800      	cmp	r0, #0
 800a492:	d173      	bne.n	800a57c <_dtoa_r+0x6c4>
 800a494:	4652      	mov	r2, sl
 800a496:	465b      	mov	r3, fp
 800a498:	4913      	ldr	r1, [pc, #76]	; (800a4e8 <_dtoa_r+0x630>)
 800a49a:	2000      	movs	r0, #0
 800a49c:	f7f5 ff0c 	bl	80002b8 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f6 fb30 	bl	8000b0c <__aeabi_dcmplt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f43f af35 	beq.w	800a31c <_dtoa_r+0x464>
 800a4b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a4b4:	1e6b      	subs	r3, r5, #1
 800a4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4bc:	2b30      	cmp	r3, #48	; 0x30
 800a4be:	d0f8      	beq.n	800a4b2 <_dtoa_r+0x5fa>
 800a4c0:	9700      	str	r7, [sp, #0]
 800a4c2:	e049      	b.n	800a558 <_dtoa_r+0x6a0>
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <_dtoa_r+0x624>)
 800a4c6:	f7f6 f8af 	bl	8000628 <__aeabi_dmul>
 800a4ca:	4680      	mov	r8, r0
 800a4cc:	4689      	mov	r9, r1
 800a4ce:	e7bd      	b.n	800a44c <_dtoa_r+0x594>
 800a4d0:	0800e578 	.word	0x0800e578
 800a4d4:	0800e550 	.word	0x0800e550
 800a4d8:	3ff00000 	.word	0x3ff00000
 800a4dc:	40240000 	.word	0x40240000
 800a4e0:	401c0000 	.word	0x401c0000
 800a4e4:	40140000 	.word	0x40140000
 800a4e8:	3fe00000 	.word	0x3fe00000
 800a4ec:	9d01      	ldr	r5, [sp, #4]
 800a4ee:	4656      	mov	r6, sl
 800a4f0:	465f      	mov	r7, fp
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	4630      	mov	r0, r6
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	f7f6 f9bf 	bl	800087c <__aeabi_ddiv>
 800a4fe:	f7f6 fb43 	bl	8000b88 <__aeabi_d2iz>
 800a502:	4682      	mov	sl, r0
 800a504:	f7f6 f826 	bl	8000554 <__aeabi_i2d>
 800a508:	4642      	mov	r2, r8
 800a50a:	464b      	mov	r3, r9
 800a50c:	f7f6 f88c 	bl	8000628 <__aeabi_dmul>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4630      	mov	r0, r6
 800a516:	4639      	mov	r1, r7
 800a518:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a51c:	f7f5 fecc 	bl	80002b8 <__aeabi_dsub>
 800a520:	f805 6b01 	strb.w	r6, [r5], #1
 800a524:	9e01      	ldr	r6, [sp, #4]
 800a526:	9f03      	ldr	r7, [sp, #12]
 800a528:	1bae      	subs	r6, r5, r6
 800a52a:	42b7      	cmp	r7, r6
 800a52c:	4602      	mov	r2, r0
 800a52e:	460b      	mov	r3, r1
 800a530:	d135      	bne.n	800a59e <_dtoa_r+0x6e6>
 800a532:	f7f5 fec3 	bl	80002bc <__adddf3>
 800a536:	4642      	mov	r2, r8
 800a538:	464b      	mov	r3, r9
 800a53a:	4606      	mov	r6, r0
 800a53c:	460f      	mov	r7, r1
 800a53e:	f7f6 fb03 	bl	8000b48 <__aeabi_dcmpgt>
 800a542:	b9d0      	cbnz	r0, 800a57a <_dtoa_r+0x6c2>
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	4630      	mov	r0, r6
 800a54a:	4639      	mov	r1, r7
 800a54c:	f7f6 fad4 	bl	8000af8 <__aeabi_dcmpeq>
 800a550:	b110      	cbz	r0, 800a558 <_dtoa_r+0x6a0>
 800a552:	f01a 0f01 	tst.w	sl, #1
 800a556:	d110      	bne.n	800a57a <_dtoa_r+0x6c2>
 800a558:	4620      	mov	r0, r4
 800a55a:	ee18 1a10 	vmov	r1, s16
 800a55e:	f001 f8b5 	bl	800b6cc <_Bfree>
 800a562:	2300      	movs	r3, #0
 800a564:	9800      	ldr	r0, [sp, #0]
 800a566:	702b      	strb	r3, [r5, #0]
 800a568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a56a:	3001      	adds	r0, #1
 800a56c:	6018      	str	r0, [r3, #0]
 800a56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a570:	2b00      	cmp	r3, #0
 800a572:	f43f acf1 	beq.w	8009f58 <_dtoa_r+0xa0>
 800a576:	601d      	str	r5, [r3, #0]
 800a578:	e4ee      	b.n	8009f58 <_dtoa_r+0xa0>
 800a57a:	9f00      	ldr	r7, [sp, #0]
 800a57c:	462b      	mov	r3, r5
 800a57e:	461d      	mov	r5, r3
 800a580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a584:	2a39      	cmp	r2, #57	; 0x39
 800a586:	d106      	bne.n	800a596 <_dtoa_r+0x6de>
 800a588:	9a01      	ldr	r2, [sp, #4]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d1f7      	bne.n	800a57e <_dtoa_r+0x6c6>
 800a58e:	9901      	ldr	r1, [sp, #4]
 800a590:	2230      	movs	r2, #48	; 0x30
 800a592:	3701      	adds	r7, #1
 800a594:	700a      	strb	r2, [r1, #0]
 800a596:	781a      	ldrb	r2, [r3, #0]
 800a598:	3201      	adds	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]
 800a59c:	e790      	b.n	800a4c0 <_dtoa_r+0x608>
 800a59e:	4ba6      	ldr	r3, [pc, #664]	; (800a838 <_dtoa_r+0x980>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7f6 f841 	bl	8000628 <__aeabi_dmul>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	f7f6 faa3 	bl	8000af8 <__aeabi_dcmpeq>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d09d      	beq.n	800a4f2 <_dtoa_r+0x63a>
 800a5b6:	e7cf      	b.n	800a558 <_dtoa_r+0x6a0>
 800a5b8:	9a08      	ldr	r2, [sp, #32]
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	f000 80d7 	beq.w	800a76e <_dtoa_r+0x8b6>
 800a5c0:	9a06      	ldr	r2, [sp, #24]
 800a5c2:	2a01      	cmp	r2, #1
 800a5c4:	f300 80ba 	bgt.w	800a73c <_dtoa_r+0x884>
 800a5c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	f000 80b2 	beq.w	800a734 <_dtoa_r+0x87c>
 800a5d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5d4:	9e07      	ldr	r6, [sp, #28]
 800a5d6:	9d04      	ldr	r5, [sp, #16]
 800a5d8:	9a04      	ldr	r2, [sp, #16]
 800a5da:	441a      	add	r2, r3
 800a5dc:	9204      	str	r2, [sp, #16]
 800a5de:	9a05      	ldr	r2, [sp, #20]
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	441a      	add	r2, r3
 800a5e4:	4620      	mov	r0, r4
 800a5e6:	9205      	str	r2, [sp, #20]
 800a5e8:	f001 f972 	bl	800b8d0 <__i2b>
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	2d00      	cmp	r5, #0
 800a5f0:	dd0c      	ble.n	800a60c <_dtoa_r+0x754>
 800a5f2:	9b05      	ldr	r3, [sp, #20]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dd09      	ble.n	800a60c <_dtoa_r+0x754>
 800a5f8:	42ab      	cmp	r3, r5
 800a5fa:	9a04      	ldr	r2, [sp, #16]
 800a5fc:	bfa8      	it	ge
 800a5fe:	462b      	movge	r3, r5
 800a600:	1ad2      	subs	r2, r2, r3
 800a602:	9204      	str	r2, [sp, #16]
 800a604:	9a05      	ldr	r2, [sp, #20]
 800a606:	1aed      	subs	r5, r5, r3
 800a608:	1ad3      	subs	r3, r2, r3
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	9b07      	ldr	r3, [sp, #28]
 800a60e:	b31b      	cbz	r3, 800a658 <_dtoa_r+0x7a0>
 800a610:	9b08      	ldr	r3, [sp, #32]
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 80af 	beq.w	800a776 <_dtoa_r+0x8be>
 800a618:	2e00      	cmp	r6, #0
 800a61a:	dd13      	ble.n	800a644 <_dtoa_r+0x78c>
 800a61c:	4639      	mov	r1, r7
 800a61e:	4632      	mov	r2, r6
 800a620:	4620      	mov	r0, r4
 800a622:	f001 fa15 	bl	800ba50 <__pow5mult>
 800a626:	ee18 2a10 	vmov	r2, s16
 800a62a:	4601      	mov	r1, r0
 800a62c:	4607      	mov	r7, r0
 800a62e:	4620      	mov	r0, r4
 800a630:	f001 f964 	bl	800b8fc <__multiply>
 800a634:	ee18 1a10 	vmov	r1, s16
 800a638:	4680      	mov	r8, r0
 800a63a:	4620      	mov	r0, r4
 800a63c:	f001 f846 	bl	800b6cc <_Bfree>
 800a640:	ee08 8a10 	vmov	s16, r8
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	1b9a      	subs	r2, r3, r6
 800a648:	d006      	beq.n	800a658 <_dtoa_r+0x7a0>
 800a64a:	ee18 1a10 	vmov	r1, s16
 800a64e:	4620      	mov	r0, r4
 800a650:	f001 f9fe 	bl	800ba50 <__pow5mult>
 800a654:	ee08 0a10 	vmov	s16, r0
 800a658:	2101      	movs	r1, #1
 800a65a:	4620      	mov	r0, r4
 800a65c:	f001 f938 	bl	800b8d0 <__i2b>
 800a660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a662:	2b00      	cmp	r3, #0
 800a664:	4606      	mov	r6, r0
 800a666:	f340 8088 	ble.w	800a77a <_dtoa_r+0x8c2>
 800a66a:	461a      	mov	r2, r3
 800a66c:	4601      	mov	r1, r0
 800a66e:	4620      	mov	r0, r4
 800a670:	f001 f9ee 	bl	800ba50 <__pow5mult>
 800a674:	9b06      	ldr	r3, [sp, #24]
 800a676:	2b01      	cmp	r3, #1
 800a678:	4606      	mov	r6, r0
 800a67a:	f340 8081 	ble.w	800a780 <_dtoa_r+0x8c8>
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	6933      	ldr	r3, [r6, #16]
 800a684:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a688:	6918      	ldr	r0, [r3, #16]
 800a68a:	f001 f8d1 	bl	800b830 <__hi0bits>
 800a68e:	f1c0 0020 	rsb	r0, r0, #32
 800a692:	9b05      	ldr	r3, [sp, #20]
 800a694:	4418      	add	r0, r3
 800a696:	f010 001f 	ands.w	r0, r0, #31
 800a69a:	f000 8092 	beq.w	800a7c2 <_dtoa_r+0x90a>
 800a69e:	f1c0 0320 	rsb	r3, r0, #32
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	f340 808a 	ble.w	800a7bc <_dtoa_r+0x904>
 800a6a8:	f1c0 001c 	rsb	r0, r0, #28
 800a6ac:	9b04      	ldr	r3, [sp, #16]
 800a6ae:	4403      	add	r3, r0
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	9b05      	ldr	r3, [sp, #20]
 800a6b4:	4403      	add	r3, r0
 800a6b6:	4405      	add	r5, r0
 800a6b8:	9305      	str	r3, [sp, #20]
 800a6ba:	9b04      	ldr	r3, [sp, #16]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd07      	ble.n	800a6d0 <_dtoa_r+0x818>
 800a6c0:	ee18 1a10 	vmov	r1, s16
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f001 fa1c 	bl	800bb04 <__lshift>
 800a6cc:	ee08 0a10 	vmov	s16, r0
 800a6d0:	9b05      	ldr	r3, [sp, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	dd05      	ble.n	800a6e2 <_dtoa_r+0x82a>
 800a6d6:	4631      	mov	r1, r6
 800a6d8:	461a      	mov	r2, r3
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f001 fa12 	bl	800bb04 <__lshift>
 800a6e0:	4606      	mov	r6, r0
 800a6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d06e      	beq.n	800a7c6 <_dtoa_r+0x90e>
 800a6e8:	ee18 0a10 	vmov	r0, s16
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	f001 fa79 	bl	800bbe4 <__mcmp>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	da67      	bge.n	800a7c6 <_dtoa_r+0x90e>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	ee18 1a10 	vmov	r1, s16
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	220a      	movs	r2, #10
 800a702:	2300      	movs	r3, #0
 800a704:	4620      	mov	r0, r4
 800a706:	f001 f803 	bl	800b710 <__multadd>
 800a70a:	9b08      	ldr	r3, [sp, #32]
 800a70c:	ee08 0a10 	vmov	s16, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 81b1 	beq.w	800aa78 <_dtoa_r+0xbc0>
 800a716:	2300      	movs	r3, #0
 800a718:	4639      	mov	r1, r7
 800a71a:	220a      	movs	r2, #10
 800a71c:	4620      	mov	r0, r4
 800a71e:	f000 fff7 	bl	800b710 <__multadd>
 800a722:	9b02      	ldr	r3, [sp, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	4607      	mov	r7, r0
 800a728:	f300 808e 	bgt.w	800a848 <_dtoa_r+0x990>
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	2b02      	cmp	r3, #2
 800a730:	dc51      	bgt.n	800a7d6 <_dtoa_r+0x91e>
 800a732:	e089      	b.n	800a848 <_dtoa_r+0x990>
 800a734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a736:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a73a:	e74b      	b.n	800a5d4 <_dtoa_r+0x71c>
 800a73c:	9b03      	ldr	r3, [sp, #12]
 800a73e:	1e5e      	subs	r6, r3, #1
 800a740:	9b07      	ldr	r3, [sp, #28]
 800a742:	42b3      	cmp	r3, r6
 800a744:	bfbf      	itttt	lt
 800a746:	9b07      	ldrlt	r3, [sp, #28]
 800a748:	9607      	strlt	r6, [sp, #28]
 800a74a:	1af2      	sublt	r2, r6, r3
 800a74c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a74e:	bfb6      	itet	lt
 800a750:	189b      	addlt	r3, r3, r2
 800a752:	1b9e      	subge	r6, r3, r6
 800a754:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a756:	9b03      	ldr	r3, [sp, #12]
 800a758:	bfb8      	it	lt
 800a75a:	2600      	movlt	r6, #0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	bfb7      	itett	lt
 800a760:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a764:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a768:	1a9d      	sublt	r5, r3, r2
 800a76a:	2300      	movlt	r3, #0
 800a76c:	e734      	b.n	800a5d8 <_dtoa_r+0x720>
 800a76e:	9e07      	ldr	r6, [sp, #28]
 800a770:	9d04      	ldr	r5, [sp, #16]
 800a772:	9f08      	ldr	r7, [sp, #32]
 800a774:	e73b      	b.n	800a5ee <_dtoa_r+0x736>
 800a776:	9a07      	ldr	r2, [sp, #28]
 800a778:	e767      	b.n	800a64a <_dtoa_r+0x792>
 800a77a:	9b06      	ldr	r3, [sp, #24]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	dc18      	bgt.n	800a7b2 <_dtoa_r+0x8fa>
 800a780:	f1ba 0f00 	cmp.w	sl, #0
 800a784:	d115      	bne.n	800a7b2 <_dtoa_r+0x8fa>
 800a786:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a78a:	b993      	cbnz	r3, 800a7b2 <_dtoa_r+0x8fa>
 800a78c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a790:	0d1b      	lsrs	r3, r3, #20
 800a792:	051b      	lsls	r3, r3, #20
 800a794:	b183      	cbz	r3, 800a7b8 <_dtoa_r+0x900>
 800a796:	9b04      	ldr	r3, [sp, #16]
 800a798:	3301      	adds	r3, #1
 800a79a:	9304      	str	r3, [sp, #16]
 800a79c:	9b05      	ldr	r3, [sp, #20]
 800a79e:	3301      	adds	r3, #1
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	f04f 0801 	mov.w	r8, #1
 800a7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f47f af6a 	bne.w	800a682 <_dtoa_r+0x7ca>
 800a7ae:	2001      	movs	r0, #1
 800a7b0:	e76f      	b.n	800a692 <_dtoa_r+0x7da>
 800a7b2:	f04f 0800 	mov.w	r8, #0
 800a7b6:	e7f6      	b.n	800a7a6 <_dtoa_r+0x8ee>
 800a7b8:	4698      	mov	r8, r3
 800a7ba:	e7f4      	b.n	800a7a6 <_dtoa_r+0x8ee>
 800a7bc:	f43f af7d 	beq.w	800a6ba <_dtoa_r+0x802>
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	301c      	adds	r0, #28
 800a7c4:	e772      	b.n	800a6ac <_dtoa_r+0x7f4>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dc37      	bgt.n	800a83c <_dtoa_r+0x984>
 800a7cc:	9b06      	ldr	r3, [sp, #24]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	dd34      	ble.n	800a83c <_dtoa_r+0x984>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	9302      	str	r3, [sp, #8]
 800a7d6:	9b02      	ldr	r3, [sp, #8]
 800a7d8:	b96b      	cbnz	r3, 800a7f6 <_dtoa_r+0x93e>
 800a7da:	4631      	mov	r1, r6
 800a7dc:	2205      	movs	r2, #5
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f000 ff96 	bl	800b710 <__multadd>
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	ee18 0a10 	vmov	r0, s16
 800a7ec:	f001 f9fa 	bl	800bbe4 <__mcmp>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f73f adbb 	bgt.w	800a36c <_dtoa_r+0x4b4>
 800a7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f8:	9d01      	ldr	r5, [sp, #4]
 800a7fa:	43db      	mvns	r3, r3
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	f04f 0800 	mov.w	r8, #0
 800a802:	4631      	mov	r1, r6
 800a804:	4620      	mov	r0, r4
 800a806:	f000 ff61 	bl	800b6cc <_Bfree>
 800a80a:	2f00      	cmp	r7, #0
 800a80c:	f43f aea4 	beq.w	800a558 <_dtoa_r+0x6a0>
 800a810:	f1b8 0f00 	cmp.w	r8, #0
 800a814:	d005      	beq.n	800a822 <_dtoa_r+0x96a>
 800a816:	45b8      	cmp	r8, r7
 800a818:	d003      	beq.n	800a822 <_dtoa_r+0x96a>
 800a81a:	4641      	mov	r1, r8
 800a81c:	4620      	mov	r0, r4
 800a81e:	f000 ff55 	bl	800b6cc <_Bfree>
 800a822:	4639      	mov	r1, r7
 800a824:	4620      	mov	r0, r4
 800a826:	f000 ff51 	bl	800b6cc <_Bfree>
 800a82a:	e695      	b.n	800a558 <_dtoa_r+0x6a0>
 800a82c:	2600      	movs	r6, #0
 800a82e:	4637      	mov	r7, r6
 800a830:	e7e1      	b.n	800a7f6 <_dtoa_r+0x93e>
 800a832:	9700      	str	r7, [sp, #0]
 800a834:	4637      	mov	r7, r6
 800a836:	e599      	b.n	800a36c <_dtoa_r+0x4b4>
 800a838:	40240000 	.word	0x40240000
 800a83c:	9b08      	ldr	r3, [sp, #32]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 80ca 	beq.w	800a9d8 <_dtoa_r+0xb20>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	9302      	str	r3, [sp, #8]
 800a848:	2d00      	cmp	r5, #0
 800a84a:	dd05      	ble.n	800a858 <_dtoa_r+0x9a0>
 800a84c:	4639      	mov	r1, r7
 800a84e:	462a      	mov	r2, r5
 800a850:	4620      	mov	r0, r4
 800a852:	f001 f957 	bl	800bb04 <__lshift>
 800a856:	4607      	mov	r7, r0
 800a858:	f1b8 0f00 	cmp.w	r8, #0
 800a85c:	d05b      	beq.n	800a916 <_dtoa_r+0xa5e>
 800a85e:	6879      	ldr	r1, [r7, #4]
 800a860:	4620      	mov	r0, r4
 800a862:	f000 fef3 	bl	800b64c <_Balloc>
 800a866:	4605      	mov	r5, r0
 800a868:	b928      	cbnz	r0, 800a876 <_dtoa_r+0x9be>
 800a86a:	4b87      	ldr	r3, [pc, #540]	; (800aa88 <_dtoa_r+0xbd0>)
 800a86c:	4602      	mov	r2, r0
 800a86e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a872:	f7ff bb3b 	b.w	8009eec <_dtoa_r+0x34>
 800a876:	693a      	ldr	r2, [r7, #16]
 800a878:	3202      	adds	r2, #2
 800a87a:	0092      	lsls	r2, r2, #2
 800a87c:	f107 010c 	add.w	r1, r7, #12
 800a880:	300c      	adds	r0, #12
 800a882:	f7fd fc1d 	bl	80080c0 <memcpy>
 800a886:	2201      	movs	r2, #1
 800a888:	4629      	mov	r1, r5
 800a88a:	4620      	mov	r0, r4
 800a88c:	f001 f93a 	bl	800bb04 <__lshift>
 800a890:	9b01      	ldr	r3, [sp, #4]
 800a892:	f103 0901 	add.w	r9, r3, #1
 800a896:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a89a:	4413      	add	r3, r2
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	f00a 0301 	and.w	r3, sl, #1
 800a8a2:	46b8      	mov	r8, r7
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	ee18 0a10 	vmov	r0, s16
 800a8ae:	f7ff fa77 	bl	8009da0 <quorem>
 800a8b2:	4641      	mov	r1, r8
 800a8b4:	9002      	str	r0, [sp, #8]
 800a8b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a8ba:	ee18 0a10 	vmov	r0, s16
 800a8be:	f001 f991 	bl	800bbe4 <__mcmp>
 800a8c2:	463a      	mov	r2, r7
 800a8c4:	9003      	str	r0, [sp, #12]
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f001 f9a7 	bl	800bc1c <__mdiff>
 800a8ce:	68c2      	ldr	r2, [r0, #12]
 800a8d0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	bb02      	cbnz	r2, 800a91a <_dtoa_r+0xa62>
 800a8d8:	4601      	mov	r1, r0
 800a8da:	ee18 0a10 	vmov	r0, s16
 800a8de:	f001 f981 	bl	800bbe4 <__mcmp>
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	9207      	str	r2, [sp, #28]
 800a8ea:	f000 feef 	bl	800b6cc <_Bfree>
 800a8ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a8f2:	ea43 0102 	orr.w	r1, r3, r2
 800a8f6:	9b04      	ldr	r3, [sp, #16]
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	464d      	mov	r5, r9
 800a8fc:	d10f      	bne.n	800a91e <_dtoa_r+0xa66>
 800a8fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a902:	d02a      	beq.n	800a95a <_dtoa_r+0xaa2>
 800a904:	9b03      	ldr	r3, [sp, #12]
 800a906:	2b00      	cmp	r3, #0
 800a908:	dd02      	ble.n	800a910 <_dtoa_r+0xa58>
 800a90a:	9b02      	ldr	r3, [sp, #8]
 800a90c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a910:	f88b a000 	strb.w	sl, [fp]
 800a914:	e775      	b.n	800a802 <_dtoa_r+0x94a>
 800a916:	4638      	mov	r0, r7
 800a918:	e7ba      	b.n	800a890 <_dtoa_r+0x9d8>
 800a91a:	2201      	movs	r2, #1
 800a91c:	e7e2      	b.n	800a8e4 <_dtoa_r+0xa2c>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	db04      	blt.n	800a92e <_dtoa_r+0xa76>
 800a924:	9906      	ldr	r1, [sp, #24]
 800a926:	430b      	orrs	r3, r1
 800a928:	9904      	ldr	r1, [sp, #16]
 800a92a:	430b      	orrs	r3, r1
 800a92c:	d122      	bne.n	800a974 <_dtoa_r+0xabc>
 800a92e:	2a00      	cmp	r2, #0
 800a930:	ddee      	ble.n	800a910 <_dtoa_r+0xa58>
 800a932:	ee18 1a10 	vmov	r1, s16
 800a936:	2201      	movs	r2, #1
 800a938:	4620      	mov	r0, r4
 800a93a:	f001 f8e3 	bl	800bb04 <__lshift>
 800a93e:	4631      	mov	r1, r6
 800a940:	ee08 0a10 	vmov	s16, r0
 800a944:	f001 f94e 	bl	800bbe4 <__mcmp>
 800a948:	2800      	cmp	r0, #0
 800a94a:	dc03      	bgt.n	800a954 <_dtoa_r+0xa9c>
 800a94c:	d1e0      	bne.n	800a910 <_dtoa_r+0xa58>
 800a94e:	f01a 0f01 	tst.w	sl, #1
 800a952:	d0dd      	beq.n	800a910 <_dtoa_r+0xa58>
 800a954:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a958:	d1d7      	bne.n	800a90a <_dtoa_r+0xa52>
 800a95a:	2339      	movs	r3, #57	; 0x39
 800a95c:	f88b 3000 	strb.w	r3, [fp]
 800a960:	462b      	mov	r3, r5
 800a962:	461d      	mov	r5, r3
 800a964:	3b01      	subs	r3, #1
 800a966:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a96a:	2a39      	cmp	r2, #57	; 0x39
 800a96c:	d071      	beq.n	800aa52 <_dtoa_r+0xb9a>
 800a96e:	3201      	adds	r2, #1
 800a970:	701a      	strb	r2, [r3, #0]
 800a972:	e746      	b.n	800a802 <_dtoa_r+0x94a>
 800a974:	2a00      	cmp	r2, #0
 800a976:	dd07      	ble.n	800a988 <_dtoa_r+0xad0>
 800a978:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a97c:	d0ed      	beq.n	800a95a <_dtoa_r+0xaa2>
 800a97e:	f10a 0301 	add.w	r3, sl, #1
 800a982:	f88b 3000 	strb.w	r3, [fp]
 800a986:	e73c      	b.n	800a802 <_dtoa_r+0x94a>
 800a988:	9b05      	ldr	r3, [sp, #20]
 800a98a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a98e:	4599      	cmp	r9, r3
 800a990:	d047      	beq.n	800aa22 <_dtoa_r+0xb6a>
 800a992:	ee18 1a10 	vmov	r1, s16
 800a996:	2300      	movs	r3, #0
 800a998:	220a      	movs	r2, #10
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 feb8 	bl	800b710 <__multadd>
 800a9a0:	45b8      	cmp	r8, r7
 800a9a2:	ee08 0a10 	vmov	s16, r0
 800a9a6:	f04f 0300 	mov.w	r3, #0
 800a9aa:	f04f 020a 	mov.w	r2, #10
 800a9ae:	4641      	mov	r1, r8
 800a9b0:	4620      	mov	r0, r4
 800a9b2:	d106      	bne.n	800a9c2 <_dtoa_r+0xb0a>
 800a9b4:	f000 feac 	bl	800b710 <__multadd>
 800a9b8:	4680      	mov	r8, r0
 800a9ba:	4607      	mov	r7, r0
 800a9bc:	f109 0901 	add.w	r9, r9, #1
 800a9c0:	e772      	b.n	800a8a8 <_dtoa_r+0x9f0>
 800a9c2:	f000 fea5 	bl	800b710 <__multadd>
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4680      	mov	r8, r0
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	220a      	movs	r2, #10
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f000 fe9e 	bl	800b710 <__multadd>
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	e7f1      	b.n	800a9bc <_dtoa_r+0xb04>
 800a9d8:	9b03      	ldr	r3, [sp, #12]
 800a9da:	9302      	str	r3, [sp, #8]
 800a9dc:	9d01      	ldr	r5, [sp, #4]
 800a9de:	ee18 0a10 	vmov	r0, s16
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	f7ff f9dc 	bl	8009da0 <quorem>
 800a9e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	f805 ab01 	strb.w	sl, [r5], #1
 800a9f2:	1aea      	subs	r2, r5, r3
 800a9f4:	9b02      	ldr	r3, [sp, #8]
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	dd09      	ble.n	800aa0e <_dtoa_r+0xb56>
 800a9fa:	ee18 1a10 	vmov	r1, s16
 800a9fe:	2300      	movs	r3, #0
 800aa00:	220a      	movs	r2, #10
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 fe84 	bl	800b710 <__multadd>
 800aa08:	ee08 0a10 	vmov	s16, r0
 800aa0c:	e7e7      	b.n	800a9de <_dtoa_r+0xb26>
 800aa0e:	9b02      	ldr	r3, [sp, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bfc8      	it	gt
 800aa14:	461d      	movgt	r5, r3
 800aa16:	9b01      	ldr	r3, [sp, #4]
 800aa18:	bfd8      	it	le
 800aa1a:	2501      	movle	r5, #1
 800aa1c:	441d      	add	r5, r3
 800aa1e:	f04f 0800 	mov.w	r8, #0
 800aa22:	ee18 1a10 	vmov	r1, s16
 800aa26:	2201      	movs	r2, #1
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f001 f86b 	bl	800bb04 <__lshift>
 800aa2e:	4631      	mov	r1, r6
 800aa30:	ee08 0a10 	vmov	s16, r0
 800aa34:	f001 f8d6 	bl	800bbe4 <__mcmp>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	dc91      	bgt.n	800a960 <_dtoa_r+0xaa8>
 800aa3c:	d102      	bne.n	800aa44 <_dtoa_r+0xb8c>
 800aa3e:	f01a 0f01 	tst.w	sl, #1
 800aa42:	d18d      	bne.n	800a960 <_dtoa_r+0xaa8>
 800aa44:	462b      	mov	r3, r5
 800aa46:	461d      	mov	r5, r3
 800aa48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa4c:	2a30      	cmp	r2, #48	; 0x30
 800aa4e:	d0fa      	beq.n	800aa46 <_dtoa_r+0xb8e>
 800aa50:	e6d7      	b.n	800a802 <_dtoa_r+0x94a>
 800aa52:	9a01      	ldr	r2, [sp, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d184      	bne.n	800a962 <_dtoa_r+0xaaa>
 800aa58:	9b00      	ldr	r3, [sp, #0]
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	2331      	movs	r3, #49	; 0x31
 800aa60:	7013      	strb	r3, [r2, #0]
 800aa62:	e6ce      	b.n	800a802 <_dtoa_r+0x94a>
 800aa64:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <_dtoa_r+0xbd4>)
 800aa66:	f7ff ba95 	b.w	8009f94 <_dtoa_r+0xdc>
 800aa6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	f47f aa6e 	bne.w	8009f4e <_dtoa_r+0x96>
 800aa72:	4b07      	ldr	r3, [pc, #28]	; (800aa90 <_dtoa_r+0xbd8>)
 800aa74:	f7ff ba8e 	b.w	8009f94 <_dtoa_r+0xdc>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dcae      	bgt.n	800a9dc <_dtoa_r+0xb24>
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	f73f aea8 	bgt.w	800a7d6 <_dtoa_r+0x91e>
 800aa86:	e7a9      	b.n	800a9dc <_dtoa_r+0xb24>
 800aa88:	0800e400 	.word	0x0800e400
 800aa8c:	0800e661 	.word	0x0800e661
 800aa90:	0800e381 	.word	0x0800e381

0800aa94 <__sflush_r>:
 800aa94:	898a      	ldrh	r2, [r1, #12]
 800aa96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa9a:	4605      	mov	r5, r0
 800aa9c:	0710      	lsls	r0, r2, #28
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	d458      	bmi.n	800ab54 <__sflush_r+0xc0>
 800aaa2:	684b      	ldr	r3, [r1, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	dc05      	bgt.n	800aab4 <__sflush_r+0x20>
 800aaa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dc02      	bgt.n	800aab4 <__sflush_r+0x20>
 800aaae:	2000      	movs	r0, #0
 800aab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d0f9      	beq.n	800aaae <__sflush_r+0x1a>
 800aaba:	2300      	movs	r3, #0
 800aabc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aac0:	682f      	ldr	r7, [r5, #0]
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	d032      	beq.n	800ab2c <__sflush_r+0x98>
 800aac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	075a      	lsls	r2, r3, #29
 800aacc:	d505      	bpl.n	800aada <__sflush_r+0x46>
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	1ac0      	subs	r0, r0, r3
 800aad2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aad4:	b10b      	cbz	r3, 800aada <__sflush_r+0x46>
 800aad6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aad8:	1ac0      	subs	r0, r0, r3
 800aada:	2300      	movs	r3, #0
 800aadc:	4602      	mov	r2, r0
 800aade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aae0:	6a21      	ldr	r1, [r4, #32]
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b0      	blx	r6
 800aae6:	1c43      	adds	r3, r0, #1
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	d106      	bne.n	800aafa <__sflush_r+0x66>
 800aaec:	6829      	ldr	r1, [r5, #0]
 800aaee:	291d      	cmp	r1, #29
 800aaf0:	d82c      	bhi.n	800ab4c <__sflush_r+0xb8>
 800aaf2:	4a2a      	ldr	r2, [pc, #168]	; (800ab9c <__sflush_r+0x108>)
 800aaf4:	40ca      	lsrs	r2, r1
 800aaf6:	07d6      	lsls	r6, r2, #31
 800aaf8:	d528      	bpl.n	800ab4c <__sflush_r+0xb8>
 800aafa:	2200      	movs	r2, #0
 800aafc:	6062      	str	r2, [r4, #4]
 800aafe:	04d9      	lsls	r1, r3, #19
 800ab00:	6922      	ldr	r2, [r4, #16]
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	d504      	bpl.n	800ab10 <__sflush_r+0x7c>
 800ab06:	1c42      	adds	r2, r0, #1
 800ab08:	d101      	bne.n	800ab0e <__sflush_r+0x7a>
 800ab0a:	682b      	ldr	r3, [r5, #0]
 800ab0c:	b903      	cbnz	r3, 800ab10 <__sflush_r+0x7c>
 800ab0e:	6560      	str	r0, [r4, #84]	; 0x54
 800ab10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab12:	602f      	str	r7, [r5, #0]
 800ab14:	2900      	cmp	r1, #0
 800ab16:	d0ca      	beq.n	800aaae <__sflush_r+0x1a>
 800ab18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab1c:	4299      	cmp	r1, r3
 800ab1e:	d002      	beq.n	800ab26 <__sflush_r+0x92>
 800ab20:	4628      	mov	r0, r5
 800ab22:	f001 fa6b 	bl	800bffc <_free_r>
 800ab26:	2000      	movs	r0, #0
 800ab28:	6360      	str	r0, [r4, #52]	; 0x34
 800ab2a:	e7c1      	b.n	800aab0 <__sflush_r+0x1c>
 800ab2c:	6a21      	ldr	r1, [r4, #32]
 800ab2e:	2301      	movs	r3, #1
 800ab30:	4628      	mov	r0, r5
 800ab32:	47b0      	blx	r6
 800ab34:	1c41      	adds	r1, r0, #1
 800ab36:	d1c7      	bne.n	800aac8 <__sflush_r+0x34>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d0c4      	beq.n	800aac8 <__sflush_r+0x34>
 800ab3e:	2b1d      	cmp	r3, #29
 800ab40:	d001      	beq.n	800ab46 <__sflush_r+0xb2>
 800ab42:	2b16      	cmp	r3, #22
 800ab44:	d101      	bne.n	800ab4a <__sflush_r+0xb6>
 800ab46:	602f      	str	r7, [r5, #0]
 800ab48:	e7b1      	b.n	800aaae <__sflush_r+0x1a>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	e7ad      	b.n	800aab0 <__sflush_r+0x1c>
 800ab54:	690f      	ldr	r7, [r1, #16]
 800ab56:	2f00      	cmp	r7, #0
 800ab58:	d0a9      	beq.n	800aaae <__sflush_r+0x1a>
 800ab5a:	0793      	lsls	r3, r2, #30
 800ab5c:	680e      	ldr	r6, [r1, #0]
 800ab5e:	bf08      	it	eq
 800ab60:	694b      	ldreq	r3, [r1, #20]
 800ab62:	600f      	str	r7, [r1, #0]
 800ab64:	bf18      	it	ne
 800ab66:	2300      	movne	r3, #0
 800ab68:	eba6 0807 	sub.w	r8, r6, r7
 800ab6c:	608b      	str	r3, [r1, #8]
 800ab6e:	f1b8 0f00 	cmp.w	r8, #0
 800ab72:	dd9c      	ble.n	800aaae <__sflush_r+0x1a>
 800ab74:	6a21      	ldr	r1, [r4, #32]
 800ab76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab78:	4643      	mov	r3, r8
 800ab7a:	463a      	mov	r2, r7
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	47b0      	blx	r6
 800ab80:	2800      	cmp	r0, #0
 800ab82:	dc06      	bgt.n	800ab92 <__sflush_r+0xfe>
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab8a:	81a3      	strh	r3, [r4, #12]
 800ab8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab90:	e78e      	b.n	800aab0 <__sflush_r+0x1c>
 800ab92:	4407      	add	r7, r0
 800ab94:	eba8 0800 	sub.w	r8, r8, r0
 800ab98:	e7e9      	b.n	800ab6e <__sflush_r+0xda>
 800ab9a:	bf00      	nop
 800ab9c:	20400001 	.word	0x20400001

0800aba0 <_fflush_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	690b      	ldr	r3, [r1, #16]
 800aba4:	4605      	mov	r5, r0
 800aba6:	460c      	mov	r4, r1
 800aba8:	b913      	cbnz	r3, 800abb0 <_fflush_r+0x10>
 800abaa:	2500      	movs	r5, #0
 800abac:	4628      	mov	r0, r5
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	b118      	cbz	r0, 800abba <_fflush_r+0x1a>
 800abb2:	6983      	ldr	r3, [r0, #24]
 800abb4:	b90b      	cbnz	r3, 800abba <_fflush_r+0x1a>
 800abb6:	f000 f899 	bl	800acec <__sinit>
 800abba:	4b14      	ldr	r3, [pc, #80]	; (800ac0c <_fflush_r+0x6c>)
 800abbc:	429c      	cmp	r4, r3
 800abbe:	d11b      	bne.n	800abf8 <_fflush_r+0x58>
 800abc0:	686c      	ldr	r4, [r5, #4]
 800abc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0ef      	beq.n	800abaa <_fflush_r+0xa>
 800abca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800abcc:	07d0      	lsls	r0, r2, #31
 800abce:	d404      	bmi.n	800abda <_fflush_r+0x3a>
 800abd0:	0599      	lsls	r1, r3, #22
 800abd2:	d402      	bmi.n	800abda <_fflush_r+0x3a>
 800abd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abd6:	f000 fcb8 	bl	800b54a <__retarget_lock_acquire_recursive>
 800abda:	4628      	mov	r0, r5
 800abdc:	4621      	mov	r1, r4
 800abde:	f7ff ff59 	bl	800aa94 <__sflush_r>
 800abe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abe4:	07da      	lsls	r2, r3, #31
 800abe6:	4605      	mov	r5, r0
 800abe8:	d4e0      	bmi.n	800abac <_fflush_r+0xc>
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	059b      	lsls	r3, r3, #22
 800abee:	d4dd      	bmi.n	800abac <_fflush_r+0xc>
 800abf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abf2:	f000 fcab 	bl	800b54c <__retarget_lock_release_recursive>
 800abf6:	e7d9      	b.n	800abac <_fflush_r+0xc>
 800abf8:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <_fflush_r+0x70>)
 800abfa:	429c      	cmp	r4, r3
 800abfc:	d101      	bne.n	800ac02 <_fflush_r+0x62>
 800abfe:	68ac      	ldr	r4, [r5, #8]
 800ac00:	e7df      	b.n	800abc2 <_fflush_r+0x22>
 800ac02:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <_fflush_r+0x74>)
 800ac04:	429c      	cmp	r4, r3
 800ac06:	bf08      	it	eq
 800ac08:	68ec      	ldreq	r4, [r5, #12]
 800ac0a:	e7da      	b.n	800abc2 <_fflush_r+0x22>
 800ac0c:	0800e434 	.word	0x0800e434
 800ac10:	0800e454 	.word	0x0800e454
 800ac14:	0800e414 	.word	0x0800e414

0800ac18 <fflush>:
 800ac18:	4601      	mov	r1, r0
 800ac1a:	b920      	cbnz	r0, 800ac26 <fflush+0xe>
 800ac1c:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <fflush+0x18>)
 800ac1e:	4905      	ldr	r1, [pc, #20]	; (800ac34 <fflush+0x1c>)
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f000 b8fe 	b.w	800ae22 <_fwalk_reent>
 800ac26:	4b04      	ldr	r3, [pc, #16]	; (800ac38 <fflush+0x20>)
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	f7ff bfb9 	b.w	800aba0 <_fflush_r>
 800ac2e:	bf00      	nop
 800ac30:	0800e1f0 	.word	0x0800e1f0
 800ac34:	0800aba1 	.word	0x0800aba1
 800ac38:	20000018 	.word	0x20000018

0800ac3c <std>:
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	4604      	mov	r4, r0
 800ac42:	e9c0 3300 	strd	r3, r3, [r0]
 800ac46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac4a:	6083      	str	r3, [r0, #8]
 800ac4c:	8181      	strh	r1, [r0, #12]
 800ac4e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac50:	81c2      	strh	r2, [r0, #14]
 800ac52:	6183      	str	r3, [r0, #24]
 800ac54:	4619      	mov	r1, r3
 800ac56:	2208      	movs	r2, #8
 800ac58:	305c      	adds	r0, #92	; 0x5c
 800ac5a:	f7fd fa3f 	bl	80080dc <memset>
 800ac5e:	4b05      	ldr	r3, [pc, #20]	; (800ac74 <std+0x38>)
 800ac60:	6263      	str	r3, [r4, #36]	; 0x24
 800ac62:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <std+0x3c>)
 800ac64:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac66:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <std+0x40>)
 800ac68:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac6a:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <std+0x44>)
 800ac6c:	6224      	str	r4, [r4, #32]
 800ac6e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac70:	bd10      	pop	{r4, pc}
 800ac72:	bf00      	nop
 800ac74:	0800cfc1 	.word	0x0800cfc1
 800ac78:	0800cfe3 	.word	0x0800cfe3
 800ac7c:	0800d01b 	.word	0x0800d01b
 800ac80:	0800d03f 	.word	0x0800d03f

0800ac84 <_cleanup_r>:
 800ac84:	4901      	ldr	r1, [pc, #4]	; (800ac8c <_cleanup_r+0x8>)
 800ac86:	f000 b8cc 	b.w	800ae22 <_fwalk_reent>
 800ac8a:	bf00      	nop
 800ac8c:	0800aba1 	.word	0x0800aba1

0800ac90 <__sfmoreglue>:
 800ac90:	b570      	push	{r4, r5, r6, lr}
 800ac92:	2268      	movs	r2, #104	; 0x68
 800ac94:	1e4d      	subs	r5, r1, #1
 800ac96:	4355      	muls	r5, r2
 800ac98:	460e      	mov	r6, r1
 800ac9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac9e:	f001 fa19 	bl	800c0d4 <_malloc_r>
 800aca2:	4604      	mov	r4, r0
 800aca4:	b140      	cbz	r0, 800acb8 <__sfmoreglue+0x28>
 800aca6:	2100      	movs	r1, #0
 800aca8:	e9c0 1600 	strd	r1, r6, [r0]
 800acac:	300c      	adds	r0, #12
 800acae:	60a0      	str	r0, [r4, #8]
 800acb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acb4:	f7fd fa12 	bl	80080dc <memset>
 800acb8:	4620      	mov	r0, r4
 800acba:	bd70      	pop	{r4, r5, r6, pc}

0800acbc <__sfp_lock_acquire>:
 800acbc:	4801      	ldr	r0, [pc, #4]	; (800acc4 <__sfp_lock_acquire+0x8>)
 800acbe:	f000 bc44 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800acc2:	bf00      	nop
 800acc4:	200004a5 	.word	0x200004a5

0800acc8 <__sfp_lock_release>:
 800acc8:	4801      	ldr	r0, [pc, #4]	; (800acd0 <__sfp_lock_release+0x8>)
 800acca:	f000 bc3f 	b.w	800b54c <__retarget_lock_release_recursive>
 800acce:	bf00      	nop
 800acd0:	200004a5 	.word	0x200004a5

0800acd4 <__sinit_lock_acquire>:
 800acd4:	4801      	ldr	r0, [pc, #4]	; (800acdc <__sinit_lock_acquire+0x8>)
 800acd6:	f000 bc38 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800acda:	bf00      	nop
 800acdc:	200004a6 	.word	0x200004a6

0800ace0 <__sinit_lock_release>:
 800ace0:	4801      	ldr	r0, [pc, #4]	; (800ace8 <__sinit_lock_release+0x8>)
 800ace2:	f000 bc33 	b.w	800b54c <__retarget_lock_release_recursive>
 800ace6:	bf00      	nop
 800ace8:	200004a6 	.word	0x200004a6

0800acec <__sinit>:
 800acec:	b510      	push	{r4, lr}
 800acee:	4604      	mov	r4, r0
 800acf0:	f7ff fff0 	bl	800acd4 <__sinit_lock_acquire>
 800acf4:	69a3      	ldr	r3, [r4, #24]
 800acf6:	b11b      	cbz	r3, 800ad00 <__sinit+0x14>
 800acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfc:	f7ff bff0 	b.w	800ace0 <__sinit_lock_release>
 800ad00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad04:	6523      	str	r3, [r4, #80]	; 0x50
 800ad06:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <__sinit+0x68>)
 800ad08:	4a13      	ldr	r2, [pc, #76]	; (800ad58 <__sinit+0x6c>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad0e:	42a3      	cmp	r3, r4
 800ad10:	bf04      	itt	eq
 800ad12:	2301      	moveq	r3, #1
 800ad14:	61a3      	streq	r3, [r4, #24]
 800ad16:	4620      	mov	r0, r4
 800ad18:	f000 f820 	bl	800ad5c <__sfp>
 800ad1c:	6060      	str	r0, [r4, #4]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 f81c 	bl	800ad5c <__sfp>
 800ad24:	60a0      	str	r0, [r4, #8]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f818 	bl	800ad5c <__sfp>
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	60e0      	str	r0, [r4, #12]
 800ad30:	2104      	movs	r1, #4
 800ad32:	6860      	ldr	r0, [r4, #4]
 800ad34:	f7ff ff82 	bl	800ac3c <std>
 800ad38:	68a0      	ldr	r0, [r4, #8]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	2109      	movs	r1, #9
 800ad3e:	f7ff ff7d 	bl	800ac3c <std>
 800ad42:	68e0      	ldr	r0, [r4, #12]
 800ad44:	2202      	movs	r2, #2
 800ad46:	2112      	movs	r1, #18
 800ad48:	f7ff ff78 	bl	800ac3c <std>
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	61a3      	str	r3, [r4, #24]
 800ad50:	e7d2      	b.n	800acf8 <__sinit+0xc>
 800ad52:	bf00      	nop
 800ad54:	0800e1f0 	.word	0x0800e1f0
 800ad58:	0800ac85 	.word	0x0800ac85

0800ad5c <__sfp>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	4607      	mov	r7, r0
 800ad60:	f7ff ffac 	bl	800acbc <__sfp_lock_acquire>
 800ad64:	4b1e      	ldr	r3, [pc, #120]	; (800ade0 <__sfp+0x84>)
 800ad66:	681e      	ldr	r6, [r3, #0]
 800ad68:	69b3      	ldr	r3, [r6, #24]
 800ad6a:	b913      	cbnz	r3, 800ad72 <__sfp+0x16>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f7ff ffbd 	bl	800acec <__sinit>
 800ad72:	3648      	adds	r6, #72	; 0x48
 800ad74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	d503      	bpl.n	800ad84 <__sfp+0x28>
 800ad7c:	6833      	ldr	r3, [r6, #0]
 800ad7e:	b30b      	cbz	r3, 800adc4 <__sfp+0x68>
 800ad80:	6836      	ldr	r6, [r6, #0]
 800ad82:	e7f7      	b.n	800ad74 <__sfp+0x18>
 800ad84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad88:	b9d5      	cbnz	r5, 800adc0 <__sfp+0x64>
 800ad8a:	4b16      	ldr	r3, [pc, #88]	; (800ade4 <__sfp+0x88>)
 800ad8c:	60e3      	str	r3, [r4, #12]
 800ad8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad92:	6665      	str	r5, [r4, #100]	; 0x64
 800ad94:	f000 fbd8 	bl	800b548 <__retarget_lock_init_recursive>
 800ad98:	f7ff ff96 	bl	800acc8 <__sfp_lock_release>
 800ad9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ada0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ada4:	6025      	str	r5, [r4, #0]
 800ada6:	61a5      	str	r5, [r4, #24]
 800ada8:	2208      	movs	r2, #8
 800adaa:	4629      	mov	r1, r5
 800adac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adb0:	f7fd f994 	bl	80080dc <memset>
 800adb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adbc:	4620      	mov	r0, r4
 800adbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc0:	3468      	adds	r4, #104	; 0x68
 800adc2:	e7d9      	b.n	800ad78 <__sfp+0x1c>
 800adc4:	2104      	movs	r1, #4
 800adc6:	4638      	mov	r0, r7
 800adc8:	f7ff ff62 	bl	800ac90 <__sfmoreglue>
 800adcc:	4604      	mov	r4, r0
 800adce:	6030      	str	r0, [r6, #0]
 800add0:	2800      	cmp	r0, #0
 800add2:	d1d5      	bne.n	800ad80 <__sfp+0x24>
 800add4:	f7ff ff78 	bl	800acc8 <__sfp_lock_release>
 800add8:	230c      	movs	r3, #12
 800adda:	603b      	str	r3, [r7, #0]
 800addc:	e7ee      	b.n	800adbc <__sfp+0x60>
 800adde:	bf00      	nop
 800ade0:	0800e1f0 	.word	0x0800e1f0
 800ade4:	ffff0001 	.word	0xffff0001

0800ade8 <_fwalk>:
 800ade8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adec:	460f      	mov	r7, r1
 800adee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adf2:	2600      	movs	r6, #0
 800adf4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800adf8:	f1b8 0801 	subs.w	r8, r8, #1
 800adfc:	d505      	bpl.n	800ae0a <_fwalk+0x22>
 800adfe:	6824      	ldr	r4, [r4, #0]
 800ae00:	2c00      	cmp	r4, #0
 800ae02:	d1f7      	bne.n	800adf4 <_fwalk+0xc>
 800ae04:	4630      	mov	r0, r6
 800ae06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0a:	89ab      	ldrh	r3, [r5, #12]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d906      	bls.n	800ae1e <_fwalk+0x36>
 800ae10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae14:	3301      	adds	r3, #1
 800ae16:	d002      	beq.n	800ae1e <_fwalk+0x36>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b8      	blx	r7
 800ae1c:	4306      	orrs	r6, r0
 800ae1e:	3568      	adds	r5, #104	; 0x68
 800ae20:	e7ea      	b.n	800adf8 <_fwalk+0x10>

0800ae22 <_fwalk_reent>:
 800ae22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae26:	4606      	mov	r6, r0
 800ae28:	4688      	mov	r8, r1
 800ae2a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae2e:	2700      	movs	r7, #0
 800ae30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae34:	f1b9 0901 	subs.w	r9, r9, #1
 800ae38:	d505      	bpl.n	800ae46 <_fwalk_reent+0x24>
 800ae3a:	6824      	ldr	r4, [r4, #0]
 800ae3c:	2c00      	cmp	r4, #0
 800ae3e:	d1f7      	bne.n	800ae30 <_fwalk_reent+0xe>
 800ae40:	4638      	mov	r0, r7
 800ae42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d907      	bls.n	800ae5c <_fwalk_reent+0x3a>
 800ae4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae50:	3301      	adds	r3, #1
 800ae52:	d003      	beq.n	800ae5c <_fwalk_reent+0x3a>
 800ae54:	4629      	mov	r1, r5
 800ae56:	4630      	mov	r0, r6
 800ae58:	47c0      	blx	r8
 800ae5a:	4307      	orrs	r7, r0
 800ae5c:	3568      	adds	r5, #104	; 0x68
 800ae5e:	e7e9      	b.n	800ae34 <_fwalk_reent+0x12>

0800ae60 <rshift>:
 800ae60:	6903      	ldr	r3, [r0, #16]
 800ae62:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae6a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae6e:	f100 0414 	add.w	r4, r0, #20
 800ae72:	dd45      	ble.n	800af00 <rshift+0xa0>
 800ae74:	f011 011f 	ands.w	r1, r1, #31
 800ae78:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae7c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae80:	d10c      	bne.n	800ae9c <rshift+0x3c>
 800ae82:	f100 0710 	add.w	r7, r0, #16
 800ae86:	4629      	mov	r1, r5
 800ae88:	42b1      	cmp	r1, r6
 800ae8a:	d334      	bcc.n	800aef6 <rshift+0x96>
 800ae8c:	1a9b      	subs	r3, r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	1eea      	subs	r2, r5, #3
 800ae92:	4296      	cmp	r6, r2
 800ae94:	bf38      	it	cc
 800ae96:	2300      	movcc	r3, #0
 800ae98:	4423      	add	r3, r4
 800ae9a:	e015      	b.n	800aec8 <rshift+0x68>
 800ae9c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aea0:	f1c1 0820 	rsb	r8, r1, #32
 800aea4:	40cf      	lsrs	r7, r1
 800aea6:	f105 0e04 	add.w	lr, r5, #4
 800aeaa:	46a1      	mov	r9, r4
 800aeac:	4576      	cmp	r6, lr
 800aeae:	46f4      	mov	ip, lr
 800aeb0:	d815      	bhi.n	800aede <rshift+0x7e>
 800aeb2:	1a9a      	subs	r2, r3, r2
 800aeb4:	0092      	lsls	r2, r2, #2
 800aeb6:	3a04      	subs	r2, #4
 800aeb8:	3501      	adds	r5, #1
 800aeba:	42ae      	cmp	r6, r5
 800aebc:	bf38      	it	cc
 800aebe:	2200      	movcc	r2, #0
 800aec0:	18a3      	adds	r3, r4, r2
 800aec2:	50a7      	str	r7, [r4, r2]
 800aec4:	b107      	cbz	r7, 800aec8 <rshift+0x68>
 800aec6:	3304      	adds	r3, #4
 800aec8:	1b1a      	subs	r2, r3, r4
 800aeca:	42a3      	cmp	r3, r4
 800aecc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aed0:	bf08      	it	eq
 800aed2:	2300      	moveq	r3, #0
 800aed4:	6102      	str	r2, [r0, #16]
 800aed6:	bf08      	it	eq
 800aed8:	6143      	streq	r3, [r0, #20]
 800aeda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aede:	f8dc c000 	ldr.w	ip, [ip]
 800aee2:	fa0c fc08 	lsl.w	ip, ip, r8
 800aee6:	ea4c 0707 	orr.w	r7, ip, r7
 800aeea:	f849 7b04 	str.w	r7, [r9], #4
 800aeee:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aef2:	40cf      	lsrs	r7, r1
 800aef4:	e7da      	b.n	800aeac <rshift+0x4c>
 800aef6:	f851 cb04 	ldr.w	ip, [r1], #4
 800aefa:	f847 cf04 	str.w	ip, [r7, #4]!
 800aefe:	e7c3      	b.n	800ae88 <rshift+0x28>
 800af00:	4623      	mov	r3, r4
 800af02:	e7e1      	b.n	800aec8 <rshift+0x68>

0800af04 <__hexdig_fun>:
 800af04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af08:	2b09      	cmp	r3, #9
 800af0a:	d802      	bhi.n	800af12 <__hexdig_fun+0xe>
 800af0c:	3820      	subs	r0, #32
 800af0e:	b2c0      	uxtb	r0, r0
 800af10:	4770      	bx	lr
 800af12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af16:	2b05      	cmp	r3, #5
 800af18:	d801      	bhi.n	800af1e <__hexdig_fun+0x1a>
 800af1a:	3847      	subs	r0, #71	; 0x47
 800af1c:	e7f7      	b.n	800af0e <__hexdig_fun+0xa>
 800af1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af22:	2b05      	cmp	r3, #5
 800af24:	d801      	bhi.n	800af2a <__hexdig_fun+0x26>
 800af26:	3827      	subs	r0, #39	; 0x27
 800af28:	e7f1      	b.n	800af0e <__hexdig_fun+0xa>
 800af2a:	2000      	movs	r0, #0
 800af2c:	4770      	bx	lr
	...

0800af30 <__gethex>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	ed2d 8b02 	vpush	{d8}
 800af38:	b089      	sub	sp, #36	; 0x24
 800af3a:	ee08 0a10 	vmov	s16, r0
 800af3e:	9304      	str	r3, [sp, #16]
 800af40:	4bb4      	ldr	r3, [pc, #720]	; (800b214 <__gethex+0x2e4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	4618      	mov	r0, r3
 800af48:	468b      	mov	fp, r1
 800af4a:	4690      	mov	r8, r2
 800af4c:	f7f5 f958 	bl	8000200 <strlen>
 800af50:	9b01      	ldr	r3, [sp, #4]
 800af52:	f8db 2000 	ldr.w	r2, [fp]
 800af56:	4403      	add	r3, r0
 800af58:	4682      	mov	sl, r0
 800af5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af5e:	9305      	str	r3, [sp, #20]
 800af60:	1c93      	adds	r3, r2, #2
 800af62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af6a:	32fe      	adds	r2, #254	; 0xfe
 800af6c:	18d1      	adds	r1, r2, r3
 800af6e:	461f      	mov	r7, r3
 800af70:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af74:	9100      	str	r1, [sp, #0]
 800af76:	2830      	cmp	r0, #48	; 0x30
 800af78:	d0f8      	beq.n	800af6c <__gethex+0x3c>
 800af7a:	f7ff ffc3 	bl	800af04 <__hexdig_fun>
 800af7e:	4604      	mov	r4, r0
 800af80:	2800      	cmp	r0, #0
 800af82:	d13a      	bne.n	800affa <__gethex+0xca>
 800af84:	9901      	ldr	r1, [sp, #4]
 800af86:	4652      	mov	r2, sl
 800af88:	4638      	mov	r0, r7
 800af8a:	f002 f85c 	bl	800d046 <strncmp>
 800af8e:	4605      	mov	r5, r0
 800af90:	2800      	cmp	r0, #0
 800af92:	d168      	bne.n	800b066 <__gethex+0x136>
 800af94:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af98:	eb07 060a 	add.w	r6, r7, sl
 800af9c:	f7ff ffb2 	bl	800af04 <__hexdig_fun>
 800afa0:	2800      	cmp	r0, #0
 800afa2:	d062      	beq.n	800b06a <__gethex+0x13a>
 800afa4:	4633      	mov	r3, r6
 800afa6:	7818      	ldrb	r0, [r3, #0]
 800afa8:	2830      	cmp	r0, #48	; 0x30
 800afaa:	461f      	mov	r7, r3
 800afac:	f103 0301 	add.w	r3, r3, #1
 800afb0:	d0f9      	beq.n	800afa6 <__gethex+0x76>
 800afb2:	f7ff ffa7 	bl	800af04 <__hexdig_fun>
 800afb6:	2301      	movs	r3, #1
 800afb8:	fab0 f480 	clz	r4, r0
 800afbc:	0964      	lsrs	r4, r4, #5
 800afbe:	4635      	mov	r5, r6
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	463a      	mov	r2, r7
 800afc4:	4616      	mov	r6, r2
 800afc6:	3201      	adds	r2, #1
 800afc8:	7830      	ldrb	r0, [r6, #0]
 800afca:	f7ff ff9b 	bl	800af04 <__hexdig_fun>
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1f8      	bne.n	800afc4 <__gethex+0x94>
 800afd2:	9901      	ldr	r1, [sp, #4]
 800afd4:	4652      	mov	r2, sl
 800afd6:	4630      	mov	r0, r6
 800afd8:	f002 f835 	bl	800d046 <strncmp>
 800afdc:	b980      	cbnz	r0, 800b000 <__gethex+0xd0>
 800afde:	b94d      	cbnz	r5, 800aff4 <__gethex+0xc4>
 800afe0:	eb06 050a 	add.w	r5, r6, sl
 800afe4:	462a      	mov	r2, r5
 800afe6:	4616      	mov	r6, r2
 800afe8:	3201      	adds	r2, #1
 800afea:	7830      	ldrb	r0, [r6, #0]
 800afec:	f7ff ff8a 	bl	800af04 <__hexdig_fun>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	d1f8      	bne.n	800afe6 <__gethex+0xb6>
 800aff4:	1bad      	subs	r5, r5, r6
 800aff6:	00ad      	lsls	r5, r5, #2
 800aff8:	e004      	b.n	800b004 <__gethex+0xd4>
 800affa:	2400      	movs	r4, #0
 800affc:	4625      	mov	r5, r4
 800affe:	e7e0      	b.n	800afc2 <__gethex+0x92>
 800b000:	2d00      	cmp	r5, #0
 800b002:	d1f7      	bne.n	800aff4 <__gethex+0xc4>
 800b004:	7833      	ldrb	r3, [r6, #0]
 800b006:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b00a:	2b50      	cmp	r3, #80	; 0x50
 800b00c:	d13b      	bne.n	800b086 <__gethex+0x156>
 800b00e:	7873      	ldrb	r3, [r6, #1]
 800b010:	2b2b      	cmp	r3, #43	; 0x2b
 800b012:	d02c      	beq.n	800b06e <__gethex+0x13e>
 800b014:	2b2d      	cmp	r3, #45	; 0x2d
 800b016:	d02e      	beq.n	800b076 <__gethex+0x146>
 800b018:	1c71      	adds	r1, r6, #1
 800b01a:	f04f 0900 	mov.w	r9, #0
 800b01e:	7808      	ldrb	r0, [r1, #0]
 800b020:	f7ff ff70 	bl	800af04 <__hexdig_fun>
 800b024:	1e43      	subs	r3, r0, #1
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b18      	cmp	r3, #24
 800b02a:	d82c      	bhi.n	800b086 <__gethex+0x156>
 800b02c:	f1a0 0210 	sub.w	r2, r0, #16
 800b030:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b034:	f7ff ff66 	bl	800af04 <__hexdig_fun>
 800b038:	1e43      	subs	r3, r0, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b18      	cmp	r3, #24
 800b03e:	d91d      	bls.n	800b07c <__gethex+0x14c>
 800b040:	f1b9 0f00 	cmp.w	r9, #0
 800b044:	d000      	beq.n	800b048 <__gethex+0x118>
 800b046:	4252      	negs	r2, r2
 800b048:	4415      	add	r5, r2
 800b04a:	f8cb 1000 	str.w	r1, [fp]
 800b04e:	b1e4      	cbz	r4, 800b08a <__gethex+0x15a>
 800b050:	9b00      	ldr	r3, [sp, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	bf14      	ite	ne
 800b056:	2700      	movne	r7, #0
 800b058:	2706      	moveq	r7, #6
 800b05a:	4638      	mov	r0, r7
 800b05c:	b009      	add	sp, #36	; 0x24
 800b05e:	ecbd 8b02 	vpop	{d8}
 800b062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b066:	463e      	mov	r6, r7
 800b068:	4625      	mov	r5, r4
 800b06a:	2401      	movs	r4, #1
 800b06c:	e7ca      	b.n	800b004 <__gethex+0xd4>
 800b06e:	f04f 0900 	mov.w	r9, #0
 800b072:	1cb1      	adds	r1, r6, #2
 800b074:	e7d3      	b.n	800b01e <__gethex+0xee>
 800b076:	f04f 0901 	mov.w	r9, #1
 800b07a:	e7fa      	b.n	800b072 <__gethex+0x142>
 800b07c:	230a      	movs	r3, #10
 800b07e:	fb03 0202 	mla	r2, r3, r2, r0
 800b082:	3a10      	subs	r2, #16
 800b084:	e7d4      	b.n	800b030 <__gethex+0x100>
 800b086:	4631      	mov	r1, r6
 800b088:	e7df      	b.n	800b04a <__gethex+0x11a>
 800b08a:	1bf3      	subs	r3, r6, r7
 800b08c:	3b01      	subs	r3, #1
 800b08e:	4621      	mov	r1, r4
 800b090:	2b07      	cmp	r3, #7
 800b092:	dc0b      	bgt.n	800b0ac <__gethex+0x17c>
 800b094:	ee18 0a10 	vmov	r0, s16
 800b098:	f000 fad8 	bl	800b64c <_Balloc>
 800b09c:	4604      	mov	r4, r0
 800b09e:	b940      	cbnz	r0, 800b0b2 <__gethex+0x182>
 800b0a0:	4b5d      	ldr	r3, [pc, #372]	; (800b218 <__gethex+0x2e8>)
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	21de      	movs	r1, #222	; 0xde
 800b0a6:	485d      	ldr	r0, [pc, #372]	; (800b21c <__gethex+0x2ec>)
 800b0a8:	f002 fa08 	bl	800d4bc <__assert_func>
 800b0ac:	3101      	adds	r1, #1
 800b0ae:	105b      	asrs	r3, r3, #1
 800b0b0:	e7ee      	b.n	800b090 <__gethex+0x160>
 800b0b2:	f100 0914 	add.w	r9, r0, #20
 800b0b6:	f04f 0b00 	mov.w	fp, #0
 800b0ba:	f1ca 0301 	rsb	r3, sl, #1
 800b0be:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0c2:	f8cd b000 	str.w	fp, [sp]
 800b0c6:	9306      	str	r3, [sp, #24]
 800b0c8:	42b7      	cmp	r7, r6
 800b0ca:	d340      	bcc.n	800b14e <__gethex+0x21e>
 800b0cc:	9802      	ldr	r0, [sp, #8]
 800b0ce:	9b00      	ldr	r3, [sp, #0]
 800b0d0:	f840 3b04 	str.w	r3, [r0], #4
 800b0d4:	eba0 0009 	sub.w	r0, r0, r9
 800b0d8:	1080      	asrs	r0, r0, #2
 800b0da:	0146      	lsls	r6, r0, #5
 800b0dc:	6120      	str	r0, [r4, #16]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fba6 	bl	800b830 <__hi0bits>
 800b0e4:	1a30      	subs	r0, r6, r0
 800b0e6:	f8d8 6000 	ldr.w	r6, [r8]
 800b0ea:	42b0      	cmp	r0, r6
 800b0ec:	dd63      	ble.n	800b1b6 <__gethex+0x286>
 800b0ee:	1b87      	subs	r7, r0, r6
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 ff4a 	bl	800bf8c <__any_on>
 800b0f8:	4682      	mov	sl, r0
 800b0fa:	b1a8      	cbz	r0, 800b128 <__gethex+0x1f8>
 800b0fc:	1e7b      	subs	r3, r7, #1
 800b0fe:	1159      	asrs	r1, r3, #5
 800b100:	f003 021f 	and.w	r2, r3, #31
 800b104:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b108:	f04f 0a01 	mov.w	sl, #1
 800b10c:	fa0a f202 	lsl.w	r2, sl, r2
 800b110:	420a      	tst	r2, r1
 800b112:	d009      	beq.n	800b128 <__gethex+0x1f8>
 800b114:	4553      	cmp	r3, sl
 800b116:	dd05      	ble.n	800b124 <__gethex+0x1f4>
 800b118:	1eb9      	subs	r1, r7, #2
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 ff36 	bl	800bf8c <__any_on>
 800b120:	2800      	cmp	r0, #0
 800b122:	d145      	bne.n	800b1b0 <__gethex+0x280>
 800b124:	f04f 0a02 	mov.w	sl, #2
 800b128:	4639      	mov	r1, r7
 800b12a:	4620      	mov	r0, r4
 800b12c:	f7ff fe98 	bl	800ae60 <rshift>
 800b130:	443d      	add	r5, r7
 800b132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b136:	42ab      	cmp	r3, r5
 800b138:	da4c      	bge.n	800b1d4 <__gethex+0x2a4>
 800b13a:	ee18 0a10 	vmov	r0, s16
 800b13e:	4621      	mov	r1, r4
 800b140:	f000 fac4 	bl	800b6cc <_Bfree>
 800b144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b146:	2300      	movs	r3, #0
 800b148:	6013      	str	r3, [r2, #0]
 800b14a:	27a3      	movs	r7, #163	; 0xa3
 800b14c:	e785      	b.n	800b05a <__gethex+0x12a>
 800b14e:	1e73      	subs	r3, r6, #1
 800b150:	9a05      	ldr	r2, [sp, #20]
 800b152:	9303      	str	r3, [sp, #12]
 800b154:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b158:	4293      	cmp	r3, r2
 800b15a:	d019      	beq.n	800b190 <__gethex+0x260>
 800b15c:	f1bb 0f20 	cmp.w	fp, #32
 800b160:	d107      	bne.n	800b172 <__gethex+0x242>
 800b162:	9b02      	ldr	r3, [sp, #8]
 800b164:	9a00      	ldr	r2, [sp, #0]
 800b166:	f843 2b04 	str.w	r2, [r3], #4
 800b16a:	9302      	str	r3, [sp, #8]
 800b16c:	2300      	movs	r3, #0
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	469b      	mov	fp, r3
 800b172:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b176:	f7ff fec5 	bl	800af04 <__hexdig_fun>
 800b17a:	9b00      	ldr	r3, [sp, #0]
 800b17c:	f000 000f 	and.w	r0, r0, #15
 800b180:	fa00 f00b 	lsl.w	r0, r0, fp
 800b184:	4303      	orrs	r3, r0
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	f10b 0b04 	add.w	fp, fp, #4
 800b18c:	9b03      	ldr	r3, [sp, #12]
 800b18e:	e00d      	b.n	800b1ac <__gethex+0x27c>
 800b190:	9b03      	ldr	r3, [sp, #12]
 800b192:	9a06      	ldr	r2, [sp, #24]
 800b194:	4413      	add	r3, r2
 800b196:	42bb      	cmp	r3, r7
 800b198:	d3e0      	bcc.n	800b15c <__gethex+0x22c>
 800b19a:	4618      	mov	r0, r3
 800b19c:	9901      	ldr	r1, [sp, #4]
 800b19e:	9307      	str	r3, [sp, #28]
 800b1a0:	4652      	mov	r2, sl
 800b1a2:	f001 ff50 	bl	800d046 <strncmp>
 800b1a6:	9b07      	ldr	r3, [sp, #28]
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d1d7      	bne.n	800b15c <__gethex+0x22c>
 800b1ac:	461e      	mov	r6, r3
 800b1ae:	e78b      	b.n	800b0c8 <__gethex+0x198>
 800b1b0:	f04f 0a03 	mov.w	sl, #3
 800b1b4:	e7b8      	b.n	800b128 <__gethex+0x1f8>
 800b1b6:	da0a      	bge.n	800b1ce <__gethex+0x29e>
 800b1b8:	1a37      	subs	r7, r6, r0
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	ee18 0a10 	vmov	r0, s16
 800b1c0:	463a      	mov	r2, r7
 800b1c2:	f000 fc9f 	bl	800bb04 <__lshift>
 800b1c6:	1bed      	subs	r5, r5, r7
 800b1c8:	4604      	mov	r4, r0
 800b1ca:	f100 0914 	add.w	r9, r0, #20
 800b1ce:	f04f 0a00 	mov.w	sl, #0
 800b1d2:	e7ae      	b.n	800b132 <__gethex+0x202>
 800b1d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1d8:	42a8      	cmp	r0, r5
 800b1da:	dd72      	ble.n	800b2c2 <__gethex+0x392>
 800b1dc:	1b45      	subs	r5, r0, r5
 800b1de:	42ae      	cmp	r6, r5
 800b1e0:	dc36      	bgt.n	800b250 <__gethex+0x320>
 800b1e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d02a      	beq.n	800b240 <__gethex+0x310>
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	d02c      	beq.n	800b248 <__gethex+0x318>
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d11c      	bne.n	800b22c <__gethex+0x2fc>
 800b1f2:	42ae      	cmp	r6, r5
 800b1f4:	d11a      	bne.n	800b22c <__gethex+0x2fc>
 800b1f6:	2e01      	cmp	r6, #1
 800b1f8:	d112      	bne.n	800b220 <__gethex+0x2f0>
 800b1fa:	9a04      	ldr	r2, [sp, #16]
 800b1fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b200:	6013      	str	r3, [r2, #0]
 800b202:	2301      	movs	r3, #1
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	f8c9 3000 	str.w	r3, [r9]
 800b20a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b20c:	2762      	movs	r7, #98	; 0x62
 800b20e:	601c      	str	r4, [r3, #0]
 800b210:	e723      	b.n	800b05a <__gethex+0x12a>
 800b212:	bf00      	nop
 800b214:	0800e4dc 	.word	0x0800e4dc
 800b218:	0800e400 	.word	0x0800e400
 800b21c:	0800e474 	.word	0x0800e474
 800b220:	1e71      	subs	r1, r6, #1
 800b222:	4620      	mov	r0, r4
 800b224:	f000 feb2 	bl	800bf8c <__any_on>
 800b228:	2800      	cmp	r0, #0
 800b22a:	d1e6      	bne.n	800b1fa <__gethex+0x2ca>
 800b22c:	ee18 0a10 	vmov	r0, s16
 800b230:	4621      	mov	r1, r4
 800b232:	f000 fa4b 	bl	800b6cc <_Bfree>
 800b236:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b238:	2300      	movs	r3, #0
 800b23a:	6013      	str	r3, [r2, #0]
 800b23c:	2750      	movs	r7, #80	; 0x50
 800b23e:	e70c      	b.n	800b05a <__gethex+0x12a>
 800b240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1f2      	bne.n	800b22c <__gethex+0x2fc>
 800b246:	e7d8      	b.n	800b1fa <__gethex+0x2ca>
 800b248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1d5      	bne.n	800b1fa <__gethex+0x2ca>
 800b24e:	e7ed      	b.n	800b22c <__gethex+0x2fc>
 800b250:	1e6f      	subs	r7, r5, #1
 800b252:	f1ba 0f00 	cmp.w	sl, #0
 800b256:	d131      	bne.n	800b2bc <__gethex+0x38c>
 800b258:	b127      	cbz	r7, 800b264 <__gethex+0x334>
 800b25a:	4639      	mov	r1, r7
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fe95 	bl	800bf8c <__any_on>
 800b262:	4682      	mov	sl, r0
 800b264:	117b      	asrs	r3, r7, #5
 800b266:	2101      	movs	r1, #1
 800b268:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b26c:	f007 071f 	and.w	r7, r7, #31
 800b270:	fa01 f707 	lsl.w	r7, r1, r7
 800b274:	421f      	tst	r7, r3
 800b276:	4629      	mov	r1, r5
 800b278:	4620      	mov	r0, r4
 800b27a:	bf18      	it	ne
 800b27c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b280:	1b76      	subs	r6, r6, r5
 800b282:	f7ff fded 	bl	800ae60 <rshift>
 800b286:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b28a:	2702      	movs	r7, #2
 800b28c:	f1ba 0f00 	cmp.w	sl, #0
 800b290:	d048      	beq.n	800b324 <__gethex+0x3f4>
 800b292:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d015      	beq.n	800b2c6 <__gethex+0x396>
 800b29a:	2b03      	cmp	r3, #3
 800b29c:	d017      	beq.n	800b2ce <__gethex+0x39e>
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d109      	bne.n	800b2b6 <__gethex+0x386>
 800b2a2:	f01a 0f02 	tst.w	sl, #2
 800b2a6:	d006      	beq.n	800b2b6 <__gethex+0x386>
 800b2a8:	f8d9 0000 	ldr.w	r0, [r9]
 800b2ac:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2b0:	f01a 0f01 	tst.w	sl, #1
 800b2b4:	d10e      	bne.n	800b2d4 <__gethex+0x3a4>
 800b2b6:	f047 0710 	orr.w	r7, r7, #16
 800b2ba:	e033      	b.n	800b324 <__gethex+0x3f4>
 800b2bc:	f04f 0a01 	mov.w	sl, #1
 800b2c0:	e7d0      	b.n	800b264 <__gethex+0x334>
 800b2c2:	2701      	movs	r7, #1
 800b2c4:	e7e2      	b.n	800b28c <__gethex+0x35c>
 800b2c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2c8:	f1c3 0301 	rsb	r3, r3, #1
 800b2cc:	9315      	str	r3, [sp, #84]	; 0x54
 800b2ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0f0      	beq.n	800b2b6 <__gethex+0x386>
 800b2d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b2d8:	f104 0314 	add.w	r3, r4, #20
 800b2dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b2e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b2e4:	f04f 0c00 	mov.w	ip, #0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b2f2:	d01c      	beq.n	800b32e <__gethex+0x3fe>
 800b2f4:	3201      	adds	r2, #1
 800b2f6:	6002      	str	r2, [r0, #0]
 800b2f8:	2f02      	cmp	r7, #2
 800b2fa:	f104 0314 	add.w	r3, r4, #20
 800b2fe:	d13f      	bne.n	800b380 <__gethex+0x450>
 800b300:	f8d8 2000 	ldr.w	r2, [r8]
 800b304:	3a01      	subs	r2, #1
 800b306:	42b2      	cmp	r2, r6
 800b308:	d10a      	bne.n	800b320 <__gethex+0x3f0>
 800b30a:	1171      	asrs	r1, r6, #5
 800b30c:	2201      	movs	r2, #1
 800b30e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b312:	f006 061f 	and.w	r6, r6, #31
 800b316:	fa02 f606 	lsl.w	r6, r2, r6
 800b31a:	421e      	tst	r6, r3
 800b31c:	bf18      	it	ne
 800b31e:	4617      	movne	r7, r2
 800b320:	f047 0720 	orr.w	r7, r7, #32
 800b324:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b326:	601c      	str	r4, [r3, #0]
 800b328:	9b04      	ldr	r3, [sp, #16]
 800b32a:	601d      	str	r5, [r3, #0]
 800b32c:	e695      	b.n	800b05a <__gethex+0x12a>
 800b32e:	4299      	cmp	r1, r3
 800b330:	f843 cc04 	str.w	ip, [r3, #-4]
 800b334:	d8d8      	bhi.n	800b2e8 <__gethex+0x3b8>
 800b336:	68a3      	ldr	r3, [r4, #8]
 800b338:	459b      	cmp	fp, r3
 800b33a:	db19      	blt.n	800b370 <__gethex+0x440>
 800b33c:	6861      	ldr	r1, [r4, #4]
 800b33e:	ee18 0a10 	vmov	r0, s16
 800b342:	3101      	adds	r1, #1
 800b344:	f000 f982 	bl	800b64c <_Balloc>
 800b348:	4681      	mov	r9, r0
 800b34a:	b918      	cbnz	r0, 800b354 <__gethex+0x424>
 800b34c:	4b1a      	ldr	r3, [pc, #104]	; (800b3b8 <__gethex+0x488>)
 800b34e:	4602      	mov	r2, r0
 800b350:	2184      	movs	r1, #132	; 0x84
 800b352:	e6a8      	b.n	800b0a6 <__gethex+0x176>
 800b354:	6922      	ldr	r2, [r4, #16]
 800b356:	3202      	adds	r2, #2
 800b358:	f104 010c 	add.w	r1, r4, #12
 800b35c:	0092      	lsls	r2, r2, #2
 800b35e:	300c      	adds	r0, #12
 800b360:	f7fc feae 	bl	80080c0 <memcpy>
 800b364:	4621      	mov	r1, r4
 800b366:	ee18 0a10 	vmov	r0, s16
 800b36a:	f000 f9af 	bl	800b6cc <_Bfree>
 800b36e:	464c      	mov	r4, r9
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b378:	6122      	str	r2, [r4, #16]
 800b37a:	2201      	movs	r2, #1
 800b37c:	615a      	str	r2, [r3, #20]
 800b37e:	e7bb      	b.n	800b2f8 <__gethex+0x3c8>
 800b380:	6922      	ldr	r2, [r4, #16]
 800b382:	455a      	cmp	r2, fp
 800b384:	dd0b      	ble.n	800b39e <__gethex+0x46e>
 800b386:	2101      	movs	r1, #1
 800b388:	4620      	mov	r0, r4
 800b38a:	f7ff fd69 	bl	800ae60 <rshift>
 800b38e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b392:	3501      	adds	r5, #1
 800b394:	42ab      	cmp	r3, r5
 800b396:	f6ff aed0 	blt.w	800b13a <__gethex+0x20a>
 800b39a:	2701      	movs	r7, #1
 800b39c:	e7c0      	b.n	800b320 <__gethex+0x3f0>
 800b39e:	f016 061f 	ands.w	r6, r6, #31
 800b3a2:	d0fa      	beq.n	800b39a <__gethex+0x46a>
 800b3a4:	4453      	add	r3, sl
 800b3a6:	f1c6 0620 	rsb	r6, r6, #32
 800b3aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3ae:	f000 fa3f 	bl	800b830 <__hi0bits>
 800b3b2:	42b0      	cmp	r0, r6
 800b3b4:	dbe7      	blt.n	800b386 <__gethex+0x456>
 800b3b6:	e7f0      	b.n	800b39a <__gethex+0x46a>
 800b3b8:	0800e400 	.word	0x0800e400

0800b3bc <L_shift>:
 800b3bc:	f1c2 0208 	rsb	r2, r2, #8
 800b3c0:	0092      	lsls	r2, r2, #2
 800b3c2:	b570      	push	{r4, r5, r6, lr}
 800b3c4:	f1c2 0620 	rsb	r6, r2, #32
 800b3c8:	6843      	ldr	r3, [r0, #4]
 800b3ca:	6804      	ldr	r4, [r0, #0]
 800b3cc:	fa03 f506 	lsl.w	r5, r3, r6
 800b3d0:	432c      	orrs	r4, r5
 800b3d2:	40d3      	lsrs	r3, r2
 800b3d4:	6004      	str	r4, [r0, #0]
 800b3d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b3da:	4288      	cmp	r0, r1
 800b3dc:	d3f4      	bcc.n	800b3c8 <L_shift+0xc>
 800b3de:	bd70      	pop	{r4, r5, r6, pc}

0800b3e0 <__match>:
 800b3e0:	b530      	push	{r4, r5, lr}
 800b3e2:	6803      	ldr	r3, [r0, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ea:	b914      	cbnz	r4, 800b3f2 <__match+0x12>
 800b3ec:	6003      	str	r3, [r0, #0]
 800b3ee:	2001      	movs	r0, #1
 800b3f0:	bd30      	pop	{r4, r5, pc}
 800b3f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3fa:	2d19      	cmp	r5, #25
 800b3fc:	bf98      	it	ls
 800b3fe:	3220      	addls	r2, #32
 800b400:	42a2      	cmp	r2, r4
 800b402:	d0f0      	beq.n	800b3e6 <__match+0x6>
 800b404:	2000      	movs	r0, #0
 800b406:	e7f3      	b.n	800b3f0 <__match+0x10>

0800b408 <__hexnan>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	680b      	ldr	r3, [r1, #0]
 800b40e:	115e      	asrs	r6, r3, #5
 800b410:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b414:	f013 031f 	ands.w	r3, r3, #31
 800b418:	b087      	sub	sp, #28
 800b41a:	bf18      	it	ne
 800b41c:	3604      	addne	r6, #4
 800b41e:	2500      	movs	r5, #0
 800b420:	1f37      	subs	r7, r6, #4
 800b422:	4690      	mov	r8, r2
 800b424:	6802      	ldr	r2, [r0, #0]
 800b426:	9301      	str	r3, [sp, #4]
 800b428:	4682      	mov	sl, r0
 800b42a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b42e:	46b9      	mov	r9, r7
 800b430:	463c      	mov	r4, r7
 800b432:	9502      	str	r5, [sp, #8]
 800b434:	46ab      	mov	fp, r5
 800b436:	7851      	ldrb	r1, [r2, #1]
 800b438:	1c53      	adds	r3, r2, #1
 800b43a:	9303      	str	r3, [sp, #12]
 800b43c:	b341      	cbz	r1, 800b490 <__hexnan+0x88>
 800b43e:	4608      	mov	r0, r1
 800b440:	9205      	str	r2, [sp, #20]
 800b442:	9104      	str	r1, [sp, #16]
 800b444:	f7ff fd5e 	bl	800af04 <__hexdig_fun>
 800b448:	2800      	cmp	r0, #0
 800b44a:	d14f      	bne.n	800b4ec <__hexnan+0xe4>
 800b44c:	9904      	ldr	r1, [sp, #16]
 800b44e:	9a05      	ldr	r2, [sp, #20]
 800b450:	2920      	cmp	r1, #32
 800b452:	d818      	bhi.n	800b486 <__hexnan+0x7e>
 800b454:	9b02      	ldr	r3, [sp, #8]
 800b456:	459b      	cmp	fp, r3
 800b458:	dd13      	ble.n	800b482 <__hexnan+0x7a>
 800b45a:	454c      	cmp	r4, r9
 800b45c:	d206      	bcs.n	800b46c <__hexnan+0x64>
 800b45e:	2d07      	cmp	r5, #7
 800b460:	dc04      	bgt.n	800b46c <__hexnan+0x64>
 800b462:	462a      	mov	r2, r5
 800b464:	4649      	mov	r1, r9
 800b466:	4620      	mov	r0, r4
 800b468:	f7ff ffa8 	bl	800b3bc <L_shift>
 800b46c:	4544      	cmp	r4, r8
 800b46e:	d950      	bls.n	800b512 <__hexnan+0x10a>
 800b470:	2300      	movs	r3, #0
 800b472:	f1a4 0904 	sub.w	r9, r4, #4
 800b476:	f844 3c04 	str.w	r3, [r4, #-4]
 800b47a:	f8cd b008 	str.w	fp, [sp, #8]
 800b47e:	464c      	mov	r4, r9
 800b480:	461d      	mov	r5, r3
 800b482:	9a03      	ldr	r2, [sp, #12]
 800b484:	e7d7      	b.n	800b436 <__hexnan+0x2e>
 800b486:	2929      	cmp	r1, #41	; 0x29
 800b488:	d156      	bne.n	800b538 <__hexnan+0x130>
 800b48a:	3202      	adds	r2, #2
 800b48c:	f8ca 2000 	str.w	r2, [sl]
 800b490:	f1bb 0f00 	cmp.w	fp, #0
 800b494:	d050      	beq.n	800b538 <__hexnan+0x130>
 800b496:	454c      	cmp	r4, r9
 800b498:	d206      	bcs.n	800b4a8 <__hexnan+0xa0>
 800b49a:	2d07      	cmp	r5, #7
 800b49c:	dc04      	bgt.n	800b4a8 <__hexnan+0xa0>
 800b49e:	462a      	mov	r2, r5
 800b4a0:	4649      	mov	r1, r9
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff ff8a 	bl	800b3bc <L_shift>
 800b4a8:	4544      	cmp	r4, r8
 800b4aa:	d934      	bls.n	800b516 <__hexnan+0x10e>
 800b4ac:	f1a8 0204 	sub.w	r2, r8, #4
 800b4b0:	4623      	mov	r3, r4
 800b4b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b4b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b4ba:	429f      	cmp	r7, r3
 800b4bc:	d2f9      	bcs.n	800b4b2 <__hexnan+0xaa>
 800b4be:	1b3b      	subs	r3, r7, r4
 800b4c0:	f023 0303 	bic.w	r3, r3, #3
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	3401      	adds	r4, #1
 800b4c8:	3e03      	subs	r6, #3
 800b4ca:	42b4      	cmp	r4, r6
 800b4cc:	bf88      	it	hi
 800b4ce:	2304      	movhi	r3, #4
 800b4d0:	4443      	add	r3, r8
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f843 2b04 	str.w	r2, [r3], #4
 800b4d8:	429f      	cmp	r7, r3
 800b4da:	d2fb      	bcs.n	800b4d4 <__hexnan+0xcc>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	b91b      	cbnz	r3, 800b4e8 <__hexnan+0xe0>
 800b4e0:	4547      	cmp	r7, r8
 800b4e2:	d127      	bne.n	800b534 <__hexnan+0x12c>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	2005      	movs	r0, #5
 800b4ea:	e026      	b.n	800b53a <__hexnan+0x132>
 800b4ec:	3501      	adds	r5, #1
 800b4ee:	2d08      	cmp	r5, #8
 800b4f0:	f10b 0b01 	add.w	fp, fp, #1
 800b4f4:	dd06      	ble.n	800b504 <__hexnan+0xfc>
 800b4f6:	4544      	cmp	r4, r8
 800b4f8:	d9c3      	bls.n	800b482 <__hexnan+0x7a>
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800b500:	2501      	movs	r5, #1
 800b502:	3c04      	subs	r4, #4
 800b504:	6822      	ldr	r2, [r4, #0]
 800b506:	f000 000f 	and.w	r0, r0, #15
 800b50a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b50e:	6022      	str	r2, [r4, #0]
 800b510:	e7b7      	b.n	800b482 <__hexnan+0x7a>
 800b512:	2508      	movs	r5, #8
 800b514:	e7b5      	b.n	800b482 <__hexnan+0x7a>
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0df      	beq.n	800b4dc <__hexnan+0xd4>
 800b51c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b520:	f1c3 0320 	rsb	r3, r3, #32
 800b524:	fa22 f303 	lsr.w	r3, r2, r3
 800b528:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b52c:	401a      	ands	r2, r3
 800b52e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b532:	e7d3      	b.n	800b4dc <__hexnan+0xd4>
 800b534:	3f04      	subs	r7, #4
 800b536:	e7d1      	b.n	800b4dc <__hexnan+0xd4>
 800b538:	2004      	movs	r0, #4
 800b53a:	b007      	add	sp, #28
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b540 <_localeconv_r>:
 800b540:	4800      	ldr	r0, [pc, #0]	; (800b544 <_localeconv_r+0x4>)
 800b542:	4770      	bx	lr
 800b544:	20000170 	.word	0x20000170

0800b548 <__retarget_lock_init_recursive>:
 800b548:	4770      	bx	lr

0800b54a <__retarget_lock_acquire_recursive>:
 800b54a:	4770      	bx	lr

0800b54c <__retarget_lock_release_recursive>:
 800b54c:	4770      	bx	lr

0800b54e <__swhatbuf_r>:
 800b54e:	b570      	push	{r4, r5, r6, lr}
 800b550:	460e      	mov	r6, r1
 800b552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b556:	2900      	cmp	r1, #0
 800b558:	b096      	sub	sp, #88	; 0x58
 800b55a:	4614      	mov	r4, r2
 800b55c:	461d      	mov	r5, r3
 800b55e:	da08      	bge.n	800b572 <__swhatbuf_r+0x24>
 800b560:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	602a      	str	r2, [r5, #0]
 800b568:	061a      	lsls	r2, r3, #24
 800b56a:	d410      	bmi.n	800b58e <__swhatbuf_r+0x40>
 800b56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b570:	e00e      	b.n	800b590 <__swhatbuf_r+0x42>
 800b572:	466a      	mov	r2, sp
 800b574:	f001 ffe2 	bl	800d53c <_fstat_r>
 800b578:	2800      	cmp	r0, #0
 800b57a:	dbf1      	blt.n	800b560 <__swhatbuf_r+0x12>
 800b57c:	9a01      	ldr	r2, [sp, #4]
 800b57e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b582:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b586:	425a      	negs	r2, r3
 800b588:	415a      	adcs	r2, r3
 800b58a:	602a      	str	r2, [r5, #0]
 800b58c:	e7ee      	b.n	800b56c <__swhatbuf_r+0x1e>
 800b58e:	2340      	movs	r3, #64	; 0x40
 800b590:	2000      	movs	r0, #0
 800b592:	6023      	str	r3, [r4, #0]
 800b594:	b016      	add	sp, #88	; 0x58
 800b596:	bd70      	pop	{r4, r5, r6, pc}

0800b598 <__smakebuf_r>:
 800b598:	898b      	ldrh	r3, [r1, #12]
 800b59a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b59c:	079d      	lsls	r5, r3, #30
 800b59e:	4606      	mov	r6, r0
 800b5a0:	460c      	mov	r4, r1
 800b5a2:	d507      	bpl.n	800b5b4 <__smakebuf_r+0x1c>
 800b5a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	6123      	str	r3, [r4, #16]
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	6163      	str	r3, [r4, #20]
 800b5b0:	b002      	add	sp, #8
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	ab01      	add	r3, sp, #4
 800b5b6:	466a      	mov	r2, sp
 800b5b8:	f7ff ffc9 	bl	800b54e <__swhatbuf_r>
 800b5bc:	9900      	ldr	r1, [sp, #0]
 800b5be:	4605      	mov	r5, r0
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f000 fd87 	bl	800c0d4 <_malloc_r>
 800b5c6:	b948      	cbnz	r0, 800b5dc <__smakebuf_r+0x44>
 800b5c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5cc:	059a      	lsls	r2, r3, #22
 800b5ce:	d4ef      	bmi.n	800b5b0 <__smakebuf_r+0x18>
 800b5d0:	f023 0303 	bic.w	r3, r3, #3
 800b5d4:	f043 0302 	orr.w	r3, r3, #2
 800b5d8:	81a3      	strh	r3, [r4, #12]
 800b5da:	e7e3      	b.n	800b5a4 <__smakebuf_r+0xc>
 800b5dc:	4b0d      	ldr	r3, [pc, #52]	; (800b614 <__smakebuf_r+0x7c>)
 800b5de:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	6020      	str	r0, [r4, #0]
 800b5e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	9b00      	ldr	r3, [sp, #0]
 800b5ec:	6163      	str	r3, [r4, #20]
 800b5ee:	9b01      	ldr	r3, [sp, #4]
 800b5f0:	6120      	str	r0, [r4, #16]
 800b5f2:	b15b      	cbz	r3, 800b60c <__smakebuf_r+0x74>
 800b5f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	f001 ffb1 	bl	800d560 <_isatty_r>
 800b5fe:	b128      	cbz	r0, 800b60c <__smakebuf_r+0x74>
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	f023 0303 	bic.w	r3, r3, #3
 800b606:	f043 0301 	orr.w	r3, r3, #1
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	89a0      	ldrh	r0, [r4, #12]
 800b60e:	4305      	orrs	r5, r0
 800b610:	81a5      	strh	r5, [r4, #12]
 800b612:	e7cd      	b.n	800b5b0 <__smakebuf_r+0x18>
 800b614:	0800ac85 	.word	0x0800ac85

0800b618 <malloc>:
 800b618:	4b02      	ldr	r3, [pc, #8]	; (800b624 <malloc+0xc>)
 800b61a:	4601      	mov	r1, r0
 800b61c:	6818      	ldr	r0, [r3, #0]
 800b61e:	f000 bd59 	b.w	800c0d4 <_malloc_r>
 800b622:	bf00      	nop
 800b624:	20000018 	.word	0x20000018

0800b628 <__ascii_mbtowc>:
 800b628:	b082      	sub	sp, #8
 800b62a:	b901      	cbnz	r1, 800b62e <__ascii_mbtowc+0x6>
 800b62c:	a901      	add	r1, sp, #4
 800b62e:	b142      	cbz	r2, 800b642 <__ascii_mbtowc+0x1a>
 800b630:	b14b      	cbz	r3, 800b646 <__ascii_mbtowc+0x1e>
 800b632:	7813      	ldrb	r3, [r2, #0]
 800b634:	600b      	str	r3, [r1, #0]
 800b636:	7812      	ldrb	r2, [r2, #0]
 800b638:	1e10      	subs	r0, r2, #0
 800b63a:	bf18      	it	ne
 800b63c:	2001      	movne	r0, #1
 800b63e:	b002      	add	sp, #8
 800b640:	4770      	bx	lr
 800b642:	4610      	mov	r0, r2
 800b644:	e7fb      	b.n	800b63e <__ascii_mbtowc+0x16>
 800b646:	f06f 0001 	mvn.w	r0, #1
 800b64a:	e7f8      	b.n	800b63e <__ascii_mbtowc+0x16>

0800b64c <_Balloc>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	b976      	cbnz	r6, 800b674 <_Balloc+0x28>
 800b656:	2010      	movs	r0, #16
 800b658:	f7ff ffde 	bl	800b618 <malloc>
 800b65c:	4602      	mov	r2, r0
 800b65e:	6260      	str	r0, [r4, #36]	; 0x24
 800b660:	b920      	cbnz	r0, 800b66c <_Balloc+0x20>
 800b662:	4b18      	ldr	r3, [pc, #96]	; (800b6c4 <_Balloc+0x78>)
 800b664:	4818      	ldr	r0, [pc, #96]	; (800b6c8 <_Balloc+0x7c>)
 800b666:	2166      	movs	r1, #102	; 0x66
 800b668:	f001 ff28 	bl	800d4bc <__assert_func>
 800b66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b670:	6006      	str	r6, [r0, #0]
 800b672:	60c6      	str	r6, [r0, #12]
 800b674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b676:	68f3      	ldr	r3, [r6, #12]
 800b678:	b183      	cbz	r3, 800b69c <_Balloc+0x50>
 800b67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b682:	b9b8      	cbnz	r0, 800b6b4 <_Balloc+0x68>
 800b684:	2101      	movs	r1, #1
 800b686:	fa01 f605 	lsl.w	r6, r1, r5
 800b68a:	1d72      	adds	r2, r6, #5
 800b68c:	0092      	lsls	r2, r2, #2
 800b68e:	4620      	mov	r0, r4
 800b690:	f000 fc9d 	bl	800bfce <_calloc_r>
 800b694:	b160      	cbz	r0, 800b6b0 <_Balloc+0x64>
 800b696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b69a:	e00e      	b.n	800b6ba <_Balloc+0x6e>
 800b69c:	2221      	movs	r2, #33	; 0x21
 800b69e:	2104      	movs	r1, #4
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fc94 	bl	800bfce <_calloc_r>
 800b6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a8:	60f0      	str	r0, [r6, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e4      	bne.n	800b67a <_Balloc+0x2e>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	6802      	ldr	r2, [r0, #0]
 800b6b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6c0:	e7f7      	b.n	800b6b2 <_Balloc+0x66>
 800b6c2:	bf00      	nop
 800b6c4:	0800e38e 	.word	0x0800e38e
 800b6c8:	0800e4f0 	.word	0x0800e4f0

0800b6cc <_Bfree>:
 800b6cc:	b570      	push	{r4, r5, r6, lr}
 800b6ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	b976      	cbnz	r6, 800b6f4 <_Bfree+0x28>
 800b6d6:	2010      	movs	r0, #16
 800b6d8:	f7ff ff9e 	bl	800b618 <malloc>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	6268      	str	r0, [r5, #36]	; 0x24
 800b6e0:	b920      	cbnz	r0, 800b6ec <_Bfree+0x20>
 800b6e2:	4b09      	ldr	r3, [pc, #36]	; (800b708 <_Bfree+0x3c>)
 800b6e4:	4809      	ldr	r0, [pc, #36]	; (800b70c <_Bfree+0x40>)
 800b6e6:	218a      	movs	r1, #138	; 0x8a
 800b6e8:	f001 fee8 	bl	800d4bc <__assert_func>
 800b6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6f0:	6006      	str	r6, [r0, #0]
 800b6f2:	60c6      	str	r6, [r0, #12]
 800b6f4:	b13c      	cbz	r4, 800b706 <_Bfree+0x3a>
 800b6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6f8:	6862      	ldr	r2, [r4, #4]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b700:	6021      	str	r1, [r4, #0]
 800b702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	0800e38e 	.word	0x0800e38e
 800b70c:	0800e4f0 	.word	0x0800e4f0

0800b710 <__multadd>:
 800b710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b714:	690d      	ldr	r5, [r1, #16]
 800b716:	4607      	mov	r7, r0
 800b718:	460c      	mov	r4, r1
 800b71a:	461e      	mov	r6, r3
 800b71c:	f101 0c14 	add.w	ip, r1, #20
 800b720:	2000      	movs	r0, #0
 800b722:	f8dc 3000 	ldr.w	r3, [ip]
 800b726:	b299      	uxth	r1, r3
 800b728:	fb02 6101 	mla	r1, r2, r1, r6
 800b72c:	0c1e      	lsrs	r6, r3, #16
 800b72e:	0c0b      	lsrs	r3, r1, #16
 800b730:	fb02 3306 	mla	r3, r2, r6, r3
 800b734:	b289      	uxth	r1, r1
 800b736:	3001      	adds	r0, #1
 800b738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b73c:	4285      	cmp	r5, r0
 800b73e:	f84c 1b04 	str.w	r1, [ip], #4
 800b742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b746:	dcec      	bgt.n	800b722 <__multadd+0x12>
 800b748:	b30e      	cbz	r6, 800b78e <__multadd+0x7e>
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	42ab      	cmp	r3, r5
 800b74e:	dc19      	bgt.n	800b784 <__multadd+0x74>
 800b750:	6861      	ldr	r1, [r4, #4]
 800b752:	4638      	mov	r0, r7
 800b754:	3101      	adds	r1, #1
 800b756:	f7ff ff79 	bl	800b64c <_Balloc>
 800b75a:	4680      	mov	r8, r0
 800b75c:	b928      	cbnz	r0, 800b76a <__multadd+0x5a>
 800b75e:	4602      	mov	r2, r0
 800b760:	4b0c      	ldr	r3, [pc, #48]	; (800b794 <__multadd+0x84>)
 800b762:	480d      	ldr	r0, [pc, #52]	; (800b798 <__multadd+0x88>)
 800b764:	21b5      	movs	r1, #181	; 0xb5
 800b766:	f001 fea9 	bl	800d4bc <__assert_func>
 800b76a:	6922      	ldr	r2, [r4, #16]
 800b76c:	3202      	adds	r2, #2
 800b76e:	f104 010c 	add.w	r1, r4, #12
 800b772:	0092      	lsls	r2, r2, #2
 800b774:	300c      	adds	r0, #12
 800b776:	f7fc fca3 	bl	80080c0 <memcpy>
 800b77a:	4621      	mov	r1, r4
 800b77c:	4638      	mov	r0, r7
 800b77e:	f7ff ffa5 	bl	800b6cc <_Bfree>
 800b782:	4644      	mov	r4, r8
 800b784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b788:	3501      	adds	r5, #1
 800b78a:	615e      	str	r6, [r3, #20]
 800b78c:	6125      	str	r5, [r4, #16]
 800b78e:	4620      	mov	r0, r4
 800b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b794:	0800e400 	.word	0x0800e400
 800b798:	0800e4f0 	.word	0x0800e4f0

0800b79c <__s2b>:
 800b79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	4615      	mov	r5, r2
 800b7a4:	461f      	mov	r7, r3
 800b7a6:	2209      	movs	r2, #9
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	db09      	blt.n	800b7cc <__s2b+0x30>
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff ff47 	bl	800b64c <_Balloc>
 800b7be:	b940      	cbnz	r0, 800b7d2 <__s2b+0x36>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	4b19      	ldr	r3, [pc, #100]	; (800b828 <__s2b+0x8c>)
 800b7c4:	4819      	ldr	r0, [pc, #100]	; (800b82c <__s2b+0x90>)
 800b7c6:	21ce      	movs	r1, #206	; 0xce
 800b7c8:	f001 fe78 	bl	800d4bc <__assert_func>
 800b7cc:	0052      	lsls	r2, r2, #1
 800b7ce:	3101      	adds	r1, #1
 800b7d0:	e7f0      	b.n	800b7b4 <__s2b+0x18>
 800b7d2:	9b08      	ldr	r3, [sp, #32]
 800b7d4:	6143      	str	r3, [r0, #20]
 800b7d6:	2d09      	cmp	r5, #9
 800b7d8:	f04f 0301 	mov.w	r3, #1
 800b7dc:	6103      	str	r3, [r0, #16]
 800b7de:	dd16      	ble.n	800b80e <__s2b+0x72>
 800b7e0:	f104 0909 	add.w	r9, r4, #9
 800b7e4:	46c8      	mov	r8, r9
 800b7e6:	442c      	add	r4, r5
 800b7e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7ec:	4601      	mov	r1, r0
 800b7ee:	3b30      	subs	r3, #48	; 0x30
 800b7f0:	220a      	movs	r2, #10
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7ff ff8c 	bl	800b710 <__multadd>
 800b7f8:	45a0      	cmp	r8, r4
 800b7fa:	d1f5      	bne.n	800b7e8 <__s2b+0x4c>
 800b7fc:	f1a5 0408 	sub.w	r4, r5, #8
 800b800:	444c      	add	r4, r9
 800b802:	1b2d      	subs	r5, r5, r4
 800b804:	1963      	adds	r3, r4, r5
 800b806:	42bb      	cmp	r3, r7
 800b808:	db04      	blt.n	800b814 <__s2b+0x78>
 800b80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b80e:	340a      	adds	r4, #10
 800b810:	2509      	movs	r5, #9
 800b812:	e7f6      	b.n	800b802 <__s2b+0x66>
 800b814:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b818:	4601      	mov	r1, r0
 800b81a:	3b30      	subs	r3, #48	; 0x30
 800b81c:	220a      	movs	r2, #10
 800b81e:	4630      	mov	r0, r6
 800b820:	f7ff ff76 	bl	800b710 <__multadd>
 800b824:	e7ee      	b.n	800b804 <__s2b+0x68>
 800b826:	bf00      	nop
 800b828:	0800e400 	.word	0x0800e400
 800b82c:	0800e4f0 	.word	0x0800e4f0

0800b830 <__hi0bits>:
 800b830:	0c03      	lsrs	r3, r0, #16
 800b832:	041b      	lsls	r3, r3, #16
 800b834:	b9d3      	cbnz	r3, 800b86c <__hi0bits+0x3c>
 800b836:	0400      	lsls	r0, r0, #16
 800b838:	2310      	movs	r3, #16
 800b83a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b83e:	bf04      	itt	eq
 800b840:	0200      	lsleq	r0, r0, #8
 800b842:	3308      	addeq	r3, #8
 800b844:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b848:	bf04      	itt	eq
 800b84a:	0100      	lsleq	r0, r0, #4
 800b84c:	3304      	addeq	r3, #4
 800b84e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b852:	bf04      	itt	eq
 800b854:	0080      	lsleq	r0, r0, #2
 800b856:	3302      	addeq	r3, #2
 800b858:	2800      	cmp	r0, #0
 800b85a:	db05      	blt.n	800b868 <__hi0bits+0x38>
 800b85c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b860:	f103 0301 	add.w	r3, r3, #1
 800b864:	bf08      	it	eq
 800b866:	2320      	moveq	r3, #32
 800b868:	4618      	mov	r0, r3
 800b86a:	4770      	bx	lr
 800b86c:	2300      	movs	r3, #0
 800b86e:	e7e4      	b.n	800b83a <__hi0bits+0xa>

0800b870 <__lo0bits>:
 800b870:	6803      	ldr	r3, [r0, #0]
 800b872:	f013 0207 	ands.w	r2, r3, #7
 800b876:	4601      	mov	r1, r0
 800b878:	d00b      	beq.n	800b892 <__lo0bits+0x22>
 800b87a:	07da      	lsls	r2, r3, #31
 800b87c:	d423      	bmi.n	800b8c6 <__lo0bits+0x56>
 800b87e:	0798      	lsls	r0, r3, #30
 800b880:	bf49      	itett	mi
 800b882:	085b      	lsrmi	r3, r3, #1
 800b884:	089b      	lsrpl	r3, r3, #2
 800b886:	2001      	movmi	r0, #1
 800b888:	600b      	strmi	r3, [r1, #0]
 800b88a:	bf5c      	itt	pl
 800b88c:	600b      	strpl	r3, [r1, #0]
 800b88e:	2002      	movpl	r0, #2
 800b890:	4770      	bx	lr
 800b892:	b298      	uxth	r0, r3
 800b894:	b9a8      	cbnz	r0, 800b8c2 <__lo0bits+0x52>
 800b896:	0c1b      	lsrs	r3, r3, #16
 800b898:	2010      	movs	r0, #16
 800b89a:	b2da      	uxtb	r2, r3
 800b89c:	b90a      	cbnz	r2, 800b8a2 <__lo0bits+0x32>
 800b89e:	3008      	adds	r0, #8
 800b8a0:	0a1b      	lsrs	r3, r3, #8
 800b8a2:	071a      	lsls	r2, r3, #28
 800b8a4:	bf04      	itt	eq
 800b8a6:	091b      	lsreq	r3, r3, #4
 800b8a8:	3004      	addeq	r0, #4
 800b8aa:	079a      	lsls	r2, r3, #30
 800b8ac:	bf04      	itt	eq
 800b8ae:	089b      	lsreq	r3, r3, #2
 800b8b0:	3002      	addeq	r0, #2
 800b8b2:	07da      	lsls	r2, r3, #31
 800b8b4:	d403      	bmi.n	800b8be <__lo0bits+0x4e>
 800b8b6:	085b      	lsrs	r3, r3, #1
 800b8b8:	f100 0001 	add.w	r0, r0, #1
 800b8bc:	d005      	beq.n	800b8ca <__lo0bits+0x5a>
 800b8be:	600b      	str	r3, [r1, #0]
 800b8c0:	4770      	bx	lr
 800b8c2:	4610      	mov	r0, r2
 800b8c4:	e7e9      	b.n	800b89a <__lo0bits+0x2a>
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	4770      	bx	lr
 800b8ca:	2020      	movs	r0, #32
 800b8cc:	4770      	bx	lr
	...

0800b8d0 <__i2b>:
 800b8d0:	b510      	push	{r4, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	f7ff feb9 	bl	800b64c <_Balloc>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	b928      	cbnz	r0, 800b8ea <__i2b+0x1a>
 800b8de:	4b05      	ldr	r3, [pc, #20]	; (800b8f4 <__i2b+0x24>)
 800b8e0:	4805      	ldr	r0, [pc, #20]	; (800b8f8 <__i2b+0x28>)
 800b8e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8e6:	f001 fde9 	bl	800d4bc <__assert_func>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	6144      	str	r4, [r0, #20]
 800b8ee:	6103      	str	r3, [r0, #16]
 800b8f0:	bd10      	pop	{r4, pc}
 800b8f2:	bf00      	nop
 800b8f4:	0800e400 	.word	0x0800e400
 800b8f8:	0800e4f0 	.word	0x0800e4f0

0800b8fc <__multiply>:
 800b8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b900:	4691      	mov	r9, r2
 800b902:	690a      	ldr	r2, [r1, #16]
 800b904:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b908:	429a      	cmp	r2, r3
 800b90a:	bfb8      	it	lt
 800b90c:	460b      	movlt	r3, r1
 800b90e:	460c      	mov	r4, r1
 800b910:	bfbc      	itt	lt
 800b912:	464c      	movlt	r4, r9
 800b914:	4699      	movlt	r9, r3
 800b916:	6927      	ldr	r7, [r4, #16]
 800b918:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b91c:	68a3      	ldr	r3, [r4, #8]
 800b91e:	6861      	ldr	r1, [r4, #4]
 800b920:	eb07 060a 	add.w	r6, r7, sl
 800b924:	42b3      	cmp	r3, r6
 800b926:	b085      	sub	sp, #20
 800b928:	bfb8      	it	lt
 800b92a:	3101      	addlt	r1, #1
 800b92c:	f7ff fe8e 	bl	800b64c <_Balloc>
 800b930:	b930      	cbnz	r0, 800b940 <__multiply+0x44>
 800b932:	4602      	mov	r2, r0
 800b934:	4b44      	ldr	r3, [pc, #272]	; (800ba48 <__multiply+0x14c>)
 800b936:	4845      	ldr	r0, [pc, #276]	; (800ba4c <__multiply+0x150>)
 800b938:	f240 115d 	movw	r1, #349	; 0x15d
 800b93c:	f001 fdbe 	bl	800d4bc <__assert_func>
 800b940:	f100 0514 	add.w	r5, r0, #20
 800b944:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b948:	462b      	mov	r3, r5
 800b94a:	2200      	movs	r2, #0
 800b94c:	4543      	cmp	r3, r8
 800b94e:	d321      	bcc.n	800b994 <__multiply+0x98>
 800b950:	f104 0314 	add.w	r3, r4, #20
 800b954:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b958:	f109 0314 	add.w	r3, r9, #20
 800b95c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b960:	9202      	str	r2, [sp, #8]
 800b962:	1b3a      	subs	r2, r7, r4
 800b964:	3a15      	subs	r2, #21
 800b966:	f022 0203 	bic.w	r2, r2, #3
 800b96a:	3204      	adds	r2, #4
 800b96c:	f104 0115 	add.w	r1, r4, #21
 800b970:	428f      	cmp	r7, r1
 800b972:	bf38      	it	cc
 800b974:	2204      	movcc	r2, #4
 800b976:	9201      	str	r2, [sp, #4]
 800b978:	9a02      	ldr	r2, [sp, #8]
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d80c      	bhi.n	800b99a <__multiply+0x9e>
 800b980:	2e00      	cmp	r6, #0
 800b982:	dd03      	ble.n	800b98c <__multiply+0x90>
 800b984:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d05a      	beq.n	800ba42 <__multiply+0x146>
 800b98c:	6106      	str	r6, [r0, #16]
 800b98e:	b005      	add	sp, #20
 800b990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b994:	f843 2b04 	str.w	r2, [r3], #4
 800b998:	e7d8      	b.n	800b94c <__multiply+0x50>
 800b99a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b99e:	f1ba 0f00 	cmp.w	sl, #0
 800b9a2:	d024      	beq.n	800b9ee <__multiply+0xf2>
 800b9a4:	f104 0e14 	add.w	lr, r4, #20
 800b9a8:	46a9      	mov	r9, r5
 800b9aa:	f04f 0c00 	mov.w	ip, #0
 800b9ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b9b2:	f8d9 1000 	ldr.w	r1, [r9]
 800b9b6:	fa1f fb82 	uxth.w	fp, r2
 800b9ba:	b289      	uxth	r1, r1
 800b9bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b9c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b9c4:	f8d9 2000 	ldr.w	r2, [r9]
 800b9c8:	4461      	add	r1, ip
 800b9ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800b9d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b9d6:	b289      	uxth	r1, r1
 800b9d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b9dc:	4577      	cmp	r7, lr
 800b9de:	f849 1b04 	str.w	r1, [r9], #4
 800b9e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b9e6:	d8e2      	bhi.n	800b9ae <__multiply+0xb2>
 800b9e8:	9a01      	ldr	r2, [sp, #4]
 800b9ea:	f845 c002 	str.w	ip, [r5, r2]
 800b9ee:	9a03      	ldr	r2, [sp, #12]
 800b9f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	f1b9 0f00 	cmp.w	r9, #0
 800b9fa:	d020      	beq.n	800ba3e <__multiply+0x142>
 800b9fc:	6829      	ldr	r1, [r5, #0]
 800b9fe:	f104 0c14 	add.w	ip, r4, #20
 800ba02:	46ae      	mov	lr, r5
 800ba04:	f04f 0a00 	mov.w	sl, #0
 800ba08:	f8bc b000 	ldrh.w	fp, [ip]
 800ba0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba10:	fb09 220b 	mla	r2, r9, fp, r2
 800ba14:	4492      	add	sl, r2
 800ba16:	b289      	uxth	r1, r1
 800ba18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ba1c:	f84e 1b04 	str.w	r1, [lr], #4
 800ba20:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba24:	f8be 1000 	ldrh.w	r1, [lr]
 800ba28:	0c12      	lsrs	r2, r2, #16
 800ba2a:	fb09 1102 	mla	r1, r9, r2, r1
 800ba2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ba32:	4567      	cmp	r7, ip
 800ba34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba38:	d8e6      	bhi.n	800ba08 <__multiply+0x10c>
 800ba3a:	9a01      	ldr	r2, [sp, #4]
 800ba3c:	50a9      	str	r1, [r5, r2]
 800ba3e:	3504      	adds	r5, #4
 800ba40:	e79a      	b.n	800b978 <__multiply+0x7c>
 800ba42:	3e01      	subs	r6, #1
 800ba44:	e79c      	b.n	800b980 <__multiply+0x84>
 800ba46:	bf00      	nop
 800ba48:	0800e400 	.word	0x0800e400
 800ba4c:	0800e4f0 	.word	0x0800e4f0

0800ba50 <__pow5mult>:
 800ba50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba54:	4615      	mov	r5, r2
 800ba56:	f012 0203 	ands.w	r2, r2, #3
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	460f      	mov	r7, r1
 800ba5e:	d007      	beq.n	800ba70 <__pow5mult+0x20>
 800ba60:	4c25      	ldr	r4, [pc, #148]	; (800baf8 <__pow5mult+0xa8>)
 800ba62:	3a01      	subs	r2, #1
 800ba64:	2300      	movs	r3, #0
 800ba66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba6a:	f7ff fe51 	bl	800b710 <__multadd>
 800ba6e:	4607      	mov	r7, r0
 800ba70:	10ad      	asrs	r5, r5, #2
 800ba72:	d03d      	beq.n	800baf0 <__pow5mult+0xa0>
 800ba74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba76:	b97c      	cbnz	r4, 800ba98 <__pow5mult+0x48>
 800ba78:	2010      	movs	r0, #16
 800ba7a:	f7ff fdcd 	bl	800b618 <malloc>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	6270      	str	r0, [r6, #36]	; 0x24
 800ba82:	b928      	cbnz	r0, 800ba90 <__pow5mult+0x40>
 800ba84:	4b1d      	ldr	r3, [pc, #116]	; (800bafc <__pow5mult+0xac>)
 800ba86:	481e      	ldr	r0, [pc, #120]	; (800bb00 <__pow5mult+0xb0>)
 800ba88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba8c:	f001 fd16 	bl	800d4bc <__assert_func>
 800ba90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba94:	6004      	str	r4, [r0, #0]
 800ba96:	60c4      	str	r4, [r0, #12]
 800ba98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800baa0:	b94c      	cbnz	r4, 800bab6 <__pow5mult+0x66>
 800baa2:	f240 2171 	movw	r1, #625	; 0x271
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7ff ff12 	bl	800b8d0 <__i2b>
 800baac:	2300      	movs	r3, #0
 800baae:	f8c8 0008 	str.w	r0, [r8, #8]
 800bab2:	4604      	mov	r4, r0
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	f04f 0900 	mov.w	r9, #0
 800baba:	07eb      	lsls	r3, r5, #31
 800babc:	d50a      	bpl.n	800bad4 <__pow5mult+0x84>
 800babe:	4639      	mov	r1, r7
 800bac0:	4622      	mov	r2, r4
 800bac2:	4630      	mov	r0, r6
 800bac4:	f7ff ff1a 	bl	800b8fc <__multiply>
 800bac8:	4639      	mov	r1, r7
 800baca:	4680      	mov	r8, r0
 800bacc:	4630      	mov	r0, r6
 800bace:	f7ff fdfd 	bl	800b6cc <_Bfree>
 800bad2:	4647      	mov	r7, r8
 800bad4:	106d      	asrs	r5, r5, #1
 800bad6:	d00b      	beq.n	800baf0 <__pow5mult+0xa0>
 800bad8:	6820      	ldr	r0, [r4, #0]
 800bada:	b938      	cbnz	r0, 800baec <__pow5mult+0x9c>
 800badc:	4622      	mov	r2, r4
 800bade:	4621      	mov	r1, r4
 800bae0:	4630      	mov	r0, r6
 800bae2:	f7ff ff0b 	bl	800b8fc <__multiply>
 800bae6:	6020      	str	r0, [r4, #0]
 800bae8:	f8c0 9000 	str.w	r9, [r0]
 800baec:	4604      	mov	r4, r0
 800baee:	e7e4      	b.n	800baba <__pow5mult+0x6a>
 800baf0:	4638      	mov	r0, r7
 800baf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf6:	bf00      	nop
 800baf8:	0800e640 	.word	0x0800e640
 800bafc:	0800e38e 	.word	0x0800e38e
 800bb00:	0800e4f0 	.word	0x0800e4f0

0800bb04 <__lshift>:
 800bb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb08:	460c      	mov	r4, r1
 800bb0a:	6849      	ldr	r1, [r1, #4]
 800bb0c:	6923      	ldr	r3, [r4, #16]
 800bb0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	4607      	mov	r7, r0
 800bb16:	4691      	mov	r9, r2
 800bb18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb1c:	f108 0601 	add.w	r6, r8, #1
 800bb20:	42b3      	cmp	r3, r6
 800bb22:	db0b      	blt.n	800bb3c <__lshift+0x38>
 800bb24:	4638      	mov	r0, r7
 800bb26:	f7ff fd91 	bl	800b64c <_Balloc>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	b948      	cbnz	r0, 800bb42 <__lshift+0x3e>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	4b2a      	ldr	r3, [pc, #168]	; (800bbdc <__lshift+0xd8>)
 800bb32:	482b      	ldr	r0, [pc, #172]	; (800bbe0 <__lshift+0xdc>)
 800bb34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb38:	f001 fcc0 	bl	800d4bc <__assert_func>
 800bb3c:	3101      	adds	r1, #1
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	e7ee      	b.n	800bb20 <__lshift+0x1c>
 800bb42:	2300      	movs	r3, #0
 800bb44:	f100 0114 	add.w	r1, r0, #20
 800bb48:	f100 0210 	add.w	r2, r0, #16
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	4553      	cmp	r3, sl
 800bb50:	db37      	blt.n	800bbc2 <__lshift+0xbe>
 800bb52:	6920      	ldr	r0, [r4, #16]
 800bb54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb58:	f104 0314 	add.w	r3, r4, #20
 800bb5c:	f019 091f 	ands.w	r9, r9, #31
 800bb60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb68:	d02f      	beq.n	800bbca <__lshift+0xc6>
 800bb6a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb6e:	468a      	mov	sl, r1
 800bb70:	f04f 0c00 	mov.w	ip, #0
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	fa02 f209 	lsl.w	r2, r2, r9
 800bb7a:	ea42 020c 	orr.w	r2, r2, ip
 800bb7e:	f84a 2b04 	str.w	r2, [sl], #4
 800bb82:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb86:	4298      	cmp	r0, r3
 800bb88:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb8c:	d8f2      	bhi.n	800bb74 <__lshift+0x70>
 800bb8e:	1b03      	subs	r3, r0, r4
 800bb90:	3b15      	subs	r3, #21
 800bb92:	f023 0303 	bic.w	r3, r3, #3
 800bb96:	3304      	adds	r3, #4
 800bb98:	f104 0215 	add.w	r2, r4, #21
 800bb9c:	4290      	cmp	r0, r2
 800bb9e:	bf38      	it	cc
 800bba0:	2304      	movcc	r3, #4
 800bba2:	f841 c003 	str.w	ip, [r1, r3]
 800bba6:	f1bc 0f00 	cmp.w	ip, #0
 800bbaa:	d001      	beq.n	800bbb0 <__lshift+0xac>
 800bbac:	f108 0602 	add.w	r6, r8, #2
 800bbb0:	3e01      	subs	r6, #1
 800bbb2:	4638      	mov	r0, r7
 800bbb4:	612e      	str	r6, [r5, #16]
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	f7ff fd88 	bl	800b6cc <_Bfree>
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	e7c1      	b.n	800bb4e <__lshift+0x4a>
 800bbca:	3904      	subs	r1, #4
 800bbcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbd4:	4298      	cmp	r0, r3
 800bbd6:	d8f9      	bhi.n	800bbcc <__lshift+0xc8>
 800bbd8:	e7ea      	b.n	800bbb0 <__lshift+0xac>
 800bbda:	bf00      	nop
 800bbdc:	0800e400 	.word	0x0800e400
 800bbe0:	0800e4f0 	.word	0x0800e4f0

0800bbe4 <__mcmp>:
 800bbe4:	b530      	push	{r4, r5, lr}
 800bbe6:	6902      	ldr	r2, [r0, #16]
 800bbe8:	690c      	ldr	r4, [r1, #16]
 800bbea:	1b12      	subs	r2, r2, r4
 800bbec:	d10e      	bne.n	800bc0c <__mcmp+0x28>
 800bbee:	f100 0314 	add.w	r3, r0, #20
 800bbf2:	3114      	adds	r1, #20
 800bbf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bbf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bbfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc04:	42a5      	cmp	r5, r4
 800bc06:	d003      	beq.n	800bc10 <__mcmp+0x2c>
 800bc08:	d305      	bcc.n	800bc16 <__mcmp+0x32>
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	4610      	mov	r0, r2
 800bc0e:	bd30      	pop	{r4, r5, pc}
 800bc10:	4283      	cmp	r3, r0
 800bc12:	d3f3      	bcc.n	800bbfc <__mcmp+0x18>
 800bc14:	e7fa      	b.n	800bc0c <__mcmp+0x28>
 800bc16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc1a:	e7f7      	b.n	800bc0c <__mcmp+0x28>

0800bc1c <__mdiff>:
 800bc1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc20:	460c      	mov	r4, r1
 800bc22:	4606      	mov	r6, r0
 800bc24:	4611      	mov	r1, r2
 800bc26:	4620      	mov	r0, r4
 800bc28:	4690      	mov	r8, r2
 800bc2a:	f7ff ffdb 	bl	800bbe4 <__mcmp>
 800bc2e:	1e05      	subs	r5, r0, #0
 800bc30:	d110      	bne.n	800bc54 <__mdiff+0x38>
 800bc32:	4629      	mov	r1, r5
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7ff fd09 	bl	800b64c <_Balloc>
 800bc3a:	b930      	cbnz	r0, 800bc4a <__mdiff+0x2e>
 800bc3c:	4b3a      	ldr	r3, [pc, #232]	; (800bd28 <__mdiff+0x10c>)
 800bc3e:	4602      	mov	r2, r0
 800bc40:	f240 2132 	movw	r1, #562	; 0x232
 800bc44:	4839      	ldr	r0, [pc, #228]	; (800bd2c <__mdiff+0x110>)
 800bc46:	f001 fc39 	bl	800d4bc <__assert_func>
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	bfa4      	itt	ge
 800bc56:	4643      	movge	r3, r8
 800bc58:	46a0      	movge	r8, r4
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc60:	bfa6      	itte	ge
 800bc62:	461c      	movge	r4, r3
 800bc64:	2500      	movge	r5, #0
 800bc66:	2501      	movlt	r5, #1
 800bc68:	f7ff fcf0 	bl	800b64c <_Balloc>
 800bc6c:	b920      	cbnz	r0, 800bc78 <__mdiff+0x5c>
 800bc6e:	4b2e      	ldr	r3, [pc, #184]	; (800bd28 <__mdiff+0x10c>)
 800bc70:	4602      	mov	r2, r0
 800bc72:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc76:	e7e5      	b.n	800bc44 <__mdiff+0x28>
 800bc78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc7c:	6926      	ldr	r6, [r4, #16]
 800bc7e:	60c5      	str	r5, [r0, #12]
 800bc80:	f104 0914 	add.w	r9, r4, #20
 800bc84:	f108 0514 	add.w	r5, r8, #20
 800bc88:	f100 0e14 	add.w	lr, r0, #20
 800bc8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc94:	f108 0210 	add.w	r2, r8, #16
 800bc98:	46f2      	mov	sl, lr
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bca0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bca4:	fa1f f883 	uxth.w	r8, r3
 800bca8:	fa11 f18b 	uxtah	r1, r1, fp
 800bcac:	0c1b      	lsrs	r3, r3, #16
 800bcae:	eba1 0808 	sub.w	r8, r1, r8
 800bcb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bcba:	fa1f f888 	uxth.w	r8, r8
 800bcbe:	1419      	asrs	r1, r3, #16
 800bcc0:	454e      	cmp	r6, r9
 800bcc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bcc6:	f84a 3b04 	str.w	r3, [sl], #4
 800bcca:	d8e7      	bhi.n	800bc9c <__mdiff+0x80>
 800bccc:	1b33      	subs	r3, r6, r4
 800bcce:	3b15      	subs	r3, #21
 800bcd0:	f023 0303 	bic.w	r3, r3, #3
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	3415      	adds	r4, #21
 800bcd8:	42a6      	cmp	r6, r4
 800bcda:	bf38      	it	cc
 800bcdc:	2304      	movcc	r3, #4
 800bcde:	441d      	add	r5, r3
 800bce0:	4473      	add	r3, lr
 800bce2:	469e      	mov	lr, r3
 800bce4:	462e      	mov	r6, r5
 800bce6:	4566      	cmp	r6, ip
 800bce8:	d30e      	bcc.n	800bd08 <__mdiff+0xec>
 800bcea:	f10c 0203 	add.w	r2, ip, #3
 800bcee:	1b52      	subs	r2, r2, r5
 800bcf0:	f022 0203 	bic.w	r2, r2, #3
 800bcf4:	3d03      	subs	r5, #3
 800bcf6:	45ac      	cmp	ip, r5
 800bcf8:	bf38      	it	cc
 800bcfa:	2200      	movcc	r2, #0
 800bcfc:	441a      	add	r2, r3
 800bcfe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bd02:	b17b      	cbz	r3, 800bd24 <__mdiff+0x108>
 800bd04:	6107      	str	r7, [r0, #16]
 800bd06:	e7a3      	b.n	800bc50 <__mdiff+0x34>
 800bd08:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd0c:	fa11 f288 	uxtah	r2, r1, r8
 800bd10:	1414      	asrs	r4, r2, #16
 800bd12:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd16:	b292      	uxth	r2, r2
 800bd18:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd1c:	f84e 2b04 	str.w	r2, [lr], #4
 800bd20:	1421      	asrs	r1, r4, #16
 800bd22:	e7e0      	b.n	800bce6 <__mdiff+0xca>
 800bd24:	3f01      	subs	r7, #1
 800bd26:	e7ea      	b.n	800bcfe <__mdiff+0xe2>
 800bd28:	0800e400 	.word	0x0800e400
 800bd2c:	0800e4f0 	.word	0x0800e4f0

0800bd30 <__ulp>:
 800bd30:	b082      	sub	sp, #8
 800bd32:	ed8d 0b00 	vstr	d0, [sp]
 800bd36:	9b01      	ldr	r3, [sp, #4]
 800bd38:	4912      	ldr	r1, [pc, #72]	; (800bd84 <__ulp+0x54>)
 800bd3a:	4019      	ands	r1, r3
 800bd3c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bd40:	2900      	cmp	r1, #0
 800bd42:	dd05      	ble.n	800bd50 <__ulp+0x20>
 800bd44:	2200      	movs	r2, #0
 800bd46:	460b      	mov	r3, r1
 800bd48:	ec43 2b10 	vmov	d0, r2, r3
 800bd4c:	b002      	add	sp, #8
 800bd4e:	4770      	bx	lr
 800bd50:	4249      	negs	r1, r1
 800bd52:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bd56:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bd5a:	f04f 0200 	mov.w	r2, #0
 800bd5e:	f04f 0300 	mov.w	r3, #0
 800bd62:	da04      	bge.n	800bd6e <__ulp+0x3e>
 800bd64:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd68:	fa41 f300 	asr.w	r3, r1, r0
 800bd6c:	e7ec      	b.n	800bd48 <__ulp+0x18>
 800bd6e:	f1a0 0114 	sub.w	r1, r0, #20
 800bd72:	291e      	cmp	r1, #30
 800bd74:	bfda      	itte	le
 800bd76:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd7a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd7e:	2101      	movgt	r1, #1
 800bd80:	460a      	mov	r2, r1
 800bd82:	e7e1      	b.n	800bd48 <__ulp+0x18>
 800bd84:	7ff00000 	.word	0x7ff00000

0800bd88 <__b2d>:
 800bd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8a:	6905      	ldr	r5, [r0, #16]
 800bd8c:	f100 0714 	add.w	r7, r0, #20
 800bd90:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd94:	1f2e      	subs	r6, r5, #4
 800bd96:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f7ff fd48 	bl	800b830 <__hi0bits>
 800bda0:	f1c0 0320 	rsb	r3, r0, #32
 800bda4:	280a      	cmp	r0, #10
 800bda6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800be24 <__b2d+0x9c>
 800bdaa:	600b      	str	r3, [r1, #0]
 800bdac:	dc14      	bgt.n	800bdd8 <__b2d+0x50>
 800bdae:	f1c0 0e0b 	rsb	lr, r0, #11
 800bdb2:	fa24 f10e 	lsr.w	r1, r4, lr
 800bdb6:	42b7      	cmp	r7, r6
 800bdb8:	ea41 030c 	orr.w	r3, r1, ip
 800bdbc:	bf34      	ite	cc
 800bdbe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bdc2:	2100      	movcs	r1, #0
 800bdc4:	3015      	adds	r0, #21
 800bdc6:	fa04 f000 	lsl.w	r0, r4, r0
 800bdca:	fa21 f10e 	lsr.w	r1, r1, lr
 800bdce:	ea40 0201 	orr.w	r2, r0, r1
 800bdd2:	ec43 2b10 	vmov	d0, r2, r3
 800bdd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdd8:	42b7      	cmp	r7, r6
 800bdda:	bf3a      	itte	cc
 800bddc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bde0:	f1a5 0608 	subcc.w	r6, r5, #8
 800bde4:	2100      	movcs	r1, #0
 800bde6:	380b      	subs	r0, #11
 800bde8:	d017      	beq.n	800be1a <__b2d+0x92>
 800bdea:	f1c0 0c20 	rsb	ip, r0, #32
 800bdee:	fa04 f500 	lsl.w	r5, r4, r0
 800bdf2:	42be      	cmp	r6, r7
 800bdf4:	fa21 f40c 	lsr.w	r4, r1, ip
 800bdf8:	ea45 0504 	orr.w	r5, r5, r4
 800bdfc:	bf8c      	ite	hi
 800bdfe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800be02:	2400      	movls	r4, #0
 800be04:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800be08:	fa01 f000 	lsl.w	r0, r1, r0
 800be0c:	fa24 f40c 	lsr.w	r4, r4, ip
 800be10:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be14:	ea40 0204 	orr.w	r2, r0, r4
 800be18:	e7db      	b.n	800bdd2 <__b2d+0x4a>
 800be1a:	ea44 030c 	orr.w	r3, r4, ip
 800be1e:	460a      	mov	r2, r1
 800be20:	e7d7      	b.n	800bdd2 <__b2d+0x4a>
 800be22:	bf00      	nop
 800be24:	3ff00000 	.word	0x3ff00000

0800be28 <__d2b>:
 800be28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be2c:	4689      	mov	r9, r1
 800be2e:	2101      	movs	r1, #1
 800be30:	ec57 6b10 	vmov	r6, r7, d0
 800be34:	4690      	mov	r8, r2
 800be36:	f7ff fc09 	bl	800b64c <_Balloc>
 800be3a:	4604      	mov	r4, r0
 800be3c:	b930      	cbnz	r0, 800be4c <__d2b+0x24>
 800be3e:	4602      	mov	r2, r0
 800be40:	4b25      	ldr	r3, [pc, #148]	; (800bed8 <__d2b+0xb0>)
 800be42:	4826      	ldr	r0, [pc, #152]	; (800bedc <__d2b+0xb4>)
 800be44:	f240 310a 	movw	r1, #778	; 0x30a
 800be48:	f001 fb38 	bl	800d4bc <__assert_func>
 800be4c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800be50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be54:	bb35      	cbnz	r5, 800bea4 <__d2b+0x7c>
 800be56:	2e00      	cmp	r6, #0
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	d028      	beq.n	800beae <__d2b+0x86>
 800be5c:	4668      	mov	r0, sp
 800be5e:	9600      	str	r6, [sp, #0]
 800be60:	f7ff fd06 	bl	800b870 <__lo0bits>
 800be64:	9900      	ldr	r1, [sp, #0]
 800be66:	b300      	cbz	r0, 800beaa <__d2b+0x82>
 800be68:	9a01      	ldr	r2, [sp, #4]
 800be6a:	f1c0 0320 	rsb	r3, r0, #32
 800be6e:	fa02 f303 	lsl.w	r3, r2, r3
 800be72:	430b      	orrs	r3, r1
 800be74:	40c2      	lsrs	r2, r0
 800be76:	6163      	str	r3, [r4, #20]
 800be78:	9201      	str	r2, [sp, #4]
 800be7a:	9b01      	ldr	r3, [sp, #4]
 800be7c:	61a3      	str	r3, [r4, #24]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	bf14      	ite	ne
 800be82:	2202      	movne	r2, #2
 800be84:	2201      	moveq	r2, #1
 800be86:	6122      	str	r2, [r4, #16]
 800be88:	b1d5      	cbz	r5, 800bec0 <__d2b+0x98>
 800be8a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be8e:	4405      	add	r5, r0
 800be90:	f8c9 5000 	str.w	r5, [r9]
 800be94:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be98:	f8c8 0000 	str.w	r0, [r8]
 800be9c:	4620      	mov	r0, r4
 800be9e:	b003      	add	sp, #12
 800bea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bea8:	e7d5      	b.n	800be56 <__d2b+0x2e>
 800beaa:	6161      	str	r1, [r4, #20]
 800beac:	e7e5      	b.n	800be7a <__d2b+0x52>
 800beae:	a801      	add	r0, sp, #4
 800beb0:	f7ff fcde 	bl	800b870 <__lo0bits>
 800beb4:	9b01      	ldr	r3, [sp, #4]
 800beb6:	6163      	str	r3, [r4, #20]
 800beb8:	2201      	movs	r2, #1
 800beba:	6122      	str	r2, [r4, #16]
 800bebc:	3020      	adds	r0, #32
 800bebe:	e7e3      	b.n	800be88 <__d2b+0x60>
 800bec0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bec4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bec8:	f8c9 0000 	str.w	r0, [r9]
 800becc:	6918      	ldr	r0, [r3, #16]
 800bece:	f7ff fcaf 	bl	800b830 <__hi0bits>
 800bed2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bed6:	e7df      	b.n	800be98 <__d2b+0x70>
 800bed8:	0800e400 	.word	0x0800e400
 800bedc:	0800e4f0 	.word	0x0800e4f0

0800bee0 <__ratio>:
 800bee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	4688      	mov	r8, r1
 800bee6:	4669      	mov	r1, sp
 800bee8:	4681      	mov	r9, r0
 800beea:	f7ff ff4d 	bl	800bd88 <__b2d>
 800beee:	a901      	add	r1, sp, #4
 800bef0:	4640      	mov	r0, r8
 800bef2:	ec55 4b10 	vmov	r4, r5, d0
 800bef6:	f7ff ff47 	bl	800bd88 <__b2d>
 800befa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800befe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bf02:	eba3 0c02 	sub.w	ip, r3, r2
 800bf06:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bf0a:	1a9b      	subs	r3, r3, r2
 800bf0c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bf10:	ec51 0b10 	vmov	r0, r1, d0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	bfd6      	itet	le
 800bf18:	460a      	movle	r2, r1
 800bf1a:	462a      	movgt	r2, r5
 800bf1c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bf20:	468b      	mov	fp, r1
 800bf22:	462f      	mov	r7, r5
 800bf24:	bfd4      	ite	le
 800bf26:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bf2a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bf2e:	4620      	mov	r0, r4
 800bf30:	ee10 2a10 	vmov	r2, s0
 800bf34:	465b      	mov	r3, fp
 800bf36:	4639      	mov	r1, r7
 800bf38:	f7f4 fca0 	bl	800087c <__aeabi_ddiv>
 800bf3c:	ec41 0b10 	vmov	d0, r0, r1
 800bf40:	b003      	add	sp, #12
 800bf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf46 <__copybits>:
 800bf46:	3901      	subs	r1, #1
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	1149      	asrs	r1, r1, #5
 800bf4c:	6914      	ldr	r4, [r2, #16]
 800bf4e:	3101      	adds	r1, #1
 800bf50:	f102 0314 	add.w	r3, r2, #20
 800bf54:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf58:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf5c:	1f05      	subs	r5, r0, #4
 800bf5e:	42a3      	cmp	r3, r4
 800bf60:	d30c      	bcc.n	800bf7c <__copybits+0x36>
 800bf62:	1aa3      	subs	r3, r4, r2
 800bf64:	3b11      	subs	r3, #17
 800bf66:	f023 0303 	bic.w	r3, r3, #3
 800bf6a:	3211      	adds	r2, #17
 800bf6c:	42a2      	cmp	r2, r4
 800bf6e:	bf88      	it	hi
 800bf70:	2300      	movhi	r3, #0
 800bf72:	4418      	add	r0, r3
 800bf74:	2300      	movs	r3, #0
 800bf76:	4288      	cmp	r0, r1
 800bf78:	d305      	bcc.n	800bf86 <__copybits+0x40>
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf80:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf84:	e7eb      	b.n	800bf5e <__copybits+0x18>
 800bf86:	f840 3b04 	str.w	r3, [r0], #4
 800bf8a:	e7f4      	b.n	800bf76 <__copybits+0x30>

0800bf8c <__any_on>:
 800bf8c:	f100 0214 	add.w	r2, r0, #20
 800bf90:	6900      	ldr	r0, [r0, #16]
 800bf92:	114b      	asrs	r3, r1, #5
 800bf94:	4298      	cmp	r0, r3
 800bf96:	b510      	push	{r4, lr}
 800bf98:	db11      	blt.n	800bfbe <__any_on+0x32>
 800bf9a:	dd0a      	ble.n	800bfb2 <__any_on+0x26>
 800bf9c:	f011 011f 	ands.w	r1, r1, #31
 800bfa0:	d007      	beq.n	800bfb2 <__any_on+0x26>
 800bfa2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bfa6:	fa24 f001 	lsr.w	r0, r4, r1
 800bfaa:	fa00 f101 	lsl.w	r1, r0, r1
 800bfae:	428c      	cmp	r4, r1
 800bfb0:	d10b      	bne.n	800bfca <__any_on+0x3e>
 800bfb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d803      	bhi.n	800bfc2 <__any_on+0x36>
 800bfba:	2000      	movs	r0, #0
 800bfbc:	bd10      	pop	{r4, pc}
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	e7f7      	b.n	800bfb2 <__any_on+0x26>
 800bfc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bfc6:	2900      	cmp	r1, #0
 800bfc8:	d0f5      	beq.n	800bfb6 <__any_on+0x2a>
 800bfca:	2001      	movs	r0, #1
 800bfcc:	e7f6      	b.n	800bfbc <__any_on+0x30>

0800bfce <_calloc_r>:
 800bfce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfd0:	fba1 2402 	umull	r2, r4, r1, r2
 800bfd4:	b94c      	cbnz	r4, 800bfea <_calloc_r+0x1c>
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	9201      	str	r2, [sp, #4]
 800bfda:	f000 f87b 	bl	800c0d4 <_malloc_r>
 800bfde:	9a01      	ldr	r2, [sp, #4]
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	b930      	cbnz	r0, 800bff2 <_calloc_r+0x24>
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	b003      	add	sp, #12
 800bfe8:	bd30      	pop	{r4, r5, pc}
 800bfea:	220c      	movs	r2, #12
 800bfec:	6002      	str	r2, [r0, #0]
 800bfee:	2500      	movs	r5, #0
 800bff0:	e7f8      	b.n	800bfe4 <_calloc_r+0x16>
 800bff2:	4621      	mov	r1, r4
 800bff4:	f7fc f872 	bl	80080dc <memset>
 800bff8:	e7f4      	b.n	800bfe4 <_calloc_r+0x16>
	...

0800bffc <_free_r>:
 800bffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bffe:	2900      	cmp	r1, #0
 800c000:	d044      	beq.n	800c08c <_free_r+0x90>
 800c002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c006:	9001      	str	r0, [sp, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f1a1 0404 	sub.w	r4, r1, #4
 800c00e:	bfb8      	it	lt
 800c010:	18e4      	addlt	r4, r4, r3
 800c012:	f001 fae1 	bl	800d5d8 <__malloc_lock>
 800c016:	4a1e      	ldr	r2, [pc, #120]	; (800c090 <_free_r+0x94>)
 800c018:	9801      	ldr	r0, [sp, #4]
 800c01a:	6813      	ldr	r3, [r2, #0]
 800c01c:	b933      	cbnz	r3, 800c02c <_free_r+0x30>
 800c01e:	6063      	str	r3, [r4, #4]
 800c020:	6014      	str	r4, [r2, #0]
 800c022:	b003      	add	sp, #12
 800c024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c028:	f001 badc 	b.w	800d5e4 <__malloc_unlock>
 800c02c:	42a3      	cmp	r3, r4
 800c02e:	d908      	bls.n	800c042 <_free_r+0x46>
 800c030:	6825      	ldr	r5, [r4, #0]
 800c032:	1961      	adds	r1, r4, r5
 800c034:	428b      	cmp	r3, r1
 800c036:	bf01      	itttt	eq
 800c038:	6819      	ldreq	r1, [r3, #0]
 800c03a:	685b      	ldreq	r3, [r3, #4]
 800c03c:	1949      	addeq	r1, r1, r5
 800c03e:	6021      	streq	r1, [r4, #0]
 800c040:	e7ed      	b.n	800c01e <_free_r+0x22>
 800c042:	461a      	mov	r2, r3
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	b10b      	cbz	r3, 800c04c <_free_r+0x50>
 800c048:	42a3      	cmp	r3, r4
 800c04a:	d9fa      	bls.n	800c042 <_free_r+0x46>
 800c04c:	6811      	ldr	r1, [r2, #0]
 800c04e:	1855      	adds	r5, r2, r1
 800c050:	42a5      	cmp	r5, r4
 800c052:	d10b      	bne.n	800c06c <_free_r+0x70>
 800c054:	6824      	ldr	r4, [r4, #0]
 800c056:	4421      	add	r1, r4
 800c058:	1854      	adds	r4, r2, r1
 800c05a:	42a3      	cmp	r3, r4
 800c05c:	6011      	str	r1, [r2, #0]
 800c05e:	d1e0      	bne.n	800c022 <_free_r+0x26>
 800c060:	681c      	ldr	r4, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	6053      	str	r3, [r2, #4]
 800c066:	4421      	add	r1, r4
 800c068:	6011      	str	r1, [r2, #0]
 800c06a:	e7da      	b.n	800c022 <_free_r+0x26>
 800c06c:	d902      	bls.n	800c074 <_free_r+0x78>
 800c06e:	230c      	movs	r3, #12
 800c070:	6003      	str	r3, [r0, #0]
 800c072:	e7d6      	b.n	800c022 <_free_r+0x26>
 800c074:	6825      	ldr	r5, [r4, #0]
 800c076:	1961      	adds	r1, r4, r5
 800c078:	428b      	cmp	r3, r1
 800c07a:	bf04      	itt	eq
 800c07c:	6819      	ldreq	r1, [r3, #0]
 800c07e:	685b      	ldreq	r3, [r3, #4]
 800c080:	6063      	str	r3, [r4, #4]
 800c082:	bf04      	itt	eq
 800c084:	1949      	addeq	r1, r1, r5
 800c086:	6021      	streq	r1, [r4, #0]
 800c088:	6054      	str	r4, [r2, #4]
 800c08a:	e7ca      	b.n	800c022 <_free_r+0x26>
 800c08c:	b003      	add	sp, #12
 800c08e:	bd30      	pop	{r4, r5, pc}
 800c090:	200004a8 	.word	0x200004a8

0800c094 <sbrk_aligned>:
 800c094:	b570      	push	{r4, r5, r6, lr}
 800c096:	4e0e      	ldr	r6, [pc, #56]	; (800c0d0 <sbrk_aligned+0x3c>)
 800c098:	460c      	mov	r4, r1
 800c09a:	6831      	ldr	r1, [r6, #0]
 800c09c:	4605      	mov	r5, r0
 800c09e:	b911      	cbnz	r1, 800c0a6 <sbrk_aligned+0x12>
 800c0a0:	f000 ff46 	bl	800cf30 <_sbrk_r>
 800c0a4:	6030      	str	r0, [r6, #0]
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f000 ff41 	bl	800cf30 <_sbrk_r>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	d00a      	beq.n	800c0c8 <sbrk_aligned+0x34>
 800c0b2:	1cc4      	adds	r4, r0, #3
 800c0b4:	f024 0403 	bic.w	r4, r4, #3
 800c0b8:	42a0      	cmp	r0, r4
 800c0ba:	d007      	beq.n	800c0cc <sbrk_aligned+0x38>
 800c0bc:	1a21      	subs	r1, r4, r0
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f000 ff36 	bl	800cf30 <_sbrk_r>
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d101      	bne.n	800c0cc <sbrk_aligned+0x38>
 800c0c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	bd70      	pop	{r4, r5, r6, pc}
 800c0d0:	200004ac 	.word	0x200004ac

0800c0d4 <_malloc_r>:
 800c0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d8:	1ccd      	adds	r5, r1, #3
 800c0da:	f025 0503 	bic.w	r5, r5, #3
 800c0de:	3508      	adds	r5, #8
 800c0e0:	2d0c      	cmp	r5, #12
 800c0e2:	bf38      	it	cc
 800c0e4:	250c      	movcc	r5, #12
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	4607      	mov	r7, r0
 800c0ea:	db01      	blt.n	800c0f0 <_malloc_r+0x1c>
 800c0ec:	42a9      	cmp	r1, r5
 800c0ee:	d905      	bls.n	800c0fc <_malloc_r+0x28>
 800c0f0:	230c      	movs	r3, #12
 800c0f2:	603b      	str	r3, [r7, #0]
 800c0f4:	2600      	movs	r6, #0
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fc:	4e2e      	ldr	r6, [pc, #184]	; (800c1b8 <_malloc_r+0xe4>)
 800c0fe:	f001 fa6b 	bl	800d5d8 <__malloc_lock>
 800c102:	6833      	ldr	r3, [r6, #0]
 800c104:	461c      	mov	r4, r3
 800c106:	bb34      	cbnz	r4, 800c156 <_malloc_r+0x82>
 800c108:	4629      	mov	r1, r5
 800c10a:	4638      	mov	r0, r7
 800c10c:	f7ff ffc2 	bl	800c094 <sbrk_aligned>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	4604      	mov	r4, r0
 800c114:	d14d      	bne.n	800c1b2 <_malloc_r+0xde>
 800c116:	6834      	ldr	r4, [r6, #0]
 800c118:	4626      	mov	r6, r4
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	d140      	bne.n	800c1a0 <_malloc_r+0xcc>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	4631      	mov	r1, r6
 800c122:	4638      	mov	r0, r7
 800c124:	eb04 0803 	add.w	r8, r4, r3
 800c128:	f000 ff02 	bl	800cf30 <_sbrk_r>
 800c12c:	4580      	cmp	r8, r0
 800c12e:	d13a      	bne.n	800c1a6 <_malloc_r+0xd2>
 800c130:	6821      	ldr	r1, [r4, #0]
 800c132:	3503      	adds	r5, #3
 800c134:	1a6d      	subs	r5, r5, r1
 800c136:	f025 0503 	bic.w	r5, r5, #3
 800c13a:	3508      	adds	r5, #8
 800c13c:	2d0c      	cmp	r5, #12
 800c13e:	bf38      	it	cc
 800c140:	250c      	movcc	r5, #12
 800c142:	4629      	mov	r1, r5
 800c144:	4638      	mov	r0, r7
 800c146:	f7ff ffa5 	bl	800c094 <sbrk_aligned>
 800c14a:	3001      	adds	r0, #1
 800c14c:	d02b      	beq.n	800c1a6 <_malloc_r+0xd2>
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	442b      	add	r3, r5
 800c152:	6023      	str	r3, [r4, #0]
 800c154:	e00e      	b.n	800c174 <_malloc_r+0xa0>
 800c156:	6822      	ldr	r2, [r4, #0]
 800c158:	1b52      	subs	r2, r2, r5
 800c15a:	d41e      	bmi.n	800c19a <_malloc_r+0xc6>
 800c15c:	2a0b      	cmp	r2, #11
 800c15e:	d916      	bls.n	800c18e <_malloc_r+0xba>
 800c160:	1961      	adds	r1, r4, r5
 800c162:	42a3      	cmp	r3, r4
 800c164:	6025      	str	r5, [r4, #0]
 800c166:	bf18      	it	ne
 800c168:	6059      	strne	r1, [r3, #4]
 800c16a:	6863      	ldr	r3, [r4, #4]
 800c16c:	bf08      	it	eq
 800c16e:	6031      	streq	r1, [r6, #0]
 800c170:	5162      	str	r2, [r4, r5]
 800c172:	604b      	str	r3, [r1, #4]
 800c174:	4638      	mov	r0, r7
 800c176:	f104 060b 	add.w	r6, r4, #11
 800c17a:	f001 fa33 	bl	800d5e4 <__malloc_unlock>
 800c17e:	f026 0607 	bic.w	r6, r6, #7
 800c182:	1d23      	adds	r3, r4, #4
 800c184:	1af2      	subs	r2, r6, r3
 800c186:	d0b6      	beq.n	800c0f6 <_malloc_r+0x22>
 800c188:	1b9b      	subs	r3, r3, r6
 800c18a:	50a3      	str	r3, [r4, r2]
 800c18c:	e7b3      	b.n	800c0f6 <_malloc_r+0x22>
 800c18e:	6862      	ldr	r2, [r4, #4]
 800c190:	42a3      	cmp	r3, r4
 800c192:	bf0c      	ite	eq
 800c194:	6032      	streq	r2, [r6, #0]
 800c196:	605a      	strne	r2, [r3, #4]
 800c198:	e7ec      	b.n	800c174 <_malloc_r+0xa0>
 800c19a:	4623      	mov	r3, r4
 800c19c:	6864      	ldr	r4, [r4, #4]
 800c19e:	e7b2      	b.n	800c106 <_malloc_r+0x32>
 800c1a0:	4634      	mov	r4, r6
 800c1a2:	6876      	ldr	r6, [r6, #4]
 800c1a4:	e7b9      	b.n	800c11a <_malloc_r+0x46>
 800c1a6:	230c      	movs	r3, #12
 800c1a8:	603b      	str	r3, [r7, #0]
 800c1aa:	4638      	mov	r0, r7
 800c1ac:	f001 fa1a 	bl	800d5e4 <__malloc_unlock>
 800c1b0:	e7a1      	b.n	800c0f6 <_malloc_r+0x22>
 800c1b2:	6025      	str	r5, [r4, #0]
 800c1b4:	e7de      	b.n	800c174 <_malloc_r+0xa0>
 800c1b6:	bf00      	nop
 800c1b8:	200004a8 	.word	0x200004a8

0800c1bc <__ssputs_r>:
 800c1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c0:	688e      	ldr	r6, [r1, #8]
 800c1c2:	429e      	cmp	r6, r3
 800c1c4:	4682      	mov	sl, r0
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	4690      	mov	r8, r2
 800c1ca:	461f      	mov	r7, r3
 800c1cc:	d838      	bhi.n	800c240 <__ssputs_r+0x84>
 800c1ce:	898a      	ldrh	r2, [r1, #12]
 800c1d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1d4:	d032      	beq.n	800c23c <__ssputs_r+0x80>
 800c1d6:	6825      	ldr	r5, [r4, #0]
 800c1d8:	6909      	ldr	r1, [r1, #16]
 800c1da:	eba5 0901 	sub.w	r9, r5, r1
 800c1de:	6965      	ldr	r5, [r4, #20]
 800c1e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	444b      	add	r3, r9
 800c1ec:	106d      	asrs	r5, r5, #1
 800c1ee:	429d      	cmp	r5, r3
 800c1f0:	bf38      	it	cc
 800c1f2:	461d      	movcc	r5, r3
 800c1f4:	0553      	lsls	r3, r2, #21
 800c1f6:	d531      	bpl.n	800c25c <__ssputs_r+0xa0>
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7ff ff6b 	bl	800c0d4 <_malloc_r>
 800c1fe:	4606      	mov	r6, r0
 800c200:	b950      	cbnz	r0, 800c218 <__ssputs_r+0x5c>
 800c202:	230c      	movs	r3, #12
 800c204:	f8ca 3000 	str.w	r3, [sl]
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c20e:	81a3      	strh	r3, [r4, #12]
 800c210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c218:	6921      	ldr	r1, [r4, #16]
 800c21a:	464a      	mov	r2, r9
 800c21c:	f7fb ff50 	bl	80080c0 <memcpy>
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c22a:	81a3      	strh	r3, [r4, #12]
 800c22c:	6126      	str	r6, [r4, #16]
 800c22e:	6165      	str	r5, [r4, #20]
 800c230:	444e      	add	r6, r9
 800c232:	eba5 0509 	sub.w	r5, r5, r9
 800c236:	6026      	str	r6, [r4, #0]
 800c238:	60a5      	str	r5, [r4, #8]
 800c23a:	463e      	mov	r6, r7
 800c23c:	42be      	cmp	r6, r7
 800c23e:	d900      	bls.n	800c242 <__ssputs_r+0x86>
 800c240:	463e      	mov	r6, r7
 800c242:	6820      	ldr	r0, [r4, #0]
 800c244:	4632      	mov	r2, r6
 800c246:	4641      	mov	r1, r8
 800c248:	f001 f9ac 	bl	800d5a4 <memmove>
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	1b9b      	subs	r3, r3, r6
 800c250:	60a3      	str	r3, [r4, #8]
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	4433      	add	r3, r6
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	2000      	movs	r0, #0
 800c25a:	e7db      	b.n	800c214 <__ssputs_r+0x58>
 800c25c:	462a      	mov	r2, r5
 800c25e:	f001 f9c7 	bl	800d5f0 <_realloc_r>
 800c262:	4606      	mov	r6, r0
 800c264:	2800      	cmp	r0, #0
 800c266:	d1e1      	bne.n	800c22c <__ssputs_r+0x70>
 800c268:	6921      	ldr	r1, [r4, #16]
 800c26a:	4650      	mov	r0, sl
 800c26c:	f7ff fec6 	bl	800bffc <_free_r>
 800c270:	e7c7      	b.n	800c202 <__ssputs_r+0x46>
	...

0800c274 <_svfiprintf_r>:
 800c274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c278:	4698      	mov	r8, r3
 800c27a:	898b      	ldrh	r3, [r1, #12]
 800c27c:	061b      	lsls	r3, r3, #24
 800c27e:	b09d      	sub	sp, #116	; 0x74
 800c280:	4607      	mov	r7, r0
 800c282:	460d      	mov	r5, r1
 800c284:	4614      	mov	r4, r2
 800c286:	d50e      	bpl.n	800c2a6 <_svfiprintf_r+0x32>
 800c288:	690b      	ldr	r3, [r1, #16]
 800c28a:	b963      	cbnz	r3, 800c2a6 <_svfiprintf_r+0x32>
 800c28c:	2140      	movs	r1, #64	; 0x40
 800c28e:	f7ff ff21 	bl	800c0d4 <_malloc_r>
 800c292:	6028      	str	r0, [r5, #0]
 800c294:	6128      	str	r0, [r5, #16]
 800c296:	b920      	cbnz	r0, 800c2a2 <_svfiprintf_r+0x2e>
 800c298:	230c      	movs	r3, #12
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2a0:	e0d1      	b.n	800c446 <_svfiprintf_r+0x1d2>
 800c2a2:	2340      	movs	r3, #64	; 0x40
 800c2a4:	616b      	str	r3, [r5, #20]
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c2aa:	2320      	movs	r3, #32
 800c2ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2b4:	2330      	movs	r3, #48	; 0x30
 800c2b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c460 <_svfiprintf_r+0x1ec>
 800c2ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2be:	f04f 0901 	mov.w	r9, #1
 800c2c2:	4623      	mov	r3, r4
 800c2c4:	469a      	mov	sl, r3
 800c2c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2ca:	b10a      	cbz	r2, 800c2d0 <_svfiprintf_r+0x5c>
 800c2cc:	2a25      	cmp	r2, #37	; 0x25
 800c2ce:	d1f9      	bne.n	800c2c4 <_svfiprintf_r+0x50>
 800c2d0:	ebba 0b04 	subs.w	fp, sl, r4
 800c2d4:	d00b      	beq.n	800c2ee <_svfiprintf_r+0x7a>
 800c2d6:	465b      	mov	r3, fp
 800c2d8:	4622      	mov	r2, r4
 800c2da:	4629      	mov	r1, r5
 800c2dc:	4638      	mov	r0, r7
 800c2de:	f7ff ff6d 	bl	800c1bc <__ssputs_r>
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	f000 80aa 	beq.w	800c43c <_svfiprintf_r+0x1c8>
 800c2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ea:	445a      	add	r2, fp
 800c2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ee:	f89a 3000 	ldrb.w	r3, [sl]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 80a2 	beq.w	800c43c <_svfiprintf_r+0x1c8>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c302:	f10a 0a01 	add.w	sl, sl, #1
 800c306:	9304      	str	r3, [sp, #16]
 800c308:	9307      	str	r3, [sp, #28]
 800c30a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c30e:	931a      	str	r3, [sp, #104]	; 0x68
 800c310:	4654      	mov	r4, sl
 800c312:	2205      	movs	r2, #5
 800c314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c318:	4851      	ldr	r0, [pc, #324]	; (800c460 <_svfiprintf_r+0x1ec>)
 800c31a:	f7f3 ff79 	bl	8000210 <memchr>
 800c31e:	9a04      	ldr	r2, [sp, #16]
 800c320:	b9d8      	cbnz	r0, 800c35a <_svfiprintf_r+0xe6>
 800c322:	06d0      	lsls	r0, r2, #27
 800c324:	bf44      	itt	mi
 800c326:	2320      	movmi	r3, #32
 800c328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c32c:	0711      	lsls	r1, r2, #28
 800c32e:	bf44      	itt	mi
 800c330:	232b      	movmi	r3, #43	; 0x2b
 800c332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c336:	f89a 3000 	ldrb.w	r3, [sl]
 800c33a:	2b2a      	cmp	r3, #42	; 0x2a
 800c33c:	d015      	beq.n	800c36a <_svfiprintf_r+0xf6>
 800c33e:	9a07      	ldr	r2, [sp, #28]
 800c340:	4654      	mov	r4, sl
 800c342:	2000      	movs	r0, #0
 800c344:	f04f 0c0a 	mov.w	ip, #10
 800c348:	4621      	mov	r1, r4
 800c34a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c34e:	3b30      	subs	r3, #48	; 0x30
 800c350:	2b09      	cmp	r3, #9
 800c352:	d94e      	bls.n	800c3f2 <_svfiprintf_r+0x17e>
 800c354:	b1b0      	cbz	r0, 800c384 <_svfiprintf_r+0x110>
 800c356:	9207      	str	r2, [sp, #28]
 800c358:	e014      	b.n	800c384 <_svfiprintf_r+0x110>
 800c35a:	eba0 0308 	sub.w	r3, r0, r8
 800c35e:	fa09 f303 	lsl.w	r3, r9, r3
 800c362:	4313      	orrs	r3, r2
 800c364:	9304      	str	r3, [sp, #16]
 800c366:	46a2      	mov	sl, r4
 800c368:	e7d2      	b.n	800c310 <_svfiprintf_r+0x9c>
 800c36a:	9b03      	ldr	r3, [sp, #12]
 800c36c:	1d19      	adds	r1, r3, #4
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	9103      	str	r1, [sp, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	bfbb      	ittet	lt
 800c376:	425b      	neglt	r3, r3
 800c378:	f042 0202 	orrlt.w	r2, r2, #2
 800c37c:	9307      	strge	r3, [sp, #28]
 800c37e:	9307      	strlt	r3, [sp, #28]
 800c380:	bfb8      	it	lt
 800c382:	9204      	strlt	r2, [sp, #16]
 800c384:	7823      	ldrb	r3, [r4, #0]
 800c386:	2b2e      	cmp	r3, #46	; 0x2e
 800c388:	d10c      	bne.n	800c3a4 <_svfiprintf_r+0x130>
 800c38a:	7863      	ldrb	r3, [r4, #1]
 800c38c:	2b2a      	cmp	r3, #42	; 0x2a
 800c38e:	d135      	bne.n	800c3fc <_svfiprintf_r+0x188>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	1d1a      	adds	r2, r3, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	9203      	str	r2, [sp, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfb8      	it	lt
 800c39c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c3a0:	3402      	adds	r4, #2
 800c3a2:	9305      	str	r3, [sp, #20]
 800c3a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c470 <_svfiprintf_r+0x1fc>
 800c3a8:	7821      	ldrb	r1, [r4, #0]
 800c3aa:	2203      	movs	r2, #3
 800c3ac:	4650      	mov	r0, sl
 800c3ae:	f7f3 ff2f 	bl	8000210 <memchr>
 800c3b2:	b140      	cbz	r0, 800c3c6 <_svfiprintf_r+0x152>
 800c3b4:	2340      	movs	r3, #64	; 0x40
 800c3b6:	eba0 000a 	sub.w	r0, r0, sl
 800c3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800c3be:	9b04      	ldr	r3, [sp, #16]
 800c3c0:	4303      	orrs	r3, r0
 800c3c2:	3401      	adds	r4, #1
 800c3c4:	9304      	str	r3, [sp, #16]
 800c3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3ca:	4826      	ldr	r0, [pc, #152]	; (800c464 <_svfiprintf_r+0x1f0>)
 800c3cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3d0:	2206      	movs	r2, #6
 800c3d2:	f7f3 ff1d 	bl	8000210 <memchr>
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d038      	beq.n	800c44c <_svfiprintf_r+0x1d8>
 800c3da:	4b23      	ldr	r3, [pc, #140]	; (800c468 <_svfiprintf_r+0x1f4>)
 800c3dc:	bb1b      	cbnz	r3, 800c426 <_svfiprintf_r+0x1b2>
 800c3de:	9b03      	ldr	r3, [sp, #12]
 800c3e0:	3307      	adds	r3, #7
 800c3e2:	f023 0307 	bic.w	r3, r3, #7
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	9303      	str	r3, [sp, #12]
 800c3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ec:	4433      	add	r3, r6
 800c3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800c3f0:	e767      	b.n	800c2c2 <_svfiprintf_r+0x4e>
 800c3f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	e7a5      	b.n	800c348 <_svfiprintf_r+0xd4>
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	3401      	adds	r4, #1
 800c400:	9305      	str	r3, [sp, #20]
 800c402:	4619      	mov	r1, r3
 800c404:	f04f 0c0a 	mov.w	ip, #10
 800c408:	4620      	mov	r0, r4
 800c40a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c40e:	3a30      	subs	r2, #48	; 0x30
 800c410:	2a09      	cmp	r2, #9
 800c412:	d903      	bls.n	800c41c <_svfiprintf_r+0x1a8>
 800c414:	2b00      	cmp	r3, #0
 800c416:	d0c5      	beq.n	800c3a4 <_svfiprintf_r+0x130>
 800c418:	9105      	str	r1, [sp, #20]
 800c41a:	e7c3      	b.n	800c3a4 <_svfiprintf_r+0x130>
 800c41c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c420:	4604      	mov	r4, r0
 800c422:	2301      	movs	r3, #1
 800c424:	e7f0      	b.n	800c408 <_svfiprintf_r+0x194>
 800c426:	ab03      	add	r3, sp, #12
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	462a      	mov	r2, r5
 800c42c:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <_svfiprintf_r+0x1f8>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	4638      	mov	r0, r7
 800c432:	f7fb fefb 	bl	800822c <_printf_float>
 800c436:	1c42      	adds	r2, r0, #1
 800c438:	4606      	mov	r6, r0
 800c43a:	d1d6      	bne.n	800c3ea <_svfiprintf_r+0x176>
 800c43c:	89ab      	ldrh	r3, [r5, #12]
 800c43e:	065b      	lsls	r3, r3, #25
 800c440:	f53f af2c 	bmi.w	800c29c <_svfiprintf_r+0x28>
 800c444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c446:	b01d      	add	sp, #116	; 0x74
 800c448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	4b06      	ldr	r3, [pc, #24]	; (800c46c <_svfiprintf_r+0x1f8>)
 800c454:	a904      	add	r1, sp, #16
 800c456:	4638      	mov	r0, r7
 800c458:	f7fc f98c 	bl	8008774 <_printf_i>
 800c45c:	e7eb      	b.n	800c436 <_svfiprintf_r+0x1c2>
 800c45e:	bf00      	nop
 800c460:	0800e64c 	.word	0x0800e64c
 800c464:	0800e656 	.word	0x0800e656
 800c468:	0800822d 	.word	0x0800822d
 800c46c:	0800c1bd 	.word	0x0800c1bd
 800c470:	0800e652 	.word	0x0800e652

0800c474 <__sfputc_r>:
 800c474:	6893      	ldr	r3, [r2, #8]
 800c476:	3b01      	subs	r3, #1
 800c478:	2b00      	cmp	r3, #0
 800c47a:	b410      	push	{r4}
 800c47c:	6093      	str	r3, [r2, #8]
 800c47e:	da08      	bge.n	800c492 <__sfputc_r+0x1e>
 800c480:	6994      	ldr	r4, [r2, #24]
 800c482:	42a3      	cmp	r3, r4
 800c484:	db01      	blt.n	800c48a <__sfputc_r+0x16>
 800c486:	290a      	cmp	r1, #10
 800c488:	d103      	bne.n	800c492 <__sfputc_r+0x1e>
 800c48a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c48e:	f000 bf35 	b.w	800d2fc <__swbuf_r>
 800c492:	6813      	ldr	r3, [r2, #0]
 800c494:	1c58      	adds	r0, r3, #1
 800c496:	6010      	str	r0, [r2, #0]
 800c498:	7019      	strb	r1, [r3, #0]
 800c49a:	4608      	mov	r0, r1
 800c49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <__sfputs_r>:
 800c4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	460f      	mov	r7, r1
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	18d5      	adds	r5, r2, r3
 800c4ac:	42ac      	cmp	r4, r5
 800c4ae:	d101      	bne.n	800c4b4 <__sfputs_r+0x12>
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	e007      	b.n	800c4c4 <__sfputs_r+0x22>
 800c4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b8:	463a      	mov	r2, r7
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7ff ffda 	bl	800c474 <__sfputc_r>
 800c4c0:	1c43      	adds	r3, r0, #1
 800c4c2:	d1f3      	bne.n	800c4ac <__sfputs_r+0xa>
 800c4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4c8 <_vfiprintf_r>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	b09d      	sub	sp, #116	; 0x74
 800c4d0:	4614      	mov	r4, r2
 800c4d2:	4698      	mov	r8, r3
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	b118      	cbz	r0, 800c4e0 <_vfiprintf_r+0x18>
 800c4d8:	6983      	ldr	r3, [r0, #24]
 800c4da:	b90b      	cbnz	r3, 800c4e0 <_vfiprintf_r+0x18>
 800c4dc:	f7fe fc06 	bl	800acec <__sinit>
 800c4e0:	4b89      	ldr	r3, [pc, #548]	; (800c708 <_vfiprintf_r+0x240>)
 800c4e2:	429d      	cmp	r5, r3
 800c4e4:	d11b      	bne.n	800c51e <_vfiprintf_r+0x56>
 800c4e6:	6875      	ldr	r5, [r6, #4]
 800c4e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4ea:	07d9      	lsls	r1, r3, #31
 800c4ec:	d405      	bmi.n	800c4fa <_vfiprintf_r+0x32>
 800c4ee:	89ab      	ldrh	r3, [r5, #12]
 800c4f0:	059a      	lsls	r2, r3, #22
 800c4f2:	d402      	bmi.n	800c4fa <_vfiprintf_r+0x32>
 800c4f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4f6:	f7ff f828 	bl	800b54a <__retarget_lock_acquire_recursive>
 800c4fa:	89ab      	ldrh	r3, [r5, #12]
 800c4fc:	071b      	lsls	r3, r3, #28
 800c4fe:	d501      	bpl.n	800c504 <_vfiprintf_r+0x3c>
 800c500:	692b      	ldr	r3, [r5, #16]
 800c502:	b9eb      	cbnz	r3, 800c540 <_vfiprintf_r+0x78>
 800c504:	4629      	mov	r1, r5
 800c506:	4630      	mov	r0, r6
 800c508:	f000 ff6a 	bl	800d3e0 <__swsetup_r>
 800c50c:	b1c0      	cbz	r0, 800c540 <_vfiprintf_r+0x78>
 800c50e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c510:	07dc      	lsls	r4, r3, #31
 800c512:	d50e      	bpl.n	800c532 <_vfiprintf_r+0x6a>
 800c514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c518:	b01d      	add	sp, #116	; 0x74
 800c51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51e:	4b7b      	ldr	r3, [pc, #492]	; (800c70c <_vfiprintf_r+0x244>)
 800c520:	429d      	cmp	r5, r3
 800c522:	d101      	bne.n	800c528 <_vfiprintf_r+0x60>
 800c524:	68b5      	ldr	r5, [r6, #8]
 800c526:	e7df      	b.n	800c4e8 <_vfiprintf_r+0x20>
 800c528:	4b79      	ldr	r3, [pc, #484]	; (800c710 <_vfiprintf_r+0x248>)
 800c52a:	429d      	cmp	r5, r3
 800c52c:	bf08      	it	eq
 800c52e:	68f5      	ldreq	r5, [r6, #12]
 800c530:	e7da      	b.n	800c4e8 <_vfiprintf_r+0x20>
 800c532:	89ab      	ldrh	r3, [r5, #12]
 800c534:	0598      	lsls	r0, r3, #22
 800c536:	d4ed      	bmi.n	800c514 <_vfiprintf_r+0x4c>
 800c538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c53a:	f7ff f807 	bl	800b54c <__retarget_lock_release_recursive>
 800c53e:	e7e9      	b.n	800c514 <_vfiprintf_r+0x4c>
 800c540:	2300      	movs	r3, #0
 800c542:	9309      	str	r3, [sp, #36]	; 0x24
 800c544:	2320      	movs	r3, #32
 800c546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c54e:	2330      	movs	r3, #48	; 0x30
 800c550:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c714 <_vfiprintf_r+0x24c>
 800c554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c558:	f04f 0901 	mov.w	r9, #1
 800c55c:	4623      	mov	r3, r4
 800c55e:	469a      	mov	sl, r3
 800c560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c564:	b10a      	cbz	r2, 800c56a <_vfiprintf_r+0xa2>
 800c566:	2a25      	cmp	r2, #37	; 0x25
 800c568:	d1f9      	bne.n	800c55e <_vfiprintf_r+0x96>
 800c56a:	ebba 0b04 	subs.w	fp, sl, r4
 800c56e:	d00b      	beq.n	800c588 <_vfiprintf_r+0xc0>
 800c570:	465b      	mov	r3, fp
 800c572:	4622      	mov	r2, r4
 800c574:	4629      	mov	r1, r5
 800c576:	4630      	mov	r0, r6
 800c578:	f7ff ff93 	bl	800c4a2 <__sfputs_r>
 800c57c:	3001      	adds	r0, #1
 800c57e:	f000 80aa 	beq.w	800c6d6 <_vfiprintf_r+0x20e>
 800c582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c584:	445a      	add	r2, fp
 800c586:	9209      	str	r2, [sp, #36]	; 0x24
 800c588:	f89a 3000 	ldrb.w	r3, [sl]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 80a2 	beq.w	800c6d6 <_vfiprintf_r+0x20e>
 800c592:	2300      	movs	r3, #0
 800c594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c59c:	f10a 0a01 	add.w	sl, sl, #1
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	9307      	str	r3, [sp, #28]
 800c5a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c5aa:	4654      	mov	r4, sl
 800c5ac:	2205      	movs	r2, #5
 800c5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5b2:	4858      	ldr	r0, [pc, #352]	; (800c714 <_vfiprintf_r+0x24c>)
 800c5b4:	f7f3 fe2c 	bl	8000210 <memchr>
 800c5b8:	9a04      	ldr	r2, [sp, #16]
 800c5ba:	b9d8      	cbnz	r0, 800c5f4 <_vfiprintf_r+0x12c>
 800c5bc:	06d1      	lsls	r1, r2, #27
 800c5be:	bf44      	itt	mi
 800c5c0:	2320      	movmi	r3, #32
 800c5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5c6:	0713      	lsls	r3, r2, #28
 800c5c8:	bf44      	itt	mi
 800c5ca:	232b      	movmi	r3, #43	; 0x2b
 800c5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5d6:	d015      	beq.n	800c604 <_vfiprintf_r+0x13c>
 800c5d8:	9a07      	ldr	r2, [sp, #28]
 800c5da:	4654      	mov	r4, sl
 800c5dc:	2000      	movs	r0, #0
 800c5de:	f04f 0c0a 	mov.w	ip, #10
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5e8:	3b30      	subs	r3, #48	; 0x30
 800c5ea:	2b09      	cmp	r3, #9
 800c5ec:	d94e      	bls.n	800c68c <_vfiprintf_r+0x1c4>
 800c5ee:	b1b0      	cbz	r0, 800c61e <_vfiprintf_r+0x156>
 800c5f0:	9207      	str	r2, [sp, #28]
 800c5f2:	e014      	b.n	800c61e <_vfiprintf_r+0x156>
 800c5f4:	eba0 0308 	sub.w	r3, r0, r8
 800c5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	9304      	str	r3, [sp, #16]
 800c600:	46a2      	mov	sl, r4
 800c602:	e7d2      	b.n	800c5aa <_vfiprintf_r+0xe2>
 800c604:	9b03      	ldr	r3, [sp, #12]
 800c606:	1d19      	adds	r1, r3, #4
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	9103      	str	r1, [sp, #12]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfbb      	ittet	lt
 800c610:	425b      	neglt	r3, r3
 800c612:	f042 0202 	orrlt.w	r2, r2, #2
 800c616:	9307      	strge	r3, [sp, #28]
 800c618:	9307      	strlt	r3, [sp, #28]
 800c61a:	bfb8      	it	lt
 800c61c:	9204      	strlt	r2, [sp, #16]
 800c61e:	7823      	ldrb	r3, [r4, #0]
 800c620:	2b2e      	cmp	r3, #46	; 0x2e
 800c622:	d10c      	bne.n	800c63e <_vfiprintf_r+0x176>
 800c624:	7863      	ldrb	r3, [r4, #1]
 800c626:	2b2a      	cmp	r3, #42	; 0x2a
 800c628:	d135      	bne.n	800c696 <_vfiprintf_r+0x1ce>
 800c62a:	9b03      	ldr	r3, [sp, #12]
 800c62c:	1d1a      	adds	r2, r3, #4
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	9203      	str	r2, [sp, #12]
 800c632:	2b00      	cmp	r3, #0
 800c634:	bfb8      	it	lt
 800c636:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c63a:	3402      	adds	r4, #2
 800c63c:	9305      	str	r3, [sp, #20]
 800c63e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c724 <_vfiprintf_r+0x25c>
 800c642:	7821      	ldrb	r1, [r4, #0]
 800c644:	2203      	movs	r2, #3
 800c646:	4650      	mov	r0, sl
 800c648:	f7f3 fde2 	bl	8000210 <memchr>
 800c64c:	b140      	cbz	r0, 800c660 <_vfiprintf_r+0x198>
 800c64e:	2340      	movs	r3, #64	; 0x40
 800c650:	eba0 000a 	sub.w	r0, r0, sl
 800c654:	fa03 f000 	lsl.w	r0, r3, r0
 800c658:	9b04      	ldr	r3, [sp, #16]
 800c65a:	4303      	orrs	r3, r0
 800c65c:	3401      	adds	r4, #1
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c664:	482c      	ldr	r0, [pc, #176]	; (800c718 <_vfiprintf_r+0x250>)
 800c666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c66a:	2206      	movs	r2, #6
 800c66c:	f7f3 fdd0 	bl	8000210 <memchr>
 800c670:	2800      	cmp	r0, #0
 800c672:	d03f      	beq.n	800c6f4 <_vfiprintf_r+0x22c>
 800c674:	4b29      	ldr	r3, [pc, #164]	; (800c71c <_vfiprintf_r+0x254>)
 800c676:	bb1b      	cbnz	r3, 800c6c0 <_vfiprintf_r+0x1f8>
 800c678:	9b03      	ldr	r3, [sp, #12]
 800c67a:	3307      	adds	r3, #7
 800c67c:	f023 0307 	bic.w	r3, r3, #7
 800c680:	3308      	adds	r3, #8
 800c682:	9303      	str	r3, [sp, #12]
 800c684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c686:	443b      	add	r3, r7
 800c688:	9309      	str	r3, [sp, #36]	; 0x24
 800c68a:	e767      	b.n	800c55c <_vfiprintf_r+0x94>
 800c68c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c690:	460c      	mov	r4, r1
 800c692:	2001      	movs	r0, #1
 800c694:	e7a5      	b.n	800c5e2 <_vfiprintf_r+0x11a>
 800c696:	2300      	movs	r3, #0
 800c698:	3401      	adds	r4, #1
 800c69a:	9305      	str	r3, [sp, #20]
 800c69c:	4619      	mov	r1, r3
 800c69e:	f04f 0c0a 	mov.w	ip, #10
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6a8:	3a30      	subs	r2, #48	; 0x30
 800c6aa:	2a09      	cmp	r2, #9
 800c6ac:	d903      	bls.n	800c6b6 <_vfiprintf_r+0x1ee>
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d0c5      	beq.n	800c63e <_vfiprintf_r+0x176>
 800c6b2:	9105      	str	r1, [sp, #20]
 800c6b4:	e7c3      	b.n	800c63e <_vfiprintf_r+0x176>
 800c6b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e7f0      	b.n	800c6a2 <_vfiprintf_r+0x1da>
 800c6c0:	ab03      	add	r3, sp, #12
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	4b16      	ldr	r3, [pc, #88]	; (800c720 <_vfiprintf_r+0x258>)
 800c6c8:	a904      	add	r1, sp, #16
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7fb fdae 	bl	800822c <_printf_float>
 800c6d0:	4607      	mov	r7, r0
 800c6d2:	1c78      	adds	r0, r7, #1
 800c6d4:	d1d6      	bne.n	800c684 <_vfiprintf_r+0x1bc>
 800c6d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d8:	07d9      	lsls	r1, r3, #31
 800c6da:	d405      	bmi.n	800c6e8 <_vfiprintf_r+0x220>
 800c6dc:	89ab      	ldrh	r3, [r5, #12]
 800c6de:	059a      	lsls	r2, r3, #22
 800c6e0:	d402      	bmi.n	800c6e8 <_vfiprintf_r+0x220>
 800c6e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6e4:	f7fe ff32 	bl	800b54c <__retarget_lock_release_recursive>
 800c6e8:	89ab      	ldrh	r3, [r5, #12]
 800c6ea:	065b      	lsls	r3, r3, #25
 800c6ec:	f53f af12 	bmi.w	800c514 <_vfiprintf_r+0x4c>
 800c6f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6f2:	e711      	b.n	800c518 <_vfiprintf_r+0x50>
 800c6f4:	ab03      	add	r3, sp, #12
 800c6f6:	9300      	str	r3, [sp, #0]
 800c6f8:	462a      	mov	r2, r5
 800c6fa:	4b09      	ldr	r3, [pc, #36]	; (800c720 <_vfiprintf_r+0x258>)
 800c6fc:	a904      	add	r1, sp, #16
 800c6fe:	4630      	mov	r0, r6
 800c700:	f7fc f838 	bl	8008774 <_printf_i>
 800c704:	e7e4      	b.n	800c6d0 <_vfiprintf_r+0x208>
 800c706:	bf00      	nop
 800c708:	0800e434 	.word	0x0800e434
 800c70c:	0800e454 	.word	0x0800e454
 800c710:	0800e414 	.word	0x0800e414
 800c714:	0800e64c 	.word	0x0800e64c
 800c718:	0800e656 	.word	0x0800e656
 800c71c:	0800822d 	.word	0x0800822d
 800c720:	0800c4a3 	.word	0x0800c4a3
 800c724:	0800e652 	.word	0x0800e652

0800c728 <__svfiscanf_r>:
 800c728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c72c:	461d      	mov	r5, r3
 800c72e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800c730:	07df      	lsls	r7, r3, #31
 800c732:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c736:	4606      	mov	r6, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	4692      	mov	sl, r2
 800c73c:	d405      	bmi.n	800c74a <__svfiscanf_r+0x22>
 800c73e:	898b      	ldrh	r3, [r1, #12]
 800c740:	0598      	lsls	r0, r3, #22
 800c742:	d402      	bmi.n	800c74a <__svfiscanf_r+0x22>
 800c744:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800c746:	f7fe ff00 	bl	800b54a <__retarget_lock_acquire_recursive>
 800c74a:	2300      	movs	r3, #0
 800c74c:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800c750:	4ba6      	ldr	r3, [pc, #664]	; (800c9ec <__svfiscanf_r+0x2c4>)
 800c752:	93a0      	str	r3, [sp, #640]	; 0x280
 800c754:	f10d 0804 	add.w	r8, sp, #4
 800c758:	4ba5      	ldr	r3, [pc, #660]	; (800c9f0 <__svfiscanf_r+0x2c8>)
 800c75a:	4fa6      	ldr	r7, [pc, #664]	; (800c9f4 <__svfiscanf_r+0x2cc>)
 800c75c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c9f8 <__svfiscanf_r+0x2d0>
 800c760:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c764:	93a1      	str	r3, [sp, #644]	; 0x284
 800c766:	9500      	str	r5, [sp, #0]
 800c768:	f89a 3000 	ldrb.w	r3, [sl]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	f000 8173 	beq.w	800ca58 <__svfiscanf_r+0x330>
 800c772:	5dd9      	ldrb	r1, [r3, r7]
 800c774:	f011 0108 	ands.w	r1, r1, #8
 800c778:	f10a 0501 	add.w	r5, sl, #1
 800c77c:	d019      	beq.n	800c7b2 <__svfiscanf_r+0x8a>
 800c77e:	6863      	ldr	r3, [r4, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	dd0f      	ble.n	800c7a4 <__svfiscanf_r+0x7c>
 800c784:	6823      	ldr	r3, [r4, #0]
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	5cba      	ldrb	r2, [r7, r2]
 800c78a:	0711      	lsls	r1, r2, #28
 800c78c:	d401      	bmi.n	800c792 <__svfiscanf_r+0x6a>
 800c78e:	46aa      	mov	sl, r5
 800c790:	e7ea      	b.n	800c768 <__svfiscanf_r+0x40>
 800c792:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c794:	3201      	adds	r2, #1
 800c796:	9245      	str	r2, [sp, #276]	; 0x114
 800c798:	6862      	ldr	r2, [r4, #4]
 800c79a:	3301      	adds	r3, #1
 800c79c:	3a01      	subs	r2, #1
 800c79e:	6062      	str	r2, [r4, #4]
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	e7ec      	b.n	800c77e <__svfiscanf_r+0x56>
 800c7a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	4798      	blx	r3
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	d0e9      	beq.n	800c784 <__svfiscanf_r+0x5c>
 800c7b0:	e7ed      	b.n	800c78e <__svfiscanf_r+0x66>
 800c7b2:	2b25      	cmp	r3, #37	; 0x25
 800c7b4:	d012      	beq.n	800c7dc <__svfiscanf_r+0xb4>
 800c7b6:	469a      	mov	sl, r3
 800c7b8:	6863      	ldr	r3, [r4, #4]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f340 8095 	ble.w	800c8ea <__svfiscanf_r+0x1c2>
 800c7c0:	6822      	ldr	r2, [r4, #0]
 800c7c2:	7813      	ldrb	r3, [r2, #0]
 800c7c4:	4553      	cmp	r3, sl
 800c7c6:	f040 8147 	bne.w	800ca58 <__svfiscanf_r+0x330>
 800c7ca:	6863      	ldr	r3, [r4, #4]
 800c7cc:	3b01      	subs	r3, #1
 800c7ce:	6063      	str	r3, [r4, #4]
 800c7d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c7d2:	3201      	adds	r2, #1
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	6022      	str	r2, [r4, #0]
 800c7d8:	9345      	str	r3, [sp, #276]	; 0x114
 800c7da:	e7d8      	b.n	800c78e <__svfiscanf_r+0x66>
 800c7dc:	9141      	str	r1, [sp, #260]	; 0x104
 800c7de:	9143      	str	r1, [sp, #268]	; 0x10c
 800c7e0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800c7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e6:	bf02      	ittt	eq
 800c7e8:	2310      	moveq	r3, #16
 800c7ea:	9341      	streq	r3, [sp, #260]	; 0x104
 800c7ec:	f10a 0502 	addeq.w	r5, sl, #2
 800c7f0:	220a      	movs	r2, #10
 800c7f2:	46aa      	mov	sl, r5
 800c7f4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c7f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c7fc:	2b09      	cmp	r3, #9
 800c7fe:	d91e      	bls.n	800c83e <__svfiscanf_r+0x116>
 800c800:	487d      	ldr	r0, [pc, #500]	; (800c9f8 <__svfiscanf_r+0x2d0>)
 800c802:	2203      	movs	r2, #3
 800c804:	f7f3 fd04 	bl	8000210 <memchr>
 800c808:	b140      	cbz	r0, 800c81c <__svfiscanf_r+0xf4>
 800c80a:	2301      	movs	r3, #1
 800c80c:	eba0 0009 	sub.w	r0, r0, r9
 800c810:	fa03 f000 	lsl.w	r0, r3, r0
 800c814:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c816:	4318      	orrs	r0, r3
 800c818:	9041      	str	r0, [sp, #260]	; 0x104
 800c81a:	4655      	mov	r5, sl
 800c81c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c820:	2b78      	cmp	r3, #120	; 0x78
 800c822:	d807      	bhi.n	800c834 <__svfiscanf_r+0x10c>
 800c824:	2b57      	cmp	r3, #87	; 0x57
 800c826:	d811      	bhi.n	800c84c <__svfiscanf_r+0x124>
 800c828:	2b25      	cmp	r3, #37	; 0x25
 800c82a:	d0c4      	beq.n	800c7b6 <__svfiscanf_r+0x8e>
 800c82c:	d858      	bhi.n	800c8e0 <__svfiscanf_r+0x1b8>
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 80c8 	beq.w	800c9c4 <__svfiscanf_r+0x29c>
 800c834:	2303      	movs	r3, #3
 800c836:	9347      	str	r3, [sp, #284]	; 0x11c
 800c838:	230a      	movs	r3, #10
 800c83a:	9342      	str	r3, [sp, #264]	; 0x108
 800c83c:	e07c      	b.n	800c938 <__svfiscanf_r+0x210>
 800c83e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c840:	fb02 1103 	mla	r1, r2, r3, r1
 800c844:	3930      	subs	r1, #48	; 0x30
 800c846:	9143      	str	r1, [sp, #268]	; 0x10c
 800c848:	4655      	mov	r5, sl
 800c84a:	e7d2      	b.n	800c7f2 <__svfiscanf_r+0xca>
 800c84c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c850:	2a20      	cmp	r2, #32
 800c852:	d8ef      	bhi.n	800c834 <__svfiscanf_r+0x10c>
 800c854:	a101      	add	r1, pc, #4	; (adr r1, 800c85c <__svfiscanf_r+0x134>)
 800c856:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c85a:	bf00      	nop
 800c85c:	0800c923 	.word	0x0800c923
 800c860:	0800c835 	.word	0x0800c835
 800c864:	0800c835 	.word	0x0800c835
 800c868:	0800c981 	.word	0x0800c981
 800c86c:	0800c835 	.word	0x0800c835
 800c870:	0800c835 	.word	0x0800c835
 800c874:	0800c835 	.word	0x0800c835
 800c878:	0800c835 	.word	0x0800c835
 800c87c:	0800c835 	.word	0x0800c835
 800c880:	0800c835 	.word	0x0800c835
 800c884:	0800c835 	.word	0x0800c835
 800c888:	0800c997 	.word	0x0800c997
 800c88c:	0800c96d 	.word	0x0800c96d
 800c890:	0800c8e7 	.word	0x0800c8e7
 800c894:	0800c8e7 	.word	0x0800c8e7
 800c898:	0800c8e7 	.word	0x0800c8e7
 800c89c:	0800c835 	.word	0x0800c835
 800c8a0:	0800c971 	.word	0x0800c971
 800c8a4:	0800c835 	.word	0x0800c835
 800c8a8:	0800c835 	.word	0x0800c835
 800c8ac:	0800c835 	.word	0x0800c835
 800c8b0:	0800c835 	.word	0x0800c835
 800c8b4:	0800c9a7 	.word	0x0800c9a7
 800c8b8:	0800c979 	.word	0x0800c979
 800c8bc:	0800c91b 	.word	0x0800c91b
 800c8c0:	0800c835 	.word	0x0800c835
 800c8c4:	0800c835 	.word	0x0800c835
 800c8c8:	0800c9a3 	.word	0x0800c9a3
 800c8cc:	0800c835 	.word	0x0800c835
 800c8d0:	0800c96d 	.word	0x0800c96d
 800c8d4:	0800c835 	.word	0x0800c835
 800c8d8:	0800c835 	.word	0x0800c835
 800c8dc:	0800c923 	.word	0x0800c923
 800c8e0:	3b45      	subs	r3, #69	; 0x45
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d8a6      	bhi.n	800c834 <__svfiscanf_r+0x10c>
 800c8e6:	2305      	movs	r3, #5
 800c8e8:	e025      	b.n	800c936 <__svfiscanf_r+0x20e>
 800c8ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	4798      	blx	r3
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	f43f af64 	beq.w	800c7c0 <__svfiscanf_r+0x98>
 800c8f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8fa:	07da      	lsls	r2, r3, #31
 800c8fc:	f140 80a4 	bpl.w	800ca48 <__svfiscanf_r+0x320>
 800c900:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c902:	2800      	cmp	r0, #0
 800c904:	d067      	beq.n	800c9d6 <__svfiscanf_r+0x2ae>
 800c906:	89a3      	ldrh	r3, [r4, #12]
 800c908:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c90c:	bf18      	it	ne
 800c90e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800c912:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c91c:	f042 0220 	orr.w	r2, r2, #32
 800c920:	9241      	str	r2, [sp, #260]	; 0x104
 800c922:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c928:	9241      	str	r2, [sp, #260]	; 0x104
 800c92a:	2210      	movs	r2, #16
 800c92c:	2b6f      	cmp	r3, #111	; 0x6f
 800c92e:	9242      	str	r2, [sp, #264]	; 0x108
 800c930:	bf34      	ite	cc
 800c932:	2303      	movcc	r3, #3
 800c934:	2304      	movcs	r3, #4
 800c936:	9347      	str	r3, [sp, #284]	; 0x11c
 800c938:	6863      	ldr	r3, [r4, #4]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	dd4e      	ble.n	800c9dc <__svfiscanf_r+0x2b4>
 800c93e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c940:	065b      	lsls	r3, r3, #25
 800c942:	d404      	bmi.n	800c94e <__svfiscanf_r+0x226>
 800c944:	6823      	ldr	r3, [r4, #0]
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	5cba      	ldrb	r2, [r7, r2]
 800c94a:	0710      	lsls	r0, r2, #28
 800c94c:	d456      	bmi.n	800c9fc <__svfiscanf_r+0x2d4>
 800c94e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c950:	2b02      	cmp	r3, #2
 800c952:	dc65      	bgt.n	800ca20 <__svfiscanf_r+0x2f8>
 800c954:	466b      	mov	r3, sp
 800c956:	4622      	mov	r2, r4
 800c958:	a941      	add	r1, sp, #260	; 0x104
 800c95a:	4630      	mov	r0, r6
 800c95c:	f000 f8b2 	bl	800cac4 <_scanf_chars>
 800c960:	2801      	cmp	r0, #1
 800c962:	d079      	beq.n	800ca58 <__svfiscanf_r+0x330>
 800c964:	2802      	cmp	r0, #2
 800c966:	f47f af12 	bne.w	800c78e <__svfiscanf_r+0x66>
 800c96a:	e7c5      	b.n	800c8f8 <__svfiscanf_r+0x1d0>
 800c96c:	220a      	movs	r2, #10
 800c96e:	e7dd      	b.n	800c92c <__svfiscanf_r+0x204>
 800c970:	2300      	movs	r3, #0
 800c972:	9342      	str	r3, [sp, #264]	; 0x108
 800c974:	2303      	movs	r3, #3
 800c976:	e7de      	b.n	800c936 <__svfiscanf_r+0x20e>
 800c978:	2308      	movs	r3, #8
 800c97a:	9342      	str	r3, [sp, #264]	; 0x108
 800c97c:	2304      	movs	r3, #4
 800c97e:	e7da      	b.n	800c936 <__svfiscanf_r+0x20e>
 800c980:	4629      	mov	r1, r5
 800c982:	4640      	mov	r0, r8
 800c984:	f000 fae4 	bl	800cf50 <__sccl>
 800c988:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c98a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c98e:	9341      	str	r3, [sp, #260]	; 0x104
 800c990:	4605      	mov	r5, r0
 800c992:	2301      	movs	r3, #1
 800c994:	e7cf      	b.n	800c936 <__svfiscanf_r+0x20e>
 800c996:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c99c:	9341      	str	r3, [sp, #260]	; 0x104
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e7c9      	b.n	800c936 <__svfiscanf_r+0x20e>
 800c9a2:	2302      	movs	r3, #2
 800c9a4:	e7c7      	b.n	800c936 <__svfiscanf_r+0x20e>
 800c9a6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c9a8:	06c3      	lsls	r3, r0, #27
 800c9aa:	f53f aef0 	bmi.w	800c78e <__svfiscanf_r+0x66>
 800c9ae:	9b00      	ldr	r3, [sp, #0]
 800c9b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c9b2:	1d19      	adds	r1, r3, #4
 800c9b4:	9100      	str	r1, [sp, #0]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f010 0f01 	tst.w	r0, #1
 800c9bc:	bf14      	ite	ne
 800c9be:	801a      	strhne	r2, [r3, #0]
 800c9c0:	601a      	streq	r2, [r3, #0]
 800c9c2:	e6e4      	b.n	800c78e <__svfiscanf_r+0x66>
 800c9c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9c6:	07d8      	lsls	r0, r3, #31
 800c9c8:	d405      	bmi.n	800c9d6 <__svfiscanf_r+0x2ae>
 800c9ca:	89a3      	ldrh	r3, [r4, #12]
 800c9cc:	0599      	lsls	r1, r3, #22
 800c9ce:	d402      	bmi.n	800c9d6 <__svfiscanf_r+0x2ae>
 800c9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9d2:	f7fe fdbb 	bl	800b54c <__retarget_lock_release_recursive>
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9da:	e79a      	b.n	800c912 <__svfiscanf_r+0x1ea>
 800c9dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c9de:	4621      	mov	r1, r4
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4798      	blx	r3
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	d0aa      	beq.n	800c93e <__svfiscanf_r+0x216>
 800c9e8:	e786      	b.n	800c8f8 <__svfiscanf_r+0x1d0>
 800c9ea:	bf00      	nop
 800c9ec:	0800d1cd 	.word	0x0800d1cd
 800c9f0:	0800ce0d 	.word	0x0800ce0d
 800c9f4:	0800e281 	.word	0x0800e281
 800c9f8:	0800e652 	.word	0x0800e652
 800c9fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c9fe:	3201      	adds	r2, #1
 800ca00:	9245      	str	r2, [sp, #276]	; 0x114
 800ca02:	6862      	ldr	r2, [r4, #4]
 800ca04:	3a01      	subs	r2, #1
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	6062      	str	r2, [r4, #4]
 800ca0a:	dd02      	ble.n	800ca12 <__svfiscanf_r+0x2ea>
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	e798      	b.n	800c944 <__svfiscanf_r+0x21c>
 800ca12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ca14:	4621      	mov	r1, r4
 800ca16:	4630      	mov	r0, r6
 800ca18:	4798      	blx	r3
 800ca1a:	2800      	cmp	r0, #0
 800ca1c:	d092      	beq.n	800c944 <__svfiscanf_r+0x21c>
 800ca1e:	e76b      	b.n	800c8f8 <__svfiscanf_r+0x1d0>
 800ca20:	2b04      	cmp	r3, #4
 800ca22:	dc06      	bgt.n	800ca32 <__svfiscanf_r+0x30a>
 800ca24:	466b      	mov	r3, sp
 800ca26:	4622      	mov	r2, r4
 800ca28:	a941      	add	r1, sp, #260	; 0x104
 800ca2a:	4630      	mov	r0, r6
 800ca2c:	f000 f8a4 	bl	800cb78 <_scanf_i>
 800ca30:	e796      	b.n	800c960 <__svfiscanf_r+0x238>
 800ca32:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <__svfiscanf_r+0x348>)
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f43f aeaa 	beq.w	800c78e <__svfiscanf_r+0x66>
 800ca3a:	466b      	mov	r3, sp
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	a941      	add	r1, sp, #260	; 0x104
 800ca40:	4630      	mov	r0, r6
 800ca42:	f7fb ffbd 	bl	80089c0 <_scanf_float>
 800ca46:	e78b      	b.n	800c960 <__svfiscanf_r+0x238>
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	0599      	lsls	r1, r3, #22
 800ca4c:	f53f af58 	bmi.w	800c900 <__svfiscanf_r+0x1d8>
 800ca50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca52:	f7fe fd7b 	bl	800b54c <__retarget_lock_release_recursive>
 800ca56:	e753      	b.n	800c900 <__svfiscanf_r+0x1d8>
 800ca58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca5a:	07da      	lsls	r2, r3, #31
 800ca5c:	d405      	bmi.n	800ca6a <__svfiscanf_r+0x342>
 800ca5e:	89a3      	ldrh	r3, [r4, #12]
 800ca60:	059b      	lsls	r3, r3, #22
 800ca62:	d402      	bmi.n	800ca6a <__svfiscanf_r+0x342>
 800ca64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca66:	f7fe fd71 	bl	800b54c <__retarget_lock_release_recursive>
 800ca6a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800ca6c:	e751      	b.n	800c912 <__svfiscanf_r+0x1ea>
 800ca6e:	bf00      	nop
 800ca70:	080089c1 	.word	0x080089c1

0800ca74 <_vfiscanf_r>:
 800ca74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca76:	460c      	mov	r4, r1
 800ca78:	4605      	mov	r5, r0
 800ca7a:	b138      	cbz	r0, 800ca8c <_vfiscanf_r+0x18>
 800ca7c:	6981      	ldr	r1, [r0, #24]
 800ca7e:	b929      	cbnz	r1, 800ca8c <_vfiscanf_r+0x18>
 800ca80:	e9cd 2300 	strd	r2, r3, [sp]
 800ca84:	f7fe f932 	bl	800acec <__sinit>
 800ca88:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca8c:	490a      	ldr	r1, [pc, #40]	; (800cab8 <_vfiscanf_r+0x44>)
 800ca8e:	428c      	cmp	r4, r1
 800ca90:	d107      	bne.n	800caa2 <_vfiscanf_r+0x2e>
 800ca92:	686c      	ldr	r4, [r5, #4]
 800ca94:	4621      	mov	r1, r4
 800ca96:	4628      	mov	r0, r5
 800ca98:	b003      	add	sp, #12
 800ca9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca9e:	f7ff be43 	b.w	800c728 <__svfiscanf_r>
 800caa2:	4906      	ldr	r1, [pc, #24]	; (800cabc <_vfiscanf_r+0x48>)
 800caa4:	428c      	cmp	r4, r1
 800caa6:	d101      	bne.n	800caac <_vfiscanf_r+0x38>
 800caa8:	68ac      	ldr	r4, [r5, #8]
 800caaa:	e7f3      	b.n	800ca94 <_vfiscanf_r+0x20>
 800caac:	4904      	ldr	r1, [pc, #16]	; (800cac0 <_vfiscanf_r+0x4c>)
 800caae:	428c      	cmp	r4, r1
 800cab0:	bf08      	it	eq
 800cab2:	68ec      	ldreq	r4, [r5, #12]
 800cab4:	e7ee      	b.n	800ca94 <_vfiscanf_r+0x20>
 800cab6:	bf00      	nop
 800cab8:	0800e434 	.word	0x0800e434
 800cabc:	0800e454 	.word	0x0800e454
 800cac0:	0800e414 	.word	0x0800e414

0800cac4 <_scanf_chars>:
 800cac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cac8:	4615      	mov	r5, r2
 800caca:	688a      	ldr	r2, [r1, #8]
 800cacc:	4680      	mov	r8, r0
 800cace:	460c      	mov	r4, r1
 800cad0:	b932      	cbnz	r2, 800cae0 <_scanf_chars+0x1c>
 800cad2:	698a      	ldr	r2, [r1, #24]
 800cad4:	2a00      	cmp	r2, #0
 800cad6:	bf0c      	ite	eq
 800cad8:	2201      	moveq	r2, #1
 800cada:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800cade:	608a      	str	r2, [r1, #8]
 800cae0:	6822      	ldr	r2, [r4, #0]
 800cae2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cb74 <_scanf_chars+0xb0>
 800cae6:	06d1      	lsls	r1, r2, #27
 800cae8:	bf5f      	itttt	pl
 800caea:	681a      	ldrpl	r2, [r3, #0]
 800caec:	1d11      	addpl	r1, r2, #4
 800caee:	6019      	strpl	r1, [r3, #0]
 800caf0:	6816      	ldrpl	r6, [r2, #0]
 800caf2:	2700      	movs	r7, #0
 800caf4:	69a0      	ldr	r0, [r4, #24]
 800caf6:	b188      	cbz	r0, 800cb1c <_scanf_chars+0x58>
 800caf8:	2801      	cmp	r0, #1
 800cafa:	d107      	bne.n	800cb0c <_scanf_chars+0x48>
 800cafc:	682a      	ldr	r2, [r5, #0]
 800cafe:	7811      	ldrb	r1, [r2, #0]
 800cb00:	6962      	ldr	r2, [r4, #20]
 800cb02:	5c52      	ldrb	r2, [r2, r1]
 800cb04:	b952      	cbnz	r2, 800cb1c <_scanf_chars+0x58>
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	d031      	beq.n	800cb6e <_scanf_chars+0xaa>
 800cb0a:	e022      	b.n	800cb52 <_scanf_chars+0x8e>
 800cb0c:	2802      	cmp	r0, #2
 800cb0e:	d120      	bne.n	800cb52 <_scanf_chars+0x8e>
 800cb10:	682b      	ldr	r3, [r5, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cb18:	071b      	lsls	r3, r3, #28
 800cb1a:	d41a      	bmi.n	800cb52 <_scanf_chars+0x8e>
 800cb1c:	6823      	ldr	r3, [r4, #0]
 800cb1e:	06da      	lsls	r2, r3, #27
 800cb20:	bf5e      	ittt	pl
 800cb22:	682b      	ldrpl	r3, [r5, #0]
 800cb24:	781b      	ldrbpl	r3, [r3, #0]
 800cb26:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cb2a:	682a      	ldr	r2, [r5, #0]
 800cb2c:	686b      	ldr	r3, [r5, #4]
 800cb2e:	3201      	adds	r2, #1
 800cb30:	602a      	str	r2, [r5, #0]
 800cb32:	68a2      	ldr	r2, [r4, #8]
 800cb34:	3b01      	subs	r3, #1
 800cb36:	3a01      	subs	r2, #1
 800cb38:	606b      	str	r3, [r5, #4]
 800cb3a:	3701      	adds	r7, #1
 800cb3c:	60a2      	str	r2, [r4, #8]
 800cb3e:	b142      	cbz	r2, 800cb52 <_scanf_chars+0x8e>
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	dcd7      	bgt.n	800caf4 <_scanf_chars+0x30>
 800cb44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cb48:	4629      	mov	r1, r5
 800cb4a:	4640      	mov	r0, r8
 800cb4c:	4798      	blx	r3
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d0d0      	beq.n	800caf4 <_scanf_chars+0x30>
 800cb52:	6823      	ldr	r3, [r4, #0]
 800cb54:	f013 0310 	ands.w	r3, r3, #16
 800cb58:	d105      	bne.n	800cb66 <_scanf_chars+0xa2>
 800cb5a:	68e2      	ldr	r2, [r4, #12]
 800cb5c:	3201      	adds	r2, #1
 800cb5e:	60e2      	str	r2, [r4, #12]
 800cb60:	69a2      	ldr	r2, [r4, #24]
 800cb62:	b102      	cbz	r2, 800cb66 <_scanf_chars+0xa2>
 800cb64:	7033      	strb	r3, [r6, #0]
 800cb66:	6923      	ldr	r3, [r4, #16]
 800cb68:	443b      	add	r3, r7
 800cb6a:	6123      	str	r3, [r4, #16]
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb72:	bf00      	nop
 800cb74:	0800e281 	.word	0x0800e281

0800cb78 <_scanf_i>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	4698      	mov	r8, r3
 800cb7e:	4b76      	ldr	r3, [pc, #472]	; (800cd58 <_scanf_i+0x1e0>)
 800cb80:	460c      	mov	r4, r1
 800cb82:	4682      	mov	sl, r0
 800cb84:	4616      	mov	r6, r2
 800cb86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	ab03      	add	r3, sp, #12
 800cb8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb92:	4b72      	ldr	r3, [pc, #456]	; (800cd5c <_scanf_i+0x1e4>)
 800cb94:	69a1      	ldr	r1, [r4, #24]
 800cb96:	4a72      	ldr	r2, [pc, #456]	; (800cd60 <_scanf_i+0x1e8>)
 800cb98:	2903      	cmp	r1, #3
 800cb9a:	bf18      	it	ne
 800cb9c:	461a      	movne	r2, r3
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	9201      	str	r2, [sp, #4]
 800cba2:	1e5a      	subs	r2, r3, #1
 800cba4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cba8:	bf88      	it	hi
 800cbaa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cbae:	4627      	mov	r7, r4
 800cbb0:	bf82      	ittt	hi
 800cbb2:	eb03 0905 	addhi.w	r9, r3, r5
 800cbb6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cbba:	60a3      	strhi	r3, [r4, #8]
 800cbbc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cbc0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cbc4:	bf98      	it	ls
 800cbc6:	f04f 0900 	movls.w	r9, #0
 800cbca:	6023      	str	r3, [r4, #0]
 800cbcc:	463d      	mov	r5, r7
 800cbce:	f04f 0b00 	mov.w	fp, #0
 800cbd2:	6831      	ldr	r1, [r6, #0]
 800cbd4:	ab03      	add	r3, sp, #12
 800cbd6:	7809      	ldrb	r1, [r1, #0]
 800cbd8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cbdc:	2202      	movs	r2, #2
 800cbde:	f7f3 fb17 	bl	8000210 <memchr>
 800cbe2:	b328      	cbz	r0, 800cc30 <_scanf_i+0xb8>
 800cbe4:	f1bb 0f01 	cmp.w	fp, #1
 800cbe8:	d159      	bne.n	800cc9e <_scanf_i+0x126>
 800cbea:	6862      	ldr	r2, [r4, #4]
 800cbec:	b92a      	cbnz	r2, 800cbfa <_scanf_i+0x82>
 800cbee:	6822      	ldr	r2, [r4, #0]
 800cbf0:	2308      	movs	r3, #8
 800cbf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbf6:	6063      	str	r3, [r4, #4]
 800cbf8:	6022      	str	r2, [r4, #0]
 800cbfa:	6822      	ldr	r2, [r4, #0]
 800cbfc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800cc00:	6022      	str	r2, [r4, #0]
 800cc02:	68a2      	ldr	r2, [r4, #8]
 800cc04:	1e51      	subs	r1, r2, #1
 800cc06:	60a1      	str	r1, [r4, #8]
 800cc08:	b192      	cbz	r2, 800cc30 <_scanf_i+0xb8>
 800cc0a:	6832      	ldr	r2, [r6, #0]
 800cc0c:	1c51      	adds	r1, r2, #1
 800cc0e:	6031      	str	r1, [r6, #0]
 800cc10:	7812      	ldrb	r2, [r2, #0]
 800cc12:	f805 2b01 	strb.w	r2, [r5], #1
 800cc16:	6872      	ldr	r2, [r6, #4]
 800cc18:	3a01      	subs	r2, #1
 800cc1a:	2a00      	cmp	r2, #0
 800cc1c:	6072      	str	r2, [r6, #4]
 800cc1e:	dc07      	bgt.n	800cc30 <_scanf_i+0xb8>
 800cc20:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800cc24:	4631      	mov	r1, r6
 800cc26:	4650      	mov	r0, sl
 800cc28:	4790      	blx	r2
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	f040 8085 	bne.w	800cd3a <_scanf_i+0x1c2>
 800cc30:	f10b 0b01 	add.w	fp, fp, #1
 800cc34:	f1bb 0f03 	cmp.w	fp, #3
 800cc38:	d1cb      	bne.n	800cbd2 <_scanf_i+0x5a>
 800cc3a:	6863      	ldr	r3, [r4, #4]
 800cc3c:	b90b      	cbnz	r3, 800cc42 <_scanf_i+0xca>
 800cc3e:	230a      	movs	r3, #10
 800cc40:	6063      	str	r3, [r4, #4]
 800cc42:	6863      	ldr	r3, [r4, #4]
 800cc44:	4947      	ldr	r1, [pc, #284]	; (800cd64 <_scanf_i+0x1ec>)
 800cc46:	6960      	ldr	r0, [r4, #20]
 800cc48:	1ac9      	subs	r1, r1, r3
 800cc4a:	f000 f981 	bl	800cf50 <__sccl>
 800cc4e:	f04f 0b00 	mov.w	fp, #0
 800cc52:	68a3      	ldr	r3, [r4, #8]
 800cc54:	6822      	ldr	r2, [r4, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d03d      	beq.n	800ccd6 <_scanf_i+0x15e>
 800cc5a:	6831      	ldr	r1, [r6, #0]
 800cc5c:	6960      	ldr	r0, [r4, #20]
 800cc5e:	f891 c000 	ldrb.w	ip, [r1]
 800cc62:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d035      	beq.n	800ccd6 <_scanf_i+0x15e>
 800cc6a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cc6e:	d124      	bne.n	800ccba <_scanf_i+0x142>
 800cc70:	0510      	lsls	r0, r2, #20
 800cc72:	d522      	bpl.n	800ccba <_scanf_i+0x142>
 800cc74:	f10b 0b01 	add.w	fp, fp, #1
 800cc78:	f1b9 0f00 	cmp.w	r9, #0
 800cc7c:	d003      	beq.n	800cc86 <_scanf_i+0x10e>
 800cc7e:	3301      	adds	r3, #1
 800cc80:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800cc84:	60a3      	str	r3, [r4, #8]
 800cc86:	6873      	ldr	r3, [r6, #4]
 800cc88:	3b01      	subs	r3, #1
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	6073      	str	r3, [r6, #4]
 800cc8e:	dd1b      	ble.n	800ccc8 <_scanf_i+0x150>
 800cc90:	6833      	ldr	r3, [r6, #0]
 800cc92:	3301      	adds	r3, #1
 800cc94:	6033      	str	r3, [r6, #0]
 800cc96:	68a3      	ldr	r3, [r4, #8]
 800cc98:	3b01      	subs	r3, #1
 800cc9a:	60a3      	str	r3, [r4, #8]
 800cc9c:	e7d9      	b.n	800cc52 <_scanf_i+0xda>
 800cc9e:	f1bb 0f02 	cmp.w	fp, #2
 800cca2:	d1ae      	bne.n	800cc02 <_scanf_i+0x8a>
 800cca4:	6822      	ldr	r2, [r4, #0]
 800cca6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ccaa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ccae:	d1bf      	bne.n	800cc30 <_scanf_i+0xb8>
 800ccb0:	2310      	movs	r3, #16
 800ccb2:	6063      	str	r3, [r4, #4]
 800ccb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccb8:	e7a2      	b.n	800cc00 <_scanf_i+0x88>
 800ccba:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ccbe:	6022      	str	r2, [r4, #0]
 800ccc0:	780b      	ldrb	r3, [r1, #0]
 800ccc2:	f805 3b01 	strb.w	r3, [r5], #1
 800ccc6:	e7de      	b.n	800cc86 <_scanf_i+0x10e>
 800ccc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cccc:	4631      	mov	r1, r6
 800ccce:	4650      	mov	r0, sl
 800ccd0:	4798      	blx	r3
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d0df      	beq.n	800cc96 <_scanf_i+0x11e>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	05db      	lsls	r3, r3, #23
 800ccda:	d50d      	bpl.n	800ccf8 <_scanf_i+0x180>
 800ccdc:	42bd      	cmp	r5, r7
 800ccde:	d909      	bls.n	800ccf4 <_scanf_i+0x17c>
 800cce0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cce8:	4632      	mov	r2, r6
 800ccea:	4650      	mov	r0, sl
 800ccec:	4798      	blx	r3
 800ccee:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ccf2:	464d      	mov	r5, r9
 800ccf4:	42bd      	cmp	r5, r7
 800ccf6:	d02d      	beq.n	800cd54 <_scanf_i+0x1dc>
 800ccf8:	6822      	ldr	r2, [r4, #0]
 800ccfa:	f012 0210 	ands.w	r2, r2, #16
 800ccfe:	d113      	bne.n	800cd28 <_scanf_i+0x1b0>
 800cd00:	702a      	strb	r2, [r5, #0]
 800cd02:	6863      	ldr	r3, [r4, #4]
 800cd04:	9e01      	ldr	r6, [sp, #4]
 800cd06:	4639      	mov	r1, r7
 800cd08:	4650      	mov	r0, sl
 800cd0a:	47b0      	blx	r6
 800cd0c:	6821      	ldr	r1, [r4, #0]
 800cd0e:	f8d8 3000 	ldr.w	r3, [r8]
 800cd12:	f011 0f20 	tst.w	r1, #32
 800cd16:	d013      	beq.n	800cd40 <_scanf_i+0x1c8>
 800cd18:	1d1a      	adds	r2, r3, #4
 800cd1a:	f8c8 2000 	str.w	r2, [r8]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	6018      	str	r0, [r3, #0]
 800cd22:	68e3      	ldr	r3, [r4, #12]
 800cd24:	3301      	adds	r3, #1
 800cd26:	60e3      	str	r3, [r4, #12]
 800cd28:	1bed      	subs	r5, r5, r7
 800cd2a:	44ab      	add	fp, r5
 800cd2c:	6925      	ldr	r5, [r4, #16]
 800cd2e:	445d      	add	r5, fp
 800cd30:	6125      	str	r5, [r4, #16]
 800cd32:	2000      	movs	r0, #0
 800cd34:	b007      	add	sp, #28
 800cd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd3a:	f04f 0b00 	mov.w	fp, #0
 800cd3e:	e7ca      	b.n	800ccd6 <_scanf_i+0x15e>
 800cd40:	1d1a      	adds	r2, r3, #4
 800cd42:	f8c8 2000 	str.w	r2, [r8]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f011 0f01 	tst.w	r1, #1
 800cd4c:	bf14      	ite	ne
 800cd4e:	8018      	strhne	r0, [r3, #0]
 800cd50:	6018      	streq	r0, [r3, #0]
 800cd52:	e7e6      	b.n	800cd22 <_scanf_i+0x1aa>
 800cd54:	2001      	movs	r0, #1
 800cd56:	e7ed      	b.n	800cd34 <_scanf_i+0x1bc>
 800cd58:	0800d970 	.word	0x0800d970
 800cd5c:	0800d155 	.word	0x0800d155
 800cd60:	08009d9d 	.word	0x08009d9d
 800cd64:	0800e676 	.word	0x0800e676

0800cd68 <_putc_r>:
 800cd68:	b570      	push	{r4, r5, r6, lr}
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	4614      	mov	r4, r2
 800cd6e:	4606      	mov	r6, r0
 800cd70:	b118      	cbz	r0, 800cd7a <_putc_r+0x12>
 800cd72:	6983      	ldr	r3, [r0, #24]
 800cd74:	b90b      	cbnz	r3, 800cd7a <_putc_r+0x12>
 800cd76:	f7fd ffb9 	bl	800acec <__sinit>
 800cd7a:	4b1c      	ldr	r3, [pc, #112]	; (800cdec <_putc_r+0x84>)
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	d124      	bne.n	800cdca <_putc_r+0x62>
 800cd80:	6874      	ldr	r4, [r6, #4]
 800cd82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd84:	07d8      	lsls	r0, r3, #31
 800cd86:	d405      	bmi.n	800cd94 <_putc_r+0x2c>
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	0599      	lsls	r1, r3, #22
 800cd8c:	d402      	bmi.n	800cd94 <_putc_r+0x2c>
 800cd8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd90:	f7fe fbdb 	bl	800b54a <__retarget_lock_acquire_recursive>
 800cd94:	68a3      	ldr	r3, [r4, #8]
 800cd96:	3b01      	subs	r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	60a3      	str	r3, [r4, #8]
 800cd9c:	da05      	bge.n	800cdaa <_putc_r+0x42>
 800cd9e:	69a2      	ldr	r2, [r4, #24]
 800cda0:	4293      	cmp	r3, r2
 800cda2:	db1c      	blt.n	800cdde <_putc_r+0x76>
 800cda4:	b2eb      	uxtb	r3, r5
 800cda6:	2b0a      	cmp	r3, #10
 800cda8:	d019      	beq.n	800cdde <_putc_r+0x76>
 800cdaa:	6823      	ldr	r3, [r4, #0]
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	6022      	str	r2, [r4, #0]
 800cdb0:	701d      	strb	r5, [r3, #0]
 800cdb2:	b2ed      	uxtb	r5, r5
 800cdb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdb6:	07da      	lsls	r2, r3, #31
 800cdb8:	d405      	bmi.n	800cdc6 <_putc_r+0x5e>
 800cdba:	89a3      	ldrh	r3, [r4, #12]
 800cdbc:	059b      	lsls	r3, r3, #22
 800cdbe:	d402      	bmi.n	800cdc6 <_putc_r+0x5e>
 800cdc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdc2:	f7fe fbc3 	bl	800b54c <__retarget_lock_release_recursive>
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	bd70      	pop	{r4, r5, r6, pc}
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <_putc_r+0x88>)
 800cdcc:	429c      	cmp	r4, r3
 800cdce:	d101      	bne.n	800cdd4 <_putc_r+0x6c>
 800cdd0:	68b4      	ldr	r4, [r6, #8]
 800cdd2:	e7d6      	b.n	800cd82 <_putc_r+0x1a>
 800cdd4:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <_putc_r+0x8c>)
 800cdd6:	429c      	cmp	r4, r3
 800cdd8:	bf08      	it	eq
 800cdda:	68f4      	ldreq	r4, [r6, #12]
 800cddc:	e7d1      	b.n	800cd82 <_putc_r+0x1a>
 800cdde:	4629      	mov	r1, r5
 800cde0:	4622      	mov	r2, r4
 800cde2:	4630      	mov	r0, r6
 800cde4:	f000 fa8a 	bl	800d2fc <__swbuf_r>
 800cde8:	4605      	mov	r5, r0
 800cdea:	e7e3      	b.n	800cdb4 <_putc_r+0x4c>
 800cdec:	0800e434 	.word	0x0800e434
 800cdf0:	0800e454 	.word	0x0800e454
 800cdf4:	0800e414 	.word	0x0800e414

0800cdf8 <lflush>:
 800cdf8:	8983      	ldrh	r3, [r0, #12]
 800cdfa:	f003 0309 	and.w	r3, r3, #9
 800cdfe:	2b09      	cmp	r3, #9
 800ce00:	d101      	bne.n	800ce06 <lflush+0xe>
 800ce02:	f7fd bf09 	b.w	800ac18 <fflush>
 800ce06:	2000      	movs	r0, #0
 800ce08:	4770      	bx	lr
	...

0800ce0c <__srefill_r>:
 800ce0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0e:	460c      	mov	r4, r1
 800ce10:	4605      	mov	r5, r0
 800ce12:	b118      	cbz	r0, 800ce1c <__srefill_r+0x10>
 800ce14:	6983      	ldr	r3, [r0, #24]
 800ce16:	b90b      	cbnz	r3, 800ce1c <__srefill_r+0x10>
 800ce18:	f7fd ff68 	bl	800acec <__sinit>
 800ce1c:	4b3b      	ldr	r3, [pc, #236]	; (800cf0c <__srefill_r+0x100>)
 800ce1e:	429c      	cmp	r4, r3
 800ce20:	d10a      	bne.n	800ce38 <__srefill_r+0x2c>
 800ce22:	686c      	ldr	r4, [r5, #4]
 800ce24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce28:	2300      	movs	r3, #0
 800ce2a:	6063      	str	r3, [r4, #4]
 800ce2c:	89a3      	ldrh	r3, [r4, #12]
 800ce2e:	069e      	lsls	r6, r3, #26
 800ce30:	d50c      	bpl.n	800ce4c <__srefill_r+0x40>
 800ce32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce36:	e066      	b.n	800cf06 <__srefill_r+0xfa>
 800ce38:	4b35      	ldr	r3, [pc, #212]	; (800cf10 <__srefill_r+0x104>)
 800ce3a:	429c      	cmp	r4, r3
 800ce3c:	d101      	bne.n	800ce42 <__srefill_r+0x36>
 800ce3e:	68ac      	ldr	r4, [r5, #8]
 800ce40:	e7f0      	b.n	800ce24 <__srefill_r+0x18>
 800ce42:	4b34      	ldr	r3, [pc, #208]	; (800cf14 <__srefill_r+0x108>)
 800ce44:	429c      	cmp	r4, r3
 800ce46:	bf08      	it	eq
 800ce48:	68ec      	ldreq	r4, [r5, #12]
 800ce4a:	e7eb      	b.n	800ce24 <__srefill_r+0x18>
 800ce4c:	0758      	lsls	r0, r3, #29
 800ce4e:	d448      	bmi.n	800cee2 <__srefill_r+0xd6>
 800ce50:	06d9      	lsls	r1, r3, #27
 800ce52:	d405      	bmi.n	800ce60 <__srefill_r+0x54>
 800ce54:	2309      	movs	r3, #9
 800ce56:	602b      	str	r3, [r5, #0]
 800ce58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce5c:	81a3      	strh	r3, [r4, #12]
 800ce5e:	e7e8      	b.n	800ce32 <__srefill_r+0x26>
 800ce60:	071a      	lsls	r2, r3, #28
 800ce62:	d50b      	bpl.n	800ce7c <__srefill_r+0x70>
 800ce64:	4621      	mov	r1, r4
 800ce66:	4628      	mov	r0, r5
 800ce68:	f7fd fe9a 	bl	800aba0 <_fflush_r>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d1e0      	bne.n	800ce32 <__srefill_r+0x26>
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	60a0      	str	r0, [r4, #8]
 800ce74:	f023 0308 	bic.w	r3, r3, #8
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	61a0      	str	r0, [r4, #24]
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f043 0304 	orr.w	r3, r3, #4
 800ce82:	81a3      	strh	r3, [r4, #12]
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	b91b      	cbnz	r3, 800ce90 <__srefill_r+0x84>
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	f7fe fb84 	bl	800b598 <__smakebuf_r>
 800ce90:	89a6      	ldrh	r6, [r4, #12]
 800ce92:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800ce96:	07b3      	lsls	r3, r6, #30
 800ce98:	d00f      	beq.n	800ceba <__srefill_r+0xae>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	81a3      	strh	r3, [r4, #12]
 800ce9e:	4b1e      	ldr	r3, [pc, #120]	; (800cf18 <__srefill_r+0x10c>)
 800cea0:	491e      	ldr	r1, [pc, #120]	; (800cf1c <__srefill_r+0x110>)
 800cea2:	6818      	ldr	r0, [r3, #0]
 800cea4:	f006 0609 	and.w	r6, r6, #9
 800cea8:	f7fd ff9e 	bl	800ade8 <_fwalk>
 800ceac:	2e09      	cmp	r6, #9
 800ceae:	81a7      	strh	r7, [r4, #12]
 800ceb0:	d103      	bne.n	800ceba <__srefill_r+0xae>
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f7fd fded 	bl	800aa94 <__sflush_r>
 800ceba:	6922      	ldr	r2, [r4, #16]
 800cebc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cebe:	6963      	ldr	r3, [r4, #20]
 800cec0:	6a21      	ldr	r1, [r4, #32]
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	4628      	mov	r0, r5
 800cec6:	47b0      	blx	r6
 800cec8:	2800      	cmp	r0, #0
 800ceca:	6060      	str	r0, [r4, #4]
 800cecc:	dc1c      	bgt.n	800cf08 <__srefill_r+0xfc>
 800cece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ced2:	bf17      	itett	ne
 800ced4:	2200      	movne	r2, #0
 800ced6:	f043 0320 	orreq.w	r3, r3, #32
 800ceda:	6062      	strne	r2, [r4, #4]
 800cedc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800cee0:	e7bc      	b.n	800ce5c <__srefill_r+0x50>
 800cee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cee4:	2900      	cmp	r1, #0
 800cee6:	d0cd      	beq.n	800ce84 <__srefill_r+0x78>
 800cee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ceec:	4299      	cmp	r1, r3
 800ceee:	d002      	beq.n	800cef6 <__srefill_r+0xea>
 800cef0:	4628      	mov	r0, r5
 800cef2:	f7ff f883 	bl	800bffc <_free_r>
 800cef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cef8:	6063      	str	r3, [r4, #4]
 800cefa:	2000      	movs	r0, #0
 800cefc:	6360      	str	r0, [r4, #52]	; 0x34
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d0c0      	beq.n	800ce84 <__srefill_r+0x78>
 800cf02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf08:	2000      	movs	r0, #0
 800cf0a:	e7fc      	b.n	800cf06 <__srefill_r+0xfa>
 800cf0c:	0800e434 	.word	0x0800e434
 800cf10:	0800e454 	.word	0x0800e454
 800cf14:	0800e414 	.word	0x0800e414
 800cf18:	0800e1f0 	.word	0x0800e1f0
 800cf1c:	0800cdf9 	.word	0x0800cdf9

0800cf20 <nan>:
 800cf20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf28 <nan+0x8>
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	00000000 	.word	0x00000000
 800cf2c:	7ff80000 	.word	0x7ff80000

0800cf30 <_sbrk_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4d06      	ldr	r5, [pc, #24]	; (800cf4c <_sbrk_r+0x1c>)
 800cf34:	2300      	movs	r3, #0
 800cf36:	4604      	mov	r4, r0
 800cf38:	4608      	mov	r0, r1
 800cf3a:	602b      	str	r3, [r5, #0]
 800cf3c:	f7fa ffde 	bl	8007efc <_sbrk>
 800cf40:	1c43      	adds	r3, r0, #1
 800cf42:	d102      	bne.n	800cf4a <_sbrk_r+0x1a>
 800cf44:	682b      	ldr	r3, [r5, #0]
 800cf46:	b103      	cbz	r3, 800cf4a <_sbrk_r+0x1a>
 800cf48:	6023      	str	r3, [r4, #0]
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	200004b0 	.word	0x200004b0

0800cf50 <__sccl>:
 800cf50:	b570      	push	{r4, r5, r6, lr}
 800cf52:	780b      	ldrb	r3, [r1, #0]
 800cf54:	4604      	mov	r4, r0
 800cf56:	2b5e      	cmp	r3, #94	; 0x5e
 800cf58:	bf0b      	itete	eq
 800cf5a:	784b      	ldrbeq	r3, [r1, #1]
 800cf5c:	1c48      	addne	r0, r1, #1
 800cf5e:	1c88      	addeq	r0, r1, #2
 800cf60:	2200      	movne	r2, #0
 800cf62:	bf08      	it	eq
 800cf64:	2201      	moveq	r2, #1
 800cf66:	1e61      	subs	r1, r4, #1
 800cf68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cf6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800cf70:	42a9      	cmp	r1, r5
 800cf72:	d1fb      	bne.n	800cf6c <__sccl+0x1c>
 800cf74:	b90b      	cbnz	r3, 800cf7a <__sccl+0x2a>
 800cf76:	3801      	subs	r0, #1
 800cf78:	bd70      	pop	{r4, r5, r6, pc}
 800cf7a:	f082 0201 	eor.w	r2, r2, #1
 800cf7e:	54e2      	strb	r2, [r4, r3]
 800cf80:	4605      	mov	r5, r0
 800cf82:	4628      	mov	r0, r5
 800cf84:	f810 1b01 	ldrb.w	r1, [r0], #1
 800cf88:	292d      	cmp	r1, #45	; 0x2d
 800cf8a:	d006      	beq.n	800cf9a <__sccl+0x4a>
 800cf8c:	295d      	cmp	r1, #93	; 0x5d
 800cf8e:	d0f3      	beq.n	800cf78 <__sccl+0x28>
 800cf90:	b909      	cbnz	r1, 800cf96 <__sccl+0x46>
 800cf92:	4628      	mov	r0, r5
 800cf94:	e7f0      	b.n	800cf78 <__sccl+0x28>
 800cf96:	460b      	mov	r3, r1
 800cf98:	e7f1      	b.n	800cf7e <__sccl+0x2e>
 800cf9a:	786e      	ldrb	r6, [r5, #1]
 800cf9c:	2e5d      	cmp	r6, #93	; 0x5d
 800cf9e:	d0fa      	beq.n	800cf96 <__sccl+0x46>
 800cfa0:	42b3      	cmp	r3, r6
 800cfa2:	dcf8      	bgt.n	800cf96 <__sccl+0x46>
 800cfa4:	3502      	adds	r5, #2
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	3101      	adds	r1, #1
 800cfaa:	428e      	cmp	r6, r1
 800cfac:	5462      	strb	r2, [r4, r1]
 800cfae:	dcfb      	bgt.n	800cfa8 <__sccl+0x58>
 800cfb0:	1af1      	subs	r1, r6, r3
 800cfb2:	3901      	subs	r1, #1
 800cfb4:	1c58      	adds	r0, r3, #1
 800cfb6:	42b3      	cmp	r3, r6
 800cfb8:	bfa8      	it	ge
 800cfba:	2100      	movge	r1, #0
 800cfbc:	1843      	adds	r3, r0, r1
 800cfbe:	e7e0      	b.n	800cf82 <__sccl+0x32>

0800cfc0 <__sread>:
 800cfc0:	b510      	push	{r4, lr}
 800cfc2:	460c      	mov	r4, r1
 800cfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfc8:	f000 fb42 	bl	800d650 <_read_r>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	bfab      	itete	ge
 800cfd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfd2:	89a3      	ldrhlt	r3, [r4, #12]
 800cfd4:	181b      	addge	r3, r3, r0
 800cfd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfda:	bfac      	ite	ge
 800cfdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfde:	81a3      	strhlt	r3, [r4, #12]
 800cfe0:	bd10      	pop	{r4, pc}

0800cfe2 <__swrite>:
 800cfe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe6:	461f      	mov	r7, r3
 800cfe8:	898b      	ldrh	r3, [r1, #12]
 800cfea:	05db      	lsls	r3, r3, #23
 800cfec:	4605      	mov	r5, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	4616      	mov	r6, r2
 800cff2:	d505      	bpl.n	800d000 <__swrite+0x1e>
 800cff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff8:	2302      	movs	r3, #2
 800cffa:	2200      	movs	r2, #0
 800cffc:	f000 fac0 	bl	800d580 <_lseek_r>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	4632      	mov	r2, r6
 800d00e:	463b      	mov	r3, r7
 800d010:	4628      	mov	r0, r5
 800d012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d016:	f000 b9d1 	b.w	800d3bc <_write_r>

0800d01a <__sseek>:
 800d01a:	b510      	push	{r4, lr}
 800d01c:	460c      	mov	r4, r1
 800d01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d022:	f000 faad 	bl	800d580 <_lseek_r>
 800d026:	1c43      	adds	r3, r0, #1
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	bf15      	itete	ne
 800d02c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d02e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d036:	81a3      	strheq	r3, [r4, #12]
 800d038:	bf18      	it	ne
 800d03a:	81a3      	strhne	r3, [r4, #12]
 800d03c:	bd10      	pop	{r4, pc}

0800d03e <__sclose>:
 800d03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d042:	f000 ba59 	b.w	800d4f8 <_close_r>

0800d046 <strncmp>:
 800d046:	b510      	push	{r4, lr}
 800d048:	b17a      	cbz	r2, 800d06a <strncmp+0x24>
 800d04a:	4603      	mov	r3, r0
 800d04c:	3901      	subs	r1, #1
 800d04e:	1884      	adds	r4, r0, r2
 800d050:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d054:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d058:	4290      	cmp	r0, r2
 800d05a:	d101      	bne.n	800d060 <strncmp+0x1a>
 800d05c:	42a3      	cmp	r3, r4
 800d05e:	d101      	bne.n	800d064 <strncmp+0x1e>
 800d060:	1a80      	subs	r0, r0, r2
 800d062:	bd10      	pop	{r4, pc}
 800d064:	2800      	cmp	r0, #0
 800d066:	d1f3      	bne.n	800d050 <strncmp+0xa>
 800d068:	e7fa      	b.n	800d060 <strncmp+0x1a>
 800d06a:	4610      	mov	r0, r2
 800d06c:	e7f9      	b.n	800d062 <strncmp+0x1c>
	...

0800d070 <_strtoul_l.constprop.0>:
 800d070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d074:	4f36      	ldr	r7, [pc, #216]	; (800d150 <_strtoul_l.constprop.0+0xe0>)
 800d076:	4686      	mov	lr, r0
 800d078:	460d      	mov	r5, r1
 800d07a:	4628      	mov	r0, r5
 800d07c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d080:	5de6      	ldrb	r6, [r4, r7]
 800d082:	f016 0608 	ands.w	r6, r6, #8
 800d086:	d1f8      	bne.n	800d07a <_strtoul_l.constprop.0+0xa>
 800d088:	2c2d      	cmp	r4, #45	; 0x2d
 800d08a:	d12f      	bne.n	800d0ec <_strtoul_l.constprop.0+0x7c>
 800d08c:	782c      	ldrb	r4, [r5, #0]
 800d08e:	2601      	movs	r6, #1
 800d090:	1c85      	adds	r5, r0, #2
 800d092:	2b00      	cmp	r3, #0
 800d094:	d057      	beq.n	800d146 <_strtoul_l.constprop.0+0xd6>
 800d096:	2b10      	cmp	r3, #16
 800d098:	d109      	bne.n	800d0ae <_strtoul_l.constprop.0+0x3e>
 800d09a:	2c30      	cmp	r4, #48	; 0x30
 800d09c:	d107      	bne.n	800d0ae <_strtoul_l.constprop.0+0x3e>
 800d09e:	7828      	ldrb	r0, [r5, #0]
 800d0a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d0a4:	2858      	cmp	r0, #88	; 0x58
 800d0a6:	d149      	bne.n	800d13c <_strtoul_l.constprop.0+0xcc>
 800d0a8:	786c      	ldrb	r4, [r5, #1]
 800d0aa:	2310      	movs	r3, #16
 800d0ac:	3502      	adds	r5, #2
 800d0ae:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800d0b2:	2700      	movs	r7, #0
 800d0b4:	fbb8 f8f3 	udiv	r8, r8, r3
 800d0b8:	fb03 f908 	mul.w	r9, r3, r8
 800d0bc:	ea6f 0909 	mvn.w	r9, r9
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d0c6:	f1bc 0f09 	cmp.w	ip, #9
 800d0ca:	d814      	bhi.n	800d0f6 <_strtoul_l.constprop.0+0x86>
 800d0cc:	4664      	mov	r4, ip
 800d0ce:	42a3      	cmp	r3, r4
 800d0d0:	dd22      	ble.n	800d118 <_strtoul_l.constprop.0+0xa8>
 800d0d2:	2f00      	cmp	r7, #0
 800d0d4:	db1d      	blt.n	800d112 <_strtoul_l.constprop.0+0xa2>
 800d0d6:	4580      	cmp	r8, r0
 800d0d8:	d31b      	bcc.n	800d112 <_strtoul_l.constprop.0+0xa2>
 800d0da:	d101      	bne.n	800d0e0 <_strtoul_l.constprop.0+0x70>
 800d0dc:	45a1      	cmp	r9, r4
 800d0de:	db18      	blt.n	800d112 <_strtoul_l.constprop.0+0xa2>
 800d0e0:	fb00 4003 	mla	r0, r0, r3, r4
 800d0e4:	2701      	movs	r7, #1
 800d0e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0ea:	e7ea      	b.n	800d0c2 <_strtoul_l.constprop.0+0x52>
 800d0ec:	2c2b      	cmp	r4, #43	; 0x2b
 800d0ee:	bf04      	itt	eq
 800d0f0:	782c      	ldrbeq	r4, [r5, #0]
 800d0f2:	1c85      	addeq	r5, r0, #2
 800d0f4:	e7cd      	b.n	800d092 <_strtoul_l.constprop.0+0x22>
 800d0f6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d0fa:	f1bc 0f19 	cmp.w	ip, #25
 800d0fe:	d801      	bhi.n	800d104 <_strtoul_l.constprop.0+0x94>
 800d100:	3c37      	subs	r4, #55	; 0x37
 800d102:	e7e4      	b.n	800d0ce <_strtoul_l.constprop.0+0x5e>
 800d104:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d108:	f1bc 0f19 	cmp.w	ip, #25
 800d10c:	d804      	bhi.n	800d118 <_strtoul_l.constprop.0+0xa8>
 800d10e:	3c57      	subs	r4, #87	; 0x57
 800d110:	e7dd      	b.n	800d0ce <_strtoul_l.constprop.0+0x5e>
 800d112:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d116:	e7e6      	b.n	800d0e6 <_strtoul_l.constprop.0+0x76>
 800d118:	2f00      	cmp	r7, #0
 800d11a:	da07      	bge.n	800d12c <_strtoul_l.constprop.0+0xbc>
 800d11c:	2322      	movs	r3, #34	; 0x22
 800d11e:	f8ce 3000 	str.w	r3, [lr]
 800d122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d126:	b932      	cbnz	r2, 800d136 <_strtoul_l.constprop.0+0xc6>
 800d128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d12c:	b106      	cbz	r6, 800d130 <_strtoul_l.constprop.0+0xc0>
 800d12e:	4240      	negs	r0, r0
 800d130:	2a00      	cmp	r2, #0
 800d132:	d0f9      	beq.n	800d128 <_strtoul_l.constprop.0+0xb8>
 800d134:	b107      	cbz	r7, 800d138 <_strtoul_l.constprop.0+0xc8>
 800d136:	1e69      	subs	r1, r5, #1
 800d138:	6011      	str	r1, [r2, #0]
 800d13a:	e7f5      	b.n	800d128 <_strtoul_l.constprop.0+0xb8>
 800d13c:	2430      	movs	r4, #48	; 0x30
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1b5      	bne.n	800d0ae <_strtoul_l.constprop.0+0x3e>
 800d142:	2308      	movs	r3, #8
 800d144:	e7b3      	b.n	800d0ae <_strtoul_l.constprop.0+0x3e>
 800d146:	2c30      	cmp	r4, #48	; 0x30
 800d148:	d0a9      	beq.n	800d09e <_strtoul_l.constprop.0+0x2e>
 800d14a:	230a      	movs	r3, #10
 800d14c:	e7af      	b.n	800d0ae <_strtoul_l.constprop.0+0x3e>
 800d14e:	bf00      	nop
 800d150:	0800e281 	.word	0x0800e281

0800d154 <_strtoul_r>:
 800d154:	f7ff bf8c 	b.w	800d070 <_strtoul_l.constprop.0>

0800d158 <__submore>:
 800d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15c:	460c      	mov	r4, r1
 800d15e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d164:	4299      	cmp	r1, r3
 800d166:	d11d      	bne.n	800d1a4 <__submore+0x4c>
 800d168:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d16c:	f7fe ffb2 	bl	800c0d4 <_malloc_r>
 800d170:	b918      	cbnz	r0, 800d17a <__submore+0x22>
 800d172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d17a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d17e:	63a3      	str	r3, [r4, #56]	; 0x38
 800d180:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d184:	6360      	str	r0, [r4, #52]	; 0x34
 800d186:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d18a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d18e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d192:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d196:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d19a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d19e:	6020      	str	r0, [r4, #0]
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	e7e8      	b.n	800d176 <__submore+0x1e>
 800d1a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d1a6:	0077      	lsls	r7, r6, #1
 800d1a8:	463a      	mov	r2, r7
 800d1aa:	f000 fa21 	bl	800d5f0 <_realloc_r>
 800d1ae:	4605      	mov	r5, r0
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0de      	beq.n	800d172 <__submore+0x1a>
 800d1b4:	eb00 0806 	add.w	r8, r0, r6
 800d1b8:	4601      	mov	r1, r0
 800d1ba:	4632      	mov	r2, r6
 800d1bc:	4640      	mov	r0, r8
 800d1be:	f7fa ff7f 	bl	80080c0 <memcpy>
 800d1c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d1c6:	f8c4 8000 	str.w	r8, [r4]
 800d1ca:	e7e9      	b.n	800d1a0 <__submore+0x48>

0800d1cc <_ungetc_r>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	4614      	mov	r4, r2
 800d1d0:	1c4a      	adds	r2, r1, #1
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	460d      	mov	r5, r1
 800d1d6:	d103      	bne.n	800d1e0 <_ungetc_r+0x14>
 800d1d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d1dc:	4628      	mov	r0, r5
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	b118      	cbz	r0, 800d1ea <_ungetc_r+0x1e>
 800d1e2:	6983      	ldr	r3, [r0, #24]
 800d1e4:	b90b      	cbnz	r3, 800d1ea <_ungetc_r+0x1e>
 800d1e6:	f7fd fd81 	bl	800acec <__sinit>
 800d1ea:	4b41      	ldr	r3, [pc, #260]	; (800d2f0 <_ungetc_r+0x124>)
 800d1ec:	429c      	cmp	r4, r3
 800d1ee:	d11d      	bne.n	800d22c <_ungetc_r+0x60>
 800d1f0:	6874      	ldr	r4, [r6, #4]
 800d1f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1f4:	07db      	lsls	r3, r3, #31
 800d1f6:	d405      	bmi.n	800d204 <_ungetc_r+0x38>
 800d1f8:	89a3      	ldrh	r3, [r4, #12]
 800d1fa:	0598      	lsls	r0, r3, #22
 800d1fc:	d402      	bmi.n	800d204 <_ungetc_r+0x38>
 800d1fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d200:	f7fe f9a3 	bl	800b54a <__retarget_lock_acquire_recursive>
 800d204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d208:	f023 0320 	bic.w	r3, r3, #32
 800d20c:	0759      	lsls	r1, r3, #29
 800d20e:	81a3      	strh	r3, [r4, #12]
 800d210:	b29a      	uxth	r2, r3
 800d212:	d42d      	bmi.n	800d270 <_ungetc_r+0xa4>
 800d214:	06d3      	lsls	r3, r2, #27
 800d216:	d413      	bmi.n	800d240 <_ungetc_r+0x74>
 800d218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d21a:	07dd      	lsls	r5, r3, #31
 800d21c:	d4dc      	bmi.n	800d1d8 <_ungetc_r+0xc>
 800d21e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800d222:	d1d9      	bne.n	800d1d8 <_ungetc_r+0xc>
 800d224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d226:	f7fe f991 	bl	800b54c <__retarget_lock_release_recursive>
 800d22a:	e7d5      	b.n	800d1d8 <_ungetc_r+0xc>
 800d22c:	4b31      	ldr	r3, [pc, #196]	; (800d2f4 <_ungetc_r+0x128>)
 800d22e:	429c      	cmp	r4, r3
 800d230:	d101      	bne.n	800d236 <_ungetc_r+0x6a>
 800d232:	68b4      	ldr	r4, [r6, #8]
 800d234:	e7dd      	b.n	800d1f2 <_ungetc_r+0x26>
 800d236:	4b30      	ldr	r3, [pc, #192]	; (800d2f8 <_ungetc_r+0x12c>)
 800d238:	429c      	cmp	r4, r3
 800d23a:	bf08      	it	eq
 800d23c:	68f4      	ldreq	r4, [r6, #12]
 800d23e:	e7d8      	b.n	800d1f2 <_ungetc_r+0x26>
 800d240:	0710      	lsls	r0, r2, #28
 800d242:	d511      	bpl.n	800d268 <_ungetc_r+0x9c>
 800d244:	4621      	mov	r1, r4
 800d246:	4630      	mov	r0, r6
 800d248:	f7fd fcaa 	bl	800aba0 <_fflush_r>
 800d24c:	b130      	cbz	r0, 800d25c <_ungetc_r+0x90>
 800d24e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d250:	07d9      	lsls	r1, r3, #31
 800d252:	d4c1      	bmi.n	800d1d8 <_ungetc_r+0xc>
 800d254:	89a3      	ldrh	r3, [r4, #12]
 800d256:	f413 7f00 	tst.w	r3, #512	; 0x200
 800d25a:	e7e2      	b.n	800d222 <_ungetc_r+0x56>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	60a0      	str	r0, [r4, #8]
 800d260:	f023 0308 	bic.w	r3, r3, #8
 800d264:	81a3      	strh	r3, [r4, #12]
 800d266:	61a0      	str	r0, [r4, #24]
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f043 0304 	orr.w	r3, r3, #4
 800d26e:	81a3      	strh	r3, [r4, #12]
 800d270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d272:	6862      	ldr	r2, [r4, #4]
 800d274:	b2ed      	uxtb	r5, r5
 800d276:	b1d3      	cbz	r3, 800d2ae <_ungetc_r+0xe2>
 800d278:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d27a:	4293      	cmp	r3, r2
 800d27c:	dc05      	bgt.n	800d28a <_ungetc_r+0xbe>
 800d27e:	4621      	mov	r1, r4
 800d280:	4630      	mov	r0, r6
 800d282:	f7ff ff69 	bl	800d158 <__submore>
 800d286:	2800      	cmp	r0, #0
 800d288:	d1e1      	bne.n	800d24e <_ungetc_r+0x82>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	1e5a      	subs	r2, r3, #1
 800d28e:	6022      	str	r2, [r4, #0]
 800d290:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d294:	6863      	ldr	r3, [r4, #4]
 800d296:	3301      	adds	r3, #1
 800d298:	6063      	str	r3, [r4, #4]
 800d29a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d29c:	07da      	lsls	r2, r3, #31
 800d29e:	d49d      	bmi.n	800d1dc <_ungetc_r+0x10>
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	059b      	lsls	r3, r3, #22
 800d2a4:	d49a      	bmi.n	800d1dc <_ungetc_r+0x10>
 800d2a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2a8:	f7fe f950 	bl	800b54c <__retarget_lock_release_recursive>
 800d2ac:	e796      	b.n	800d1dc <_ungetc_r+0x10>
 800d2ae:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d2b0:	6920      	ldr	r0, [r4, #16]
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	f001 0101 	and.w	r1, r1, #1
 800d2b8:	b160      	cbz	r0, 800d2d4 <_ungetc_r+0x108>
 800d2ba:	4298      	cmp	r0, r3
 800d2bc:	d20a      	bcs.n	800d2d4 <_ungetc_r+0x108>
 800d2be:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800d2c2:	42a8      	cmp	r0, r5
 800d2c4:	d106      	bne.n	800d2d4 <_ungetc_r+0x108>
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	3201      	adds	r2, #1
 800d2ca:	6023      	str	r3, [r4, #0]
 800d2cc:	6062      	str	r2, [r4, #4]
 800d2ce:	2900      	cmp	r1, #0
 800d2d0:	d184      	bne.n	800d1dc <_ungetc_r+0x10>
 800d2d2:	e7e5      	b.n	800d2a0 <_ungetc_r+0xd4>
 800d2d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2dc:	6363      	str	r3, [r4, #52]	; 0x34
 800d2de:	2303      	movs	r3, #3
 800d2e0:	63a3      	str	r3, [r4, #56]	; 0x38
 800d2e2:	4623      	mov	r3, r4
 800d2e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	6063      	str	r3, [r4, #4]
 800d2ee:	e7ee      	b.n	800d2ce <_ungetc_r+0x102>
 800d2f0:	0800e434 	.word	0x0800e434
 800d2f4:	0800e454 	.word	0x0800e454
 800d2f8:	0800e414 	.word	0x0800e414

0800d2fc <__swbuf_r>:
 800d2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2fe:	460e      	mov	r6, r1
 800d300:	4614      	mov	r4, r2
 800d302:	4605      	mov	r5, r0
 800d304:	b118      	cbz	r0, 800d30e <__swbuf_r+0x12>
 800d306:	6983      	ldr	r3, [r0, #24]
 800d308:	b90b      	cbnz	r3, 800d30e <__swbuf_r+0x12>
 800d30a:	f7fd fcef 	bl	800acec <__sinit>
 800d30e:	4b21      	ldr	r3, [pc, #132]	; (800d394 <__swbuf_r+0x98>)
 800d310:	429c      	cmp	r4, r3
 800d312:	d12b      	bne.n	800d36c <__swbuf_r+0x70>
 800d314:	686c      	ldr	r4, [r5, #4]
 800d316:	69a3      	ldr	r3, [r4, #24]
 800d318:	60a3      	str	r3, [r4, #8]
 800d31a:	89a3      	ldrh	r3, [r4, #12]
 800d31c:	071a      	lsls	r2, r3, #28
 800d31e:	d52f      	bpl.n	800d380 <__swbuf_r+0x84>
 800d320:	6923      	ldr	r3, [r4, #16]
 800d322:	b36b      	cbz	r3, 800d380 <__swbuf_r+0x84>
 800d324:	6923      	ldr	r3, [r4, #16]
 800d326:	6820      	ldr	r0, [r4, #0]
 800d328:	1ac0      	subs	r0, r0, r3
 800d32a:	6963      	ldr	r3, [r4, #20]
 800d32c:	b2f6      	uxtb	r6, r6
 800d32e:	4283      	cmp	r3, r0
 800d330:	4637      	mov	r7, r6
 800d332:	dc04      	bgt.n	800d33e <__swbuf_r+0x42>
 800d334:	4621      	mov	r1, r4
 800d336:	4628      	mov	r0, r5
 800d338:	f7fd fc32 	bl	800aba0 <_fflush_r>
 800d33c:	bb30      	cbnz	r0, 800d38c <__swbuf_r+0x90>
 800d33e:	68a3      	ldr	r3, [r4, #8]
 800d340:	3b01      	subs	r3, #1
 800d342:	60a3      	str	r3, [r4, #8]
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	1c5a      	adds	r2, r3, #1
 800d348:	6022      	str	r2, [r4, #0]
 800d34a:	701e      	strb	r6, [r3, #0]
 800d34c:	6963      	ldr	r3, [r4, #20]
 800d34e:	3001      	adds	r0, #1
 800d350:	4283      	cmp	r3, r0
 800d352:	d004      	beq.n	800d35e <__swbuf_r+0x62>
 800d354:	89a3      	ldrh	r3, [r4, #12]
 800d356:	07db      	lsls	r3, r3, #31
 800d358:	d506      	bpl.n	800d368 <__swbuf_r+0x6c>
 800d35a:	2e0a      	cmp	r6, #10
 800d35c:	d104      	bne.n	800d368 <__swbuf_r+0x6c>
 800d35e:	4621      	mov	r1, r4
 800d360:	4628      	mov	r0, r5
 800d362:	f7fd fc1d 	bl	800aba0 <_fflush_r>
 800d366:	b988      	cbnz	r0, 800d38c <__swbuf_r+0x90>
 800d368:	4638      	mov	r0, r7
 800d36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d36c:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <__swbuf_r+0x9c>)
 800d36e:	429c      	cmp	r4, r3
 800d370:	d101      	bne.n	800d376 <__swbuf_r+0x7a>
 800d372:	68ac      	ldr	r4, [r5, #8]
 800d374:	e7cf      	b.n	800d316 <__swbuf_r+0x1a>
 800d376:	4b09      	ldr	r3, [pc, #36]	; (800d39c <__swbuf_r+0xa0>)
 800d378:	429c      	cmp	r4, r3
 800d37a:	bf08      	it	eq
 800d37c:	68ec      	ldreq	r4, [r5, #12]
 800d37e:	e7ca      	b.n	800d316 <__swbuf_r+0x1a>
 800d380:	4621      	mov	r1, r4
 800d382:	4628      	mov	r0, r5
 800d384:	f000 f82c 	bl	800d3e0 <__swsetup_r>
 800d388:	2800      	cmp	r0, #0
 800d38a:	d0cb      	beq.n	800d324 <__swbuf_r+0x28>
 800d38c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d390:	e7ea      	b.n	800d368 <__swbuf_r+0x6c>
 800d392:	bf00      	nop
 800d394:	0800e434 	.word	0x0800e434
 800d398:	0800e454 	.word	0x0800e454
 800d39c:	0800e414 	.word	0x0800e414

0800d3a0 <__ascii_wctomb>:
 800d3a0:	b149      	cbz	r1, 800d3b6 <__ascii_wctomb+0x16>
 800d3a2:	2aff      	cmp	r2, #255	; 0xff
 800d3a4:	bf85      	ittet	hi
 800d3a6:	238a      	movhi	r3, #138	; 0x8a
 800d3a8:	6003      	strhi	r3, [r0, #0]
 800d3aa:	700a      	strbls	r2, [r1, #0]
 800d3ac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d3b0:	bf98      	it	ls
 800d3b2:	2001      	movls	r0, #1
 800d3b4:	4770      	bx	lr
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	4770      	bx	lr
	...

0800d3bc <_write_r>:
 800d3bc:	b538      	push	{r3, r4, r5, lr}
 800d3be:	4d07      	ldr	r5, [pc, #28]	; (800d3dc <_write_r+0x20>)
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	4608      	mov	r0, r1
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	602a      	str	r2, [r5, #0]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	f7fa fd45 	bl	8007e5a <_write>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d102      	bne.n	800d3da <_write_r+0x1e>
 800d3d4:	682b      	ldr	r3, [r5, #0]
 800d3d6:	b103      	cbz	r3, 800d3da <_write_r+0x1e>
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	200004b0 	.word	0x200004b0

0800d3e0 <__swsetup_r>:
 800d3e0:	4b32      	ldr	r3, [pc, #200]	; (800d4ac <__swsetup_r+0xcc>)
 800d3e2:	b570      	push	{r4, r5, r6, lr}
 800d3e4:	681d      	ldr	r5, [r3, #0]
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460c      	mov	r4, r1
 800d3ea:	b125      	cbz	r5, 800d3f6 <__swsetup_r+0x16>
 800d3ec:	69ab      	ldr	r3, [r5, #24]
 800d3ee:	b913      	cbnz	r3, 800d3f6 <__swsetup_r+0x16>
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f7fd fc7b 	bl	800acec <__sinit>
 800d3f6:	4b2e      	ldr	r3, [pc, #184]	; (800d4b0 <__swsetup_r+0xd0>)
 800d3f8:	429c      	cmp	r4, r3
 800d3fa:	d10f      	bne.n	800d41c <__swsetup_r+0x3c>
 800d3fc:	686c      	ldr	r4, [r5, #4]
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d404:	0719      	lsls	r1, r3, #28
 800d406:	d42c      	bmi.n	800d462 <__swsetup_r+0x82>
 800d408:	06dd      	lsls	r5, r3, #27
 800d40a:	d411      	bmi.n	800d430 <__swsetup_r+0x50>
 800d40c:	2309      	movs	r3, #9
 800d40e:	6033      	str	r3, [r6, #0]
 800d410:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d414:	81a3      	strh	r3, [r4, #12]
 800d416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d41a:	e03e      	b.n	800d49a <__swsetup_r+0xba>
 800d41c:	4b25      	ldr	r3, [pc, #148]	; (800d4b4 <__swsetup_r+0xd4>)
 800d41e:	429c      	cmp	r4, r3
 800d420:	d101      	bne.n	800d426 <__swsetup_r+0x46>
 800d422:	68ac      	ldr	r4, [r5, #8]
 800d424:	e7eb      	b.n	800d3fe <__swsetup_r+0x1e>
 800d426:	4b24      	ldr	r3, [pc, #144]	; (800d4b8 <__swsetup_r+0xd8>)
 800d428:	429c      	cmp	r4, r3
 800d42a:	bf08      	it	eq
 800d42c:	68ec      	ldreq	r4, [r5, #12]
 800d42e:	e7e6      	b.n	800d3fe <__swsetup_r+0x1e>
 800d430:	0758      	lsls	r0, r3, #29
 800d432:	d512      	bpl.n	800d45a <__swsetup_r+0x7a>
 800d434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d436:	b141      	cbz	r1, 800d44a <__swsetup_r+0x6a>
 800d438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43c:	4299      	cmp	r1, r3
 800d43e:	d002      	beq.n	800d446 <__swsetup_r+0x66>
 800d440:	4630      	mov	r0, r6
 800d442:	f7fe fddb 	bl	800bffc <_free_r>
 800d446:	2300      	movs	r3, #0
 800d448:	6363      	str	r3, [r4, #52]	; 0x34
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d450:	81a3      	strh	r3, [r4, #12]
 800d452:	2300      	movs	r3, #0
 800d454:	6063      	str	r3, [r4, #4]
 800d456:	6923      	ldr	r3, [r4, #16]
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f043 0308 	orr.w	r3, r3, #8
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	6923      	ldr	r3, [r4, #16]
 800d464:	b94b      	cbnz	r3, 800d47a <__swsetup_r+0x9a>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d46c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d470:	d003      	beq.n	800d47a <__swsetup_r+0x9a>
 800d472:	4621      	mov	r1, r4
 800d474:	4630      	mov	r0, r6
 800d476:	f7fe f88f 	bl	800b598 <__smakebuf_r>
 800d47a:	89a0      	ldrh	r0, [r4, #12]
 800d47c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d480:	f010 0301 	ands.w	r3, r0, #1
 800d484:	d00a      	beq.n	800d49c <__swsetup_r+0xbc>
 800d486:	2300      	movs	r3, #0
 800d488:	60a3      	str	r3, [r4, #8]
 800d48a:	6963      	ldr	r3, [r4, #20]
 800d48c:	425b      	negs	r3, r3
 800d48e:	61a3      	str	r3, [r4, #24]
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	b943      	cbnz	r3, 800d4a6 <__swsetup_r+0xc6>
 800d494:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d498:	d1ba      	bne.n	800d410 <__swsetup_r+0x30>
 800d49a:	bd70      	pop	{r4, r5, r6, pc}
 800d49c:	0781      	lsls	r1, r0, #30
 800d49e:	bf58      	it	pl
 800d4a0:	6963      	ldrpl	r3, [r4, #20]
 800d4a2:	60a3      	str	r3, [r4, #8]
 800d4a4:	e7f4      	b.n	800d490 <__swsetup_r+0xb0>
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	e7f7      	b.n	800d49a <__swsetup_r+0xba>
 800d4aa:	bf00      	nop
 800d4ac:	20000018 	.word	0x20000018
 800d4b0:	0800e434 	.word	0x0800e434
 800d4b4:	0800e454 	.word	0x0800e454
 800d4b8:	0800e414 	.word	0x0800e414

0800d4bc <__assert_func>:
 800d4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4be:	4614      	mov	r4, r2
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	4b09      	ldr	r3, [pc, #36]	; (800d4e8 <__assert_func+0x2c>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	68d8      	ldr	r0, [r3, #12]
 800d4ca:	b14c      	cbz	r4, 800d4e0 <__assert_func+0x24>
 800d4cc:	4b07      	ldr	r3, [pc, #28]	; (800d4ec <__assert_func+0x30>)
 800d4ce:	9100      	str	r1, [sp, #0]
 800d4d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4d4:	4906      	ldr	r1, [pc, #24]	; (800d4f0 <__assert_func+0x34>)
 800d4d6:	462b      	mov	r3, r5
 800d4d8:	f000 f81e 	bl	800d518 <fiprintf>
 800d4dc:	f000 f8ca 	bl	800d674 <abort>
 800d4e0:	4b04      	ldr	r3, [pc, #16]	; (800d4f4 <__assert_func+0x38>)
 800d4e2:	461c      	mov	r4, r3
 800d4e4:	e7f3      	b.n	800d4ce <__assert_func+0x12>
 800d4e6:	bf00      	nop
 800d4e8:	20000018 	.word	0x20000018
 800d4ec:	0800e678 	.word	0x0800e678
 800d4f0:	0800e685 	.word	0x0800e685
 800d4f4:	0800e6b3 	.word	0x0800e6b3

0800d4f8 <_close_r>:
 800d4f8:	b538      	push	{r3, r4, r5, lr}
 800d4fa:	4d06      	ldr	r5, [pc, #24]	; (800d514 <_close_r+0x1c>)
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	4604      	mov	r4, r0
 800d500:	4608      	mov	r0, r1
 800d502:	602b      	str	r3, [r5, #0]
 800d504:	f7fa fcc5 	bl	8007e92 <_close>
 800d508:	1c43      	adds	r3, r0, #1
 800d50a:	d102      	bne.n	800d512 <_close_r+0x1a>
 800d50c:	682b      	ldr	r3, [r5, #0]
 800d50e:	b103      	cbz	r3, 800d512 <_close_r+0x1a>
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	bd38      	pop	{r3, r4, r5, pc}
 800d514:	200004b0 	.word	0x200004b0

0800d518 <fiprintf>:
 800d518:	b40e      	push	{r1, r2, r3}
 800d51a:	b503      	push	{r0, r1, lr}
 800d51c:	4601      	mov	r1, r0
 800d51e:	ab03      	add	r3, sp, #12
 800d520:	4805      	ldr	r0, [pc, #20]	; (800d538 <fiprintf+0x20>)
 800d522:	f853 2b04 	ldr.w	r2, [r3], #4
 800d526:	6800      	ldr	r0, [r0, #0]
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	f7fe ffcd 	bl	800c4c8 <_vfiprintf_r>
 800d52e:	b002      	add	sp, #8
 800d530:	f85d eb04 	ldr.w	lr, [sp], #4
 800d534:	b003      	add	sp, #12
 800d536:	4770      	bx	lr
 800d538:	20000018 	.word	0x20000018

0800d53c <_fstat_r>:
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	4d07      	ldr	r5, [pc, #28]	; (800d55c <_fstat_r+0x20>)
 800d540:	2300      	movs	r3, #0
 800d542:	4604      	mov	r4, r0
 800d544:	4608      	mov	r0, r1
 800d546:	4611      	mov	r1, r2
 800d548:	602b      	str	r3, [r5, #0]
 800d54a:	f7fa fcae 	bl	8007eaa <_fstat>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d102      	bne.n	800d558 <_fstat_r+0x1c>
 800d552:	682b      	ldr	r3, [r5, #0]
 800d554:	b103      	cbz	r3, 800d558 <_fstat_r+0x1c>
 800d556:	6023      	str	r3, [r4, #0]
 800d558:	bd38      	pop	{r3, r4, r5, pc}
 800d55a:	bf00      	nop
 800d55c:	200004b0 	.word	0x200004b0

0800d560 <_isatty_r>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_isatty_r+0x1c>)
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	4608      	mov	r0, r1
 800d56a:	602b      	str	r3, [r5, #0]
 800d56c:	f7fa fcad 	bl	8007eca <_isatty>
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	d102      	bne.n	800d57a <_isatty_r+0x1a>
 800d574:	682b      	ldr	r3, [r5, #0]
 800d576:	b103      	cbz	r3, 800d57a <_isatty_r+0x1a>
 800d578:	6023      	str	r3, [r4, #0]
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	200004b0 	.word	0x200004b0

0800d580 <_lseek_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d07      	ldr	r5, [pc, #28]	; (800d5a0 <_lseek_r+0x20>)
 800d584:	4604      	mov	r4, r0
 800d586:	4608      	mov	r0, r1
 800d588:	4611      	mov	r1, r2
 800d58a:	2200      	movs	r2, #0
 800d58c:	602a      	str	r2, [r5, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	f7fa fca6 	bl	8007ee0 <_lseek>
 800d594:	1c43      	adds	r3, r0, #1
 800d596:	d102      	bne.n	800d59e <_lseek_r+0x1e>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	b103      	cbz	r3, 800d59e <_lseek_r+0x1e>
 800d59c:	6023      	str	r3, [r4, #0]
 800d59e:	bd38      	pop	{r3, r4, r5, pc}
 800d5a0:	200004b0 	.word	0x200004b0

0800d5a4 <memmove>:
 800d5a4:	4288      	cmp	r0, r1
 800d5a6:	b510      	push	{r4, lr}
 800d5a8:	eb01 0402 	add.w	r4, r1, r2
 800d5ac:	d902      	bls.n	800d5b4 <memmove+0x10>
 800d5ae:	4284      	cmp	r4, r0
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	d807      	bhi.n	800d5c4 <memmove+0x20>
 800d5b4:	1e43      	subs	r3, r0, #1
 800d5b6:	42a1      	cmp	r1, r4
 800d5b8:	d008      	beq.n	800d5cc <memmove+0x28>
 800d5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5c2:	e7f8      	b.n	800d5b6 <memmove+0x12>
 800d5c4:	4402      	add	r2, r0
 800d5c6:	4601      	mov	r1, r0
 800d5c8:	428a      	cmp	r2, r1
 800d5ca:	d100      	bne.n	800d5ce <memmove+0x2a>
 800d5cc:	bd10      	pop	{r4, pc}
 800d5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5d6:	e7f7      	b.n	800d5c8 <memmove+0x24>

0800d5d8 <__malloc_lock>:
 800d5d8:	4801      	ldr	r0, [pc, #4]	; (800d5e0 <__malloc_lock+0x8>)
 800d5da:	f7fd bfb6 	b.w	800b54a <__retarget_lock_acquire_recursive>
 800d5de:	bf00      	nop
 800d5e0:	200004a4 	.word	0x200004a4

0800d5e4 <__malloc_unlock>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	; (800d5ec <__malloc_unlock+0x8>)
 800d5e6:	f7fd bfb1 	b.w	800b54c <__retarget_lock_release_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	200004a4 	.word	0x200004a4

0800d5f0 <_realloc_r>:
 800d5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f4:	4680      	mov	r8, r0
 800d5f6:	4614      	mov	r4, r2
 800d5f8:	460e      	mov	r6, r1
 800d5fa:	b921      	cbnz	r1, 800d606 <_realloc_r+0x16>
 800d5fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d600:	4611      	mov	r1, r2
 800d602:	f7fe bd67 	b.w	800c0d4 <_malloc_r>
 800d606:	b92a      	cbnz	r2, 800d614 <_realloc_r+0x24>
 800d608:	f7fe fcf8 	bl	800bffc <_free_r>
 800d60c:	4625      	mov	r5, r4
 800d60e:	4628      	mov	r0, r5
 800d610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d614:	f000 f835 	bl	800d682 <_malloc_usable_size_r>
 800d618:	4284      	cmp	r4, r0
 800d61a:	4607      	mov	r7, r0
 800d61c:	d802      	bhi.n	800d624 <_realloc_r+0x34>
 800d61e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d622:	d812      	bhi.n	800d64a <_realloc_r+0x5a>
 800d624:	4621      	mov	r1, r4
 800d626:	4640      	mov	r0, r8
 800d628:	f7fe fd54 	bl	800c0d4 <_malloc_r>
 800d62c:	4605      	mov	r5, r0
 800d62e:	2800      	cmp	r0, #0
 800d630:	d0ed      	beq.n	800d60e <_realloc_r+0x1e>
 800d632:	42bc      	cmp	r4, r7
 800d634:	4622      	mov	r2, r4
 800d636:	4631      	mov	r1, r6
 800d638:	bf28      	it	cs
 800d63a:	463a      	movcs	r2, r7
 800d63c:	f7fa fd40 	bl	80080c0 <memcpy>
 800d640:	4631      	mov	r1, r6
 800d642:	4640      	mov	r0, r8
 800d644:	f7fe fcda 	bl	800bffc <_free_r>
 800d648:	e7e1      	b.n	800d60e <_realloc_r+0x1e>
 800d64a:	4635      	mov	r5, r6
 800d64c:	e7df      	b.n	800d60e <_realloc_r+0x1e>
	...

0800d650 <_read_r>:
 800d650:	b538      	push	{r3, r4, r5, lr}
 800d652:	4d07      	ldr	r5, [pc, #28]	; (800d670 <_read_r+0x20>)
 800d654:	4604      	mov	r4, r0
 800d656:	4608      	mov	r0, r1
 800d658:	4611      	mov	r1, r2
 800d65a:	2200      	movs	r2, #0
 800d65c:	602a      	str	r2, [r5, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	f7fa fbde 	bl	8007e20 <_read>
 800d664:	1c43      	adds	r3, r0, #1
 800d666:	d102      	bne.n	800d66e <_read_r+0x1e>
 800d668:	682b      	ldr	r3, [r5, #0]
 800d66a:	b103      	cbz	r3, 800d66e <_read_r+0x1e>
 800d66c:	6023      	str	r3, [r4, #0]
 800d66e:	bd38      	pop	{r3, r4, r5, pc}
 800d670:	200004b0 	.word	0x200004b0

0800d674 <abort>:
 800d674:	b508      	push	{r3, lr}
 800d676:	2006      	movs	r0, #6
 800d678:	f000 f834 	bl	800d6e4 <raise>
 800d67c:	2001      	movs	r0, #1
 800d67e:	f7fa fbc5 	bl	8007e0c <_exit>

0800d682 <_malloc_usable_size_r>:
 800d682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d686:	1f18      	subs	r0, r3, #4
 800d688:	2b00      	cmp	r3, #0
 800d68a:	bfbc      	itt	lt
 800d68c:	580b      	ldrlt	r3, [r1, r0]
 800d68e:	18c0      	addlt	r0, r0, r3
 800d690:	4770      	bx	lr

0800d692 <_raise_r>:
 800d692:	291f      	cmp	r1, #31
 800d694:	b538      	push	{r3, r4, r5, lr}
 800d696:	4604      	mov	r4, r0
 800d698:	460d      	mov	r5, r1
 800d69a:	d904      	bls.n	800d6a6 <_raise_r+0x14>
 800d69c:	2316      	movs	r3, #22
 800d69e:	6003      	str	r3, [r0, #0]
 800d6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6a4:	bd38      	pop	{r3, r4, r5, pc}
 800d6a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6a8:	b112      	cbz	r2, 800d6b0 <_raise_r+0x1e>
 800d6aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6ae:	b94b      	cbnz	r3, 800d6c4 <_raise_r+0x32>
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 f831 	bl	800d718 <_getpid_r>
 800d6b6:	462a      	mov	r2, r5
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6c0:	f000 b818 	b.w	800d6f4 <_kill_r>
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d00a      	beq.n	800d6de <_raise_r+0x4c>
 800d6c8:	1c59      	adds	r1, r3, #1
 800d6ca:	d103      	bne.n	800d6d4 <_raise_r+0x42>
 800d6cc:	2316      	movs	r3, #22
 800d6ce:	6003      	str	r3, [r0, #0]
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	e7e7      	b.n	800d6a4 <_raise_r+0x12>
 800d6d4:	2400      	movs	r4, #0
 800d6d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6da:	4628      	mov	r0, r5
 800d6dc:	4798      	blx	r3
 800d6de:	2000      	movs	r0, #0
 800d6e0:	e7e0      	b.n	800d6a4 <_raise_r+0x12>
	...

0800d6e4 <raise>:
 800d6e4:	4b02      	ldr	r3, [pc, #8]	; (800d6f0 <raise+0xc>)
 800d6e6:	4601      	mov	r1, r0
 800d6e8:	6818      	ldr	r0, [r3, #0]
 800d6ea:	f7ff bfd2 	b.w	800d692 <_raise_r>
 800d6ee:	bf00      	nop
 800d6f0:	20000018 	.word	0x20000018

0800d6f4 <_kill_r>:
 800d6f4:	b538      	push	{r3, r4, r5, lr}
 800d6f6:	4d07      	ldr	r5, [pc, #28]	; (800d714 <_kill_r+0x20>)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	4608      	mov	r0, r1
 800d6fe:	4611      	mov	r1, r2
 800d700:	602b      	str	r3, [r5, #0]
 800d702:	f7fa fb73 	bl	8007dec <_kill>
 800d706:	1c43      	adds	r3, r0, #1
 800d708:	d102      	bne.n	800d710 <_kill_r+0x1c>
 800d70a:	682b      	ldr	r3, [r5, #0]
 800d70c:	b103      	cbz	r3, 800d710 <_kill_r+0x1c>
 800d70e:	6023      	str	r3, [r4, #0]
 800d710:	bd38      	pop	{r3, r4, r5, pc}
 800d712:	bf00      	nop
 800d714:	200004b0 	.word	0x200004b0

0800d718 <_getpid_r>:
 800d718:	f7fa bb60 	b.w	8007ddc <_getpid>

0800d71c <_init>:
 800d71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71e:	bf00      	nop
 800d720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d722:	bc08      	pop	{r3}
 800d724:	469e      	mov	lr, r3
 800d726:	4770      	bx	lr

0800d728 <_fini>:
 800d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d72a:	bf00      	nop
 800d72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d72e:	bc08      	pop	{r3}
 800d730:	469e      	mov	lr, r3
 800d732:	4770      	bx	lr
