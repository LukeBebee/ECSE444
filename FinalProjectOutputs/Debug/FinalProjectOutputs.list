
FinalProjectOutputs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08009cd8  08009cd8  00019cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a27c  0800a27c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a27c  0800a27c  0001a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a284  0800a284  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a284  0800a284  0001a284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a288  0800a288  0001a288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a28c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001e0  0800a46c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800a46c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd92  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d58  00000000  00000000  0002dfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  000307b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ab0c  00000000  00000000  000311a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d708  00000000  00000000  0005bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102e8c  00000000  00000000  000693bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016c248  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000449c  00000000  00000000  0016c298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009cbc 	.word	0x08009cbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08009cbc 	.word	0x08009cbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 f942 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001038:	2000      	movs	r0, #0
 800103a:	f000 f80d 	bl	8001058 <HAL_InitTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104a:	f003 f92f 	bl	80042ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_InitTick+0x6c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d023      	beq.n	80010b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_InitTick+0x70>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_InitTick+0x6c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107a:	fbb3 f3f1 	udiv	r3, r3, r1
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f941 	bl	800130a <HAL_SYSTICK_Config>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10f      	bne.n	80010ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d809      	bhi.n	80010a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800109c:	f000 f919 	bl	80012d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <HAL_InitTick+0x74>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e007      	b.n	80010b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e004      	b.n	80010b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	73fb      	strb	r3, [r7, #15]
 80010b2:	e001      	b.n	80010b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000004 	.word	0x20000004
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000000 	.word	0x20000000

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	200001fc 	.word	0x200001fc

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	200001fc 	.word	0x200001fc

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000004 	.word	0x20000004

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff47 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff5c 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ffb0 	bl	8001278 <SysTick_Config>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e166      	b.n	8001602 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8158 	beq.w	80015fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d005      	beq.n	8001364 <HAL_GPIO_Init+0x40>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d130      	bne.n	80013c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800139a:	2201      	movs	r2, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	f003 0201 	and.w	r2, r3, #1
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d017      	beq.n	8001402 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	2203      	movs	r2, #3
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d123      	bne.n	8001456 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	08da      	lsrs	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3208      	adds	r2, #8
 8001416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	691a      	ldr	r2, [r3, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f003 0307 	and.w	r3, r3, #7
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	08da      	lsrs	r2, r3, #3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3208      	adds	r2, #8
 8001450:	6939      	ldr	r1, [r7, #16]
 8001452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0203 	and.w	r2, r3, #3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 80b2 	beq.w	80015fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 800149a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149c:	4a60      	ldr	r2, [pc, #384]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6613      	str	r3, [r2, #96]	; 0x60
 80014a4:	4b5e      	ldr	r3, [pc, #376]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b0:	4a5c      	ldr	r2, [pc, #368]	; (8001624 <HAL_GPIO_Init+0x300>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014da:	d02b      	beq.n	8001534 <HAL_GPIO_Init+0x210>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_GPIO_Init+0x304>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d025      	beq.n	8001530 <HAL_GPIO_Init+0x20c>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a51      	ldr	r2, [pc, #324]	; (800162c <HAL_GPIO_Init+0x308>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d01f      	beq.n	800152c <HAL_GPIO_Init+0x208>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x30c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d019      	beq.n	8001528 <HAL_GPIO_Init+0x204>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x310>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d013      	beq.n	8001524 <HAL_GPIO_Init+0x200>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x314>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d00d      	beq.n	8001520 <HAL_GPIO_Init+0x1fc>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x318>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d007      	beq.n	800151c <HAL_GPIO_Init+0x1f8>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x31c>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d101      	bne.n	8001518 <HAL_GPIO_Init+0x1f4>
 8001514:	2307      	movs	r3, #7
 8001516:	e00e      	b.n	8001536 <HAL_GPIO_Init+0x212>
 8001518:	2308      	movs	r3, #8
 800151a:	e00c      	b.n	8001536 <HAL_GPIO_Init+0x212>
 800151c:	2306      	movs	r3, #6
 800151e:	e00a      	b.n	8001536 <HAL_GPIO_Init+0x212>
 8001520:	2305      	movs	r3, #5
 8001522:	e008      	b.n	8001536 <HAL_GPIO_Init+0x212>
 8001524:	2304      	movs	r3, #4
 8001526:	e006      	b.n	8001536 <HAL_GPIO_Init+0x212>
 8001528:	2303      	movs	r3, #3
 800152a:	e004      	b.n	8001536 <HAL_GPIO_Init+0x212>
 800152c:	2302      	movs	r3, #2
 800152e:	e002      	b.n	8001536 <HAL_GPIO_Init+0x212>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_GPIO_Init+0x212>
 8001534:	2300      	movs	r3, #0
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	f002 0203 	and.w	r2, r2, #3
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	4093      	lsls	r3, r2
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001546:	4937      	ldr	r1, [pc, #220]	; (8001624 <HAL_GPIO_Init+0x300>)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	089b      	lsrs	r3, r3, #2
 800154c:	3302      	adds	r3, #2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_GPIO_Init+0x320>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001578:	4a32      	ldr	r2, [pc, #200]	; (8001644 <HAL_GPIO_Init+0x320>)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_GPIO_Init+0x320>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a2:	4a28      	ldr	r2, [pc, #160]	; (8001644 <HAL_GPIO_Init+0x320>)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_GPIO_Init+0x320>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <HAL_GPIO_Init+0x320>)
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_GPIO_Init+0x320>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f6:	4a13      	ldr	r2, [pc, #76]	; (8001644 <HAL_GPIO_Init+0x320>)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	f47f ae91 	bne.w	8001334 <HAL_GPIO_Init+0x10>
  }
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	371c      	adds	r7, #28
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40021000 	.word	0x40021000
 8001624:	40010000 	.word	0x40010000
 8001628:	48000400 	.word	0x48000400
 800162c:	48000800 	.word	0x48000800
 8001630:	48000c00 	.word	0x48000c00
 8001634:	48001000 	.word	0x48001000
 8001638:	48001400 	.word	0x48001400
 800163c:	48001800 	.word	0x48001800
 8001640:	48001c00 	.word	0x48001c00
 8001644:	40010400 	.word	0x40010400

08001648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	807b      	strh	r3, [r7, #2]
 8001654:	4613      	mov	r3, r2
 8001656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001658:	787b      	ldrb	r3, [r7, #1]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001664:	e002      	b.n	800166c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d102      	bne.n	8001690 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800168a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800168e:	e00b      	b.n	80016a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800169e:	d102      	bne.n	80016a6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a4:	e000      	b.n	80016a8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016a6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40007000 	.word	0x40007000

080016b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d141      	bne.n	800174a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016c6:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d131      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016da:	4a46      	ldr	r2, [pc, #280]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e4:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ec:	4a41      	ldr	r2, [pc, #260]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016f4:	4b40      	ldr	r3, [pc, #256]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2232      	movs	r2, #50	; 0x32
 80016fa:	fb02 f303 	mul.w	r3, r2, r3
 80016fe:	4a3f      	ldr	r2, [pc, #252]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	3301      	adds	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800170a:	e002      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3b01      	subs	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001712:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d102      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f2      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001726:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001732:	d158      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e057      	b.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800173e:	4a2d      	ldr	r2, [pc, #180]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001744:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001748:	e04d      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001750:	d141      	bne.n	80017d6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001752:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d131      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001778:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2232      	movs	r2, #50	; 0x32
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9b      	lsrs	r3, r3, #18
 8001792:	3301      	adds	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001796:	e002      	b.n	800179e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3b01      	subs	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d102      	bne.n	80017b2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f2      	bne.n	8001798 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017be:	d112      	bne.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e011      	b.n	80017e8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017d4:	e007      	b.n	80017e6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017e4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40007000 	.word	0x40007000
 80017f8:	20000008 	.word	0x20000008
 80017fc:	431bde83 	.word	0x431bde83

08001800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d102      	bne.n	8001814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	f000 bc08 	b.w	8002024 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80e4 	beq.w	80019fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_RCC_OscConfig+0x4c>
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b0c      	cmp	r3, #12
 8001840:	f040 808b 	bne.w	800195a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b01      	cmp	r3, #1
 8001848:	f040 8087 	bne.w	800195a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800184c:	4b88      	ldr	r3, [pc, #544]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_OscConfig+0x64>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e3df      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1a      	ldr	r2, [r3, #32]
 8001868:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d004      	beq.n	800187e <HAL_RCC_OscConfig+0x7e>
 8001874:	4b7e      	ldr	r3, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187c:	e005      	b.n	800188a <HAL_RCC_OscConfig+0x8a>
 800187e:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800188a:	4293      	cmp	r3, r2
 800188c:	d223      	bcs.n	80018d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 fdcc 	bl	8002430 <RCC_SetFlashLatencyFromMSIRange>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e3c0      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018a8:	f043 0308 	orr.w	r3, r3, #8
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b70      	ldr	r3, [pc, #448]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1b      	ldr	r3, [r3, #32]
 80018ba:	496d      	ldr	r1, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	4968      	ldr	r1, [pc, #416]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
 80018d4:	e025      	b.n	8001922 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d6:	4b66      	ldr	r3, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a65      	ldr	r2, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4960      	ldr	r1, [pc, #384]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f4:	4b5e      	ldr	r3, [pc, #376]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	495b      	ldr	r1, [pc, #364]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fd8c 	bl	8002430 <RCC_SetFlashLatencyFromMSIRange>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e380      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001922:	f000 fcc1 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	4950      	ldr	r1, [pc, #320]	; (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	f003 031f 	and.w	r3, r3, #31
 800193a:	fa22 f303 	lsr.w	r3, r2, r3
 800193e:	4a4e      	ldr	r2, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0x278>)
 8001940:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001942:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb86 	bl	8001058 <HAL_InitTick>
 800194c:	4603      	mov	r3, r0
 800194e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d052      	beq.n	80019fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	e364      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d032      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a42      	ldr	r2, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196e:	f7ff fbc3 	bl	80010f8 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001976:	f7ff fbbf 	bl	80010f8 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e34d      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a35      	ldr	r2, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 800199a:	f043 0308 	orr.w	r3, r3, #8
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4930      	ldr	r1, [pc, #192]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	492b      	ldr	r1, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	604b      	str	r3, [r1, #4]
 80019c6:	e01a      	b.n	80019fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c8:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fb90 	bl	80010f8 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019dc:	f7ff fb8c 	bl	80010f8 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e31a      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1dc>
 80019fa:	e000      	b.n	80019fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d073      	beq.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d005      	beq.n	8001a1c <HAL_RCC_OscConfig+0x21c>
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	2b0c      	cmp	r3, #12
 8001a14:	d10e      	bne.n	8001a34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d063      	beq.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d15f      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e2f7      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a3c:	d106      	bne.n	8001a4c <HAL_RCC_OscConfig+0x24c>
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	e025      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a54:	d114      	bne.n	8001a80 <HAL_RCC_OscConfig+0x280>
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x270>)
 8001a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	e013      	b.n	8001a98 <HAL_RCC_OscConfig+0x298>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08009d74 	.word	0x08009d74
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	4ba0      	ldr	r3, [pc, #640]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a9f      	ldr	r2, [pc, #636]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b9d      	ldr	r3, [pc, #628]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a9c      	ldr	r2, [pc, #624]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fb2a 	bl	80010f8 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fb26 	bl	80010f8 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e2b4      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	4b92      	ldr	r3, [pc, #584]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2a8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fb16 	bl	80010f8 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fb12 	bl	80010f8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e2a0      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae2:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2d0>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d060      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x310>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b0c      	cmp	r3, #12
 8001b08:	d119      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b10:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_OscConfig+0x328>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e27d      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	4973      	ldr	r1, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3c:	e040      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff fad1 	bl	80010f8 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff facd 	bl	80010f8 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e25b      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4b62      	ldr	r3, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	495f      	ldr	r1, [pc, #380]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e018      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a5c      	ldr	r2, [pc, #368]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9a:	f7ff faad 	bl	80010f8 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba2:	f7ff faa9 	bl	80010f8 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e237      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb4:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa88 	bl	80010f8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fa84 	bl	80010f8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e212      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ef      	beq.n	8001bec <HAL_RCC_OscConfig+0x3ec>
 8001c0c:	e01b      	b.n	8001c46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c14:	4a3b      	ldr	r2, [pc, #236]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c16:	f023 0301 	bic.w	r3, r3, #1
 8001c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa6b 	bl	80010f8 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c26:	f7ff fa67 	bl	80010f8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1f5      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ef      	bne.n	8001c26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a6 	beq.w	8001da0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c58:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c80:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7ff fa2e 	bl	80010f8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca0:	f7ff fa2a 	bl	80010f8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1b8      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_RCC_OscConfig+0x508>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d108      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x4d8>
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd6:	e029      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d115      	bne.n	8001d0c <HAL_RCC_OscConfig+0x50c>
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf6:	4a03      	ldr	r2, [pc, #12]	; (8001d04 <HAL_RCC_OscConfig+0x504>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
 8001d0c:	4b9d      	ldr	r3, [pc, #628]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d12:	4a9c      	ldr	r2, [pc, #624]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d1c:	4b99      	ldr	r3, [pc, #612]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	4a98      	ldr	r2, [pc, #608]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d016      	beq.n	8001d62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff f9e0 	bl	80010f8 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	e00a      	b.n	8001d52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3c:	f7ff f9dc 	bl	80010f8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e168      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d52:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ed      	beq.n	8001d3c <HAL_RCC_OscConfig+0x53c>
 8001d60:	e015      	b.n	8001d8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff f9c9 	bl	80010f8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff f9c5 	bl	80010f8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e151      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ed      	bne.n	8001d6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8e:	7ffb      	ldrb	r3, [r7, #31]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d94:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001d9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0320 	and.w	r3, r3, #32
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d03c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01c      	beq.n	8001dee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001db4:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dba:	4a72      	ldr	r2, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f998 	bl	80010f8 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dcc:	f7ff f994 	bl	80010f8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e122      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dde:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0ef      	beq.n	8001dcc <HAL_RCC_OscConfig+0x5cc>
 8001dec:	e01b      	b.n	8001e26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df4:	4a63      	ldr	r2, [pc, #396]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001df6:	f023 0301 	bic.w	r3, r3, #1
 8001dfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfe:	f7ff f97b 	bl	80010f8 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e06:	f7ff f977 	bl	80010f8 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e105      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e18:	4b5a      	ldr	r3, [pc, #360]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1ef      	bne.n	8001e06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80f9 	beq.w	8002022 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	f040 80cf 	bne.w	8001fd8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e3a:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f003 0203 	and.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d12c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d123      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d113      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d109      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d071      	beq.n	8001f8c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d068      	beq.n	8001f80 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e0ac      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed6:	f7ff f90f 	bl	80010f8 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ede:	f7ff f90b 	bl	80010f8 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e099      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1f0      	bne.n	8001ede <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b21      	ldr	r3, [pc, #132]	; (8001f88 <HAL_RCC_OscConfig+0x788>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f0c:	3a01      	subs	r2, #1
 8001f0e:	0112      	lsls	r2, r2, #4
 8001f10:	4311      	orrs	r1, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f16:	0212      	lsls	r2, r2, #8
 8001f18:	4311      	orrs	r1, r2
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f1e:	0852      	lsrs	r2, r2, #1
 8001f20:	3a01      	subs	r2, #1
 8001f22:	0552      	lsls	r2, r2, #21
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f2a:	0852      	lsrs	r2, r2, #1
 8001f2c:	3a01      	subs	r2, #1
 8001f2e:	0652      	lsls	r2, r2, #25
 8001f30:	4311      	orrs	r1, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f36:	06d2      	lsls	r2, r2, #27
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f58:	f7ff f8ce 	bl	80010f8 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f8ca 	bl	80010f8 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e058      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HAL_RCC_OscConfig+0x784>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f7e:	e050      	b.n	8002022 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e04f      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
 8001f84:	40021000 	.word	0x40021000
 8001f88:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d144      	bne.n	8002022 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb0:	f7ff f8a2 	bl	80010f8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff f89e 	bl	80010f8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e02c      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x7b8>
 8001fd6:	e024      	b.n	8002022 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d01f      	beq.n	800201e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b13      	ldr	r3, [pc, #76]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8001fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7ff f885 	bl	80010f8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff2:	f7ff f881 	bl	80010f8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e00f      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4905      	ldr	r1, [pc, #20]	; (800202c <HAL_RCC_OscConfig+0x82c>)
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x830>)
 8002018:	4013      	ands	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
 800201c:	e001      	b.n	8002022 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	feeefffc 	.word	0xfeeefffc

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e11d      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800204c:	4b90      	ldr	r3, [pc, #576]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d910      	bls.n	800207c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b8d      	ldr	r3, [pc, #564]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 020f 	bic.w	r2, r3, #15
 8002062:	498b      	ldr	r1, [pc, #556]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800206a:	4b89      	ldr	r3, [pc, #548]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d001      	beq.n	800207c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e105      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d010      	beq.n	80020aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002094:	429a      	cmp	r2, r3
 8002096:	d908      	bls.n	80020aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002098:	4b7e      	ldr	r3, [pc, #504]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	497b      	ldr	r1, [pc, #492]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d079      	beq.n	80021aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d11e      	bne.n	80020fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	4b75      	ldr	r3, [pc, #468]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0dc      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80020ce:	f000 fa09 	bl	80024e4 <RCC_GetSysClockFreqFromPLLSource>
 80020d2:	4603      	mov	r3, r0
 80020d4:	4a70      	ldr	r2, [pc, #448]	; (8002298 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d946      	bls.n	8002168 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80020da:	4b6e      	ldr	r3, [pc, #440]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d140      	bne.n	8002168 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020e6:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ee:	4a69      	ldr	r2, [pc, #420]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80020f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	e035      	b.n	8002168 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d107      	bne.n	8002114 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002104:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d115      	bne.n	800213c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0b9      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d107      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211c:	4b5d      	ldr	r3, [pc, #372]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0ad      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212c:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0a5      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800213c:	f000 f8b4 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002140:	4603      	mov	r3, r0
 8002142:	4a55      	ldr	r2, [pc, #340]	; (8002298 <HAL_RCC_ClockConfig+0x264>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d90f      	bls.n	8002168 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002148:	4b52      	ldr	r3, [pc, #328]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800215c:	4a4d      	ldr	r2, [pc, #308]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800215e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002162:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f023 0203 	bic.w	r2, r3, #3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4947      	ldr	r1, [pc, #284]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800217a:	f7fe ffbd 	bl	80010f8 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002180:	e00a      	b.n	8002198 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002182:	f7fe ffb9 	bl	80010f8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002190:	4293      	cmp	r3, r2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e077      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002198:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 020c 	and.w	r2, r3, #12
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d1eb      	bne.n	8002182 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a37      	ldr	r2, [pc, #220]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80021b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d010      	beq.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d208      	bcs.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	492b      	ldr	r1, [pc, #172]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ea:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d210      	bcs.n	800221a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 020f 	bic.w	r2, r3, #15
 8002200:	4923      	ldr	r1, [pc, #140]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	4313      	orrs	r3, r2
 8002206:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <HAL_RCC_ClockConfig+0x25c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e036      	b.n	8002288 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002226:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4918      	ldr	r1, [pc, #96]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4910      	ldr	r1, [pc, #64]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002258:	f000 f826 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_RCC_ClockConfig+0x260>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <HAL_RCC_ClockConfig+0x268>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x26c>)
 8002276:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe feeb 	bl	8001058 <HAL_InitTick>
 8002282:	4603      	mov	r3, r0
 8002284:	73fb      	strb	r3, [r7, #15]

  return status;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40022000 	.word	0x40022000
 8002294:	40021000 	.word	0x40021000
 8002298:	04c4b400 	.word	0x04c4b400
 800229c:	08009d74 	.word	0x08009d74
 80022a0:	20000008 	.word	0x20000008
 80022a4:	20000000 	.word	0x20000000

080022a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b6:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c0:	4b3b      	ldr	r3, [pc, #236]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x34>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d121      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d11e      	bne.n	800231a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	e005      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002304:	4a2b      	ldr	r2, [pc, #172]	; (80023b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10d      	bne.n	8002330 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d102      	bne.n	8002326 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	e004      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d101      	bne.n	8002330 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_GetSysClockFreq+0x114>)
 800232e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	2b0c      	cmp	r3, #12
 8002334:	d134      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002336:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d003      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0xa6>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d003      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0xac>
 800234c:	e005      	b.n	800235a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800234e:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002350:	617b      	str	r3, [r7, #20]
      break;
 8002352:	e005      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002356:	617b      	str	r3, [r7, #20]
      break;
 8002358:	e002      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	617b      	str	r3, [r7, #20]
      break;
 800235e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002360:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3301      	adds	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	fb03 f202 	mul.w	r2, r3, r2
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	fbb2 f3f3 	udiv	r3, r2, r3
 8002384:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	0e5b      	lsrs	r3, r3, #25
 800238c:	f003 0303 	and.w	r3, r3, #3
 8002390:	3301      	adds	r3, #1
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023a0:	69bb      	ldr	r3, [r7, #24]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	; 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08009d8c 	.word	0x08009d8c
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	007a1200 	.word	0x007a1200

080023c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000008 	.word	0x20000008

080023d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023dc:	f7ff fff0 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 80023e0:	4602      	mov	r2, r0
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	4904      	ldr	r1, [pc, #16]	; (8002400 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ee:	5ccb      	ldrb	r3, [r1, r3]
 80023f0:	f003 031f 	and.w	r3, r3, #31
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08009d84 	.word	0x08009d84

08002404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002408:	f7ff ffda 	bl	80023c0 <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0adb      	lsrs	r3, r3, #11
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_RCC_GetPCLK2Freq+0x28>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002424:	4618      	mov	r0, r3
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	08009d84 	.word	0x08009d84

08002430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002448:	f7ff f916 	bl	8001678 <HAL_PWREx_GetVoltageRange>
 800244c:	6178      	str	r0, [r7, #20]
 800244e:	e014      	b.n	800247a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245a:	6593      	str	r3, [r2, #88]	; 0x58
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002468:	f7ff f906 	bl	8001678 <HAL_PWREx_GetVoltageRange>
 800246c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800246e:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002472:	4a1a      	ldr	r2, [pc, #104]	; (80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002478:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002480:	d10b      	bne.n	800249a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b80      	cmp	r3, #128	; 0x80
 8002486:	d913      	bls.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2ba0      	cmp	r3, #160	; 0xa0
 800248c:	d902      	bls.n	8002494 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800248e:	2302      	movs	r3, #2
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	e00d      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002494:	2301      	movs	r3, #1
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	e00a      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b7f      	cmp	r3, #127	; 0x7f
 800249e:	d902      	bls.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80024a0:	2302      	movs	r3, #2
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	e004      	b.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b70      	cmp	r3, #112	; 0x70
 80024aa:	d101      	bne.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f023 020f 	bic.w	r2, r3, #15
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024c0:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 030f 	and.w	r3, r3, #15
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d001      	beq.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40022000 	.word	0x40022000

080024e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d00b      	beq.n	8002512 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d825      	bhi.n	800254c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d008      	beq.n	8002518 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d11f      	bne.n	800254c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800250c:	4b25      	ldr	r3, [pc, #148]	; (80025a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800250e:	613b      	str	r3, [r7, #16]
    break;
 8002510:	e01f      	b.n	8002552 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002512:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002514:	613b      	str	r3, [r7, #16]
    break;
 8002516:	e01c      	b.n	8002552 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	e005      	b.n	8002540 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002540:	4a1a      	ldr	r2, [pc, #104]	; (80025ac <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
    break;
 800254a:	e002      	b.n	8002552 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
    break;
 8002550:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	3301      	adds	r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002560:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	fb03 f202 	mul.w	r2, r3, r2
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0e5b      	lsrs	r3, r3, #25
 800257e:	f003 0303 	and.w	r3, r3, #3
 8002582:	3301      	adds	r3, #1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002592:	683b      	ldr	r3, [r7, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	40021000 	.word	0x40021000
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	08009d8c 	.word	0x08009d8c

080025b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025b8:	2300      	movs	r3, #0
 80025ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025bc:	2300      	movs	r3, #0
 80025be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d040      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d0:	2b80      	cmp	r3, #128	; 0x80
 80025d2:	d02a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d825      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80025d8:	2b60      	cmp	r3, #96	; 0x60
 80025da:	d026      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80025dc:	2b60      	cmp	r3, #96	; 0x60
 80025de:	d821      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80025e0:	2b40      	cmp	r3, #64	; 0x40
 80025e2:	d006      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d81d      	bhi.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d009      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d010      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80025f0:	e018      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4a88      	ldr	r2, [pc, #544]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025fe:	e015      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fb02 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 800260c:	4603      	mov	r3, r0
 800260e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002610:	e00c      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3320      	adds	r3, #32
 8002616:	2100      	movs	r1, #0
 8002618:	4618      	mov	r0, r3
 800261a:	f000 fbed 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002622:	e003      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	74fb      	strb	r3, [r7, #19]
      break;
 8002628:	e000      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800262a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10b      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002632:	4b79      	ldr	r3, [pc, #484]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002634:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002638:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002640:	4975      	ldr	r1, [pc, #468]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002648:	e001      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d047      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002662:	d030      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d82a      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800266a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800266e:	d02a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002674:	d824      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800267a:	d008      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800267c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002680:	d81e      	bhi.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268a:	d010      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800268c:	e018      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800268e:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4a61      	ldr	r2, [pc, #388]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002698:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800269a:	e015      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3304      	adds	r3, #4
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fab4 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ac:	e00c      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3320      	adds	r3, #32
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fb9f 	bl	8002df8 <RCCEx_PLLSAI2_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026be:	e003      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	74fb      	strb	r3, [r7, #19]
      break;
 80026c4:	e000      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80026c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10b      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ce:	4b52      	ldr	r3, [pc, #328]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	494e      	ldr	r1, [pc, #312]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80026e4:	e001      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 809f 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026fc:	4b46      	ldr	r3, [pc, #280]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800270c:	2300      	movs	r3, #0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00d      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b41      	ldr	r3, [pc, #260]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002716:	4a40      	ldr	r2, [pc, #256]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
 800271e:	4b3e      	ldr	r3, [pc, #248]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3a      	ldr	r2, [pc, #232]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800273a:	f7fe fcdd 	bl	80010f8 <HAL_GetTick>
 800273e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002740:	e009      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7fe fcd9 	bl	80010f8 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d902      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	74fb      	strb	r3, [r7, #19]
        break;
 8002754:	e005      	b.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ef      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002762:	7cfb      	ldrb	r3, [r7, #19]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d15b      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002768:	4b2b      	ldr	r3, [pc, #172]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d01f      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	429a      	cmp	r2, r3
 8002784:	d019      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002786:	4b24      	ldr	r3, [pc, #144]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002792:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800279a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	4a1b      	ldr	r2, [pc, #108]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027b2:	4a19      	ldr	r2, [pc, #100]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fc98 	bl	80010f8 <HAL_GetTick>
 80027c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ca:	e00b      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fc94 	bl	80010f8 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	74fb      	strb	r3, [r7, #19]
            break;
 80027e2:	e006      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d0ec      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80027f2:	7cfb      	ldrb	r3, [r7, #19]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10c      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027f8:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	4903      	ldr	r1, [pc, #12]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002810:	e008      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	74bb      	strb	r3, [r7, #18]
 8002816:	e005      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002824:	7c7b      	ldrb	r3, [r7, #17]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d105      	bne.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282a:	4ba0      	ldr	r3, [pc, #640]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	4a9f      	ldr	r2, [pc, #636]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002842:	4b9a      	ldr	r3, [pc, #616]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f023 0203 	bic.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	4996      	ldr	r1, [pc, #600]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00a      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002864:	4b91      	ldr	r3, [pc, #580]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286a:	f023 020c 	bic.w	r2, r3, #12
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	498e      	ldr	r1, [pc, #568]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002886:	4b89      	ldr	r3, [pc, #548]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	4985      	ldr	r1, [pc, #532]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028a8:	4b80      	ldr	r3, [pc, #512]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b6:	497d      	ldr	r1, [pc, #500]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ca:	4b78      	ldr	r3, [pc, #480]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	4974      	ldr	r1, [pc, #464]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	496c      	ldr	r1, [pc, #432]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800290e:	4b67      	ldr	r3, [pc, #412]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800291c:	4963      	ldr	r1, [pc, #396]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00a      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002930:	4b5e      	ldr	r3, [pc, #376]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800293e:	495b      	ldr	r1, [pc, #364]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00a      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002952:	4b56      	ldr	r3, [pc, #344]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002958:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002960:	4952      	ldr	r1, [pc, #328]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002974:	4b4d      	ldr	r3, [pc, #308]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	494a      	ldr	r1, [pc, #296]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00a      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002996:	4b45      	ldr	r3, [pc, #276]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	4941      	ldr	r1, [pc, #260]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029be:	f023 0203 	bic.w	r2, r3, #3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	4939      	ldr	r1, [pc, #228]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d028      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e8:	4930      	ldr	r1, [pc, #192]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f8:	d106      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a04:	60d3      	str	r3, [r2, #12]
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f8f9 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d04d      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a40:	d108      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a48:	4a18      	ldr	r2, [pc, #96]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a52:	e012      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a5a:	4a14      	ldr	r2, [pc, #80]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a72:	490e      	ldr	r1, [pc, #56]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a82:	d106      	bne.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4a08      	ldr	r2, [pc, #32]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a8e:	60d3      	str	r3, [r2, #12]
 8002a90:	e020      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a9a:	d109      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	60d3      	str	r3, [r2, #12]
 8002aa8:	e014      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f8a5 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d028      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ae0:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aee:	4947      	ldr	r1, [pc, #284]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002afe:	d106      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b00:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a41      	ldr	r2, [pc, #260]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0a:	60d3      	str	r3, [r2, #12]
 8002b0c:	e011      	b.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f876 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01e      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b3e:	4b33      	ldr	r3, [pc, #204]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4e:	492f      	ldr	r1, [pc, #188]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f851 	bl	8002c10 <RCCEx_PLLSAI1_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002b78:	7cfb      	ldrb	r3, [r7, #19]
 8002b7a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b88:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b8e:	f023 0204 	bic.w	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b98:	491c      	ldr	r1, [pc, #112]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002bac:	4b17      	ldr	r3, [pc, #92]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bb2:	f023 0218 	bic.w	r2, r3, #24
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	4913      	ldr	r1, [pc, #76]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d017      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002be0:	490a      	ldr	r1, [pc, #40]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bf2:	d105      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c00:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000

08002c10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c1e:	4b72      	ldr	r3, [pc, #456]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00e      	beq.n	8002c48 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c2a:	4b6f      	ldr	r3, [pc, #444]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0203 	and.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d103      	bne.n	8002c42 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d142      	bne.n	8002cc8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
 8002c46:	e03f      	b.n	8002cc8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d018      	beq.n	8002c82 <RCCEx_PLLSAI1_Config+0x72>
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d825      	bhi.n	8002ca0 <RCCEx_PLLSAI1_Config+0x90>
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d002      	beq.n	8002c5e <RCCEx_PLLSAI1_Config+0x4e>
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d009      	beq.n	8002c70 <RCCEx_PLLSAI1_Config+0x60>
 8002c5c:	e020      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c5e:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d11d      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6e:	e01a      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c70:	4b5d      	ldr	r3, [pc, #372]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d116      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c80:	e013      	b.n	8002caa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10f      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c8e:	4b56      	ldr	r3, [pc, #344]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c9e:	e006      	b.n	8002cae <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca4:	e004      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e002      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002caa:	bf00      	nop
 8002cac:	e000      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002cae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4949      	ldr	r1, [pc, #292]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 8086 	bne.w	8002ddc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cd0:	4b45      	ldr	r3, [pc, #276]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a44      	ldr	r2, [pc, #272]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cdc:	f7fe fa0c 	bl	80010f8 <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce2:	e009      	b.n	8002cf8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce4:	f7fe fa08 	bl	80010f8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	73fb      	strb	r3, [r7, #15]
        break;
 8002cf6:	e005      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1ef      	bne.n	8002ce4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d168      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d10:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	4b35      	ldr	r3, [pc, #212]	; (8002dec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6892      	ldr	r2, [r2, #8]
 8002d1c:	0211      	lsls	r1, r2, #8
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68d2      	ldr	r2, [r2, #12]
 8002d22:	06d2      	lsls	r2, r2, #27
 8002d24:	4311      	orrs	r1, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6852      	ldr	r2, [r2, #4]
 8002d2a:	3a01      	subs	r2, #1
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	492d      	ldr	r1, [pc, #180]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	610b      	str	r3, [r1, #16]
 8002d36:	e02d      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d115      	bne.n	8002d6a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d40:	691a      	ldr	r2, [r3, #16]
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	0211      	lsls	r1, r2, #8
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6912      	ldr	r2, [r2, #16]
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0552      	lsls	r2, r2, #21
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6852      	ldr	r2, [r2, #4]
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	430a      	orrs	r2, r1
 8002d62:	4921      	ldr	r1, [pc, #132]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	610b      	str	r3, [r1, #16]
 8002d68:	e014      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6892      	ldr	r2, [r2, #8]
 8002d76:	0211      	lsls	r1, r2, #8
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6952      	ldr	r2, [r2, #20]
 8002d7c:	0852      	lsrs	r2, r2, #1
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0652      	lsls	r2, r2, #25
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	3a01      	subs	r2, #1
 8002d8a:	0112      	lsls	r2, r2, #4
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	4916      	ldr	r1, [pc, #88]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d94:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fe f9aa 	bl	80010f8 <HAL_GetTick>
 8002da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002da6:	e009      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002da8:	f7fe f9a6 	bl	80010f8 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d902      	bls.n	8002dbc <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	73fb      	strb	r3, [r7, #15]
          break;
 8002dba:	e005      	b.n	8002dc8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dbc:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0ef      	beq.n	8002da8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dce:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dd0:	691a      	ldr	r2, [r3, #16]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	4904      	ldr	r1, [pc, #16]	; (8002de8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	07ff800f 	.word	0x07ff800f
 8002df0:	ff9f800f 	.word	0xff9f800f
 8002df4:	f9ff800f 	.word	0xf9ff800f

08002df8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e02:	2300      	movs	r3, #0
 8002e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e06:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00e      	beq.n	8002e30 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e12:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0203 	and.w	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d103      	bne.n	8002e2a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
       ||
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d142      	bne.n	8002eb0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
 8002e2e:	e03f      	b.n	8002eb0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d018      	beq.n	8002e6a <RCCEx_PLLSAI2_Config+0x72>
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d825      	bhi.n	8002e88 <RCCEx_PLLSAI2_Config+0x90>
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d002      	beq.n	8002e46 <RCCEx_PLLSAI2_Config+0x4e>
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d009      	beq.n	8002e58 <RCCEx_PLLSAI2_Config+0x60>
 8002e44:	e020      	b.n	8002e88 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e46:	4b62      	ldr	r3, [pc, #392]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d11d      	bne.n	8002e8e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e56:	e01a      	b.n	8002e8e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e58:	4b5d      	ldr	r3, [pc, #372]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d116      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e68:	e013      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e6a:	4b59      	ldr	r3, [pc, #356]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e86:	e006      	b.n	8002e96 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	e004      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e002      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e96:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002e9e:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f023 0203 	bic.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4949      	ldr	r1, [pc, #292]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f040 8086 	bne.w	8002fc4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002eb8:	4b45      	ldr	r3, [pc, #276]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a44      	ldr	r2, [pc, #272]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec4:	f7fe f918 	bl	80010f8 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eca:	e009      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ecc:	f7fe f914 	bl	80010f8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d902      	bls.n	8002ee0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ede:	e005      	b.n	8002eec <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ef      	bne.n	8002ecc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d168      	bne.n	8002fc4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d113      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ef8:	4b35      	ldr	r3, [pc, #212]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6892      	ldr	r2, [r2, #8]
 8002f04:	0211      	lsls	r1, r2, #8
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68d2      	ldr	r2, [r2, #12]
 8002f0a:	06d2      	lsls	r2, r2, #27
 8002f0c:	4311      	orrs	r1, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6852      	ldr	r2, [r2, #4]
 8002f12:	3a01      	subs	r2, #1
 8002f14:	0112      	lsls	r2, r2, #4
 8002f16:	430a      	orrs	r2, r1
 8002f18:	492d      	ldr	r1, [pc, #180]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	614b      	str	r3, [r1, #20]
 8002f1e:	e02d      	b.n	8002f7c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d115      	bne.n	8002f52 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f28:	695a      	ldr	r2, [r3, #20]
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <RCCEx_PLLSAI2_Config+0x1e0>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6892      	ldr	r2, [r2, #8]
 8002f32:	0211      	lsls	r1, r2, #8
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6912      	ldr	r2, [r2, #16]
 8002f38:	0852      	lsrs	r2, r2, #1
 8002f3a:	3a01      	subs	r2, #1
 8002f3c:	0552      	lsls	r2, r2, #21
 8002f3e:	4311      	orrs	r1, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6852      	ldr	r2, [r2, #4]
 8002f44:	3a01      	subs	r2, #1
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	4921      	ldr	r1, [pc, #132]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	614b      	str	r3, [r1, #20]
 8002f50:	e014      	b.n	8002f7c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f54:	695a      	ldr	r2, [r3, #20]
 8002f56:	4b21      	ldr	r3, [pc, #132]	; (8002fdc <RCCEx_PLLSAI2_Config+0x1e4>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	0211      	lsls	r1, r2, #8
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6952      	ldr	r2, [r2, #20]
 8002f64:	0852      	lsrs	r2, r2, #1
 8002f66:	3a01      	subs	r2, #1
 8002f68:	0652      	lsls	r2, r2, #25
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	3a01      	subs	r2, #1
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	430a      	orrs	r2, r1
 8002f76:	4916      	ldr	r1, [pc, #88]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7fe f8b6 	bl	80010f8 <HAL_GetTick>
 8002f8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f8e:	e009      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f90:	f7fe f8b2 	bl	80010f8 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fa2:	e005      	b.n	8002fb0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0ef      	beq.n	8002f90 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	4904      	ldr	r1, [pc, #16]	; (8002fd0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	07ff800f 	.word	0x07ff800f
 8002fd8:	ff9f800f 	.word	0xff9f800f
 8002fdc:	f9ff800f 	.word	0xf9ff800f

08002fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e042      	b.n	8003078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f001 f975 	bl	80042f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2224      	movs	r2, #36	; 0x24
 800300e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f998 	bl	8003358 <UART_SetConfig>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e022      	b.n	8003078 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fc88 	bl	8003950 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800304e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800305e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fd0f 	bl	8003a94 <UART_CheckIdleState>
 8003076:	4603      	mov	r3, r0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	4613      	mov	r3, r2
 800308e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003096:	2b20      	cmp	r3, #32
 8003098:	f040 8084 	bne.w	80031a4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_UART_Transmit+0x28>
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d101      	bne.n	80030ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e07c      	b.n	80031a6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Transmit+0x3a>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e075      	b.n	80031a6 <HAL_UART_Transmit+0x126>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2221      	movs	r2, #33	; 0x21
 80030ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d2:	f7fe f811 	bl	80010f8 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f0:	d108      	bne.n	8003104 <HAL_UART_Transmit+0x84>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	e003      	b.n	800310c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003114:	e02d      	b.n	8003172 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	; 0x80
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fd02 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e03a      	b.n	80031a6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10b      	bne.n	800314e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	881a      	ldrh	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003142:	b292      	uxth	r2, r2
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	3302      	adds	r3, #2
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e008      	b.n	8003160 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b292      	uxth	r2, r2
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1cb      	bne.n	8003116 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	2140      	movs	r1, #64	; 0x40
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fcce 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e006      	b.n	80031a6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80031a0:	2300      	movs	r3, #0
 80031a2:	e000      	b.n	80031a6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80031a4:	2302      	movs	r3, #2
  }
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3720      	adds	r7, #32
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b08a      	sub	sp, #40	; 0x28
 80031b2:	af02      	add	r7, sp, #8
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	4613      	mov	r3, r2
 80031bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	f040 80c1 	bne.w	800334c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <HAL_UART_Receive+0x28>
 80031d0:	88fb      	ldrh	r3, [r7, #6]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e0b9      	b.n	800334e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Receive+0x3a>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e0b2      	b.n	800334e <HAL_UART_Receive+0x1a0>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2222      	movs	r2, #34	; 0x22
 80031fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003206:	f7fd ff77 	bl	80010f8 <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003224:	d10e      	bne.n	8003244 <HAL_UART_Receive+0x96>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_UART_Receive+0x8c>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003234:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003238:	e02d      	b.n	8003296 <HAL_UART_Receive+0xe8>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003242:	e028      	b.n	8003296 <HAL_UART_Receive+0xe8>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10d      	bne.n	8003268 <HAL_UART_Receive+0xba>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_UART_Receive+0xb0>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800325c:	e01b      	b.n	8003296 <HAL_UART_Receive+0xe8>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	227f      	movs	r2, #127	; 0x7f
 8003262:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003266:	e016      	b.n	8003296 <HAL_UART_Receive+0xe8>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003270:	d10d      	bne.n	800328e <HAL_UART_Receive+0xe0>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <HAL_UART_Receive+0xd6>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	227f      	movs	r2, #127	; 0x7f
 800327e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003282:	e008      	b.n	8003296 <HAL_UART_Receive+0xe8>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	223f      	movs	r2, #63	; 0x3f
 8003288:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800328c:	e003      	b.n	8003296 <HAL_UART_Receive+0xe8>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800329c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	d108      	bne.n	80032ba <HAL_UART_Receive+0x10c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
 80032b8:	e003      	b.n	80032c2 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80032ca:	e033      	b.n	8003334 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2120      	movs	r1, #32
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fc27 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e033      	b.n	800334e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10c      	bne.n	8003306 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	8a7b      	ldrh	r3, [r7, #18]
 80032f6:	4013      	ands	r3, r2
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	3302      	adds	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e00d      	b.n	8003322 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800330c:	b29b      	uxth	r3, r3
 800330e:	b2da      	uxtb	r2, r3
 8003310:	8a7b      	ldrh	r3, [r7, #18]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	4013      	ands	r3, r2
 8003316:	b2da      	uxtb	r2, r3
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1c5      	bne.n	80032cc <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3720      	adds	r7, #32
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b08c      	sub	sp, #48	; 0x30
 800335e:	af00      	add	r7, sp, #0
 8003360:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	431a      	orrs	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	4313      	orrs	r3, r2
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4baa      	ldr	r3, [pc, #680]	; (8003630 <UART_SetConfig+0x2d8>)
 8003388:	4013      	ands	r3, r2
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003390:	430b      	orrs	r3, r1
 8003392:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a9f      	ldr	r2, [pc, #636]	; (8003634 <UART_SetConfig+0x2dc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d004      	beq.n	80033c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c0:	4313      	orrs	r3, r2
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d8:	430b      	orrs	r3, r1
 80033da:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f023 010f 	bic.w	r1, r3, #15
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a90      	ldr	r2, [pc, #576]	; (8003638 <UART_SetConfig+0x2e0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d125      	bne.n	8003448 <UART_SetConfig+0xf0>
 80033fc:	4b8f      	ldr	r3, [pc, #572]	; (800363c <UART_SetConfig+0x2e4>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b03      	cmp	r3, #3
 8003408:	d81a      	bhi.n	8003440 <UART_SetConfig+0xe8>
 800340a:	a201      	add	r2, pc, #4	; (adr r2, 8003410 <UART_SetConfig+0xb8>)
 800340c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003410:	08003421 	.word	0x08003421
 8003414:	08003431 	.word	0x08003431
 8003418:	08003429 	.word	0x08003429
 800341c:	08003439 	.word	0x08003439
 8003420:	2301      	movs	r3, #1
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003426:	e116      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003428:	2302      	movs	r3, #2
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800342e:	e112      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003430:	2304      	movs	r3, #4
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003436:	e10e      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003438:	2308      	movs	r3, #8
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343e:	e10a      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003440:	2310      	movs	r3, #16
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003446:	e106      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a7c      	ldr	r2, [pc, #496]	; (8003640 <UART_SetConfig+0x2e8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d138      	bne.n	80034c4 <UART_SetConfig+0x16c>
 8003452:	4b7a      	ldr	r3, [pc, #488]	; (800363c <UART_SetConfig+0x2e4>)
 8003454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b0c      	cmp	r3, #12
 800345e:	d82d      	bhi.n	80034bc <UART_SetConfig+0x164>
 8003460:	a201      	add	r2, pc, #4	; (adr r2, 8003468 <UART_SetConfig+0x110>)
 8003462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003466:	bf00      	nop
 8003468:	0800349d 	.word	0x0800349d
 800346c:	080034bd 	.word	0x080034bd
 8003470:	080034bd 	.word	0x080034bd
 8003474:	080034bd 	.word	0x080034bd
 8003478:	080034ad 	.word	0x080034ad
 800347c:	080034bd 	.word	0x080034bd
 8003480:	080034bd 	.word	0x080034bd
 8003484:	080034bd 	.word	0x080034bd
 8003488:	080034a5 	.word	0x080034a5
 800348c:	080034bd 	.word	0x080034bd
 8003490:	080034bd 	.word	0x080034bd
 8003494:	080034bd 	.word	0x080034bd
 8003498:	080034b5 	.word	0x080034b5
 800349c:	2300      	movs	r3, #0
 800349e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a2:	e0d8      	b.n	8003656 <UART_SetConfig+0x2fe>
 80034a4:	2302      	movs	r3, #2
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034aa:	e0d4      	b.n	8003656 <UART_SetConfig+0x2fe>
 80034ac:	2304      	movs	r3, #4
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b2:	e0d0      	b.n	8003656 <UART_SetConfig+0x2fe>
 80034b4:	2308      	movs	r3, #8
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ba:	e0cc      	b.n	8003656 <UART_SetConfig+0x2fe>
 80034bc:	2310      	movs	r3, #16
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c2:	e0c8      	b.n	8003656 <UART_SetConfig+0x2fe>
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a5e      	ldr	r2, [pc, #376]	; (8003644 <UART_SetConfig+0x2ec>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d125      	bne.n	800351a <UART_SetConfig+0x1c2>
 80034ce:	4b5b      	ldr	r3, [pc, #364]	; (800363c <UART_SetConfig+0x2e4>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d8:	2b30      	cmp	r3, #48	; 0x30
 80034da:	d016      	beq.n	800350a <UART_SetConfig+0x1b2>
 80034dc:	2b30      	cmp	r3, #48	; 0x30
 80034de:	d818      	bhi.n	8003512 <UART_SetConfig+0x1ba>
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d00a      	beq.n	80034fa <UART_SetConfig+0x1a2>
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d814      	bhi.n	8003512 <UART_SetConfig+0x1ba>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <UART_SetConfig+0x19a>
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d008      	beq.n	8003502 <UART_SetConfig+0x1aa>
 80034f0:	e00f      	b.n	8003512 <UART_SetConfig+0x1ba>
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f8:	e0ad      	b.n	8003656 <UART_SetConfig+0x2fe>
 80034fa:	2302      	movs	r3, #2
 80034fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003500:	e0a9      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003502:	2304      	movs	r3, #4
 8003504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003508:	e0a5      	b.n	8003656 <UART_SetConfig+0x2fe>
 800350a:	2308      	movs	r3, #8
 800350c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003510:	e0a1      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003512:	2310      	movs	r3, #16
 8003514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003518:	e09d      	b.n	8003656 <UART_SetConfig+0x2fe>
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a4a      	ldr	r2, [pc, #296]	; (8003648 <UART_SetConfig+0x2f0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <UART_SetConfig+0x218>
 8003524:	4b45      	ldr	r3, [pc, #276]	; (800363c <UART_SetConfig+0x2e4>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800352e:	2bc0      	cmp	r3, #192	; 0xc0
 8003530:	d016      	beq.n	8003560 <UART_SetConfig+0x208>
 8003532:	2bc0      	cmp	r3, #192	; 0xc0
 8003534:	d818      	bhi.n	8003568 <UART_SetConfig+0x210>
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d00a      	beq.n	8003550 <UART_SetConfig+0x1f8>
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d814      	bhi.n	8003568 <UART_SetConfig+0x210>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <UART_SetConfig+0x1f0>
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d008      	beq.n	8003558 <UART_SetConfig+0x200>
 8003546:	e00f      	b.n	8003568 <UART_SetConfig+0x210>
 8003548:	2300      	movs	r3, #0
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354e:	e082      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003550:	2302      	movs	r3, #2
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003556:	e07e      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003558:	2304      	movs	r3, #4
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355e:	e07a      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003560:	2308      	movs	r3, #8
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e076      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003568:	2310      	movs	r3, #16
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356e:	e072      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a35      	ldr	r2, [pc, #212]	; (800364c <UART_SetConfig+0x2f4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d12a      	bne.n	80035d0 <UART_SetConfig+0x278>
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <UART_SetConfig+0x2e4>)
 800357c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003588:	d01a      	beq.n	80035c0 <UART_SetConfig+0x268>
 800358a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800358e:	d81b      	bhi.n	80035c8 <UART_SetConfig+0x270>
 8003590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003594:	d00c      	beq.n	80035b0 <UART_SetConfig+0x258>
 8003596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800359a:	d815      	bhi.n	80035c8 <UART_SetConfig+0x270>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <UART_SetConfig+0x250>
 80035a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035a4:	d008      	beq.n	80035b8 <UART_SetConfig+0x260>
 80035a6:	e00f      	b.n	80035c8 <UART_SetConfig+0x270>
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ae:	e052      	b.n	8003656 <UART_SetConfig+0x2fe>
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b6:	e04e      	b.n	8003656 <UART_SetConfig+0x2fe>
 80035b8:	2304      	movs	r3, #4
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035be:	e04a      	b.n	8003656 <UART_SetConfig+0x2fe>
 80035c0:	2308      	movs	r3, #8
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c6:	e046      	b.n	8003656 <UART_SetConfig+0x2fe>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e042      	b.n	8003656 <UART_SetConfig+0x2fe>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a17      	ldr	r2, [pc, #92]	; (8003634 <UART_SetConfig+0x2dc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d13a      	bne.n	8003650 <UART_SetConfig+0x2f8>
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <UART_SetConfig+0x2e4>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e8:	d01a      	beq.n	8003620 <UART_SetConfig+0x2c8>
 80035ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035ee:	d81b      	bhi.n	8003628 <UART_SetConfig+0x2d0>
 80035f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f4:	d00c      	beq.n	8003610 <UART_SetConfig+0x2b8>
 80035f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fa:	d815      	bhi.n	8003628 <UART_SetConfig+0x2d0>
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <UART_SetConfig+0x2b0>
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d008      	beq.n	8003618 <UART_SetConfig+0x2c0>
 8003606:	e00f      	b.n	8003628 <UART_SetConfig+0x2d0>
 8003608:	2300      	movs	r3, #0
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360e:	e022      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003610:	2302      	movs	r3, #2
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003616:	e01e      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003618:	2304      	movs	r3, #4
 800361a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361e:	e01a      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003620:	2308      	movs	r3, #8
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003626:	e016      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003628:	2310      	movs	r3, #16
 800362a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362e:	e012      	b.n	8003656 <UART_SetConfig+0x2fe>
 8003630:	cfff69f3 	.word	0xcfff69f3
 8003634:	40008000 	.word	0x40008000
 8003638:	40013800 	.word	0x40013800
 800363c:	40021000 	.word	0x40021000
 8003640:	40004400 	.word	0x40004400
 8003644:	40004800 	.word	0x40004800
 8003648:	40004c00 	.word	0x40004c00
 800364c:	40005000 	.word	0x40005000
 8003650:	2310      	movs	r3, #16
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4aae      	ldr	r2, [pc, #696]	; (8003914 <UART_SetConfig+0x5bc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	f040 8097 	bne.w	8003790 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003662:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003666:	2b08      	cmp	r3, #8
 8003668:	d823      	bhi.n	80036b2 <UART_SetConfig+0x35a>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <UART_SetConfig+0x318>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003695 	.word	0x08003695
 8003674:	080036b3 	.word	0x080036b3
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036b3 	.word	0x080036b3
 8003680:	080036a3 	.word	0x080036a3
 8003684:	080036b3 	.word	0x080036b3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036b3 	.word	0x080036b3
 8003690:	080036ab 	.word	0x080036ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003694:	f7fe fea0 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 8003698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800369a:	e010      	b.n	80036be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b9e      	ldr	r3, [pc, #632]	; (8003918 <UART_SetConfig+0x5c0>)
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036a0:	e00d      	b.n	80036be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7fe fe01 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80036a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80036a8:	e009      	b.n	80036be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80036b0:	e005      	b.n	80036be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80036bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 8130 	beq.w	8003926 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	4a94      	ldr	r2, [pc, #592]	; (800391c <UART_SetConfig+0x5c4>)
 80036cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d305      	bcc.n	80036f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d903      	bls.n	80036fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036fc:	e113      	b.n	8003926 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	2200      	movs	r2, #0
 8003702:	60bb      	str	r3, [r7, #8]
 8003704:	60fa      	str	r2, [r7, #12]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	4a84      	ldr	r2, [pc, #528]	; (800391c <UART_SetConfig+0x5c4>)
 800370c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003710:	b29b      	uxth	r3, r3
 8003712:	2200      	movs	r2, #0
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800371c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003720:	f7fd faca 	bl	8000cb8 <__aeabi_uldivmod>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	020b      	lsls	r3, r1, #8
 8003736:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800373a:	0202      	lsls	r2, r0, #8
 800373c:	6979      	ldr	r1, [r7, #20]
 800373e:	6849      	ldr	r1, [r1, #4]
 8003740:	0849      	lsrs	r1, r1, #1
 8003742:	2000      	movs	r0, #0
 8003744:	460c      	mov	r4, r1
 8003746:	4605      	mov	r5, r0
 8003748:	eb12 0804 	adds.w	r8, r2, r4
 800374c:	eb43 0905 	adc.w	r9, r3, r5
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	469a      	mov	sl, r3
 8003758:	4693      	mov	fp, r2
 800375a:	4652      	mov	r2, sl
 800375c:	465b      	mov	r3, fp
 800375e:	4640      	mov	r0, r8
 8003760:	4649      	mov	r1, r9
 8003762:	f7fd faa9 	bl	8000cb8 <__aeabi_uldivmod>
 8003766:	4602      	mov	r2, r0
 8003768:	460b      	mov	r3, r1
 800376a:	4613      	mov	r3, r2
 800376c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003774:	d308      	bcc.n	8003788 <UART_SetConfig+0x430>
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377c:	d204      	bcs.n	8003788 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e0ce      	b.n	8003926 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800378e:	e0ca      	b.n	8003926 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003798:	d166      	bne.n	8003868 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800379a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d827      	bhi.n	80037f2 <UART_SetConfig+0x49a>
 80037a2:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <UART_SetConfig+0x450>)
 80037a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a8:	080037cd 	.word	0x080037cd
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037dd 	.word	0x080037dd
 80037b4:	080037f3 	.word	0x080037f3
 80037b8:	080037e3 	.word	0x080037e3
 80037bc:	080037f3 	.word	0x080037f3
 80037c0:	080037f3 	.word	0x080037f3
 80037c4:	080037f3 	.word	0x080037f3
 80037c8:	080037eb 	.word	0x080037eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037cc:	f7fe fe04 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037d2:	e014      	b.n	80037fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037d4:	f7fe fe16 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037da:	e010      	b.n	80037fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <UART_SetConfig+0x5c0>)
 80037de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037e0:	e00d      	b.n	80037fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7fe fd61 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80037e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037e8:	e009      	b.n	80037fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037f0:	e005      	b.n	80037fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80037f2:	2300      	movs	r3, #0
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8090 	beq.w	8003926 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	4a44      	ldr	r2, [pc, #272]	; (800391c <UART_SetConfig+0x5c4>)
 800380c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003810:	461a      	mov	r2, r3
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	fbb3 f3f2 	udiv	r3, r3, r2
 8003818:	005a      	lsls	r2, r3, #1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	441a      	add	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b0f      	cmp	r3, #15
 8003830:	d916      	bls.n	8003860 <UART_SetConfig+0x508>
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003838:	d212      	bcs.n	8003860 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	b29b      	uxth	r3, r3
 800383e:	f023 030f 	bic.w	r3, r3, #15
 8003842:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	085b      	lsrs	r3, r3, #1
 8003848:	b29b      	uxth	r3, r3
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	b29a      	uxth	r2, r3
 8003850:	8bfb      	ldrh	r3, [r7, #30]
 8003852:	4313      	orrs	r3, r2
 8003854:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	8bfa      	ldrh	r2, [r7, #30]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	e062      	b.n	8003926 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003866:	e05e      	b.n	8003926 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003868:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800386c:	2b08      	cmp	r3, #8
 800386e:	d828      	bhi.n	80038c2 <UART_SetConfig+0x56a>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <UART_SetConfig+0x520>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	0800389d 	.word	0x0800389d
 800387c:	080038a5 	.word	0x080038a5
 8003880:	080038ad 	.word	0x080038ad
 8003884:	080038c3 	.word	0x080038c3
 8003888:	080038b3 	.word	0x080038b3
 800388c:	080038c3 	.word	0x080038c3
 8003890:	080038c3 	.word	0x080038c3
 8003894:	080038c3 	.word	0x080038c3
 8003898:	080038bb 	.word	0x080038bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800389c:	f7fe fd9c 	bl	80023d8 <HAL_RCC_GetPCLK1Freq>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038a2:	e014      	b.n	80038ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038a4:	f7fe fdae 	bl	8002404 <HAL_RCC_GetPCLK2Freq>
 80038a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038aa:	e010      	b.n	80038ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <UART_SetConfig+0x5c0>)
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038b0:	e00d      	b.n	80038ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe fcf9 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 80038b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038b8:	e009      	b.n	80038ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038c0:	e005      	b.n	80038ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038cc:	bf00      	nop
    }

    if (pclk != 0U)
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d028      	beq.n	8003926 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	4a10      	ldr	r2, [pc, #64]	; (800391c <UART_SetConfig+0x5c4>)
 80038da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038de:	461a      	mov	r2, r3
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	441a      	add	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	d910      	bls.n	8003920 <UART_SetConfig+0x5c8>
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d20c      	bcs.n	8003920 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003906:	6a3b      	ldr	r3, [r7, #32]
 8003908:	b29a      	uxth	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e009      	b.n	8003926 <UART_SetConfig+0x5ce>
 8003912:	bf00      	nop
 8003914:	40008000 	.word	0x40008000
 8003918:	00f42400 	.word	0x00f42400
 800391c:	08009d4c 	.word	0x08009d4c
      }
      else
      {
        ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2201      	movs	r2, #1
 800392a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	2201      	movs	r2, #1
 8003932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003942:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003946:	4618      	mov	r0, r3
 8003948:	3730      	adds	r7, #48	; 0x30
 800394a:	46bd      	mov	sp, r7
 800394c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	430a      	orrs	r2, r1
 8003978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d00a      	beq.n	80039be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d01a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a4e:	d10a      	bne.n	8003a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aa4:	f7fd fb28 	bl	80010f8 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0308 	and.w	r3, r3, #8
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d10e      	bne.n	8003ad6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f82f 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e025      	b.n	8003b22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d10e      	bne.n	8003b02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f819 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e00f      	b.n	8003b22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b09c      	sub	sp, #112	; 0x70
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	e0a9      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b42:	f000 80a5 	beq.w	8003c90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b46:	f7fd fad7 	bl	80010f8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d302      	bcc.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x32>
 8003b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d140      	bne.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b70:	667b      	str	r3, [r7, #100]	; 0x64
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e6      	bne.n	8003b5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3308      	adds	r3, #8
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3308      	adds	r3, #8
 8003bac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bae:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e069      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0304 	and.w	r3, r3, #4
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d051      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfa:	d149      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
 8003c26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e6      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	e853 3f00 	ldrex	r3, [r3]
 8003c46:	613b      	str	r3, [r7, #16]
   return(result);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3308      	adds	r3, #8
 8003c56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c58:	623a      	str	r2, [r7, #32]
 8003c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5c:	69f9      	ldr	r1, [r7, #28]
 8003c5e:	6a3a      	ldr	r2, [r7, #32]
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1e5      	bne.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e010      	b.n	8003cb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	69da      	ldr	r2, [r3, #28]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	f43f af46 	beq.w	8003b3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3770      	adds	r7, #112	; 0x70
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e027      	b.n	8003d20 <HAL_UARTEx_DisableFifoMode+0x66>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2224      	movs	r2, #36	; 0x24
 8003cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003cfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d101      	bne.n	8003d44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d40:	2302      	movs	r3, #2
 8003d42:	e02d      	b.n	8003da0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f84f 	bl	8003e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e02d      	b.n	8003e1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2224      	movs	r2, #36	; 0x24
 8003dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f811 	bl	8003e24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d108      	bne.n	8003e46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e44:	e031      	b.n	8003eaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e46:	2308      	movs	r3, #8
 8003e48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	0e5b      	lsrs	r3, r3, #25
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	0f5b      	lsrs	r3, r3, #29
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e6e:	7bbb      	ldrb	r3, [r7, #14]
 8003e70:	7b3a      	ldrb	r2, [r7, #12]
 8003e72:	4911      	ldr	r1, [pc, #68]	; (8003eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8003e74:	5c8a      	ldrb	r2, [r1, r2]
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e7a:	7b3a      	ldrb	r2, [r7, #12]
 8003e7c:	490f      	ldr	r1, [pc, #60]	; (8003ebc <UARTEx_SetNbDataToProcess+0x98>)
 8003e7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e80:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	7b7a      	ldrb	r2, [r7, #13]
 8003e90:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <UARTEx_SetNbDataToProcess+0x94>)
 8003e92:	5c8a      	ldrb	r2, [r1, r2]
 8003e94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e98:	7b7a      	ldrb	r2, [r7, #13]
 8003e9a:	4908      	ldr	r1, [pc, #32]	; (8003ebc <UARTEx_SetNbDataToProcess+0x98>)
 8003e9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	08009d64 	.word	0x08009d64
 8003ebc:	08009d6c 	.word	0x08009d6c

08003ec0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003ec8:	1d39      	adds	r1, r7, #4
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ece:	2201      	movs	r2, #1
 8003ed0:	4803      	ldr	r0, [pc, #12]	; (8003ee0 <__io_putchar+0x20>)
 8003ed2:	f7ff f8d5 	bl	8003080 <HAL_UART_Transmit>
  return ch;
 8003ed6:	687b      	ldr	r3, [r7, #4]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000200 	.word	0x20000200

08003ee4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <__io_getchar+0x38>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003ef6:	1df9      	adds	r1, r7, #7
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003efc:	2201      	movs	r2, #1
 8003efe:	4807      	ldr	r0, [pc, #28]	; (8003f1c <__io_getchar+0x38>)
 8003f00:	f7ff f955 	bl	80031ae <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8003f04:	1df9      	adds	r1, r7, #7
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	4803      	ldr	r0, [pc, #12]	; (8003f1c <__io_getchar+0x38>)
 8003f0e:	f7ff f8b7 	bl	8003080 <HAL_UART_Transmit>
  return ch;
 8003f12:	79fb      	ldrb	r3, [r7, #7]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	20000200 	.word	0x20000200

08003f20 <updateMorseLetter>:
		printf("Button Pressed. \n\r");
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
	}
}

void updateMorseLetter(char letter){
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]

	// quad dash will represent a space for this project
	morseLetterSize = 4;
 8003f2a:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <updateMorseLetter+0x70>)
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	601a      	str	r2, [r3, #0]
	morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8003f30:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <updateMorseLetter+0x74>)
 8003f32:	222d      	movs	r2, #45	; 0x2d
 8003f34:	701a      	strb	r2, [r3, #0]
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <updateMorseLetter+0x74>)
 8003f38:	222d      	movs	r2, #45	; 0x2d
 8003f3a:	705a      	strb	r2, [r3, #1]
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <updateMorseLetter+0x74>)
 8003f3e:	222d      	movs	r2, #45	; 0x2d
 8003f40:	709a      	strb	r2, [r3, #2]
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <updateMorseLetter+0x74>)
 8003f44:	222d      	movs	r2, #45	; 0x2d
 8003f46:	70da      	strb	r2, [r3, #3]

	switch (letter) {
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	2b61      	cmp	r3, #97	; 0x61
 8003f4c:	d002      	beq.n	8003f54 <updateMorseLetter+0x34>
 8003f4e:	2b62      	cmp	r3, #98	; 0x62
 8003f50:	d009      	beq.n	8003f66 <updateMorseLetter+0x46>
		morseLetterSize = 2;
	case 'b':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
			morseLetterSize = 4;
	}
}
 8003f52:	e017      	b.n	8003f84 <updateMorseLetter+0x64>
		morseLetter[0] = '.'; morseLetter[1] = '-';
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <updateMorseLetter+0x74>)
 8003f56:	222e      	movs	r2, #46	; 0x2e
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <updateMorseLetter+0x74>)
 8003f5c:	222d      	movs	r2, #45	; 0x2d
 8003f5e:	705a      	strb	r2, [r3, #1]
		morseLetterSize = 2;
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <updateMorseLetter+0x70>)
 8003f62:	2202      	movs	r2, #2
 8003f64:	601a      	str	r2, [r3, #0]
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <updateMorseLetter+0x74>)
 8003f68:	222d      	movs	r2, #45	; 0x2d
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <updateMorseLetter+0x74>)
 8003f6e:	222e      	movs	r2, #46	; 0x2e
 8003f70:	705a      	strb	r2, [r3, #1]
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <updateMorseLetter+0x74>)
 8003f74:	222e      	movs	r2, #46	; 0x2e
 8003f76:	709a      	strb	r2, [r3, #2]
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <updateMorseLetter+0x74>)
 8003f7a:	222e      	movs	r2, #46	; 0x2e
 8003f7c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <updateMorseLetter+0x70>)
 8003f80:	2204      	movs	r2, #4
 8003f82:	601a      	str	r2, [r3, #0]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000294 	.word	0x20000294
 8003f94:	20000298 	.word	0x20000298

08003f98 <printMorseLetter>:

void printMorseLetter() {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
	if (morseLetter[0] == '-' && morseLetter[1] == '-' && morseLetter[2] == '-' && morseLetter[3] == '-') {
 8003f9e:	4b15      	ldr	r3, [pc, #84]	; (8003ff4 <printMorseLetter+0x5c>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8003fa4:	d10f      	bne.n	8003fc6 <printMorseLetter+0x2e>
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <printMorseLetter+0x5c>)
 8003fa8:	785b      	ldrb	r3, [r3, #1]
 8003faa:	2b2d      	cmp	r3, #45	; 0x2d
 8003fac:	d10b      	bne.n	8003fc6 <printMorseLetter+0x2e>
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <printMorseLetter+0x5c>)
 8003fb0:	789b      	ldrb	r3, [r3, #2]
 8003fb2:	2b2d      	cmp	r3, #45	; 0x2d
 8003fb4:	d107      	bne.n	8003fc6 <printMorseLetter+0x2e>
 8003fb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <printMorseLetter+0x5c>)
 8003fb8:	78db      	ldrb	r3, [r3, #3]
 8003fba:	2b2d      	cmp	r3, #45	; 0x2d
 8003fbc:	d103      	bne.n	8003fc6 <printMorseLetter+0x2e>
		printf(" *space* ");
 8003fbe:	480e      	ldr	r0, [pc, #56]	; (8003ff8 <printMorseLetter+0x60>)
 8003fc0:	f001 f9ce 	bl	8005360 <iprintf>
 8003fc4:	e012      	b.n	8003fec <printMorseLetter+0x54>
	} else {
		for (int i = 0; i < morseLetterSize; i++){
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	e009      	b.n	8003fe0 <printMorseLetter+0x48>
			printf("%c", morseLetter[i]);
 8003fcc:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <printMorseLetter+0x5c>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 f9db 	bl	8005390 <putchar>
		for (int i = 0; i < morseLetterSize; i++){
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <printMorseLetter+0x64>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	dbf0      	blt.n	8003fcc <printMorseLetter+0x34>
		}
	}
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20000298 	.word	0x20000298
 8003ff8:	08009cec 	.word	0x08009cec
 8003ffc:	20000294 	.word	0x20000294

08004000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004004:	f7fd f810 	bl	8001028 <HAL_Init>

  /* USER CODE BEGIN Init */
  // for scanf
  setvbuf(stdin, NULL, _IONBF, 0);
 8004008:	4b16      	ldr	r3, [pc, #88]	; (8004064 <main+0x64>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6858      	ldr	r0, [r3, #4]
 800400e:	2300      	movs	r3, #0
 8004010:	2202      	movs	r2, #2
 8004012:	2100      	movs	r1, #0
 8004014:	f001 f9ea 	bl	80053ec <setvbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004018:	f000 f832 	bl	8004080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800401c:	f000 f8ce 	bl	80041bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004020:	f000 f880 	bl	8004124 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Input a character: ");
 8004024:	4810      	ldr	r0, [pc, #64]	; (8004068 <main+0x68>)
 8004026:	f001 f99b 	bl	8005360 <iprintf>
	  scanf(" %c\n\r", &inputChar);
 800402a:	4910      	ldr	r1, [pc, #64]	; (800406c <main+0x6c>)
 800402c:	4810      	ldr	r0, [pc, #64]	; (8004070 <main+0x70>)
 800402e:	f001 f9c5 	bl	80053bc <iscanf>
	  printf("You entered: %c \n\r", inputChar); // print character
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <main+0x6c>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	480e      	ldr	r0, [pc, #56]	; (8004074 <main+0x74>)
 800403a:	f001 f991 	bl	8005360 <iprintf>
	  //printf("ASCII Character: %d \n\r", inputChar); // print ASCII character

	  updateMorseLetter(inputChar);
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <main+0x6c>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff6c 	bl	8003f20 <updateMorseLetter>
	  printf("Morse Translation: ");
 8004048:	480b      	ldr	r0, [pc, #44]	; (8004078 <main+0x78>)
 800404a:	f001 f989 	bl	8005360 <iprintf>
	  printMorseLetter();
 800404e:	f7ff ffa3 	bl	8003f98 <printMorseLetter>
	  printf("\n\r");
 8004052:	480a      	ldr	r0, [pc, #40]	; (800407c <main+0x7c>)
 8004054:	f001 f984 	bl	8005360 <iprintf>

	  HAL_Delay(1000);
 8004058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800405c:	f7fd f858 	bl	8001110 <HAL_Delay>
	  printf("Input a character: ");
 8004060:	e7e0      	b.n	8004024 <main+0x24>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	08009cf8 	.word	0x08009cf8
 800406c:	20000290 	.word	0x20000290
 8004070:	08009d0c 	.word	0x08009d0c
 8004074:	08009d14 	.word	0x08009d14
 8004078:	08009d28 	.word	0x08009d28
 800407c:	08009d3c 	.word	0x08009d3c

08004080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b096      	sub	sp, #88	; 0x58
 8004084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004086:	f107 0314 	add.w	r3, r7, #20
 800408a:	2244      	movs	r2, #68	; 0x44
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fae4 	bl	800465c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004094:	463b      	mov	r3, r7
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80040a2:	2000      	movs	r0, #0
 80040a4:	f7fd fb08 	bl	80016b8 <HAL_PWREx_ControlVoltageScaling>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80040ae:	f000 f8f7 	bl	80042a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80040b2:	2310      	movs	r3, #16
 80040b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80040b6:	2301      	movs	r3, #1
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80040be:	2360      	movs	r3, #96	; 0x60
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040c2:	2302      	movs	r3, #2
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80040c6:	2301      	movs	r3, #1
 80040c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80040ce:	233c      	movs	r3, #60	; 0x3c
 80040d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040d2:	2302      	movs	r3, #2
 80040d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80040d6:	2302      	movs	r3, #2
 80040d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80040da:	2302      	movs	r3, #2
 80040dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040de:	f107 0314 	add.w	r3, r7, #20
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fd fb8c 	bl	8001800 <HAL_RCC_OscConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80040ee:	f000 f8d7 	bl	80042a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040f2:	230f      	movs	r3, #15
 80040f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040f6:	2303      	movs	r3, #3
 80040f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004106:	463b      	mov	r3, r7
 8004108:	2105      	movs	r1, #5
 800410a:	4618      	mov	r0, r3
 800410c:	f7fd ff92 	bl	8002034 <HAL_RCC_ClockConfig>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004116:	f000 f8c3 	bl	80042a0 <Error_Handler>
  }
}
 800411a:	bf00      	nop
 800411c:	3758      	adds	r7, #88	; 0x58
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004128:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 800412a:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <MX_USART1_UART_Init+0x94>)
 800412c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800412e:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004134:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004136:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 800414a:	220c      	movs	r2, #12
 800414c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800414e:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004150:	2200      	movs	r2, #0
 8004152:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004156:	2200      	movs	r2, #0
 8004158:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800415a:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 800415c:	2200      	movs	r2, #0
 800415e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004162:	2200      	movs	r2, #0
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004168:	2200      	movs	r2, #0
 800416a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800416c:	4811      	ldr	r0, [pc, #68]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 800416e:	f7fe ff37 	bl	8002fe0 <HAL_UART_Init>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004178:	f000 f892 	bl	80042a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800417c:	2100      	movs	r1, #0
 800417e:	480d      	ldr	r0, [pc, #52]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004180:	f7ff fdd4 	bl	8003d2c <HAL_UARTEx_SetTxFifoThreshold>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800418a:	f000 f889 	bl	80042a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800418e:	2100      	movs	r1, #0
 8004190:	4808      	ldr	r0, [pc, #32]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 8004192:	f7ff fe09 	bl	8003da8 <HAL_UARTEx_SetRxFifoThreshold>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800419c:	f000 f880 	bl	80042a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80041a0:	4804      	ldr	r0, [pc, #16]	; (80041b4 <MX_USART1_UART_Init+0x90>)
 80041a2:	f7ff fd8a 	bl	8003cba <HAL_UARTEx_DisableFifoMode>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80041ac:	f000 f878 	bl	80042a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	20000200 	.word	0x20000200
 80041b8:	40013800 	.word	0x40013800

080041bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c2:	f107 030c 	add.w	r3, r7, #12
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	605a      	str	r2, [r3, #4]
 80041cc:	609a      	str	r2, [r3, #8]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d2:	4b30      	ldr	r3, [pc, #192]	; (8004294 <MX_GPIO_Init+0xd8>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <MX_GPIO_Init+0xd8>)
 80041d8:	f043 0304 	orr.w	r3, r3, #4
 80041dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041de:	4b2d      	ldr	r3, [pc, #180]	; (8004294 <MX_GPIO_Init+0xd8>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	f003 0304 	and.w	r3, r3, #4
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ea:	4b2a      	ldr	r3, [pc, #168]	; (8004294 <MX_GPIO_Init+0xd8>)
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	4a29      	ldr	r2, [pc, #164]	; (8004294 <MX_GPIO_Init+0xd8>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <MX_GPIO_Init+0xd8>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004202:	4b24      	ldr	r3, [pc, #144]	; (8004294 <MX_GPIO_Init+0xd8>)
 8004204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004206:	4a23      	ldr	r2, [pc, #140]	; (8004294 <MX_GPIO_Init+0xd8>)
 8004208:	f043 0302 	orr.w	r3, r3, #2
 800420c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800420e:	4b21      	ldr	r3, [pc, #132]	; (8004294 <MX_GPIO_Init+0xd8>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 800421a:	2200      	movs	r2, #0
 800421c:	2120      	movs	r1, #32
 800421e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004222:	f7fd fa11 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8004226:	2200      	movs	r2, #0
 8004228:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800422c:	481a      	ldr	r0, [pc, #104]	; (8004298 <MX_GPIO_Init+0xdc>)
 800422e:	f7fd fa0b 	bl	8001648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8004232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004238:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800423c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8004242:	f107 030c 	add.w	r3, r7, #12
 8004246:	4619      	mov	r1, r3
 8004248:	4814      	ldr	r0, [pc, #80]	; (800429c <MX_GPIO_Init+0xe0>)
 800424a:	f7fd f86b 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 800424e:	2320      	movs	r3, #32
 8004250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004252:	2301      	movs	r3, #1
 8004254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 800425e:	f107 030c 	add.w	r3, r7, #12
 8004262:	4619      	mov	r1, r3
 8004264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004268:	f7fd f85c 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 800426c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004272:	2301      	movs	r3, #1
 8004274:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 800427e:	f107 030c 	add.w	r3, r7, #12
 8004282:	4619      	mov	r1, r3
 8004284:	4804      	ldr	r0, [pc, #16]	; (8004298 <MX_GPIO_Init+0xdc>)
 8004286:	f7fd f84d 	bl	8001324 <HAL_GPIO_Init>

}
 800428a:	bf00      	nop
 800428c:	3720      	adds	r7, #32
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40021000 	.word	0x40021000
 8004298:	48000400 	.word	0x48000400
 800429c:	48000800 	.word	0x48000800

080042a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80042a4:	b672      	cpsid	i
}
 80042a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80042a8:	e7fe      	b.n	80042a8 <Error_Handler+0x8>
	...

080042ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <HAL_MspInit+0x44>)
 80042b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <HAL_MspInit+0x44>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6613      	str	r3, [r2, #96]	; 0x60
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_MspInit+0x44>)
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_MspInit+0x44>)
 80042cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ce:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <HAL_MspInit+0x44>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6593      	str	r3, [r2, #88]	; 0x58
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_MspInit+0x44>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000

080042f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b0ae      	sub	sp, #184	; 0xb8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	60da      	str	r2, [r3, #12]
 800430a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800430c:	f107 0310 	add.w	r3, r7, #16
 8004310:	2294      	movs	r2, #148	; 0x94
 8004312:	2100      	movs	r1, #0
 8004314:	4618      	mov	r0, r3
 8004316:	f000 f9a1 	bl	800465c <memset>
  if(huart->Instance==USART1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <HAL_UART_MspInit+0xb0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d13a      	bne.n	800439a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004324:	2301      	movs	r3, #1
 8004326:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004328:	2300      	movs	r3, #0
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800432c:	f107 0310 	add.w	r3, r7, #16
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe f93d 	bl	80025b0 <HAL_RCCEx_PeriphCLKConfig>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800433c:	f7ff ffb0 	bl	80042a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <HAL_UART_MspInit+0xb4>)
 8004342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004344:	4a18      	ldr	r2, [pc, #96]	; (80043a8 <HAL_UART_MspInit+0xb4>)
 8004346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800434a:	6613      	str	r3, [r2, #96]	; 0x60
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <HAL_UART_MspInit+0xb4>)
 800434e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004358:	4b13      	ldr	r3, [pc, #76]	; (80043a8 <HAL_UART_MspInit+0xb4>)
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <HAL_UART_MspInit+0xb4>)
 800435e:	f043 0302 	orr.w	r3, r3, #2
 8004362:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004364:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <HAL_UART_MspInit+0xb4>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004370:	23c0      	movs	r3, #192	; 0xc0
 8004372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004376:	2302      	movs	r3, #2
 8004378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004382:	2303      	movs	r3, #3
 8004384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004388:	2307      	movs	r3, #7
 800438a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004392:	4619      	mov	r1, r3
 8004394:	4805      	ldr	r0, [pc, #20]	; (80043ac <HAL_UART_MspInit+0xb8>)
 8004396:	f7fc ffc5 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800439a:	bf00      	nop
 800439c:	37b8      	adds	r7, #184	; 0xb8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	48000400 	.word	0x48000400

080043b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80043b4:	e7fe      	b.n	80043b4 <NMI_Handler+0x4>

080043b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80043ba:	e7fe      	b.n	80043ba <HardFault_Handler+0x4>

080043bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043c0:	e7fe      	b.n	80043c0 <MemManage_Handler+0x4>

080043c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043c2:	b480      	push	{r7}
 80043c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043c6:	e7fe      	b.n	80043c6 <BusFault_Handler+0x4>

080043c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043cc:	e7fe      	b.n	80043cc <UsageFault_Handler+0x4>

080043ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ce:	b480      	push	{r7}
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043ea:	b480      	push	{r7}
 80043ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043fc:	f7fc fe68 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004400:	bf00      	nop
 8004402:	bd80      	pop	{r7, pc}

08004404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  return 1;
 8004408:	2301      	movs	r3, #1
}
 800440a:	4618      	mov	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <_kill>:

int _kill(int pid, int sig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800441e:	f000 f8f3 	bl	8004608 <__errno>
 8004422:	4603      	mov	r3, r0
 8004424:	2216      	movs	r2, #22
 8004426:	601a      	str	r2, [r3, #0]
  return -1;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_exit>:

void _exit (int status)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800443c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ffe7 	bl	8004414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004446:	e7fe      	b.n	8004446 <_exit+0x12>

08004448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e00a      	b.n	8004470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800445a:	f7ff fd43 	bl	8003ee4 <__io_getchar>
 800445e:	4601      	mov	r1, r0
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	60ba      	str	r2, [r7, #8]
 8004466:	b2ca      	uxtb	r2, r1
 8004468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	3301      	adds	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	429a      	cmp	r2, r3
 8004476:	dbf0      	blt.n	800445a <_read+0x12>
  }

  return len;
 8004478:	687b      	ldr	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b086      	sub	sp, #24
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e009      	b.n	80044a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	60ba      	str	r2, [r7, #8]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fd0f 	bl	8003ec0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	3301      	adds	r3, #1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	dbf1      	blt.n	8004494 <_write+0x12>
  }
  return len;
 80044b0:	687b      	ldr	r3, [r7, #4]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <_close>:

int _close(int file)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b083      	sub	sp, #12
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044e2:	605a      	str	r2, [r3, #4]
  return 0;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <_isatty>:

int _isatty(int file)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80044fa:	2301      	movs	r3, #1
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <_sbrk+0x5c>)
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <_sbrk+0x60>)
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <_sbrk+0x64>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d102      	bne.n	8004546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <_sbrk+0x64>)
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <_sbrk+0x68>)
 8004544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <_sbrk+0x64>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	429a      	cmp	r2, r3
 8004552:	d207      	bcs.n	8004564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004554:	f000 f858 	bl	8004608 <__errno>
 8004558:	4603      	mov	r3, r0
 800455a:	220c      	movs	r2, #12
 800455c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004562:	e009      	b.n	8004578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <_sbrk+0x64>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4413      	add	r3, r2
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <_sbrk+0x64>)
 8004574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004576:	68fb      	ldr	r3, [r7, #12]
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200a0000 	.word	0x200a0000
 8004584:	00000400 	.word	0x00000400
 8004588:	2000029c 	.word	0x2000029c
 800458c:	200002b0 	.word	0x200002b0

08004590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <SystemInit+0x20>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <SystemInit+0x20>)
 800459c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000ed00 	.word	0xe000ed00

080045b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80045b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045b8:	f7ff ffea 	bl	8004590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045bc:	480c      	ldr	r0, [pc, #48]	; (80045f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80045be:	490d      	ldr	r1, [pc, #52]	; (80045f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045c0:	4a0d      	ldr	r2, [pc, #52]	; (80045f8 <LoopForever+0xe>)
  movs r3, #0
 80045c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045c4:	e002      	b.n	80045cc <LoopCopyDataInit>

080045c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045ca:	3304      	adds	r3, #4

080045cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045d0:	d3f9      	bcc.n	80045c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80045d4:	4c0a      	ldr	r4, [pc, #40]	; (8004600 <LoopForever+0x16>)
  movs r3, #0
 80045d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045d8:	e001      	b.n	80045de <LoopFillZerobss>

080045da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045dc:	3204      	adds	r2, #4

080045de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045e0:	d3fb      	bcc.n	80045da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045e2:	f000 f817 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045e6:	f7ff fd0b 	bl	8004000 <main>

080045ea <LoopForever>:

LoopForever:
    b LoopForever
 80045ea:	e7fe      	b.n	80045ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80045ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80045f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045f4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80045f8:	0800a28c 	.word	0x0800a28c
  ldr r2, =_sbss
 80045fc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004600:	200002b0 	.word	0x200002b0

08004604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004604:	e7fe      	b.n	8004604 <ADC1_IRQHandler>
	...

08004608 <__errno>:
 8004608:	4b01      	ldr	r3, [pc, #4]	; (8004610 <__errno+0x8>)
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	2000000c 	.word	0x2000000c

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	; (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	; (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	; (8004658 <__libc_init_array+0x44>)
 8004628:	f005 fb48 	bl	8009cbc <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	0800a284 	.word	0x0800a284
 8004650:	0800a284 	.word	0x0800a284
 8004654:	0800a284 	.word	0x0800a284
 8004658:	0800a288 	.word	0x0800a288

0800465c <memset>:
 800465c:	4402      	add	r2, r0
 800465e:	4603      	mov	r3, r0
 8004660:	4293      	cmp	r3, r2
 8004662:	d100      	bne.n	8004666 <memset+0xa>
 8004664:	4770      	bx	lr
 8004666:	f803 1b01 	strb.w	r1, [r3], #1
 800466a:	e7f9      	b.n	8004660 <memset+0x4>

0800466c <__cvt>:
 800466c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	ec55 4b10 	vmov	r4, r5, d0
 8004674:	2d00      	cmp	r5, #0
 8004676:	460e      	mov	r6, r1
 8004678:	4619      	mov	r1, r3
 800467a:	462b      	mov	r3, r5
 800467c:	bfbb      	ittet	lt
 800467e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004682:	461d      	movlt	r5, r3
 8004684:	2300      	movge	r3, #0
 8004686:	232d      	movlt	r3, #45	; 0x2d
 8004688:	700b      	strb	r3, [r1, #0]
 800468a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800468c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004690:	4691      	mov	r9, r2
 8004692:	f023 0820 	bic.w	r8, r3, #32
 8004696:	bfbc      	itt	lt
 8004698:	4622      	movlt	r2, r4
 800469a:	4614      	movlt	r4, r2
 800469c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046a0:	d005      	beq.n	80046ae <__cvt+0x42>
 80046a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80046a6:	d100      	bne.n	80046aa <__cvt+0x3e>
 80046a8:	3601      	adds	r6, #1
 80046aa:	2102      	movs	r1, #2
 80046ac:	e000      	b.n	80046b0 <__cvt+0x44>
 80046ae:	2103      	movs	r1, #3
 80046b0:	ab03      	add	r3, sp, #12
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	ab02      	add	r3, sp, #8
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	ec45 4b10 	vmov	d0, r4, r5
 80046bc:	4653      	mov	r3, sl
 80046be:	4632      	mov	r2, r6
 80046c0:	f001 feba 	bl	8006438 <_dtoa_r>
 80046c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046c8:	4607      	mov	r7, r0
 80046ca:	d102      	bne.n	80046d2 <__cvt+0x66>
 80046cc:	f019 0f01 	tst.w	r9, #1
 80046d0:	d022      	beq.n	8004718 <__cvt+0xac>
 80046d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046d6:	eb07 0906 	add.w	r9, r7, r6
 80046da:	d110      	bne.n	80046fe <__cvt+0x92>
 80046dc:	783b      	ldrb	r3, [r7, #0]
 80046de:	2b30      	cmp	r3, #48	; 0x30
 80046e0:	d10a      	bne.n	80046f8 <__cvt+0x8c>
 80046e2:	2200      	movs	r2, #0
 80046e4:	2300      	movs	r3, #0
 80046e6:	4620      	mov	r0, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7fc fa05 	bl	8000af8 <__aeabi_dcmpeq>
 80046ee:	b918      	cbnz	r0, 80046f8 <__cvt+0x8c>
 80046f0:	f1c6 0601 	rsb	r6, r6, #1
 80046f4:	f8ca 6000 	str.w	r6, [sl]
 80046f8:	f8da 3000 	ldr.w	r3, [sl]
 80046fc:	4499      	add	r9, r3
 80046fe:	2200      	movs	r2, #0
 8004700:	2300      	movs	r3, #0
 8004702:	4620      	mov	r0, r4
 8004704:	4629      	mov	r1, r5
 8004706:	f7fc f9f7 	bl	8000af8 <__aeabi_dcmpeq>
 800470a:	b108      	cbz	r0, 8004710 <__cvt+0xa4>
 800470c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004710:	2230      	movs	r2, #48	; 0x30
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	454b      	cmp	r3, r9
 8004716:	d307      	bcc.n	8004728 <__cvt+0xbc>
 8004718:	9b03      	ldr	r3, [sp, #12]
 800471a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800471c:	1bdb      	subs	r3, r3, r7
 800471e:	4638      	mov	r0, r7
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	b004      	add	sp, #16
 8004724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004728:	1c59      	adds	r1, r3, #1
 800472a:	9103      	str	r1, [sp, #12]
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	e7f0      	b.n	8004712 <__cvt+0xa6>

08004730 <__exponent>:
 8004730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004732:	4603      	mov	r3, r0
 8004734:	2900      	cmp	r1, #0
 8004736:	bfb8      	it	lt
 8004738:	4249      	neglt	r1, r1
 800473a:	f803 2b02 	strb.w	r2, [r3], #2
 800473e:	bfb4      	ite	lt
 8004740:	222d      	movlt	r2, #45	; 0x2d
 8004742:	222b      	movge	r2, #43	; 0x2b
 8004744:	2909      	cmp	r1, #9
 8004746:	7042      	strb	r2, [r0, #1]
 8004748:	dd2a      	ble.n	80047a0 <__exponent+0x70>
 800474a:	f10d 0407 	add.w	r4, sp, #7
 800474e:	46a4      	mov	ip, r4
 8004750:	270a      	movs	r7, #10
 8004752:	46a6      	mov	lr, r4
 8004754:	460a      	mov	r2, r1
 8004756:	fb91 f6f7 	sdiv	r6, r1, r7
 800475a:	fb07 1516 	mls	r5, r7, r6, r1
 800475e:	3530      	adds	r5, #48	; 0x30
 8004760:	2a63      	cmp	r2, #99	; 0x63
 8004762:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004766:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800476a:	4631      	mov	r1, r6
 800476c:	dcf1      	bgt.n	8004752 <__exponent+0x22>
 800476e:	3130      	adds	r1, #48	; 0x30
 8004770:	f1ae 0502 	sub.w	r5, lr, #2
 8004774:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004778:	1c44      	adds	r4, r0, #1
 800477a:	4629      	mov	r1, r5
 800477c:	4561      	cmp	r1, ip
 800477e:	d30a      	bcc.n	8004796 <__exponent+0x66>
 8004780:	f10d 0209 	add.w	r2, sp, #9
 8004784:	eba2 020e 	sub.w	r2, r2, lr
 8004788:	4565      	cmp	r5, ip
 800478a:	bf88      	it	hi
 800478c:	2200      	movhi	r2, #0
 800478e:	4413      	add	r3, r2
 8004790:	1a18      	subs	r0, r3, r0
 8004792:	b003      	add	sp, #12
 8004794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800479a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800479e:	e7ed      	b.n	800477c <__exponent+0x4c>
 80047a0:	2330      	movs	r3, #48	; 0x30
 80047a2:	3130      	adds	r1, #48	; 0x30
 80047a4:	7083      	strb	r3, [r0, #2]
 80047a6:	70c1      	strb	r1, [r0, #3]
 80047a8:	1d03      	adds	r3, r0, #4
 80047aa:	e7f1      	b.n	8004790 <__exponent+0x60>

080047ac <_printf_float>:
 80047ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047b0:	ed2d 8b02 	vpush	{d8}
 80047b4:	b08d      	sub	sp, #52	; 0x34
 80047b6:	460c      	mov	r4, r1
 80047b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047bc:	4616      	mov	r6, r2
 80047be:	461f      	mov	r7, r3
 80047c0:	4605      	mov	r5, r0
 80047c2:	f003 f97d 	bl	8007ac0 <_localeconv_r>
 80047c6:	f8d0 a000 	ldr.w	sl, [r0]
 80047ca:	4650      	mov	r0, sl
 80047cc:	f7fb fd18 	bl	8000200 <strlen>
 80047d0:	2300      	movs	r3, #0
 80047d2:	930a      	str	r3, [sp, #40]	; 0x28
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	9305      	str	r3, [sp, #20]
 80047d8:	f8d8 3000 	ldr.w	r3, [r8]
 80047dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047e0:	3307      	adds	r3, #7
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	f103 0208 	add.w	r2, r3, #8
 80047ea:	f8c8 2000 	str.w	r2, [r8]
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	f8cd 8018 	str.w	r8, [sp, #24]
 8004804:	ee08 0a10 	vmov	s16, r0
 8004808:	4b9f      	ldr	r3, [pc, #636]	; (8004a88 <_printf_float+0x2dc>)
 800480a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004812:	f7fc f9a3 	bl	8000b5c <__aeabi_dcmpun>
 8004816:	bb88      	cbnz	r0, 800487c <_printf_float+0xd0>
 8004818:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800481c:	4b9a      	ldr	r3, [pc, #616]	; (8004a88 <_printf_float+0x2dc>)
 800481e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004822:	f7fc f97d 	bl	8000b20 <__aeabi_dcmple>
 8004826:	bb48      	cbnz	r0, 800487c <_printf_float+0xd0>
 8004828:	2200      	movs	r2, #0
 800482a:	2300      	movs	r3, #0
 800482c:	4640      	mov	r0, r8
 800482e:	4649      	mov	r1, r9
 8004830:	f7fc f96c 	bl	8000b0c <__aeabi_dcmplt>
 8004834:	b110      	cbz	r0, 800483c <_printf_float+0x90>
 8004836:	232d      	movs	r3, #45	; 0x2d
 8004838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800483c:	4b93      	ldr	r3, [pc, #588]	; (8004a8c <_printf_float+0x2e0>)
 800483e:	4894      	ldr	r0, [pc, #592]	; (8004a90 <_printf_float+0x2e4>)
 8004840:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004844:	bf94      	ite	ls
 8004846:	4698      	movls	r8, r3
 8004848:	4680      	movhi	r8, r0
 800484a:	2303      	movs	r3, #3
 800484c:	6123      	str	r3, [r4, #16]
 800484e:	9b05      	ldr	r3, [sp, #20]
 8004850:	f023 0204 	bic.w	r2, r3, #4
 8004854:	6022      	str	r2, [r4, #0]
 8004856:	f04f 0900 	mov.w	r9, #0
 800485a:	9700      	str	r7, [sp, #0]
 800485c:	4633      	mov	r3, r6
 800485e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004860:	4621      	mov	r1, r4
 8004862:	4628      	mov	r0, r5
 8004864:	f000 f9d8 	bl	8004c18 <_printf_common>
 8004868:	3001      	adds	r0, #1
 800486a:	f040 8090 	bne.w	800498e <_printf_float+0x1e2>
 800486e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004872:	b00d      	add	sp, #52	; 0x34
 8004874:	ecbd 8b02 	vpop	{d8}
 8004878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487c:	4642      	mov	r2, r8
 800487e:	464b      	mov	r3, r9
 8004880:	4640      	mov	r0, r8
 8004882:	4649      	mov	r1, r9
 8004884:	f7fc f96a 	bl	8000b5c <__aeabi_dcmpun>
 8004888:	b140      	cbz	r0, 800489c <_printf_float+0xf0>
 800488a:	464b      	mov	r3, r9
 800488c:	2b00      	cmp	r3, #0
 800488e:	bfbc      	itt	lt
 8004890:	232d      	movlt	r3, #45	; 0x2d
 8004892:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004896:	487f      	ldr	r0, [pc, #508]	; (8004a94 <_printf_float+0x2e8>)
 8004898:	4b7f      	ldr	r3, [pc, #508]	; (8004a98 <_printf_float+0x2ec>)
 800489a:	e7d1      	b.n	8004840 <_printf_float+0x94>
 800489c:	6863      	ldr	r3, [r4, #4]
 800489e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80048a2:	9206      	str	r2, [sp, #24]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	d13f      	bne.n	8004928 <_printf_float+0x17c>
 80048a8:	2306      	movs	r3, #6
 80048aa:	6063      	str	r3, [r4, #4]
 80048ac:	9b05      	ldr	r3, [sp, #20]
 80048ae:	6861      	ldr	r1, [r4, #4]
 80048b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048b4:	2300      	movs	r3, #0
 80048b6:	9303      	str	r3, [sp, #12]
 80048b8:	ab0a      	add	r3, sp, #40	; 0x28
 80048ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048be:	ab09      	add	r3, sp, #36	; 0x24
 80048c0:	ec49 8b10 	vmov	d0, r8, r9
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	6022      	str	r2, [r4, #0]
 80048c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048cc:	4628      	mov	r0, r5
 80048ce:	f7ff fecd 	bl	800466c <__cvt>
 80048d2:	9b06      	ldr	r3, [sp, #24]
 80048d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048d6:	2b47      	cmp	r3, #71	; 0x47
 80048d8:	4680      	mov	r8, r0
 80048da:	d108      	bne.n	80048ee <_printf_float+0x142>
 80048dc:	1cc8      	adds	r0, r1, #3
 80048de:	db02      	blt.n	80048e6 <_printf_float+0x13a>
 80048e0:	6863      	ldr	r3, [r4, #4]
 80048e2:	4299      	cmp	r1, r3
 80048e4:	dd41      	ble.n	800496a <_printf_float+0x1be>
 80048e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80048ea:	fa5f fb8b 	uxtb.w	fp, fp
 80048ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048f2:	d820      	bhi.n	8004936 <_printf_float+0x18a>
 80048f4:	3901      	subs	r1, #1
 80048f6:	465a      	mov	r2, fp
 80048f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048fc:	9109      	str	r1, [sp, #36]	; 0x24
 80048fe:	f7ff ff17 	bl	8004730 <__exponent>
 8004902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004904:	1813      	adds	r3, r2, r0
 8004906:	2a01      	cmp	r2, #1
 8004908:	4681      	mov	r9, r0
 800490a:	6123      	str	r3, [r4, #16]
 800490c:	dc02      	bgt.n	8004914 <_printf_float+0x168>
 800490e:	6822      	ldr	r2, [r4, #0]
 8004910:	07d2      	lsls	r2, r2, #31
 8004912:	d501      	bpl.n	8004918 <_printf_float+0x16c>
 8004914:	3301      	adds	r3, #1
 8004916:	6123      	str	r3, [r4, #16]
 8004918:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800491c:	2b00      	cmp	r3, #0
 800491e:	d09c      	beq.n	800485a <_printf_float+0xae>
 8004920:	232d      	movs	r3, #45	; 0x2d
 8004922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004926:	e798      	b.n	800485a <_printf_float+0xae>
 8004928:	9a06      	ldr	r2, [sp, #24]
 800492a:	2a47      	cmp	r2, #71	; 0x47
 800492c:	d1be      	bne.n	80048ac <_printf_float+0x100>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1bc      	bne.n	80048ac <_printf_float+0x100>
 8004932:	2301      	movs	r3, #1
 8004934:	e7b9      	b.n	80048aa <_printf_float+0xfe>
 8004936:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800493a:	d118      	bne.n	800496e <_printf_float+0x1c2>
 800493c:	2900      	cmp	r1, #0
 800493e:	6863      	ldr	r3, [r4, #4]
 8004940:	dd0b      	ble.n	800495a <_printf_float+0x1ae>
 8004942:	6121      	str	r1, [r4, #16]
 8004944:	b913      	cbnz	r3, 800494c <_printf_float+0x1a0>
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	07d0      	lsls	r0, r2, #31
 800494a:	d502      	bpl.n	8004952 <_printf_float+0x1a6>
 800494c:	3301      	adds	r3, #1
 800494e:	440b      	add	r3, r1
 8004950:	6123      	str	r3, [r4, #16]
 8004952:	65a1      	str	r1, [r4, #88]	; 0x58
 8004954:	f04f 0900 	mov.w	r9, #0
 8004958:	e7de      	b.n	8004918 <_printf_float+0x16c>
 800495a:	b913      	cbnz	r3, 8004962 <_printf_float+0x1b6>
 800495c:	6822      	ldr	r2, [r4, #0]
 800495e:	07d2      	lsls	r2, r2, #31
 8004960:	d501      	bpl.n	8004966 <_printf_float+0x1ba>
 8004962:	3302      	adds	r3, #2
 8004964:	e7f4      	b.n	8004950 <_printf_float+0x1a4>
 8004966:	2301      	movs	r3, #1
 8004968:	e7f2      	b.n	8004950 <_printf_float+0x1a4>
 800496a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800496e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004970:	4299      	cmp	r1, r3
 8004972:	db05      	blt.n	8004980 <_printf_float+0x1d4>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	6121      	str	r1, [r4, #16]
 8004978:	07d8      	lsls	r0, r3, #31
 800497a:	d5ea      	bpl.n	8004952 <_printf_float+0x1a6>
 800497c:	1c4b      	adds	r3, r1, #1
 800497e:	e7e7      	b.n	8004950 <_printf_float+0x1a4>
 8004980:	2900      	cmp	r1, #0
 8004982:	bfd4      	ite	le
 8004984:	f1c1 0202 	rsble	r2, r1, #2
 8004988:	2201      	movgt	r2, #1
 800498a:	4413      	add	r3, r2
 800498c:	e7e0      	b.n	8004950 <_printf_float+0x1a4>
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	055a      	lsls	r2, r3, #21
 8004992:	d407      	bmi.n	80049a4 <_printf_float+0x1f8>
 8004994:	6923      	ldr	r3, [r4, #16]
 8004996:	4642      	mov	r2, r8
 8004998:	4631      	mov	r1, r6
 800499a:	4628      	mov	r0, r5
 800499c:	47b8      	blx	r7
 800499e:	3001      	adds	r0, #1
 80049a0:	d12c      	bne.n	80049fc <_printf_float+0x250>
 80049a2:	e764      	b.n	800486e <_printf_float+0xc2>
 80049a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049a8:	f240 80e0 	bls.w	8004b6c <_printf_float+0x3c0>
 80049ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049b0:	2200      	movs	r2, #0
 80049b2:	2300      	movs	r3, #0
 80049b4:	f7fc f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d034      	beq.n	8004a26 <_printf_float+0x27a>
 80049bc:	4a37      	ldr	r2, [pc, #220]	; (8004a9c <_printf_float+0x2f0>)
 80049be:	2301      	movs	r3, #1
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	47b8      	blx	r7
 80049c6:	3001      	adds	r0, #1
 80049c8:	f43f af51 	beq.w	800486e <_printf_float+0xc2>
 80049cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049d0:	429a      	cmp	r2, r3
 80049d2:	db02      	blt.n	80049da <_printf_float+0x22e>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	07d8      	lsls	r0, r3, #31
 80049d8:	d510      	bpl.n	80049fc <_printf_float+0x250>
 80049da:	ee18 3a10 	vmov	r3, s16
 80049de:	4652      	mov	r2, sl
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f af41 	beq.w	800486e <_printf_float+0xc2>
 80049ec:	f04f 0800 	mov.w	r8, #0
 80049f0:	f104 091a 	add.w	r9, r4, #26
 80049f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	4543      	cmp	r3, r8
 80049fa:	dc09      	bgt.n	8004a10 <_printf_float+0x264>
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	079b      	lsls	r3, r3, #30
 8004a00:	f100 8105 	bmi.w	8004c0e <_printf_float+0x462>
 8004a04:	68e0      	ldr	r0, [r4, #12]
 8004a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a08:	4298      	cmp	r0, r3
 8004a0a:	bfb8      	it	lt
 8004a0c:	4618      	movlt	r0, r3
 8004a0e:	e730      	b.n	8004872 <_printf_float+0xc6>
 8004a10:	2301      	movs	r3, #1
 8004a12:	464a      	mov	r2, r9
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f af27 	beq.w	800486e <_printf_float+0xc2>
 8004a20:	f108 0801 	add.w	r8, r8, #1
 8004a24:	e7e6      	b.n	80049f4 <_printf_float+0x248>
 8004a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dc39      	bgt.n	8004aa0 <_printf_float+0x2f4>
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <_printf_float+0x2f0>)
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4631      	mov	r1, r6
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b8      	blx	r7
 8004a36:	3001      	adds	r0, #1
 8004a38:	f43f af19 	beq.w	800486e <_printf_float+0xc2>
 8004a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a40:	4313      	orrs	r3, r2
 8004a42:	d102      	bne.n	8004a4a <_printf_float+0x29e>
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	07d9      	lsls	r1, r3, #31
 8004a48:	d5d8      	bpl.n	80049fc <_printf_float+0x250>
 8004a4a:	ee18 3a10 	vmov	r3, s16
 8004a4e:	4652      	mov	r2, sl
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	f43f af09 	beq.w	800486e <_printf_float+0xc2>
 8004a5c:	f04f 0900 	mov.w	r9, #0
 8004a60:	f104 0a1a 	add.w	sl, r4, #26
 8004a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a66:	425b      	negs	r3, r3
 8004a68:	454b      	cmp	r3, r9
 8004a6a:	dc01      	bgt.n	8004a70 <_printf_float+0x2c4>
 8004a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a6e:	e792      	b.n	8004996 <_printf_float+0x1ea>
 8004a70:	2301      	movs	r3, #1
 8004a72:	4652      	mov	r2, sl
 8004a74:	4631      	mov	r1, r6
 8004a76:	4628      	mov	r0, r5
 8004a78:	47b8      	blx	r7
 8004a7a:	3001      	adds	r0, #1
 8004a7c:	f43f aef7 	beq.w	800486e <_printf_float+0xc2>
 8004a80:	f109 0901 	add.w	r9, r9, #1
 8004a84:	e7ee      	b.n	8004a64 <_printf_float+0x2b8>
 8004a86:	bf00      	nop
 8004a88:	7fefffff 	.word	0x7fefffff
 8004a8c:	08009dc0 	.word	0x08009dc0
 8004a90:	08009dc4 	.word	0x08009dc4
 8004a94:	08009dcc 	.word	0x08009dcc
 8004a98:	08009dc8 	.word	0x08009dc8
 8004a9c:	0800a229 	.word	0x0800a229
 8004aa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004aa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	bfa8      	it	ge
 8004aa8:	461a      	movge	r2, r3
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	4691      	mov	r9, r2
 8004aae:	dc37      	bgt.n	8004b20 <_printf_float+0x374>
 8004ab0:	f04f 0b00 	mov.w	fp, #0
 8004ab4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ab8:	f104 021a 	add.w	r2, r4, #26
 8004abc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004abe:	9305      	str	r3, [sp, #20]
 8004ac0:	eba3 0309 	sub.w	r3, r3, r9
 8004ac4:	455b      	cmp	r3, fp
 8004ac6:	dc33      	bgt.n	8004b30 <_printf_float+0x384>
 8004ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004acc:	429a      	cmp	r2, r3
 8004ace:	db3b      	blt.n	8004b48 <_printf_float+0x39c>
 8004ad0:	6823      	ldr	r3, [r4, #0]
 8004ad2:	07da      	lsls	r2, r3, #31
 8004ad4:	d438      	bmi.n	8004b48 <_printf_float+0x39c>
 8004ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad8:	9a05      	ldr	r2, [sp, #20]
 8004ada:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004adc:	1a9a      	subs	r2, r3, r2
 8004ade:	eba3 0901 	sub.w	r9, r3, r1
 8004ae2:	4591      	cmp	r9, r2
 8004ae4:	bfa8      	it	ge
 8004ae6:	4691      	movge	r9, r2
 8004ae8:	f1b9 0f00 	cmp.w	r9, #0
 8004aec:	dc35      	bgt.n	8004b5a <_printf_float+0x3ae>
 8004aee:	f04f 0800 	mov.w	r8, #0
 8004af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004af6:	f104 0a1a 	add.w	sl, r4, #26
 8004afa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004afe:	1a9b      	subs	r3, r3, r2
 8004b00:	eba3 0309 	sub.w	r3, r3, r9
 8004b04:	4543      	cmp	r3, r8
 8004b06:	f77f af79 	ble.w	80049fc <_printf_float+0x250>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	4652      	mov	r2, sl
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4628      	mov	r0, r5
 8004b12:	47b8      	blx	r7
 8004b14:	3001      	adds	r0, #1
 8004b16:	f43f aeaa 	beq.w	800486e <_printf_float+0xc2>
 8004b1a:	f108 0801 	add.w	r8, r8, #1
 8004b1e:	e7ec      	b.n	8004afa <_printf_float+0x34e>
 8004b20:	4613      	mov	r3, r2
 8004b22:	4631      	mov	r1, r6
 8004b24:	4642      	mov	r2, r8
 8004b26:	4628      	mov	r0, r5
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d1c0      	bne.n	8004ab0 <_printf_float+0x304>
 8004b2e:	e69e      	b.n	800486e <_printf_float+0xc2>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	9205      	str	r2, [sp, #20]
 8004b38:	47b8      	blx	r7
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	f43f ae97 	beq.w	800486e <_printf_float+0xc2>
 8004b40:	9a05      	ldr	r2, [sp, #20]
 8004b42:	f10b 0b01 	add.w	fp, fp, #1
 8004b46:	e7b9      	b.n	8004abc <_printf_float+0x310>
 8004b48:	ee18 3a10 	vmov	r3, s16
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b8      	blx	r7
 8004b54:	3001      	adds	r0, #1
 8004b56:	d1be      	bne.n	8004ad6 <_printf_float+0x32a>
 8004b58:	e689      	b.n	800486e <_printf_float+0xc2>
 8004b5a:	9a05      	ldr	r2, [sp, #20]
 8004b5c:	464b      	mov	r3, r9
 8004b5e:	4442      	add	r2, r8
 8004b60:	4631      	mov	r1, r6
 8004b62:	4628      	mov	r0, r5
 8004b64:	47b8      	blx	r7
 8004b66:	3001      	adds	r0, #1
 8004b68:	d1c1      	bne.n	8004aee <_printf_float+0x342>
 8004b6a:	e680      	b.n	800486e <_printf_float+0xc2>
 8004b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b6e:	2a01      	cmp	r2, #1
 8004b70:	dc01      	bgt.n	8004b76 <_printf_float+0x3ca>
 8004b72:	07db      	lsls	r3, r3, #31
 8004b74:	d538      	bpl.n	8004be8 <_printf_float+0x43c>
 8004b76:	2301      	movs	r3, #1
 8004b78:	4642      	mov	r2, r8
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	f43f ae74 	beq.w	800486e <_printf_float+0xc2>
 8004b86:	ee18 3a10 	vmov	r3, s16
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f ae6b 	beq.w	800486e <_printf_float+0xc2>
 8004b98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f7fb ffaa 	bl	8000af8 <__aeabi_dcmpeq>
 8004ba4:	b9d8      	cbnz	r0, 8004bde <_printf_float+0x432>
 8004ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba8:	f108 0201 	add.w	r2, r8, #1
 8004bac:	3b01      	subs	r3, #1
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d10e      	bne.n	8004bd6 <_printf_float+0x42a>
 8004bb8:	e659      	b.n	800486e <_printf_float+0xc2>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4652      	mov	r2, sl
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	47b8      	blx	r7
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f43f ae52 	beq.w	800486e <_printf_float+0xc2>
 8004bca:	f108 0801 	add.w	r8, r8, #1
 8004bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	4543      	cmp	r3, r8
 8004bd4:	dcf1      	bgt.n	8004bba <_printf_float+0x40e>
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bdc:	e6dc      	b.n	8004998 <_printf_float+0x1ec>
 8004bde:	f04f 0800 	mov.w	r8, #0
 8004be2:	f104 0a1a 	add.w	sl, r4, #26
 8004be6:	e7f2      	b.n	8004bce <_printf_float+0x422>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4642      	mov	r2, r8
 8004bec:	e7df      	b.n	8004bae <_printf_float+0x402>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	464a      	mov	r2, r9
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	4628      	mov	r0, r5
 8004bf6:	47b8      	blx	r7
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	f43f ae38 	beq.w	800486e <_printf_float+0xc2>
 8004bfe:	f108 0801 	add.w	r8, r8, #1
 8004c02:	68e3      	ldr	r3, [r4, #12]
 8004c04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c06:	1a5b      	subs	r3, r3, r1
 8004c08:	4543      	cmp	r3, r8
 8004c0a:	dcf0      	bgt.n	8004bee <_printf_float+0x442>
 8004c0c:	e6fa      	b.n	8004a04 <_printf_float+0x258>
 8004c0e:	f04f 0800 	mov.w	r8, #0
 8004c12:	f104 0919 	add.w	r9, r4, #25
 8004c16:	e7f4      	b.n	8004c02 <_printf_float+0x456>

08004c18 <_printf_common>:
 8004c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c1c:	4616      	mov	r6, r2
 8004c1e:	4699      	mov	r9, r3
 8004c20:	688a      	ldr	r2, [r1, #8]
 8004c22:	690b      	ldr	r3, [r1, #16]
 8004c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	bfb8      	it	lt
 8004c2c:	4613      	movlt	r3, r2
 8004c2e:	6033      	str	r3, [r6, #0]
 8004c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c34:	4607      	mov	r7, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	b10a      	cbz	r2, 8004c3e <_printf_common+0x26>
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	6033      	str	r3, [r6, #0]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	6833      	ldrmi	r3, [r6, #0]
 8004c46:	3302      	addmi	r3, #2
 8004c48:	6033      	strmi	r3, [r6, #0]
 8004c4a:	6825      	ldr	r5, [r4, #0]
 8004c4c:	f015 0506 	ands.w	r5, r5, #6
 8004c50:	d106      	bne.n	8004c60 <_printf_common+0x48>
 8004c52:	f104 0a19 	add.w	sl, r4, #25
 8004c56:	68e3      	ldr	r3, [r4, #12]
 8004c58:	6832      	ldr	r2, [r6, #0]
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	42ab      	cmp	r3, r5
 8004c5e:	dc26      	bgt.n	8004cae <_printf_common+0x96>
 8004c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c64:	1e13      	subs	r3, r2, #0
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	bf18      	it	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	0692      	lsls	r2, r2, #26
 8004c6e:	d42b      	bmi.n	8004cc8 <_printf_common+0xb0>
 8004c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c74:	4649      	mov	r1, r9
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c0      	blx	r8
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d01e      	beq.n	8004cbc <_printf_common+0xa4>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	68e5      	ldr	r5, [r4, #12]
 8004c82:	6832      	ldr	r2, [r6, #0]
 8004c84:	f003 0306 	and.w	r3, r3, #6
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	bf08      	it	eq
 8004c8c:	1aad      	subeq	r5, r5, r2
 8004c8e:	68a3      	ldr	r3, [r4, #8]
 8004c90:	6922      	ldr	r2, [r4, #16]
 8004c92:	bf0c      	ite	eq
 8004c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c98:	2500      	movne	r5, #0
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	bfc4      	itt	gt
 8004c9e:	1a9b      	subgt	r3, r3, r2
 8004ca0:	18ed      	addgt	r5, r5, r3
 8004ca2:	2600      	movs	r6, #0
 8004ca4:	341a      	adds	r4, #26
 8004ca6:	42b5      	cmp	r5, r6
 8004ca8:	d11a      	bne.n	8004ce0 <_printf_common+0xc8>
 8004caa:	2000      	movs	r0, #0
 8004cac:	e008      	b.n	8004cc0 <_printf_common+0xa8>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	4652      	mov	r2, sl
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	4638      	mov	r0, r7
 8004cb6:	47c0      	blx	r8
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d103      	bne.n	8004cc4 <_printf_common+0xac>
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc4:	3501      	adds	r5, #1
 8004cc6:	e7c6      	b.n	8004c56 <_printf_common+0x3e>
 8004cc8:	18e1      	adds	r1, r4, r3
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	2030      	movs	r0, #48	; 0x30
 8004cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cd2:	4422      	add	r2, r4
 8004cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cdc:	3302      	adds	r3, #2
 8004cde:	e7c7      	b.n	8004c70 <_printf_common+0x58>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	47c0      	blx	r8
 8004cea:	3001      	adds	r0, #1
 8004cec:	d0e6      	beq.n	8004cbc <_printf_common+0xa4>
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7d9      	b.n	8004ca6 <_printf_common+0x8e>
	...

08004cf4 <_printf_i>:
 8004cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf8:	7e0f      	ldrb	r7, [r1, #24]
 8004cfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cfc:	2f78      	cmp	r7, #120	; 0x78
 8004cfe:	4691      	mov	r9, r2
 8004d00:	4680      	mov	r8, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	469a      	mov	sl, r3
 8004d06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d0a:	d807      	bhi.n	8004d1c <_printf_i+0x28>
 8004d0c:	2f62      	cmp	r7, #98	; 0x62
 8004d0e:	d80a      	bhi.n	8004d26 <_printf_i+0x32>
 8004d10:	2f00      	cmp	r7, #0
 8004d12:	f000 80d8 	beq.w	8004ec6 <_printf_i+0x1d2>
 8004d16:	2f58      	cmp	r7, #88	; 0x58
 8004d18:	f000 80a3 	beq.w	8004e62 <_printf_i+0x16e>
 8004d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d24:	e03a      	b.n	8004d9c <_printf_i+0xa8>
 8004d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d2a:	2b15      	cmp	r3, #21
 8004d2c:	d8f6      	bhi.n	8004d1c <_printf_i+0x28>
 8004d2e:	a101      	add	r1, pc, #4	; (adr r1, 8004d34 <_printf_i+0x40>)
 8004d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d34:	08004d8d 	.word	0x08004d8d
 8004d38:	08004da1 	.word	0x08004da1
 8004d3c:	08004d1d 	.word	0x08004d1d
 8004d40:	08004d1d 	.word	0x08004d1d
 8004d44:	08004d1d 	.word	0x08004d1d
 8004d48:	08004d1d 	.word	0x08004d1d
 8004d4c:	08004da1 	.word	0x08004da1
 8004d50:	08004d1d 	.word	0x08004d1d
 8004d54:	08004d1d 	.word	0x08004d1d
 8004d58:	08004d1d 	.word	0x08004d1d
 8004d5c:	08004d1d 	.word	0x08004d1d
 8004d60:	08004ead 	.word	0x08004ead
 8004d64:	08004dd1 	.word	0x08004dd1
 8004d68:	08004e8f 	.word	0x08004e8f
 8004d6c:	08004d1d 	.word	0x08004d1d
 8004d70:	08004d1d 	.word	0x08004d1d
 8004d74:	08004ecf 	.word	0x08004ecf
 8004d78:	08004d1d 	.word	0x08004d1d
 8004d7c:	08004dd1 	.word	0x08004dd1
 8004d80:	08004d1d 	.word	0x08004d1d
 8004d84:	08004d1d 	.word	0x08004d1d
 8004d88:	08004e97 	.word	0x08004e97
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	1d1a      	adds	r2, r3, #4
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	602a      	str	r2, [r5, #0]
 8004d94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0a3      	b.n	8004ee8 <_printf_i+0x1f4>
 8004da0:	6820      	ldr	r0, [r4, #0]
 8004da2:	6829      	ldr	r1, [r5, #0]
 8004da4:	0606      	lsls	r6, r0, #24
 8004da6:	f101 0304 	add.w	r3, r1, #4
 8004daa:	d50a      	bpl.n	8004dc2 <_printf_i+0xce>
 8004dac:	680e      	ldr	r6, [r1, #0]
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	2e00      	cmp	r6, #0
 8004db2:	da03      	bge.n	8004dbc <_printf_i+0xc8>
 8004db4:	232d      	movs	r3, #45	; 0x2d
 8004db6:	4276      	negs	r6, r6
 8004db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dbc:	485e      	ldr	r0, [pc, #376]	; (8004f38 <_printf_i+0x244>)
 8004dbe:	230a      	movs	r3, #10
 8004dc0:	e019      	b.n	8004df6 <_printf_i+0x102>
 8004dc2:	680e      	ldr	r6, [r1, #0]
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dca:	bf18      	it	ne
 8004dcc:	b236      	sxthne	r6, r6
 8004dce:	e7ef      	b.n	8004db0 <_printf_i+0xbc>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	6820      	ldr	r0, [r4, #0]
 8004dd4:	1d19      	adds	r1, r3, #4
 8004dd6:	6029      	str	r1, [r5, #0]
 8004dd8:	0601      	lsls	r1, r0, #24
 8004dda:	d501      	bpl.n	8004de0 <_printf_i+0xec>
 8004ddc:	681e      	ldr	r6, [r3, #0]
 8004dde:	e002      	b.n	8004de6 <_printf_i+0xf2>
 8004de0:	0646      	lsls	r6, r0, #25
 8004de2:	d5fb      	bpl.n	8004ddc <_printf_i+0xe8>
 8004de4:	881e      	ldrh	r6, [r3, #0]
 8004de6:	4854      	ldr	r0, [pc, #336]	; (8004f38 <_printf_i+0x244>)
 8004de8:	2f6f      	cmp	r7, #111	; 0x6f
 8004dea:	bf0c      	ite	eq
 8004dec:	2308      	moveq	r3, #8
 8004dee:	230a      	movne	r3, #10
 8004df0:	2100      	movs	r1, #0
 8004df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004df6:	6865      	ldr	r5, [r4, #4]
 8004df8:	60a5      	str	r5, [r4, #8]
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	bfa2      	ittt	ge
 8004dfe:	6821      	ldrge	r1, [r4, #0]
 8004e00:	f021 0104 	bicge.w	r1, r1, #4
 8004e04:	6021      	strge	r1, [r4, #0]
 8004e06:	b90e      	cbnz	r6, 8004e0c <_printf_i+0x118>
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	d04d      	beq.n	8004ea8 <_printf_i+0x1b4>
 8004e0c:	4615      	mov	r5, r2
 8004e0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e12:	fb03 6711 	mls	r7, r3, r1, r6
 8004e16:	5dc7      	ldrb	r7, [r0, r7]
 8004e18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e1c:	4637      	mov	r7, r6
 8004e1e:	42bb      	cmp	r3, r7
 8004e20:	460e      	mov	r6, r1
 8004e22:	d9f4      	bls.n	8004e0e <_printf_i+0x11a>
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d10b      	bne.n	8004e40 <_printf_i+0x14c>
 8004e28:	6823      	ldr	r3, [r4, #0]
 8004e2a:	07de      	lsls	r6, r3, #31
 8004e2c:	d508      	bpl.n	8004e40 <_printf_i+0x14c>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6861      	ldr	r1, [r4, #4]
 8004e32:	4299      	cmp	r1, r3
 8004e34:	bfde      	ittt	le
 8004e36:	2330      	movle	r3, #48	; 0x30
 8004e38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e40:	1b52      	subs	r2, r2, r5
 8004e42:	6122      	str	r2, [r4, #16]
 8004e44:	f8cd a000 	str.w	sl, [sp]
 8004e48:	464b      	mov	r3, r9
 8004e4a:	aa03      	add	r2, sp, #12
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4640      	mov	r0, r8
 8004e50:	f7ff fee2 	bl	8004c18 <_printf_common>
 8004e54:	3001      	adds	r0, #1
 8004e56:	d14c      	bne.n	8004ef2 <_printf_i+0x1fe>
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e5c:	b004      	add	sp, #16
 8004e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e62:	4835      	ldr	r0, [pc, #212]	; (8004f38 <_printf_i+0x244>)
 8004e64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e68:	6829      	ldr	r1, [r5, #0]
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e70:	6029      	str	r1, [r5, #0]
 8004e72:	061d      	lsls	r5, r3, #24
 8004e74:	d514      	bpl.n	8004ea0 <_printf_i+0x1ac>
 8004e76:	07df      	lsls	r7, r3, #31
 8004e78:	bf44      	itt	mi
 8004e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e7e:	6023      	strmi	r3, [r4, #0]
 8004e80:	b91e      	cbnz	r6, 8004e8a <_printf_i+0x196>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f023 0320 	bic.w	r3, r3, #32
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	2310      	movs	r3, #16
 8004e8c:	e7b0      	b.n	8004df0 <_printf_i+0xfc>
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	f043 0320 	orr.w	r3, r3, #32
 8004e94:	6023      	str	r3, [r4, #0]
 8004e96:	2378      	movs	r3, #120	; 0x78
 8004e98:	4828      	ldr	r0, [pc, #160]	; (8004f3c <_printf_i+0x248>)
 8004e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e9e:	e7e3      	b.n	8004e68 <_printf_i+0x174>
 8004ea0:	0659      	lsls	r1, r3, #25
 8004ea2:	bf48      	it	mi
 8004ea4:	b2b6      	uxthmi	r6, r6
 8004ea6:	e7e6      	b.n	8004e76 <_printf_i+0x182>
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	e7bb      	b.n	8004e24 <_printf_i+0x130>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	6826      	ldr	r6, [r4, #0]
 8004eb0:	6961      	ldr	r1, [r4, #20]
 8004eb2:	1d18      	adds	r0, r3, #4
 8004eb4:	6028      	str	r0, [r5, #0]
 8004eb6:	0635      	lsls	r5, r6, #24
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	d501      	bpl.n	8004ec0 <_printf_i+0x1cc>
 8004ebc:	6019      	str	r1, [r3, #0]
 8004ebe:	e002      	b.n	8004ec6 <_printf_i+0x1d2>
 8004ec0:	0670      	lsls	r0, r6, #25
 8004ec2:	d5fb      	bpl.n	8004ebc <_printf_i+0x1c8>
 8004ec4:	8019      	strh	r1, [r3, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	4615      	mov	r5, r2
 8004ecc:	e7ba      	b.n	8004e44 <_printf_i+0x150>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	1d1a      	adds	r2, r3, #4
 8004ed2:	602a      	str	r2, [r5, #0]
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4628      	mov	r0, r5
 8004edc:	f7fb f998 	bl	8000210 <memchr>
 8004ee0:	b108      	cbz	r0, 8004ee6 <_printf_i+0x1f2>
 8004ee2:	1b40      	subs	r0, r0, r5
 8004ee4:	6060      	str	r0, [r4, #4]
 8004ee6:	6863      	ldr	r3, [r4, #4]
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	2300      	movs	r3, #0
 8004eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ef0:	e7a8      	b.n	8004e44 <_printf_i+0x150>
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	462a      	mov	r2, r5
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	47d0      	blx	sl
 8004efc:	3001      	adds	r0, #1
 8004efe:	d0ab      	beq.n	8004e58 <_printf_i+0x164>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	079b      	lsls	r3, r3, #30
 8004f04:	d413      	bmi.n	8004f2e <_printf_i+0x23a>
 8004f06:	68e0      	ldr	r0, [r4, #12]
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	bfb8      	it	lt
 8004f0e:	4618      	movlt	r0, r3
 8004f10:	e7a4      	b.n	8004e5c <_printf_i+0x168>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4632      	mov	r2, r6
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	47d0      	blx	sl
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d09b      	beq.n	8004e58 <_printf_i+0x164>
 8004f20:	3501      	adds	r5, #1
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	9903      	ldr	r1, [sp, #12]
 8004f26:	1a5b      	subs	r3, r3, r1
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dcf2      	bgt.n	8004f12 <_printf_i+0x21e>
 8004f2c:	e7eb      	b.n	8004f06 <_printf_i+0x212>
 8004f2e:	2500      	movs	r5, #0
 8004f30:	f104 0619 	add.w	r6, r4, #25
 8004f34:	e7f5      	b.n	8004f22 <_printf_i+0x22e>
 8004f36:	bf00      	nop
 8004f38:	08009dd0 	.word	0x08009dd0
 8004f3c:	08009de1 	.word	0x08009de1

08004f40 <_scanf_float>:
 8004f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f44:	b087      	sub	sp, #28
 8004f46:	4617      	mov	r7, r2
 8004f48:	9303      	str	r3, [sp, #12]
 8004f4a:	688b      	ldr	r3, [r1, #8]
 8004f4c:	1e5a      	subs	r2, r3, #1
 8004f4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004f52:	bf83      	ittte	hi
 8004f54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004f58:	195b      	addhi	r3, r3, r5
 8004f5a:	9302      	strhi	r3, [sp, #8]
 8004f5c:	2300      	movls	r3, #0
 8004f5e:	bf86      	itte	hi
 8004f60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004f64:	608b      	strhi	r3, [r1, #8]
 8004f66:	9302      	strls	r3, [sp, #8]
 8004f68:	680b      	ldr	r3, [r1, #0]
 8004f6a:	468b      	mov	fp, r1
 8004f6c:	2500      	movs	r5, #0
 8004f6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004f72:	f84b 3b1c 	str.w	r3, [fp], #28
 8004f76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	465e      	mov	r6, fp
 8004f80:	46aa      	mov	sl, r5
 8004f82:	46a9      	mov	r9, r5
 8004f84:	9501      	str	r5, [sp, #4]
 8004f86:	68a2      	ldr	r2, [r4, #8]
 8004f88:	b152      	cbz	r2, 8004fa0 <_scanf_float+0x60>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b4e      	cmp	r3, #78	; 0x4e
 8004f90:	d864      	bhi.n	800505c <_scanf_float+0x11c>
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d83c      	bhi.n	8005010 <_scanf_float+0xd0>
 8004f96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004f9a:	b2c8      	uxtb	r0, r1
 8004f9c:	280e      	cmp	r0, #14
 8004f9e:	d93a      	bls.n	8005016 <_scanf_float+0xd6>
 8004fa0:	f1b9 0f00 	cmp.w	r9, #0
 8004fa4:	d003      	beq.n	8004fae <_scanf_float+0x6e>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004fb2:	f1ba 0f01 	cmp.w	sl, #1
 8004fb6:	f200 8113 	bhi.w	80051e0 <_scanf_float+0x2a0>
 8004fba:	455e      	cmp	r6, fp
 8004fbc:	f200 8105 	bhi.w	80051ca <_scanf_float+0x28a>
 8004fc0:	2501      	movs	r5, #1
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	b007      	add	sp, #28
 8004fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004fce:	2a0d      	cmp	r2, #13
 8004fd0:	d8e6      	bhi.n	8004fa0 <_scanf_float+0x60>
 8004fd2:	a101      	add	r1, pc, #4	; (adr r1, 8004fd8 <_scanf_float+0x98>)
 8004fd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004fd8:	08005117 	.word	0x08005117
 8004fdc:	08004fa1 	.word	0x08004fa1
 8004fe0:	08004fa1 	.word	0x08004fa1
 8004fe4:	08004fa1 	.word	0x08004fa1
 8004fe8:	08005177 	.word	0x08005177
 8004fec:	0800514f 	.word	0x0800514f
 8004ff0:	08004fa1 	.word	0x08004fa1
 8004ff4:	08004fa1 	.word	0x08004fa1
 8004ff8:	08005125 	.word	0x08005125
 8004ffc:	08004fa1 	.word	0x08004fa1
 8005000:	08004fa1 	.word	0x08004fa1
 8005004:	08004fa1 	.word	0x08004fa1
 8005008:	08004fa1 	.word	0x08004fa1
 800500c:	080050dd 	.word	0x080050dd
 8005010:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005014:	e7db      	b.n	8004fce <_scanf_float+0x8e>
 8005016:	290e      	cmp	r1, #14
 8005018:	d8c2      	bhi.n	8004fa0 <_scanf_float+0x60>
 800501a:	a001      	add	r0, pc, #4	; (adr r0, 8005020 <_scanf_float+0xe0>)
 800501c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005020:	080050cf 	.word	0x080050cf
 8005024:	08004fa1 	.word	0x08004fa1
 8005028:	080050cf 	.word	0x080050cf
 800502c:	08005163 	.word	0x08005163
 8005030:	08004fa1 	.word	0x08004fa1
 8005034:	0800507d 	.word	0x0800507d
 8005038:	080050b9 	.word	0x080050b9
 800503c:	080050b9 	.word	0x080050b9
 8005040:	080050b9 	.word	0x080050b9
 8005044:	080050b9 	.word	0x080050b9
 8005048:	080050b9 	.word	0x080050b9
 800504c:	080050b9 	.word	0x080050b9
 8005050:	080050b9 	.word	0x080050b9
 8005054:	080050b9 	.word	0x080050b9
 8005058:	080050b9 	.word	0x080050b9
 800505c:	2b6e      	cmp	r3, #110	; 0x6e
 800505e:	d809      	bhi.n	8005074 <_scanf_float+0x134>
 8005060:	2b60      	cmp	r3, #96	; 0x60
 8005062:	d8b2      	bhi.n	8004fca <_scanf_float+0x8a>
 8005064:	2b54      	cmp	r3, #84	; 0x54
 8005066:	d077      	beq.n	8005158 <_scanf_float+0x218>
 8005068:	2b59      	cmp	r3, #89	; 0x59
 800506a:	d199      	bne.n	8004fa0 <_scanf_float+0x60>
 800506c:	2d07      	cmp	r5, #7
 800506e:	d197      	bne.n	8004fa0 <_scanf_float+0x60>
 8005070:	2508      	movs	r5, #8
 8005072:	e029      	b.n	80050c8 <_scanf_float+0x188>
 8005074:	2b74      	cmp	r3, #116	; 0x74
 8005076:	d06f      	beq.n	8005158 <_scanf_float+0x218>
 8005078:	2b79      	cmp	r3, #121	; 0x79
 800507a:	e7f6      	b.n	800506a <_scanf_float+0x12a>
 800507c:	6821      	ldr	r1, [r4, #0]
 800507e:	05c8      	lsls	r0, r1, #23
 8005080:	d51a      	bpl.n	80050b8 <_scanf_float+0x178>
 8005082:	9b02      	ldr	r3, [sp, #8]
 8005084:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005088:	6021      	str	r1, [r4, #0]
 800508a:	f109 0901 	add.w	r9, r9, #1
 800508e:	b11b      	cbz	r3, 8005098 <_scanf_float+0x158>
 8005090:	3b01      	subs	r3, #1
 8005092:	3201      	adds	r2, #1
 8005094:	9302      	str	r3, [sp, #8]
 8005096:	60a2      	str	r2, [r4, #8]
 8005098:	68a3      	ldr	r3, [r4, #8]
 800509a:	3b01      	subs	r3, #1
 800509c:	60a3      	str	r3, [r4, #8]
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	3301      	adds	r3, #1
 80050a2:	6123      	str	r3, [r4, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	f340 8084 	ble.w	80051b8 <_scanf_float+0x278>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	3301      	adds	r3, #1
 80050b4:	603b      	str	r3, [r7, #0]
 80050b6:	e766      	b.n	8004f86 <_scanf_float+0x46>
 80050b8:	eb1a 0f05 	cmn.w	sl, r5
 80050bc:	f47f af70 	bne.w	8004fa0 <_scanf_float+0x60>
 80050c0:	6822      	ldr	r2, [r4, #0]
 80050c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	f806 3b01 	strb.w	r3, [r6], #1
 80050cc:	e7e4      	b.n	8005098 <_scanf_float+0x158>
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	0610      	lsls	r0, r2, #24
 80050d2:	f57f af65 	bpl.w	8004fa0 <_scanf_float+0x60>
 80050d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050da:	e7f4      	b.n	80050c6 <_scanf_float+0x186>
 80050dc:	f1ba 0f00 	cmp.w	sl, #0
 80050e0:	d10e      	bne.n	8005100 <_scanf_float+0x1c0>
 80050e2:	f1b9 0f00 	cmp.w	r9, #0
 80050e6:	d10e      	bne.n	8005106 <_scanf_float+0x1c6>
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80050ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80050f2:	d108      	bne.n	8005106 <_scanf_float+0x1c6>
 80050f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	f04f 0a01 	mov.w	sl, #1
 80050fe:	e7e3      	b.n	80050c8 <_scanf_float+0x188>
 8005100:	f1ba 0f02 	cmp.w	sl, #2
 8005104:	d055      	beq.n	80051b2 <_scanf_float+0x272>
 8005106:	2d01      	cmp	r5, #1
 8005108:	d002      	beq.n	8005110 <_scanf_float+0x1d0>
 800510a:	2d04      	cmp	r5, #4
 800510c:	f47f af48 	bne.w	8004fa0 <_scanf_float+0x60>
 8005110:	3501      	adds	r5, #1
 8005112:	b2ed      	uxtb	r5, r5
 8005114:	e7d8      	b.n	80050c8 <_scanf_float+0x188>
 8005116:	f1ba 0f01 	cmp.w	sl, #1
 800511a:	f47f af41 	bne.w	8004fa0 <_scanf_float+0x60>
 800511e:	f04f 0a02 	mov.w	sl, #2
 8005122:	e7d1      	b.n	80050c8 <_scanf_float+0x188>
 8005124:	b97d      	cbnz	r5, 8005146 <_scanf_float+0x206>
 8005126:	f1b9 0f00 	cmp.w	r9, #0
 800512a:	f47f af3c 	bne.w	8004fa6 <_scanf_float+0x66>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005134:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005138:	f47f af39 	bne.w	8004fae <_scanf_float+0x6e>
 800513c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005140:	6022      	str	r2, [r4, #0]
 8005142:	2501      	movs	r5, #1
 8005144:	e7c0      	b.n	80050c8 <_scanf_float+0x188>
 8005146:	2d03      	cmp	r5, #3
 8005148:	d0e2      	beq.n	8005110 <_scanf_float+0x1d0>
 800514a:	2d05      	cmp	r5, #5
 800514c:	e7de      	b.n	800510c <_scanf_float+0x1cc>
 800514e:	2d02      	cmp	r5, #2
 8005150:	f47f af26 	bne.w	8004fa0 <_scanf_float+0x60>
 8005154:	2503      	movs	r5, #3
 8005156:	e7b7      	b.n	80050c8 <_scanf_float+0x188>
 8005158:	2d06      	cmp	r5, #6
 800515a:	f47f af21 	bne.w	8004fa0 <_scanf_float+0x60>
 800515e:	2507      	movs	r5, #7
 8005160:	e7b2      	b.n	80050c8 <_scanf_float+0x188>
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	0591      	lsls	r1, r2, #22
 8005166:	f57f af1b 	bpl.w	8004fa0 <_scanf_float+0x60>
 800516a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800516e:	6022      	str	r2, [r4, #0]
 8005170:	f8cd 9004 	str.w	r9, [sp, #4]
 8005174:	e7a8      	b.n	80050c8 <_scanf_float+0x188>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800517c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005180:	d006      	beq.n	8005190 <_scanf_float+0x250>
 8005182:	0550      	lsls	r0, r2, #21
 8005184:	f57f af0c 	bpl.w	8004fa0 <_scanf_float+0x60>
 8005188:	f1b9 0f00 	cmp.w	r9, #0
 800518c:	f43f af0f 	beq.w	8004fae <_scanf_float+0x6e>
 8005190:	0591      	lsls	r1, r2, #22
 8005192:	bf58      	it	pl
 8005194:	9901      	ldrpl	r1, [sp, #4]
 8005196:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800519a:	bf58      	it	pl
 800519c:	eba9 0101 	subpl.w	r1, r9, r1
 80051a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80051a4:	bf58      	it	pl
 80051a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80051aa:	6022      	str	r2, [r4, #0]
 80051ac:	f04f 0900 	mov.w	r9, #0
 80051b0:	e78a      	b.n	80050c8 <_scanf_float+0x188>
 80051b2:	f04f 0a03 	mov.w	sl, #3
 80051b6:	e787      	b.n	80050c8 <_scanf_float+0x188>
 80051b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80051bc:	4639      	mov	r1, r7
 80051be:	4640      	mov	r0, r8
 80051c0:	4798      	blx	r3
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f43f aedf 	beq.w	8004f86 <_scanf_float+0x46>
 80051c8:	e6ea      	b.n	8004fa0 <_scanf_float+0x60>
 80051ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051d2:	463a      	mov	r2, r7
 80051d4:	4640      	mov	r0, r8
 80051d6:	4798      	blx	r3
 80051d8:	6923      	ldr	r3, [r4, #16]
 80051da:	3b01      	subs	r3, #1
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	e6ec      	b.n	8004fba <_scanf_float+0x7a>
 80051e0:	1e6b      	subs	r3, r5, #1
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d825      	bhi.n	8005232 <_scanf_float+0x2f2>
 80051e6:	2d02      	cmp	r5, #2
 80051e8:	d836      	bhi.n	8005258 <_scanf_float+0x318>
 80051ea:	455e      	cmp	r6, fp
 80051ec:	f67f aee8 	bls.w	8004fc0 <_scanf_float+0x80>
 80051f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80051f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80051f8:	463a      	mov	r2, r7
 80051fa:	4640      	mov	r0, r8
 80051fc:	4798      	blx	r3
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	3b01      	subs	r3, #1
 8005202:	6123      	str	r3, [r4, #16]
 8005204:	e7f1      	b.n	80051ea <_scanf_float+0x2aa>
 8005206:	9802      	ldr	r0, [sp, #8]
 8005208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800520c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005210:	9002      	str	r0, [sp, #8]
 8005212:	463a      	mov	r2, r7
 8005214:	4640      	mov	r0, r8
 8005216:	4798      	blx	r3
 8005218:	6923      	ldr	r3, [r4, #16]
 800521a:	3b01      	subs	r3, #1
 800521c:	6123      	str	r3, [r4, #16]
 800521e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005222:	fa5f fa8a 	uxtb.w	sl, sl
 8005226:	f1ba 0f02 	cmp.w	sl, #2
 800522a:	d1ec      	bne.n	8005206 <_scanf_float+0x2c6>
 800522c:	3d03      	subs	r5, #3
 800522e:	b2ed      	uxtb	r5, r5
 8005230:	1b76      	subs	r6, r6, r5
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	05da      	lsls	r2, r3, #23
 8005236:	d52f      	bpl.n	8005298 <_scanf_float+0x358>
 8005238:	055b      	lsls	r3, r3, #21
 800523a:	d510      	bpl.n	800525e <_scanf_float+0x31e>
 800523c:	455e      	cmp	r6, fp
 800523e:	f67f aebf 	bls.w	8004fc0 <_scanf_float+0x80>
 8005242:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800524a:	463a      	mov	r2, r7
 800524c:	4640      	mov	r0, r8
 800524e:	4798      	blx	r3
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	3b01      	subs	r3, #1
 8005254:	6123      	str	r3, [r4, #16]
 8005256:	e7f1      	b.n	800523c <_scanf_float+0x2fc>
 8005258:	46aa      	mov	sl, r5
 800525a:	9602      	str	r6, [sp, #8]
 800525c:	e7df      	b.n	800521e <_scanf_float+0x2de>
 800525e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	2965      	cmp	r1, #101	; 0x65
 8005266:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800526a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	d00c      	beq.n	800528c <_scanf_float+0x34c>
 8005272:	2945      	cmp	r1, #69	; 0x45
 8005274:	d00a      	beq.n	800528c <_scanf_float+0x34c>
 8005276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800527a:	463a      	mov	r2, r7
 800527c:	4640      	mov	r0, r8
 800527e:	4798      	blx	r3
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005286:	3b01      	subs	r3, #1
 8005288:	1eb5      	subs	r5, r6, #2
 800528a:	6123      	str	r3, [r4, #16]
 800528c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005290:	463a      	mov	r2, r7
 8005292:	4640      	mov	r0, r8
 8005294:	4798      	blx	r3
 8005296:	462e      	mov	r6, r5
 8005298:	6825      	ldr	r5, [r4, #0]
 800529a:	f015 0510 	ands.w	r5, r5, #16
 800529e:	d159      	bne.n	8005354 <_scanf_float+0x414>
 80052a0:	7035      	strb	r5, [r6, #0]
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ac:	d11b      	bne.n	80052e6 <_scanf_float+0x3a6>
 80052ae:	9b01      	ldr	r3, [sp, #4]
 80052b0:	454b      	cmp	r3, r9
 80052b2:	eba3 0209 	sub.w	r2, r3, r9
 80052b6:	d123      	bne.n	8005300 <_scanf_float+0x3c0>
 80052b8:	2200      	movs	r2, #0
 80052ba:	4659      	mov	r1, fp
 80052bc:	4640      	mov	r0, r8
 80052be:	f000 ffa5 	bl	800620c <_strtod_r>
 80052c2:	6822      	ldr	r2, [r4, #0]
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	f012 0f02 	tst.w	r2, #2
 80052ca:	ec57 6b10 	vmov	r6, r7, d0
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	d021      	beq.n	8005316 <_scanf_float+0x3d6>
 80052d2:	9903      	ldr	r1, [sp, #12]
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	600a      	str	r2, [r1, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	e9c3 6700 	strd	r6, r7, [r3]
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	3301      	adds	r3, #1
 80052e2:	60e3      	str	r3, [r4, #12]
 80052e4:	e66d      	b.n	8004fc2 <_scanf_float+0x82>
 80052e6:	9b04      	ldr	r3, [sp, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0e5      	beq.n	80052b8 <_scanf_float+0x378>
 80052ec:	9905      	ldr	r1, [sp, #20]
 80052ee:	230a      	movs	r3, #10
 80052f0:	462a      	mov	r2, r5
 80052f2:	3101      	adds	r1, #1
 80052f4:	4640      	mov	r0, r8
 80052f6:	f001 f811 	bl	800631c <_strtol_r>
 80052fa:	9b04      	ldr	r3, [sp, #16]
 80052fc:	9e05      	ldr	r6, [sp, #20]
 80052fe:	1ac2      	subs	r2, r0, r3
 8005300:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005304:	429e      	cmp	r6, r3
 8005306:	bf28      	it	cs
 8005308:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800530c:	4912      	ldr	r1, [pc, #72]	; (8005358 <_scanf_float+0x418>)
 800530e:	4630      	mov	r0, r6
 8005310:	f000 f938 	bl	8005584 <siprintf>
 8005314:	e7d0      	b.n	80052b8 <_scanf_float+0x378>
 8005316:	9903      	ldr	r1, [sp, #12]
 8005318:	f012 0f04 	tst.w	r2, #4
 800531c:	f103 0204 	add.w	r2, r3, #4
 8005320:	600a      	str	r2, [r1, #0]
 8005322:	d1d9      	bne.n	80052d8 <_scanf_float+0x398>
 8005324:	f8d3 8000 	ldr.w	r8, [r3]
 8005328:	ee10 2a10 	vmov	r2, s0
 800532c:	ee10 0a10 	vmov	r0, s0
 8005330:	463b      	mov	r3, r7
 8005332:	4639      	mov	r1, r7
 8005334:	f7fb fc12 	bl	8000b5c <__aeabi_dcmpun>
 8005338:	b128      	cbz	r0, 8005346 <_scanf_float+0x406>
 800533a:	4808      	ldr	r0, [pc, #32]	; (800535c <_scanf_float+0x41c>)
 800533c:	f000 f91c 	bl	8005578 <nanf>
 8005340:	ed88 0a00 	vstr	s0, [r8]
 8005344:	e7cb      	b.n	80052de <_scanf_float+0x39e>
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fb fc65 	bl	8000c18 <__aeabi_d2f>
 800534e:	f8c8 0000 	str.w	r0, [r8]
 8005352:	e7c4      	b.n	80052de <_scanf_float+0x39e>
 8005354:	2500      	movs	r5, #0
 8005356:	e634      	b.n	8004fc2 <_scanf_float+0x82>
 8005358:	08009df2 	.word	0x08009df2
 800535c:	0800a27b 	.word	0x0800a27b

08005360 <iprintf>:
 8005360:	b40f      	push	{r0, r1, r2, r3}
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <iprintf+0x2c>)
 8005364:	b513      	push	{r0, r1, r4, lr}
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	b124      	cbz	r4, 8005374 <iprintf+0x14>
 800536a:	69a3      	ldr	r3, [r4, #24]
 800536c:	b913      	cbnz	r3, 8005374 <iprintf+0x14>
 800536e:	4620      	mov	r0, r4
 8005370:	f001 ff7c 	bl	800726c <__sinit>
 8005374:	ab05      	add	r3, sp, #20
 8005376:	9a04      	ldr	r2, [sp, #16]
 8005378:	68a1      	ldr	r1, [r4, #8]
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	4620      	mov	r0, r4
 800537e:	f003 fb71 	bl	8008a64 <_vfiprintf_r>
 8005382:	b002      	add	sp, #8
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005388:	b004      	add	sp, #16
 800538a:	4770      	bx	lr
 800538c:	2000000c 	.word	0x2000000c

08005390 <putchar>:
 8005390:	4b09      	ldr	r3, [pc, #36]	; (80053b8 <putchar+0x28>)
 8005392:	b513      	push	{r0, r1, r4, lr}
 8005394:	681c      	ldr	r4, [r3, #0]
 8005396:	4601      	mov	r1, r0
 8005398:	b134      	cbz	r4, 80053a8 <putchar+0x18>
 800539a:	69a3      	ldr	r3, [r4, #24]
 800539c:	b923      	cbnz	r3, 80053a8 <putchar+0x18>
 800539e:	9001      	str	r0, [sp, #4]
 80053a0:	4620      	mov	r0, r4
 80053a2:	f001 ff63 	bl	800726c <__sinit>
 80053a6:	9901      	ldr	r1, [sp, #4]
 80053a8:	68a2      	ldr	r2, [r4, #8]
 80053aa:	4620      	mov	r0, r4
 80053ac:	b002      	add	sp, #8
 80053ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b2:	f003 bfa7 	b.w	8009304 <_putc_r>
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <iscanf>:
 80053bc:	b40f      	push	{r0, r1, r2, r3}
 80053be:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <iscanf+0x2c>)
 80053c0:	b513      	push	{r0, r1, r4, lr}
 80053c2:	681c      	ldr	r4, [r3, #0]
 80053c4:	b124      	cbz	r4, 80053d0 <iscanf+0x14>
 80053c6:	69a3      	ldr	r3, [r4, #24]
 80053c8:	b913      	cbnz	r3, 80053d0 <iscanf+0x14>
 80053ca:	4620      	mov	r0, r4
 80053cc:	f001 ff4e 	bl	800726c <__sinit>
 80053d0:	ab05      	add	r3, sp, #20
 80053d2:	9a04      	ldr	r2, [sp, #16]
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	4620      	mov	r0, r4
 80053da:	f003 fe19 	bl	8009010 <_vfiscanf_r>
 80053de:	b002      	add	sp, #8
 80053e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053e4:	b004      	add	sp, #16
 80053e6:	4770      	bx	lr
 80053e8:	2000000c 	.word	0x2000000c

080053ec <setvbuf>:
 80053ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	461d      	mov	r5, r3
 80053f2:	4b5d      	ldr	r3, [pc, #372]	; (8005568 <setvbuf+0x17c>)
 80053f4:	681f      	ldr	r7, [r3, #0]
 80053f6:	4604      	mov	r4, r0
 80053f8:	460e      	mov	r6, r1
 80053fa:	4690      	mov	r8, r2
 80053fc:	b127      	cbz	r7, 8005408 <setvbuf+0x1c>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	b913      	cbnz	r3, 8005408 <setvbuf+0x1c>
 8005402:	4638      	mov	r0, r7
 8005404:	f001 ff32 	bl	800726c <__sinit>
 8005408:	4b58      	ldr	r3, [pc, #352]	; (800556c <setvbuf+0x180>)
 800540a:	429c      	cmp	r4, r3
 800540c:	d167      	bne.n	80054de <setvbuf+0xf2>
 800540e:	687c      	ldr	r4, [r7, #4]
 8005410:	f1b8 0f02 	cmp.w	r8, #2
 8005414:	d006      	beq.n	8005424 <setvbuf+0x38>
 8005416:	f1b8 0f01 	cmp.w	r8, #1
 800541a:	f200 809f 	bhi.w	800555c <setvbuf+0x170>
 800541e:	2d00      	cmp	r5, #0
 8005420:	f2c0 809c 	blt.w	800555c <setvbuf+0x170>
 8005424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005426:	07db      	lsls	r3, r3, #31
 8005428:	d405      	bmi.n	8005436 <setvbuf+0x4a>
 800542a:	89a3      	ldrh	r3, [r4, #12]
 800542c:	0598      	lsls	r0, r3, #22
 800542e:	d402      	bmi.n	8005436 <setvbuf+0x4a>
 8005430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005432:	f002 fb4a 	bl	8007aca <__retarget_lock_acquire_recursive>
 8005436:	4621      	mov	r1, r4
 8005438:	4638      	mov	r0, r7
 800543a:	f001 fe71 	bl	8007120 <_fflush_r>
 800543e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005440:	b141      	cbz	r1, 8005454 <setvbuf+0x68>
 8005442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005446:	4299      	cmp	r1, r3
 8005448:	d002      	beq.n	8005450 <setvbuf+0x64>
 800544a:	4638      	mov	r0, r7
 800544c:	f003 f8a4 	bl	8008598 <_free_r>
 8005450:	2300      	movs	r3, #0
 8005452:	6363      	str	r3, [r4, #52]	; 0x34
 8005454:	2300      	movs	r3, #0
 8005456:	61a3      	str	r3, [r4, #24]
 8005458:	6063      	str	r3, [r4, #4]
 800545a:	89a3      	ldrh	r3, [r4, #12]
 800545c:	0619      	lsls	r1, r3, #24
 800545e:	d503      	bpl.n	8005468 <setvbuf+0x7c>
 8005460:	6921      	ldr	r1, [r4, #16]
 8005462:	4638      	mov	r0, r7
 8005464:	f003 f898 	bl	8008598 <_free_r>
 8005468:	89a3      	ldrh	r3, [r4, #12]
 800546a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800546e:	f023 0303 	bic.w	r3, r3, #3
 8005472:	f1b8 0f02 	cmp.w	r8, #2
 8005476:	81a3      	strh	r3, [r4, #12]
 8005478:	d06c      	beq.n	8005554 <setvbuf+0x168>
 800547a:	ab01      	add	r3, sp, #4
 800547c:	466a      	mov	r2, sp
 800547e:	4621      	mov	r1, r4
 8005480:	4638      	mov	r0, r7
 8005482:	f002 fb24 	bl	8007ace <__swhatbuf_r>
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	4318      	orrs	r0, r3
 800548a:	81a0      	strh	r0, [r4, #12]
 800548c:	2d00      	cmp	r5, #0
 800548e:	d130      	bne.n	80054f2 <setvbuf+0x106>
 8005490:	9d00      	ldr	r5, [sp, #0]
 8005492:	4628      	mov	r0, r5
 8005494:	f002 fb80 	bl	8007b98 <malloc>
 8005498:	4606      	mov	r6, r0
 800549a:	2800      	cmp	r0, #0
 800549c:	d155      	bne.n	800554a <setvbuf+0x15e>
 800549e:	f8dd 9000 	ldr.w	r9, [sp]
 80054a2:	45a9      	cmp	r9, r5
 80054a4:	d14a      	bne.n	800553c <setvbuf+0x150>
 80054a6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80054aa:	2200      	movs	r2, #0
 80054ac:	60a2      	str	r2, [r4, #8]
 80054ae:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80054b2:	6022      	str	r2, [r4, #0]
 80054b4:	6122      	str	r2, [r4, #16]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054bc:	6162      	str	r2, [r4, #20]
 80054be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80054c0:	f043 0302 	orr.w	r3, r3, #2
 80054c4:	07d2      	lsls	r2, r2, #31
 80054c6:	81a3      	strh	r3, [r4, #12]
 80054c8:	d405      	bmi.n	80054d6 <setvbuf+0xea>
 80054ca:	f413 7f00 	tst.w	r3, #512	; 0x200
 80054ce:	d102      	bne.n	80054d6 <setvbuf+0xea>
 80054d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054d2:	f002 fafb 	bl	8007acc <__retarget_lock_release_recursive>
 80054d6:	4628      	mov	r0, r5
 80054d8:	b003      	add	sp, #12
 80054da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <setvbuf+0x184>)
 80054e0:	429c      	cmp	r4, r3
 80054e2:	d101      	bne.n	80054e8 <setvbuf+0xfc>
 80054e4:	68bc      	ldr	r4, [r7, #8]
 80054e6:	e793      	b.n	8005410 <setvbuf+0x24>
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <setvbuf+0x188>)
 80054ea:	429c      	cmp	r4, r3
 80054ec:	bf08      	it	eq
 80054ee:	68fc      	ldreq	r4, [r7, #12]
 80054f0:	e78e      	b.n	8005410 <setvbuf+0x24>
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d0cd      	beq.n	8005492 <setvbuf+0xa6>
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	b913      	cbnz	r3, 8005500 <setvbuf+0x114>
 80054fa:	4638      	mov	r0, r7
 80054fc:	f001 feb6 	bl	800726c <__sinit>
 8005500:	f1b8 0f01 	cmp.w	r8, #1
 8005504:	bf08      	it	eq
 8005506:	89a3      	ldrheq	r3, [r4, #12]
 8005508:	6026      	str	r6, [r4, #0]
 800550a:	bf04      	itt	eq
 800550c:	f043 0301 	orreq.w	r3, r3, #1
 8005510:	81a3      	strheq	r3, [r4, #12]
 8005512:	89a2      	ldrh	r2, [r4, #12]
 8005514:	f012 0308 	ands.w	r3, r2, #8
 8005518:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800551c:	d01c      	beq.n	8005558 <setvbuf+0x16c>
 800551e:	07d3      	lsls	r3, r2, #31
 8005520:	bf41      	itttt	mi
 8005522:	2300      	movmi	r3, #0
 8005524:	426d      	negmi	r5, r5
 8005526:	60a3      	strmi	r3, [r4, #8]
 8005528:	61a5      	strmi	r5, [r4, #24]
 800552a:	bf58      	it	pl
 800552c:	60a5      	strpl	r5, [r4, #8]
 800552e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005530:	f015 0501 	ands.w	r5, r5, #1
 8005534:	d115      	bne.n	8005562 <setvbuf+0x176>
 8005536:	f412 7f00 	tst.w	r2, #512	; 0x200
 800553a:	e7c8      	b.n	80054ce <setvbuf+0xe2>
 800553c:	4648      	mov	r0, r9
 800553e:	f002 fb2b 	bl	8007b98 <malloc>
 8005542:	4606      	mov	r6, r0
 8005544:	2800      	cmp	r0, #0
 8005546:	d0ae      	beq.n	80054a6 <setvbuf+0xba>
 8005548:	464d      	mov	r5, r9
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	e7d0      	b.n	80054f6 <setvbuf+0x10a>
 8005554:	2500      	movs	r5, #0
 8005556:	e7a8      	b.n	80054aa <setvbuf+0xbe>
 8005558:	60a3      	str	r3, [r4, #8]
 800555a:	e7e8      	b.n	800552e <setvbuf+0x142>
 800555c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005560:	e7b9      	b.n	80054d6 <setvbuf+0xea>
 8005562:	2500      	movs	r5, #0
 8005564:	e7b7      	b.n	80054d6 <setvbuf+0xea>
 8005566:	bf00      	nop
 8005568:	2000000c 	.word	0x2000000c
 800556c:	08009ffc 	.word	0x08009ffc
 8005570:	0800a01c 	.word	0x0800a01c
 8005574:	08009fdc 	.word	0x08009fdc

08005578 <nanf>:
 8005578:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005580 <nanf+0x8>
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	7fc00000 	.word	0x7fc00000

08005584 <siprintf>:
 8005584:	b40e      	push	{r1, r2, r3}
 8005586:	b500      	push	{lr}
 8005588:	b09c      	sub	sp, #112	; 0x70
 800558a:	ab1d      	add	r3, sp, #116	; 0x74
 800558c:	9002      	str	r0, [sp, #8]
 800558e:	9006      	str	r0, [sp, #24]
 8005590:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005594:	4809      	ldr	r0, [pc, #36]	; (80055bc <siprintf+0x38>)
 8005596:	9107      	str	r1, [sp, #28]
 8005598:	9104      	str	r1, [sp, #16]
 800559a:	4909      	ldr	r1, [pc, #36]	; (80055c0 <siprintf+0x3c>)
 800559c:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a0:	9105      	str	r1, [sp, #20]
 80055a2:	6800      	ldr	r0, [r0, #0]
 80055a4:	9301      	str	r3, [sp, #4]
 80055a6:	a902      	add	r1, sp, #8
 80055a8:	f003 f932 	bl	8008810 <_svfiprintf_r>
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	2200      	movs	r2, #0
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	b01c      	add	sp, #112	; 0x70
 80055b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055b8:	b003      	add	sp, #12
 80055ba:	4770      	bx	lr
 80055bc:	2000000c 	.word	0x2000000c
 80055c0:	ffff0208 	.word	0xffff0208

080055c4 <sulp>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4604      	mov	r4, r0
 80055c8:	460d      	mov	r5, r1
 80055ca:	ec45 4b10 	vmov	d0, r4, r5
 80055ce:	4616      	mov	r6, r2
 80055d0:	f002 fe7c 	bl	80082cc <__ulp>
 80055d4:	ec51 0b10 	vmov	r0, r1, d0
 80055d8:	b17e      	cbz	r6, 80055fa <sulp+0x36>
 80055da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80055de:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dd09      	ble.n	80055fa <sulp+0x36>
 80055e6:	051b      	lsls	r3, r3, #20
 80055e8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80055ec:	2400      	movs	r4, #0
 80055ee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80055f2:	4622      	mov	r2, r4
 80055f4:	462b      	mov	r3, r5
 80055f6:	f7fb f817 	bl	8000628 <__aeabi_dmul>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	0000      	movs	r0, r0
	...

08005600 <_strtod_l>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	ed2d 8b02 	vpush	{d8}
 8005608:	b09d      	sub	sp, #116	; 0x74
 800560a:	461f      	mov	r7, r3
 800560c:	2300      	movs	r3, #0
 800560e:	9318      	str	r3, [sp, #96]	; 0x60
 8005610:	4ba2      	ldr	r3, [pc, #648]	; (800589c <_strtod_l+0x29c>)
 8005612:	9213      	str	r2, [sp, #76]	; 0x4c
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	9305      	str	r3, [sp, #20]
 8005618:	4604      	mov	r4, r0
 800561a:	4618      	mov	r0, r3
 800561c:	4688      	mov	r8, r1
 800561e:	f7fa fdef 	bl	8000200 <strlen>
 8005622:	f04f 0a00 	mov.w	sl, #0
 8005626:	4605      	mov	r5, r0
 8005628:	f04f 0b00 	mov.w	fp, #0
 800562c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005632:	781a      	ldrb	r2, [r3, #0]
 8005634:	2a2b      	cmp	r2, #43	; 0x2b
 8005636:	d04e      	beq.n	80056d6 <_strtod_l+0xd6>
 8005638:	d83b      	bhi.n	80056b2 <_strtod_l+0xb2>
 800563a:	2a0d      	cmp	r2, #13
 800563c:	d834      	bhi.n	80056a8 <_strtod_l+0xa8>
 800563e:	2a08      	cmp	r2, #8
 8005640:	d834      	bhi.n	80056ac <_strtod_l+0xac>
 8005642:	2a00      	cmp	r2, #0
 8005644:	d03e      	beq.n	80056c4 <_strtod_l+0xc4>
 8005646:	2300      	movs	r3, #0
 8005648:	930a      	str	r3, [sp, #40]	; 0x28
 800564a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800564c:	7833      	ldrb	r3, [r6, #0]
 800564e:	2b30      	cmp	r3, #48	; 0x30
 8005650:	f040 80b0 	bne.w	80057b4 <_strtod_l+0x1b4>
 8005654:	7873      	ldrb	r3, [r6, #1]
 8005656:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800565a:	2b58      	cmp	r3, #88	; 0x58
 800565c:	d168      	bne.n	8005730 <_strtod_l+0x130>
 800565e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	ab18      	add	r3, sp, #96	; 0x60
 8005664:	9702      	str	r7, [sp, #8]
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4a8d      	ldr	r2, [pc, #564]	; (80058a0 <_strtod_l+0x2a0>)
 800566a:	ab19      	add	r3, sp, #100	; 0x64
 800566c:	a917      	add	r1, sp, #92	; 0x5c
 800566e:	4620      	mov	r0, r4
 8005670:	f001 ff1e 	bl	80074b0 <__gethex>
 8005674:	f010 0707 	ands.w	r7, r0, #7
 8005678:	4605      	mov	r5, r0
 800567a:	d005      	beq.n	8005688 <_strtod_l+0x88>
 800567c:	2f06      	cmp	r7, #6
 800567e:	d12c      	bne.n	80056da <_strtod_l+0xda>
 8005680:	3601      	adds	r6, #1
 8005682:	2300      	movs	r3, #0
 8005684:	9617      	str	r6, [sp, #92]	; 0x5c
 8005686:	930a      	str	r3, [sp, #40]	; 0x28
 8005688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 8590 	bne.w	80061b0 <_strtod_l+0xbb0>
 8005690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005692:	b1eb      	cbz	r3, 80056d0 <_strtod_l+0xd0>
 8005694:	4652      	mov	r2, sl
 8005696:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800569a:	ec43 2b10 	vmov	d0, r2, r3
 800569e:	b01d      	add	sp, #116	; 0x74
 80056a0:	ecbd 8b02 	vpop	{d8}
 80056a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a8:	2a20      	cmp	r2, #32
 80056aa:	d1cc      	bne.n	8005646 <_strtod_l+0x46>
 80056ac:	3301      	adds	r3, #1
 80056ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80056b0:	e7be      	b.n	8005630 <_strtod_l+0x30>
 80056b2:	2a2d      	cmp	r2, #45	; 0x2d
 80056b4:	d1c7      	bne.n	8005646 <_strtod_l+0x46>
 80056b6:	2201      	movs	r2, #1
 80056b8:	920a      	str	r2, [sp, #40]	; 0x28
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	9217      	str	r2, [sp, #92]	; 0x5c
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1c2      	bne.n	800564a <_strtod_l+0x4a>
 80056c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80056c6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	f040 856e 	bne.w	80061ac <_strtod_l+0xbac>
 80056d0:	4652      	mov	r2, sl
 80056d2:	465b      	mov	r3, fp
 80056d4:	e7e1      	b.n	800569a <_strtod_l+0x9a>
 80056d6:	2200      	movs	r2, #0
 80056d8:	e7ee      	b.n	80056b8 <_strtod_l+0xb8>
 80056da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80056dc:	b13a      	cbz	r2, 80056ee <_strtod_l+0xee>
 80056de:	2135      	movs	r1, #53	; 0x35
 80056e0:	a81a      	add	r0, sp, #104	; 0x68
 80056e2:	f002 fefe 	bl	80084e2 <__copybits>
 80056e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80056e8:	4620      	mov	r0, r4
 80056ea:	f002 fabd 	bl	8007c68 <_Bfree>
 80056ee:	3f01      	subs	r7, #1
 80056f0:	2f04      	cmp	r7, #4
 80056f2:	d806      	bhi.n	8005702 <_strtod_l+0x102>
 80056f4:	e8df f007 	tbb	[pc, r7]
 80056f8:	1714030a 	.word	0x1714030a
 80056fc:	0a          	.byte	0x0a
 80056fd:	00          	.byte	0x00
 80056fe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005702:	0728      	lsls	r0, r5, #28
 8005704:	d5c0      	bpl.n	8005688 <_strtod_l+0x88>
 8005706:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800570a:	e7bd      	b.n	8005688 <_strtod_l+0x88>
 800570c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005710:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005712:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005716:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800571a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800571e:	e7f0      	b.n	8005702 <_strtod_l+0x102>
 8005720:	f8df b180 	ldr.w	fp, [pc, #384]	; 80058a4 <_strtod_l+0x2a4>
 8005724:	e7ed      	b.n	8005702 <_strtod_l+0x102>
 8005726:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800572a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800572e:	e7e8      	b.n	8005702 <_strtod_l+0x102>
 8005730:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	9217      	str	r2, [sp, #92]	; 0x5c
 8005736:	785b      	ldrb	r3, [r3, #1]
 8005738:	2b30      	cmp	r3, #48	; 0x30
 800573a:	d0f9      	beq.n	8005730 <_strtod_l+0x130>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0a3      	beq.n	8005688 <_strtod_l+0x88>
 8005740:	2301      	movs	r3, #1
 8005742:	f04f 0900 	mov.w	r9, #0
 8005746:	9304      	str	r3, [sp, #16]
 8005748:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800574a:	9308      	str	r3, [sp, #32]
 800574c:	f8cd 901c 	str.w	r9, [sp, #28]
 8005750:	464f      	mov	r7, r9
 8005752:	220a      	movs	r2, #10
 8005754:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005756:	7806      	ldrb	r6, [r0, #0]
 8005758:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800575c:	b2d9      	uxtb	r1, r3
 800575e:	2909      	cmp	r1, #9
 8005760:	d92a      	bls.n	80057b8 <_strtod_l+0x1b8>
 8005762:	9905      	ldr	r1, [sp, #20]
 8005764:	462a      	mov	r2, r5
 8005766:	f003 ff3e 	bl	80095e6 <strncmp>
 800576a:	b398      	cbz	r0, 80057d4 <_strtod_l+0x1d4>
 800576c:	2000      	movs	r0, #0
 800576e:	4632      	mov	r2, r6
 8005770:	463d      	mov	r5, r7
 8005772:	9005      	str	r0, [sp, #20]
 8005774:	4603      	mov	r3, r0
 8005776:	2a65      	cmp	r2, #101	; 0x65
 8005778:	d001      	beq.n	800577e <_strtod_l+0x17e>
 800577a:	2a45      	cmp	r2, #69	; 0x45
 800577c:	d118      	bne.n	80057b0 <_strtod_l+0x1b0>
 800577e:	b91d      	cbnz	r5, 8005788 <_strtod_l+0x188>
 8005780:	9a04      	ldr	r2, [sp, #16]
 8005782:	4302      	orrs	r2, r0
 8005784:	d09e      	beq.n	80056c4 <_strtod_l+0xc4>
 8005786:	2500      	movs	r5, #0
 8005788:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800578c:	f108 0201 	add.w	r2, r8, #1
 8005790:	9217      	str	r2, [sp, #92]	; 0x5c
 8005792:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005796:	2a2b      	cmp	r2, #43	; 0x2b
 8005798:	d075      	beq.n	8005886 <_strtod_l+0x286>
 800579a:	2a2d      	cmp	r2, #45	; 0x2d
 800579c:	d07b      	beq.n	8005896 <_strtod_l+0x296>
 800579e:	f04f 0c00 	mov.w	ip, #0
 80057a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80057a6:	2909      	cmp	r1, #9
 80057a8:	f240 8082 	bls.w	80058b0 <_strtod_l+0x2b0>
 80057ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80057b0:	2600      	movs	r6, #0
 80057b2:	e09d      	b.n	80058f0 <_strtod_l+0x2f0>
 80057b4:	2300      	movs	r3, #0
 80057b6:	e7c4      	b.n	8005742 <_strtod_l+0x142>
 80057b8:	2f08      	cmp	r7, #8
 80057ba:	bfd8      	it	le
 80057bc:	9907      	ldrle	r1, [sp, #28]
 80057be:	f100 0001 	add.w	r0, r0, #1
 80057c2:	bfda      	itte	le
 80057c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80057c8:	9307      	strle	r3, [sp, #28]
 80057ca:	fb02 3909 	mlagt	r9, r2, r9, r3
 80057ce:	3701      	adds	r7, #1
 80057d0:	9017      	str	r0, [sp, #92]	; 0x5c
 80057d2:	e7bf      	b.n	8005754 <_strtod_l+0x154>
 80057d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057d6:	195a      	adds	r2, r3, r5
 80057d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80057da:	5d5a      	ldrb	r2, [r3, r5]
 80057dc:	2f00      	cmp	r7, #0
 80057de:	d037      	beq.n	8005850 <_strtod_l+0x250>
 80057e0:	9005      	str	r0, [sp, #20]
 80057e2:	463d      	mov	r5, r7
 80057e4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80057e8:	2b09      	cmp	r3, #9
 80057ea:	d912      	bls.n	8005812 <_strtod_l+0x212>
 80057ec:	2301      	movs	r3, #1
 80057ee:	e7c2      	b.n	8005776 <_strtod_l+0x176>
 80057f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80057f6:	785a      	ldrb	r2, [r3, #1]
 80057f8:	3001      	adds	r0, #1
 80057fa:	2a30      	cmp	r2, #48	; 0x30
 80057fc:	d0f8      	beq.n	80057f0 <_strtod_l+0x1f0>
 80057fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005802:	2b08      	cmp	r3, #8
 8005804:	f200 84d9 	bhi.w	80061ba <_strtod_l+0xbba>
 8005808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800580a:	9005      	str	r0, [sp, #20]
 800580c:	2000      	movs	r0, #0
 800580e:	9308      	str	r3, [sp, #32]
 8005810:	4605      	mov	r5, r0
 8005812:	3a30      	subs	r2, #48	; 0x30
 8005814:	f100 0301 	add.w	r3, r0, #1
 8005818:	d014      	beq.n	8005844 <_strtod_l+0x244>
 800581a:	9905      	ldr	r1, [sp, #20]
 800581c:	4419      	add	r1, r3
 800581e:	9105      	str	r1, [sp, #20]
 8005820:	462b      	mov	r3, r5
 8005822:	eb00 0e05 	add.w	lr, r0, r5
 8005826:	210a      	movs	r1, #10
 8005828:	4573      	cmp	r3, lr
 800582a:	d113      	bne.n	8005854 <_strtod_l+0x254>
 800582c:	182b      	adds	r3, r5, r0
 800582e:	2b08      	cmp	r3, #8
 8005830:	f105 0501 	add.w	r5, r5, #1
 8005834:	4405      	add	r5, r0
 8005836:	dc1c      	bgt.n	8005872 <_strtod_l+0x272>
 8005838:	9907      	ldr	r1, [sp, #28]
 800583a:	230a      	movs	r3, #10
 800583c:	fb03 2301 	mla	r3, r3, r1, r2
 8005840:	9307      	str	r3, [sp, #28]
 8005842:	2300      	movs	r3, #0
 8005844:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005846:	1c51      	adds	r1, r2, #1
 8005848:	9117      	str	r1, [sp, #92]	; 0x5c
 800584a:	7852      	ldrb	r2, [r2, #1]
 800584c:	4618      	mov	r0, r3
 800584e:	e7c9      	b.n	80057e4 <_strtod_l+0x1e4>
 8005850:	4638      	mov	r0, r7
 8005852:	e7d2      	b.n	80057fa <_strtod_l+0x1fa>
 8005854:	2b08      	cmp	r3, #8
 8005856:	dc04      	bgt.n	8005862 <_strtod_l+0x262>
 8005858:	9e07      	ldr	r6, [sp, #28]
 800585a:	434e      	muls	r6, r1
 800585c:	9607      	str	r6, [sp, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	e7e2      	b.n	8005828 <_strtod_l+0x228>
 8005862:	f103 0c01 	add.w	ip, r3, #1
 8005866:	f1bc 0f10 	cmp.w	ip, #16
 800586a:	bfd8      	it	le
 800586c:	fb01 f909 	mulle.w	r9, r1, r9
 8005870:	e7f5      	b.n	800585e <_strtod_l+0x25e>
 8005872:	2d10      	cmp	r5, #16
 8005874:	bfdc      	itt	le
 8005876:	230a      	movle	r3, #10
 8005878:	fb03 2909 	mlale	r9, r3, r9, r2
 800587c:	e7e1      	b.n	8005842 <_strtod_l+0x242>
 800587e:	2300      	movs	r3, #0
 8005880:	9305      	str	r3, [sp, #20]
 8005882:	2301      	movs	r3, #1
 8005884:	e77c      	b.n	8005780 <_strtod_l+0x180>
 8005886:	f04f 0c00 	mov.w	ip, #0
 800588a:	f108 0202 	add.w	r2, r8, #2
 800588e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005890:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005894:	e785      	b.n	80057a2 <_strtod_l+0x1a2>
 8005896:	f04f 0c01 	mov.w	ip, #1
 800589a:	e7f6      	b.n	800588a <_strtod_l+0x28a>
 800589c:	0800a0a4 	.word	0x0800a0a4
 80058a0:	08009df8 	.word	0x08009df8
 80058a4:	7ff00000 	.word	0x7ff00000
 80058a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058aa:	1c51      	adds	r1, r2, #1
 80058ac:	9117      	str	r1, [sp, #92]	; 0x5c
 80058ae:	7852      	ldrb	r2, [r2, #1]
 80058b0:	2a30      	cmp	r2, #48	; 0x30
 80058b2:	d0f9      	beq.n	80058a8 <_strtod_l+0x2a8>
 80058b4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80058b8:	2908      	cmp	r1, #8
 80058ba:	f63f af79 	bhi.w	80057b0 <_strtod_l+0x1b0>
 80058be:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80058c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058c4:	9206      	str	r2, [sp, #24]
 80058c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80058c8:	1c51      	adds	r1, r2, #1
 80058ca:	9117      	str	r1, [sp, #92]	; 0x5c
 80058cc:	7852      	ldrb	r2, [r2, #1]
 80058ce:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80058d2:	2e09      	cmp	r6, #9
 80058d4:	d937      	bls.n	8005946 <_strtod_l+0x346>
 80058d6:	9e06      	ldr	r6, [sp, #24]
 80058d8:	1b89      	subs	r1, r1, r6
 80058da:	2908      	cmp	r1, #8
 80058dc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80058e0:	dc02      	bgt.n	80058e8 <_strtod_l+0x2e8>
 80058e2:	4576      	cmp	r6, lr
 80058e4:	bfa8      	it	ge
 80058e6:	4676      	movge	r6, lr
 80058e8:	f1bc 0f00 	cmp.w	ip, #0
 80058ec:	d000      	beq.n	80058f0 <_strtod_l+0x2f0>
 80058ee:	4276      	negs	r6, r6
 80058f0:	2d00      	cmp	r5, #0
 80058f2:	d14d      	bne.n	8005990 <_strtod_l+0x390>
 80058f4:	9904      	ldr	r1, [sp, #16]
 80058f6:	4301      	orrs	r1, r0
 80058f8:	f47f aec6 	bne.w	8005688 <_strtod_l+0x88>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f47f aee1 	bne.w	80056c4 <_strtod_l+0xc4>
 8005902:	2a69      	cmp	r2, #105	; 0x69
 8005904:	d027      	beq.n	8005956 <_strtod_l+0x356>
 8005906:	dc24      	bgt.n	8005952 <_strtod_l+0x352>
 8005908:	2a49      	cmp	r2, #73	; 0x49
 800590a:	d024      	beq.n	8005956 <_strtod_l+0x356>
 800590c:	2a4e      	cmp	r2, #78	; 0x4e
 800590e:	f47f aed9 	bne.w	80056c4 <_strtod_l+0xc4>
 8005912:	499f      	ldr	r1, [pc, #636]	; (8005b90 <_strtod_l+0x590>)
 8005914:	a817      	add	r0, sp, #92	; 0x5c
 8005916:	f002 f823 	bl	8007960 <__match>
 800591a:	2800      	cmp	r0, #0
 800591c:	f43f aed2 	beq.w	80056c4 <_strtod_l+0xc4>
 8005920:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b28      	cmp	r3, #40	; 0x28
 8005926:	d12d      	bne.n	8005984 <_strtod_l+0x384>
 8005928:	499a      	ldr	r1, [pc, #616]	; (8005b94 <_strtod_l+0x594>)
 800592a:	aa1a      	add	r2, sp, #104	; 0x68
 800592c:	a817      	add	r0, sp, #92	; 0x5c
 800592e:	f002 f82b 	bl	8007988 <__hexnan>
 8005932:	2805      	cmp	r0, #5
 8005934:	d126      	bne.n	8005984 <_strtod_l+0x384>
 8005936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005938:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800593c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005940:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005944:	e6a0      	b.n	8005688 <_strtod_l+0x88>
 8005946:	210a      	movs	r1, #10
 8005948:	fb01 2e0e 	mla	lr, r1, lr, r2
 800594c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005950:	e7b9      	b.n	80058c6 <_strtod_l+0x2c6>
 8005952:	2a6e      	cmp	r2, #110	; 0x6e
 8005954:	e7db      	b.n	800590e <_strtod_l+0x30e>
 8005956:	4990      	ldr	r1, [pc, #576]	; (8005b98 <_strtod_l+0x598>)
 8005958:	a817      	add	r0, sp, #92	; 0x5c
 800595a:	f002 f801 	bl	8007960 <__match>
 800595e:	2800      	cmp	r0, #0
 8005960:	f43f aeb0 	beq.w	80056c4 <_strtod_l+0xc4>
 8005964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005966:	498d      	ldr	r1, [pc, #564]	; (8005b9c <_strtod_l+0x59c>)
 8005968:	3b01      	subs	r3, #1
 800596a:	a817      	add	r0, sp, #92	; 0x5c
 800596c:	9317      	str	r3, [sp, #92]	; 0x5c
 800596e:	f001 fff7 	bl	8007960 <__match>
 8005972:	b910      	cbnz	r0, 800597a <_strtod_l+0x37a>
 8005974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005976:	3301      	adds	r3, #1
 8005978:	9317      	str	r3, [sp, #92]	; 0x5c
 800597a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005bac <_strtod_l+0x5ac>
 800597e:	f04f 0a00 	mov.w	sl, #0
 8005982:	e681      	b.n	8005688 <_strtod_l+0x88>
 8005984:	4886      	ldr	r0, [pc, #536]	; (8005ba0 <_strtod_l+0x5a0>)
 8005986:	f003 fd9b 	bl	80094c0 <nan>
 800598a:	ec5b ab10 	vmov	sl, fp, d0
 800598e:	e67b      	b.n	8005688 <_strtod_l+0x88>
 8005990:	9b05      	ldr	r3, [sp, #20]
 8005992:	9807      	ldr	r0, [sp, #28]
 8005994:	1af3      	subs	r3, r6, r3
 8005996:	2f00      	cmp	r7, #0
 8005998:	bf08      	it	eq
 800599a:	462f      	moveq	r7, r5
 800599c:	2d10      	cmp	r5, #16
 800599e:	9306      	str	r3, [sp, #24]
 80059a0:	46a8      	mov	r8, r5
 80059a2:	bfa8      	it	ge
 80059a4:	f04f 0810 	movge.w	r8, #16
 80059a8:	f7fa fdc4 	bl	8000534 <__aeabi_ui2d>
 80059ac:	2d09      	cmp	r5, #9
 80059ae:	4682      	mov	sl, r0
 80059b0:	468b      	mov	fp, r1
 80059b2:	dd13      	ble.n	80059dc <_strtod_l+0x3dc>
 80059b4:	4b7b      	ldr	r3, [pc, #492]	; (8005ba4 <_strtod_l+0x5a4>)
 80059b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80059ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059be:	f7fa fe33 	bl	8000628 <__aeabi_dmul>
 80059c2:	4682      	mov	sl, r0
 80059c4:	4648      	mov	r0, r9
 80059c6:	468b      	mov	fp, r1
 80059c8:	f7fa fdb4 	bl	8000534 <__aeabi_ui2d>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4650      	mov	r0, sl
 80059d2:	4659      	mov	r1, fp
 80059d4:	f7fa fc72 	bl	80002bc <__adddf3>
 80059d8:	4682      	mov	sl, r0
 80059da:	468b      	mov	fp, r1
 80059dc:	2d0f      	cmp	r5, #15
 80059de:	dc38      	bgt.n	8005a52 <_strtod_l+0x452>
 80059e0:	9b06      	ldr	r3, [sp, #24]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f43f ae50 	beq.w	8005688 <_strtod_l+0x88>
 80059e8:	dd24      	ble.n	8005a34 <_strtod_l+0x434>
 80059ea:	2b16      	cmp	r3, #22
 80059ec:	dc0b      	bgt.n	8005a06 <_strtod_l+0x406>
 80059ee:	496d      	ldr	r1, [pc, #436]	; (8005ba4 <_strtod_l+0x5a4>)
 80059f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80059f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059f8:	4652      	mov	r2, sl
 80059fa:	465b      	mov	r3, fp
 80059fc:	f7fa fe14 	bl	8000628 <__aeabi_dmul>
 8005a00:	4682      	mov	sl, r0
 8005a02:	468b      	mov	fp, r1
 8005a04:	e640      	b.n	8005688 <_strtod_l+0x88>
 8005a06:	9a06      	ldr	r2, [sp, #24]
 8005a08:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	db20      	blt.n	8005a52 <_strtod_l+0x452>
 8005a10:	4c64      	ldr	r4, [pc, #400]	; (8005ba4 <_strtod_l+0x5a4>)
 8005a12:	f1c5 050f 	rsb	r5, r5, #15
 8005a16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005a1a:	4652      	mov	r2, sl
 8005a1c:	465b      	mov	r3, fp
 8005a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a22:	f7fa fe01 	bl	8000628 <__aeabi_dmul>
 8005a26:	9b06      	ldr	r3, [sp, #24]
 8005a28:	1b5d      	subs	r5, r3, r5
 8005a2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005a2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005a32:	e7e3      	b.n	80059fc <_strtod_l+0x3fc>
 8005a34:	9b06      	ldr	r3, [sp, #24]
 8005a36:	3316      	adds	r3, #22
 8005a38:	db0b      	blt.n	8005a52 <_strtod_l+0x452>
 8005a3a:	9b05      	ldr	r3, [sp, #20]
 8005a3c:	1b9e      	subs	r6, r3, r6
 8005a3e:	4b59      	ldr	r3, [pc, #356]	; (8005ba4 <_strtod_l+0x5a4>)
 8005a40:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005a44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a48:	4650      	mov	r0, sl
 8005a4a:	4659      	mov	r1, fp
 8005a4c:	f7fa ff16 	bl	800087c <__aeabi_ddiv>
 8005a50:	e7d6      	b.n	8005a00 <_strtod_l+0x400>
 8005a52:	9b06      	ldr	r3, [sp, #24]
 8005a54:	eba5 0808 	sub.w	r8, r5, r8
 8005a58:	4498      	add	r8, r3
 8005a5a:	f1b8 0f00 	cmp.w	r8, #0
 8005a5e:	dd74      	ble.n	8005b4a <_strtod_l+0x54a>
 8005a60:	f018 030f 	ands.w	r3, r8, #15
 8005a64:	d00a      	beq.n	8005a7c <_strtod_l+0x47c>
 8005a66:	494f      	ldr	r1, [pc, #316]	; (8005ba4 <_strtod_l+0x5a4>)
 8005a68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a6c:	4652      	mov	r2, sl
 8005a6e:	465b      	mov	r3, fp
 8005a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a74:	f7fa fdd8 	bl	8000628 <__aeabi_dmul>
 8005a78:	4682      	mov	sl, r0
 8005a7a:	468b      	mov	fp, r1
 8005a7c:	f038 080f 	bics.w	r8, r8, #15
 8005a80:	d04f      	beq.n	8005b22 <_strtod_l+0x522>
 8005a82:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005a86:	dd22      	ble.n	8005ace <_strtod_l+0x4ce>
 8005a88:	2500      	movs	r5, #0
 8005a8a:	462e      	mov	r6, r5
 8005a8c:	9507      	str	r5, [sp, #28]
 8005a8e:	9505      	str	r5, [sp, #20]
 8005a90:	2322      	movs	r3, #34	; 0x22
 8005a92:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005bac <_strtod_l+0x5ac>
 8005a96:	6023      	str	r3, [r4, #0]
 8005a98:	f04f 0a00 	mov.w	sl, #0
 8005a9c:	9b07      	ldr	r3, [sp, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f43f adf2 	beq.w	8005688 <_strtod_l+0x88>
 8005aa4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f002 f8de 	bl	8007c68 <_Bfree>
 8005aac:	9905      	ldr	r1, [sp, #20]
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f002 f8da 	bl	8007c68 <_Bfree>
 8005ab4:	4631      	mov	r1, r6
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f002 f8d6 	bl	8007c68 <_Bfree>
 8005abc:	9907      	ldr	r1, [sp, #28]
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f002 f8d2 	bl	8007c68 <_Bfree>
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f002 f8ce 	bl	8007c68 <_Bfree>
 8005acc:	e5dc      	b.n	8005688 <_strtod_l+0x88>
 8005ace:	4b36      	ldr	r3, [pc, #216]	; (8005ba8 <_strtod_l+0x5a8>)
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005ad8:	4650      	mov	r0, sl
 8005ada:	4659      	mov	r1, fp
 8005adc:	4699      	mov	r9, r3
 8005ade:	f1b8 0f01 	cmp.w	r8, #1
 8005ae2:	dc21      	bgt.n	8005b28 <_strtod_l+0x528>
 8005ae4:	b10b      	cbz	r3, 8005aea <_strtod_l+0x4ea>
 8005ae6:	4682      	mov	sl, r0
 8005ae8:	468b      	mov	fp, r1
 8005aea:	4b2f      	ldr	r3, [pc, #188]	; (8005ba8 <_strtod_l+0x5a8>)
 8005aec:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005af0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005af4:	4652      	mov	r2, sl
 8005af6:	465b      	mov	r3, fp
 8005af8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005afc:	f7fa fd94 	bl	8000628 <__aeabi_dmul>
 8005b00:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <_strtod_l+0x5ac>)
 8005b02:	460a      	mov	r2, r1
 8005b04:	400b      	ands	r3, r1
 8005b06:	492a      	ldr	r1, [pc, #168]	; (8005bb0 <_strtod_l+0x5b0>)
 8005b08:	428b      	cmp	r3, r1
 8005b0a:	4682      	mov	sl, r0
 8005b0c:	d8bc      	bhi.n	8005a88 <_strtod_l+0x488>
 8005b0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b12:	428b      	cmp	r3, r1
 8005b14:	bf86      	itte	hi
 8005b16:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005bb4 <_strtod_l+0x5b4>
 8005b1a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8005b1e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005b22:	2300      	movs	r3, #0
 8005b24:	9304      	str	r3, [sp, #16]
 8005b26:	e084      	b.n	8005c32 <_strtod_l+0x632>
 8005b28:	f018 0f01 	tst.w	r8, #1
 8005b2c:	d005      	beq.n	8005b3a <_strtod_l+0x53a>
 8005b2e:	9b04      	ldr	r3, [sp, #16]
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa fd78 	bl	8000628 <__aeabi_dmul>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	9a04      	ldr	r2, [sp, #16]
 8005b3c:	3208      	adds	r2, #8
 8005b3e:	f109 0901 	add.w	r9, r9, #1
 8005b42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005b46:	9204      	str	r2, [sp, #16]
 8005b48:	e7c9      	b.n	8005ade <_strtod_l+0x4de>
 8005b4a:	d0ea      	beq.n	8005b22 <_strtod_l+0x522>
 8005b4c:	f1c8 0800 	rsb	r8, r8, #0
 8005b50:	f018 020f 	ands.w	r2, r8, #15
 8005b54:	d00a      	beq.n	8005b6c <_strtod_l+0x56c>
 8005b56:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <_strtod_l+0x5a4>)
 8005b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b5c:	4650      	mov	r0, sl
 8005b5e:	4659      	mov	r1, fp
 8005b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b64:	f7fa fe8a 	bl	800087c <__aeabi_ddiv>
 8005b68:	4682      	mov	sl, r0
 8005b6a:	468b      	mov	fp, r1
 8005b6c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005b70:	d0d7      	beq.n	8005b22 <_strtod_l+0x522>
 8005b72:	f1b8 0f1f 	cmp.w	r8, #31
 8005b76:	dd1f      	ble.n	8005bb8 <_strtod_l+0x5b8>
 8005b78:	2500      	movs	r5, #0
 8005b7a:	462e      	mov	r6, r5
 8005b7c:	9507      	str	r5, [sp, #28]
 8005b7e:	9505      	str	r5, [sp, #20]
 8005b80:	2322      	movs	r3, #34	; 0x22
 8005b82:	f04f 0a00 	mov.w	sl, #0
 8005b86:	f04f 0b00 	mov.w	fp, #0
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	e786      	b.n	8005a9c <_strtod_l+0x49c>
 8005b8e:	bf00      	nop
 8005b90:	08009dcd 	.word	0x08009dcd
 8005b94:	08009e0c 	.word	0x08009e0c
 8005b98:	08009dc5 	.word	0x08009dc5
 8005b9c:	08009f4c 	.word	0x08009f4c
 8005ba0:	0800a27b 	.word	0x0800a27b
 8005ba4:	0800a140 	.word	0x0800a140
 8005ba8:	0800a118 	.word	0x0800a118
 8005bac:	7ff00000 	.word	0x7ff00000
 8005bb0:	7ca00000 	.word	0x7ca00000
 8005bb4:	7fefffff 	.word	0x7fefffff
 8005bb8:	f018 0310 	ands.w	r3, r8, #16
 8005bbc:	bf18      	it	ne
 8005bbe:	236a      	movne	r3, #106	; 0x6a
 8005bc0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005f70 <_strtod_l+0x970>
 8005bc4:	9304      	str	r3, [sp, #16]
 8005bc6:	4650      	mov	r0, sl
 8005bc8:	4659      	mov	r1, fp
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f018 0f01 	tst.w	r8, #1
 8005bd0:	d004      	beq.n	8005bdc <_strtod_l+0x5dc>
 8005bd2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005bd6:	f7fa fd27 	bl	8000628 <__aeabi_dmul>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005be0:	f109 0908 	add.w	r9, r9, #8
 8005be4:	d1f2      	bne.n	8005bcc <_strtod_l+0x5cc>
 8005be6:	b10b      	cbz	r3, 8005bec <_strtod_l+0x5ec>
 8005be8:	4682      	mov	sl, r0
 8005bea:	468b      	mov	fp, r1
 8005bec:	9b04      	ldr	r3, [sp, #16]
 8005bee:	b1c3      	cbz	r3, 8005c22 <_strtod_l+0x622>
 8005bf0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005bf4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	4659      	mov	r1, fp
 8005bfc:	dd11      	ble.n	8005c22 <_strtod_l+0x622>
 8005bfe:	2b1f      	cmp	r3, #31
 8005c00:	f340 8124 	ble.w	8005e4c <_strtod_l+0x84c>
 8005c04:	2b34      	cmp	r3, #52	; 0x34
 8005c06:	bfde      	ittt	le
 8005c08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005c0c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005c10:	fa03 f202 	lslle.w	r2, r3, r2
 8005c14:	f04f 0a00 	mov.w	sl, #0
 8005c18:	bfcc      	ite	gt
 8005c1a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005c1e:	ea02 0b01 	andle.w	fp, r2, r1
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	4650      	mov	r0, sl
 8005c28:	4659      	mov	r1, fp
 8005c2a:	f7fa ff65 	bl	8000af8 <__aeabi_dcmpeq>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d1a2      	bne.n	8005b78 <_strtod_l+0x578>
 8005c32:	9b07      	ldr	r3, [sp, #28]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	9908      	ldr	r1, [sp, #32]
 8005c38:	462b      	mov	r3, r5
 8005c3a:	463a      	mov	r2, r7
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f002 f87b 	bl	8007d38 <__s2b>
 8005c42:	9007      	str	r0, [sp, #28]
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f43f af1f 	beq.w	8005a88 <_strtod_l+0x488>
 8005c4a:	9b05      	ldr	r3, [sp, #20]
 8005c4c:	1b9e      	subs	r6, r3, r6
 8005c4e:	9b06      	ldr	r3, [sp, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfb4      	ite	lt
 8005c54:	4633      	movlt	r3, r6
 8005c56:	2300      	movge	r3, #0
 8005c58:	930c      	str	r3, [sp, #48]	; 0x30
 8005c5a:	9b06      	ldr	r3, [sp, #24]
 8005c5c:	2500      	movs	r5, #0
 8005c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c62:	9312      	str	r3, [sp, #72]	; 0x48
 8005c64:	462e      	mov	r6, r5
 8005c66:	9b07      	ldr	r3, [sp, #28]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	f001 ffbc 	bl	8007be8 <_Balloc>
 8005c70:	9005      	str	r0, [sp, #20]
 8005c72:	2800      	cmp	r0, #0
 8005c74:	f43f af0c 	beq.w	8005a90 <_strtod_l+0x490>
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	3202      	adds	r2, #2
 8005c7e:	f103 010c 	add.w	r1, r3, #12
 8005c82:	0092      	lsls	r2, r2, #2
 8005c84:	300c      	adds	r0, #12
 8005c86:	f001 ffa1 	bl	8007bcc <memcpy>
 8005c8a:	ec4b ab10 	vmov	d0, sl, fp
 8005c8e:	aa1a      	add	r2, sp, #104	; 0x68
 8005c90:	a919      	add	r1, sp, #100	; 0x64
 8005c92:	4620      	mov	r0, r4
 8005c94:	f002 fb96 	bl	80083c4 <__d2b>
 8005c98:	ec4b ab18 	vmov	d8, sl, fp
 8005c9c:	9018      	str	r0, [sp, #96]	; 0x60
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f43f aef6 	beq.w	8005a90 <_strtod_l+0x490>
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	4620      	mov	r0, r4
 8005ca8:	f002 f8e0 	bl	8007e6c <__i2b>
 8005cac:	4606      	mov	r6, r0
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f43f aeee 	beq.w	8005a90 <_strtod_l+0x490>
 8005cb4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cb6:	9904      	ldr	r1, [sp, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bfab      	itete	ge
 8005cbc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8005cbe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8005cc0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8005cc2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8005cc6:	bfac      	ite	ge
 8005cc8:	eb03 0902 	addge.w	r9, r3, r2
 8005ccc:	1ad7      	sublt	r7, r2, r3
 8005cce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005cd0:	eba3 0801 	sub.w	r8, r3, r1
 8005cd4:	4490      	add	r8, r2
 8005cd6:	4ba1      	ldr	r3, [pc, #644]	; (8005f5c <_strtod_l+0x95c>)
 8005cd8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005cdc:	4598      	cmp	r8, r3
 8005cde:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005ce2:	f280 80c7 	bge.w	8005e74 <_strtod_l+0x874>
 8005ce6:	eba3 0308 	sub.w	r3, r3, r8
 8005cea:	2b1f      	cmp	r3, #31
 8005cec:	eba2 0203 	sub.w	r2, r2, r3
 8005cf0:	f04f 0101 	mov.w	r1, #1
 8005cf4:	f300 80b1 	bgt.w	8005e5a <_strtod_l+0x85a>
 8005cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfc:	930d      	str	r3, [sp, #52]	; 0x34
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9308      	str	r3, [sp, #32]
 8005d02:	eb09 0802 	add.w	r8, r9, r2
 8005d06:	9b04      	ldr	r3, [sp, #16]
 8005d08:	45c1      	cmp	r9, r8
 8005d0a:	4417      	add	r7, r2
 8005d0c:	441f      	add	r7, r3
 8005d0e:	464b      	mov	r3, r9
 8005d10:	bfa8      	it	ge
 8005d12:	4643      	movge	r3, r8
 8005d14:	42bb      	cmp	r3, r7
 8005d16:	bfa8      	it	ge
 8005d18:	463b      	movge	r3, r7
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	bfc2      	ittt	gt
 8005d1e:	eba8 0803 	subgt.w	r8, r8, r3
 8005d22:	1aff      	subgt	r7, r7, r3
 8005d24:	eba9 0903 	subgt.w	r9, r9, r3
 8005d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dd17      	ble.n	8005d5e <_strtod_l+0x75e>
 8005d2e:	4631      	mov	r1, r6
 8005d30:	461a      	mov	r2, r3
 8005d32:	4620      	mov	r0, r4
 8005d34:	f002 f95a 	bl	8007fec <__pow5mult>
 8005d38:	4606      	mov	r6, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f43f aea8 	beq.w	8005a90 <_strtod_l+0x490>
 8005d40:	4601      	mov	r1, r0
 8005d42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005d44:	4620      	mov	r0, r4
 8005d46:	f002 f8a7 	bl	8007e98 <__multiply>
 8005d4a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f43f ae9f 	beq.w	8005a90 <_strtod_l+0x490>
 8005d52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005d54:	4620      	mov	r0, r4
 8005d56:	f001 ff87 	bl	8007c68 <_Bfree>
 8005d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d5c:	9318      	str	r3, [sp, #96]	; 0x60
 8005d5e:	f1b8 0f00 	cmp.w	r8, #0
 8005d62:	f300 808c 	bgt.w	8005e7e <_strtod_l+0x87e>
 8005d66:	9b06      	ldr	r3, [sp, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	dd08      	ble.n	8005d7e <_strtod_l+0x77e>
 8005d6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d6e:	9905      	ldr	r1, [sp, #20]
 8005d70:	4620      	mov	r0, r4
 8005d72:	f002 f93b 	bl	8007fec <__pow5mult>
 8005d76:	9005      	str	r0, [sp, #20]
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	f43f ae89 	beq.w	8005a90 <_strtod_l+0x490>
 8005d7e:	2f00      	cmp	r7, #0
 8005d80:	dd08      	ble.n	8005d94 <_strtod_l+0x794>
 8005d82:	9905      	ldr	r1, [sp, #20]
 8005d84:	463a      	mov	r2, r7
 8005d86:	4620      	mov	r0, r4
 8005d88:	f002 f98a 	bl	80080a0 <__lshift>
 8005d8c:	9005      	str	r0, [sp, #20]
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	f43f ae7e 	beq.w	8005a90 <_strtod_l+0x490>
 8005d94:	f1b9 0f00 	cmp.w	r9, #0
 8005d98:	dd08      	ble.n	8005dac <_strtod_l+0x7ac>
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	464a      	mov	r2, r9
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f002 f97e 	bl	80080a0 <__lshift>
 8005da4:	4606      	mov	r6, r0
 8005da6:	2800      	cmp	r0, #0
 8005da8:	f43f ae72 	beq.w	8005a90 <_strtod_l+0x490>
 8005dac:	9a05      	ldr	r2, [sp, #20]
 8005dae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005db0:	4620      	mov	r0, r4
 8005db2:	f002 fa01 	bl	80081b8 <__mdiff>
 8005db6:	4605      	mov	r5, r0
 8005db8:	2800      	cmp	r0, #0
 8005dba:	f43f ae69 	beq.w	8005a90 <_strtod_l+0x490>
 8005dbe:	68c3      	ldr	r3, [r0, #12]
 8005dc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60c3      	str	r3, [r0, #12]
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	f002 f9da 	bl	8008180 <__mcmp>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	da60      	bge.n	8005e92 <_strtod_l+0x892>
 8005dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dd2:	ea53 030a 	orrs.w	r3, r3, sl
 8005dd6:	f040 8082 	bne.w	8005ede <_strtod_l+0x8de>
 8005dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d17d      	bne.n	8005ede <_strtod_l+0x8de>
 8005de2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005de6:	0d1b      	lsrs	r3, r3, #20
 8005de8:	051b      	lsls	r3, r3, #20
 8005dea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005dee:	d976      	bls.n	8005ede <_strtod_l+0x8de>
 8005df0:	696b      	ldr	r3, [r5, #20]
 8005df2:	b913      	cbnz	r3, 8005dfa <_strtod_l+0x7fa>
 8005df4:	692b      	ldr	r3, [r5, #16]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	dd71      	ble.n	8005ede <_strtod_l+0x8de>
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f002 f94e 	bl	80080a0 <__lshift>
 8005e04:	4631      	mov	r1, r6
 8005e06:	4605      	mov	r5, r0
 8005e08:	f002 f9ba 	bl	8008180 <__mcmp>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	dd66      	ble.n	8005ede <_strtod_l+0x8de>
 8005e10:	9904      	ldr	r1, [sp, #16]
 8005e12:	4a53      	ldr	r2, [pc, #332]	; (8005f60 <_strtod_l+0x960>)
 8005e14:	465b      	mov	r3, fp
 8005e16:	2900      	cmp	r1, #0
 8005e18:	f000 8081 	beq.w	8005f1e <_strtod_l+0x91e>
 8005e1c:	ea02 010b 	and.w	r1, r2, fp
 8005e20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e24:	dc7b      	bgt.n	8005f1e <_strtod_l+0x91e>
 8005e26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e2a:	f77f aea9 	ble.w	8005b80 <_strtod_l+0x580>
 8005e2e:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <_strtod_l+0x964>)
 8005e30:	4650      	mov	r0, sl
 8005e32:	4659      	mov	r1, fp
 8005e34:	2200      	movs	r2, #0
 8005e36:	f7fa fbf7 	bl	8000628 <__aeabi_dmul>
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4303      	orrs	r3, r0
 8005e3e:	bf08      	it	eq
 8005e40:	2322      	moveq	r3, #34	; 0x22
 8005e42:	4682      	mov	sl, r0
 8005e44:	468b      	mov	fp, r1
 8005e46:	bf08      	it	eq
 8005e48:	6023      	streq	r3, [r4, #0]
 8005e4a:	e62b      	b.n	8005aa4 <_strtod_l+0x4a4>
 8005e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	ea03 0a0a 	and.w	sl, r3, sl
 8005e58:	e6e3      	b.n	8005c22 <_strtod_l+0x622>
 8005e5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005e5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005e62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005e66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8005e6a:	fa01 f308 	lsl.w	r3, r1, r8
 8005e6e:	9308      	str	r3, [sp, #32]
 8005e70:	910d      	str	r1, [sp, #52]	; 0x34
 8005e72:	e746      	b.n	8005d02 <_strtod_l+0x702>
 8005e74:	2300      	movs	r3, #0
 8005e76:	9308      	str	r3, [sp, #32]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8005e7c:	e741      	b.n	8005d02 <_strtod_l+0x702>
 8005e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e80:	4642      	mov	r2, r8
 8005e82:	4620      	mov	r0, r4
 8005e84:	f002 f90c 	bl	80080a0 <__lshift>
 8005e88:	9018      	str	r0, [sp, #96]	; 0x60
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	f47f af6b 	bne.w	8005d66 <_strtod_l+0x766>
 8005e90:	e5fe      	b.n	8005a90 <_strtod_l+0x490>
 8005e92:	465f      	mov	r7, fp
 8005e94:	d16e      	bne.n	8005f74 <_strtod_l+0x974>
 8005e96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e9c:	b342      	cbz	r2, 8005ef0 <_strtod_l+0x8f0>
 8005e9e:	4a32      	ldr	r2, [pc, #200]	; (8005f68 <_strtod_l+0x968>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d128      	bne.n	8005ef6 <_strtod_l+0x8f6>
 8005ea4:	9b04      	ldr	r3, [sp, #16]
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	b1eb      	cbz	r3, 8005ee6 <_strtod_l+0x8e6>
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	; (8005f60 <_strtod_l+0x960>)
 8005eac:	403b      	ands	r3, r7
 8005eae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb6:	d819      	bhi.n	8005eec <_strtod_l+0x8ec>
 8005eb8:	0d1b      	lsrs	r3, r3, #20
 8005eba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	4299      	cmp	r1, r3
 8005ec4:	d117      	bne.n	8005ef6 <_strtod_l+0x8f6>
 8005ec6:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <_strtod_l+0x96c>)
 8005ec8:	429f      	cmp	r7, r3
 8005eca:	d102      	bne.n	8005ed2 <_strtod_l+0x8d2>
 8005ecc:	3101      	adds	r1, #1
 8005ece:	f43f addf 	beq.w	8005a90 <_strtod_l+0x490>
 8005ed2:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <_strtod_l+0x960>)
 8005ed4:	403b      	ands	r3, r7
 8005ed6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005eda:	f04f 0a00 	mov.w	sl, #0
 8005ede:	9b04      	ldr	r3, [sp, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1a4      	bne.n	8005e2e <_strtod_l+0x82e>
 8005ee4:	e5de      	b.n	8005aa4 <_strtod_l+0x4a4>
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eea:	e7ea      	b.n	8005ec2 <_strtod_l+0x8c2>
 8005eec:	4613      	mov	r3, r2
 8005eee:	e7e8      	b.n	8005ec2 <_strtod_l+0x8c2>
 8005ef0:	ea53 030a 	orrs.w	r3, r3, sl
 8005ef4:	d08c      	beq.n	8005e10 <_strtod_l+0x810>
 8005ef6:	9b08      	ldr	r3, [sp, #32]
 8005ef8:	b1db      	cbz	r3, 8005f32 <_strtod_l+0x932>
 8005efa:	423b      	tst	r3, r7
 8005efc:	d0ef      	beq.n	8005ede <_strtod_l+0x8de>
 8005efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f00:	9a04      	ldr	r2, [sp, #16]
 8005f02:	4650      	mov	r0, sl
 8005f04:	4659      	mov	r1, fp
 8005f06:	b1c3      	cbz	r3, 8005f3a <_strtod_l+0x93a>
 8005f08:	f7ff fb5c 	bl	80055c4 <sulp>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	ec51 0b18 	vmov	r0, r1, d8
 8005f14:	f7fa f9d2 	bl	80002bc <__adddf3>
 8005f18:	4682      	mov	sl, r0
 8005f1a:	468b      	mov	fp, r1
 8005f1c:	e7df      	b.n	8005ede <_strtod_l+0x8de>
 8005f1e:	4013      	ands	r3, r2
 8005f20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005f28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005f2c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005f30:	e7d5      	b.n	8005ede <_strtod_l+0x8de>
 8005f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f34:	ea13 0f0a 	tst.w	r3, sl
 8005f38:	e7e0      	b.n	8005efc <_strtod_l+0x8fc>
 8005f3a:	f7ff fb43 	bl	80055c4 <sulp>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	ec51 0b18 	vmov	r0, r1, d8
 8005f46:	f7fa f9b7 	bl	80002b8 <__aeabi_dsub>
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	4682      	mov	sl, r0
 8005f50:	468b      	mov	fp, r1
 8005f52:	f7fa fdd1 	bl	8000af8 <__aeabi_dcmpeq>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d0c1      	beq.n	8005ede <_strtod_l+0x8de>
 8005f5a:	e611      	b.n	8005b80 <_strtod_l+0x580>
 8005f5c:	fffffc02 	.word	0xfffffc02
 8005f60:	7ff00000 	.word	0x7ff00000
 8005f64:	39500000 	.word	0x39500000
 8005f68:	000fffff 	.word	0x000fffff
 8005f6c:	7fefffff 	.word	0x7fefffff
 8005f70:	08009e20 	.word	0x08009e20
 8005f74:	4631      	mov	r1, r6
 8005f76:	4628      	mov	r0, r5
 8005f78:	f002 fa80 	bl	800847c <__ratio>
 8005f7c:	ec59 8b10 	vmov	r8, r9, d0
 8005f80:	ee10 0a10 	vmov	r0, s0
 8005f84:	2200      	movs	r2, #0
 8005f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	f7fa fdc8 	bl	8000b20 <__aeabi_dcmple>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d07a      	beq.n	800608a <_strtod_l+0xa8a>
 8005f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04a      	beq.n	8006030 <_strtod_l+0xa30>
 8005f9a:	4b95      	ldr	r3, [pc, #596]	; (80061f0 <_strtod_l+0xbf0>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005fa2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80061f0 <_strtod_l+0xbf0>
 8005fa6:	f04f 0800 	mov.w	r8, #0
 8005faa:	4b92      	ldr	r3, [pc, #584]	; (80061f4 <_strtod_l+0xbf4>)
 8005fac:	403b      	ands	r3, r7
 8005fae:	930d      	str	r3, [sp, #52]	; 0x34
 8005fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005fb2:	4b91      	ldr	r3, [pc, #580]	; (80061f8 <_strtod_l+0xbf8>)
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	f040 80b0 	bne.w	800611a <_strtod_l+0xb1a>
 8005fba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fbe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8005fc2:	ec4b ab10 	vmov	d0, sl, fp
 8005fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005fca:	f002 f97f 	bl	80082cc <__ulp>
 8005fce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005fd2:	ec53 2b10 	vmov	r2, r3, d0
 8005fd6:	f7fa fb27 	bl	8000628 <__aeabi_dmul>
 8005fda:	4652      	mov	r2, sl
 8005fdc:	465b      	mov	r3, fp
 8005fde:	f7fa f96d 	bl	80002bc <__adddf3>
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4983      	ldr	r1, [pc, #524]	; (80061f4 <_strtod_l+0xbf4>)
 8005fe6:	4a85      	ldr	r2, [pc, #532]	; (80061fc <_strtod_l+0xbfc>)
 8005fe8:	4019      	ands	r1, r3
 8005fea:	4291      	cmp	r1, r2
 8005fec:	4682      	mov	sl, r0
 8005fee:	d960      	bls.n	80060b2 <_strtod_l+0xab2>
 8005ff0:	ee18 3a90 	vmov	r3, s17
 8005ff4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d104      	bne.n	8006006 <_strtod_l+0xa06>
 8005ffc:	ee18 3a10 	vmov	r3, s16
 8006000:	3301      	adds	r3, #1
 8006002:	f43f ad45 	beq.w	8005a90 <_strtod_l+0x490>
 8006006:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006208 <_strtod_l+0xc08>
 800600a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800600e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006010:	4620      	mov	r0, r4
 8006012:	f001 fe29 	bl	8007c68 <_Bfree>
 8006016:	9905      	ldr	r1, [sp, #20]
 8006018:	4620      	mov	r0, r4
 800601a:	f001 fe25 	bl	8007c68 <_Bfree>
 800601e:	4631      	mov	r1, r6
 8006020:	4620      	mov	r0, r4
 8006022:	f001 fe21 	bl	8007c68 <_Bfree>
 8006026:	4629      	mov	r1, r5
 8006028:	4620      	mov	r0, r4
 800602a:	f001 fe1d 	bl	8007c68 <_Bfree>
 800602e:	e61a      	b.n	8005c66 <_strtod_l+0x666>
 8006030:	f1ba 0f00 	cmp.w	sl, #0
 8006034:	d11b      	bne.n	800606e <_strtod_l+0xa6e>
 8006036:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800603a:	b9f3      	cbnz	r3, 800607a <_strtod_l+0xa7a>
 800603c:	4b6c      	ldr	r3, [pc, #432]	; (80061f0 <_strtod_l+0xbf0>)
 800603e:	2200      	movs	r2, #0
 8006040:	4640      	mov	r0, r8
 8006042:	4649      	mov	r1, r9
 8006044:	f7fa fd62 	bl	8000b0c <__aeabi_dcmplt>
 8006048:	b9d0      	cbnz	r0, 8006080 <_strtod_l+0xa80>
 800604a:	4640      	mov	r0, r8
 800604c:	4649      	mov	r1, r9
 800604e:	4b6c      	ldr	r3, [pc, #432]	; (8006200 <_strtod_l+0xc00>)
 8006050:	2200      	movs	r2, #0
 8006052:	f7fa fae9 	bl	8000628 <__aeabi_dmul>
 8006056:	4680      	mov	r8, r0
 8006058:	4689      	mov	r9, r1
 800605a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800605e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006062:	9315      	str	r3, [sp, #84]	; 0x54
 8006064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006068:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800606c:	e79d      	b.n	8005faa <_strtod_l+0x9aa>
 800606e:	f1ba 0f01 	cmp.w	sl, #1
 8006072:	d102      	bne.n	800607a <_strtod_l+0xa7a>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f43f ad83 	beq.w	8005b80 <_strtod_l+0x580>
 800607a:	4b62      	ldr	r3, [pc, #392]	; (8006204 <_strtod_l+0xc04>)
 800607c:	2200      	movs	r2, #0
 800607e:	e78e      	b.n	8005f9e <_strtod_l+0x99e>
 8006080:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006200 <_strtod_l+0xc00>
 8006084:	f04f 0800 	mov.w	r8, #0
 8006088:	e7e7      	b.n	800605a <_strtod_l+0xa5a>
 800608a:	4b5d      	ldr	r3, [pc, #372]	; (8006200 <_strtod_l+0xc00>)
 800608c:	4640      	mov	r0, r8
 800608e:	4649      	mov	r1, r9
 8006090:	2200      	movs	r2, #0
 8006092:	f7fa fac9 	bl	8000628 <__aeabi_dmul>
 8006096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006098:	4680      	mov	r8, r0
 800609a:	4689      	mov	r9, r1
 800609c:	b933      	cbnz	r3, 80060ac <_strtod_l+0xaac>
 800609e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060a2:	900e      	str	r0, [sp, #56]	; 0x38
 80060a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80060a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80060aa:	e7dd      	b.n	8006068 <_strtod_l+0xa68>
 80060ac:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80060b0:	e7f9      	b.n	80060a6 <_strtod_l+0xaa6>
 80060b2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1a8      	bne.n	800600e <_strtod_l+0xa0e>
 80060bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80060c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060c2:	0d1b      	lsrs	r3, r3, #20
 80060c4:	051b      	lsls	r3, r3, #20
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d1a1      	bne.n	800600e <_strtod_l+0xa0e>
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f7fa fe0b 	bl	8000ce8 <__aeabi_d2lz>
 80060d2:	f7fa fa7b 	bl	80005cc <__aeabi_l2d>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4640      	mov	r0, r8
 80060dc:	4649      	mov	r1, r9
 80060de:	f7fa f8eb 	bl	80002b8 <__aeabi_dsub>
 80060e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80060e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060e8:	ea43 030a 	orr.w	r3, r3, sl
 80060ec:	4313      	orrs	r3, r2
 80060ee:	4680      	mov	r8, r0
 80060f0:	4689      	mov	r9, r1
 80060f2:	d055      	beq.n	80061a0 <_strtod_l+0xba0>
 80060f4:	a336      	add	r3, pc, #216	; (adr r3, 80061d0 <_strtod_l+0xbd0>)
 80060f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fa:	f7fa fd07 	bl	8000b0c <__aeabi_dcmplt>
 80060fe:	2800      	cmp	r0, #0
 8006100:	f47f acd0 	bne.w	8005aa4 <_strtod_l+0x4a4>
 8006104:	a334      	add	r3, pc, #208	; (adr r3, 80061d8 <_strtod_l+0xbd8>)
 8006106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610a:	4640      	mov	r0, r8
 800610c:	4649      	mov	r1, r9
 800610e:	f7fa fd1b 	bl	8000b48 <__aeabi_dcmpgt>
 8006112:	2800      	cmp	r0, #0
 8006114:	f43f af7b 	beq.w	800600e <_strtod_l+0xa0e>
 8006118:	e4c4      	b.n	8005aa4 <_strtod_l+0x4a4>
 800611a:	9b04      	ldr	r3, [sp, #16]
 800611c:	b333      	cbz	r3, 800616c <_strtod_l+0xb6c>
 800611e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006120:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006124:	d822      	bhi.n	800616c <_strtod_l+0xb6c>
 8006126:	a32e      	add	r3, pc, #184	; (adr r3, 80061e0 <_strtod_l+0xbe0>)
 8006128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612c:	4640      	mov	r0, r8
 800612e:	4649      	mov	r1, r9
 8006130:	f7fa fcf6 	bl	8000b20 <__aeabi_dcmple>
 8006134:	b1a0      	cbz	r0, 8006160 <_strtod_l+0xb60>
 8006136:	4649      	mov	r1, r9
 8006138:	4640      	mov	r0, r8
 800613a:	f7fa fd4d 	bl	8000bd8 <__aeabi_d2uiz>
 800613e:	2801      	cmp	r0, #1
 8006140:	bf38      	it	cc
 8006142:	2001      	movcc	r0, #1
 8006144:	f7fa f9f6 	bl	8000534 <__aeabi_ui2d>
 8006148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800614a:	4680      	mov	r8, r0
 800614c:	4689      	mov	r9, r1
 800614e:	bb23      	cbnz	r3, 800619a <_strtod_l+0xb9a>
 8006150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006154:	9010      	str	r0, [sp, #64]	; 0x40
 8006156:	9311      	str	r3, [sp, #68]	; 0x44
 8006158:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800615c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006162:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006164:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006168:	1a9b      	subs	r3, r3, r2
 800616a:	9309      	str	r3, [sp, #36]	; 0x24
 800616c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006170:	eeb0 0a48 	vmov.f32	s0, s16
 8006174:	eef0 0a68 	vmov.f32	s1, s17
 8006178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800617c:	f002 f8a6 	bl	80082cc <__ulp>
 8006180:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006184:	ec53 2b10 	vmov	r2, r3, d0
 8006188:	f7fa fa4e 	bl	8000628 <__aeabi_dmul>
 800618c:	ec53 2b18 	vmov	r2, r3, d8
 8006190:	f7fa f894 	bl	80002bc <__adddf3>
 8006194:	4682      	mov	sl, r0
 8006196:	468b      	mov	fp, r1
 8006198:	e78d      	b.n	80060b6 <_strtod_l+0xab6>
 800619a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800619e:	e7db      	b.n	8006158 <_strtod_l+0xb58>
 80061a0:	a311      	add	r3, pc, #68	; (adr r3, 80061e8 <_strtod_l+0xbe8>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa fcb1 	bl	8000b0c <__aeabi_dcmplt>
 80061aa:	e7b2      	b.n	8006112 <_strtod_l+0xb12>
 80061ac:	2300      	movs	r3, #0
 80061ae:	930a      	str	r3, [sp, #40]	; 0x28
 80061b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80061b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	f7ff ba6b 	b.w	8005690 <_strtod_l+0x90>
 80061ba:	2a65      	cmp	r2, #101	; 0x65
 80061bc:	f43f ab5f 	beq.w	800587e <_strtod_l+0x27e>
 80061c0:	2a45      	cmp	r2, #69	; 0x45
 80061c2:	f43f ab5c 	beq.w	800587e <_strtod_l+0x27e>
 80061c6:	2301      	movs	r3, #1
 80061c8:	f7ff bb94 	b.w	80058f4 <_strtod_l+0x2f4>
 80061cc:	f3af 8000 	nop.w
 80061d0:	94a03595 	.word	0x94a03595
 80061d4:	3fdfffff 	.word	0x3fdfffff
 80061d8:	35afe535 	.word	0x35afe535
 80061dc:	3fe00000 	.word	0x3fe00000
 80061e0:	ffc00000 	.word	0xffc00000
 80061e4:	41dfffff 	.word	0x41dfffff
 80061e8:	94a03595 	.word	0x94a03595
 80061ec:	3fcfffff 	.word	0x3fcfffff
 80061f0:	3ff00000 	.word	0x3ff00000
 80061f4:	7ff00000 	.word	0x7ff00000
 80061f8:	7fe00000 	.word	0x7fe00000
 80061fc:	7c9fffff 	.word	0x7c9fffff
 8006200:	3fe00000 	.word	0x3fe00000
 8006204:	bff00000 	.word	0xbff00000
 8006208:	7fefffff 	.word	0x7fefffff

0800620c <_strtod_r>:
 800620c:	4b01      	ldr	r3, [pc, #4]	; (8006214 <_strtod_r+0x8>)
 800620e:	f7ff b9f7 	b.w	8005600 <_strtod_l>
 8006212:	bf00      	nop
 8006214:	20000074 	.word	0x20000074

08006218 <_strtol_l.constprop.0>:
 8006218:	2b01      	cmp	r3, #1
 800621a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800621e:	d001      	beq.n	8006224 <_strtol_l.constprop.0+0xc>
 8006220:	2b24      	cmp	r3, #36	; 0x24
 8006222:	d906      	bls.n	8006232 <_strtol_l.constprop.0+0x1a>
 8006224:	f7fe f9f0 	bl	8004608 <__errno>
 8006228:	2316      	movs	r3, #22
 800622a:	6003      	str	r3, [r0, #0]
 800622c:	2000      	movs	r0, #0
 800622e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006232:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006318 <_strtol_l.constprop.0+0x100>
 8006236:	460d      	mov	r5, r1
 8006238:	462e      	mov	r6, r5
 800623a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800623e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006242:	f017 0708 	ands.w	r7, r7, #8
 8006246:	d1f7      	bne.n	8006238 <_strtol_l.constprop.0+0x20>
 8006248:	2c2d      	cmp	r4, #45	; 0x2d
 800624a:	d132      	bne.n	80062b2 <_strtol_l.constprop.0+0x9a>
 800624c:	782c      	ldrb	r4, [r5, #0]
 800624e:	2701      	movs	r7, #1
 8006250:	1cb5      	adds	r5, r6, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d05b      	beq.n	800630e <_strtol_l.constprop.0+0xf6>
 8006256:	2b10      	cmp	r3, #16
 8006258:	d109      	bne.n	800626e <_strtol_l.constprop.0+0x56>
 800625a:	2c30      	cmp	r4, #48	; 0x30
 800625c:	d107      	bne.n	800626e <_strtol_l.constprop.0+0x56>
 800625e:	782c      	ldrb	r4, [r5, #0]
 8006260:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006264:	2c58      	cmp	r4, #88	; 0x58
 8006266:	d14d      	bne.n	8006304 <_strtol_l.constprop.0+0xec>
 8006268:	786c      	ldrb	r4, [r5, #1]
 800626a:	2310      	movs	r3, #16
 800626c:	3502      	adds	r5, #2
 800626e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006272:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006276:	f04f 0c00 	mov.w	ip, #0
 800627a:	fbb8 f9f3 	udiv	r9, r8, r3
 800627e:	4666      	mov	r6, ip
 8006280:	fb03 8a19 	mls	sl, r3, r9, r8
 8006284:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006288:	f1be 0f09 	cmp.w	lr, #9
 800628c:	d816      	bhi.n	80062bc <_strtol_l.constprop.0+0xa4>
 800628e:	4674      	mov	r4, lr
 8006290:	42a3      	cmp	r3, r4
 8006292:	dd24      	ble.n	80062de <_strtol_l.constprop.0+0xc6>
 8006294:	f1bc 0f00 	cmp.w	ip, #0
 8006298:	db1e      	blt.n	80062d8 <_strtol_l.constprop.0+0xc0>
 800629a:	45b1      	cmp	r9, r6
 800629c:	d31c      	bcc.n	80062d8 <_strtol_l.constprop.0+0xc0>
 800629e:	d101      	bne.n	80062a4 <_strtol_l.constprop.0+0x8c>
 80062a0:	45a2      	cmp	sl, r4
 80062a2:	db19      	blt.n	80062d8 <_strtol_l.constprop.0+0xc0>
 80062a4:	fb06 4603 	mla	r6, r6, r3, r4
 80062a8:	f04f 0c01 	mov.w	ip, #1
 80062ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062b0:	e7e8      	b.n	8006284 <_strtol_l.constprop.0+0x6c>
 80062b2:	2c2b      	cmp	r4, #43	; 0x2b
 80062b4:	bf04      	itt	eq
 80062b6:	782c      	ldrbeq	r4, [r5, #0]
 80062b8:	1cb5      	addeq	r5, r6, #2
 80062ba:	e7ca      	b.n	8006252 <_strtol_l.constprop.0+0x3a>
 80062bc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80062c0:	f1be 0f19 	cmp.w	lr, #25
 80062c4:	d801      	bhi.n	80062ca <_strtol_l.constprop.0+0xb2>
 80062c6:	3c37      	subs	r4, #55	; 0x37
 80062c8:	e7e2      	b.n	8006290 <_strtol_l.constprop.0+0x78>
 80062ca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80062ce:	f1be 0f19 	cmp.w	lr, #25
 80062d2:	d804      	bhi.n	80062de <_strtol_l.constprop.0+0xc6>
 80062d4:	3c57      	subs	r4, #87	; 0x57
 80062d6:	e7db      	b.n	8006290 <_strtol_l.constprop.0+0x78>
 80062d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80062dc:	e7e6      	b.n	80062ac <_strtol_l.constprop.0+0x94>
 80062de:	f1bc 0f00 	cmp.w	ip, #0
 80062e2:	da05      	bge.n	80062f0 <_strtol_l.constprop.0+0xd8>
 80062e4:	2322      	movs	r3, #34	; 0x22
 80062e6:	6003      	str	r3, [r0, #0]
 80062e8:	4646      	mov	r6, r8
 80062ea:	b942      	cbnz	r2, 80062fe <_strtol_l.constprop.0+0xe6>
 80062ec:	4630      	mov	r0, r6
 80062ee:	e79e      	b.n	800622e <_strtol_l.constprop.0+0x16>
 80062f0:	b107      	cbz	r7, 80062f4 <_strtol_l.constprop.0+0xdc>
 80062f2:	4276      	negs	r6, r6
 80062f4:	2a00      	cmp	r2, #0
 80062f6:	d0f9      	beq.n	80062ec <_strtol_l.constprop.0+0xd4>
 80062f8:	f1bc 0f00 	cmp.w	ip, #0
 80062fc:	d000      	beq.n	8006300 <_strtol_l.constprop.0+0xe8>
 80062fe:	1e69      	subs	r1, r5, #1
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	e7f3      	b.n	80062ec <_strtol_l.constprop.0+0xd4>
 8006304:	2430      	movs	r4, #48	; 0x30
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1b1      	bne.n	800626e <_strtol_l.constprop.0+0x56>
 800630a:	2308      	movs	r3, #8
 800630c:	e7af      	b.n	800626e <_strtol_l.constprop.0+0x56>
 800630e:	2c30      	cmp	r4, #48	; 0x30
 8006310:	d0a5      	beq.n	800625e <_strtol_l.constprop.0+0x46>
 8006312:	230a      	movs	r3, #10
 8006314:	e7ab      	b.n	800626e <_strtol_l.constprop.0+0x56>
 8006316:	bf00      	nop
 8006318:	08009e49 	.word	0x08009e49

0800631c <_strtol_r>:
 800631c:	f7ff bf7c 	b.w	8006218 <_strtol_l.constprop.0>

08006320 <quorem>:
 8006320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	6903      	ldr	r3, [r0, #16]
 8006326:	690c      	ldr	r4, [r1, #16]
 8006328:	42a3      	cmp	r3, r4
 800632a:	4607      	mov	r7, r0
 800632c:	f2c0 8081 	blt.w	8006432 <quorem+0x112>
 8006330:	3c01      	subs	r4, #1
 8006332:	f101 0814 	add.w	r8, r1, #20
 8006336:	f100 0514 	add.w	r5, r0, #20
 800633a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800633e:	9301      	str	r3, [sp, #4]
 8006340:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006344:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006348:	3301      	adds	r3, #1
 800634a:	429a      	cmp	r2, r3
 800634c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006354:	fbb2 f6f3 	udiv	r6, r2, r3
 8006358:	d331      	bcc.n	80063be <quorem+0x9e>
 800635a:	f04f 0e00 	mov.w	lr, #0
 800635e:	4640      	mov	r0, r8
 8006360:	46ac      	mov	ip, r5
 8006362:	46f2      	mov	sl, lr
 8006364:	f850 2b04 	ldr.w	r2, [r0], #4
 8006368:	b293      	uxth	r3, r2
 800636a:	fb06 e303 	mla	r3, r6, r3, lr
 800636e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006372:	b29b      	uxth	r3, r3
 8006374:	ebaa 0303 	sub.w	r3, sl, r3
 8006378:	f8dc a000 	ldr.w	sl, [ip]
 800637c:	0c12      	lsrs	r2, r2, #16
 800637e:	fa13 f38a 	uxtah	r3, r3, sl
 8006382:	fb06 e202 	mla	r2, r6, r2, lr
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	9b00      	ldr	r3, [sp, #0]
 800638a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800638e:	b292      	uxth	r2, r2
 8006390:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006398:	f8bd 3000 	ldrh.w	r3, [sp]
 800639c:	4581      	cmp	r9, r0
 800639e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063a2:	f84c 3b04 	str.w	r3, [ip], #4
 80063a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063aa:	d2db      	bcs.n	8006364 <quorem+0x44>
 80063ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80063b0:	b92b      	cbnz	r3, 80063be <quorem+0x9e>
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	3b04      	subs	r3, #4
 80063b6:	429d      	cmp	r5, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	d32e      	bcc.n	800641a <quorem+0xfa>
 80063bc:	613c      	str	r4, [r7, #16]
 80063be:	4638      	mov	r0, r7
 80063c0:	f001 fede 	bl	8008180 <__mcmp>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	db24      	blt.n	8006412 <quorem+0xf2>
 80063c8:	3601      	adds	r6, #1
 80063ca:	4628      	mov	r0, r5
 80063cc:	f04f 0c00 	mov.w	ip, #0
 80063d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80063d4:	f8d0 e000 	ldr.w	lr, [r0]
 80063d8:	b293      	uxth	r3, r2
 80063da:	ebac 0303 	sub.w	r3, ip, r3
 80063de:	0c12      	lsrs	r2, r2, #16
 80063e0:	fa13 f38e 	uxtah	r3, r3, lr
 80063e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80063e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063f2:	45c1      	cmp	r9, r8
 80063f4:	f840 3b04 	str.w	r3, [r0], #4
 80063f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063fc:	d2e8      	bcs.n	80063d0 <quorem+0xb0>
 80063fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006406:	b922      	cbnz	r2, 8006412 <quorem+0xf2>
 8006408:	3b04      	subs	r3, #4
 800640a:	429d      	cmp	r5, r3
 800640c:	461a      	mov	r2, r3
 800640e:	d30a      	bcc.n	8006426 <quorem+0x106>
 8006410:	613c      	str	r4, [r7, #16]
 8006412:	4630      	mov	r0, r6
 8006414:	b003      	add	sp, #12
 8006416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	3b04      	subs	r3, #4
 800641e:	2a00      	cmp	r2, #0
 8006420:	d1cc      	bne.n	80063bc <quorem+0x9c>
 8006422:	3c01      	subs	r4, #1
 8006424:	e7c7      	b.n	80063b6 <quorem+0x96>
 8006426:	6812      	ldr	r2, [r2, #0]
 8006428:	3b04      	subs	r3, #4
 800642a:	2a00      	cmp	r2, #0
 800642c:	d1f0      	bne.n	8006410 <quorem+0xf0>
 800642e:	3c01      	subs	r4, #1
 8006430:	e7eb      	b.n	800640a <quorem+0xea>
 8006432:	2000      	movs	r0, #0
 8006434:	e7ee      	b.n	8006414 <quorem+0xf4>
	...

08006438 <_dtoa_r>:
 8006438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800643c:	ed2d 8b04 	vpush	{d8-d9}
 8006440:	ec57 6b10 	vmov	r6, r7, d0
 8006444:	b093      	sub	sp, #76	; 0x4c
 8006446:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006448:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800644c:	9106      	str	r1, [sp, #24]
 800644e:	ee10 aa10 	vmov	sl, s0
 8006452:	4604      	mov	r4, r0
 8006454:	9209      	str	r2, [sp, #36]	; 0x24
 8006456:	930c      	str	r3, [sp, #48]	; 0x30
 8006458:	46bb      	mov	fp, r7
 800645a:	b975      	cbnz	r5, 800647a <_dtoa_r+0x42>
 800645c:	2010      	movs	r0, #16
 800645e:	f001 fb9b 	bl	8007b98 <malloc>
 8006462:	4602      	mov	r2, r0
 8006464:	6260      	str	r0, [r4, #36]	; 0x24
 8006466:	b920      	cbnz	r0, 8006472 <_dtoa_r+0x3a>
 8006468:	4ba7      	ldr	r3, [pc, #668]	; (8006708 <_dtoa_r+0x2d0>)
 800646a:	21ea      	movs	r1, #234	; 0xea
 800646c:	48a7      	ldr	r0, [pc, #668]	; (800670c <_dtoa_r+0x2d4>)
 800646e:	f003 faf5 	bl	8009a5c <__assert_func>
 8006472:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006476:	6005      	str	r5, [r0, #0]
 8006478:	60c5      	str	r5, [r0, #12]
 800647a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647c:	6819      	ldr	r1, [r3, #0]
 800647e:	b151      	cbz	r1, 8006496 <_dtoa_r+0x5e>
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	604a      	str	r2, [r1, #4]
 8006484:	2301      	movs	r3, #1
 8006486:	4093      	lsls	r3, r2
 8006488:	608b      	str	r3, [r1, #8]
 800648a:	4620      	mov	r0, r4
 800648c:	f001 fbec 	bl	8007c68 <_Bfree>
 8006490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	1e3b      	subs	r3, r7, #0
 8006498:	bfaa      	itet	ge
 800649a:	2300      	movge	r3, #0
 800649c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80064a0:	f8c8 3000 	strge.w	r3, [r8]
 80064a4:	4b9a      	ldr	r3, [pc, #616]	; (8006710 <_dtoa_r+0x2d8>)
 80064a6:	bfbc      	itt	lt
 80064a8:	2201      	movlt	r2, #1
 80064aa:	f8c8 2000 	strlt.w	r2, [r8]
 80064ae:	ea33 030b 	bics.w	r3, r3, fp
 80064b2:	d11b      	bne.n	80064ec <_dtoa_r+0xb4>
 80064b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80064c0:	4333      	orrs	r3, r6
 80064c2:	f000 8592 	beq.w	8006fea <_dtoa_r+0xbb2>
 80064c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c8:	b963      	cbnz	r3, 80064e4 <_dtoa_r+0xac>
 80064ca:	4b92      	ldr	r3, [pc, #584]	; (8006714 <_dtoa_r+0x2dc>)
 80064cc:	e022      	b.n	8006514 <_dtoa_r+0xdc>
 80064ce:	4b92      	ldr	r3, [pc, #584]	; (8006718 <_dtoa_r+0x2e0>)
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	3308      	adds	r3, #8
 80064d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	9801      	ldr	r0, [sp, #4]
 80064da:	b013      	add	sp, #76	; 0x4c
 80064dc:	ecbd 8b04 	vpop	{d8-d9}
 80064e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e4:	4b8b      	ldr	r3, [pc, #556]	; (8006714 <_dtoa_r+0x2dc>)
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	3303      	adds	r3, #3
 80064ea:	e7f3      	b.n	80064d4 <_dtoa_r+0x9c>
 80064ec:	2200      	movs	r2, #0
 80064ee:	2300      	movs	r3, #0
 80064f0:	4650      	mov	r0, sl
 80064f2:	4659      	mov	r1, fp
 80064f4:	f7fa fb00 	bl	8000af8 <__aeabi_dcmpeq>
 80064f8:	ec4b ab19 	vmov	d9, sl, fp
 80064fc:	4680      	mov	r8, r0
 80064fe:	b158      	cbz	r0, 8006518 <_dtoa_r+0xe0>
 8006500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006502:	2301      	movs	r3, #1
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 856b 	beq.w	8006fe4 <_dtoa_r+0xbac>
 800650e:	4883      	ldr	r0, [pc, #524]	; (800671c <_dtoa_r+0x2e4>)
 8006510:	6018      	str	r0, [r3, #0]
 8006512:	1e43      	subs	r3, r0, #1
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	e7df      	b.n	80064d8 <_dtoa_r+0xa0>
 8006518:	ec4b ab10 	vmov	d0, sl, fp
 800651c:	aa10      	add	r2, sp, #64	; 0x40
 800651e:	a911      	add	r1, sp, #68	; 0x44
 8006520:	4620      	mov	r0, r4
 8006522:	f001 ff4f 	bl	80083c4 <__d2b>
 8006526:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800652a:	ee08 0a10 	vmov	s16, r0
 800652e:	2d00      	cmp	r5, #0
 8006530:	f000 8084 	beq.w	800663c <_dtoa_r+0x204>
 8006534:	ee19 3a90 	vmov	r3, s19
 8006538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800653c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006540:	4656      	mov	r6, sl
 8006542:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800654a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800654e:	4b74      	ldr	r3, [pc, #464]	; (8006720 <_dtoa_r+0x2e8>)
 8006550:	2200      	movs	r2, #0
 8006552:	4630      	mov	r0, r6
 8006554:	4639      	mov	r1, r7
 8006556:	f7f9 feaf 	bl	80002b8 <__aeabi_dsub>
 800655a:	a365      	add	r3, pc, #404	; (adr r3, 80066f0 <_dtoa_r+0x2b8>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa f862 	bl	8000628 <__aeabi_dmul>
 8006564:	a364      	add	r3, pc, #400	; (adr r3, 80066f8 <_dtoa_r+0x2c0>)
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f7f9 fea7 	bl	80002bc <__adddf3>
 800656e:	4606      	mov	r6, r0
 8006570:	4628      	mov	r0, r5
 8006572:	460f      	mov	r7, r1
 8006574:	f7f9 ffee 	bl	8000554 <__aeabi_i2d>
 8006578:	a361      	add	r3, pc, #388	; (adr r3, 8006700 <_dtoa_r+0x2c8>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7fa f853 	bl	8000628 <__aeabi_dmul>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4630      	mov	r0, r6
 8006588:	4639      	mov	r1, r7
 800658a:	f7f9 fe97 	bl	80002bc <__adddf3>
 800658e:	4606      	mov	r6, r0
 8006590:	460f      	mov	r7, r1
 8006592:	f7fa faf9 	bl	8000b88 <__aeabi_d2iz>
 8006596:	2200      	movs	r2, #0
 8006598:	9000      	str	r0, [sp, #0]
 800659a:	2300      	movs	r3, #0
 800659c:	4630      	mov	r0, r6
 800659e:	4639      	mov	r1, r7
 80065a0:	f7fa fab4 	bl	8000b0c <__aeabi_dcmplt>
 80065a4:	b150      	cbz	r0, 80065bc <_dtoa_r+0x184>
 80065a6:	9800      	ldr	r0, [sp, #0]
 80065a8:	f7f9 ffd4 	bl	8000554 <__aeabi_i2d>
 80065ac:	4632      	mov	r2, r6
 80065ae:	463b      	mov	r3, r7
 80065b0:	f7fa faa2 	bl	8000af8 <__aeabi_dcmpeq>
 80065b4:	b910      	cbnz	r0, 80065bc <_dtoa_r+0x184>
 80065b6:	9b00      	ldr	r3, [sp, #0]
 80065b8:	3b01      	subs	r3, #1
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	9b00      	ldr	r3, [sp, #0]
 80065be:	2b16      	cmp	r3, #22
 80065c0:	d85a      	bhi.n	8006678 <_dtoa_r+0x240>
 80065c2:	9a00      	ldr	r2, [sp, #0]
 80065c4:	4b57      	ldr	r3, [pc, #348]	; (8006724 <_dtoa_r+0x2ec>)
 80065c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	ec51 0b19 	vmov	r0, r1, d9
 80065d2:	f7fa fa9b 	bl	8000b0c <__aeabi_dcmplt>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d050      	beq.n	800667c <_dtoa_r+0x244>
 80065da:	9b00      	ldr	r3, [sp, #0]
 80065dc:	3b01      	subs	r3, #1
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80065e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065e6:	1b5d      	subs	r5, r3, r5
 80065e8:	1e6b      	subs	r3, r5, #1
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	bf45      	ittet	mi
 80065ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80065f2:	9304      	strmi	r3, [sp, #16]
 80065f4:	2300      	movpl	r3, #0
 80065f6:	2300      	movmi	r3, #0
 80065f8:	bf4c      	ite	mi
 80065fa:	9305      	strmi	r3, [sp, #20]
 80065fc:	9304      	strpl	r3, [sp, #16]
 80065fe:	9b00      	ldr	r3, [sp, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	db3d      	blt.n	8006680 <_dtoa_r+0x248>
 8006604:	9b05      	ldr	r3, [sp, #20]
 8006606:	9a00      	ldr	r2, [sp, #0]
 8006608:	920a      	str	r2, [sp, #40]	; 0x28
 800660a:	4413      	add	r3, r2
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	2300      	movs	r3, #0
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	9b06      	ldr	r3, [sp, #24]
 8006614:	2b09      	cmp	r3, #9
 8006616:	f200 8089 	bhi.w	800672c <_dtoa_r+0x2f4>
 800661a:	2b05      	cmp	r3, #5
 800661c:	bfc4      	itt	gt
 800661e:	3b04      	subgt	r3, #4
 8006620:	9306      	strgt	r3, [sp, #24]
 8006622:	9b06      	ldr	r3, [sp, #24]
 8006624:	f1a3 0302 	sub.w	r3, r3, #2
 8006628:	bfcc      	ite	gt
 800662a:	2500      	movgt	r5, #0
 800662c:	2501      	movle	r5, #1
 800662e:	2b03      	cmp	r3, #3
 8006630:	f200 8087 	bhi.w	8006742 <_dtoa_r+0x30a>
 8006634:	e8df f003 	tbb	[pc, r3]
 8006638:	59383a2d 	.word	0x59383a2d
 800663c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006640:	441d      	add	r5, r3
 8006642:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006646:	2b20      	cmp	r3, #32
 8006648:	bfc1      	itttt	gt
 800664a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800664e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006652:	fa0b f303 	lslgt.w	r3, fp, r3
 8006656:	fa26 f000 	lsrgt.w	r0, r6, r0
 800665a:	bfda      	itte	le
 800665c:	f1c3 0320 	rsble	r3, r3, #32
 8006660:	fa06 f003 	lslle.w	r0, r6, r3
 8006664:	4318      	orrgt	r0, r3
 8006666:	f7f9 ff65 	bl	8000534 <__aeabi_ui2d>
 800666a:	2301      	movs	r3, #1
 800666c:	4606      	mov	r6, r0
 800666e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006672:	3d01      	subs	r5, #1
 8006674:	930e      	str	r3, [sp, #56]	; 0x38
 8006676:	e76a      	b.n	800654e <_dtoa_r+0x116>
 8006678:	2301      	movs	r3, #1
 800667a:	e7b2      	b.n	80065e2 <_dtoa_r+0x1aa>
 800667c:	900b      	str	r0, [sp, #44]	; 0x2c
 800667e:	e7b1      	b.n	80065e4 <_dtoa_r+0x1ac>
 8006680:	9b04      	ldr	r3, [sp, #16]
 8006682:	9a00      	ldr	r2, [sp, #0]
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	9304      	str	r3, [sp, #16]
 8006688:	4253      	negs	r3, r2
 800668a:	9307      	str	r3, [sp, #28]
 800668c:	2300      	movs	r3, #0
 800668e:	930a      	str	r3, [sp, #40]	; 0x28
 8006690:	e7bf      	b.n	8006612 <_dtoa_r+0x1da>
 8006692:	2300      	movs	r3, #0
 8006694:	9308      	str	r3, [sp, #32]
 8006696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc55      	bgt.n	8006748 <_dtoa_r+0x310>
 800669c:	2301      	movs	r3, #1
 800669e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066a2:	461a      	mov	r2, r3
 80066a4:	9209      	str	r2, [sp, #36]	; 0x24
 80066a6:	e00c      	b.n	80066c2 <_dtoa_r+0x28a>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e7f3      	b.n	8006694 <_dtoa_r+0x25c>
 80066ac:	2300      	movs	r3, #0
 80066ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b0:	9308      	str	r3, [sp, #32]
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	4413      	add	r3, r2
 80066b6:	9302      	str	r3, [sp, #8]
 80066b8:	3301      	adds	r3, #1
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	9303      	str	r3, [sp, #12]
 80066be:	bfb8      	it	lt
 80066c0:	2301      	movlt	r3, #1
 80066c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80066c4:	2200      	movs	r2, #0
 80066c6:	6042      	str	r2, [r0, #4]
 80066c8:	2204      	movs	r2, #4
 80066ca:	f102 0614 	add.w	r6, r2, #20
 80066ce:	429e      	cmp	r6, r3
 80066d0:	6841      	ldr	r1, [r0, #4]
 80066d2:	d93d      	bls.n	8006750 <_dtoa_r+0x318>
 80066d4:	4620      	mov	r0, r4
 80066d6:	f001 fa87 	bl	8007be8 <_Balloc>
 80066da:	9001      	str	r0, [sp, #4]
 80066dc:	2800      	cmp	r0, #0
 80066de:	d13b      	bne.n	8006758 <_dtoa_r+0x320>
 80066e0:	4b11      	ldr	r3, [pc, #68]	; (8006728 <_dtoa_r+0x2f0>)
 80066e2:	4602      	mov	r2, r0
 80066e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066e8:	e6c0      	b.n	800646c <_dtoa_r+0x34>
 80066ea:	2301      	movs	r3, #1
 80066ec:	e7df      	b.n	80066ae <_dtoa_r+0x276>
 80066ee:	bf00      	nop
 80066f0:	636f4361 	.word	0x636f4361
 80066f4:	3fd287a7 	.word	0x3fd287a7
 80066f8:	8b60c8b3 	.word	0x8b60c8b3
 80066fc:	3fc68a28 	.word	0x3fc68a28
 8006700:	509f79fb 	.word	0x509f79fb
 8006704:	3fd34413 	.word	0x3fd34413
 8006708:	08009f56 	.word	0x08009f56
 800670c:	08009f6d 	.word	0x08009f6d
 8006710:	7ff00000 	.word	0x7ff00000
 8006714:	08009f52 	.word	0x08009f52
 8006718:	08009f49 	.word	0x08009f49
 800671c:	0800a22a 	.word	0x0800a22a
 8006720:	3ff80000 	.word	0x3ff80000
 8006724:	0800a140 	.word	0x0800a140
 8006728:	08009fc8 	.word	0x08009fc8
 800672c:	2501      	movs	r5, #1
 800672e:	2300      	movs	r3, #0
 8006730:	9306      	str	r3, [sp, #24]
 8006732:	9508      	str	r5, [sp, #32]
 8006734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006738:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	2312      	movs	r3, #18
 8006740:	e7b0      	b.n	80066a4 <_dtoa_r+0x26c>
 8006742:	2301      	movs	r3, #1
 8006744:	9308      	str	r3, [sp, #32]
 8006746:	e7f5      	b.n	8006734 <_dtoa_r+0x2fc>
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800674e:	e7b8      	b.n	80066c2 <_dtoa_r+0x28a>
 8006750:	3101      	adds	r1, #1
 8006752:	6041      	str	r1, [r0, #4]
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	e7b8      	b.n	80066ca <_dtoa_r+0x292>
 8006758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800675a:	9a01      	ldr	r2, [sp, #4]
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	2b0e      	cmp	r3, #14
 8006762:	f200 809d 	bhi.w	80068a0 <_dtoa_r+0x468>
 8006766:	2d00      	cmp	r5, #0
 8006768:	f000 809a 	beq.w	80068a0 <_dtoa_r+0x468>
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dd32      	ble.n	80067d8 <_dtoa_r+0x3a0>
 8006772:	4ab7      	ldr	r2, [pc, #732]	; (8006a50 <_dtoa_r+0x618>)
 8006774:	f003 030f 	and.w	r3, r3, #15
 8006778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800677c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006780:	9b00      	ldr	r3, [sp, #0]
 8006782:	05d8      	lsls	r0, r3, #23
 8006784:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006788:	d516      	bpl.n	80067b8 <_dtoa_r+0x380>
 800678a:	4bb2      	ldr	r3, [pc, #712]	; (8006a54 <_dtoa_r+0x61c>)
 800678c:	ec51 0b19 	vmov	r0, r1, d9
 8006790:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006794:	f7fa f872 	bl	800087c <__aeabi_ddiv>
 8006798:	f007 070f 	and.w	r7, r7, #15
 800679c:	4682      	mov	sl, r0
 800679e:	468b      	mov	fp, r1
 80067a0:	2503      	movs	r5, #3
 80067a2:	4eac      	ldr	r6, [pc, #688]	; (8006a54 <_dtoa_r+0x61c>)
 80067a4:	b957      	cbnz	r7, 80067bc <_dtoa_r+0x384>
 80067a6:	4642      	mov	r2, r8
 80067a8:	464b      	mov	r3, r9
 80067aa:	4650      	mov	r0, sl
 80067ac:	4659      	mov	r1, fp
 80067ae:	f7fa f865 	bl	800087c <__aeabi_ddiv>
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	e028      	b.n	800680a <_dtoa_r+0x3d2>
 80067b8:	2502      	movs	r5, #2
 80067ba:	e7f2      	b.n	80067a2 <_dtoa_r+0x36a>
 80067bc:	07f9      	lsls	r1, r7, #31
 80067be:	d508      	bpl.n	80067d2 <_dtoa_r+0x39a>
 80067c0:	4640      	mov	r0, r8
 80067c2:	4649      	mov	r1, r9
 80067c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067c8:	f7f9 ff2e 	bl	8000628 <__aeabi_dmul>
 80067cc:	3501      	adds	r5, #1
 80067ce:	4680      	mov	r8, r0
 80067d0:	4689      	mov	r9, r1
 80067d2:	107f      	asrs	r7, r7, #1
 80067d4:	3608      	adds	r6, #8
 80067d6:	e7e5      	b.n	80067a4 <_dtoa_r+0x36c>
 80067d8:	f000 809b 	beq.w	8006912 <_dtoa_r+0x4da>
 80067dc:	9b00      	ldr	r3, [sp, #0]
 80067de:	4f9d      	ldr	r7, [pc, #628]	; (8006a54 <_dtoa_r+0x61c>)
 80067e0:	425e      	negs	r6, r3
 80067e2:	4b9b      	ldr	r3, [pc, #620]	; (8006a50 <_dtoa_r+0x618>)
 80067e4:	f006 020f 	and.w	r2, r6, #15
 80067e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f0:	ec51 0b19 	vmov	r0, r1, d9
 80067f4:	f7f9 ff18 	bl	8000628 <__aeabi_dmul>
 80067f8:	1136      	asrs	r6, r6, #4
 80067fa:	4682      	mov	sl, r0
 80067fc:	468b      	mov	fp, r1
 80067fe:	2300      	movs	r3, #0
 8006800:	2502      	movs	r5, #2
 8006802:	2e00      	cmp	r6, #0
 8006804:	d17a      	bne.n	80068fc <_dtoa_r+0x4c4>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1d3      	bne.n	80067b2 <_dtoa_r+0x37a>
 800680a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8082 	beq.w	8006916 <_dtoa_r+0x4de>
 8006812:	4b91      	ldr	r3, [pc, #580]	; (8006a58 <_dtoa_r+0x620>)
 8006814:	2200      	movs	r2, #0
 8006816:	4650      	mov	r0, sl
 8006818:	4659      	mov	r1, fp
 800681a:	f7fa f977 	bl	8000b0c <__aeabi_dcmplt>
 800681e:	2800      	cmp	r0, #0
 8006820:	d079      	beq.n	8006916 <_dtoa_r+0x4de>
 8006822:	9b03      	ldr	r3, [sp, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d076      	beq.n	8006916 <_dtoa_r+0x4de>
 8006828:	9b02      	ldr	r3, [sp, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	dd36      	ble.n	800689c <_dtoa_r+0x464>
 800682e:	9b00      	ldr	r3, [sp, #0]
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	1e5f      	subs	r7, r3, #1
 8006836:	2200      	movs	r2, #0
 8006838:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <_dtoa_r+0x624>)
 800683a:	f7f9 fef5 	bl	8000628 <__aeabi_dmul>
 800683e:	9e02      	ldr	r6, [sp, #8]
 8006840:	4682      	mov	sl, r0
 8006842:	468b      	mov	fp, r1
 8006844:	3501      	adds	r5, #1
 8006846:	4628      	mov	r0, r5
 8006848:	f7f9 fe84 	bl	8000554 <__aeabi_i2d>
 800684c:	4652      	mov	r2, sl
 800684e:	465b      	mov	r3, fp
 8006850:	f7f9 feea 	bl	8000628 <__aeabi_dmul>
 8006854:	4b82      	ldr	r3, [pc, #520]	; (8006a60 <_dtoa_r+0x628>)
 8006856:	2200      	movs	r2, #0
 8006858:	f7f9 fd30 	bl	80002bc <__adddf3>
 800685c:	46d0      	mov	r8, sl
 800685e:	46d9      	mov	r9, fp
 8006860:	4682      	mov	sl, r0
 8006862:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006866:	2e00      	cmp	r6, #0
 8006868:	d158      	bne.n	800691c <_dtoa_r+0x4e4>
 800686a:	4b7e      	ldr	r3, [pc, #504]	; (8006a64 <_dtoa_r+0x62c>)
 800686c:	2200      	movs	r2, #0
 800686e:	4640      	mov	r0, r8
 8006870:	4649      	mov	r1, r9
 8006872:	f7f9 fd21 	bl	80002b8 <__aeabi_dsub>
 8006876:	4652      	mov	r2, sl
 8006878:	465b      	mov	r3, fp
 800687a:	4680      	mov	r8, r0
 800687c:	4689      	mov	r9, r1
 800687e:	f7fa f963 	bl	8000b48 <__aeabi_dcmpgt>
 8006882:	2800      	cmp	r0, #0
 8006884:	f040 8295 	bne.w	8006db2 <_dtoa_r+0x97a>
 8006888:	4652      	mov	r2, sl
 800688a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800688e:	4640      	mov	r0, r8
 8006890:	4649      	mov	r1, r9
 8006892:	f7fa f93b 	bl	8000b0c <__aeabi_dcmplt>
 8006896:	2800      	cmp	r0, #0
 8006898:	f040 8289 	bne.w	8006dae <_dtoa_r+0x976>
 800689c:	ec5b ab19 	vmov	sl, fp, d9
 80068a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f2c0 8148 	blt.w	8006b38 <_dtoa_r+0x700>
 80068a8:	9a00      	ldr	r2, [sp, #0]
 80068aa:	2a0e      	cmp	r2, #14
 80068ac:	f300 8144 	bgt.w	8006b38 <_dtoa_r+0x700>
 80068b0:	4b67      	ldr	r3, [pc, #412]	; (8006a50 <_dtoa_r+0x618>)
 80068b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f280 80d5 	bge.w	8006a6c <_dtoa_r+0x634>
 80068c2:	9b03      	ldr	r3, [sp, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f300 80d1 	bgt.w	8006a6c <_dtoa_r+0x634>
 80068ca:	f040 826f 	bne.w	8006dac <_dtoa_r+0x974>
 80068ce:	4b65      	ldr	r3, [pc, #404]	; (8006a64 <_dtoa_r+0x62c>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	4640      	mov	r0, r8
 80068d4:	4649      	mov	r1, r9
 80068d6:	f7f9 fea7 	bl	8000628 <__aeabi_dmul>
 80068da:	4652      	mov	r2, sl
 80068dc:	465b      	mov	r3, fp
 80068de:	f7fa f929 	bl	8000b34 <__aeabi_dcmpge>
 80068e2:	9e03      	ldr	r6, [sp, #12]
 80068e4:	4637      	mov	r7, r6
 80068e6:	2800      	cmp	r0, #0
 80068e8:	f040 8245 	bne.w	8006d76 <_dtoa_r+0x93e>
 80068ec:	9d01      	ldr	r5, [sp, #4]
 80068ee:	2331      	movs	r3, #49	; 0x31
 80068f0:	f805 3b01 	strb.w	r3, [r5], #1
 80068f4:	9b00      	ldr	r3, [sp, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	e240      	b.n	8006d7e <_dtoa_r+0x946>
 80068fc:	07f2      	lsls	r2, r6, #31
 80068fe:	d505      	bpl.n	800690c <_dtoa_r+0x4d4>
 8006900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006904:	f7f9 fe90 	bl	8000628 <__aeabi_dmul>
 8006908:	3501      	adds	r5, #1
 800690a:	2301      	movs	r3, #1
 800690c:	1076      	asrs	r6, r6, #1
 800690e:	3708      	adds	r7, #8
 8006910:	e777      	b.n	8006802 <_dtoa_r+0x3ca>
 8006912:	2502      	movs	r5, #2
 8006914:	e779      	b.n	800680a <_dtoa_r+0x3d2>
 8006916:	9f00      	ldr	r7, [sp, #0]
 8006918:	9e03      	ldr	r6, [sp, #12]
 800691a:	e794      	b.n	8006846 <_dtoa_r+0x40e>
 800691c:	9901      	ldr	r1, [sp, #4]
 800691e:	4b4c      	ldr	r3, [pc, #304]	; (8006a50 <_dtoa_r+0x618>)
 8006920:	4431      	add	r1, r6
 8006922:	910d      	str	r1, [sp, #52]	; 0x34
 8006924:	9908      	ldr	r1, [sp, #32]
 8006926:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800692a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800692e:	2900      	cmp	r1, #0
 8006930:	d043      	beq.n	80069ba <_dtoa_r+0x582>
 8006932:	494d      	ldr	r1, [pc, #308]	; (8006a68 <_dtoa_r+0x630>)
 8006934:	2000      	movs	r0, #0
 8006936:	f7f9 ffa1 	bl	800087c <__aeabi_ddiv>
 800693a:	4652      	mov	r2, sl
 800693c:	465b      	mov	r3, fp
 800693e:	f7f9 fcbb 	bl	80002b8 <__aeabi_dsub>
 8006942:	9d01      	ldr	r5, [sp, #4]
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	4649      	mov	r1, r9
 800694a:	4640      	mov	r0, r8
 800694c:	f7fa f91c 	bl	8000b88 <__aeabi_d2iz>
 8006950:	4606      	mov	r6, r0
 8006952:	f7f9 fdff 	bl	8000554 <__aeabi_i2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4640      	mov	r0, r8
 800695c:	4649      	mov	r1, r9
 800695e:	f7f9 fcab 	bl	80002b8 <__aeabi_dsub>
 8006962:	3630      	adds	r6, #48	; 0x30
 8006964:	f805 6b01 	strb.w	r6, [r5], #1
 8006968:	4652      	mov	r2, sl
 800696a:	465b      	mov	r3, fp
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	f7fa f8cc 	bl	8000b0c <__aeabi_dcmplt>
 8006974:	2800      	cmp	r0, #0
 8006976:	d163      	bne.n	8006a40 <_dtoa_r+0x608>
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	4936      	ldr	r1, [pc, #216]	; (8006a58 <_dtoa_r+0x620>)
 800697e:	2000      	movs	r0, #0
 8006980:	f7f9 fc9a 	bl	80002b8 <__aeabi_dsub>
 8006984:	4652      	mov	r2, sl
 8006986:	465b      	mov	r3, fp
 8006988:	f7fa f8c0 	bl	8000b0c <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	f040 80b5 	bne.w	8006afc <_dtoa_r+0x6c4>
 8006992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006994:	429d      	cmp	r5, r3
 8006996:	d081      	beq.n	800689c <_dtoa_r+0x464>
 8006998:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <_dtoa_r+0x624>)
 800699a:	2200      	movs	r2, #0
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7f9 fe42 	bl	8000628 <__aeabi_dmul>
 80069a4:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <_dtoa_r+0x624>)
 80069a6:	4682      	mov	sl, r0
 80069a8:	468b      	mov	fp, r1
 80069aa:	4640      	mov	r0, r8
 80069ac:	4649      	mov	r1, r9
 80069ae:	2200      	movs	r2, #0
 80069b0:	f7f9 fe3a 	bl	8000628 <__aeabi_dmul>
 80069b4:	4680      	mov	r8, r0
 80069b6:	4689      	mov	r9, r1
 80069b8:	e7c6      	b.n	8006948 <_dtoa_r+0x510>
 80069ba:	4650      	mov	r0, sl
 80069bc:	4659      	mov	r1, fp
 80069be:	f7f9 fe33 	bl	8000628 <__aeabi_dmul>
 80069c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069c4:	9d01      	ldr	r5, [sp, #4]
 80069c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80069c8:	4682      	mov	sl, r0
 80069ca:	468b      	mov	fp, r1
 80069cc:	4649      	mov	r1, r9
 80069ce:	4640      	mov	r0, r8
 80069d0:	f7fa f8da 	bl	8000b88 <__aeabi_d2iz>
 80069d4:	4606      	mov	r6, r0
 80069d6:	f7f9 fdbd 	bl	8000554 <__aeabi_i2d>
 80069da:	3630      	adds	r6, #48	; 0x30
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4640      	mov	r0, r8
 80069e2:	4649      	mov	r1, r9
 80069e4:	f7f9 fc68 	bl	80002b8 <__aeabi_dsub>
 80069e8:	f805 6b01 	strb.w	r6, [r5], #1
 80069ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069ee:	429d      	cmp	r5, r3
 80069f0:	4680      	mov	r8, r0
 80069f2:	4689      	mov	r9, r1
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	d124      	bne.n	8006a44 <_dtoa_r+0x60c>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <_dtoa_r+0x630>)
 80069fc:	4650      	mov	r0, sl
 80069fe:	4659      	mov	r1, fp
 8006a00:	f7f9 fc5c 	bl	80002bc <__adddf3>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4640      	mov	r0, r8
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	f7fa f89c 	bl	8000b48 <__aeabi_dcmpgt>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d173      	bne.n	8006afc <_dtoa_r+0x6c4>
 8006a14:	4652      	mov	r2, sl
 8006a16:	465b      	mov	r3, fp
 8006a18:	4913      	ldr	r1, [pc, #76]	; (8006a68 <_dtoa_r+0x630>)
 8006a1a:	2000      	movs	r0, #0
 8006a1c:	f7f9 fc4c 	bl	80002b8 <__aeabi_dsub>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4640      	mov	r0, r8
 8006a26:	4649      	mov	r1, r9
 8006a28:	f7fa f870 	bl	8000b0c <__aeabi_dcmplt>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f43f af35 	beq.w	800689c <_dtoa_r+0x464>
 8006a32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a34:	1e6b      	subs	r3, r5, #1
 8006a36:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a3c:	2b30      	cmp	r3, #48	; 0x30
 8006a3e:	d0f8      	beq.n	8006a32 <_dtoa_r+0x5fa>
 8006a40:	9700      	str	r7, [sp, #0]
 8006a42:	e049      	b.n	8006ad8 <_dtoa_r+0x6a0>
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <_dtoa_r+0x624>)
 8006a46:	f7f9 fdef 	bl	8000628 <__aeabi_dmul>
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	4689      	mov	r9, r1
 8006a4e:	e7bd      	b.n	80069cc <_dtoa_r+0x594>
 8006a50:	0800a140 	.word	0x0800a140
 8006a54:	0800a118 	.word	0x0800a118
 8006a58:	3ff00000 	.word	0x3ff00000
 8006a5c:	40240000 	.word	0x40240000
 8006a60:	401c0000 	.word	0x401c0000
 8006a64:	40140000 	.word	0x40140000
 8006a68:	3fe00000 	.word	0x3fe00000
 8006a6c:	9d01      	ldr	r5, [sp, #4]
 8006a6e:	4656      	mov	r6, sl
 8006a70:	465f      	mov	r7, fp
 8006a72:	4642      	mov	r2, r8
 8006a74:	464b      	mov	r3, r9
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	f7f9 feff 	bl	800087c <__aeabi_ddiv>
 8006a7e:	f7fa f883 	bl	8000b88 <__aeabi_d2iz>
 8006a82:	4682      	mov	sl, r0
 8006a84:	f7f9 fd66 	bl	8000554 <__aeabi_i2d>
 8006a88:	4642      	mov	r2, r8
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	f7f9 fdcc 	bl	8000628 <__aeabi_dmul>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4630      	mov	r0, r6
 8006a96:	4639      	mov	r1, r7
 8006a98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a9c:	f7f9 fc0c 	bl	80002b8 <__aeabi_dsub>
 8006aa0:	f805 6b01 	strb.w	r6, [r5], #1
 8006aa4:	9e01      	ldr	r6, [sp, #4]
 8006aa6:	9f03      	ldr	r7, [sp, #12]
 8006aa8:	1bae      	subs	r6, r5, r6
 8006aaa:	42b7      	cmp	r7, r6
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	d135      	bne.n	8006b1e <_dtoa_r+0x6e6>
 8006ab2:	f7f9 fc03 	bl	80002bc <__adddf3>
 8006ab6:	4642      	mov	r2, r8
 8006ab8:	464b      	mov	r3, r9
 8006aba:	4606      	mov	r6, r0
 8006abc:	460f      	mov	r7, r1
 8006abe:	f7fa f843 	bl	8000b48 <__aeabi_dcmpgt>
 8006ac2:	b9d0      	cbnz	r0, 8006afa <_dtoa_r+0x6c2>
 8006ac4:	4642      	mov	r2, r8
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7fa f814 	bl	8000af8 <__aeabi_dcmpeq>
 8006ad0:	b110      	cbz	r0, 8006ad8 <_dtoa_r+0x6a0>
 8006ad2:	f01a 0f01 	tst.w	sl, #1
 8006ad6:	d110      	bne.n	8006afa <_dtoa_r+0x6c2>
 8006ad8:	4620      	mov	r0, r4
 8006ada:	ee18 1a10 	vmov	r1, s16
 8006ade:	f001 f8c3 	bl	8007c68 <_Bfree>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	9800      	ldr	r0, [sp, #0]
 8006ae6:	702b      	strb	r3, [r5, #0]
 8006ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aea:	3001      	adds	r0, #1
 8006aec:	6018      	str	r0, [r3, #0]
 8006aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f43f acf1 	beq.w	80064d8 <_dtoa_r+0xa0>
 8006af6:	601d      	str	r5, [r3, #0]
 8006af8:	e4ee      	b.n	80064d8 <_dtoa_r+0xa0>
 8006afa:	9f00      	ldr	r7, [sp, #0]
 8006afc:	462b      	mov	r3, r5
 8006afe:	461d      	mov	r5, r3
 8006b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b04:	2a39      	cmp	r2, #57	; 0x39
 8006b06:	d106      	bne.n	8006b16 <_dtoa_r+0x6de>
 8006b08:	9a01      	ldr	r2, [sp, #4]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d1f7      	bne.n	8006afe <_dtoa_r+0x6c6>
 8006b0e:	9901      	ldr	r1, [sp, #4]
 8006b10:	2230      	movs	r2, #48	; 0x30
 8006b12:	3701      	adds	r7, #1
 8006b14:	700a      	strb	r2, [r1, #0]
 8006b16:	781a      	ldrb	r2, [r3, #0]
 8006b18:	3201      	adds	r2, #1
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	e790      	b.n	8006a40 <_dtoa_r+0x608>
 8006b1e:	4ba6      	ldr	r3, [pc, #664]	; (8006db8 <_dtoa_r+0x980>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	f7f9 fd81 	bl	8000628 <__aeabi_dmul>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	460f      	mov	r7, r1
 8006b2e:	f7f9 ffe3 	bl	8000af8 <__aeabi_dcmpeq>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d09d      	beq.n	8006a72 <_dtoa_r+0x63a>
 8006b36:	e7cf      	b.n	8006ad8 <_dtoa_r+0x6a0>
 8006b38:	9a08      	ldr	r2, [sp, #32]
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	f000 80d7 	beq.w	8006cee <_dtoa_r+0x8b6>
 8006b40:	9a06      	ldr	r2, [sp, #24]
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	f300 80ba 	bgt.w	8006cbc <_dtoa_r+0x884>
 8006b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	f000 80b2 	beq.w	8006cb4 <_dtoa_r+0x87c>
 8006b50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b54:	9e07      	ldr	r6, [sp, #28]
 8006b56:	9d04      	ldr	r5, [sp, #16]
 8006b58:	9a04      	ldr	r2, [sp, #16]
 8006b5a:	441a      	add	r2, r3
 8006b5c:	9204      	str	r2, [sp, #16]
 8006b5e:	9a05      	ldr	r2, [sp, #20]
 8006b60:	2101      	movs	r1, #1
 8006b62:	441a      	add	r2, r3
 8006b64:	4620      	mov	r0, r4
 8006b66:	9205      	str	r2, [sp, #20]
 8006b68:	f001 f980 	bl	8007e6c <__i2b>
 8006b6c:	4607      	mov	r7, r0
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	dd0c      	ble.n	8006b8c <_dtoa_r+0x754>
 8006b72:	9b05      	ldr	r3, [sp, #20]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd09      	ble.n	8006b8c <_dtoa_r+0x754>
 8006b78:	42ab      	cmp	r3, r5
 8006b7a:	9a04      	ldr	r2, [sp, #16]
 8006b7c:	bfa8      	it	ge
 8006b7e:	462b      	movge	r3, r5
 8006b80:	1ad2      	subs	r2, r2, r3
 8006b82:	9204      	str	r2, [sp, #16]
 8006b84:	9a05      	ldr	r2, [sp, #20]
 8006b86:	1aed      	subs	r5, r5, r3
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	9305      	str	r3, [sp, #20]
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	b31b      	cbz	r3, 8006bd8 <_dtoa_r+0x7a0>
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80af 	beq.w	8006cf6 <_dtoa_r+0x8be>
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	dd13      	ble.n	8006bc4 <_dtoa_r+0x78c>
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	4620      	mov	r0, r4
 8006ba2:	f001 fa23 	bl	8007fec <__pow5mult>
 8006ba6:	ee18 2a10 	vmov	r2, s16
 8006baa:	4601      	mov	r1, r0
 8006bac:	4607      	mov	r7, r0
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f001 f972 	bl	8007e98 <__multiply>
 8006bb4:	ee18 1a10 	vmov	r1, s16
 8006bb8:	4680      	mov	r8, r0
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f001 f854 	bl	8007c68 <_Bfree>
 8006bc0:	ee08 8a10 	vmov	s16, r8
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	1b9a      	subs	r2, r3, r6
 8006bc8:	d006      	beq.n	8006bd8 <_dtoa_r+0x7a0>
 8006bca:	ee18 1a10 	vmov	r1, s16
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f001 fa0c 	bl	8007fec <__pow5mult>
 8006bd4:	ee08 0a10 	vmov	s16, r0
 8006bd8:	2101      	movs	r1, #1
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f001 f946 	bl	8007e6c <__i2b>
 8006be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	4606      	mov	r6, r0
 8006be6:	f340 8088 	ble.w	8006cfa <_dtoa_r+0x8c2>
 8006bea:	461a      	mov	r2, r3
 8006bec:	4601      	mov	r1, r0
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f001 f9fc 	bl	8007fec <__pow5mult>
 8006bf4:	9b06      	ldr	r3, [sp, #24]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	4606      	mov	r6, r0
 8006bfa:	f340 8081 	ble.w	8006d00 <_dtoa_r+0x8c8>
 8006bfe:	f04f 0800 	mov.w	r8, #0
 8006c02:	6933      	ldr	r3, [r6, #16]
 8006c04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c08:	6918      	ldr	r0, [r3, #16]
 8006c0a:	f001 f8df 	bl	8007dcc <__hi0bits>
 8006c0e:	f1c0 0020 	rsb	r0, r0, #32
 8006c12:	9b05      	ldr	r3, [sp, #20]
 8006c14:	4418      	add	r0, r3
 8006c16:	f010 001f 	ands.w	r0, r0, #31
 8006c1a:	f000 8092 	beq.w	8006d42 <_dtoa_r+0x90a>
 8006c1e:	f1c0 0320 	rsb	r3, r0, #32
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	f340 808a 	ble.w	8006d3c <_dtoa_r+0x904>
 8006c28:	f1c0 001c 	rsb	r0, r0, #28
 8006c2c:	9b04      	ldr	r3, [sp, #16]
 8006c2e:	4403      	add	r3, r0
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	9b05      	ldr	r3, [sp, #20]
 8006c34:	4403      	add	r3, r0
 8006c36:	4405      	add	r5, r0
 8006c38:	9305      	str	r3, [sp, #20]
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dd07      	ble.n	8006c50 <_dtoa_r+0x818>
 8006c40:	ee18 1a10 	vmov	r1, s16
 8006c44:	461a      	mov	r2, r3
 8006c46:	4620      	mov	r0, r4
 8006c48:	f001 fa2a 	bl	80080a0 <__lshift>
 8006c4c:	ee08 0a10 	vmov	s16, r0
 8006c50:	9b05      	ldr	r3, [sp, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	dd05      	ble.n	8006c62 <_dtoa_r+0x82a>
 8006c56:	4631      	mov	r1, r6
 8006c58:	461a      	mov	r2, r3
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f001 fa20 	bl	80080a0 <__lshift>
 8006c60:	4606      	mov	r6, r0
 8006c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d06e      	beq.n	8006d46 <_dtoa_r+0x90e>
 8006c68:	ee18 0a10 	vmov	r0, s16
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	f001 fa87 	bl	8008180 <__mcmp>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	da67      	bge.n	8006d46 <_dtoa_r+0x90e>
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	ee18 1a10 	vmov	r1, s16
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	220a      	movs	r2, #10
 8006c82:	2300      	movs	r3, #0
 8006c84:	4620      	mov	r0, r4
 8006c86:	f001 f811 	bl	8007cac <__multadd>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	ee08 0a10 	vmov	s16, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 81b1 	beq.w	8006ff8 <_dtoa_r+0xbc0>
 8006c96:	2300      	movs	r3, #0
 8006c98:	4639      	mov	r1, r7
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f001 f805 	bl	8007cac <__multadd>
 8006ca2:	9b02      	ldr	r3, [sp, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	f300 808e 	bgt.w	8006dc8 <_dtoa_r+0x990>
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	dc51      	bgt.n	8006d56 <_dtoa_r+0x91e>
 8006cb2:	e089      	b.n	8006dc8 <_dtoa_r+0x990>
 8006cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cba:	e74b      	b.n	8006b54 <_dtoa_r+0x71c>
 8006cbc:	9b03      	ldr	r3, [sp, #12]
 8006cbe:	1e5e      	subs	r6, r3, #1
 8006cc0:	9b07      	ldr	r3, [sp, #28]
 8006cc2:	42b3      	cmp	r3, r6
 8006cc4:	bfbf      	itttt	lt
 8006cc6:	9b07      	ldrlt	r3, [sp, #28]
 8006cc8:	9607      	strlt	r6, [sp, #28]
 8006cca:	1af2      	sublt	r2, r6, r3
 8006ccc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006cce:	bfb6      	itet	lt
 8006cd0:	189b      	addlt	r3, r3, r2
 8006cd2:	1b9e      	subge	r6, r3, r6
 8006cd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	bfb8      	it	lt
 8006cda:	2600      	movlt	r6, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfb7      	itett	lt
 8006ce0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ce4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ce8:	1a9d      	sublt	r5, r3, r2
 8006cea:	2300      	movlt	r3, #0
 8006cec:	e734      	b.n	8006b58 <_dtoa_r+0x720>
 8006cee:	9e07      	ldr	r6, [sp, #28]
 8006cf0:	9d04      	ldr	r5, [sp, #16]
 8006cf2:	9f08      	ldr	r7, [sp, #32]
 8006cf4:	e73b      	b.n	8006b6e <_dtoa_r+0x736>
 8006cf6:	9a07      	ldr	r2, [sp, #28]
 8006cf8:	e767      	b.n	8006bca <_dtoa_r+0x792>
 8006cfa:	9b06      	ldr	r3, [sp, #24]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	dc18      	bgt.n	8006d32 <_dtoa_r+0x8fa>
 8006d00:	f1ba 0f00 	cmp.w	sl, #0
 8006d04:	d115      	bne.n	8006d32 <_dtoa_r+0x8fa>
 8006d06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d0a:	b993      	cbnz	r3, 8006d32 <_dtoa_r+0x8fa>
 8006d0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d10:	0d1b      	lsrs	r3, r3, #20
 8006d12:	051b      	lsls	r3, r3, #20
 8006d14:	b183      	cbz	r3, 8006d38 <_dtoa_r+0x900>
 8006d16:	9b04      	ldr	r3, [sp, #16]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	9b05      	ldr	r3, [sp, #20]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	f04f 0801 	mov.w	r8, #1
 8006d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f47f af6a 	bne.w	8006c02 <_dtoa_r+0x7ca>
 8006d2e:	2001      	movs	r0, #1
 8006d30:	e76f      	b.n	8006c12 <_dtoa_r+0x7da>
 8006d32:	f04f 0800 	mov.w	r8, #0
 8006d36:	e7f6      	b.n	8006d26 <_dtoa_r+0x8ee>
 8006d38:	4698      	mov	r8, r3
 8006d3a:	e7f4      	b.n	8006d26 <_dtoa_r+0x8ee>
 8006d3c:	f43f af7d 	beq.w	8006c3a <_dtoa_r+0x802>
 8006d40:	4618      	mov	r0, r3
 8006d42:	301c      	adds	r0, #28
 8006d44:	e772      	b.n	8006c2c <_dtoa_r+0x7f4>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dc37      	bgt.n	8006dbc <_dtoa_r+0x984>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	dd34      	ble.n	8006dbc <_dtoa_r+0x984>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	9302      	str	r3, [sp, #8]
 8006d56:	9b02      	ldr	r3, [sp, #8]
 8006d58:	b96b      	cbnz	r3, 8006d76 <_dtoa_r+0x93e>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 ffa4 	bl	8007cac <__multadd>
 8006d64:	4601      	mov	r1, r0
 8006d66:	4606      	mov	r6, r0
 8006d68:	ee18 0a10 	vmov	r0, s16
 8006d6c:	f001 fa08 	bl	8008180 <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	f73f adbb 	bgt.w	80068ec <_dtoa_r+0x4b4>
 8006d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d78:	9d01      	ldr	r5, [sp, #4]
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	f04f 0800 	mov.w	r8, #0
 8006d82:	4631      	mov	r1, r6
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 ff6f 	bl	8007c68 <_Bfree>
 8006d8a:	2f00      	cmp	r7, #0
 8006d8c:	f43f aea4 	beq.w	8006ad8 <_dtoa_r+0x6a0>
 8006d90:	f1b8 0f00 	cmp.w	r8, #0
 8006d94:	d005      	beq.n	8006da2 <_dtoa_r+0x96a>
 8006d96:	45b8      	cmp	r8, r7
 8006d98:	d003      	beq.n	8006da2 <_dtoa_r+0x96a>
 8006d9a:	4641      	mov	r1, r8
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	f000 ff63 	bl	8007c68 <_Bfree>
 8006da2:	4639      	mov	r1, r7
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 ff5f 	bl	8007c68 <_Bfree>
 8006daa:	e695      	b.n	8006ad8 <_dtoa_r+0x6a0>
 8006dac:	2600      	movs	r6, #0
 8006dae:	4637      	mov	r7, r6
 8006db0:	e7e1      	b.n	8006d76 <_dtoa_r+0x93e>
 8006db2:	9700      	str	r7, [sp, #0]
 8006db4:	4637      	mov	r7, r6
 8006db6:	e599      	b.n	80068ec <_dtoa_r+0x4b4>
 8006db8:	40240000 	.word	0x40240000
 8006dbc:	9b08      	ldr	r3, [sp, #32]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80ca 	beq.w	8006f58 <_dtoa_r+0xb20>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	dd05      	ble.n	8006dd8 <_dtoa_r+0x9a0>
 8006dcc:	4639      	mov	r1, r7
 8006dce:	462a      	mov	r2, r5
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f001 f965 	bl	80080a0 <__lshift>
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	f1b8 0f00 	cmp.w	r8, #0
 8006ddc:	d05b      	beq.n	8006e96 <_dtoa_r+0xa5e>
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 ff01 	bl	8007be8 <_Balloc>
 8006de6:	4605      	mov	r5, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <_dtoa_r+0x9be>
 8006dea:	4b87      	ldr	r3, [pc, #540]	; (8007008 <_dtoa_r+0xbd0>)
 8006dec:	4602      	mov	r2, r0
 8006dee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006df2:	f7ff bb3b 	b.w	800646c <_dtoa_r+0x34>
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	3202      	adds	r2, #2
 8006dfa:	0092      	lsls	r2, r2, #2
 8006dfc:	f107 010c 	add.w	r1, r7, #12
 8006e00:	300c      	adds	r0, #12
 8006e02:	f000 fee3 	bl	8007bcc <memcpy>
 8006e06:	2201      	movs	r2, #1
 8006e08:	4629      	mov	r1, r5
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f001 f948 	bl	80080a0 <__lshift>
 8006e10:	9b01      	ldr	r3, [sp, #4]
 8006e12:	f103 0901 	add.w	r9, r3, #1
 8006e16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	9305      	str	r3, [sp, #20]
 8006e1e:	f00a 0301 	and.w	r3, sl, #1
 8006e22:	46b8      	mov	r8, r7
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	4607      	mov	r7, r0
 8006e28:	4631      	mov	r1, r6
 8006e2a:	ee18 0a10 	vmov	r0, s16
 8006e2e:	f7ff fa77 	bl	8006320 <quorem>
 8006e32:	4641      	mov	r1, r8
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006e3a:	ee18 0a10 	vmov	r0, s16
 8006e3e:	f001 f99f 	bl	8008180 <__mcmp>
 8006e42:	463a      	mov	r2, r7
 8006e44:	9003      	str	r0, [sp, #12]
 8006e46:	4631      	mov	r1, r6
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f001 f9b5 	bl	80081b8 <__mdiff>
 8006e4e:	68c2      	ldr	r2, [r0, #12]
 8006e50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006e54:	4605      	mov	r5, r0
 8006e56:	bb02      	cbnz	r2, 8006e9a <_dtoa_r+0xa62>
 8006e58:	4601      	mov	r1, r0
 8006e5a:	ee18 0a10 	vmov	r0, s16
 8006e5e:	f001 f98f 	bl	8008180 <__mcmp>
 8006e62:	4602      	mov	r2, r0
 8006e64:	4629      	mov	r1, r5
 8006e66:	4620      	mov	r0, r4
 8006e68:	9207      	str	r2, [sp, #28]
 8006e6a:	f000 fefd 	bl	8007c68 <_Bfree>
 8006e6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e72:	ea43 0102 	orr.w	r1, r3, r2
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	464d      	mov	r5, r9
 8006e7c:	d10f      	bne.n	8006e9e <_dtoa_r+0xa66>
 8006e7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e82:	d02a      	beq.n	8006eda <_dtoa_r+0xaa2>
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dd02      	ble.n	8006e90 <_dtoa_r+0xa58>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e90:	f88b a000 	strb.w	sl, [fp]
 8006e94:	e775      	b.n	8006d82 <_dtoa_r+0x94a>
 8006e96:	4638      	mov	r0, r7
 8006e98:	e7ba      	b.n	8006e10 <_dtoa_r+0x9d8>
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	e7e2      	b.n	8006e64 <_dtoa_r+0xa2c>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	db04      	blt.n	8006eae <_dtoa_r+0xa76>
 8006ea4:	9906      	ldr	r1, [sp, #24]
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	9904      	ldr	r1, [sp, #16]
 8006eaa:	430b      	orrs	r3, r1
 8006eac:	d122      	bne.n	8006ef4 <_dtoa_r+0xabc>
 8006eae:	2a00      	cmp	r2, #0
 8006eb0:	ddee      	ble.n	8006e90 <_dtoa_r+0xa58>
 8006eb2:	ee18 1a10 	vmov	r1, s16
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 f8f1 	bl	80080a0 <__lshift>
 8006ebe:	4631      	mov	r1, r6
 8006ec0:	ee08 0a10 	vmov	s16, r0
 8006ec4:	f001 f95c 	bl	8008180 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	dc03      	bgt.n	8006ed4 <_dtoa_r+0xa9c>
 8006ecc:	d1e0      	bne.n	8006e90 <_dtoa_r+0xa58>
 8006ece:	f01a 0f01 	tst.w	sl, #1
 8006ed2:	d0dd      	beq.n	8006e90 <_dtoa_r+0xa58>
 8006ed4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006ed8:	d1d7      	bne.n	8006e8a <_dtoa_r+0xa52>
 8006eda:	2339      	movs	r3, #57	; 0x39
 8006edc:	f88b 3000 	strb.w	r3, [fp]
 8006ee0:	462b      	mov	r3, r5
 8006ee2:	461d      	mov	r5, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006eea:	2a39      	cmp	r2, #57	; 0x39
 8006eec:	d071      	beq.n	8006fd2 <_dtoa_r+0xb9a>
 8006eee:	3201      	adds	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e746      	b.n	8006d82 <_dtoa_r+0x94a>
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	dd07      	ble.n	8006f08 <_dtoa_r+0xad0>
 8006ef8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006efc:	d0ed      	beq.n	8006eda <_dtoa_r+0xaa2>
 8006efe:	f10a 0301 	add.w	r3, sl, #1
 8006f02:	f88b 3000 	strb.w	r3, [fp]
 8006f06:	e73c      	b.n	8006d82 <_dtoa_r+0x94a>
 8006f08:	9b05      	ldr	r3, [sp, #20]
 8006f0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006f0e:	4599      	cmp	r9, r3
 8006f10:	d047      	beq.n	8006fa2 <_dtoa_r+0xb6a>
 8006f12:	ee18 1a10 	vmov	r1, s16
 8006f16:	2300      	movs	r3, #0
 8006f18:	220a      	movs	r2, #10
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 fec6 	bl	8007cac <__multadd>
 8006f20:	45b8      	cmp	r8, r7
 8006f22:	ee08 0a10 	vmov	s16, r0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	f04f 020a 	mov.w	r2, #10
 8006f2e:	4641      	mov	r1, r8
 8006f30:	4620      	mov	r0, r4
 8006f32:	d106      	bne.n	8006f42 <_dtoa_r+0xb0a>
 8006f34:	f000 feba 	bl	8007cac <__multadd>
 8006f38:	4680      	mov	r8, r0
 8006f3a:	4607      	mov	r7, r0
 8006f3c:	f109 0901 	add.w	r9, r9, #1
 8006f40:	e772      	b.n	8006e28 <_dtoa_r+0x9f0>
 8006f42:	f000 feb3 	bl	8007cac <__multadd>
 8006f46:	4639      	mov	r1, r7
 8006f48:	4680      	mov	r8, r0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 feac 	bl	8007cac <__multadd>
 8006f54:	4607      	mov	r7, r0
 8006f56:	e7f1      	b.n	8006f3c <_dtoa_r+0xb04>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	9302      	str	r3, [sp, #8]
 8006f5c:	9d01      	ldr	r5, [sp, #4]
 8006f5e:	ee18 0a10 	vmov	r0, s16
 8006f62:	4631      	mov	r1, r6
 8006f64:	f7ff f9dc 	bl	8006320 <quorem>
 8006f68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	f805 ab01 	strb.w	sl, [r5], #1
 8006f72:	1aea      	subs	r2, r5, r3
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	dd09      	ble.n	8006f8e <_dtoa_r+0xb56>
 8006f7a:	ee18 1a10 	vmov	r1, s16
 8006f7e:	2300      	movs	r3, #0
 8006f80:	220a      	movs	r2, #10
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 fe92 	bl	8007cac <__multadd>
 8006f88:	ee08 0a10 	vmov	s16, r0
 8006f8c:	e7e7      	b.n	8006f5e <_dtoa_r+0xb26>
 8006f8e:	9b02      	ldr	r3, [sp, #8]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	bfc8      	it	gt
 8006f94:	461d      	movgt	r5, r3
 8006f96:	9b01      	ldr	r3, [sp, #4]
 8006f98:	bfd8      	it	le
 8006f9a:	2501      	movle	r5, #1
 8006f9c:	441d      	add	r5, r3
 8006f9e:	f04f 0800 	mov.w	r8, #0
 8006fa2:	ee18 1a10 	vmov	r1, s16
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	4620      	mov	r0, r4
 8006faa:	f001 f879 	bl	80080a0 <__lshift>
 8006fae:	4631      	mov	r1, r6
 8006fb0:	ee08 0a10 	vmov	s16, r0
 8006fb4:	f001 f8e4 	bl	8008180 <__mcmp>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	dc91      	bgt.n	8006ee0 <_dtoa_r+0xaa8>
 8006fbc:	d102      	bne.n	8006fc4 <_dtoa_r+0xb8c>
 8006fbe:	f01a 0f01 	tst.w	sl, #1
 8006fc2:	d18d      	bne.n	8006ee0 <_dtoa_r+0xaa8>
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fcc:	2a30      	cmp	r2, #48	; 0x30
 8006fce:	d0fa      	beq.n	8006fc6 <_dtoa_r+0xb8e>
 8006fd0:	e6d7      	b.n	8006d82 <_dtoa_r+0x94a>
 8006fd2:	9a01      	ldr	r2, [sp, #4]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d184      	bne.n	8006ee2 <_dtoa_r+0xaaa>
 8006fd8:	9b00      	ldr	r3, [sp, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	2331      	movs	r3, #49	; 0x31
 8006fe0:	7013      	strb	r3, [r2, #0]
 8006fe2:	e6ce      	b.n	8006d82 <_dtoa_r+0x94a>
 8006fe4:	4b09      	ldr	r3, [pc, #36]	; (800700c <_dtoa_r+0xbd4>)
 8006fe6:	f7ff ba95 	b.w	8006514 <_dtoa_r+0xdc>
 8006fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f aa6e 	bne.w	80064ce <_dtoa_r+0x96>
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <_dtoa_r+0xbd8>)
 8006ff4:	f7ff ba8e 	b.w	8006514 <_dtoa_r+0xdc>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	dcae      	bgt.n	8006f5c <_dtoa_r+0xb24>
 8006ffe:	9b06      	ldr	r3, [sp, #24]
 8007000:	2b02      	cmp	r3, #2
 8007002:	f73f aea8 	bgt.w	8006d56 <_dtoa_r+0x91e>
 8007006:	e7a9      	b.n	8006f5c <_dtoa_r+0xb24>
 8007008:	08009fc8 	.word	0x08009fc8
 800700c:	0800a229 	.word	0x0800a229
 8007010:	08009f49 	.word	0x08009f49

08007014 <__sflush_r>:
 8007014:	898a      	ldrh	r2, [r1, #12]
 8007016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800701a:	4605      	mov	r5, r0
 800701c:	0710      	lsls	r0, r2, #28
 800701e:	460c      	mov	r4, r1
 8007020:	d458      	bmi.n	80070d4 <__sflush_r+0xc0>
 8007022:	684b      	ldr	r3, [r1, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	dc05      	bgt.n	8007034 <__sflush_r+0x20>
 8007028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	dc02      	bgt.n	8007034 <__sflush_r+0x20>
 800702e:	2000      	movs	r0, #0
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007036:	2e00      	cmp	r6, #0
 8007038:	d0f9      	beq.n	800702e <__sflush_r+0x1a>
 800703a:	2300      	movs	r3, #0
 800703c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007040:	682f      	ldr	r7, [r5, #0]
 8007042:	602b      	str	r3, [r5, #0]
 8007044:	d032      	beq.n	80070ac <__sflush_r+0x98>
 8007046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	075a      	lsls	r2, r3, #29
 800704c:	d505      	bpl.n	800705a <__sflush_r+0x46>
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	1ac0      	subs	r0, r0, r3
 8007052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007054:	b10b      	cbz	r3, 800705a <__sflush_r+0x46>
 8007056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007058:	1ac0      	subs	r0, r0, r3
 800705a:	2300      	movs	r3, #0
 800705c:	4602      	mov	r2, r0
 800705e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	4628      	mov	r0, r5
 8007064:	47b0      	blx	r6
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	d106      	bne.n	800707a <__sflush_r+0x66>
 800706c:	6829      	ldr	r1, [r5, #0]
 800706e:	291d      	cmp	r1, #29
 8007070:	d82c      	bhi.n	80070cc <__sflush_r+0xb8>
 8007072:	4a2a      	ldr	r2, [pc, #168]	; (800711c <__sflush_r+0x108>)
 8007074:	40ca      	lsrs	r2, r1
 8007076:	07d6      	lsls	r6, r2, #31
 8007078:	d528      	bpl.n	80070cc <__sflush_r+0xb8>
 800707a:	2200      	movs	r2, #0
 800707c:	6062      	str	r2, [r4, #4]
 800707e:	04d9      	lsls	r1, r3, #19
 8007080:	6922      	ldr	r2, [r4, #16]
 8007082:	6022      	str	r2, [r4, #0]
 8007084:	d504      	bpl.n	8007090 <__sflush_r+0x7c>
 8007086:	1c42      	adds	r2, r0, #1
 8007088:	d101      	bne.n	800708e <__sflush_r+0x7a>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b903      	cbnz	r3, 8007090 <__sflush_r+0x7c>
 800708e:	6560      	str	r0, [r4, #84]	; 0x54
 8007090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007092:	602f      	str	r7, [r5, #0]
 8007094:	2900      	cmp	r1, #0
 8007096:	d0ca      	beq.n	800702e <__sflush_r+0x1a>
 8007098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800709c:	4299      	cmp	r1, r3
 800709e:	d002      	beq.n	80070a6 <__sflush_r+0x92>
 80070a0:	4628      	mov	r0, r5
 80070a2:	f001 fa79 	bl	8008598 <_free_r>
 80070a6:	2000      	movs	r0, #0
 80070a8:	6360      	str	r0, [r4, #52]	; 0x34
 80070aa:	e7c1      	b.n	8007030 <__sflush_r+0x1c>
 80070ac:	6a21      	ldr	r1, [r4, #32]
 80070ae:	2301      	movs	r3, #1
 80070b0:	4628      	mov	r0, r5
 80070b2:	47b0      	blx	r6
 80070b4:	1c41      	adds	r1, r0, #1
 80070b6:	d1c7      	bne.n	8007048 <__sflush_r+0x34>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0c4      	beq.n	8007048 <__sflush_r+0x34>
 80070be:	2b1d      	cmp	r3, #29
 80070c0:	d001      	beq.n	80070c6 <__sflush_r+0xb2>
 80070c2:	2b16      	cmp	r3, #22
 80070c4:	d101      	bne.n	80070ca <__sflush_r+0xb6>
 80070c6:	602f      	str	r7, [r5, #0]
 80070c8:	e7b1      	b.n	800702e <__sflush_r+0x1a>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	e7ad      	b.n	8007030 <__sflush_r+0x1c>
 80070d4:	690f      	ldr	r7, [r1, #16]
 80070d6:	2f00      	cmp	r7, #0
 80070d8:	d0a9      	beq.n	800702e <__sflush_r+0x1a>
 80070da:	0793      	lsls	r3, r2, #30
 80070dc:	680e      	ldr	r6, [r1, #0]
 80070de:	bf08      	it	eq
 80070e0:	694b      	ldreq	r3, [r1, #20]
 80070e2:	600f      	str	r7, [r1, #0]
 80070e4:	bf18      	it	ne
 80070e6:	2300      	movne	r3, #0
 80070e8:	eba6 0807 	sub.w	r8, r6, r7
 80070ec:	608b      	str	r3, [r1, #8]
 80070ee:	f1b8 0f00 	cmp.w	r8, #0
 80070f2:	dd9c      	ble.n	800702e <__sflush_r+0x1a>
 80070f4:	6a21      	ldr	r1, [r4, #32]
 80070f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070f8:	4643      	mov	r3, r8
 80070fa:	463a      	mov	r2, r7
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b0      	blx	r6
 8007100:	2800      	cmp	r0, #0
 8007102:	dc06      	bgt.n	8007112 <__sflush_r+0xfe>
 8007104:	89a3      	ldrh	r3, [r4, #12]
 8007106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710a:	81a3      	strh	r3, [r4, #12]
 800710c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007110:	e78e      	b.n	8007030 <__sflush_r+0x1c>
 8007112:	4407      	add	r7, r0
 8007114:	eba8 0800 	sub.w	r8, r8, r0
 8007118:	e7e9      	b.n	80070ee <__sflush_r+0xda>
 800711a:	bf00      	nop
 800711c:	20400001 	.word	0x20400001

08007120 <_fflush_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
 8007128:	b913      	cbnz	r3, 8007130 <_fflush_r+0x10>
 800712a:	2500      	movs	r5, #0
 800712c:	4628      	mov	r0, r5
 800712e:	bd38      	pop	{r3, r4, r5, pc}
 8007130:	b118      	cbz	r0, 800713a <_fflush_r+0x1a>
 8007132:	6983      	ldr	r3, [r0, #24]
 8007134:	b90b      	cbnz	r3, 800713a <_fflush_r+0x1a>
 8007136:	f000 f899 	bl	800726c <__sinit>
 800713a:	4b14      	ldr	r3, [pc, #80]	; (800718c <_fflush_r+0x6c>)
 800713c:	429c      	cmp	r4, r3
 800713e:	d11b      	bne.n	8007178 <_fflush_r+0x58>
 8007140:	686c      	ldr	r4, [r5, #4]
 8007142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0ef      	beq.n	800712a <_fflush_r+0xa>
 800714a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800714c:	07d0      	lsls	r0, r2, #31
 800714e:	d404      	bmi.n	800715a <_fflush_r+0x3a>
 8007150:	0599      	lsls	r1, r3, #22
 8007152:	d402      	bmi.n	800715a <_fflush_r+0x3a>
 8007154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007156:	f000 fcb8 	bl	8007aca <__retarget_lock_acquire_recursive>
 800715a:	4628      	mov	r0, r5
 800715c:	4621      	mov	r1, r4
 800715e:	f7ff ff59 	bl	8007014 <__sflush_r>
 8007162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007164:	07da      	lsls	r2, r3, #31
 8007166:	4605      	mov	r5, r0
 8007168:	d4e0      	bmi.n	800712c <_fflush_r+0xc>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	059b      	lsls	r3, r3, #22
 800716e:	d4dd      	bmi.n	800712c <_fflush_r+0xc>
 8007170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007172:	f000 fcab 	bl	8007acc <__retarget_lock_release_recursive>
 8007176:	e7d9      	b.n	800712c <_fflush_r+0xc>
 8007178:	4b05      	ldr	r3, [pc, #20]	; (8007190 <_fflush_r+0x70>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d101      	bne.n	8007182 <_fflush_r+0x62>
 800717e:	68ac      	ldr	r4, [r5, #8]
 8007180:	e7df      	b.n	8007142 <_fflush_r+0x22>
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <_fflush_r+0x74>)
 8007184:	429c      	cmp	r4, r3
 8007186:	bf08      	it	eq
 8007188:	68ec      	ldreq	r4, [r5, #12]
 800718a:	e7da      	b.n	8007142 <_fflush_r+0x22>
 800718c:	08009ffc 	.word	0x08009ffc
 8007190:	0800a01c 	.word	0x0800a01c
 8007194:	08009fdc 	.word	0x08009fdc

08007198 <fflush>:
 8007198:	4601      	mov	r1, r0
 800719a:	b920      	cbnz	r0, 80071a6 <fflush+0xe>
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <fflush+0x18>)
 800719e:	4905      	ldr	r1, [pc, #20]	; (80071b4 <fflush+0x1c>)
 80071a0:	6818      	ldr	r0, [r3, #0]
 80071a2:	f000 b8fe 	b.w	80073a2 <_fwalk_reent>
 80071a6:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <fflush+0x20>)
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	f7ff bfb9 	b.w	8007120 <_fflush_r>
 80071ae:	bf00      	nop
 80071b0:	08009dbc 	.word	0x08009dbc
 80071b4:	08007121 	.word	0x08007121
 80071b8:	2000000c 	.word	0x2000000c

080071bc <std>:
 80071bc:	2300      	movs	r3, #0
 80071be:	b510      	push	{r4, lr}
 80071c0:	4604      	mov	r4, r0
 80071c2:	e9c0 3300 	strd	r3, r3, [r0]
 80071c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ca:	6083      	str	r3, [r0, #8]
 80071cc:	8181      	strh	r1, [r0, #12]
 80071ce:	6643      	str	r3, [r0, #100]	; 0x64
 80071d0:	81c2      	strh	r2, [r0, #14]
 80071d2:	6183      	str	r3, [r0, #24]
 80071d4:	4619      	mov	r1, r3
 80071d6:	2208      	movs	r2, #8
 80071d8:	305c      	adds	r0, #92	; 0x5c
 80071da:	f7fd fa3f 	bl	800465c <memset>
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <std+0x38>)
 80071e0:	6263      	str	r3, [r4, #36]	; 0x24
 80071e2:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <std+0x3c>)
 80071e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80071e6:	4b05      	ldr	r3, [pc, #20]	; (80071fc <std+0x40>)
 80071e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <std+0x44>)
 80071ec:	6224      	str	r4, [r4, #32]
 80071ee:	6323      	str	r3, [r4, #48]	; 0x30
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	08009561 	.word	0x08009561
 80071f8:	08009583 	.word	0x08009583
 80071fc:	080095bb 	.word	0x080095bb
 8007200:	080095df 	.word	0x080095df

08007204 <_cleanup_r>:
 8007204:	4901      	ldr	r1, [pc, #4]	; (800720c <_cleanup_r+0x8>)
 8007206:	f000 b8cc 	b.w	80073a2 <_fwalk_reent>
 800720a:	bf00      	nop
 800720c:	08007121 	.word	0x08007121

08007210 <__sfmoreglue>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	2268      	movs	r2, #104	; 0x68
 8007214:	1e4d      	subs	r5, r1, #1
 8007216:	4355      	muls	r5, r2
 8007218:	460e      	mov	r6, r1
 800721a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800721e:	f001 fa27 	bl	8008670 <_malloc_r>
 8007222:	4604      	mov	r4, r0
 8007224:	b140      	cbz	r0, 8007238 <__sfmoreglue+0x28>
 8007226:	2100      	movs	r1, #0
 8007228:	e9c0 1600 	strd	r1, r6, [r0]
 800722c:	300c      	adds	r0, #12
 800722e:	60a0      	str	r0, [r4, #8]
 8007230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007234:	f7fd fa12 	bl	800465c <memset>
 8007238:	4620      	mov	r0, r4
 800723a:	bd70      	pop	{r4, r5, r6, pc}

0800723c <__sfp_lock_acquire>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__sfp_lock_acquire+0x8>)
 800723e:	f000 bc44 	b.w	8007aca <__retarget_lock_acquire_recursive>
 8007242:	bf00      	nop
 8007244:	200002a1 	.word	0x200002a1

08007248 <__sfp_lock_release>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__sfp_lock_release+0x8>)
 800724a:	f000 bc3f 	b.w	8007acc <__retarget_lock_release_recursive>
 800724e:	bf00      	nop
 8007250:	200002a1 	.word	0x200002a1

08007254 <__sinit_lock_acquire>:
 8007254:	4801      	ldr	r0, [pc, #4]	; (800725c <__sinit_lock_acquire+0x8>)
 8007256:	f000 bc38 	b.w	8007aca <__retarget_lock_acquire_recursive>
 800725a:	bf00      	nop
 800725c:	200002a2 	.word	0x200002a2

08007260 <__sinit_lock_release>:
 8007260:	4801      	ldr	r0, [pc, #4]	; (8007268 <__sinit_lock_release+0x8>)
 8007262:	f000 bc33 	b.w	8007acc <__retarget_lock_release_recursive>
 8007266:	bf00      	nop
 8007268:	200002a2 	.word	0x200002a2

0800726c <__sinit>:
 800726c:	b510      	push	{r4, lr}
 800726e:	4604      	mov	r4, r0
 8007270:	f7ff fff0 	bl	8007254 <__sinit_lock_acquire>
 8007274:	69a3      	ldr	r3, [r4, #24]
 8007276:	b11b      	cbz	r3, 8007280 <__sinit+0x14>
 8007278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800727c:	f7ff bff0 	b.w	8007260 <__sinit_lock_release>
 8007280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007284:	6523      	str	r3, [r4, #80]	; 0x50
 8007286:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <__sinit+0x68>)
 8007288:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <__sinit+0x6c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	62a2      	str	r2, [r4, #40]	; 0x28
 800728e:	42a3      	cmp	r3, r4
 8007290:	bf04      	itt	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	61a3      	streq	r3, [r4, #24]
 8007296:	4620      	mov	r0, r4
 8007298:	f000 f820 	bl	80072dc <__sfp>
 800729c:	6060      	str	r0, [r4, #4]
 800729e:	4620      	mov	r0, r4
 80072a0:	f000 f81c 	bl	80072dc <__sfp>
 80072a4:	60a0      	str	r0, [r4, #8]
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 f818 	bl	80072dc <__sfp>
 80072ac:	2200      	movs	r2, #0
 80072ae:	60e0      	str	r0, [r4, #12]
 80072b0:	2104      	movs	r1, #4
 80072b2:	6860      	ldr	r0, [r4, #4]
 80072b4:	f7ff ff82 	bl	80071bc <std>
 80072b8:	68a0      	ldr	r0, [r4, #8]
 80072ba:	2201      	movs	r2, #1
 80072bc:	2109      	movs	r1, #9
 80072be:	f7ff ff7d 	bl	80071bc <std>
 80072c2:	68e0      	ldr	r0, [r4, #12]
 80072c4:	2202      	movs	r2, #2
 80072c6:	2112      	movs	r1, #18
 80072c8:	f7ff ff78 	bl	80071bc <std>
 80072cc:	2301      	movs	r3, #1
 80072ce:	61a3      	str	r3, [r4, #24]
 80072d0:	e7d2      	b.n	8007278 <__sinit+0xc>
 80072d2:	bf00      	nop
 80072d4:	08009dbc 	.word	0x08009dbc
 80072d8:	08007205 	.word	0x08007205

080072dc <__sfp>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	4607      	mov	r7, r0
 80072e0:	f7ff ffac 	bl	800723c <__sfp_lock_acquire>
 80072e4:	4b1e      	ldr	r3, [pc, #120]	; (8007360 <__sfp+0x84>)
 80072e6:	681e      	ldr	r6, [r3, #0]
 80072e8:	69b3      	ldr	r3, [r6, #24]
 80072ea:	b913      	cbnz	r3, 80072f2 <__sfp+0x16>
 80072ec:	4630      	mov	r0, r6
 80072ee:	f7ff ffbd 	bl	800726c <__sinit>
 80072f2:	3648      	adds	r6, #72	; 0x48
 80072f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	d503      	bpl.n	8007304 <__sfp+0x28>
 80072fc:	6833      	ldr	r3, [r6, #0]
 80072fe:	b30b      	cbz	r3, 8007344 <__sfp+0x68>
 8007300:	6836      	ldr	r6, [r6, #0]
 8007302:	e7f7      	b.n	80072f4 <__sfp+0x18>
 8007304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007308:	b9d5      	cbnz	r5, 8007340 <__sfp+0x64>
 800730a:	4b16      	ldr	r3, [pc, #88]	; (8007364 <__sfp+0x88>)
 800730c:	60e3      	str	r3, [r4, #12]
 800730e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007312:	6665      	str	r5, [r4, #100]	; 0x64
 8007314:	f000 fbd8 	bl	8007ac8 <__retarget_lock_init_recursive>
 8007318:	f7ff ff96 	bl	8007248 <__sfp_lock_release>
 800731c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007324:	6025      	str	r5, [r4, #0]
 8007326:	61a5      	str	r5, [r4, #24]
 8007328:	2208      	movs	r2, #8
 800732a:	4629      	mov	r1, r5
 800732c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007330:	f7fd f994 	bl	800465c <memset>
 8007334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800733c:	4620      	mov	r0, r4
 800733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007340:	3468      	adds	r4, #104	; 0x68
 8007342:	e7d9      	b.n	80072f8 <__sfp+0x1c>
 8007344:	2104      	movs	r1, #4
 8007346:	4638      	mov	r0, r7
 8007348:	f7ff ff62 	bl	8007210 <__sfmoreglue>
 800734c:	4604      	mov	r4, r0
 800734e:	6030      	str	r0, [r6, #0]
 8007350:	2800      	cmp	r0, #0
 8007352:	d1d5      	bne.n	8007300 <__sfp+0x24>
 8007354:	f7ff ff78 	bl	8007248 <__sfp_lock_release>
 8007358:	230c      	movs	r3, #12
 800735a:	603b      	str	r3, [r7, #0]
 800735c:	e7ee      	b.n	800733c <__sfp+0x60>
 800735e:	bf00      	nop
 8007360:	08009dbc 	.word	0x08009dbc
 8007364:	ffff0001 	.word	0xffff0001

08007368 <_fwalk>:
 8007368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736c:	460f      	mov	r7, r1
 800736e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007372:	2600      	movs	r6, #0
 8007374:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8007378:	f1b8 0801 	subs.w	r8, r8, #1
 800737c:	d505      	bpl.n	800738a <_fwalk+0x22>
 800737e:	6824      	ldr	r4, [r4, #0]
 8007380:	2c00      	cmp	r4, #0
 8007382:	d1f7      	bne.n	8007374 <_fwalk+0xc>
 8007384:	4630      	mov	r0, r6
 8007386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d906      	bls.n	800739e <_fwalk+0x36>
 8007390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007394:	3301      	adds	r3, #1
 8007396:	d002      	beq.n	800739e <_fwalk+0x36>
 8007398:	4628      	mov	r0, r5
 800739a:	47b8      	blx	r7
 800739c:	4306      	orrs	r6, r0
 800739e:	3568      	adds	r5, #104	; 0x68
 80073a0:	e7ea      	b.n	8007378 <_fwalk+0x10>

080073a2 <_fwalk_reent>:
 80073a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a6:	4606      	mov	r6, r0
 80073a8:	4688      	mov	r8, r1
 80073aa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073ae:	2700      	movs	r7, #0
 80073b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073b4:	f1b9 0901 	subs.w	r9, r9, #1
 80073b8:	d505      	bpl.n	80073c6 <_fwalk_reent+0x24>
 80073ba:	6824      	ldr	r4, [r4, #0]
 80073bc:	2c00      	cmp	r4, #0
 80073be:	d1f7      	bne.n	80073b0 <_fwalk_reent+0xe>
 80073c0:	4638      	mov	r0, r7
 80073c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d907      	bls.n	80073dc <_fwalk_reent+0x3a>
 80073cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073d0:	3301      	adds	r3, #1
 80073d2:	d003      	beq.n	80073dc <_fwalk_reent+0x3a>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4630      	mov	r0, r6
 80073d8:	47c0      	blx	r8
 80073da:	4307      	orrs	r7, r0
 80073dc:	3568      	adds	r5, #104	; 0x68
 80073de:	e7e9      	b.n	80073b4 <_fwalk_reent+0x12>

080073e0 <rshift>:
 80073e0:	6903      	ldr	r3, [r0, #16]
 80073e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073ee:	f100 0414 	add.w	r4, r0, #20
 80073f2:	dd45      	ble.n	8007480 <rshift+0xa0>
 80073f4:	f011 011f 	ands.w	r1, r1, #31
 80073f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007400:	d10c      	bne.n	800741c <rshift+0x3c>
 8007402:	f100 0710 	add.w	r7, r0, #16
 8007406:	4629      	mov	r1, r5
 8007408:	42b1      	cmp	r1, r6
 800740a:	d334      	bcc.n	8007476 <rshift+0x96>
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	1eea      	subs	r2, r5, #3
 8007412:	4296      	cmp	r6, r2
 8007414:	bf38      	it	cc
 8007416:	2300      	movcc	r3, #0
 8007418:	4423      	add	r3, r4
 800741a:	e015      	b.n	8007448 <rshift+0x68>
 800741c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007420:	f1c1 0820 	rsb	r8, r1, #32
 8007424:	40cf      	lsrs	r7, r1
 8007426:	f105 0e04 	add.w	lr, r5, #4
 800742a:	46a1      	mov	r9, r4
 800742c:	4576      	cmp	r6, lr
 800742e:	46f4      	mov	ip, lr
 8007430:	d815      	bhi.n	800745e <rshift+0x7e>
 8007432:	1a9a      	subs	r2, r3, r2
 8007434:	0092      	lsls	r2, r2, #2
 8007436:	3a04      	subs	r2, #4
 8007438:	3501      	adds	r5, #1
 800743a:	42ae      	cmp	r6, r5
 800743c:	bf38      	it	cc
 800743e:	2200      	movcc	r2, #0
 8007440:	18a3      	adds	r3, r4, r2
 8007442:	50a7      	str	r7, [r4, r2]
 8007444:	b107      	cbz	r7, 8007448 <rshift+0x68>
 8007446:	3304      	adds	r3, #4
 8007448:	1b1a      	subs	r2, r3, r4
 800744a:	42a3      	cmp	r3, r4
 800744c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007450:	bf08      	it	eq
 8007452:	2300      	moveq	r3, #0
 8007454:	6102      	str	r2, [r0, #16]
 8007456:	bf08      	it	eq
 8007458:	6143      	streq	r3, [r0, #20]
 800745a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745e:	f8dc c000 	ldr.w	ip, [ip]
 8007462:	fa0c fc08 	lsl.w	ip, ip, r8
 8007466:	ea4c 0707 	orr.w	r7, ip, r7
 800746a:	f849 7b04 	str.w	r7, [r9], #4
 800746e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007472:	40cf      	lsrs	r7, r1
 8007474:	e7da      	b.n	800742c <rshift+0x4c>
 8007476:	f851 cb04 	ldr.w	ip, [r1], #4
 800747a:	f847 cf04 	str.w	ip, [r7, #4]!
 800747e:	e7c3      	b.n	8007408 <rshift+0x28>
 8007480:	4623      	mov	r3, r4
 8007482:	e7e1      	b.n	8007448 <rshift+0x68>

08007484 <__hexdig_fun>:
 8007484:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007488:	2b09      	cmp	r3, #9
 800748a:	d802      	bhi.n	8007492 <__hexdig_fun+0xe>
 800748c:	3820      	subs	r0, #32
 800748e:	b2c0      	uxtb	r0, r0
 8007490:	4770      	bx	lr
 8007492:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007496:	2b05      	cmp	r3, #5
 8007498:	d801      	bhi.n	800749e <__hexdig_fun+0x1a>
 800749a:	3847      	subs	r0, #71	; 0x47
 800749c:	e7f7      	b.n	800748e <__hexdig_fun+0xa>
 800749e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074a2:	2b05      	cmp	r3, #5
 80074a4:	d801      	bhi.n	80074aa <__hexdig_fun+0x26>
 80074a6:	3827      	subs	r0, #39	; 0x27
 80074a8:	e7f1      	b.n	800748e <__hexdig_fun+0xa>
 80074aa:	2000      	movs	r0, #0
 80074ac:	4770      	bx	lr
	...

080074b0 <__gethex>:
 80074b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	ed2d 8b02 	vpush	{d8}
 80074b8:	b089      	sub	sp, #36	; 0x24
 80074ba:	ee08 0a10 	vmov	s16, r0
 80074be:	9304      	str	r3, [sp, #16]
 80074c0:	4bb4      	ldr	r3, [pc, #720]	; (8007794 <__gethex+0x2e4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	4618      	mov	r0, r3
 80074c8:	468b      	mov	fp, r1
 80074ca:	4690      	mov	r8, r2
 80074cc:	f7f8 fe98 	bl	8000200 <strlen>
 80074d0:	9b01      	ldr	r3, [sp, #4]
 80074d2:	f8db 2000 	ldr.w	r2, [fp]
 80074d6:	4403      	add	r3, r0
 80074d8:	4682      	mov	sl, r0
 80074da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	1c93      	adds	r3, r2, #2
 80074e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80074e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80074ea:	32fe      	adds	r2, #254	; 0xfe
 80074ec:	18d1      	adds	r1, r2, r3
 80074ee:	461f      	mov	r7, r3
 80074f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074f4:	9100      	str	r1, [sp, #0]
 80074f6:	2830      	cmp	r0, #48	; 0x30
 80074f8:	d0f8      	beq.n	80074ec <__gethex+0x3c>
 80074fa:	f7ff ffc3 	bl	8007484 <__hexdig_fun>
 80074fe:	4604      	mov	r4, r0
 8007500:	2800      	cmp	r0, #0
 8007502:	d13a      	bne.n	800757a <__gethex+0xca>
 8007504:	9901      	ldr	r1, [sp, #4]
 8007506:	4652      	mov	r2, sl
 8007508:	4638      	mov	r0, r7
 800750a:	f002 f86c 	bl	80095e6 <strncmp>
 800750e:	4605      	mov	r5, r0
 8007510:	2800      	cmp	r0, #0
 8007512:	d168      	bne.n	80075e6 <__gethex+0x136>
 8007514:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007518:	eb07 060a 	add.w	r6, r7, sl
 800751c:	f7ff ffb2 	bl	8007484 <__hexdig_fun>
 8007520:	2800      	cmp	r0, #0
 8007522:	d062      	beq.n	80075ea <__gethex+0x13a>
 8007524:	4633      	mov	r3, r6
 8007526:	7818      	ldrb	r0, [r3, #0]
 8007528:	2830      	cmp	r0, #48	; 0x30
 800752a:	461f      	mov	r7, r3
 800752c:	f103 0301 	add.w	r3, r3, #1
 8007530:	d0f9      	beq.n	8007526 <__gethex+0x76>
 8007532:	f7ff ffa7 	bl	8007484 <__hexdig_fun>
 8007536:	2301      	movs	r3, #1
 8007538:	fab0 f480 	clz	r4, r0
 800753c:	0964      	lsrs	r4, r4, #5
 800753e:	4635      	mov	r5, r6
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	463a      	mov	r2, r7
 8007544:	4616      	mov	r6, r2
 8007546:	3201      	adds	r2, #1
 8007548:	7830      	ldrb	r0, [r6, #0]
 800754a:	f7ff ff9b 	bl	8007484 <__hexdig_fun>
 800754e:	2800      	cmp	r0, #0
 8007550:	d1f8      	bne.n	8007544 <__gethex+0x94>
 8007552:	9901      	ldr	r1, [sp, #4]
 8007554:	4652      	mov	r2, sl
 8007556:	4630      	mov	r0, r6
 8007558:	f002 f845 	bl	80095e6 <strncmp>
 800755c:	b980      	cbnz	r0, 8007580 <__gethex+0xd0>
 800755e:	b94d      	cbnz	r5, 8007574 <__gethex+0xc4>
 8007560:	eb06 050a 	add.w	r5, r6, sl
 8007564:	462a      	mov	r2, r5
 8007566:	4616      	mov	r6, r2
 8007568:	3201      	adds	r2, #1
 800756a:	7830      	ldrb	r0, [r6, #0]
 800756c:	f7ff ff8a 	bl	8007484 <__hexdig_fun>
 8007570:	2800      	cmp	r0, #0
 8007572:	d1f8      	bne.n	8007566 <__gethex+0xb6>
 8007574:	1bad      	subs	r5, r5, r6
 8007576:	00ad      	lsls	r5, r5, #2
 8007578:	e004      	b.n	8007584 <__gethex+0xd4>
 800757a:	2400      	movs	r4, #0
 800757c:	4625      	mov	r5, r4
 800757e:	e7e0      	b.n	8007542 <__gethex+0x92>
 8007580:	2d00      	cmp	r5, #0
 8007582:	d1f7      	bne.n	8007574 <__gethex+0xc4>
 8007584:	7833      	ldrb	r3, [r6, #0]
 8007586:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800758a:	2b50      	cmp	r3, #80	; 0x50
 800758c:	d13b      	bne.n	8007606 <__gethex+0x156>
 800758e:	7873      	ldrb	r3, [r6, #1]
 8007590:	2b2b      	cmp	r3, #43	; 0x2b
 8007592:	d02c      	beq.n	80075ee <__gethex+0x13e>
 8007594:	2b2d      	cmp	r3, #45	; 0x2d
 8007596:	d02e      	beq.n	80075f6 <__gethex+0x146>
 8007598:	1c71      	adds	r1, r6, #1
 800759a:	f04f 0900 	mov.w	r9, #0
 800759e:	7808      	ldrb	r0, [r1, #0]
 80075a0:	f7ff ff70 	bl	8007484 <__hexdig_fun>
 80075a4:	1e43      	subs	r3, r0, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b18      	cmp	r3, #24
 80075aa:	d82c      	bhi.n	8007606 <__gethex+0x156>
 80075ac:	f1a0 0210 	sub.w	r2, r0, #16
 80075b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075b4:	f7ff ff66 	bl	8007484 <__hexdig_fun>
 80075b8:	1e43      	subs	r3, r0, #1
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b18      	cmp	r3, #24
 80075be:	d91d      	bls.n	80075fc <__gethex+0x14c>
 80075c0:	f1b9 0f00 	cmp.w	r9, #0
 80075c4:	d000      	beq.n	80075c8 <__gethex+0x118>
 80075c6:	4252      	negs	r2, r2
 80075c8:	4415      	add	r5, r2
 80075ca:	f8cb 1000 	str.w	r1, [fp]
 80075ce:	b1e4      	cbz	r4, 800760a <__gethex+0x15a>
 80075d0:	9b00      	ldr	r3, [sp, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	bf14      	ite	ne
 80075d6:	2700      	movne	r7, #0
 80075d8:	2706      	moveq	r7, #6
 80075da:	4638      	mov	r0, r7
 80075dc:	b009      	add	sp, #36	; 0x24
 80075de:	ecbd 8b02 	vpop	{d8}
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	463e      	mov	r6, r7
 80075e8:	4625      	mov	r5, r4
 80075ea:	2401      	movs	r4, #1
 80075ec:	e7ca      	b.n	8007584 <__gethex+0xd4>
 80075ee:	f04f 0900 	mov.w	r9, #0
 80075f2:	1cb1      	adds	r1, r6, #2
 80075f4:	e7d3      	b.n	800759e <__gethex+0xee>
 80075f6:	f04f 0901 	mov.w	r9, #1
 80075fa:	e7fa      	b.n	80075f2 <__gethex+0x142>
 80075fc:	230a      	movs	r3, #10
 80075fe:	fb03 0202 	mla	r2, r3, r2, r0
 8007602:	3a10      	subs	r2, #16
 8007604:	e7d4      	b.n	80075b0 <__gethex+0x100>
 8007606:	4631      	mov	r1, r6
 8007608:	e7df      	b.n	80075ca <__gethex+0x11a>
 800760a:	1bf3      	subs	r3, r6, r7
 800760c:	3b01      	subs	r3, #1
 800760e:	4621      	mov	r1, r4
 8007610:	2b07      	cmp	r3, #7
 8007612:	dc0b      	bgt.n	800762c <__gethex+0x17c>
 8007614:	ee18 0a10 	vmov	r0, s16
 8007618:	f000 fae6 	bl	8007be8 <_Balloc>
 800761c:	4604      	mov	r4, r0
 800761e:	b940      	cbnz	r0, 8007632 <__gethex+0x182>
 8007620:	4b5d      	ldr	r3, [pc, #372]	; (8007798 <__gethex+0x2e8>)
 8007622:	4602      	mov	r2, r0
 8007624:	21de      	movs	r1, #222	; 0xde
 8007626:	485d      	ldr	r0, [pc, #372]	; (800779c <__gethex+0x2ec>)
 8007628:	f002 fa18 	bl	8009a5c <__assert_func>
 800762c:	3101      	adds	r1, #1
 800762e:	105b      	asrs	r3, r3, #1
 8007630:	e7ee      	b.n	8007610 <__gethex+0x160>
 8007632:	f100 0914 	add.w	r9, r0, #20
 8007636:	f04f 0b00 	mov.w	fp, #0
 800763a:	f1ca 0301 	rsb	r3, sl, #1
 800763e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007642:	f8cd b000 	str.w	fp, [sp]
 8007646:	9306      	str	r3, [sp, #24]
 8007648:	42b7      	cmp	r7, r6
 800764a:	d340      	bcc.n	80076ce <__gethex+0x21e>
 800764c:	9802      	ldr	r0, [sp, #8]
 800764e:	9b00      	ldr	r3, [sp, #0]
 8007650:	f840 3b04 	str.w	r3, [r0], #4
 8007654:	eba0 0009 	sub.w	r0, r0, r9
 8007658:	1080      	asrs	r0, r0, #2
 800765a:	0146      	lsls	r6, r0, #5
 800765c:	6120      	str	r0, [r4, #16]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 fbb4 	bl	8007dcc <__hi0bits>
 8007664:	1a30      	subs	r0, r6, r0
 8007666:	f8d8 6000 	ldr.w	r6, [r8]
 800766a:	42b0      	cmp	r0, r6
 800766c:	dd63      	ble.n	8007736 <__gethex+0x286>
 800766e:	1b87      	subs	r7, r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	4620      	mov	r0, r4
 8007674:	f000 ff58 	bl	8008528 <__any_on>
 8007678:	4682      	mov	sl, r0
 800767a:	b1a8      	cbz	r0, 80076a8 <__gethex+0x1f8>
 800767c:	1e7b      	subs	r3, r7, #1
 800767e:	1159      	asrs	r1, r3, #5
 8007680:	f003 021f 	and.w	r2, r3, #31
 8007684:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007688:	f04f 0a01 	mov.w	sl, #1
 800768c:	fa0a f202 	lsl.w	r2, sl, r2
 8007690:	420a      	tst	r2, r1
 8007692:	d009      	beq.n	80076a8 <__gethex+0x1f8>
 8007694:	4553      	cmp	r3, sl
 8007696:	dd05      	ble.n	80076a4 <__gethex+0x1f4>
 8007698:	1eb9      	subs	r1, r7, #2
 800769a:	4620      	mov	r0, r4
 800769c:	f000 ff44 	bl	8008528 <__any_on>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d145      	bne.n	8007730 <__gethex+0x280>
 80076a4:	f04f 0a02 	mov.w	sl, #2
 80076a8:	4639      	mov	r1, r7
 80076aa:	4620      	mov	r0, r4
 80076ac:	f7ff fe98 	bl	80073e0 <rshift>
 80076b0:	443d      	add	r5, r7
 80076b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076b6:	42ab      	cmp	r3, r5
 80076b8:	da4c      	bge.n	8007754 <__gethex+0x2a4>
 80076ba:	ee18 0a10 	vmov	r0, s16
 80076be:	4621      	mov	r1, r4
 80076c0:	f000 fad2 	bl	8007c68 <_Bfree>
 80076c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076c6:	2300      	movs	r3, #0
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	27a3      	movs	r7, #163	; 0xa3
 80076cc:	e785      	b.n	80075da <__gethex+0x12a>
 80076ce:	1e73      	subs	r3, r6, #1
 80076d0:	9a05      	ldr	r2, [sp, #20]
 80076d2:	9303      	str	r3, [sp, #12]
 80076d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076d8:	4293      	cmp	r3, r2
 80076da:	d019      	beq.n	8007710 <__gethex+0x260>
 80076dc:	f1bb 0f20 	cmp.w	fp, #32
 80076e0:	d107      	bne.n	80076f2 <__gethex+0x242>
 80076e2:	9b02      	ldr	r3, [sp, #8]
 80076e4:	9a00      	ldr	r2, [sp, #0]
 80076e6:	f843 2b04 	str.w	r2, [r3], #4
 80076ea:	9302      	str	r3, [sp, #8]
 80076ec:	2300      	movs	r3, #0
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	469b      	mov	fp, r3
 80076f2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80076f6:	f7ff fec5 	bl	8007484 <__hexdig_fun>
 80076fa:	9b00      	ldr	r3, [sp, #0]
 80076fc:	f000 000f 	and.w	r0, r0, #15
 8007700:	fa00 f00b 	lsl.w	r0, r0, fp
 8007704:	4303      	orrs	r3, r0
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	f10b 0b04 	add.w	fp, fp, #4
 800770c:	9b03      	ldr	r3, [sp, #12]
 800770e:	e00d      	b.n	800772c <__gethex+0x27c>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	9a06      	ldr	r2, [sp, #24]
 8007714:	4413      	add	r3, r2
 8007716:	42bb      	cmp	r3, r7
 8007718:	d3e0      	bcc.n	80076dc <__gethex+0x22c>
 800771a:	4618      	mov	r0, r3
 800771c:	9901      	ldr	r1, [sp, #4]
 800771e:	9307      	str	r3, [sp, #28]
 8007720:	4652      	mov	r2, sl
 8007722:	f001 ff60 	bl	80095e6 <strncmp>
 8007726:	9b07      	ldr	r3, [sp, #28]
 8007728:	2800      	cmp	r0, #0
 800772a:	d1d7      	bne.n	80076dc <__gethex+0x22c>
 800772c:	461e      	mov	r6, r3
 800772e:	e78b      	b.n	8007648 <__gethex+0x198>
 8007730:	f04f 0a03 	mov.w	sl, #3
 8007734:	e7b8      	b.n	80076a8 <__gethex+0x1f8>
 8007736:	da0a      	bge.n	800774e <__gethex+0x29e>
 8007738:	1a37      	subs	r7, r6, r0
 800773a:	4621      	mov	r1, r4
 800773c:	ee18 0a10 	vmov	r0, s16
 8007740:	463a      	mov	r2, r7
 8007742:	f000 fcad 	bl	80080a0 <__lshift>
 8007746:	1bed      	subs	r5, r5, r7
 8007748:	4604      	mov	r4, r0
 800774a:	f100 0914 	add.w	r9, r0, #20
 800774e:	f04f 0a00 	mov.w	sl, #0
 8007752:	e7ae      	b.n	80076b2 <__gethex+0x202>
 8007754:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007758:	42a8      	cmp	r0, r5
 800775a:	dd72      	ble.n	8007842 <__gethex+0x392>
 800775c:	1b45      	subs	r5, r0, r5
 800775e:	42ae      	cmp	r6, r5
 8007760:	dc36      	bgt.n	80077d0 <__gethex+0x320>
 8007762:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d02a      	beq.n	80077c0 <__gethex+0x310>
 800776a:	2b03      	cmp	r3, #3
 800776c:	d02c      	beq.n	80077c8 <__gethex+0x318>
 800776e:	2b01      	cmp	r3, #1
 8007770:	d11c      	bne.n	80077ac <__gethex+0x2fc>
 8007772:	42ae      	cmp	r6, r5
 8007774:	d11a      	bne.n	80077ac <__gethex+0x2fc>
 8007776:	2e01      	cmp	r6, #1
 8007778:	d112      	bne.n	80077a0 <__gethex+0x2f0>
 800777a:	9a04      	ldr	r2, [sp, #16]
 800777c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	2301      	movs	r3, #1
 8007784:	6123      	str	r3, [r4, #16]
 8007786:	f8c9 3000 	str.w	r3, [r9]
 800778a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800778c:	2762      	movs	r7, #98	; 0x62
 800778e:	601c      	str	r4, [r3, #0]
 8007790:	e723      	b.n	80075da <__gethex+0x12a>
 8007792:	bf00      	nop
 8007794:	0800a0a4 	.word	0x0800a0a4
 8007798:	08009fc8 	.word	0x08009fc8
 800779c:	0800a03c 	.word	0x0800a03c
 80077a0:	1e71      	subs	r1, r6, #1
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fec0 	bl	8008528 <__any_on>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d1e6      	bne.n	800777a <__gethex+0x2ca>
 80077ac:	ee18 0a10 	vmov	r0, s16
 80077b0:	4621      	mov	r1, r4
 80077b2:	f000 fa59 	bl	8007c68 <_Bfree>
 80077b6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077b8:	2300      	movs	r3, #0
 80077ba:	6013      	str	r3, [r2, #0]
 80077bc:	2750      	movs	r7, #80	; 0x50
 80077be:	e70c      	b.n	80075da <__gethex+0x12a>
 80077c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1f2      	bne.n	80077ac <__gethex+0x2fc>
 80077c6:	e7d8      	b.n	800777a <__gethex+0x2ca>
 80077c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1d5      	bne.n	800777a <__gethex+0x2ca>
 80077ce:	e7ed      	b.n	80077ac <__gethex+0x2fc>
 80077d0:	1e6f      	subs	r7, r5, #1
 80077d2:	f1ba 0f00 	cmp.w	sl, #0
 80077d6:	d131      	bne.n	800783c <__gethex+0x38c>
 80077d8:	b127      	cbz	r7, 80077e4 <__gethex+0x334>
 80077da:	4639      	mov	r1, r7
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 fea3 	bl	8008528 <__any_on>
 80077e2:	4682      	mov	sl, r0
 80077e4:	117b      	asrs	r3, r7, #5
 80077e6:	2101      	movs	r1, #1
 80077e8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80077ec:	f007 071f 	and.w	r7, r7, #31
 80077f0:	fa01 f707 	lsl.w	r7, r1, r7
 80077f4:	421f      	tst	r7, r3
 80077f6:	4629      	mov	r1, r5
 80077f8:	4620      	mov	r0, r4
 80077fa:	bf18      	it	ne
 80077fc:	f04a 0a02 	orrne.w	sl, sl, #2
 8007800:	1b76      	subs	r6, r6, r5
 8007802:	f7ff fded 	bl	80073e0 <rshift>
 8007806:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800780a:	2702      	movs	r7, #2
 800780c:	f1ba 0f00 	cmp.w	sl, #0
 8007810:	d048      	beq.n	80078a4 <__gethex+0x3f4>
 8007812:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007816:	2b02      	cmp	r3, #2
 8007818:	d015      	beq.n	8007846 <__gethex+0x396>
 800781a:	2b03      	cmp	r3, #3
 800781c:	d017      	beq.n	800784e <__gethex+0x39e>
 800781e:	2b01      	cmp	r3, #1
 8007820:	d109      	bne.n	8007836 <__gethex+0x386>
 8007822:	f01a 0f02 	tst.w	sl, #2
 8007826:	d006      	beq.n	8007836 <__gethex+0x386>
 8007828:	f8d9 0000 	ldr.w	r0, [r9]
 800782c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007830:	f01a 0f01 	tst.w	sl, #1
 8007834:	d10e      	bne.n	8007854 <__gethex+0x3a4>
 8007836:	f047 0710 	orr.w	r7, r7, #16
 800783a:	e033      	b.n	80078a4 <__gethex+0x3f4>
 800783c:	f04f 0a01 	mov.w	sl, #1
 8007840:	e7d0      	b.n	80077e4 <__gethex+0x334>
 8007842:	2701      	movs	r7, #1
 8007844:	e7e2      	b.n	800780c <__gethex+0x35c>
 8007846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007848:	f1c3 0301 	rsb	r3, r3, #1
 800784c:	9315      	str	r3, [sp, #84]	; 0x54
 800784e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0f0      	beq.n	8007836 <__gethex+0x386>
 8007854:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007858:	f104 0314 	add.w	r3, r4, #20
 800785c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007860:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007864:	f04f 0c00 	mov.w	ip, #0
 8007868:	4618      	mov	r0, r3
 800786a:	f853 2b04 	ldr.w	r2, [r3], #4
 800786e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007872:	d01c      	beq.n	80078ae <__gethex+0x3fe>
 8007874:	3201      	adds	r2, #1
 8007876:	6002      	str	r2, [r0, #0]
 8007878:	2f02      	cmp	r7, #2
 800787a:	f104 0314 	add.w	r3, r4, #20
 800787e:	d13f      	bne.n	8007900 <__gethex+0x450>
 8007880:	f8d8 2000 	ldr.w	r2, [r8]
 8007884:	3a01      	subs	r2, #1
 8007886:	42b2      	cmp	r2, r6
 8007888:	d10a      	bne.n	80078a0 <__gethex+0x3f0>
 800788a:	1171      	asrs	r1, r6, #5
 800788c:	2201      	movs	r2, #1
 800788e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007892:	f006 061f 	and.w	r6, r6, #31
 8007896:	fa02 f606 	lsl.w	r6, r2, r6
 800789a:	421e      	tst	r6, r3
 800789c:	bf18      	it	ne
 800789e:	4617      	movne	r7, r2
 80078a0:	f047 0720 	orr.w	r7, r7, #32
 80078a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078a6:	601c      	str	r4, [r3, #0]
 80078a8:	9b04      	ldr	r3, [sp, #16]
 80078aa:	601d      	str	r5, [r3, #0]
 80078ac:	e695      	b.n	80075da <__gethex+0x12a>
 80078ae:	4299      	cmp	r1, r3
 80078b0:	f843 cc04 	str.w	ip, [r3, #-4]
 80078b4:	d8d8      	bhi.n	8007868 <__gethex+0x3b8>
 80078b6:	68a3      	ldr	r3, [r4, #8]
 80078b8:	459b      	cmp	fp, r3
 80078ba:	db19      	blt.n	80078f0 <__gethex+0x440>
 80078bc:	6861      	ldr	r1, [r4, #4]
 80078be:	ee18 0a10 	vmov	r0, s16
 80078c2:	3101      	adds	r1, #1
 80078c4:	f000 f990 	bl	8007be8 <_Balloc>
 80078c8:	4681      	mov	r9, r0
 80078ca:	b918      	cbnz	r0, 80078d4 <__gethex+0x424>
 80078cc:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <__gethex+0x488>)
 80078ce:	4602      	mov	r2, r0
 80078d0:	2184      	movs	r1, #132	; 0x84
 80078d2:	e6a8      	b.n	8007626 <__gethex+0x176>
 80078d4:	6922      	ldr	r2, [r4, #16]
 80078d6:	3202      	adds	r2, #2
 80078d8:	f104 010c 	add.w	r1, r4, #12
 80078dc:	0092      	lsls	r2, r2, #2
 80078de:	300c      	adds	r0, #12
 80078e0:	f000 f974 	bl	8007bcc <memcpy>
 80078e4:	4621      	mov	r1, r4
 80078e6:	ee18 0a10 	vmov	r0, s16
 80078ea:	f000 f9bd 	bl	8007c68 <_Bfree>
 80078ee:	464c      	mov	r4, r9
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	1c5a      	adds	r2, r3, #1
 80078f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078f8:	6122      	str	r2, [r4, #16]
 80078fa:	2201      	movs	r2, #1
 80078fc:	615a      	str	r2, [r3, #20]
 80078fe:	e7bb      	b.n	8007878 <__gethex+0x3c8>
 8007900:	6922      	ldr	r2, [r4, #16]
 8007902:	455a      	cmp	r2, fp
 8007904:	dd0b      	ble.n	800791e <__gethex+0x46e>
 8007906:	2101      	movs	r1, #1
 8007908:	4620      	mov	r0, r4
 800790a:	f7ff fd69 	bl	80073e0 <rshift>
 800790e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007912:	3501      	adds	r5, #1
 8007914:	42ab      	cmp	r3, r5
 8007916:	f6ff aed0 	blt.w	80076ba <__gethex+0x20a>
 800791a:	2701      	movs	r7, #1
 800791c:	e7c0      	b.n	80078a0 <__gethex+0x3f0>
 800791e:	f016 061f 	ands.w	r6, r6, #31
 8007922:	d0fa      	beq.n	800791a <__gethex+0x46a>
 8007924:	4453      	add	r3, sl
 8007926:	f1c6 0620 	rsb	r6, r6, #32
 800792a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800792e:	f000 fa4d 	bl	8007dcc <__hi0bits>
 8007932:	42b0      	cmp	r0, r6
 8007934:	dbe7      	blt.n	8007906 <__gethex+0x456>
 8007936:	e7f0      	b.n	800791a <__gethex+0x46a>
 8007938:	08009fc8 	.word	0x08009fc8

0800793c <L_shift>:
 800793c:	f1c2 0208 	rsb	r2, r2, #8
 8007940:	0092      	lsls	r2, r2, #2
 8007942:	b570      	push	{r4, r5, r6, lr}
 8007944:	f1c2 0620 	rsb	r6, r2, #32
 8007948:	6843      	ldr	r3, [r0, #4]
 800794a:	6804      	ldr	r4, [r0, #0]
 800794c:	fa03 f506 	lsl.w	r5, r3, r6
 8007950:	432c      	orrs	r4, r5
 8007952:	40d3      	lsrs	r3, r2
 8007954:	6004      	str	r4, [r0, #0]
 8007956:	f840 3f04 	str.w	r3, [r0, #4]!
 800795a:	4288      	cmp	r0, r1
 800795c:	d3f4      	bcc.n	8007948 <L_shift+0xc>
 800795e:	bd70      	pop	{r4, r5, r6, pc}

08007960 <__match>:
 8007960:	b530      	push	{r4, r5, lr}
 8007962:	6803      	ldr	r3, [r0, #0]
 8007964:	3301      	adds	r3, #1
 8007966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800796a:	b914      	cbnz	r4, 8007972 <__match+0x12>
 800796c:	6003      	str	r3, [r0, #0]
 800796e:	2001      	movs	r0, #1
 8007970:	bd30      	pop	{r4, r5, pc}
 8007972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007976:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800797a:	2d19      	cmp	r5, #25
 800797c:	bf98      	it	ls
 800797e:	3220      	addls	r2, #32
 8007980:	42a2      	cmp	r2, r4
 8007982:	d0f0      	beq.n	8007966 <__match+0x6>
 8007984:	2000      	movs	r0, #0
 8007986:	e7f3      	b.n	8007970 <__match+0x10>

08007988 <__hexnan>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	680b      	ldr	r3, [r1, #0]
 800798e:	115e      	asrs	r6, r3, #5
 8007990:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007994:	f013 031f 	ands.w	r3, r3, #31
 8007998:	b087      	sub	sp, #28
 800799a:	bf18      	it	ne
 800799c:	3604      	addne	r6, #4
 800799e:	2500      	movs	r5, #0
 80079a0:	1f37      	subs	r7, r6, #4
 80079a2:	4690      	mov	r8, r2
 80079a4:	6802      	ldr	r2, [r0, #0]
 80079a6:	9301      	str	r3, [sp, #4]
 80079a8:	4682      	mov	sl, r0
 80079aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80079ae:	46b9      	mov	r9, r7
 80079b0:	463c      	mov	r4, r7
 80079b2:	9502      	str	r5, [sp, #8]
 80079b4:	46ab      	mov	fp, r5
 80079b6:	7851      	ldrb	r1, [r2, #1]
 80079b8:	1c53      	adds	r3, r2, #1
 80079ba:	9303      	str	r3, [sp, #12]
 80079bc:	b341      	cbz	r1, 8007a10 <__hexnan+0x88>
 80079be:	4608      	mov	r0, r1
 80079c0:	9205      	str	r2, [sp, #20]
 80079c2:	9104      	str	r1, [sp, #16]
 80079c4:	f7ff fd5e 	bl	8007484 <__hexdig_fun>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d14f      	bne.n	8007a6c <__hexnan+0xe4>
 80079cc:	9904      	ldr	r1, [sp, #16]
 80079ce:	9a05      	ldr	r2, [sp, #20]
 80079d0:	2920      	cmp	r1, #32
 80079d2:	d818      	bhi.n	8007a06 <__hexnan+0x7e>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	459b      	cmp	fp, r3
 80079d8:	dd13      	ble.n	8007a02 <__hexnan+0x7a>
 80079da:	454c      	cmp	r4, r9
 80079dc:	d206      	bcs.n	80079ec <__hexnan+0x64>
 80079de:	2d07      	cmp	r5, #7
 80079e0:	dc04      	bgt.n	80079ec <__hexnan+0x64>
 80079e2:	462a      	mov	r2, r5
 80079e4:	4649      	mov	r1, r9
 80079e6:	4620      	mov	r0, r4
 80079e8:	f7ff ffa8 	bl	800793c <L_shift>
 80079ec:	4544      	cmp	r4, r8
 80079ee:	d950      	bls.n	8007a92 <__hexnan+0x10a>
 80079f0:	2300      	movs	r3, #0
 80079f2:	f1a4 0904 	sub.w	r9, r4, #4
 80079f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80079fa:	f8cd b008 	str.w	fp, [sp, #8]
 80079fe:	464c      	mov	r4, r9
 8007a00:	461d      	mov	r5, r3
 8007a02:	9a03      	ldr	r2, [sp, #12]
 8007a04:	e7d7      	b.n	80079b6 <__hexnan+0x2e>
 8007a06:	2929      	cmp	r1, #41	; 0x29
 8007a08:	d156      	bne.n	8007ab8 <__hexnan+0x130>
 8007a0a:	3202      	adds	r2, #2
 8007a0c:	f8ca 2000 	str.w	r2, [sl]
 8007a10:	f1bb 0f00 	cmp.w	fp, #0
 8007a14:	d050      	beq.n	8007ab8 <__hexnan+0x130>
 8007a16:	454c      	cmp	r4, r9
 8007a18:	d206      	bcs.n	8007a28 <__hexnan+0xa0>
 8007a1a:	2d07      	cmp	r5, #7
 8007a1c:	dc04      	bgt.n	8007a28 <__hexnan+0xa0>
 8007a1e:	462a      	mov	r2, r5
 8007a20:	4649      	mov	r1, r9
 8007a22:	4620      	mov	r0, r4
 8007a24:	f7ff ff8a 	bl	800793c <L_shift>
 8007a28:	4544      	cmp	r4, r8
 8007a2a:	d934      	bls.n	8007a96 <__hexnan+0x10e>
 8007a2c:	f1a8 0204 	sub.w	r2, r8, #4
 8007a30:	4623      	mov	r3, r4
 8007a32:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a36:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a3a:	429f      	cmp	r7, r3
 8007a3c:	d2f9      	bcs.n	8007a32 <__hexnan+0xaa>
 8007a3e:	1b3b      	subs	r3, r7, r4
 8007a40:	f023 0303 	bic.w	r3, r3, #3
 8007a44:	3304      	adds	r3, #4
 8007a46:	3401      	adds	r4, #1
 8007a48:	3e03      	subs	r6, #3
 8007a4a:	42b4      	cmp	r4, r6
 8007a4c:	bf88      	it	hi
 8007a4e:	2304      	movhi	r3, #4
 8007a50:	4443      	add	r3, r8
 8007a52:	2200      	movs	r2, #0
 8007a54:	f843 2b04 	str.w	r2, [r3], #4
 8007a58:	429f      	cmp	r7, r3
 8007a5a:	d2fb      	bcs.n	8007a54 <__hexnan+0xcc>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	b91b      	cbnz	r3, 8007a68 <__hexnan+0xe0>
 8007a60:	4547      	cmp	r7, r8
 8007a62:	d127      	bne.n	8007ab4 <__hexnan+0x12c>
 8007a64:	2301      	movs	r3, #1
 8007a66:	603b      	str	r3, [r7, #0]
 8007a68:	2005      	movs	r0, #5
 8007a6a:	e026      	b.n	8007aba <__hexnan+0x132>
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	2d08      	cmp	r5, #8
 8007a70:	f10b 0b01 	add.w	fp, fp, #1
 8007a74:	dd06      	ble.n	8007a84 <__hexnan+0xfc>
 8007a76:	4544      	cmp	r4, r8
 8007a78:	d9c3      	bls.n	8007a02 <__hexnan+0x7a>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a80:	2501      	movs	r5, #1
 8007a82:	3c04      	subs	r4, #4
 8007a84:	6822      	ldr	r2, [r4, #0]
 8007a86:	f000 000f 	and.w	r0, r0, #15
 8007a8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a8e:	6022      	str	r2, [r4, #0]
 8007a90:	e7b7      	b.n	8007a02 <__hexnan+0x7a>
 8007a92:	2508      	movs	r5, #8
 8007a94:	e7b5      	b.n	8007a02 <__hexnan+0x7a>
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0df      	beq.n	8007a5c <__hexnan+0xd4>
 8007a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007aa0:	f1c3 0320 	rsb	r3, r3, #32
 8007aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007aac:	401a      	ands	r2, r3
 8007aae:	f846 2c04 	str.w	r2, [r6, #-4]
 8007ab2:	e7d3      	b.n	8007a5c <__hexnan+0xd4>
 8007ab4:	3f04      	subs	r7, #4
 8007ab6:	e7d1      	b.n	8007a5c <__hexnan+0xd4>
 8007ab8:	2004      	movs	r0, #4
 8007aba:	b007      	add	sp, #28
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ac0 <_localeconv_r>:
 8007ac0:	4800      	ldr	r0, [pc, #0]	; (8007ac4 <_localeconv_r+0x4>)
 8007ac2:	4770      	bx	lr
 8007ac4:	20000164 	.word	0x20000164

08007ac8 <__retarget_lock_init_recursive>:
 8007ac8:	4770      	bx	lr

08007aca <__retarget_lock_acquire_recursive>:
 8007aca:	4770      	bx	lr

08007acc <__retarget_lock_release_recursive>:
 8007acc:	4770      	bx	lr

08007ace <__swhatbuf_r>:
 8007ace:	b570      	push	{r4, r5, r6, lr}
 8007ad0:	460e      	mov	r6, r1
 8007ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	b096      	sub	sp, #88	; 0x58
 8007ada:	4614      	mov	r4, r2
 8007adc:	461d      	mov	r5, r3
 8007ade:	da08      	bge.n	8007af2 <__swhatbuf_r+0x24>
 8007ae0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	602a      	str	r2, [r5, #0]
 8007ae8:	061a      	lsls	r2, r3, #24
 8007aea:	d410      	bmi.n	8007b0e <__swhatbuf_r+0x40>
 8007aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007af0:	e00e      	b.n	8007b10 <__swhatbuf_r+0x42>
 8007af2:	466a      	mov	r2, sp
 8007af4:	f001 fff2 	bl	8009adc <_fstat_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	dbf1      	blt.n	8007ae0 <__swhatbuf_r+0x12>
 8007afc:	9a01      	ldr	r2, [sp, #4]
 8007afe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b06:	425a      	negs	r2, r3
 8007b08:	415a      	adcs	r2, r3
 8007b0a:	602a      	str	r2, [r5, #0]
 8007b0c:	e7ee      	b.n	8007aec <__swhatbuf_r+0x1e>
 8007b0e:	2340      	movs	r3, #64	; 0x40
 8007b10:	2000      	movs	r0, #0
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	b016      	add	sp, #88	; 0x58
 8007b16:	bd70      	pop	{r4, r5, r6, pc}

08007b18 <__smakebuf_r>:
 8007b18:	898b      	ldrh	r3, [r1, #12]
 8007b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b1c:	079d      	lsls	r5, r3, #30
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	d507      	bpl.n	8007b34 <__smakebuf_r+0x1c>
 8007b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	6163      	str	r3, [r4, #20]
 8007b30:	b002      	add	sp, #8
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	ab01      	add	r3, sp, #4
 8007b36:	466a      	mov	r2, sp
 8007b38:	f7ff ffc9 	bl	8007ace <__swhatbuf_r>
 8007b3c:	9900      	ldr	r1, [sp, #0]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 fd95 	bl	8008670 <_malloc_r>
 8007b46:	b948      	cbnz	r0, 8007b5c <__smakebuf_r+0x44>
 8007b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4c:	059a      	lsls	r2, r3, #22
 8007b4e:	d4ef      	bmi.n	8007b30 <__smakebuf_r+0x18>
 8007b50:	f023 0303 	bic.w	r3, r3, #3
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7e3      	b.n	8007b24 <__smakebuf_r+0xc>
 8007b5c:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <__smakebuf_r+0x7c>)
 8007b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b60:	89a3      	ldrh	r3, [r4, #12]
 8007b62:	6020      	str	r0, [r4, #0]
 8007b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	9b00      	ldr	r3, [sp, #0]
 8007b6c:	6163      	str	r3, [r4, #20]
 8007b6e:	9b01      	ldr	r3, [sp, #4]
 8007b70:	6120      	str	r0, [r4, #16]
 8007b72:	b15b      	cbz	r3, 8007b8c <__smakebuf_r+0x74>
 8007b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f001 ffc1 	bl	8009b00 <_isatty_r>
 8007b7e:	b128      	cbz	r0, 8007b8c <__smakebuf_r+0x74>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f023 0303 	bic.w	r3, r3, #3
 8007b86:	f043 0301 	orr.w	r3, r3, #1
 8007b8a:	81a3      	strh	r3, [r4, #12]
 8007b8c:	89a0      	ldrh	r0, [r4, #12]
 8007b8e:	4305      	orrs	r5, r0
 8007b90:	81a5      	strh	r5, [r4, #12]
 8007b92:	e7cd      	b.n	8007b30 <__smakebuf_r+0x18>
 8007b94:	08007205 	.word	0x08007205

08007b98 <malloc>:
 8007b98:	4b02      	ldr	r3, [pc, #8]	; (8007ba4 <malloc+0xc>)
 8007b9a:	4601      	mov	r1, r0
 8007b9c:	6818      	ldr	r0, [r3, #0]
 8007b9e:	f000 bd67 	b.w	8008670 <_malloc_r>
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c

08007ba8 <__ascii_mbtowc>:
 8007ba8:	b082      	sub	sp, #8
 8007baa:	b901      	cbnz	r1, 8007bae <__ascii_mbtowc+0x6>
 8007bac:	a901      	add	r1, sp, #4
 8007bae:	b142      	cbz	r2, 8007bc2 <__ascii_mbtowc+0x1a>
 8007bb0:	b14b      	cbz	r3, 8007bc6 <__ascii_mbtowc+0x1e>
 8007bb2:	7813      	ldrb	r3, [r2, #0]
 8007bb4:	600b      	str	r3, [r1, #0]
 8007bb6:	7812      	ldrb	r2, [r2, #0]
 8007bb8:	1e10      	subs	r0, r2, #0
 8007bba:	bf18      	it	ne
 8007bbc:	2001      	movne	r0, #1
 8007bbe:	b002      	add	sp, #8
 8007bc0:	4770      	bx	lr
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	e7fb      	b.n	8007bbe <__ascii_mbtowc+0x16>
 8007bc6:	f06f 0001 	mvn.w	r0, #1
 8007bca:	e7f8      	b.n	8007bbe <__ascii_mbtowc+0x16>

08007bcc <memcpy>:
 8007bcc:	440a      	add	r2, r1
 8007bce:	4291      	cmp	r1, r2
 8007bd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007bd4:	d100      	bne.n	8007bd8 <memcpy+0xc>
 8007bd6:	4770      	bx	lr
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007be2:	4291      	cmp	r1, r2
 8007be4:	d1f9      	bne.n	8007bda <memcpy+0xe>
 8007be6:	bd10      	pop	{r4, pc}

08007be8 <_Balloc>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007bec:	4604      	mov	r4, r0
 8007bee:	460d      	mov	r5, r1
 8007bf0:	b976      	cbnz	r6, 8007c10 <_Balloc+0x28>
 8007bf2:	2010      	movs	r0, #16
 8007bf4:	f7ff ffd0 	bl	8007b98 <malloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8007bfc:	b920      	cbnz	r0, 8007c08 <_Balloc+0x20>
 8007bfe:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <_Balloc+0x78>)
 8007c00:	4818      	ldr	r0, [pc, #96]	; (8007c64 <_Balloc+0x7c>)
 8007c02:	2166      	movs	r1, #102	; 0x66
 8007c04:	f001 ff2a 	bl	8009a5c <__assert_func>
 8007c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c0c:	6006      	str	r6, [r0, #0]
 8007c0e:	60c6      	str	r6, [r0, #12]
 8007c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007c12:	68f3      	ldr	r3, [r6, #12]
 8007c14:	b183      	cbz	r3, 8007c38 <_Balloc+0x50>
 8007c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c1e:	b9b8      	cbnz	r0, 8007c50 <_Balloc+0x68>
 8007c20:	2101      	movs	r1, #1
 8007c22:	fa01 f605 	lsl.w	r6, r1, r5
 8007c26:	1d72      	adds	r2, r6, #5
 8007c28:	0092      	lsls	r2, r2, #2
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 fc9d 	bl	800856a <_calloc_r>
 8007c30:	b160      	cbz	r0, 8007c4c <_Balloc+0x64>
 8007c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c36:	e00e      	b.n	8007c56 <_Balloc+0x6e>
 8007c38:	2221      	movs	r2, #33	; 0x21
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	f000 fc94 	bl	800856a <_calloc_r>
 8007c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c44:	60f0      	str	r0, [r6, #12]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e4      	bne.n	8007c16 <_Balloc+0x2e>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	6802      	ldr	r2, [r0, #0]
 8007c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c56:	2300      	movs	r3, #0
 8007c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c5c:	e7f7      	b.n	8007c4e <_Balloc+0x66>
 8007c5e:	bf00      	nop
 8007c60:	08009f56 	.word	0x08009f56
 8007c64:	0800a0b8 	.word	0x0800a0b8

08007c68 <_Bfree>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	b976      	cbnz	r6, 8007c90 <_Bfree+0x28>
 8007c72:	2010      	movs	r0, #16
 8007c74:	f7ff ff90 	bl	8007b98 <malloc>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8007c7c:	b920      	cbnz	r0, 8007c88 <_Bfree+0x20>
 8007c7e:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <_Bfree+0x3c>)
 8007c80:	4809      	ldr	r0, [pc, #36]	; (8007ca8 <_Bfree+0x40>)
 8007c82:	218a      	movs	r1, #138	; 0x8a
 8007c84:	f001 feea 	bl	8009a5c <__assert_func>
 8007c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c8c:	6006      	str	r6, [r0, #0]
 8007c8e:	60c6      	str	r6, [r0, #12]
 8007c90:	b13c      	cbz	r4, 8007ca2 <_Bfree+0x3a>
 8007c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007c94:	6862      	ldr	r2, [r4, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c9c:	6021      	str	r1, [r4, #0]
 8007c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	08009f56 	.word	0x08009f56
 8007ca8:	0800a0b8 	.word	0x0800a0b8

08007cac <__multadd>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	690d      	ldr	r5, [r1, #16]
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	461e      	mov	r6, r3
 8007cb8:	f101 0c14 	add.w	ip, r1, #20
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8007cc2:	b299      	uxth	r1, r3
 8007cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8007cc8:	0c1e      	lsrs	r6, r3, #16
 8007cca:	0c0b      	lsrs	r3, r1, #16
 8007ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8007cd0:	b289      	uxth	r1, r1
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cd8:	4285      	cmp	r5, r0
 8007cda:	f84c 1b04 	str.w	r1, [ip], #4
 8007cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ce2:	dcec      	bgt.n	8007cbe <__multadd+0x12>
 8007ce4:	b30e      	cbz	r6, 8007d2a <__multadd+0x7e>
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	42ab      	cmp	r3, r5
 8007cea:	dc19      	bgt.n	8007d20 <__multadd+0x74>
 8007cec:	6861      	ldr	r1, [r4, #4]
 8007cee:	4638      	mov	r0, r7
 8007cf0:	3101      	adds	r1, #1
 8007cf2:	f7ff ff79 	bl	8007be8 <_Balloc>
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	b928      	cbnz	r0, 8007d06 <__multadd+0x5a>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <__multadd+0x84>)
 8007cfe:	480d      	ldr	r0, [pc, #52]	; (8007d34 <__multadd+0x88>)
 8007d00:	21b5      	movs	r1, #181	; 0xb5
 8007d02:	f001 feab 	bl	8009a5c <__assert_func>
 8007d06:	6922      	ldr	r2, [r4, #16]
 8007d08:	3202      	adds	r2, #2
 8007d0a:	f104 010c 	add.w	r1, r4, #12
 8007d0e:	0092      	lsls	r2, r2, #2
 8007d10:	300c      	adds	r0, #12
 8007d12:	f7ff ff5b 	bl	8007bcc <memcpy>
 8007d16:	4621      	mov	r1, r4
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f7ff ffa5 	bl	8007c68 <_Bfree>
 8007d1e:	4644      	mov	r4, r8
 8007d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d24:	3501      	adds	r5, #1
 8007d26:	615e      	str	r6, [r3, #20]
 8007d28:	6125      	str	r5, [r4, #16]
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d30:	08009fc8 	.word	0x08009fc8
 8007d34:	0800a0b8 	.word	0x0800a0b8

08007d38 <__s2b>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	4615      	mov	r5, r2
 8007d40:	461f      	mov	r7, r3
 8007d42:	2209      	movs	r2, #9
 8007d44:	3308      	adds	r3, #8
 8007d46:	4606      	mov	r6, r0
 8007d48:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	2201      	movs	r2, #1
 8007d50:	429a      	cmp	r2, r3
 8007d52:	db09      	blt.n	8007d68 <__s2b+0x30>
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff ff47 	bl	8007be8 <_Balloc>
 8007d5a:	b940      	cbnz	r0, 8007d6e <__s2b+0x36>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b19      	ldr	r3, [pc, #100]	; (8007dc4 <__s2b+0x8c>)
 8007d60:	4819      	ldr	r0, [pc, #100]	; (8007dc8 <__s2b+0x90>)
 8007d62:	21ce      	movs	r1, #206	; 0xce
 8007d64:	f001 fe7a 	bl	8009a5c <__assert_func>
 8007d68:	0052      	lsls	r2, r2, #1
 8007d6a:	3101      	adds	r1, #1
 8007d6c:	e7f0      	b.n	8007d50 <__s2b+0x18>
 8007d6e:	9b08      	ldr	r3, [sp, #32]
 8007d70:	6143      	str	r3, [r0, #20]
 8007d72:	2d09      	cmp	r5, #9
 8007d74:	f04f 0301 	mov.w	r3, #1
 8007d78:	6103      	str	r3, [r0, #16]
 8007d7a:	dd16      	ble.n	8007daa <__s2b+0x72>
 8007d7c:	f104 0909 	add.w	r9, r4, #9
 8007d80:	46c8      	mov	r8, r9
 8007d82:	442c      	add	r4, r5
 8007d84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d88:	4601      	mov	r1, r0
 8007d8a:	3b30      	subs	r3, #48	; 0x30
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	4630      	mov	r0, r6
 8007d90:	f7ff ff8c 	bl	8007cac <__multadd>
 8007d94:	45a0      	cmp	r8, r4
 8007d96:	d1f5      	bne.n	8007d84 <__s2b+0x4c>
 8007d98:	f1a5 0408 	sub.w	r4, r5, #8
 8007d9c:	444c      	add	r4, r9
 8007d9e:	1b2d      	subs	r5, r5, r4
 8007da0:	1963      	adds	r3, r4, r5
 8007da2:	42bb      	cmp	r3, r7
 8007da4:	db04      	blt.n	8007db0 <__s2b+0x78>
 8007da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007daa:	340a      	adds	r4, #10
 8007dac:	2509      	movs	r5, #9
 8007dae:	e7f6      	b.n	8007d9e <__s2b+0x66>
 8007db0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007db4:	4601      	mov	r1, r0
 8007db6:	3b30      	subs	r3, #48	; 0x30
 8007db8:	220a      	movs	r2, #10
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7ff ff76 	bl	8007cac <__multadd>
 8007dc0:	e7ee      	b.n	8007da0 <__s2b+0x68>
 8007dc2:	bf00      	nop
 8007dc4:	08009fc8 	.word	0x08009fc8
 8007dc8:	0800a0b8 	.word	0x0800a0b8

08007dcc <__hi0bits>:
 8007dcc:	0c03      	lsrs	r3, r0, #16
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	b9d3      	cbnz	r3, 8007e08 <__hi0bits+0x3c>
 8007dd2:	0400      	lsls	r0, r0, #16
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007dda:	bf04      	itt	eq
 8007ddc:	0200      	lsleq	r0, r0, #8
 8007dde:	3308      	addeq	r3, #8
 8007de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007de4:	bf04      	itt	eq
 8007de6:	0100      	lsleq	r0, r0, #4
 8007de8:	3304      	addeq	r3, #4
 8007dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007dee:	bf04      	itt	eq
 8007df0:	0080      	lsleq	r0, r0, #2
 8007df2:	3302      	addeq	r3, #2
 8007df4:	2800      	cmp	r0, #0
 8007df6:	db05      	blt.n	8007e04 <__hi0bits+0x38>
 8007df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007dfc:	f103 0301 	add.w	r3, r3, #1
 8007e00:	bf08      	it	eq
 8007e02:	2320      	moveq	r3, #32
 8007e04:	4618      	mov	r0, r3
 8007e06:	4770      	bx	lr
 8007e08:	2300      	movs	r3, #0
 8007e0a:	e7e4      	b.n	8007dd6 <__hi0bits+0xa>

08007e0c <__lo0bits>:
 8007e0c:	6803      	ldr	r3, [r0, #0]
 8007e0e:	f013 0207 	ands.w	r2, r3, #7
 8007e12:	4601      	mov	r1, r0
 8007e14:	d00b      	beq.n	8007e2e <__lo0bits+0x22>
 8007e16:	07da      	lsls	r2, r3, #31
 8007e18:	d423      	bmi.n	8007e62 <__lo0bits+0x56>
 8007e1a:	0798      	lsls	r0, r3, #30
 8007e1c:	bf49      	itett	mi
 8007e1e:	085b      	lsrmi	r3, r3, #1
 8007e20:	089b      	lsrpl	r3, r3, #2
 8007e22:	2001      	movmi	r0, #1
 8007e24:	600b      	strmi	r3, [r1, #0]
 8007e26:	bf5c      	itt	pl
 8007e28:	600b      	strpl	r3, [r1, #0]
 8007e2a:	2002      	movpl	r0, #2
 8007e2c:	4770      	bx	lr
 8007e2e:	b298      	uxth	r0, r3
 8007e30:	b9a8      	cbnz	r0, 8007e5e <__lo0bits+0x52>
 8007e32:	0c1b      	lsrs	r3, r3, #16
 8007e34:	2010      	movs	r0, #16
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	b90a      	cbnz	r2, 8007e3e <__lo0bits+0x32>
 8007e3a:	3008      	adds	r0, #8
 8007e3c:	0a1b      	lsrs	r3, r3, #8
 8007e3e:	071a      	lsls	r2, r3, #28
 8007e40:	bf04      	itt	eq
 8007e42:	091b      	lsreq	r3, r3, #4
 8007e44:	3004      	addeq	r0, #4
 8007e46:	079a      	lsls	r2, r3, #30
 8007e48:	bf04      	itt	eq
 8007e4a:	089b      	lsreq	r3, r3, #2
 8007e4c:	3002      	addeq	r0, #2
 8007e4e:	07da      	lsls	r2, r3, #31
 8007e50:	d403      	bmi.n	8007e5a <__lo0bits+0x4e>
 8007e52:	085b      	lsrs	r3, r3, #1
 8007e54:	f100 0001 	add.w	r0, r0, #1
 8007e58:	d005      	beq.n	8007e66 <__lo0bits+0x5a>
 8007e5a:	600b      	str	r3, [r1, #0]
 8007e5c:	4770      	bx	lr
 8007e5e:	4610      	mov	r0, r2
 8007e60:	e7e9      	b.n	8007e36 <__lo0bits+0x2a>
 8007e62:	2000      	movs	r0, #0
 8007e64:	4770      	bx	lr
 8007e66:	2020      	movs	r0, #32
 8007e68:	4770      	bx	lr
	...

08007e6c <__i2b>:
 8007e6c:	b510      	push	{r4, lr}
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2101      	movs	r1, #1
 8007e72:	f7ff feb9 	bl	8007be8 <_Balloc>
 8007e76:	4602      	mov	r2, r0
 8007e78:	b928      	cbnz	r0, 8007e86 <__i2b+0x1a>
 8007e7a:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <__i2b+0x24>)
 8007e7c:	4805      	ldr	r0, [pc, #20]	; (8007e94 <__i2b+0x28>)
 8007e7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007e82:	f001 fdeb 	bl	8009a5c <__assert_func>
 8007e86:	2301      	movs	r3, #1
 8007e88:	6144      	str	r4, [r0, #20]
 8007e8a:	6103      	str	r3, [r0, #16]
 8007e8c:	bd10      	pop	{r4, pc}
 8007e8e:	bf00      	nop
 8007e90:	08009fc8 	.word	0x08009fc8
 8007e94:	0800a0b8 	.word	0x0800a0b8

08007e98 <__multiply>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	4691      	mov	r9, r2
 8007e9e:	690a      	ldr	r2, [r1, #16]
 8007ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	bfb8      	it	lt
 8007ea8:	460b      	movlt	r3, r1
 8007eaa:	460c      	mov	r4, r1
 8007eac:	bfbc      	itt	lt
 8007eae:	464c      	movlt	r4, r9
 8007eb0:	4699      	movlt	r9, r3
 8007eb2:	6927      	ldr	r7, [r4, #16]
 8007eb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007eb8:	68a3      	ldr	r3, [r4, #8]
 8007eba:	6861      	ldr	r1, [r4, #4]
 8007ebc:	eb07 060a 	add.w	r6, r7, sl
 8007ec0:	42b3      	cmp	r3, r6
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	bfb8      	it	lt
 8007ec6:	3101      	addlt	r1, #1
 8007ec8:	f7ff fe8e 	bl	8007be8 <_Balloc>
 8007ecc:	b930      	cbnz	r0, 8007edc <__multiply+0x44>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	4b44      	ldr	r3, [pc, #272]	; (8007fe4 <__multiply+0x14c>)
 8007ed2:	4845      	ldr	r0, [pc, #276]	; (8007fe8 <__multiply+0x150>)
 8007ed4:	f240 115d 	movw	r1, #349	; 0x15d
 8007ed8:	f001 fdc0 	bl	8009a5c <__assert_func>
 8007edc:	f100 0514 	add.w	r5, r0, #20
 8007ee0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	4543      	cmp	r3, r8
 8007eea:	d321      	bcc.n	8007f30 <__multiply+0x98>
 8007eec:	f104 0314 	add.w	r3, r4, #20
 8007ef0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ef4:	f109 0314 	add.w	r3, r9, #20
 8007ef8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007efc:	9202      	str	r2, [sp, #8]
 8007efe:	1b3a      	subs	r2, r7, r4
 8007f00:	3a15      	subs	r2, #21
 8007f02:	f022 0203 	bic.w	r2, r2, #3
 8007f06:	3204      	adds	r2, #4
 8007f08:	f104 0115 	add.w	r1, r4, #21
 8007f0c:	428f      	cmp	r7, r1
 8007f0e:	bf38      	it	cc
 8007f10:	2204      	movcc	r2, #4
 8007f12:	9201      	str	r2, [sp, #4]
 8007f14:	9a02      	ldr	r2, [sp, #8]
 8007f16:	9303      	str	r3, [sp, #12]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d80c      	bhi.n	8007f36 <__multiply+0x9e>
 8007f1c:	2e00      	cmp	r6, #0
 8007f1e:	dd03      	ble.n	8007f28 <__multiply+0x90>
 8007f20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d05a      	beq.n	8007fde <__multiply+0x146>
 8007f28:	6106      	str	r6, [r0, #16]
 8007f2a:	b005      	add	sp, #20
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	f843 2b04 	str.w	r2, [r3], #4
 8007f34:	e7d8      	b.n	8007ee8 <__multiply+0x50>
 8007f36:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f3a:	f1ba 0f00 	cmp.w	sl, #0
 8007f3e:	d024      	beq.n	8007f8a <__multiply+0xf2>
 8007f40:	f104 0e14 	add.w	lr, r4, #20
 8007f44:	46a9      	mov	r9, r5
 8007f46:	f04f 0c00 	mov.w	ip, #0
 8007f4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f4e:	f8d9 1000 	ldr.w	r1, [r9]
 8007f52:	fa1f fb82 	uxth.w	fp, r2
 8007f56:	b289      	uxth	r1, r1
 8007f58:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f60:	f8d9 2000 	ldr.w	r2, [r9]
 8007f64:	4461      	add	r1, ip
 8007f66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f72:	b289      	uxth	r1, r1
 8007f74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f78:	4577      	cmp	r7, lr
 8007f7a:	f849 1b04 	str.w	r1, [r9], #4
 8007f7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f82:	d8e2      	bhi.n	8007f4a <__multiply+0xb2>
 8007f84:	9a01      	ldr	r2, [sp, #4]
 8007f86:	f845 c002 	str.w	ip, [r5, r2]
 8007f8a:	9a03      	ldr	r2, [sp, #12]
 8007f8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f90:	3304      	adds	r3, #4
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d020      	beq.n	8007fda <__multiply+0x142>
 8007f98:	6829      	ldr	r1, [r5, #0]
 8007f9a:	f104 0c14 	add.w	ip, r4, #20
 8007f9e:	46ae      	mov	lr, r5
 8007fa0:	f04f 0a00 	mov.w	sl, #0
 8007fa4:	f8bc b000 	ldrh.w	fp, [ip]
 8007fa8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fac:	fb09 220b 	mla	r2, r9, fp, r2
 8007fb0:	4492      	add	sl, r2
 8007fb2:	b289      	uxth	r1, r1
 8007fb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007fb8:	f84e 1b04 	str.w	r1, [lr], #4
 8007fbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8007fc4:	0c12      	lsrs	r2, r2, #16
 8007fc6:	fb09 1102 	mla	r1, r9, r2, r1
 8007fca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007fce:	4567      	cmp	r7, ip
 8007fd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fd4:	d8e6      	bhi.n	8007fa4 <__multiply+0x10c>
 8007fd6:	9a01      	ldr	r2, [sp, #4]
 8007fd8:	50a9      	str	r1, [r5, r2]
 8007fda:	3504      	adds	r5, #4
 8007fdc:	e79a      	b.n	8007f14 <__multiply+0x7c>
 8007fde:	3e01      	subs	r6, #1
 8007fe0:	e79c      	b.n	8007f1c <__multiply+0x84>
 8007fe2:	bf00      	nop
 8007fe4:	08009fc8 	.word	0x08009fc8
 8007fe8:	0800a0b8 	.word	0x0800a0b8

08007fec <__pow5mult>:
 8007fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff0:	4615      	mov	r5, r2
 8007ff2:	f012 0203 	ands.w	r2, r2, #3
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	d007      	beq.n	800800c <__pow5mult+0x20>
 8007ffc:	4c25      	ldr	r4, [pc, #148]	; (8008094 <__pow5mult+0xa8>)
 8007ffe:	3a01      	subs	r2, #1
 8008000:	2300      	movs	r3, #0
 8008002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008006:	f7ff fe51 	bl	8007cac <__multadd>
 800800a:	4607      	mov	r7, r0
 800800c:	10ad      	asrs	r5, r5, #2
 800800e:	d03d      	beq.n	800808c <__pow5mult+0xa0>
 8008010:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008012:	b97c      	cbnz	r4, 8008034 <__pow5mult+0x48>
 8008014:	2010      	movs	r0, #16
 8008016:	f7ff fdbf 	bl	8007b98 <malloc>
 800801a:	4602      	mov	r2, r0
 800801c:	6270      	str	r0, [r6, #36]	; 0x24
 800801e:	b928      	cbnz	r0, 800802c <__pow5mult+0x40>
 8008020:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <__pow5mult+0xac>)
 8008022:	481e      	ldr	r0, [pc, #120]	; (800809c <__pow5mult+0xb0>)
 8008024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008028:	f001 fd18 	bl	8009a5c <__assert_func>
 800802c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008030:	6004      	str	r4, [r0, #0]
 8008032:	60c4      	str	r4, [r0, #12]
 8008034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008038:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800803c:	b94c      	cbnz	r4, 8008052 <__pow5mult+0x66>
 800803e:	f240 2171 	movw	r1, #625	; 0x271
 8008042:	4630      	mov	r0, r6
 8008044:	f7ff ff12 	bl	8007e6c <__i2b>
 8008048:	2300      	movs	r3, #0
 800804a:	f8c8 0008 	str.w	r0, [r8, #8]
 800804e:	4604      	mov	r4, r0
 8008050:	6003      	str	r3, [r0, #0]
 8008052:	f04f 0900 	mov.w	r9, #0
 8008056:	07eb      	lsls	r3, r5, #31
 8008058:	d50a      	bpl.n	8008070 <__pow5mult+0x84>
 800805a:	4639      	mov	r1, r7
 800805c:	4622      	mov	r2, r4
 800805e:	4630      	mov	r0, r6
 8008060:	f7ff ff1a 	bl	8007e98 <__multiply>
 8008064:	4639      	mov	r1, r7
 8008066:	4680      	mov	r8, r0
 8008068:	4630      	mov	r0, r6
 800806a:	f7ff fdfd 	bl	8007c68 <_Bfree>
 800806e:	4647      	mov	r7, r8
 8008070:	106d      	asrs	r5, r5, #1
 8008072:	d00b      	beq.n	800808c <__pow5mult+0xa0>
 8008074:	6820      	ldr	r0, [r4, #0]
 8008076:	b938      	cbnz	r0, 8008088 <__pow5mult+0x9c>
 8008078:	4622      	mov	r2, r4
 800807a:	4621      	mov	r1, r4
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff ff0b 	bl	8007e98 <__multiply>
 8008082:	6020      	str	r0, [r4, #0]
 8008084:	f8c0 9000 	str.w	r9, [r0]
 8008088:	4604      	mov	r4, r0
 800808a:	e7e4      	b.n	8008056 <__pow5mult+0x6a>
 800808c:	4638      	mov	r0, r7
 800808e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008092:	bf00      	nop
 8008094:	0800a208 	.word	0x0800a208
 8008098:	08009f56 	.word	0x08009f56
 800809c:	0800a0b8 	.word	0x0800a0b8

080080a0 <__lshift>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	460c      	mov	r4, r1
 80080a6:	6849      	ldr	r1, [r1, #4]
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	4607      	mov	r7, r0
 80080b2:	4691      	mov	r9, r2
 80080b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080b8:	f108 0601 	add.w	r6, r8, #1
 80080bc:	42b3      	cmp	r3, r6
 80080be:	db0b      	blt.n	80080d8 <__lshift+0x38>
 80080c0:	4638      	mov	r0, r7
 80080c2:	f7ff fd91 	bl	8007be8 <_Balloc>
 80080c6:	4605      	mov	r5, r0
 80080c8:	b948      	cbnz	r0, 80080de <__lshift+0x3e>
 80080ca:	4602      	mov	r2, r0
 80080cc:	4b2a      	ldr	r3, [pc, #168]	; (8008178 <__lshift+0xd8>)
 80080ce:	482b      	ldr	r0, [pc, #172]	; (800817c <__lshift+0xdc>)
 80080d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80080d4:	f001 fcc2 	bl	8009a5c <__assert_func>
 80080d8:	3101      	adds	r1, #1
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	e7ee      	b.n	80080bc <__lshift+0x1c>
 80080de:	2300      	movs	r3, #0
 80080e0:	f100 0114 	add.w	r1, r0, #20
 80080e4:	f100 0210 	add.w	r2, r0, #16
 80080e8:	4618      	mov	r0, r3
 80080ea:	4553      	cmp	r3, sl
 80080ec:	db37      	blt.n	800815e <__lshift+0xbe>
 80080ee:	6920      	ldr	r0, [r4, #16]
 80080f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080f4:	f104 0314 	add.w	r3, r4, #20
 80080f8:	f019 091f 	ands.w	r9, r9, #31
 80080fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008104:	d02f      	beq.n	8008166 <__lshift+0xc6>
 8008106:	f1c9 0e20 	rsb	lr, r9, #32
 800810a:	468a      	mov	sl, r1
 800810c:	f04f 0c00 	mov.w	ip, #0
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	fa02 f209 	lsl.w	r2, r2, r9
 8008116:	ea42 020c 	orr.w	r2, r2, ip
 800811a:	f84a 2b04 	str.w	r2, [sl], #4
 800811e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008122:	4298      	cmp	r0, r3
 8008124:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008128:	d8f2      	bhi.n	8008110 <__lshift+0x70>
 800812a:	1b03      	subs	r3, r0, r4
 800812c:	3b15      	subs	r3, #21
 800812e:	f023 0303 	bic.w	r3, r3, #3
 8008132:	3304      	adds	r3, #4
 8008134:	f104 0215 	add.w	r2, r4, #21
 8008138:	4290      	cmp	r0, r2
 800813a:	bf38      	it	cc
 800813c:	2304      	movcc	r3, #4
 800813e:	f841 c003 	str.w	ip, [r1, r3]
 8008142:	f1bc 0f00 	cmp.w	ip, #0
 8008146:	d001      	beq.n	800814c <__lshift+0xac>
 8008148:	f108 0602 	add.w	r6, r8, #2
 800814c:	3e01      	subs	r6, #1
 800814e:	4638      	mov	r0, r7
 8008150:	612e      	str	r6, [r5, #16]
 8008152:	4621      	mov	r1, r4
 8008154:	f7ff fd88 	bl	8007c68 <_Bfree>
 8008158:	4628      	mov	r0, r5
 800815a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008162:	3301      	adds	r3, #1
 8008164:	e7c1      	b.n	80080ea <__lshift+0x4a>
 8008166:	3904      	subs	r1, #4
 8008168:	f853 2b04 	ldr.w	r2, [r3], #4
 800816c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008170:	4298      	cmp	r0, r3
 8008172:	d8f9      	bhi.n	8008168 <__lshift+0xc8>
 8008174:	e7ea      	b.n	800814c <__lshift+0xac>
 8008176:	bf00      	nop
 8008178:	08009fc8 	.word	0x08009fc8
 800817c:	0800a0b8 	.word	0x0800a0b8

08008180 <__mcmp>:
 8008180:	b530      	push	{r4, r5, lr}
 8008182:	6902      	ldr	r2, [r0, #16]
 8008184:	690c      	ldr	r4, [r1, #16]
 8008186:	1b12      	subs	r2, r2, r4
 8008188:	d10e      	bne.n	80081a8 <__mcmp+0x28>
 800818a:	f100 0314 	add.w	r3, r0, #20
 800818e:	3114      	adds	r1, #20
 8008190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800819c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081a0:	42a5      	cmp	r5, r4
 80081a2:	d003      	beq.n	80081ac <__mcmp+0x2c>
 80081a4:	d305      	bcc.n	80081b2 <__mcmp+0x32>
 80081a6:	2201      	movs	r2, #1
 80081a8:	4610      	mov	r0, r2
 80081aa:	bd30      	pop	{r4, r5, pc}
 80081ac:	4283      	cmp	r3, r0
 80081ae:	d3f3      	bcc.n	8008198 <__mcmp+0x18>
 80081b0:	e7fa      	b.n	80081a8 <__mcmp+0x28>
 80081b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081b6:	e7f7      	b.n	80081a8 <__mcmp+0x28>

080081b8 <__mdiff>:
 80081b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	460c      	mov	r4, r1
 80081be:	4606      	mov	r6, r0
 80081c0:	4611      	mov	r1, r2
 80081c2:	4620      	mov	r0, r4
 80081c4:	4690      	mov	r8, r2
 80081c6:	f7ff ffdb 	bl	8008180 <__mcmp>
 80081ca:	1e05      	subs	r5, r0, #0
 80081cc:	d110      	bne.n	80081f0 <__mdiff+0x38>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7ff fd09 	bl	8007be8 <_Balloc>
 80081d6:	b930      	cbnz	r0, 80081e6 <__mdiff+0x2e>
 80081d8:	4b3a      	ldr	r3, [pc, #232]	; (80082c4 <__mdiff+0x10c>)
 80081da:	4602      	mov	r2, r0
 80081dc:	f240 2132 	movw	r1, #562	; 0x232
 80081e0:	4839      	ldr	r0, [pc, #228]	; (80082c8 <__mdiff+0x110>)
 80081e2:	f001 fc3b 	bl	8009a5c <__assert_func>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f0:	bfa4      	itt	ge
 80081f2:	4643      	movge	r3, r8
 80081f4:	46a0      	movge	r8, r4
 80081f6:	4630      	mov	r0, r6
 80081f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081fc:	bfa6      	itte	ge
 80081fe:	461c      	movge	r4, r3
 8008200:	2500      	movge	r5, #0
 8008202:	2501      	movlt	r5, #1
 8008204:	f7ff fcf0 	bl	8007be8 <_Balloc>
 8008208:	b920      	cbnz	r0, 8008214 <__mdiff+0x5c>
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <__mdiff+0x10c>)
 800820c:	4602      	mov	r2, r0
 800820e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008212:	e7e5      	b.n	80081e0 <__mdiff+0x28>
 8008214:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008218:	6926      	ldr	r6, [r4, #16]
 800821a:	60c5      	str	r5, [r0, #12]
 800821c:	f104 0914 	add.w	r9, r4, #20
 8008220:	f108 0514 	add.w	r5, r8, #20
 8008224:	f100 0e14 	add.w	lr, r0, #20
 8008228:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800822c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008230:	f108 0210 	add.w	r2, r8, #16
 8008234:	46f2      	mov	sl, lr
 8008236:	2100      	movs	r1, #0
 8008238:	f859 3b04 	ldr.w	r3, [r9], #4
 800823c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008240:	fa1f f883 	uxth.w	r8, r3
 8008244:	fa11 f18b 	uxtah	r1, r1, fp
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	eba1 0808 	sub.w	r8, r1, r8
 800824e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008252:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008256:	fa1f f888 	uxth.w	r8, r8
 800825a:	1419      	asrs	r1, r3, #16
 800825c:	454e      	cmp	r6, r9
 800825e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008262:	f84a 3b04 	str.w	r3, [sl], #4
 8008266:	d8e7      	bhi.n	8008238 <__mdiff+0x80>
 8008268:	1b33      	subs	r3, r6, r4
 800826a:	3b15      	subs	r3, #21
 800826c:	f023 0303 	bic.w	r3, r3, #3
 8008270:	3304      	adds	r3, #4
 8008272:	3415      	adds	r4, #21
 8008274:	42a6      	cmp	r6, r4
 8008276:	bf38      	it	cc
 8008278:	2304      	movcc	r3, #4
 800827a:	441d      	add	r5, r3
 800827c:	4473      	add	r3, lr
 800827e:	469e      	mov	lr, r3
 8008280:	462e      	mov	r6, r5
 8008282:	4566      	cmp	r6, ip
 8008284:	d30e      	bcc.n	80082a4 <__mdiff+0xec>
 8008286:	f10c 0203 	add.w	r2, ip, #3
 800828a:	1b52      	subs	r2, r2, r5
 800828c:	f022 0203 	bic.w	r2, r2, #3
 8008290:	3d03      	subs	r5, #3
 8008292:	45ac      	cmp	ip, r5
 8008294:	bf38      	it	cc
 8008296:	2200      	movcc	r2, #0
 8008298:	441a      	add	r2, r3
 800829a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800829e:	b17b      	cbz	r3, 80082c0 <__mdiff+0x108>
 80082a0:	6107      	str	r7, [r0, #16]
 80082a2:	e7a3      	b.n	80081ec <__mdiff+0x34>
 80082a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80082a8:	fa11 f288 	uxtah	r2, r1, r8
 80082ac:	1414      	asrs	r4, r2, #16
 80082ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80082b2:	b292      	uxth	r2, r2
 80082b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80082b8:	f84e 2b04 	str.w	r2, [lr], #4
 80082bc:	1421      	asrs	r1, r4, #16
 80082be:	e7e0      	b.n	8008282 <__mdiff+0xca>
 80082c0:	3f01      	subs	r7, #1
 80082c2:	e7ea      	b.n	800829a <__mdiff+0xe2>
 80082c4:	08009fc8 	.word	0x08009fc8
 80082c8:	0800a0b8 	.word	0x0800a0b8

080082cc <__ulp>:
 80082cc:	b082      	sub	sp, #8
 80082ce:	ed8d 0b00 	vstr	d0, [sp]
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	4912      	ldr	r1, [pc, #72]	; (8008320 <__ulp+0x54>)
 80082d6:	4019      	ands	r1, r3
 80082d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80082dc:	2900      	cmp	r1, #0
 80082de:	dd05      	ble.n	80082ec <__ulp+0x20>
 80082e0:	2200      	movs	r2, #0
 80082e2:	460b      	mov	r3, r1
 80082e4:	ec43 2b10 	vmov	d0, r2, r3
 80082e8:	b002      	add	sp, #8
 80082ea:	4770      	bx	lr
 80082ec:	4249      	negs	r1, r1
 80082ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80082f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	f04f 0300 	mov.w	r3, #0
 80082fe:	da04      	bge.n	800830a <__ulp+0x3e>
 8008300:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008304:	fa41 f300 	asr.w	r3, r1, r0
 8008308:	e7ec      	b.n	80082e4 <__ulp+0x18>
 800830a:	f1a0 0114 	sub.w	r1, r0, #20
 800830e:	291e      	cmp	r1, #30
 8008310:	bfda      	itte	le
 8008312:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008316:	fa20 f101 	lsrle.w	r1, r0, r1
 800831a:	2101      	movgt	r1, #1
 800831c:	460a      	mov	r2, r1
 800831e:	e7e1      	b.n	80082e4 <__ulp+0x18>
 8008320:	7ff00000 	.word	0x7ff00000

08008324 <__b2d>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	6905      	ldr	r5, [r0, #16]
 8008328:	f100 0714 	add.w	r7, r0, #20
 800832c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008330:	1f2e      	subs	r6, r5, #4
 8008332:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff fd48 	bl	8007dcc <__hi0bits>
 800833c:	f1c0 0320 	rsb	r3, r0, #32
 8008340:	280a      	cmp	r0, #10
 8008342:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80083c0 <__b2d+0x9c>
 8008346:	600b      	str	r3, [r1, #0]
 8008348:	dc14      	bgt.n	8008374 <__b2d+0x50>
 800834a:	f1c0 0e0b 	rsb	lr, r0, #11
 800834e:	fa24 f10e 	lsr.w	r1, r4, lr
 8008352:	42b7      	cmp	r7, r6
 8008354:	ea41 030c 	orr.w	r3, r1, ip
 8008358:	bf34      	ite	cc
 800835a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800835e:	2100      	movcs	r1, #0
 8008360:	3015      	adds	r0, #21
 8008362:	fa04 f000 	lsl.w	r0, r4, r0
 8008366:	fa21 f10e 	lsr.w	r1, r1, lr
 800836a:	ea40 0201 	orr.w	r2, r0, r1
 800836e:	ec43 2b10 	vmov	d0, r2, r3
 8008372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008374:	42b7      	cmp	r7, r6
 8008376:	bf3a      	itte	cc
 8008378:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800837c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008380:	2100      	movcs	r1, #0
 8008382:	380b      	subs	r0, #11
 8008384:	d017      	beq.n	80083b6 <__b2d+0x92>
 8008386:	f1c0 0c20 	rsb	ip, r0, #32
 800838a:	fa04 f500 	lsl.w	r5, r4, r0
 800838e:	42be      	cmp	r6, r7
 8008390:	fa21 f40c 	lsr.w	r4, r1, ip
 8008394:	ea45 0504 	orr.w	r5, r5, r4
 8008398:	bf8c      	ite	hi
 800839a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800839e:	2400      	movls	r4, #0
 80083a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80083a4:	fa01 f000 	lsl.w	r0, r1, r0
 80083a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80083ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80083b0:	ea40 0204 	orr.w	r2, r0, r4
 80083b4:	e7db      	b.n	800836e <__b2d+0x4a>
 80083b6:	ea44 030c 	orr.w	r3, r4, ip
 80083ba:	460a      	mov	r2, r1
 80083bc:	e7d7      	b.n	800836e <__b2d+0x4a>
 80083be:	bf00      	nop
 80083c0:	3ff00000 	.word	0x3ff00000

080083c4 <__d2b>:
 80083c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083c8:	4689      	mov	r9, r1
 80083ca:	2101      	movs	r1, #1
 80083cc:	ec57 6b10 	vmov	r6, r7, d0
 80083d0:	4690      	mov	r8, r2
 80083d2:	f7ff fc09 	bl	8007be8 <_Balloc>
 80083d6:	4604      	mov	r4, r0
 80083d8:	b930      	cbnz	r0, 80083e8 <__d2b+0x24>
 80083da:	4602      	mov	r2, r0
 80083dc:	4b25      	ldr	r3, [pc, #148]	; (8008474 <__d2b+0xb0>)
 80083de:	4826      	ldr	r0, [pc, #152]	; (8008478 <__d2b+0xb4>)
 80083e0:	f240 310a 	movw	r1, #778	; 0x30a
 80083e4:	f001 fb3a 	bl	8009a5c <__assert_func>
 80083e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80083ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80083f0:	bb35      	cbnz	r5, 8008440 <__d2b+0x7c>
 80083f2:	2e00      	cmp	r6, #0
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	d028      	beq.n	800844a <__d2b+0x86>
 80083f8:	4668      	mov	r0, sp
 80083fa:	9600      	str	r6, [sp, #0]
 80083fc:	f7ff fd06 	bl	8007e0c <__lo0bits>
 8008400:	9900      	ldr	r1, [sp, #0]
 8008402:	b300      	cbz	r0, 8008446 <__d2b+0x82>
 8008404:	9a01      	ldr	r2, [sp, #4]
 8008406:	f1c0 0320 	rsb	r3, r0, #32
 800840a:	fa02 f303 	lsl.w	r3, r2, r3
 800840e:	430b      	orrs	r3, r1
 8008410:	40c2      	lsrs	r2, r0
 8008412:	6163      	str	r3, [r4, #20]
 8008414:	9201      	str	r2, [sp, #4]
 8008416:	9b01      	ldr	r3, [sp, #4]
 8008418:	61a3      	str	r3, [r4, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	bf14      	ite	ne
 800841e:	2202      	movne	r2, #2
 8008420:	2201      	moveq	r2, #1
 8008422:	6122      	str	r2, [r4, #16]
 8008424:	b1d5      	cbz	r5, 800845c <__d2b+0x98>
 8008426:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800842a:	4405      	add	r5, r0
 800842c:	f8c9 5000 	str.w	r5, [r9]
 8008430:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008434:	f8c8 0000 	str.w	r0, [r8]
 8008438:	4620      	mov	r0, r4
 800843a:	b003      	add	sp, #12
 800843c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008444:	e7d5      	b.n	80083f2 <__d2b+0x2e>
 8008446:	6161      	str	r1, [r4, #20]
 8008448:	e7e5      	b.n	8008416 <__d2b+0x52>
 800844a:	a801      	add	r0, sp, #4
 800844c:	f7ff fcde 	bl	8007e0c <__lo0bits>
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	6163      	str	r3, [r4, #20]
 8008454:	2201      	movs	r2, #1
 8008456:	6122      	str	r2, [r4, #16]
 8008458:	3020      	adds	r0, #32
 800845a:	e7e3      	b.n	8008424 <__d2b+0x60>
 800845c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008460:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008464:	f8c9 0000 	str.w	r0, [r9]
 8008468:	6918      	ldr	r0, [r3, #16]
 800846a:	f7ff fcaf 	bl	8007dcc <__hi0bits>
 800846e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008472:	e7df      	b.n	8008434 <__d2b+0x70>
 8008474:	08009fc8 	.word	0x08009fc8
 8008478:	0800a0b8 	.word	0x0800a0b8

0800847c <__ratio>:
 800847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	4688      	mov	r8, r1
 8008482:	4669      	mov	r1, sp
 8008484:	4681      	mov	r9, r0
 8008486:	f7ff ff4d 	bl	8008324 <__b2d>
 800848a:	a901      	add	r1, sp, #4
 800848c:	4640      	mov	r0, r8
 800848e:	ec55 4b10 	vmov	r4, r5, d0
 8008492:	f7ff ff47 	bl	8008324 <__b2d>
 8008496:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800849a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800849e:	eba3 0c02 	sub.w	ip, r3, r2
 80084a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084a6:	1a9b      	subs	r3, r3, r2
 80084a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80084ac:	ec51 0b10 	vmov	r0, r1, d0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bfd6      	itet	le
 80084b4:	460a      	movle	r2, r1
 80084b6:	462a      	movgt	r2, r5
 80084b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80084bc:	468b      	mov	fp, r1
 80084be:	462f      	mov	r7, r5
 80084c0:	bfd4      	ite	le
 80084c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80084c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80084ca:	4620      	mov	r0, r4
 80084cc:	ee10 2a10 	vmov	r2, s0
 80084d0:	465b      	mov	r3, fp
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 f9d2 	bl	800087c <__aeabi_ddiv>
 80084d8:	ec41 0b10 	vmov	d0, r0, r1
 80084dc:	b003      	add	sp, #12
 80084de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084e2 <__copybits>:
 80084e2:	3901      	subs	r1, #1
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	1149      	asrs	r1, r1, #5
 80084e8:	6914      	ldr	r4, [r2, #16]
 80084ea:	3101      	adds	r1, #1
 80084ec:	f102 0314 	add.w	r3, r2, #20
 80084f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084f8:	1f05      	subs	r5, r0, #4
 80084fa:	42a3      	cmp	r3, r4
 80084fc:	d30c      	bcc.n	8008518 <__copybits+0x36>
 80084fe:	1aa3      	subs	r3, r4, r2
 8008500:	3b11      	subs	r3, #17
 8008502:	f023 0303 	bic.w	r3, r3, #3
 8008506:	3211      	adds	r2, #17
 8008508:	42a2      	cmp	r2, r4
 800850a:	bf88      	it	hi
 800850c:	2300      	movhi	r3, #0
 800850e:	4418      	add	r0, r3
 8008510:	2300      	movs	r3, #0
 8008512:	4288      	cmp	r0, r1
 8008514:	d305      	bcc.n	8008522 <__copybits+0x40>
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	f853 6b04 	ldr.w	r6, [r3], #4
 800851c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008520:	e7eb      	b.n	80084fa <__copybits+0x18>
 8008522:	f840 3b04 	str.w	r3, [r0], #4
 8008526:	e7f4      	b.n	8008512 <__copybits+0x30>

08008528 <__any_on>:
 8008528:	f100 0214 	add.w	r2, r0, #20
 800852c:	6900      	ldr	r0, [r0, #16]
 800852e:	114b      	asrs	r3, r1, #5
 8008530:	4298      	cmp	r0, r3
 8008532:	b510      	push	{r4, lr}
 8008534:	db11      	blt.n	800855a <__any_on+0x32>
 8008536:	dd0a      	ble.n	800854e <__any_on+0x26>
 8008538:	f011 011f 	ands.w	r1, r1, #31
 800853c:	d007      	beq.n	800854e <__any_on+0x26>
 800853e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008542:	fa24 f001 	lsr.w	r0, r4, r1
 8008546:	fa00 f101 	lsl.w	r1, r0, r1
 800854a:	428c      	cmp	r4, r1
 800854c:	d10b      	bne.n	8008566 <__any_on+0x3e>
 800854e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008552:	4293      	cmp	r3, r2
 8008554:	d803      	bhi.n	800855e <__any_on+0x36>
 8008556:	2000      	movs	r0, #0
 8008558:	bd10      	pop	{r4, pc}
 800855a:	4603      	mov	r3, r0
 800855c:	e7f7      	b.n	800854e <__any_on+0x26>
 800855e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008562:	2900      	cmp	r1, #0
 8008564:	d0f5      	beq.n	8008552 <__any_on+0x2a>
 8008566:	2001      	movs	r0, #1
 8008568:	e7f6      	b.n	8008558 <__any_on+0x30>

0800856a <_calloc_r>:
 800856a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800856c:	fba1 2402 	umull	r2, r4, r1, r2
 8008570:	b94c      	cbnz	r4, 8008586 <_calloc_r+0x1c>
 8008572:	4611      	mov	r1, r2
 8008574:	9201      	str	r2, [sp, #4]
 8008576:	f000 f87b 	bl	8008670 <_malloc_r>
 800857a:	9a01      	ldr	r2, [sp, #4]
 800857c:	4605      	mov	r5, r0
 800857e:	b930      	cbnz	r0, 800858e <_calloc_r+0x24>
 8008580:	4628      	mov	r0, r5
 8008582:	b003      	add	sp, #12
 8008584:	bd30      	pop	{r4, r5, pc}
 8008586:	220c      	movs	r2, #12
 8008588:	6002      	str	r2, [r0, #0]
 800858a:	2500      	movs	r5, #0
 800858c:	e7f8      	b.n	8008580 <_calloc_r+0x16>
 800858e:	4621      	mov	r1, r4
 8008590:	f7fc f864 	bl	800465c <memset>
 8008594:	e7f4      	b.n	8008580 <_calloc_r+0x16>
	...

08008598 <_free_r>:
 8008598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800859a:	2900      	cmp	r1, #0
 800859c:	d044      	beq.n	8008628 <_free_r+0x90>
 800859e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085a2:	9001      	str	r0, [sp, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f1a1 0404 	sub.w	r4, r1, #4
 80085aa:	bfb8      	it	lt
 80085ac:	18e4      	addlt	r4, r4, r3
 80085ae:	f001 fae3 	bl	8009b78 <__malloc_lock>
 80085b2:	4a1e      	ldr	r2, [pc, #120]	; (800862c <_free_r+0x94>)
 80085b4:	9801      	ldr	r0, [sp, #4]
 80085b6:	6813      	ldr	r3, [r2, #0]
 80085b8:	b933      	cbnz	r3, 80085c8 <_free_r+0x30>
 80085ba:	6063      	str	r3, [r4, #4]
 80085bc:	6014      	str	r4, [r2, #0]
 80085be:	b003      	add	sp, #12
 80085c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085c4:	f001 bade 	b.w	8009b84 <__malloc_unlock>
 80085c8:	42a3      	cmp	r3, r4
 80085ca:	d908      	bls.n	80085de <_free_r+0x46>
 80085cc:	6825      	ldr	r5, [r4, #0]
 80085ce:	1961      	adds	r1, r4, r5
 80085d0:	428b      	cmp	r3, r1
 80085d2:	bf01      	itttt	eq
 80085d4:	6819      	ldreq	r1, [r3, #0]
 80085d6:	685b      	ldreq	r3, [r3, #4]
 80085d8:	1949      	addeq	r1, r1, r5
 80085da:	6021      	streq	r1, [r4, #0]
 80085dc:	e7ed      	b.n	80085ba <_free_r+0x22>
 80085de:	461a      	mov	r2, r3
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	b10b      	cbz	r3, 80085e8 <_free_r+0x50>
 80085e4:	42a3      	cmp	r3, r4
 80085e6:	d9fa      	bls.n	80085de <_free_r+0x46>
 80085e8:	6811      	ldr	r1, [r2, #0]
 80085ea:	1855      	adds	r5, r2, r1
 80085ec:	42a5      	cmp	r5, r4
 80085ee:	d10b      	bne.n	8008608 <_free_r+0x70>
 80085f0:	6824      	ldr	r4, [r4, #0]
 80085f2:	4421      	add	r1, r4
 80085f4:	1854      	adds	r4, r2, r1
 80085f6:	42a3      	cmp	r3, r4
 80085f8:	6011      	str	r1, [r2, #0]
 80085fa:	d1e0      	bne.n	80085be <_free_r+0x26>
 80085fc:	681c      	ldr	r4, [r3, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	6053      	str	r3, [r2, #4]
 8008602:	4421      	add	r1, r4
 8008604:	6011      	str	r1, [r2, #0]
 8008606:	e7da      	b.n	80085be <_free_r+0x26>
 8008608:	d902      	bls.n	8008610 <_free_r+0x78>
 800860a:	230c      	movs	r3, #12
 800860c:	6003      	str	r3, [r0, #0]
 800860e:	e7d6      	b.n	80085be <_free_r+0x26>
 8008610:	6825      	ldr	r5, [r4, #0]
 8008612:	1961      	adds	r1, r4, r5
 8008614:	428b      	cmp	r3, r1
 8008616:	bf04      	itt	eq
 8008618:	6819      	ldreq	r1, [r3, #0]
 800861a:	685b      	ldreq	r3, [r3, #4]
 800861c:	6063      	str	r3, [r4, #4]
 800861e:	bf04      	itt	eq
 8008620:	1949      	addeq	r1, r1, r5
 8008622:	6021      	streq	r1, [r4, #0]
 8008624:	6054      	str	r4, [r2, #4]
 8008626:	e7ca      	b.n	80085be <_free_r+0x26>
 8008628:	b003      	add	sp, #12
 800862a:	bd30      	pop	{r4, r5, pc}
 800862c:	200002a4 	.word	0x200002a4

08008630 <sbrk_aligned>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	4e0e      	ldr	r6, [pc, #56]	; (800866c <sbrk_aligned+0x3c>)
 8008634:	460c      	mov	r4, r1
 8008636:	6831      	ldr	r1, [r6, #0]
 8008638:	4605      	mov	r5, r0
 800863a:	b911      	cbnz	r1, 8008642 <sbrk_aligned+0x12>
 800863c:	f000 ff48 	bl	80094d0 <_sbrk_r>
 8008640:	6030      	str	r0, [r6, #0]
 8008642:	4621      	mov	r1, r4
 8008644:	4628      	mov	r0, r5
 8008646:	f000 ff43 	bl	80094d0 <_sbrk_r>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	d00a      	beq.n	8008664 <sbrk_aligned+0x34>
 800864e:	1cc4      	adds	r4, r0, #3
 8008650:	f024 0403 	bic.w	r4, r4, #3
 8008654:	42a0      	cmp	r0, r4
 8008656:	d007      	beq.n	8008668 <sbrk_aligned+0x38>
 8008658:	1a21      	subs	r1, r4, r0
 800865a:	4628      	mov	r0, r5
 800865c:	f000 ff38 	bl	80094d0 <_sbrk_r>
 8008660:	3001      	adds	r0, #1
 8008662:	d101      	bne.n	8008668 <sbrk_aligned+0x38>
 8008664:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008668:	4620      	mov	r0, r4
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	200002a8 	.word	0x200002a8

08008670 <_malloc_r>:
 8008670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008674:	1ccd      	adds	r5, r1, #3
 8008676:	f025 0503 	bic.w	r5, r5, #3
 800867a:	3508      	adds	r5, #8
 800867c:	2d0c      	cmp	r5, #12
 800867e:	bf38      	it	cc
 8008680:	250c      	movcc	r5, #12
 8008682:	2d00      	cmp	r5, #0
 8008684:	4607      	mov	r7, r0
 8008686:	db01      	blt.n	800868c <_malloc_r+0x1c>
 8008688:	42a9      	cmp	r1, r5
 800868a:	d905      	bls.n	8008698 <_malloc_r+0x28>
 800868c:	230c      	movs	r3, #12
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	2600      	movs	r6, #0
 8008692:	4630      	mov	r0, r6
 8008694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008698:	4e2e      	ldr	r6, [pc, #184]	; (8008754 <_malloc_r+0xe4>)
 800869a:	f001 fa6d 	bl	8009b78 <__malloc_lock>
 800869e:	6833      	ldr	r3, [r6, #0]
 80086a0:	461c      	mov	r4, r3
 80086a2:	bb34      	cbnz	r4, 80086f2 <_malloc_r+0x82>
 80086a4:	4629      	mov	r1, r5
 80086a6:	4638      	mov	r0, r7
 80086a8:	f7ff ffc2 	bl	8008630 <sbrk_aligned>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	4604      	mov	r4, r0
 80086b0:	d14d      	bne.n	800874e <_malloc_r+0xde>
 80086b2:	6834      	ldr	r4, [r6, #0]
 80086b4:	4626      	mov	r6, r4
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	d140      	bne.n	800873c <_malloc_r+0xcc>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	4631      	mov	r1, r6
 80086be:	4638      	mov	r0, r7
 80086c0:	eb04 0803 	add.w	r8, r4, r3
 80086c4:	f000 ff04 	bl	80094d0 <_sbrk_r>
 80086c8:	4580      	cmp	r8, r0
 80086ca:	d13a      	bne.n	8008742 <_malloc_r+0xd2>
 80086cc:	6821      	ldr	r1, [r4, #0]
 80086ce:	3503      	adds	r5, #3
 80086d0:	1a6d      	subs	r5, r5, r1
 80086d2:	f025 0503 	bic.w	r5, r5, #3
 80086d6:	3508      	adds	r5, #8
 80086d8:	2d0c      	cmp	r5, #12
 80086da:	bf38      	it	cc
 80086dc:	250c      	movcc	r5, #12
 80086de:	4629      	mov	r1, r5
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7ff ffa5 	bl	8008630 <sbrk_aligned>
 80086e6:	3001      	adds	r0, #1
 80086e8:	d02b      	beq.n	8008742 <_malloc_r+0xd2>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	442b      	add	r3, r5
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	e00e      	b.n	8008710 <_malloc_r+0xa0>
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	1b52      	subs	r2, r2, r5
 80086f6:	d41e      	bmi.n	8008736 <_malloc_r+0xc6>
 80086f8:	2a0b      	cmp	r2, #11
 80086fa:	d916      	bls.n	800872a <_malloc_r+0xba>
 80086fc:	1961      	adds	r1, r4, r5
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6025      	str	r5, [r4, #0]
 8008702:	bf18      	it	ne
 8008704:	6059      	strne	r1, [r3, #4]
 8008706:	6863      	ldr	r3, [r4, #4]
 8008708:	bf08      	it	eq
 800870a:	6031      	streq	r1, [r6, #0]
 800870c:	5162      	str	r2, [r4, r5]
 800870e:	604b      	str	r3, [r1, #4]
 8008710:	4638      	mov	r0, r7
 8008712:	f104 060b 	add.w	r6, r4, #11
 8008716:	f001 fa35 	bl	8009b84 <__malloc_unlock>
 800871a:	f026 0607 	bic.w	r6, r6, #7
 800871e:	1d23      	adds	r3, r4, #4
 8008720:	1af2      	subs	r2, r6, r3
 8008722:	d0b6      	beq.n	8008692 <_malloc_r+0x22>
 8008724:	1b9b      	subs	r3, r3, r6
 8008726:	50a3      	str	r3, [r4, r2]
 8008728:	e7b3      	b.n	8008692 <_malloc_r+0x22>
 800872a:	6862      	ldr	r2, [r4, #4]
 800872c:	42a3      	cmp	r3, r4
 800872e:	bf0c      	ite	eq
 8008730:	6032      	streq	r2, [r6, #0]
 8008732:	605a      	strne	r2, [r3, #4]
 8008734:	e7ec      	b.n	8008710 <_malloc_r+0xa0>
 8008736:	4623      	mov	r3, r4
 8008738:	6864      	ldr	r4, [r4, #4]
 800873a:	e7b2      	b.n	80086a2 <_malloc_r+0x32>
 800873c:	4634      	mov	r4, r6
 800873e:	6876      	ldr	r6, [r6, #4]
 8008740:	e7b9      	b.n	80086b6 <_malloc_r+0x46>
 8008742:	230c      	movs	r3, #12
 8008744:	603b      	str	r3, [r7, #0]
 8008746:	4638      	mov	r0, r7
 8008748:	f001 fa1c 	bl	8009b84 <__malloc_unlock>
 800874c:	e7a1      	b.n	8008692 <_malloc_r+0x22>
 800874e:	6025      	str	r5, [r4, #0]
 8008750:	e7de      	b.n	8008710 <_malloc_r+0xa0>
 8008752:	bf00      	nop
 8008754:	200002a4 	.word	0x200002a4

08008758 <__ssputs_r>:
 8008758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875c:	688e      	ldr	r6, [r1, #8]
 800875e:	429e      	cmp	r6, r3
 8008760:	4682      	mov	sl, r0
 8008762:	460c      	mov	r4, r1
 8008764:	4690      	mov	r8, r2
 8008766:	461f      	mov	r7, r3
 8008768:	d838      	bhi.n	80087dc <__ssputs_r+0x84>
 800876a:	898a      	ldrh	r2, [r1, #12]
 800876c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008770:	d032      	beq.n	80087d8 <__ssputs_r+0x80>
 8008772:	6825      	ldr	r5, [r4, #0]
 8008774:	6909      	ldr	r1, [r1, #16]
 8008776:	eba5 0901 	sub.w	r9, r5, r1
 800877a:	6965      	ldr	r5, [r4, #20]
 800877c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008780:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008784:	3301      	adds	r3, #1
 8008786:	444b      	add	r3, r9
 8008788:	106d      	asrs	r5, r5, #1
 800878a:	429d      	cmp	r5, r3
 800878c:	bf38      	it	cc
 800878e:	461d      	movcc	r5, r3
 8008790:	0553      	lsls	r3, r2, #21
 8008792:	d531      	bpl.n	80087f8 <__ssputs_r+0xa0>
 8008794:	4629      	mov	r1, r5
 8008796:	f7ff ff6b 	bl	8008670 <_malloc_r>
 800879a:	4606      	mov	r6, r0
 800879c:	b950      	cbnz	r0, 80087b4 <__ssputs_r+0x5c>
 800879e:	230c      	movs	r3, #12
 80087a0:	f8ca 3000 	str.w	r3, [sl]
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b4:	6921      	ldr	r1, [r4, #16]
 80087b6:	464a      	mov	r2, r9
 80087b8:	f7ff fa08 	bl	8007bcc <memcpy>
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087c6:	81a3      	strh	r3, [r4, #12]
 80087c8:	6126      	str	r6, [r4, #16]
 80087ca:	6165      	str	r5, [r4, #20]
 80087cc:	444e      	add	r6, r9
 80087ce:	eba5 0509 	sub.w	r5, r5, r9
 80087d2:	6026      	str	r6, [r4, #0]
 80087d4:	60a5      	str	r5, [r4, #8]
 80087d6:	463e      	mov	r6, r7
 80087d8:	42be      	cmp	r6, r7
 80087da:	d900      	bls.n	80087de <__ssputs_r+0x86>
 80087dc:	463e      	mov	r6, r7
 80087de:	6820      	ldr	r0, [r4, #0]
 80087e0:	4632      	mov	r2, r6
 80087e2:	4641      	mov	r1, r8
 80087e4:	f001 f9ae 	bl	8009b44 <memmove>
 80087e8:	68a3      	ldr	r3, [r4, #8]
 80087ea:	1b9b      	subs	r3, r3, r6
 80087ec:	60a3      	str	r3, [r4, #8]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	4433      	add	r3, r6
 80087f2:	6023      	str	r3, [r4, #0]
 80087f4:	2000      	movs	r0, #0
 80087f6:	e7db      	b.n	80087b0 <__ssputs_r+0x58>
 80087f8:	462a      	mov	r2, r5
 80087fa:	f001 f9c9 	bl	8009b90 <_realloc_r>
 80087fe:	4606      	mov	r6, r0
 8008800:	2800      	cmp	r0, #0
 8008802:	d1e1      	bne.n	80087c8 <__ssputs_r+0x70>
 8008804:	6921      	ldr	r1, [r4, #16]
 8008806:	4650      	mov	r0, sl
 8008808:	f7ff fec6 	bl	8008598 <_free_r>
 800880c:	e7c7      	b.n	800879e <__ssputs_r+0x46>
	...

08008810 <_svfiprintf_r>:
 8008810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	4698      	mov	r8, r3
 8008816:	898b      	ldrh	r3, [r1, #12]
 8008818:	061b      	lsls	r3, r3, #24
 800881a:	b09d      	sub	sp, #116	; 0x74
 800881c:	4607      	mov	r7, r0
 800881e:	460d      	mov	r5, r1
 8008820:	4614      	mov	r4, r2
 8008822:	d50e      	bpl.n	8008842 <_svfiprintf_r+0x32>
 8008824:	690b      	ldr	r3, [r1, #16]
 8008826:	b963      	cbnz	r3, 8008842 <_svfiprintf_r+0x32>
 8008828:	2140      	movs	r1, #64	; 0x40
 800882a:	f7ff ff21 	bl	8008670 <_malloc_r>
 800882e:	6028      	str	r0, [r5, #0]
 8008830:	6128      	str	r0, [r5, #16]
 8008832:	b920      	cbnz	r0, 800883e <_svfiprintf_r+0x2e>
 8008834:	230c      	movs	r3, #12
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800883c:	e0d1      	b.n	80089e2 <_svfiprintf_r+0x1d2>
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	616b      	str	r3, [r5, #20]
 8008842:	2300      	movs	r3, #0
 8008844:	9309      	str	r3, [sp, #36]	; 0x24
 8008846:	2320      	movs	r3, #32
 8008848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800884c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008850:	2330      	movs	r3, #48	; 0x30
 8008852:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089fc <_svfiprintf_r+0x1ec>
 8008856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800885a:	f04f 0901 	mov.w	r9, #1
 800885e:	4623      	mov	r3, r4
 8008860:	469a      	mov	sl, r3
 8008862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008866:	b10a      	cbz	r2, 800886c <_svfiprintf_r+0x5c>
 8008868:	2a25      	cmp	r2, #37	; 0x25
 800886a:	d1f9      	bne.n	8008860 <_svfiprintf_r+0x50>
 800886c:	ebba 0b04 	subs.w	fp, sl, r4
 8008870:	d00b      	beq.n	800888a <_svfiprintf_r+0x7a>
 8008872:	465b      	mov	r3, fp
 8008874:	4622      	mov	r2, r4
 8008876:	4629      	mov	r1, r5
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff ff6d 	bl	8008758 <__ssputs_r>
 800887e:	3001      	adds	r0, #1
 8008880:	f000 80aa 	beq.w	80089d8 <_svfiprintf_r+0x1c8>
 8008884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008886:	445a      	add	r2, fp
 8008888:	9209      	str	r2, [sp, #36]	; 0x24
 800888a:	f89a 3000 	ldrb.w	r3, [sl]
 800888e:	2b00      	cmp	r3, #0
 8008890:	f000 80a2 	beq.w	80089d8 <_svfiprintf_r+0x1c8>
 8008894:	2300      	movs	r3, #0
 8008896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800889a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800889e:	f10a 0a01 	add.w	sl, sl, #1
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	9307      	str	r3, [sp, #28]
 80088a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088aa:	931a      	str	r3, [sp, #104]	; 0x68
 80088ac:	4654      	mov	r4, sl
 80088ae:	2205      	movs	r2, #5
 80088b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088b4:	4851      	ldr	r0, [pc, #324]	; (80089fc <_svfiprintf_r+0x1ec>)
 80088b6:	f7f7 fcab 	bl	8000210 <memchr>
 80088ba:	9a04      	ldr	r2, [sp, #16]
 80088bc:	b9d8      	cbnz	r0, 80088f6 <_svfiprintf_r+0xe6>
 80088be:	06d0      	lsls	r0, r2, #27
 80088c0:	bf44      	itt	mi
 80088c2:	2320      	movmi	r3, #32
 80088c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088c8:	0711      	lsls	r1, r2, #28
 80088ca:	bf44      	itt	mi
 80088cc:	232b      	movmi	r3, #43	; 0x2b
 80088ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088d2:	f89a 3000 	ldrb.w	r3, [sl]
 80088d6:	2b2a      	cmp	r3, #42	; 0x2a
 80088d8:	d015      	beq.n	8008906 <_svfiprintf_r+0xf6>
 80088da:	9a07      	ldr	r2, [sp, #28]
 80088dc:	4654      	mov	r4, sl
 80088de:	2000      	movs	r0, #0
 80088e0:	f04f 0c0a 	mov.w	ip, #10
 80088e4:	4621      	mov	r1, r4
 80088e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088ea:	3b30      	subs	r3, #48	; 0x30
 80088ec:	2b09      	cmp	r3, #9
 80088ee:	d94e      	bls.n	800898e <_svfiprintf_r+0x17e>
 80088f0:	b1b0      	cbz	r0, 8008920 <_svfiprintf_r+0x110>
 80088f2:	9207      	str	r2, [sp, #28]
 80088f4:	e014      	b.n	8008920 <_svfiprintf_r+0x110>
 80088f6:	eba0 0308 	sub.w	r3, r0, r8
 80088fa:	fa09 f303 	lsl.w	r3, r9, r3
 80088fe:	4313      	orrs	r3, r2
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	46a2      	mov	sl, r4
 8008904:	e7d2      	b.n	80088ac <_svfiprintf_r+0x9c>
 8008906:	9b03      	ldr	r3, [sp, #12]
 8008908:	1d19      	adds	r1, r3, #4
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	9103      	str	r1, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfbb      	ittet	lt
 8008912:	425b      	neglt	r3, r3
 8008914:	f042 0202 	orrlt.w	r2, r2, #2
 8008918:	9307      	strge	r3, [sp, #28]
 800891a:	9307      	strlt	r3, [sp, #28]
 800891c:	bfb8      	it	lt
 800891e:	9204      	strlt	r2, [sp, #16]
 8008920:	7823      	ldrb	r3, [r4, #0]
 8008922:	2b2e      	cmp	r3, #46	; 0x2e
 8008924:	d10c      	bne.n	8008940 <_svfiprintf_r+0x130>
 8008926:	7863      	ldrb	r3, [r4, #1]
 8008928:	2b2a      	cmp	r3, #42	; 0x2a
 800892a:	d135      	bne.n	8008998 <_svfiprintf_r+0x188>
 800892c:	9b03      	ldr	r3, [sp, #12]
 800892e:	1d1a      	adds	r2, r3, #4
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	9203      	str	r2, [sp, #12]
 8008934:	2b00      	cmp	r3, #0
 8008936:	bfb8      	it	lt
 8008938:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800893c:	3402      	adds	r4, #2
 800893e:	9305      	str	r3, [sp, #20]
 8008940:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008a0c <_svfiprintf_r+0x1fc>
 8008944:	7821      	ldrb	r1, [r4, #0]
 8008946:	2203      	movs	r2, #3
 8008948:	4650      	mov	r0, sl
 800894a:	f7f7 fc61 	bl	8000210 <memchr>
 800894e:	b140      	cbz	r0, 8008962 <_svfiprintf_r+0x152>
 8008950:	2340      	movs	r3, #64	; 0x40
 8008952:	eba0 000a 	sub.w	r0, r0, sl
 8008956:	fa03 f000 	lsl.w	r0, r3, r0
 800895a:	9b04      	ldr	r3, [sp, #16]
 800895c:	4303      	orrs	r3, r0
 800895e:	3401      	adds	r4, #1
 8008960:	9304      	str	r3, [sp, #16]
 8008962:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008966:	4826      	ldr	r0, [pc, #152]	; (8008a00 <_svfiprintf_r+0x1f0>)
 8008968:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800896c:	2206      	movs	r2, #6
 800896e:	f7f7 fc4f 	bl	8000210 <memchr>
 8008972:	2800      	cmp	r0, #0
 8008974:	d038      	beq.n	80089e8 <_svfiprintf_r+0x1d8>
 8008976:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <_svfiprintf_r+0x1f4>)
 8008978:	bb1b      	cbnz	r3, 80089c2 <_svfiprintf_r+0x1b2>
 800897a:	9b03      	ldr	r3, [sp, #12]
 800897c:	3307      	adds	r3, #7
 800897e:	f023 0307 	bic.w	r3, r3, #7
 8008982:	3308      	adds	r3, #8
 8008984:	9303      	str	r3, [sp, #12]
 8008986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008988:	4433      	add	r3, r6
 800898a:	9309      	str	r3, [sp, #36]	; 0x24
 800898c:	e767      	b.n	800885e <_svfiprintf_r+0x4e>
 800898e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008992:	460c      	mov	r4, r1
 8008994:	2001      	movs	r0, #1
 8008996:	e7a5      	b.n	80088e4 <_svfiprintf_r+0xd4>
 8008998:	2300      	movs	r3, #0
 800899a:	3401      	adds	r4, #1
 800899c:	9305      	str	r3, [sp, #20]
 800899e:	4619      	mov	r1, r3
 80089a0:	f04f 0c0a 	mov.w	ip, #10
 80089a4:	4620      	mov	r0, r4
 80089a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089aa:	3a30      	subs	r2, #48	; 0x30
 80089ac:	2a09      	cmp	r2, #9
 80089ae:	d903      	bls.n	80089b8 <_svfiprintf_r+0x1a8>
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0c5      	beq.n	8008940 <_svfiprintf_r+0x130>
 80089b4:	9105      	str	r1, [sp, #20]
 80089b6:	e7c3      	b.n	8008940 <_svfiprintf_r+0x130>
 80089b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80089bc:	4604      	mov	r4, r0
 80089be:	2301      	movs	r3, #1
 80089c0:	e7f0      	b.n	80089a4 <_svfiprintf_r+0x194>
 80089c2:	ab03      	add	r3, sp, #12
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	462a      	mov	r2, r5
 80089c8:	4b0f      	ldr	r3, [pc, #60]	; (8008a08 <_svfiprintf_r+0x1f8>)
 80089ca:	a904      	add	r1, sp, #16
 80089cc:	4638      	mov	r0, r7
 80089ce:	f7fb feed 	bl	80047ac <_printf_float>
 80089d2:	1c42      	adds	r2, r0, #1
 80089d4:	4606      	mov	r6, r0
 80089d6:	d1d6      	bne.n	8008986 <_svfiprintf_r+0x176>
 80089d8:	89ab      	ldrh	r3, [r5, #12]
 80089da:	065b      	lsls	r3, r3, #25
 80089dc:	f53f af2c 	bmi.w	8008838 <_svfiprintf_r+0x28>
 80089e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089e2:	b01d      	add	sp, #116	; 0x74
 80089e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	462a      	mov	r2, r5
 80089ee:	4b06      	ldr	r3, [pc, #24]	; (8008a08 <_svfiprintf_r+0x1f8>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4638      	mov	r0, r7
 80089f4:	f7fc f97e 	bl	8004cf4 <_printf_i>
 80089f8:	e7eb      	b.n	80089d2 <_svfiprintf_r+0x1c2>
 80089fa:	bf00      	nop
 80089fc:	0800a214 	.word	0x0800a214
 8008a00:	0800a21e 	.word	0x0800a21e
 8008a04:	080047ad 	.word	0x080047ad
 8008a08:	08008759 	.word	0x08008759
 8008a0c:	0800a21a 	.word	0x0800a21a

08008a10 <__sfputc_r>:
 8008a10:	6893      	ldr	r3, [r2, #8]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	b410      	push	{r4}
 8008a18:	6093      	str	r3, [r2, #8]
 8008a1a:	da08      	bge.n	8008a2e <__sfputc_r+0x1e>
 8008a1c:	6994      	ldr	r4, [r2, #24]
 8008a1e:	42a3      	cmp	r3, r4
 8008a20:	db01      	blt.n	8008a26 <__sfputc_r+0x16>
 8008a22:	290a      	cmp	r1, #10
 8008a24:	d103      	bne.n	8008a2e <__sfputc_r+0x1e>
 8008a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a2a:	f000 bf37 	b.w	800989c <__swbuf_r>
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	1c58      	adds	r0, r3, #1
 8008a32:	6010      	str	r0, [r2, #0]
 8008a34:	7019      	strb	r1, [r3, #0]
 8008a36:	4608      	mov	r0, r1
 8008a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <__sfputs_r>:
 8008a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a40:	4606      	mov	r6, r0
 8008a42:	460f      	mov	r7, r1
 8008a44:	4614      	mov	r4, r2
 8008a46:	18d5      	adds	r5, r2, r3
 8008a48:	42ac      	cmp	r4, r5
 8008a4a:	d101      	bne.n	8008a50 <__sfputs_r+0x12>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e007      	b.n	8008a60 <__sfputs_r+0x22>
 8008a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a54:	463a      	mov	r2, r7
 8008a56:	4630      	mov	r0, r6
 8008a58:	f7ff ffda 	bl	8008a10 <__sfputc_r>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d1f3      	bne.n	8008a48 <__sfputs_r+0xa>
 8008a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a64 <_vfiprintf_r>:
 8008a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	460d      	mov	r5, r1
 8008a6a:	b09d      	sub	sp, #116	; 0x74
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	4698      	mov	r8, r3
 8008a70:	4606      	mov	r6, r0
 8008a72:	b118      	cbz	r0, 8008a7c <_vfiprintf_r+0x18>
 8008a74:	6983      	ldr	r3, [r0, #24]
 8008a76:	b90b      	cbnz	r3, 8008a7c <_vfiprintf_r+0x18>
 8008a78:	f7fe fbf8 	bl	800726c <__sinit>
 8008a7c:	4b89      	ldr	r3, [pc, #548]	; (8008ca4 <_vfiprintf_r+0x240>)
 8008a7e:	429d      	cmp	r5, r3
 8008a80:	d11b      	bne.n	8008aba <_vfiprintf_r+0x56>
 8008a82:	6875      	ldr	r5, [r6, #4]
 8008a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a86:	07d9      	lsls	r1, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <_vfiprintf_r+0x32>
 8008a8a:	89ab      	ldrh	r3, [r5, #12]
 8008a8c:	059a      	lsls	r2, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_vfiprintf_r+0x32>
 8008a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a92:	f7ff f81a 	bl	8007aca <__retarget_lock_acquire_recursive>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	071b      	lsls	r3, r3, #28
 8008a9a:	d501      	bpl.n	8008aa0 <_vfiprintf_r+0x3c>
 8008a9c:	692b      	ldr	r3, [r5, #16]
 8008a9e:	b9eb      	cbnz	r3, 8008adc <_vfiprintf_r+0x78>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f000 ff6c 	bl	8009980 <__swsetup_r>
 8008aa8:	b1c0      	cbz	r0, 8008adc <_vfiprintf_r+0x78>
 8008aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aac:	07dc      	lsls	r4, r3, #31
 8008aae:	d50e      	bpl.n	8008ace <_vfiprintf_r+0x6a>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ab4:	b01d      	add	sp, #116	; 0x74
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	4b7b      	ldr	r3, [pc, #492]	; (8008ca8 <_vfiprintf_r+0x244>)
 8008abc:	429d      	cmp	r5, r3
 8008abe:	d101      	bne.n	8008ac4 <_vfiprintf_r+0x60>
 8008ac0:	68b5      	ldr	r5, [r6, #8]
 8008ac2:	e7df      	b.n	8008a84 <_vfiprintf_r+0x20>
 8008ac4:	4b79      	ldr	r3, [pc, #484]	; (8008cac <_vfiprintf_r+0x248>)
 8008ac6:	429d      	cmp	r5, r3
 8008ac8:	bf08      	it	eq
 8008aca:	68f5      	ldreq	r5, [r6, #12]
 8008acc:	e7da      	b.n	8008a84 <_vfiprintf_r+0x20>
 8008ace:	89ab      	ldrh	r3, [r5, #12]
 8008ad0:	0598      	lsls	r0, r3, #22
 8008ad2:	d4ed      	bmi.n	8008ab0 <_vfiprintf_r+0x4c>
 8008ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ad6:	f7fe fff9 	bl	8007acc <__retarget_lock_release_recursive>
 8008ada:	e7e9      	b.n	8008ab0 <_vfiprintf_r+0x4c>
 8008adc:	2300      	movs	r3, #0
 8008ade:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aea:	2330      	movs	r3, #48	; 0x30
 8008aec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cb0 <_vfiprintf_r+0x24c>
 8008af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008af4:	f04f 0901 	mov.w	r9, #1
 8008af8:	4623      	mov	r3, r4
 8008afa:	469a      	mov	sl, r3
 8008afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b00:	b10a      	cbz	r2, 8008b06 <_vfiprintf_r+0xa2>
 8008b02:	2a25      	cmp	r2, #37	; 0x25
 8008b04:	d1f9      	bne.n	8008afa <_vfiprintf_r+0x96>
 8008b06:	ebba 0b04 	subs.w	fp, sl, r4
 8008b0a:	d00b      	beq.n	8008b24 <_vfiprintf_r+0xc0>
 8008b0c:	465b      	mov	r3, fp
 8008b0e:	4622      	mov	r2, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7ff ff93 	bl	8008a3e <__sfputs_r>
 8008b18:	3001      	adds	r0, #1
 8008b1a:	f000 80aa 	beq.w	8008c72 <_vfiprintf_r+0x20e>
 8008b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b20:	445a      	add	r2, fp
 8008b22:	9209      	str	r2, [sp, #36]	; 0x24
 8008b24:	f89a 3000 	ldrb.w	r3, [sl]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 80a2 	beq.w	8008c72 <_vfiprintf_r+0x20e>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b38:	f10a 0a01 	add.w	sl, sl, #1
 8008b3c:	9304      	str	r3, [sp, #16]
 8008b3e:	9307      	str	r3, [sp, #28]
 8008b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b44:	931a      	str	r3, [sp, #104]	; 0x68
 8008b46:	4654      	mov	r4, sl
 8008b48:	2205      	movs	r2, #5
 8008b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b4e:	4858      	ldr	r0, [pc, #352]	; (8008cb0 <_vfiprintf_r+0x24c>)
 8008b50:	f7f7 fb5e 	bl	8000210 <memchr>
 8008b54:	9a04      	ldr	r2, [sp, #16]
 8008b56:	b9d8      	cbnz	r0, 8008b90 <_vfiprintf_r+0x12c>
 8008b58:	06d1      	lsls	r1, r2, #27
 8008b5a:	bf44      	itt	mi
 8008b5c:	2320      	movmi	r3, #32
 8008b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b62:	0713      	lsls	r3, r2, #28
 8008b64:	bf44      	itt	mi
 8008b66:	232b      	movmi	r3, #43	; 0x2b
 8008b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b70:	2b2a      	cmp	r3, #42	; 0x2a
 8008b72:	d015      	beq.n	8008ba0 <_vfiprintf_r+0x13c>
 8008b74:	9a07      	ldr	r2, [sp, #28]
 8008b76:	4654      	mov	r4, sl
 8008b78:	2000      	movs	r0, #0
 8008b7a:	f04f 0c0a 	mov.w	ip, #10
 8008b7e:	4621      	mov	r1, r4
 8008b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b84:	3b30      	subs	r3, #48	; 0x30
 8008b86:	2b09      	cmp	r3, #9
 8008b88:	d94e      	bls.n	8008c28 <_vfiprintf_r+0x1c4>
 8008b8a:	b1b0      	cbz	r0, 8008bba <_vfiprintf_r+0x156>
 8008b8c:	9207      	str	r2, [sp, #28]
 8008b8e:	e014      	b.n	8008bba <_vfiprintf_r+0x156>
 8008b90:	eba0 0308 	sub.w	r3, r0, r8
 8008b94:	fa09 f303 	lsl.w	r3, r9, r3
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	9304      	str	r3, [sp, #16]
 8008b9c:	46a2      	mov	sl, r4
 8008b9e:	e7d2      	b.n	8008b46 <_vfiprintf_r+0xe2>
 8008ba0:	9b03      	ldr	r3, [sp, #12]
 8008ba2:	1d19      	adds	r1, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	9103      	str	r1, [sp, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bfbb      	ittet	lt
 8008bac:	425b      	neglt	r3, r3
 8008bae:	f042 0202 	orrlt.w	r2, r2, #2
 8008bb2:	9307      	strge	r3, [sp, #28]
 8008bb4:	9307      	strlt	r3, [sp, #28]
 8008bb6:	bfb8      	it	lt
 8008bb8:	9204      	strlt	r2, [sp, #16]
 8008bba:	7823      	ldrb	r3, [r4, #0]
 8008bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8008bbe:	d10c      	bne.n	8008bda <_vfiprintf_r+0x176>
 8008bc0:	7863      	ldrb	r3, [r4, #1]
 8008bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc4:	d135      	bne.n	8008c32 <_vfiprintf_r+0x1ce>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	1d1a      	adds	r2, r3, #4
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	9203      	str	r2, [sp, #12]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	bfb8      	it	lt
 8008bd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008bd6:	3402      	adds	r4, #2
 8008bd8:	9305      	str	r3, [sp, #20]
 8008bda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cc0 <_vfiprintf_r+0x25c>
 8008bde:	7821      	ldrb	r1, [r4, #0]
 8008be0:	2203      	movs	r2, #3
 8008be2:	4650      	mov	r0, sl
 8008be4:	f7f7 fb14 	bl	8000210 <memchr>
 8008be8:	b140      	cbz	r0, 8008bfc <_vfiprintf_r+0x198>
 8008bea:	2340      	movs	r3, #64	; 0x40
 8008bec:	eba0 000a 	sub.w	r0, r0, sl
 8008bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8008bf4:	9b04      	ldr	r3, [sp, #16]
 8008bf6:	4303      	orrs	r3, r0
 8008bf8:	3401      	adds	r4, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c00:	482c      	ldr	r0, [pc, #176]	; (8008cb4 <_vfiprintf_r+0x250>)
 8008c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c06:	2206      	movs	r2, #6
 8008c08:	f7f7 fb02 	bl	8000210 <memchr>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d03f      	beq.n	8008c90 <_vfiprintf_r+0x22c>
 8008c10:	4b29      	ldr	r3, [pc, #164]	; (8008cb8 <_vfiprintf_r+0x254>)
 8008c12:	bb1b      	cbnz	r3, 8008c5c <_vfiprintf_r+0x1f8>
 8008c14:	9b03      	ldr	r3, [sp, #12]
 8008c16:	3307      	adds	r3, #7
 8008c18:	f023 0307 	bic.w	r3, r3, #7
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	9303      	str	r3, [sp, #12]
 8008c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c22:	443b      	add	r3, r7
 8008c24:	9309      	str	r3, [sp, #36]	; 0x24
 8008c26:	e767      	b.n	8008af8 <_vfiprintf_r+0x94>
 8008c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	2001      	movs	r0, #1
 8008c30:	e7a5      	b.n	8008b7e <_vfiprintf_r+0x11a>
 8008c32:	2300      	movs	r3, #0
 8008c34:	3401      	adds	r4, #1
 8008c36:	9305      	str	r3, [sp, #20]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f04f 0c0a 	mov.w	ip, #10
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c44:	3a30      	subs	r2, #48	; 0x30
 8008c46:	2a09      	cmp	r2, #9
 8008c48:	d903      	bls.n	8008c52 <_vfiprintf_r+0x1ee>
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d0c5      	beq.n	8008bda <_vfiprintf_r+0x176>
 8008c4e:	9105      	str	r1, [sp, #20]
 8008c50:	e7c3      	b.n	8008bda <_vfiprintf_r+0x176>
 8008c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c56:	4604      	mov	r4, r0
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e7f0      	b.n	8008c3e <_vfiprintf_r+0x1da>
 8008c5c:	ab03      	add	r3, sp, #12
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	462a      	mov	r2, r5
 8008c62:	4b16      	ldr	r3, [pc, #88]	; (8008cbc <_vfiprintf_r+0x258>)
 8008c64:	a904      	add	r1, sp, #16
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7fb fda0 	bl	80047ac <_printf_float>
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	1c78      	adds	r0, r7, #1
 8008c70:	d1d6      	bne.n	8008c20 <_vfiprintf_r+0x1bc>
 8008c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c74:	07d9      	lsls	r1, r3, #31
 8008c76:	d405      	bmi.n	8008c84 <_vfiprintf_r+0x220>
 8008c78:	89ab      	ldrh	r3, [r5, #12]
 8008c7a:	059a      	lsls	r2, r3, #22
 8008c7c:	d402      	bmi.n	8008c84 <_vfiprintf_r+0x220>
 8008c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c80:	f7fe ff24 	bl	8007acc <__retarget_lock_release_recursive>
 8008c84:	89ab      	ldrh	r3, [r5, #12]
 8008c86:	065b      	lsls	r3, r3, #25
 8008c88:	f53f af12 	bmi.w	8008ab0 <_vfiprintf_r+0x4c>
 8008c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c8e:	e711      	b.n	8008ab4 <_vfiprintf_r+0x50>
 8008c90:	ab03      	add	r3, sp, #12
 8008c92:	9300      	str	r3, [sp, #0]
 8008c94:	462a      	mov	r2, r5
 8008c96:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <_vfiprintf_r+0x258>)
 8008c98:	a904      	add	r1, sp, #16
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7fc f82a 	bl	8004cf4 <_printf_i>
 8008ca0:	e7e4      	b.n	8008c6c <_vfiprintf_r+0x208>
 8008ca2:	bf00      	nop
 8008ca4:	08009ffc 	.word	0x08009ffc
 8008ca8:	0800a01c 	.word	0x0800a01c
 8008cac:	08009fdc 	.word	0x08009fdc
 8008cb0:	0800a214 	.word	0x0800a214
 8008cb4:	0800a21e 	.word	0x0800a21e
 8008cb8:	080047ad 	.word	0x080047ad
 8008cbc:	08008a3f 	.word	0x08008a3f
 8008cc0:	0800a21a 	.word	0x0800a21a

08008cc4 <__svfiscanf_r>:
 8008cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	461d      	mov	r5, r3
 8008cca:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8008ccc:	07df      	lsls	r7, r3, #31
 8008cce:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	4692      	mov	sl, r2
 8008cd8:	d405      	bmi.n	8008ce6 <__svfiscanf_r+0x22>
 8008cda:	898b      	ldrh	r3, [r1, #12]
 8008cdc:	0598      	lsls	r0, r3, #22
 8008cde:	d402      	bmi.n	8008ce6 <__svfiscanf_r+0x22>
 8008ce0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8008ce2:	f7fe fef2 	bl	8007aca <__retarget_lock_acquire_recursive>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8008cec:	4ba6      	ldr	r3, [pc, #664]	; (8008f88 <__svfiscanf_r+0x2c4>)
 8008cee:	93a0      	str	r3, [sp, #640]	; 0x280
 8008cf0:	f10d 0804 	add.w	r8, sp, #4
 8008cf4:	4ba5      	ldr	r3, [pc, #660]	; (8008f8c <__svfiscanf_r+0x2c8>)
 8008cf6:	4fa6      	ldr	r7, [pc, #664]	; (8008f90 <__svfiscanf_r+0x2cc>)
 8008cf8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008f94 <__svfiscanf_r+0x2d0>
 8008cfc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008d00:	93a1      	str	r3, [sp, #644]	; 0x284
 8008d02:	9500      	str	r5, [sp, #0]
 8008d04:	f89a 3000 	ldrb.w	r3, [sl]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f000 8173 	beq.w	8008ff4 <__svfiscanf_r+0x330>
 8008d0e:	5dd9      	ldrb	r1, [r3, r7]
 8008d10:	f011 0108 	ands.w	r1, r1, #8
 8008d14:	f10a 0501 	add.w	r5, sl, #1
 8008d18:	d019      	beq.n	8008d4e <__svfiscanf_r+0x8a>
 8008d1a:	6863      	ldr	r3, [r4, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dd0f      	ble.n	8008d40 <__svfiscanf_r+0x7c>
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	5cba      	ldrb	r2, [r7, r2]
 8008d26:	0711      	lsls	r1, r2, #28
 8008d28:	d401      	bmi.n	8008d2e <__svfiscanf_r+0x6a>
 8008d2a:	46aa      	mov	sl, r5
 8008d2c:	e7ea      	b.n	8008d04 <__svfiscanf_r+0x40>
 8008d2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008d30:	3201      	adds	r2, #1
 8008d32:	9245      	str	r2, [sp, #276]	; 0x114
 8008d34:	6862      	ldr	r2, [r4, #4]
 8008d36:	3301      	adds	r3, #1
 8008d38:	3a01      	subs	r2, #1
 8008d3a:	6062      	str	r2, [r4, #4]
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	e7ec      	b.n	8008d1a <__svfiscanf_r+0x56>
 8008d40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008d42:	4621      	mov	r1, r4
 8008d44:	4630      	mov	r0, r6
 8008d46:	4798      	blx	r3
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0e9      	beq.n	8008d20 <__svfiscanf_r+0x5c>
 8008d4c:	e7ed      	b.n	8008d2a <__svfiscanf_r+0x66>
 8008d4e:	2b25      	cmp	r3, #37	; 0x25
 8008d50:	d012      	beq.n	8008d78 <__svfiscanf_r+0xb4>
 8008d52:	469a      	mov	sl, r3
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f340 8095 	ble.w	8008e86 <__svfiscanf_r+0x1c2>
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	7813      	ldrb	r3, [r2, #0]
 8008d60:	4553      	cmp	r3, sl
 8008d62:	f040 8147 	bne.w	8008ff4 <__svfiscanf_r+0x330>
 8008d66:	6863      	ldr	r3, [r4, #4]
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008d6e:	3201      	adds	r2, #1
 8008d70:	3301      	adds	r3, #1
 8008d72:	6022      	str	r2, [r4, #0]
 8008d74:	9345      	str	r3, [sp, #276]	; 0x114
 8008d76:	e7d8      	b.n	8008d2a <__svfiscanf_r+0x66>
 8008d78:	9141      	str	r1, [sp, #260]	; 0x104
 8008d7a:	9143      	str	r1, [sp, #268]	; 0x10c
 8008d7c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008d80:	2b2a      	cmp	r3, #42	; 0x2a
 8008d82:	bf02      	ittt	eq
 8008d84:	2310      	moveq	r3, #16
 8008d86:	9341      	streq	r3, [sp, #260]	; 0x104
 8008d88:	f10a 0502 	addeq.w	r5, sl, #2
 8008d8c:	220a      	movs	r2, #10
 8008d8e:	46aa      	mov	sl, r5
 8008d90:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008d94:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008d98:	2b09      	cmp	r3, #9
 8008d9a:	d91e      	bls.n	8008dda <__svfiscanf_r+0x116>
 8008d9c:	487d      	ldr	r0, [pc, #500]	; (8008f94 <__svfiscanf_r+0x2d0>)
 8008d9e:	2203      	movs	r2, #3
 8008da0:	f7f7 fa36 	bl	8000210 <memchr>
 8008da4:	b140      	cbz	r0, 8008db8 <__svfiscanf_r+0xf4>
 8008da6:	2301      	movs	r3, #1
 8008da8:	eba0 0009 	sub.w	r0, r0, r9
 8008dac:	fa03 f000 	lsl.w	r0, r3, r0
 8008db0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008db2:	4318      	orrs	r0, r3
 8008db4:	9041      	str	r0, [sp, #260]	; 0x104
 8008db6:	4655      	mov	r5, sl
 8008db8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008dbc:	2b78      	cmp	r3, #120	; 0x78
 8008dbe:	d807      	bhi.n	8008dd0 <__svfiscanf_r+0x10c>
 8008dc0:	2b57      	cmp	r3, #87	; 0x57
 8008dc2:	d811      	bhi.n	8008de8 <__svfiscanf_r+0x124>
 8008dc4:	2b25      	cmp	r3, #37	; 0x25
 8008dc6:	d0c4      	beq.n	8008d52 <__svfiscanf_r+0x8e>
 8008dc8:	d858      	bhi.n	8008e7c <__svfiscanf_r+0x1b8>
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 80c8 	beq.w	8008f60 <__svfiscanf_r+0x29c>
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	9347      	str	r3, [sp, #284]	; 0x11c
 8008dd4:	230a      	movs	r3, #10
 8008dd6:	9342      	str	r3, [sp, #264]	; 0x108
 8008dd8:	e07c      	b.n	8008ed4 <__svfiscanf_r+0x210>
 8008dda:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008ddc:	fb02 1103 	mla	r1, r2, r3, r1
 8008de0:	3930      	subs	r1, #48	; 0x30
 8008de2:	9143      	str	r1, [sp, #268]	; 0x10c
 8008de4:	4655      	mov	r5, sl
 8008de6:	e7d2      	b.n	8008d8e <__svfiscanf_r+0xca>
 8008de8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008dec:	2a20      	cmp	r2, #32
 8008dee:	d8ef      	bhi.n	8008dd0 <__svfiscanf_r+0x10c>
 8008df0:	a101      	add	r1, pc, #4	; (adr r1, 8008df8 <__svfiscanf_r+0x134>)
 8008df2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008ebf 	.word	0x08008ebf
 8008dfc:	08008dd1 	.word	0x08008dd1
 8008e00:	08008dd1 	.word	0x08008dd1
 8008e04:	08008f1d 	.word	0x08008f1d
 8008e08:	08008dd1 	.word	0x08008dd1
 8008e0c:	08008dd1 	.word	0x08008dd1
 8008e10:	08008dd1 	.word	0x08008dd1
 8008e14:	08008dd1 	.word	0x08008dd1
 8008e18:	08008dd1 	.word	0x08008dd1
 8008e1c:	08008dd1 	.word	0x08008dd1
 8008e20:	08008dd1 	.word	0x08008dd1
 8008e24:	08008f33 	.word	0x08008f33
 8008e28:	08008f09 	.word	0x08008f09
 8008e2c:	08008e83 	.word	0x08008e83
 8008e30:	08008e83 	.word	0x08008e83
 8008e34:	08008e83 	.word	0x08008e83
 8008e38:	08008dd1 	.word	0x08008dd1
 8008e3c:	08008f0d 	.word	0x08008f0d
 8008e40:	08008dd1 	.word	0x08008dd1
 8008e44:	08008dd1 	.word	0x08008dd1
 8008e48:	08008dd1 	.word	0x08008dd1
 8008e4c:	08008dd1 	.word	0x08008dd1
 8008e50:	08008f43 	.word	0x08008f43
 8008e54:	08008f15 	.word	0x08008f15
 8008e58:	08008eb7 	.word	0x08008eb7
 8008e5c:	08008dd1 	.word	0x08008dd1
 8008e60:	08008dd1 	.word	0x08008dd1
 8008e64:	08008f3f 	.word	0x08008f3f
 8008e68:	08008dd1 	.word	0x08008dd1
 8008e6c:	08008f09 	.word	0x08008f09
 8008e70:	08008dd1 	.word	0x08008dd1
 8008e74:	08008dd1 	.word	0x08008dd1
 8008e78:	08008ebf 	.word	0x08008ebf
 8008e7c:	3b45      	subs	r3, #69	; 0x45
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d8a6      	bhi.n	8008dd0 <__svfiscanf_r+0x10c>
 8008e82:	2305      	movs	r3, #5
 8008e84:	e025      	b.n	8008ed2 <__svfiscanf_r+0x20e>
 8008e86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008e88:	4621      	mov	r1, r4
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4798      	blx	r3
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f43f af64 	beq.w	8008d5c <__svfiscanf_r+0x98>
 8008e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e96:	07da      	lsls	r2, r3, #31
 8008e98:	f140 80a4 	bpl.w	8008fe4 <__svfiscanf_r+0x320>
 8008e9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d067      	beq.n	8008f72 <__svfiscanf_r+0x2ae>
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ea8:	bf18      	it	ne
 8008eaa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008eae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8008eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008eb8:	f042 0220 	orr.w	r2, r2, #32
 8008ebc:	9241      	str	r2, [sp, #260]	; 0x104
 8008ebe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ec4:	9241      	str	r2, [sp, #260]	; 0x104
 8008ec6:	2210      	movs	r2, #16
 8008ec8:	2b6f      	cmp	r3, #111	; 0x6f
 8008eca:	9242      	str	r2, [sp, #264]	; 0x108
 8008ecc:	bf34      	ite	cc
 8008ece:	2303      	movcc	r3, #3
 8008ed0:	2304      	movcs	r3, #4
 8008ed2:	9347      	str	r3, [sp, #284]	; 0x11c
 8008ed4:	6863      	ldr	r3, [r4, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dd4e      	ble.n	8008f78 <__svfiscanf_r+0x2b4>
 8008eda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008edc:	065b      	lsls	r3, r3, #25
 8008ede:	d404      	bmi.n	8008eea <__svfiscanf_r+0x226>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	781a      	ldrb	r2, [r3, #0]
 8008ee4:	5cba      	ldrb	r2, [r7, r2]
 8008ee6:	0710      	lsls	r0, r2, #28
 8008ee8:	d456      	bmi.n	8008f98 <__svfiscanf_r+0x2d4>
 8008eea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	dc65      	bgt.n	8008fbc <__svfiscanf_r+0x2f8>
 8008ef0:	466b      	mov	r3, sp
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	a941      	add	r1, sp, #260	; 0x104
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f000 f8b2 	bl	8009060 <_scanf_chars>
 8008efc:	2801      	cmp	r0, #1
 8008efe:	d079      	beq.n	8008ff4 <__svfiscanf_r+0x330>
 8008f00:	2802      	cmp	r0, #2
 8008f02:	f47f af12 	bne.w	8008d2a <__svfiscanf_r+0x66>
 8008f06:	e7c5      	b.n	8008e94 <__svfiscanf_r+0x1d0>
 8008f08:	220a      	movs	r2, #10
 8008f0a:	e7dd      	b.n	8008ec8 <__svfiscanf_r+0x204>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9342      	str	r3, [sp, #264]	; 0x108
 8008f10:	2303      	movs	r3, #3
 8008f12:	e7de      	b.n	8008ed2 <__svfiscanf_r+0x20e>
 8008f14:	2308      	movs	r3, #8
 8008f16:	9342      	str	r3, [sp, #264]	; 0x108
 8008f18:	2304      	movs	r3, #4
 8008f1a:	e7da      	b.n	8008ed2 <__svfiscanf_r+0x20e>
 8008f1c:	4629      	mov	r1, r5
 8008f1e:	4640      	mov	r0, r8
 8008f20:	f000 fae6 	bl	80094f0 <__sccl>
 8008f24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2a:	9341      	str	r3, [sp, #260]	; 0x104
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e7cf      	b.n	8008ed2 <__svfiscanf_r+0x20e>
 8008f32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f38:	9341      	str	r3, [sp, #260]	; 0x104
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e7c9      	b.n	8008ed2 <__svfiscanf_r+0x20e>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e7c7      	b.n	8008ed2 <__svfiscanf_r+0x20e>
 8008f42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008f44:	06c3      	lsls	r3, r0, #27
 8008f46:	f53f aef0 	bmi.w	8008d2a <__svfiscanf_r+0x66>
 8008f4a:	9b00      	ldr	r3, [sp, #0]
 8008f4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f4e:	1d19      	adds	r1, r3, #4
 8008f50:	9100      	str	r1, [sp, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f010 0f01 	tst.w	r0, #1
 8008f58:	bf14      	ite	ne
 8008f5a:	801a      	strhne	r2, [r3, #0]
 8008f5c:	601a      	streq	r2, [r3, #0]
 8008f5e:	e6e4      	b.n	8008d2a <__svfiscanf_r+0x66>
 8008f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f62:	07d8      	lsls	r0, r3, #31
 8008f64:	d405      	bmi.n	8008f72 <__svfiscanf_r+0x2ae>
 8008f66:	89a3      	ldrh	r3, [r4, #12]
 8008f68:	0599      	lsls	r1, r3, #22
 8008f6a:	d402      	bmi.n	8008f72 <__svfiscanf_r+0x2ae>
 8008f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f6e:	f7fe fdad 	bl	8007acc <__retarget_lock_release_recursive>
 8008f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f76:	e79a      	b.n	8008eae <__svfiscanf_r+0x1ea>
 8008f78:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4798      	blx	r3
 8008f80:	2800      	cmp	r0, #0
 8008f82:	d0aa      	beq.n	8008eda <__svfiscanf_r+0x216>
 8008f84:	e786      	b.n	8008e94 <__svfiscanf_r+0x1d0>
 8008f86:	bf00      	nop
 8008f88:	0800976d 	.word	0x0800976d
 8008f8c:	080093a9 	.word	0x080093a9
 8008f90:	08009e49 	.word	0x08009e49
 8008f94:	0800a21a 	.word	0x0800a21a
 8008f98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008f9a:	3201      	adds	r2, #1
 8008f9c:	9245      	str	r2, [sp, #276]	; 0x114
 8008f9e:	6862      	ldr	r2, [r4, #4]
 8008fa0:	3a01      	subs	r2, #1
 8008fa2:	2a00      	cmp	r2, #0
 8008fa4:	6062      	str	r2, [r4, #4]
 8008fa6:	dd02      	ble.n	8008fae <__svfiscanf_r+0x2ea>
 8008fa8:	3301      	adds	r3, #1
 8008faa:	6023      	str	r3, [r4, #0]
 8008fac:	e798      	b.n	8008ee0 <__svfiscanf_r+0x21c>
 8008fae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008fb0:	4621      	mov	r1, r4
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	4798      	blx	r3
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d092      	beq.n	8008ee0 <__svfiscanf_r+0x21c>
 8008fba:	e76b      	b.n	8008e94 <__svfiscanf_r+0x1d0>
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	dc06      	bgt.n	8008fce <__svfiscanf_r+0x30a>
 8008fc0:	466b      	mov	r3, sp
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	a941      	add	r1, sp, #260	; 0x104
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f000 f8a4 	bl	8009114 <_scanf_i>
 8008fcc:	e796      	b.n	8008efc <__svfiscanf_r+0x238>
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <__svfiscanf_r+0x348>)
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f43f aeaa 	beq.w	8008d2a <__svfiscanf_r+0x66>
 8008fd6:	466b      	mov	r3, sp
 8008fd8:	4622      	mov	r2, r4
 8008fda:	a941      	add	r1, sp, #260	; 0x104
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f7fb ffaf 	bl	8004f40 <_scanf_float>
 8008fe2:	e78b      	b.n	8008efc <__svfiscanf_r+0x238>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	0599      	lsls	r1, r3, #22
 8008fe8:	f53f af58 	bmi.w	8008e9c <__svfiscanf_r+0x1d8>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f7fe fd6d 	bl	8007acc <__retarget_lock_release_recursive>
 8008ff2:	e753      	b.n	8008e9c <__svfiscanf_r+0x1d8>
 8008ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ff6:	07da      	lsls	r2, r3, #31
 8008ff8:	d405      	bmi.n	8009006 <__svfiscanf_r+0x342>
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	059b      	lsls	r3, r3, #22
 8008ffe:	d402      	bmi.n	8009006 <__svfiscanf_r+0x342>
 8009000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009002:	f7fe fd63 	bl	8007acc <__retarget_lock_release_recursive>
 8009006:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009008:	e751      	b.n	8008eae <__svfiscanf_r+0x1ea>
 800900a:	bf00      	nop
 800900c:	08004f41 	.word	0x08004f41

08009010 <_vfiscanf_r>:
 8009010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009012:	460c      	mov	r4, r1
 8009014:	4605      	mov	r5, r0
 8009016:	b138      	cbz	r0, 8009028 <_vfiscanf_r+0x18>
 8009018:	6981      	ldr	r1, [r0, #24]
 800901a:	b929      	cbnz	r1, 8009028 <_vfiscanf_r+0x18>
 800901c:	e9cd 2300 	strd	r2, r3, [sp]
 8009020:	f7fe f924 	bl	800726c <__sinit>
 8009024:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009028:	490a      	ldr	r1, [pc, #40]	; (8009054 <_vfiscanf_r+0x44>)
 800902a:	428c      	cmp	r4, r1
 800902c:	d107      	bne.n	800903e <_vfiscanf_r+0x2e>
 800902e:	686c      	ldr	r4, [r5, #4]
 8009030:	4621      	mov	r1, r4
 8009032:	4628      	mov	r0, r5
 8009034:	b003      	add	sp, #12
 8009036:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800903a:	f7ff be43 	b.w	8008cc4 <__svfiscanf_r>
 800903e:	4906      	ldr	r1, [pc, #24]	; (8009058 <_vfiscanf_r+0x48>)
 8009040:	428c      	cmp	r4, r1
 8009042:	d101      	bne.n	8009048 <_vfiscanf_r+0x38>
 8009044:	68ac      	ldr	r4, [r5, #8]
 8009046:	e7f3      	b.n	8009030 <_vfiscanf_r+0x20>
 8009048:	4904      	ldr	r1, [pc, #16]	; (800905c <_vfiscanf_r+0x4c>)
 800904a:	428c      	cmp	r4, r1
 800904c:	bf08      	it	eq
 800904e:	68ec      	ldreq	r4, [r5, #12]
 8009050:	e7ee      	b.n	8009030 <_vfiscanf_r+0x20>
 8009052:	bf00      	nop
 8009054:	08009ffc 	.word	0x08009ffc
 8009058:	0800a01c 	.word	0x0800a01c
 800905c:	08009fdc 	.word	0x08009fdc

08009060 <_scanf_chars>:
 8009060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009064:	4615      	mov	r5, r2
 8009066:	688a      	ldr	r2, [r1, #8]
 8009068:	4680      	mov	r8, r0
 800906a:	460c      	mov	r4, r1
 800906c:	b932      	cbnz	r2, 800907c <_scanf_chars+0x1c>
 800906e:	698a      	ldr	r2, [r1, #24]
 8009070:	2a00      	cmp	r2, #0
 8009072:	bf0c      	ite	eq
 8009074:	2201      	moveq	r2, #1
 8009076:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800907a:	608a      	str	r2, [r1, #8]
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009110 <_scanf_chars+0xb0>
 8009082:	06d1      	lsls	r1, r2, #27
 8009084:	bf5f      	itttt	pl
 8009086:	681a      	ldrpl	r2, [r3, #0]
 8009088:	1d11      	addpl	r1, r2, #4
 800908a:	6019      	strpl	r1, [r3, #0]
 800908c:	6816      	ldrpl	r6, [r2, #0]
 800908e:	2700      	movs	r7, #0
 8009090:	69a0      	ldr	r0, [r4, #24]
 8009092:	b188      	cbz	r0, 80090b8 <_scanf_chars+0x58>
 8009094:	2801      	cmp	r0, #1
 8009096:	d107      	bne.n	80090a8 <_scanf_chars+0x48>
 8009098:	682a      	ldr	r2, [r5, #0]
 800909a:	7811      	ldrb	r1, [r2, #0]
 800909c:	6962      	ldr	r2, [r4, #20]
 800909e:	5c52      	ldrb	r2, [r2, r1]
 80090a0:	b952      	cbnz	r2, 80090b8 <_scanf_chars+0x58>
 80090a2:	2f00      	cmp	r7, #0
 80090a4:	d031      	beq.n	800910a <_scanf_chars+0xaa>
 80090a6:	e022      	b.n	80090ee <_scanf_chars+0x8e>
 80090a8:	2802      	cmp	r0, #2
 80090aa:	d120      	bne.n	80090ee <_scanf_chars+0x8e>
 80090ac:	682b      	ldr	r3, [r5, #0]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80090b4:	071b      	lsls	r3, r3, #28
 80090b6:	d41a      	bmi.n	80090ee <_scanf_chars+0x8e>
 80090b8:	6823      	ldr	r3, [r4, #0]
 80090ba:	06da      	lsls	r2, r3, #27
 80090bc:	bf5e      	ittt	pl
 80090be:	682b      	ldrpl	r3, [r5, #0]
 80090c0:	781b      	ldrbpl	r3, [r3, #0]
 80090c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80090c6:	682a      	ldr	r2, [r5, #0]
 80090c8:	686b      	ldr	r3, [r5, #4]
 80090ca:	3201      	adds	r2, #1
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	68a2      	ldr	r2, [r4, #8]
 80090d0:	3b01      	subs	r3, #1
 80090d2:	3a01      	subs	r2, #1
 80090d4:	606b      	str	r3, [r5, #4]
 80090d6:	3701      	adds	r7, #1
 80090d8:	60a2      	str	r2, [r4, #8]
 80090da:	b142      	cbz	r2, 80090ee <_scanf_chars+0x8e>
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dcd7      	bgt.n	8009090 <_scanf_chars+0x30>
 80090e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090e4:	4629      	mov	r1, r5
 80090e6:	4640      	mov	r0, r8
 80090e8:	4798      	blx	r3
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d0d0      	beq.n	8009090 <_scanf_chars+0x30>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	f013 0310 	ands.w	r3, r3, #16
 80090f4:	d105      	bne.n	8009102 <_scanf_chars+0xa2>
 80090f6:	68e2      	ldr	r2, [r4, #12]
 80090f8:	3201      	adds	r2, #1
 80090fa:	60e2      	str	r2, [r4, #12]
 80090fc:	69a2      	ldr	r2, [r4, #24]
 80090fe:	b102      	cbz	r2, 8009102 <_scanf_chars+0xa2>
 8009100:	7033      	strb	r3, [r6, #0]
 8009102:	6923      	ldr	r3, [r4, #16]
 8009104:	443b      	add	r3, r7
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	2000      	movs	r0, #0
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	bf00      	nop
 8009110:	08009e49 	.word	0x08009e49

08009114 <_scanf_i>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	4698      	mov	r8, r3
 800911a:	4b76      	ldr	r3, [pc, #472]	; (80092f4 <_scanf_i+0x1e0>)
 800911c:	460c      	mov	r4, r1
 800911e:	4682      	mov	sl, r0
 8009120:	4616      	mov	r6, r2
 8009122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009126:	b087      	sub	sp, #28
 8009128:	ab03      	add	r3, sp, #12
 800912a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800912e:	4b72      	ldr	r3, [pc, #456]	; (80092f8 <_scanf_i+0x1e4>)
 8009130:	69a1      	ldr	r1, [r4, #24]
 8009132:	4a72      	ldr	r2, [pc, #456]	; (80092fc <_scanf_i+0x1e8>)
 8009134:	2903      	cmp	r1, #3
 8009136:	bf18      	it	ne
 8009138:	461a      	movne	r2, r3
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	9201      	str	r2, [sp, #4]
 800913e:	1e5a      	subs	r2, r3, #1
 8009140:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009144:	bf88      	it	hi
 8009146:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800914a:	4627      	mov	r7, r4
 800914c:	bf82      	ittt	hi
 800914e:	eb03 0905 	addhi.w	r9, r3, r5
 8009152:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009156:	60a3      	strhi	r3, [r4, #8]
 8009158:	f857 3b1c 	ldr.w	r3, [r7], #28
 800915c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009160:	bf98      	it	ls
 8009162:	f04f 0900 	movls.w	r9, #0
 8009166:	6023      	str	r3, [r4, #0]
 8009168:	463d      	mov	r5, r7
 800916a:	f04f 0b00 	mov.w	fp, #0
 800916e:	6831      	ldr	r1, [r6, #0]
 8009170:	ab03      	add	r3, sp, #12
 8009172:	7809      	ldrb	r1, [r1, #0]
 8009174:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009178:	2202      	movs	r2, #2
 800917a:	f7f7 f849 	bl	8000210 <memchr>
 800917e:	b328      	cbz	r0, 80091cc <_scanf_i+0xb8>
 8009180:	f1bb 0f01 	cmp.w	fp, #1
 8009184:	d159      	bne.n	800923a <_scanf_i+0x126>
 8009186:	6862      	ldr	r2, [r4, #4]
 8009188:	b92a      	cbnz	r2, 8009196 <_scanf_i+0x82>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	2308      	movs	r3, #8
 800918e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	6022      	str	r2, [r4, #0]
 8009196:	6822      	ldr	r2, [r4, #0]
 8009198:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800919c:	6022      	str	r2, [r4, #0]
 800919e:	68a2      	ldr	r2, [r4, #8]
 80091a0:	1e51      	subs	r1, r2, #1
 80091a2:	60a1      	str	r1, [r4, #8]
 80091a4:	b192      	cbz	r2, 80091cc <_scanf_i+0xb8>
 80091a6:	6832      	ldr	r2, [r6, #0]
 80091a8:	1c51      	adds	r1, r2, #1
 80091aa:	6031      	str	r1, [r6, #0]
 80091ac:	7812      	ldrb	r2, [r2, #0]
 80091ae:	f805 2b01 	strb.w	r2, [r5], #1
 80091b2:	6872      	ldr	r2, [r6, #4]
 80091b4:	3a01      	subs	r2, #1
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	6072      	str	r2, [r6, #4]
 80091ba:	dc07      	bgt.n	80091cc <_scanf_i+0xb8>
 80091bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80091c0:	4631      	mov	r1, r6
 80091c2:	4650      	mov	r0, sl
 80091c4:	4790      	blx	r2
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f040 8085 	bne.w	80092d6 <_scanf_i+0x1c2>
 80091cc:	f10b 0b01 	add.w	fp, fp, #1
 80091d0:	f1bb 0f03 	cmp.w	fp, #3
 80091d4:	d1cb      	bne.n	800916e <_scanf_i+0x5a>
 80091d6:	6863      	ldr	r3, [r4, #4]
 80091d8:	b90b      	cbnz	r3, 80091de <_scanf_i+0xca>
 80091da:	230a      	movs	r3, #10
 80091dc:	6063      	str	r3, [r4, #4]
 80091de:	6863      	ldr	r3, [r4, #4]
 80091e0:	4947      	ldr	r1, [pc, #284]	; (8009300 <_scanf_i+0x1ec>)
 80091e2:	6960      	ldr	r0, [r4, #20]
 80091e4:	1ac9      	subs	r1, r1, r3
 80091e6:	f000 f983 	bl	80094f0 <__sccl>
 80091ea:	f04f 0b00 	mov.w	fp, #0
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	6822      	ldr	r2, [r4, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d03d      	beq.n	8009272 <_scanf_i+0x15e>
 80091f6:	6831      	ldr	r1, [r6, #0]
 80091f8:	6960      	ldr	r0, [r4, #20]
 80091fa:	f891 c000 	ldrb.w	ip, [r1]
 80091fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009202:	2800      	cmp	r0, #0
 8009204:	d035      	beq.n	8009272 <_scanf_i+0x15e>
 8009206:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800920a:	d124      	bne.n	8009256 <_scanf_i+0x142>
 800920c:	0510      	lsls	r0, r2, #20
 800920e:	d522      	bpl.n	8009256 <_scanf_i+0x142>
 8009210:	f10b 0b01 	add.w	fp, fp, #1
 8009214:	f1b9 0f00 	cmp.w	r9, #0
 8009218:	d003      	beq.n	8009222 <_scanf_i+0x10e>
 800921a:	3301      	adds	r3, #1
 800921c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009220:	60a3      	str	r3, [r4, #8]
 8009222:	6873      	ldr	r3, [r6, #4]
 8009224:	3b01      	subs	r3, #1
 8009226:	2b00      	cmp	r3, #0
 8009228:	6073      	str	r3, [r6, #4]
 800922a:	dd1b      	ble.n	8009264 <_scanf_i+0x150>
 800922c:	6833      	ldr	r3, [r6, #0]
 800922e:	3301      	adds	r3, #1
 8009230:	6033      	str	r3, [r6, #0]
 8009232:	68a3      	ldr	r3, [r4, #8]
 8009234:	3b01      	subs	r3, #1
 8009236:	60a3      	str	r3, [r4, #8]
 8009238:	e7d9      	b.n	80091ee <_scanf_i+0xda>
 800923a:	f1bb 0f02 	cmp.w	fp, #2
 800923e:	d1ae      	bne.n	800919e <_scanf_i+0x8a>
 8009240:	6822      	ldr	r2, [r4, #0]
 8009242:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009246:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800924a:	d1bf      	bne.n	80091cc <_scanf_i+0xb8>
 800924c:	2310      	movs	r3, #16
 800924e:	6063      	str	r3, [r4, #4]
 8009250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009254:	e7a2      	b.n	800919c <_scanf_i+0x88>
 8009256:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800925a:	6022      	str	r2, [r4, #0]
 800925c:	780b      	ldrb	r3, [r1, #0]
 800925e:	f805 3b01 	strb.w	r3, [r5], #1
 8009262:	e7de      	b.n	8009222 <_scanf_i+0x10e>
 8009264:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009268:	4631      	mov	r1, r6
 800926a:	4650      	mov	r0, sl
 800926c:	4798      	blx	r3
 800926e:	2800      	cmp	r0, #0
 8009270:	d0df      	beq.n	8009232 <_scanf_i+0x11e>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	05db      	lsls	r3, r3, #23
 8009276:	d50d      	bpl.n	8009294 <_scanf_i+0x180>
 8009278:	42bd      	cmp	r5, r7
 800927a:	d909      	bls.n	8009290 <_scanf_i+0x17c>
 800927c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009284:	4632      	mov	r2, r6
 8009286:	4650      	mov	r0, sl
 8009288:	4798      	blx	r3
 800928a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800928e:	464d      	mov	r5, r9
 8009290:	42bd      	cmp	r5, r7
 8009292:	d02d      	beq.n	80092f0 <_scanf_i+0x1dc>
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	f012 0210 	ands.w	r2, r2, #16
 800929a:	d113      	bne.n	80092c4 <_scanf_i+0x1b0>
 800929c:	702a      	strb	r2, [r5, #0]
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	9e01      	ldr	r6, [sp, #4]
 80092a2:	4639      	mov	r1, r7
 80092a4:	4650      	mov	r0, sl
 80092a6:	47b0      	blx	r6
 80092a8:	6821      	ldr	r1, [r4, #0]
 80092aa:	f8d8 3000 	ldr.w	r3, [r8]
 80092ae:	f011 0f20 	tst.w	r1, #32
 80092b2:	d013      	beq.n	80092dc <_scanf_i+0x1c8>
 80092b4:	1d1a      	adds	r2, r3, #4
 80092b6:	f8c8 2000 	str.w	r2, [r8]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6018      	str	r0, [r3, #0]
 80092be:	68e3      	ldr	r3, [r4, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60e3      	str	r3, [r4, #12]
 80092c4:	1bed      	subs	r5, r5, r7
 80092c6:	44ab      	add	fp, r5
 80092c8:	6925      	ldr	r5, [r4, #16]
 80092ca:	445d      	add	r5, fp
 80092cc:	6125      	str	r5, [r4, #16]
 80092ce:	2000      	movs	r0, #0
 80092d0:	b007      	add	sp, #28
 80092d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d6:	f04f 0b00 	mov.w	fp, #0
 80092da:	e7ca      	b.n	8009272 <_scanf_i+0x15e>
 80092dc:	1d1a      	adds	r2, r3, #4
 80092de:	f8c8 2000 	str.w	r2, [r8]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f011 0f01 	tst.w	r1, #1
 80092e8:	bf14      	ite	ne
 80092ea:	8018      	strhne	r0, [r3, #0]
 80092ec:	6018      	streq	r0, [r3, #0]
 80092ee:	e7e6      	b.n	80092be <_scanf_i+0x1aa>
 80092f0:	2001      	movs	r0, #1
 80092f2:	e7ed      	b.n	80092d0 <_scanf_i+0x1bc>
 80092f4:	08009d40 	.word	0x08009d40
 80092f8:	080096f5 	.word	0x080096f5
 80092fc:	0800631d 	.word	0x0800631d
 8009300:	0800a23e 	.word	0x0800a23e

08009304 <_putc_r>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	460d      	mov	r5, r1
 8009308:	4614      	mov	r4, r2
 800930a:	4606      	mov	r6, r0
 800930c:	b118      	cbz	r0, 8009316 <_putc_r+0x12>
 800930e:	6983      	ldr	r3, [r0, #24]
 8009310:	b90b      	cbnz	r3, 8009316 <_putc_r+0x12>
 8009312:	f7fd ffab 	bl	800726c <__sinit>
 8009316:	4b1c      	ldr	r3, [pc, #112]	; (8009388 <_putc_r+0x84>)
 8009318:	429c      	cmp	r4, r3
 800931a:	d124      	bne.n	8009366 <_putc_r+0x62>
 800931c:	6874      	ldr	r4, [r6, #4]
 800931e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009320:	07d8      	lsls	r0, r3, #31
 8009322:	d405      	bmi.n	8009330 <_putc_r+0x2c>
 8009324:	89a3      	ldrh	r3, [r4, #12]
 8009326:	0599      	lsls	r1, r3, #22
 8009328:	d402      	bmi.n	8009330 <_putc_r+0x2c>
 800932a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800932c:	f7fe fbcd 	bl	8007aca <__retarget_lock_acquire_recursive>
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	3b01      	subs	r3, #1
 8009334:	2b00      	cmp	r3, #0
 8009336:	60a3      	str	r3, [r4, #8]
 8009338:	da05      	bge.n	8009346 <_putc_r+0x42>
 800933a:	69a2      	ldr	r2, [r4, #24]
 800933c:	4293      	cmp	r3, r2
 800933e:	db1c      	blt.n	800937a <_putc_r+0x76>
 8009340:	b2eb      	uxtb	r3, r5
 8009342:	2b0a      	cmp	r3, #10
 8009344:	d019      	beq.n	800937a <_putc_r+0x76>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	6022      	str	r2, [r4, #0]
 800934c:	701d      	strb	r5, [r3, #0]
 800934e:	b2ed      	uxtb	r5, r5
 8009350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009352:	07da      	lsls	r2, r3, #31
 8009354:	d405      	bmi.n	8009362 <_putc_r+0x5e>
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	059b      	lsls	r3, r3, #22
 800935a:	d402      	bmi.n	8009362 <_putc_r+0x5e>
 800935c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935e:	f7fe fbb5 	bl	8007acc <__retarget_lock_release_recursive>
 8009362:	4628      	mov	r0, r5
 8009364:	bd70      	pop	{r4, r5, r6, pc}
 8009366:	4b09      	ldr	r3, [pc, #36]	; (800938c <_putc_r+0x88>)
 8009368:	429c      	cmp	r4, r3
 800936a:	d101      	bne.n	8009370 <_putc_r+0x6c>
 800936c:	68b4      	ldr	r4, [r6, #8]
 800936e:	e7d6      	b.n	800931e <_putc_r+0x1a>
 8009370:	4b07      	ldr	r3, [pc, #28]	; (8009390 <_putc_r+0x8c>)
 8009372:	429c      	cmp	r4, r3
 8009374:	bf08      	it	eq
 8009376:	68f4      	ldreq	r4, [r6, #12]
 8009378:	e7d1      	b.n	800931e <_putc_r+0x1a>
 800937a:	4629      	mov	r1, r5
 800937c:	4622      	mov	r2, r4
 800937e:	4630      	mov	r0, r6
 8009380:	f000 fa8c 	bl	800989c <__swbuf_r>
 8009384:	4605      	mov	r5, r0
 8009386:	e7e3      	b.n	8009350 <_putc_r+0x4c>
 8009388:	08009ffc 	.word	0x08009ffc
 800938c:	0800a01c 	.word	0x0800a01c
 8009390:	08009fdc 	.word	0x08009fdc

08009394 <lflush>:
 8009394:	8983      	ldrh	r3, [r0, #12]
 8009396:	f003 0309 	and.w	r3, r3, #9
 800939a:	2b09      	cmp	r3, #9
 800939c:	d101      	bne.n	80093a2 <lflush+0xe>
 800939e:	f7fd befb 	b.w	8007198 <fflush>
 80093a2:	2000      	movs	r0, #0
 80093a4:	4770      	bx	lr
	...

080093a8 <__srefill_r>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	4605      	mov	r5, r0
 80093ae:	b118      	cbz	r0, 80093b8 <__srefill_r+0x10>
 80093b0:	6983      	ldr	r3, [r0, #24]
 80093b2:	b90b      	cbnz	r3, 80093b8 <__srefill_r+0x10>
 80093b4:	f7fd ff5a 	bl	800726c <__sinit>
 80093b8:	4b3b      	ldr	r3, [pc, #236]	; (80094a8 <__srefill_r+0x100>)
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d10a      	bne.n	80093d4 <__srefill_r+0x2c>
 80093be:	686c      	ldr	r4, [r5, #4]
 80093c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093c4:	2300      	movs	r3, #0
 80093c6:	6063      	str	r3, [r4, #4]
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	069e      	lsls	r6, r3, #26
 80093cc:	d50c      	bpl.n	80093e8 <__srefill_r+0x40>
 80093ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093d2:	e066      	b.n	80094a2 <__srefill_r+0xfa>
 80093d4:	4b35      	ldr	r3, [pc, #212]	; (80094ac <__srefill_r+0x104>)
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d101      	bne.n	80093de <__srefill_r+0x36>
 80093da:	68ac      	ldr	r4, [r5, #8]
 80093dc:	e7f0      	b.n	80093c0 <__srefill_r+0x18>
 80093de:	4b34      	ldr	r3, [pc, #208]	; (80094b0 <__srefill_r+0x108>)
 80093e0:	429c      	cmp	r4, r3
 80093e2:	bf08      	it	eq
 80093e4:	68ec      	ldreq	r4, [r5, #12]
 80093e6:	e7eb      	b.n	80093c0 <__srefill_r+0x18>
 80093e8:	0758      	lsls	r0, r3, #29
 80093ea:	d448      	bmi.n	800947e <__srefill_r+0xd6>
 80093ec:	06d9      	lsls	r1, r3, #27
 80093ee:	d405      	bmi.n	80093fc <__srefill_r+0x54>
 80093f0:	2309      	movs	r3, #9
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f8:	81a3      	strh	r3, [r4, #12]
 80093fa:	e7e8      	b.n	80093ce <__srefill_r+0x26>
 80093fc:	071a      	lsls	r2, r3, #28
 80093fe:	d50b      	bpl.n	8009418 <__srefill_r+0x70>
 8009400:	4621      	mov	r1, r4
 8009402:	4628      	mov	r0, r5
 8009404:	f7fd fe8c 	bl	8007120 <_fflush_r>
 8009408:	2800      	cmp	r0, #0
 800940a:	d1e0      	bne.n	80093ce <__srefill_r+0x26>
 800940c:	89a3      	ldrh	r3, [r4, #12]
 800940e:	60a0      	str	r0, [r4, #8]
 8009410:	f023 0308 	bic.w	r3, r3, #8
 8009414:	81a3      	strh	r3, [r4, #12]
 8009416:	61a0      	str	r0, [r4, #24]
 8009418:	89a3      	ldrh	r3, [r4, #12]
 800941a:	f043 0304 	orr.w	r3, r3, #4
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	b91b      	cbnz	r3, 800942c <__srefill_r+0x84>
 8009424:	4621      	mov	r1, r4
 8009426:	4628      	mov	r0, r5
 8009428:	f7fe fb76 	bl	8007b18 <__smakebuf_r>
 800942c:	89a6      	ldrh	r6, [r4, #12]
 800942e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8009432:	07b3      	lsls	r3, r6, #30
 8009434:	d00f      	beq.n	8009456 <__srefill_r+0xae>
 8009436:	2301      	movs	r3, #1
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <__srefill_r+0x10c>)
 800943c:	491e      	ldr	r1, [pc, #120]	; (80094b8 <__srefill_r+0x110>)
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	f006 0609 	and.w	r6, r6, #9
 8009444:	f7fd ff90 	bl	8007368 <_fwalk>
 8009448:	2e09      	cmp	r6, #9
 800944a:	81a7      	strh	r7, [r4, #12]
 800944c:	d103      	bne.n	8009456 <__srefill_r+0xae>
 800944e:	4621      	mov	r1, r4
 8009450:	4628      	mov	r0, r5
 8009452:	f7fd fddf 	bl	8007014 <__sflush_r>
 8009456:	6922      	ldr	r2, [r4, #16]
 8009458:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800945a:	6963      	ldr	r3, [r4, #20]
 800945c:	6a21      	ldr	r1, [r4, #32]
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	4628      	mov	r0, r5
 8009462:	47b0      	blx	r6
 8009464:	2800      	cmp	r0, #0
 8009466:	6060      	str	r0, [r4, #4]
 8009468:	dc1c      	bgt.n	80094a4 <__srefill_r+0xfc>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	bf17      	itett	ne
 8009470:	2200      	movne	r2, #0
 8009472:	f043 0320 	orreq.w	r3, r3, #32
 8009476:	6062      	strne	r2, [r4, #4]
 8009478:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800947c:	e7bc      	b.n	80093f8 <__srefill_r+0x50>
 800947e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009480:	2900      	cmp	r1, #0
 8009482:	d0cd      	beq.n	8009420 <__srefill_r+0x78>
 8009484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009488:	4299      	cmp	r1, r3
 800948a:	d002      	beq.n	8009492 <__srefill_r+0xea>
 800948c:	4628      	mov	r0, r5
 800948e:	f7ff f883 	bl	8008598 <_free_r>
 8009492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	2000      	movs	r0, #0
 8009498:	6360      	str	r0, [r4, #52]	; 0x34
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c0      	beq.n	8009420 <__srefill_r+0x78>
 800949e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a4:	2000      	movs	r0, #0
 80094a6:	e7fc      	b.n	80094a2 <__srefill_r+0xfa>
 80094a8:	08009ffc 	.word	0x08009ffc
 80094ac:	0800a01c 	.word	0x0800a01c
 80094b0:	08009fdc 	.word	0x08009fdc
 80094b4:	08009dbc 	.word	0x08009dbc
 80094b8:	08009395 	.word	0x08009395
 80094bc:	00000000 	.word	0x00000000

080094c0 <nan>:
 80094c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80094c8 <nan+0x8>
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	00000000 	.word	0x00000000
 80094cc:	7ff80000 	.word	0x7ff80000

080094d0 <_sbrk_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	; (80094ec <_sbrk_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7fb f822 	bl	8004524 <_sbrk>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_sbrk_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_sbrk_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	200002ac 	.word	0x200002ac

080094f0 <__sccl>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	780b      	ldrb	r3, [r1, #0]
 80094f4:	4604      	mov	r4, r0
 80094f6:	2b5e      	cmp	r3, #94	; 0x5e
 80094f8:	bf0b      	itete	eq
 80094fa:	784b      	ldrbeq	r3, [r1, #1]
 80094fc:	1c48      	addne	r0, r1, #1
 80094fe:	1c88      	addeq	r0, r1, #2
 8009500:	2200      	movne	r2, #0
 8009502:	bf08      	it	eq
 8009504:	2201      	moveq	r2, #1
 8009506:	1e61      	subs	r1, r4, #1
 8009508:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800950c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009510:	42a9      	cmp	r1, r5
 8009512:	d1fb      	bne.n	800950c <__sccl+0x1c>
 8009514:	b90b      	cbnz	r3, 800951a <__sccl+0x2a>
 8009516:	3801      	subs	r0, #1
 8009518:	bd70      	pop	{r4, r5, r6, pc}
 800951a:	f082 0201 	eor.w	r2, r2, #1
 800951e:	54e2      	strb	r2, [r4, r3]
 8009520:	4605      	mov	r5, r0
 8009522:	4628      	mov	r0, r5
 8009524:	f810 1b01 	ldrb.w	r1, [r0], #1
 8009528:	292d      	cmp	r1, #45	; 0x2d
 800952a:	d006      	beq.n	800953a <__sccl+0x4a>
 800952c:	295d      	cmp	r1, #93	; 0x5d
 800952e:	d0f3      	beq.n	8009518 <__sccl+0x28>
 8009530:	b909      	cbnz	r1, 8009536 <__sccl+0x46>
 8009532:	4628      	mov	r0, r5
 8009534:	e7f0      	b.n	8009518 <__sccl+0x28>
 8009536:	460b      	mov	r3, r1
 8009538:	e7f1      	b.n	800951e <__sccl+0x2e>
 800953a:	786e      	ldrb	r6, [r5, #1]
 800953c:	2e5d      	cmp	r6, #93	; 0x5d
 800953e:	d0fa      	beq.n	8009536 <__sccl+0x46>
 8009540:	42b3      	cmp	r3, r6
 8009542:	dcf8      	bgt.n	8009536 <__sccl+0x46>
 8009544:	3502      	adds	r5, #2
 8009546:	4619      	mov	r1, r3
 8009548:	3101      	adds	r1, #1
 800954a:	428e      	cmp	r6, r1
 800954c:	5462      	strb	r2, [r4, r1]
 800954e:	dcfb      	bgt.n	8009548 <__sccl+0x58>
 8009550:	1af1      	subs	r1, r6, r3
 8009552:	3901      	subs	r1, #1
 8009554:	1c58      	adds	r0, r3, #1
 8009556:	42b3      	cmp	r3, r6
 8009558:	bfa8      	it	ge
 800955a:	2100      	movge	r1, #0
 800955c:	1843      	adds	r3, r0, r1
 800955e:	e7e0      	b.n	8009522 <__sccl+0x32>

08009560 <__sread>:
 8009560:	b510      	push	{r4, lr}
 8009562:	460c      	mov	r4, r1
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	f000 fb42 	bl	8009bf0 <_read_r>
 800956c:	2800      	cmp	r0, #0
 800956e:	bfab      	itete	ge
 8009570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009572:	89a3      	ldrhlt	r3, [r4, #12]
 8009574:	181b      	addge	r3, r3, r0
 8009576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800957a:	bfac      	ite	ge
 800957c:	6563      	strge	r3, [r4, #84]	; 0x54
 800957e:	81a3      	strhlt	r3, [r4, #12]
 8009580:	bd10      	pop	{r4, pc}

08009582 <__swrite>:
 8009582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	461f      	mov	r7, r3
 8009588:	898b      	ldrh	r3, [r1, #12]
 800958a:	05db      	lsls	r3, r3, #23
 800958c:	4605      	mov	r5, r0
 800958e:	460c      	mov	r4, r1
 8009590:	4616      	mov	r6, r2
 8009592:	d505      	bpl.n	80095a0 <__swrite+0x1e>
 8009594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009598:	2302      	movs	r3, #2
 800959a:	2200      	movs	r2, #0
 800959c:	f000 fac0 	bl	8009b20 <_lseek_r>
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	4632      	mov	r2, r6
 80095ae:	463b      	mov	r3, r7
 80095b0:	4628      	mov	r0, r5
 80095b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095b6:	f000 b9d1 	b.w	800995c <_write_r>

080095ba <__sseek>:
 80095ba:	b510      	push	{r4, lr}
 80095bc:	460c      	mov	r4, r1
 80095be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c2:	f000 faad 	bl	8009b20 <_lseek_r>
 80095c6:	1c43      	adds	r3, r0, #1
 80095c8:	89a3      	ldrh	r3, [r4, #12]
 80095ca:	bf15      	itete	ne
 80095cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80095ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095d6:	81a3      	strheq	r3, [r4, #12]
 80095d8:	bf18      	it	ne
 80095da:	81a3      	strhne	r3, [r4, #12]
 80095dc:	bd10      	pop	{r4, pc}

080095de <__sclose>:
 80095de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095e2:	f000 ba59 	b.w	8009a98 <_close_r>

080095e6 <strncmp>:
 80095e6:	b510      	push	{r4, lr}
 80095e8:	b17a      	cbz	r2, 800960a <strncmp+0x24>
 80095ea:	4603      	mov	r3, r0
 80095ec:	3901      	subs	r1, #1
 80095ee:	1884      	adds	r4, r0, r2
 80095f0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80095f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095f8:	4290      	cmp	r0, r2
 80095fa:	d101      	bne.n	8009600 <strncmp+0x1a>
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d101      	bne.n	8009604 <strncmp+0x1e>
 8009600:	1a80      	subs	r0, r0, r2
 8009602:	bd10      	pop	{r4, pc}
 8009604:	2800      	cmp	r0, #0
 8009606:	d1f3      	bne.n	80095f0 <strncmp+0xa>
 8009608:	e7fa      	b.n	8009600 <strncmp+0x1a>
 800960a:	4610      	mov	r0, r2
 800960c:	e7f9      	b.n	8009602 <strncmp+0x1c>
	...

08009610 <_strtoul_l.constprop.0>:
 8009610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009614:	4f36      	ldr	r7, [pc, #216]	; (80096f0 <_strtoul_l.constprop.0+0xe0>)
 8009616:	4686      	mov	lr, r0
 8009618:	460d      	mov	r5, r1
 800961a:	4628      	mov	r0, r5
 800961c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009620:	5de6      	ldrb	r6, [r4, r7]
 8009622:	f016 0608 	ands.w	r6, r6, #8
 8009626:	d1f8      	bne.n	800961a <_strtoul_l.constprop.0+0xa>
 8009628:	2c2d      	cmp	r4, #45	; 0x2d
 800962a:	d12f      	bne.n	800968c <_strtoul_l.constprop.0+0x7c>
 800962c:	782c      	ldrb	r4, [r5, #0]
 800962e:	2601      	movs	r6, #1
 8009630:	1c85      	adds	r5, r0, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d057      	beq.n	80096e6 <_strtoul_l.constprop.0+0xd6>
 8009636:	2b10      	cmp	r3, #16
 8009638:	d109      	bne.n	800964e <_strtoul_l.constprop.0+0x3e>
 800963a:	2c30      	cmp	r4, #48	; 0x30
 800963c:	d107      	bne.n	800964e <_strtoul_l.constprop.0+0x3e>
 800963e:	7828      	ldrb	r0, [r5, #0]
 8009640:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009644:	2858      	cmp	r0, #88	; 0x58
 8009646:	d149      	bne.n	80096dc <_strtoul_l.constprop.0+0xcc>
 8009648:	786c      	ldrb	r4, [r5, #1]
 800964a:	2310      	movs	r3, #16
 800964c:	3502      	adds	r5, #2
 800964e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8009652:	2700      	movs	r7, #0
 8009654:	fbb8 f8f3 	udiv	r8, r8, r3
 8009658:	fb03 f908 	mul.w	r9, r3, r8
 800965c:	ea6f 0909 	mvn.w	r9, r9
 8009660:	4638      	mov	r0, r7
 8009662:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009666:	f1bc 0f09 	cmp.w	ip, #9
 800966a:	d814      	bhi.n	8009696 <_strtoul_l.constprop.0+0x86>
 800966c:	4664      	mov	r4, ip
 800966e:	42a3      	cmp	r3, r4
 8009670:	dd22      	ble.n	80096b8 <_strtoul_l.constprop.0+0xa8>
 8009672:	2f00      	cmp	r7, #0
 8009674:	db1d      	blt.n	80096b2 <_strtoul_l.constprop.0+0xa2>
 8009676:	4580      	cmp	r8, r0
 8009678:	d31b      	bcc.n	80096b2 <_strtoul_l.constprop.0+0xa2>
 800967a:	d101      	bne.n	8009680 <_strtoul_l.constprop.0+0x70>
 800967c:	45a1      	cmp	r9, r4
 800967e:	db18      	blt.n	80096b2 <_strtoul_l.constprop.0+0xa2>
 8009680:	fb00 4003 	mla	r0, r0, r3, r4
 8009684:	2701      	movs	r7, #1
 8009686:	f815 4b01 	ldrb.w	r4, [r5], #1
 800968a:	e7ea      	b.n	8009662 <_strtoul_l.constprop.0+0x52>
 800968c:	2c2b      	cmp	r4, #43	; 0x2b
 800968e:	bf04      	itt	eq
 8009690:	782c      	ldrbeq	r4, [r5, #0]
 8009692:	1c85      	addeq	r5, r0, #2
 8009694:	e7cd      	b.n	8009632 <_strtoul_l.constprop.0+0x22>
 8009696:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800969a:	f1bc 0f19 	cmp.w	ip, #25
 800969e:	d801      	bhi.n	80096a4 <_strtoul_l.constprop.0+0x94>
 80096a0:	3c37      	subs	r4, #55	; 0x37
 80096a2:	e7e4      	b.n	800966e <_strtoul_l.constprop.0+0x5e>
 80096a4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096a8:	f1bc 0f19 	cmp.w	ip, #25
 80096ac:	d804      	bhi.n	80096b8 <_strtoul_l.constprop.0+0xa8>
 80096ae:	3c57      	subs	r4, #87	; 0x57
 80096b0:	e7dd      	b.n	800966e <_strtoul_l.constprop.0+0x5e>
 80096b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80096b6:	e7e6      	b.n	8009686 <_strtoul_l.constprop.0+0x76>
 80096b8:	2f00      	cmp	r7, #0
 80096ba:	da07      	bge.n	80096cc <_strtoul_l.constprop.0+0xbc>
 80096bc:	2322      	movs	r3, #34	; 0x22
 80096be:	f8ce 3000 	str.w	r3, [lr]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c6:	b932      	cbnz	r2, 80096d6 <_strtoul_l.constprop.0+0xc6>
 80096c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096cc:	b106      	cbz	r6, 80096d0 <_strtoul_l.constprop.0+0xc0>
 80096ce:	4240      	negs	r0, r0
 80096d0:	2a00      	cmp	r2, #0
 80096d2:	d0f9      	beq.n	80096c8 <_strtoul_l.constprop.0+0xb8>
 80096d4:	b107      	cbz	r7, 80096d8 <_strtoul_l.constprop.0+0xc8>
 80096d6:	1e69      	subs	r1, r5, #1
 80096d8:	6011      	str	r1, [r2, #0]
 80096da:	e7f5      	b.n	80096c8 <_strtoul_l.constprop.0+0xb8>
 80096dc:	2430      	movs	r4, #48	; 0x30
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1b5      	bne.n	800964e <_strtoul_l.constprop.0+0x3e>
 80096e2:	2308      	movs	r3, #8
 80096e4:	e7b3      	b.n	800964e <_strtoul_l.constprop.0+0x3e>
 80096e6:	2c30      	cmp	r4, #48	; 0x30
 80096e8:	d0a9      	beq.n	800963e <_strtoul_l.constprop.0+0x2e>
 80096ea:	230a      	movs	r3, #10
 80096ec:	e7af      	b.n	800964e <_strtoul_l.constprop.0+0x3e>
 80096ee:	bf00      	nop
 80096f0:	08009e49 	.word	0x08009e49

080096f4 <_strtoul_r>:
 80096f4:	f7ff bf8c 	b.w	8009610 <_strtoul_l.constprop.0>

080096f8 <__submore>:
 80096f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fc:	460c      	mov	r4, r1
 80096fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009704:	4299      	cmp	r1, r3
 8009706:	d11d      	bne.n	8009744 <__submore+0x4c>
 8009708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800970c:	f7fe ffb0 	bl	8008670 <_malloc_r>
 8009710:	b918      	cbnz	r0, 800971a <__submore+0x22>
 8009712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800971a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971e:	63a3      	str	r3, [r4, #56]	; 0x38
 8009720:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009724:	6360      	str	r0, [r4, #52]	; 0x34
 8009726:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800972a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800972e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009732:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009736:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800973a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800973e:	6020      	str	r0, [r4, #0]
 8009740:	2000      	movs	r0, #0
 8009742:	e7e8      	b.n	8009716 <__submore+0x1e>
 8009744:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009746:	0077      	lsls	r7, r6, #1
 8009748:	463a      	mov	r2, r7
 800974a:	f000 fa21 	bl	8009b90 <_realloc_r>
 800974e:	4605      	mov	r5, r0
 8009750:	2800      	cmp	r0, #0
 8009752:	d0de      	beq.n	8009712 <__submore+0x1a>
 8009754:	eb00 0806 	add.w	r8, r0, r6
 8009758:	4601      	mov	r1, r0
 800975a:	4632      	mov	r2, r6
 800975c:	4640      	mov	r0, r8
 800975e:	f7fe fa35 	bl	8007bcc <memcpy>
 8009762:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009766:	f8c4 8000 	str.w	r8, [r4]
 800976a:	e7e9      	b.n	8009740 <__submore+0x48>

0800976c <_ungetc_r>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	4614      	mov	r4, r2
 8009770:	1c4a      	adds	r2, r1, #1
 8009772:	4606      	mov	r6, r0
 8009774:	460d      	mov	r5, r1
 8009776:	d103      	bne.n	8009780 <_ungetc_r+0x14>
 8009778:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800977c:	4628      	mov	r0, r5
 800977e:	bd70      	pop	{r4, r5, r6, pc}
 8009780:	b118      	cbz	r0, 800978a <_ungetc_r+0x1e>
 8009782:	6983      	ldr	r3, [r0, #24]
 8009784:	b90b      	cbnz	r3, 800978a <_ungetc_r+0x1e>
 8009786:	f7fd fd71 	bl	800726c <__sinit>
 800978a:	4b41      	ldr	r3, [pc, #260]	; (8009890 <_ungetc_r+0x124>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d11d      	bne.n	80097cc <_ungetc_r+0x60>
 8009790:	6874      	ldr	r4, [r6, #4]
 8009792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009794:	07db      	lsls	r3, r3, #31
 8009796:	d405      	bmi.n	80097a4 <_ungetc_r+0x38>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	0598      	lsls	r0, r3, #22
 800979c:	d402      	bmi.n	80097a4 <_ungetc_r+0x38>
 800979e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097a0:	f7fe f993 	bl	8007aca <__retarget_lock_acquire_recursive>
 80097a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097a8:	f023 0320 	bic.w	r3, r3, #32
 80097ac:	0759      	lsls	r1, r3, #29
 80097ae:	81a3      	strh	r3, [r4, #12]
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	d42d      	bmi.n	8009810 <_ungetc_r+0xa4>
 80097b4:	06d3      	lsls	r3, r2, #27
 80097b6:	d413      	bmi.n	80097e0 <_ungetc_r+0x74>
 80097b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ba:	07dd      	lsls	r5, r3, #31
 80097bc:	d4dc      	bmi.n	8009778 <_ungetc_r+0xc>
 80097be:	f412 7f00 	tst.w	r2, #512	; 0x200
 80097c2:	d1d9      	bne.n	8009778 <_ungetc_r+0xc>
 80097c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c6:	f7fe f981 	bl	8007acc <__retarget_lock_release_recursive>
 80097ca:	e7d5      	b.n	8009778 <_ungetc_r+0xc>
 80097cc:	4b31      	ldr	r3, [pc, #196]	; (8009894 <_ungetc_r+0x128>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d101      	bne.n	80097d6 <_ungetc_r+0x6a>
 80097d2:	68b4      	ldr	r4, [r6, #8]
 80097d4:	e7dd      	b.n	8009792 <_ungetc_r+0x26>
 80097d6:	4b30      	ldr	r3, [pc, #192]	; (8009898 <_ungetc_r+0x12c>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	bf08      	it	eq
 80097dc:	68f4      	ldreq	r4, [r6, #12]
 80097de:	e7d8      	b.n	8009792 <_ungetc_r+0x26>
 80097e0:	0710      	lsls	r0, r2, #28
 80097e2:	d511      	bpl.n	8009808 <_ungetc_r+0x9c>
 80097e4:	4621      	mov	r1, r4
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7fd fc9a 	bl	8007120 <_fflush_r>
 80097ec:	b130      	cbz	r0, 80097fc <_ungetc_r+0x90>
 80097ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	d4c1      	bmi.n	8009778 <_ungetc_r+0xc>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80097fa:	e7e2      	b.n	80097c2 <_ungetc_r+0x56>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	60a0      	str	r0, [r4, #8]
 8009800:	f023 0308 	bic.w	r3, r3, #8
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	61a0      	str	r0, [r4, #24]
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f043 0304 	orr.w	r3, r3, #4
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009812:	6862      	ldr	r2, [r4, #4]
 8009814:	b2ed      	uxtb	r5, r5
 8009816:	b1d3      	cbz	r3, 800984e <_ungetc_r+0xe2>
 8009818:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800981a:	4293      	cmp	r3, r2
 800981c:	dc05      	bgt.n	800982a <_ungetc_r+0xbe>
 800981e:	4621      	mov	r1, r4
 8009820:	4630      	mov	r0, r6
 8009822:	f7ff ff69 	bl	80096f8 <__submore>
 8009826:	2800      	cmp	r0, #0
 8009828:	d1e1      	bne.n	80097ee <_ungetc_r+0x82>
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	1e5a      	subs	r2, r3, #1
 800982e:	6022      	str	r2, [r4, #0]
 8009830:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009834:	6863      	ldr	r3, [r4, #4]
 8009836:	3301      	adds	r3, #1
 8009838:	6063      	str	r3, [r4, #4]
 800983a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800983c:	07da      	lsls	r2, r3, #31
 800983e:	d49d      	bmi.n	800977c <_ungetc_r+0x10>
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	059b      	lsls	r3, r3, #22
 8009844:	d49a      	bmi.n	800977c <_ungetc_r+0x10>
 8009846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009848:	f7fe f940 	bl	8007acc <__retarget_lock_release_recursive>
 800984c:	e796      	b.n	800977c <_ungetc_r+0x10>
 800984e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8009850:	6920      	ldr	r0, [r4, #16]
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	f001 0101 	and.w	r1, r1, #1
 8009858:	b160      	cbz	r0, 8009874 <_ungetc_r+0x108>
 800985a:	4298      	cmp	r0, r3
 800985c:	d20a      	bcs.n	8009874 <_ungetc_r+0x108>
 800985e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8009862:	42a8      	cmp	r0, r5
 8009864:	d106      	bne.n	8009874 <_ungetc_r+0x108>
 8009866:	3b01      	subs	r3, #1
 8009868:	3201      	adds	r2, #1
 800986a:	6023      	str	r3, [r4, #0]
 800986c:	6062      	str	r2, [r4, #4]
 800986e:	2900      	cmp	r1, #0
 8009870:	d184      	bne.n	800977c <_ungetc_r+0x10>
 8009872:	e7e5      	b.n	8009840 <_ungetc_r+0xd4>
 8009874:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800987c:	6363      	str	r3, [r4, #52]	; 0x34
 800987e:	2303      	movs	r3, #3
 8009880:	63a3      	str	r3, [r4, #56]	; 0x38
 8009882:	4623      	mov	r3, r4
 8009884:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	2301      	movs	r3, #1
 800988c:	6063      	str	r3, [r4, #4]
 800988e:	e7ee      	b.n	800986e <_ungetc_r+0x102>
 8009890:	08009ffc 	.word	0x08009ffc
 8009894:	0800a01c 	.word	0x0800a01c
 8009898:	08009fdc 	.word	0x08009fdc

0800989c <__swbuf_r>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	460e      	mov	r6, r1
 80098a0:	4614      	mov	r4, r2
 80098a2:	4605      	mov	r5, r0
 80098a4:	b118      	cbz	r0, 80098ae <__swbuf_r+0x12>
 80098a6:	6983      	ldr	r3, [r0, #24]
 80098a8:	b90b      	cbnz	r3, 80098ae <__swbuf_r+0x12>
 80098aa:	f7fd fcdf 	bl	800726c <__sinit>
 80098ae:	4b21      	ldr	r3, [pc, #132]	; (8009934 <__swbuf_r+0x98>)
 80098b0:	429c      	cmp	r4, r3
 80098b2:	d12b      	bne.n	800990c <__swbuf_r+0x70>
 80098b4:	686c      	ldr	r4, [r5, #4]
 80098b6:	69a3      	ldr	r3, [r4, #24]
 80098b8:	60a3      	str	r3, [r4, #8]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	071a      	lsls	r2, r3, #28
 80098be:	d52f      	bpl.n	8009920 <__swbuf_r+0x84>
 80098c0:	6923      	ldr	r3, [r4, #16]
 80098c2:	b36b      	cbz	r3, 8009920 <__swbuf_r+0x84>
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	6820      	ldr	r0, [r4, #0]
 80098c8:	1ac0      	subs	r0, r0, r3
 80098ca:	6963      	ldr	r3, [r4, #20]
 80098cc:	b2f6      	uxtb	r6, r6
 80098ce:	4283      	cmp	r3, r0
 80098d0:	4637      	mov	r7, r6
 80098d2:	dc04      	bgt.n	80098de <__swbuf_r+0x42>
 80098d4:	4621      	mov	r1, r4
 80098d6:	4628      	mov	r0, r5
 80098d8:	f7fd fc22 	bl	8007120 <_fflush_r>
 80098dc:	bb30      	cbnz	r0, 800992c <__swbuf_r+0x90>
 80098de:	68a3      	ldr	r3, [r4, #8]
 80098e0:	3b01      	subs	r3, #1
 80098e2:	60a3      	str	r3, [r4, #8]
 80098e4:	6823      	ldr	r3, [r4, #0]
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	6022      	str	r2, [r4, #0]
 80098ea:	701e      	strb	r6, [r3, #0]
 80098ec:	6963      	ldr	r3, [r4, #20]
 80098ee:	3001      	adds	r0, #1
 80098f0:	4283      	cmp	r3, r0
 80098f2:	d004      	beq.n	80098fe <__swbuf_r+0x62>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	07db      	lsls	r3, r3, #31
 80098f8:	d506      	bpl.n	8009908 <__swbuf_r+0x6c>
 80098fa:	2e0a      	cmp	r6, #10
 80098fc:	d104      	bne.n	8009908 <__swbuf_r+0x6c>
 80098fe:	4621      	mov	r1, r4
 8009900:	4628      	mov	r0, r5
 8009902:	f7fd fc0d 	bl	8007120 <_fflush_r>
 8009906:	b988      	cbnz	r0, 800992c <__swbuf_r+0x90>
 8009908:	4638      	mov	r0, r7
 800990a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800990c:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <__swbuf_r+0x9c>)
 800990e:	429c      	cmp	r4, r3
 8009910:	d101      	bne.n	8009916 <__swbuf_r+0x7a>
 8009912:	68ac      	ldr	r4, [r5, #8]
 8009914:	e7cf      	b.n	80098b6 <__swbuf_r+0x1a>
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <__swbuf_r+0xa0>)
 8009918:	429c      	cmp	r4, r3
 800991a:	bf08      	it	eq
 800991c:	68ec      	ldreq	r4, [r5, #12]
 800991e:	e7ca      	b.n	80098b6 <__swbuf_r+0x1a>
 8009920:	4621      	mov	r1, r4
 8009922:	4628      	mov	r0, r5
 8009924:	f000 f82c 	bl	8009980 <__swsetup_r>
 8009928:	2800      	cmp	r0, #0
 800992a:	d0cb      	beq.n	80098c4 <__swbuf_r+0x28>
 800992c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009930:	e7ea      	b.n	8009908 <__swbuf_r+0x6c>
 8009932:	bf00      	nop
 8009934:	08009ffc 	.word	0x08009ffc
 8009938:	0800a01c 	.word	0x0800a01c
 800993c:	08009fdc 	.word	0x08009fdc

08009940 <__ascii_wctomb>:
 8009940:	b149      	cbz	r1, 8009956 <__ascii_wctomb+0x16>
 8009942:	2aff      	cmp	r2, #255	; 0xff
 8009944:	bf85      	ittet	hi
 8009946:	238a      	movhi	r3, #138	; 0x8a
 8009948:	6003      	strhi	r3, [r0, #0]
 800994a:	700a      	strbls	r2, [r1, #0]
 800994c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009950:	bf98      	it	ls
 8009952:	2001      	movls	r0, #1
 8009954:	4770      	bx	lr
 8009956:	4608      	mov	r0, r1
 8009958:	4770      	bx	lr
	...

0800995c <_write_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d07      	ldr	r5, [pc, #28]	; (800997c <_write_r+0x20>)
 8009960:	4604      	mov	r4, r0
 8009962:	4608      	mov	r0, r1
 8009964:	4611      	mov	r1, r2
 8009966:	2200      	movs	r2, #0
 8009968:	602a      	str	r2, [r5, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	f7fa fd89 	bl	8004482 <_write>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_write_r+0x1e>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_write_r+0x1e>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	200002ac 	.word	0x200002ac

08009980 <__swsetup_r>:
 8009980:	4b32      	ldr	r3, [pc, #200]	; (8009a4c <__swsetup_r+0xcc>)
 8009982:	b570      	push	{r4, r5, r6, lr}
 8009984:	681d      	ldr	r5, [r3, #0]
 8009986:	4606      	mov	r6, r0
 8009988:	460c      	mov	r4, r1
 800998a:	b125      	cbz	r5, 8009996 <__swsetup_r+0x16>
 800998c:	69ab      	ldr	r3, [r5, #24]
 800998e:	b913      	cbnz	r3, 8009996 <__swsetup_r+0x16>
 8009990:	4628      	mov	r0, r5
 8009992:	f7fd fc6b 	bl	800726c <__sinit>
 8009996:	4b2e      	ldr	r3, [pc, #184]	; (8009a50 <__swsetup_r+0xd0>)
 8009998:	429c      	cmp	r4, r3
 800999a:	d10f      	bne.n	80099bc <__swsetup_r+0x3c>
 800999c:	686c      	ldr	r4, [r5, #4]
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a4:	0719      	lsls	r1, r3, #28
 80099a6:	d42c      	bmi.n	8009a02 <__swsetup_r+0x82>
 80099a8:	06dd      	lsls	r5, r3, #27
 80099aa:	d411      	bmi.n	80099d0 <__swsetup_r+0x50>
 80099ac:	2309      	movs	r3, #9
 80099ae:	6033      	str	r3, [r6, #0]
 80099b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099ba:	e03e      	b.n	8009a3a <__swsetup_r+0xba>
 80099bc:	4b25      	ldr	r3, [pc, #148]	; (8009a54 <__swsetup_r+0xd4>)
 80099be:	429c      	cmp	r4, r3
 80099c0:	d101      	bne.n	80099c6 <__swsetup_r+0x46>
 80099c2:	68ac      	ldr	r4, [r5, #8]
 80099c4:	e7eb      	b.n	800999e <__swsetup_r+0x1e>
 80099c6:	4b24      	ldr	r3, [pc, #144]	; (8009a58 <__swsetup_r+0xd8>)
 80099c8:	429c      	cmp	r4, r3
 80099ca:	bf08      	it	eq
 80099cc:	68ec      	ldreq	r4, [r5, #12]
 80099ce:	e7e6      	b.n	800999e <__swsetup_r+0x1e>
 80099d0:	0758      	lsls	r0, r3, #29
 80099d2:	d512      	bpl.n	80099fa <__swsetup_r+0x7a>
 80099d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099d6:	b141      	cbz	r1, 80099ea <__swsetup_r+0x6a>
 80099d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099dc:	4299      	cmp	r1, r3
 80099de:	d002      	beq.n	80099e6 <__swsetup_r+0x66>
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7fe fdd9 	bl	8008598 <_free_r>
 80099e6:	2300      	movs	r3, #0
 80099e8:	6363      	str	r3, [r4, #52]	; 0x34
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099f0:	81a3      	strh	r3, [r4, #12]
 80099f2:	2300      	movs	r3, #0
 80099f4:	6063      	str	r3, [r4, #4]
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	6023      	str	r3, [r4, #0]
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	f043 0308 	orr.w	r3, r3, #8
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	6923      	ldr	r3, [r4, #16]
 8009a04:	b94b      	cbnz	r3, 8009a1a <__swsetup_r+0x9a>
 8009a06:	89a3      	ldrh	r3, [r4, #12]
 8009a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a10:	d003      	beq.n	8009a1a <__swsetup_r+0x9a>
 8009a12:	4621      	mov	r1, r4
 8009a14:	4630      	mov	r0, r6
 8009a16:	f7fe f87f 	bl	8007b18 <__smakebuf_r>
 8009a1a:	89a0      	ldrh	r0, [r4, #12]
 8009a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a20:	f010 0301 	ands.w	r3, r0, #1
 8009a24:	d00a      	beq.n	8009a3c <__swsetup_r+0xbc>
 8009a26:	2300      	movs	r3, #0
 8009a28:	60a3      	str	r3, [r4, #8]
 8009a2a:	6963      	ldr	r3, [r4, #20]
 8009a2c:	425b      	negs	r3, r3
 8009a2e:	61a3      	str	r3, [r4, #24]
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	b943      	cbnz	r3, 8009a46 <__swsetup_r+0xc6>
 8009a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a38:	d1ba      	bne.n	80099b0 <__swsetup_r+0x30>
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}
 8009a3c:	0781      	lsls	r1, r0, #30
 8009a3e:	bf58      	it	pl
 8009a40:	6963      	ldrpl	r3, [r4, #20]
 8009a42:	60a3      	str	r3, [r4, #8]
 8009a44:	e7f4      	b.n	8009a30 <__swsetup_r+0xb0>
 8009a46:	2000      	movs	r0, #0
 8009a48:	e7f7      	b.n	8009a3a <__swsetup_r+0xba>
 8009a4a:	bf00      	nop
 8009a4c:	2000000c 	.word	0x2000000c
 8009a50:	08009ffc 	.word	0x08009ffc
 8009a54:	0800a01c 	.word	0x0800a01c
 8009a58:	08009fdc 	.word	0x08009fdc

08009a5c <__assert_func>:
 8009a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a5e:	4614      	mov	r4, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	4b09      	ldr	r3, [pc, #36]	; (8009a88 <__assert_func+0x2c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4605      	mov	r5, r0
 8009a68:	68d8      	ldr	r0, [r3, #12]
 8009a6a:	b14c      	cbz	r4, 8009a80 <__assert_func+0x24>
 8009a6c:	4b07      	ldr	r3, [pc, #28]	; (8009a8c <__assert_func+0x30>)
 8009a6e:	9100      	str	r1, [sp, #0]
 8009a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a74:	4906      	ldr	r1, [pc, #24]	; (8009a90 <__assert_func+0x34>)
 8009a76:	462b      	mov	r3, r5
 8009a78:	f000 f81e 	bl	8009ab8 <fiprintf>
 8009a7c:	f000 f8ca 	bl	8009c14 <abort>
 8009a80:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <__assert_func+0x38>)
 8009a82:	461c      	mov	r4, r3
 8009a84:	e7f3      	b.n	8009a6e <__assert_func+0x12>
 8009a86:	bf00      	nop
 8009a88:	2000000c 	.word	0x2000000c
 8009a8c:	0800a240 	.word	0x0800a240
 8009a90:	0800a24d 	.word	0x0800a24d
 8009a94:	0800a27b 	.word	0x0800a27b

08009a98 <_close_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4d06      	ldr	r5, [pc, #24]	; (8009ab4 <_close_r+0x1c>)
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	4604      	mov	r4, r0
 8009aa0:	4608      	mov	r0, r1
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	f7fa fd09 	bl	80044ba <_close>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_close_r+0x1a>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_close_r+0x1a>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	200002ac 	.word	0x200002ac

08009ab8 <fiprintf>:
 8009ab8:	b40e      	push	{r1, r2, r3}
 8009aba:	b503      	push	{r0, r1, lr}
 8009abc:	4601      	mov	r1, r0
 8009abe:	ab03      	add	r3, sp, #12
 8009ac0:	4805      	ldr	r0, [pc, #20]	; (8009ad8 <fiprintf+0x20>)
 8009ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ac6:	6800      	ldr	r0, [r0, #0]
 8009ac8:	9301      	str	r3, [sp, #4]
 8009aca:	f7fe ffcb 	bl	8008a64 <_vfiprintf_r>
 8009ace:	b002      	add	sp, #8
 8009ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ad4:	b003      	add	sp, #12
 8009ad6:	4770      	bx	lr
 8009ad8:	2000000c 	.word	0x2000000c

08009adc <_fstat_r>:
 8009adc:	b538      	push	{r3, r4, r5, lr}
 8009ade:	4d07      	ldr	r5, [pc, #28]	; (8009afc <_fstat_r+0x20>)
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4604      	mov	r4, r0
 8009ae4:	4608      	mov	r0, r1
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	602b      	str	r3, [r5, #0]
 8009aea:	f7fa fcf2 	bl	80044d2 <_fstat>
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	d102      	bne.n	8009af8 <_fstat_r+0x1c>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	b103      	cbz	r3, 8009af8 <_fstat_r+0x1c>
 8009af6:	6023      	str	r3, [r4, #0]
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	200002ac 	.word	0x200002ac

08009b00 <_isatty_r>:
 8009b00:	b538      	push	{r3, r4, r5, lr}
 8009b02:	4d06      	ldr	r5, [pc, #24]	; (8009b1c <_isatty_r+0x1c>)
 8009b04:	2300      	movs	r3, #0
 8009b06:	4604      	mov	r4, r0
 8009b08:	4608      	mov	r0, r1
 8009b0a:	602b      	str	r3, [r5, #0]
 8009b0c:	f7fa fcf1 	bl	80044f2 <_isatty>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_isatty_r+0x1a>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_isatty_r+0x1a>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	200002ac 	.word	0x200002ac

08009b20 <_lseek_r>:
 8009b20:	b538      	push	{r3, r4, r5, lr}
 8009b22:	4d07      	ldr	r5, [pc, #28]	; (8009b40 <_lseek_r+0x20>)
 8009b24:	4604      	mov	r4, r0
 8009b26:	4608      	mov	r0, r1
 8009b28:	4611      	mov	r1, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	602a      	str	r2, [r5, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f7fa fcea 	bl	8004508 <_lseek>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d102      	bne.n	8009b3e <_lseek_r+0x1e>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	b103      	cbz	r3, 8009b3e <_lseek_r+0x1e>
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	bd38      	pop	{r3, r4, r5, pc}
 8009b40:	200002ac 	.word	0x200002ac

08009b44 <memmove>:
 8009b44:	4288      	cmp	r0, r1
 8009b46:	b510      	push	{r4, lr}
 8009b48:	eb01 0402 	add.w	r4, r1, r2
 8009b4c:	d902      	bls.n	8009b54 <memmove+0x10>
 8009b4e:	4284      	cmp	r4, r0
 8009b50:	4623      	mov	r3, r4
 8009b52:	d807      	bhi.n	8009b64 <memmove+0x20>
 8009b54:	1e43      	subs	r3, r0, #1
 8009b56:	42a1      	cmp	r1, r4
 8009b58:	d008      	beq.n	8009b6c <memmove+0x28>
 8009b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b62:	e7f8      	b.n	8009b56 <memmove+0x12>
 8009b64:	4402      	add	r2, r0
 8009b66:	4601      	mov	r1, r0
 8009b68:	428a      	cmp	r2, r1
 8009b6a:	d100      	bne.n	8009b6e <memmove+0x2a>
 8009b6c:	bd10      	pop	{r4, pc}
 8009b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b76:	e7f7      	b.n	8009b68 <memmove+0x24>

08009b78 <__malloc_lock>:
 8009b78:	4801      	ldr	r0, [pc, #4]	; (8009b80 <__malloc_lock+0x8>)
 8009b7a:	f7fd bfa6 	b.w	8007aca <__retarget_lock_acquire_recursive>
 8009b7e:	bf00      	nop
 8009b80:	200002a0 	.word	0x200002a0

08009b84 <__malloc_unlock>:
 8009b84:	4801      	ldr	r0, [pc, #4]	; (8009b8c <__malloc_unlock+0x8>)
 8009b86:	f7fd bfa1 	b.w	8007acc <__retarget_lock_release_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	200002a0 	.word	0x200002a0

08009b90 <_realloc_r>:
 8009b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b94:	4680      	mov	r8, r0
 8009b96:	4614      	mov	r4, r2
 8009b98:	460e      	mov	r6, r1
 8009b9a:	b921      	cbnz	r1, 8009ba6 <_realloc_r+0x16>
 8009b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	f7fe bd65 	b.w	8008670 <_malloc_r>
 8009ba6:	b92a      	cbnz	r2, 8009bb4 <_realloc_r+0x24>
 8009ba8:	f7fe fcf6 	bl	8008598 <_free_r>
 8009bac:	4625      	mov	r5, r4
 8009bae:	4628      	mov	r0, r5
 8009bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb4:	f000 f835 	bl	8009c22 <_malloc_usable_size_r>
 8009bb8:	4284      	cmp	r4, r0
 8009bba:	4607      	mov	r7, r0
 8009bbc:	d802      	bhi.n	8009bc4 <_realloc_r+0x34>
 8009bbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bc2:	d812      	bhi.n	8009bea <_realloc_r+0x5a>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	f7fe fd52 	bl	8008670 <_malloc_r>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d0ed      	beq.n	8009bae <_realloc_r+0x1e>
 8009bd2:	42bc      	cmp	r4, r7
 8009bd4:	4622      	mov	r2, r4
 8009bd6:	4631      	mov	r1, r6
 8009bd8:	bf28      	it	cs
 8009bda:	463a      	movcs	r2, r7
 8009bdc:	f7fd fff6 	bl	8007bcc <memcpy>
 8009be0:	4631      	mov	r1, r6
 8009be2:	4640      	mov	r0, r8
 8009be4:	f7fe fcd8 	bl	8008598 <_free_r>
 8009be8:	e7e1      	b.n	8009bae <_realloc_r+0x1e>
 8009bea:	4635      	mov	r5, r6
 8009bec:	e7df      	b.n	8009bae <_realloc_r+0x1e>
	...

08009bf0 <_read_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	4d07      	ldr	r5, [pc, #28]	; (8009c10 <_read_r+0x20>)
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	602a      	str	r2, [r5, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	f7fa fc22 	bl	8004448 <_read>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	d102      	bne.n	8009c0e <_read_r+0x1e>
 8009c08:	682b      	ldr	r3, [r5, #0]
 8009c0a:	b103      	cbz	r3, 8009c0e <_read_r+0x1e>
 8009c0c:	6023      	str	r3, [r4, #0]
 8009c0e:	bd38      	pop	{r3, r4, r5, pc}
 8009c10:	200002ac 	.word	0x200002ac

08009c14 <abort>:
 8009c14:	b508      	push	{r3, lr}
 8009c16:	2006      	movs	r0, #6
 8009c18:	f000 f834 	bl	8009c84 <raise>
 8009c1c:	2001      	movs	r0, #1
 8009c1e:	f7fa fc09 	bl	8004434 <_exit>

08009c22 <_malloc_usable_size_r>:
 8009c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c26:	1f18      	subs	r0, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bfbc      	itt	lt
 8009c2c:	580b      	ldrlt	r3, [r1, r0]
 8009c2e:	18c0      	addlt	r0, r0, r3
 8009c30:	4770      	bx	lr

08009c32 <_raise_r>:
 8009c32:	291f      	cmp	r1, #31
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4604      	mov	r4, r0
 8009c38:	460d      	mov	r5, r1
 8009c3a:	d904      	bls.n	8009c46 <_raise_r+0x14>
 8009c3c:	2316      	movs	r3, #22
 8009c3e:	6003      	str	r3, [r0, #0]
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c44:	bd38      	pop	{r3, r4, r5, pc}
 8009c46:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c48:	b112      	cbz	r2, 8009c50 <_raise_r+0x1e>
 8009c4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c4e:	b94b      	cbnz	r3, 8009c64 <_raise_r+0x32>
 8009c50:	4620      	mov	r0, r4
 8009c52:	f000 f831 	bl	8009cb8 <_getpid_r>
 8009c56:	462a      	mov	r2, r5
 8009c58:	4601      	mov	r1, r0
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c60:	f000 b818 	b.w	8009c94 <_kill_r>
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d00a      	beq.n	8009c7e <_raise_r+0x4c>
 8009c68:	1c59      	adds	r1, r3, #1
 8009c6a:	d103      	bne.n	8009c74 <_raise_r+0x42>
 8009c6c:	2316      	movs	r3, #22
 8009c6e:	6003      	str	r3, [r0, #0]
 8009c70:	2001      	movs	r0, #1
 8009c72:	e7e7      	b.n	8009c44 <_raise_r+0x12>
 8009c74:	2400      	movs	r4, #0
 8009c76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	4798      	blx	r3
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e7e0      	b.n	8009c44 <_raise_r+0x12>
	...

08009c84 <raise>:
 8009c84:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <raise+0xc>)
 8009c86:	4601      	mov	r1, r0
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	f7ff bfd2 	b.w	8009c32 <_raise_r>
 8009c8e:	bf00      	nop
 8009c90:	2000000c 	.word	0x2000000c

08009c94 <_kill_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4d07      	ldr	r5, [pc, #28]	; (8009cb4 <_kill_r+0x20>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	4611      	mov	r1, r2
 8009ca0:	602b      	str	r3, [r5, #0]
 8009ca2:	f7fa fbb7 	bl	8004414 <_kill>
 8009ca6:	1c43      	adds	r3, r0, #1
 8009ca8:	d102      	bne.n	8009cb0 <_kill_r+0x1c>
 8009caa:	682b      	ldr	r3, [r5, #0]
 8009cac:	b103      	cbz	r3, 8009cb0 <_kill_r+0x1c>
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	bd38      	pop	{r3, r4, r5, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200002ac 	.word	0x200002ac

08009cb8 <_getpid_r>:
 8009cb8:	f7fa bba4 	b.w	8004404 <_getpid>

08009cbc <_init>:
 8009cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbe:	bf00      	nop
 8009cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cc2:	bc08      	pop	{r3}
 8009cc4:	469e      	mov	lr, r3
 8009cc6:	4770      	bx	lr

08009cc8 <_fini>:
 8009cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cca:	bf00      	nop
 8009ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cce:	bc08      	pop	{r3}
 8009cd0:	469e      	mov	lr, r3
 8009cd2:	4770      	bx	lr
