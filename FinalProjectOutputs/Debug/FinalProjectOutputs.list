
FinalProjectOutputs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e110  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800e2d0  0800e2d0  0001e2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f2ac  0800f2ac  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f2ac  0800f2ac  0001f2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f2b4  0800f2b4  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f2b4  0800f2b4  0001f2b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f2b8  0800f2b8  0001f2b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f2bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  200001f0  0800f4ac  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001480  0800f4ac  00021480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b50  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000408d  00000000  00000000  00041d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  00045e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001850  00000000  00000000  000477d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003016a  00000000  00000000  00049020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e424  00000000  00000000  0007918a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012ab29  00000000  00000000  000975ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c20d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008464  00000000  00000000  001c219c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001ca600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800e2b8 	.word	0x0800e2b8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	0800e2b8 	.word	0x0800e2b8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001032:	2003      	movs	r0, #3
 8001034:	f000 ffe9 	bl	800200a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001038:	200f      	movs	r0, #15
 800103a:	f007 fda3 	bl	8008b84 <HAL_InitTick>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	e001      	b.n	800104e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104a:	f007 fc03 	bl	8008854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x20>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x24>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_IncTick+0x24>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000004 	.word	0x20000004
 800107c:	2000020c 	.word	0x2000020c

08001080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return uwTick;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <HAL_GetTick+0x14>)
 8001086:	681b      	ldr	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2000020c 	.word	0x2000020c

08001098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff ffee 	bl	8001080 <HAL_GetTick>
 80010a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b0:	d005      	beq.n	80010be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_Delay+0x44>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4413      	add	r3, r2
 80010bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010be:	bf00      	nop
 80010c0:	f7ff ffde 	bl	8001080 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d8f7      	bhi.n	80010c0 <HAL_Delay+0x28>
  {
  }
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000004 	.word	0x20000004

080010e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	609a      	str	r2, [r3, #8]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3360      	adds	r3, #96	; 0x60
 800115a:	461a      	mov	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <LL_ADC_SetOffset+0x44>)
 800116a:	4013      	ands	r3, r2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	4313      	orrs	r3, r2
 8001178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001180:	bf00      	nop
 8001182:	371c      	adds	r7, #28
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	03fff000 	.word	0x03fff000

08001190 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3360      	adds	r3, #96	; 0x60
 800119e:	461a      	mov	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3360      	adds	r3, #96	; 0x60
 80011cc:	461a      	mov	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80011e6:	bf00      	nop
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	615a      	str	r2, [r3, #20]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3330      	adds	r3, #48	; 0x30
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	f003 030c 	and.w	r3, r3, #12
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	f003 031f 	and.w	r3, r3, #31
 8001242:	211f      	movs	r1, #31
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	0e9b      	lsrs	r3, r3, #26
 8001250:	f003 011f 	and.w	r1, r3, #31
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	431a      	orrs	r2, r3
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001264:	bf00      	nop
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3314      	adds	r3, #20
 8001280:	461a      	mov	r2, r3
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	0e5b      	lsrs	r3, r3, #25
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	0d1b      	lsrs	r3, r3, #20
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2107      	movs	r1, #7
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	0d1b      	lsrs	r3, r3, #20
 80012aa:	f003 031f 	and.w	r3, r3, #31
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012ba:	bf00      	nop
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0318 	and.w	r3, r3, #24
 80012ea:	4908      	ldr	r1, [pc, #32]	; (800130c <LL_ADC_SetChannelSingleDiff+0x44>)
 80012ec:	40d9      	lsrs	r1, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	400b      	ands	r3, r1
 80012f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012f6:	431a      	orrs	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	0007ffff 	.word	0x0007ffff

08001310 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6093      	str	r3, [r2, #8]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001348:	d101      	bne.n	800134e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800136c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001370:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001398:	d101      	bne.n	800139e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <LL_ADC_IsEnabled+0x18>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <LL_ADC_IsEnabled+0x1a>
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d101      	bne.n	80013ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b08      	cmp	r3, #8
 800140a:	d101      	bne.n	8001410 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e12f      	b.n	800169a <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001444:	2b00      	cmp	r3, #0
 8001446:	d109      	bne.n	800145c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f007 fa2b 	bl	80088a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff67 	bl	8001334 <LL_ADC_IsDeepPowerDownEnabled>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d004      	beq.n	8001476 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff4d 	bl	8001310 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff82 	bl	8001384 <LL_ADC_IsInternalRegulatorEnabled>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d115      	bne.n	80014b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff66 	bl	800135c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001490:	4b84      	ldr	r3, [pc, #528]	; (80016a4 <HAL_ADC_Init+0x284>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	4a84      	ldr	r2, [pc, #528]	; (80016a8 <HAL_ADC_Init+0x288>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014a4:	e002      	b.n	80014ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d1f9      	bne.n	80014a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff64 	bl	8001384 <LL_ADC_IsInternalRegulatorEnabled>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10d      	bne.n	80014de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c6:	f043 0210 	orr.w	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	f043 0201 	orr.w	r2, r3, #1
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff75 	bl	80013d2 <LL_ADC_REG_IsConversionOngoing>
 80014e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f003 0310 	and.w	r3, r3, #16
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 80c8 	bne.w	8001688 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f040 80c4 	bne.w	8001688 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001508:	f043 0202 	orr.w	r2, r3, #2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff49 	bl	80013ac <LL_ADC_IsEnabled>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10b      	bne.n	8001538 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001520:	4862      	ldr	r0, [pc, #392]	; (80016ac <HAL_ADC_Init+0x28c>)
 8001522:	f7ff ff43 	bl	80013ac <LL_ADC_IsEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	4619      	mov	r1, r3
 8001532:	485f      	ldr	r0, [pc, #380]	; (80016b0 <HAL_ADC_Init+0x290>)
 8001534:	f7ff fdd4 	bl	80010e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	7e5b      	ldrb	r3, [r3, #25]
 800153c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001542:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001548:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800154e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001556:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d106      	bne.n	8001574 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	3b01      	subs	r3, #1
 800156c:	045b      	lsls	r3, r3, #17
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	4b47      	ldr	r3, [pc, #284]	; (80016b4 <HAL_ADC_Init+0x294>)
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	69b9      	ldr	r1, [r7, #24]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff12 	bl	80013d2 <LL_ADC_REG_IsConversionOngoing>
 80015ae:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff1f 	bl	80013f8 <LL_ADC_INJ_IsConversionOngoing>
 80015ba:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d140      	bne.n	8001644 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d13d      	bne.n	8001644 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	7e1b      	ldrb	r3, [r3, #24]
 80015d0:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d2:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015da:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015ea:	f023 0306 	bic.w	r3, r3, #6
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d118      	bne.n	8001634 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001618:	4311      	orrs	r1, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800161e:	4311      	orrs	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001624:	430a      	orrs	r2, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	e007      	b.n	8001644 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d10c      	bne.n	8001666 <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f023 010f 	bic.w	r1, r3, #15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	1e5a      	subs	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
 8001664:	e007      	b.n	8001676 <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 020f 	bic.w	r2, r2, #15
 8001674:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	f043 0201 	orr.w	r2, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	659a      	str	r2, [r3, #88]	; 0x58
 8001686:	e007      	b.n	8001698 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	f043 0210 	orr.w	r2, r3, #16
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001698:	7ffb      	ldrb	r3, [r7, #31]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000018 	.word	0x20000018
 80016a8:	053e2d63 	.word	0x053e2d63
 80016ac:	50040000 	.word	0x50040000
 80016b0:	50040300 	.word	0x50040300
 80016b4:	fff0c007 	.word	0xfff0c007

080016b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b0b6      	sub	sp, #216	; 0xd8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_ADC_ConfigChannel+0x22>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e3d5      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x7ce>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fe73 	bl	80013d2 <LL_ADC_REG_IsConversionOngoing>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 83ba 	bne.w	8001e68 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d824      	bhi.n	8001746 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	3b02      	subs	r3, #2
 8001702:	2b03      	cmp	r3, #3
 8001704:	d81b      	bhi.n	800173e <HAL_ADC_ConfigChannel+0x86>
 8001706:	a201      	add	r2, pc, #4	; (adr r2, 800170c <HAL_ADC_ConfigChannel+0x54>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	0800171d 	.word	0x0800171d
 8001710:	08001725 	.word	0x08001725
 8001714:	0800172d 	.word	0x0800172d
 8001718:	08001735 	.word	0x08001735
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	220c      	movs	r2, #12
 8001720:	605a      	str	r2, [r3, #4]
          break;
 8001722:	e011      	b.n	8001748 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2212      	movs	r2, #18
 8001728:	605a      	str	r2, [r3, #4]
          break;
 800172a:	e00d      	b.n	8001748 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2218      	movs	r2, #24
 8001730:	605a      	str	r2, [r3, #4]
          break;
 8001732:	e009      	b.n	8001748 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800173a:	605a      	str	r2, [r3, #4]
          break;
 800173c:	e004      	b.n	8001748 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2206      	movs	r2, #6
 8001742:	605a      	str	r2, [r3, #4]
          break;
 8001744:	e000      	b.n	8001748 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001746:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	f7ff fd5f 	bl	8001218 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fe37 	bl	80013d2 <LL_ADC_REG_IsConversionOngoing>
 8001764:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fe43 	bl	80013f8 <LL_ADC_INJ_IsConversionOngoing>
 8001772:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001776:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800177a:	2b00      	cmp	r3, #0
 800177c:	f040 81c1 	bne.w	8001b02 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001784:	2b00      	cmp	r3, #0
 8001786:	f040 81bc 	bne.w	8001b02 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001792:	d10f      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff fd66 	bl	8001270 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fd20 	bl	80011f2 <LL_ADC_SetSamplingTimeCommonConfig>
 80017b2:	e00e      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	461a      	mov	r2, r3
 80017c2:	f7ff fd55 	bl	8001270 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2100      	movs	r1, #0
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fd10 	bl	80011f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d00a      	beq.n	800180a <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6919      	ldr	r1, [r3, #16]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001804:	f7ff fca0 	bl	8001148 <LL_ADC_SetOffset>
 8001808:	e17b      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2100      	movs	r1, #0
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fcbd 	bl	8001190 <LL_ADC_GetOffsetChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10a      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x17e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fcb2 	bl	8001190 <LL_ADC_GetOffsetChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	0e9b      	lsrs	r3, r3, #26
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	e01e      	b.n	8001874 <HAL_ADC_ConfigChannel+0x1bc>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fca7 	bl	8001190 <LL_ADC_GetOffsetChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001858:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800185c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001864:	2320      	movs	r3, #32
 8001866:	e004      	b.n	8001872 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1d4>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	0e9b      	lsrs	r3, r3, #26
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	e018      	b.n	80018be <HAL_ADC_ConfigChannel+0x206>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001894:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001898:	fa93 f3a3 	rbit	r3, r3
 800189c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80018a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80018a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80018b0:	2320      	movs	r3, #32
 80018b2:	e004      	b.n	80018be <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80018b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018b8:	fab3 f383 	clz	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018be:	429a      	cmp	r2, r3
 80018c0:	d106      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fc76 	bl	80011bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fc5a 	bl	8001190 <LL_ADC_GetOffsetChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <HAL_ADC_ConfigChannel+0x244>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2101      	movs	r1, #1
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fc4f 	bl	8001190 <LL_ADC_GetOffsetChannel>
 80018f2:	4603      	mov	r3, r0
 80018f4:	0e9b      	lsrs	r3, r3, #26
 80018f6:	f003 021f 	and.w	r2, r3, #31
 80018fa:	e01e      	b.n	800193a <HAL_ADC_ConfigChannel+0x282>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fc44 	bl	8001190 <LL_ADC_GetOffsetChannel>
 8001908:	4603      	mov	r3, r0
 800190a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800191a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001922:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800192a:	2320      	movs	r3, #32
 800192c:	e004      	b.n	8001938 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800192e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x29a>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	e018      	b.n	8001984 <HAL_ADC_ConfigChannel+0x2cc>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001966:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800196a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800196e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001976:	2320      	movs	r3, #32
 8001978:	e004      	b.n	8001984 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800197a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001984:	429a      	cmp	r2, r3
 8001986:	d106      	bne.n	8001996 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2200      	movs	r2, #0
 800198e:	2101      	movs	r1, #1
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fc13 	bl	80011bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2102      	movs	r1, #2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fbf7 	bl	8001190 <LL_ADC_GetOffsetChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10a      	bne.n	80019c2 <HAL_ADC_ConfigChannel+0x30a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2102      	movs	r1, #2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fbec 	bl	8001190 <LL_ADC_GetOffsetChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	e01e      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x348>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2102      	movs	r1, #2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fbe1 	bl	8001190 <LL_ADC_GetOffsetChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80019e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80019e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80019f0:	2320      	movs	r3, #32
 80019f2:	e004      	b.n	80019fe <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 80019f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x360>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	e016      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x38e>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001a2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	e004      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d106      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2102      	movs	r1, #2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fbb2 	bl	80011bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2103      	movs	r1, #3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fb96 	bl	8001190 <LL_ADC_GetOffsetChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x3cc>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2103      	movs	r1, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb8b 	bl	8001190 <LL_ADC_GetOffsetChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	0e9b      	lsrs	r3, r3, #26
 8001a7e:	f003 021f 	and.w	r2, r3, #31
 8001a82:	e017      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x3fc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2103      	movs	r1, #3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb80 	bl	8001190 <LL_ADC_GetOffsetChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a96:	fa93 f3a3 	rbit	r3, r3
 8001a9a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a9e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001aa6:	2320      	movs	r3, #32
 8001aa8:	e003      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x414>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0e9b      	lsrs	r3, r3, #26
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	e011      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x438>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad4:	fa93 f3a3 	rbit	r3, r3
 8001ad8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001adc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e003      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d106      	bne.n	8001b02 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	2103      	movs	r1, #3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff fb5d 	bl	80011bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fc50 	bl	80013ac <LL_ADC_IsEnabled>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8140 	bne.w	8001d94 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	461a      	mov	r2, r3
 8001b22:	f7ff fbd1 	bl	80012c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	4a8f      	ldr	r2, [pc, #572]	; (8001d68 <HAL_ADC_ConfigChannel+0x6b0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	f040 8131 	bne.w	8001d94 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10b      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x4a2>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	3301      	adds	r3, #1
 8001b4a:	f003 031f 	and.w	r3, r3, #31
 8001b4e:	2b09      	cmp	r3, #9
 8001b50:	bf94      	ite	ls
 8001b52:	2301      	movls	r3, #1
 8001b54:	2300      	movhi	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	e019      	b.n	8001b8e <HAL_ADC_ConfigChannel+0x4d6>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b62:	fa93 f3a3 	rbit	r3, r3
 8001b66:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b6a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e003      	b.n	8001b7e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b78:	fab3 f383 	clz	r3, r3
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f003 031f 	and.w	r3, r3, #31
 8001b84:	2b09      	cmp	r3, #9
 8001b86:	bf94      	ite	ls
 8001b88:	2301      	movls	r3, #1
 8001b8a:	2300      	movhi	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d079      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d107      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x4f6>
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	0e9b      	lsrs	r3, r3, #26
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	069b      	lsls	r3, r3, #26
 8001ba8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bac:	e015      	b.n	8001bda <HAL_ADC_ConfigChannel+0x522>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbe:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001bc6:	2320      	movs	r3, #32
 8001bc8:	e003      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	069b      	lsls	r3, r3, #26
 8001bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x542>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e9b      	lsrs	r3, r3, #26
 8001bec:	3301      	adds	r3, #1
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf8:	e017      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x572>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e003      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f003 031f 	and.w	r3, r3, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	ea42 0103 	orr.w	r1, r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x598>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e9b      	lsrs	r3, r3, #26
 8001c40:	3301      	adds	r3, #1
 8001c42:	f003 021f 	and.w	r2, r3, #31
 8001c46:	4613      	mov	r3, r2
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	051b      	lsls	r3, r3, #20
 8001c4e:	e018      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x5ca>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e003      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 021f 	and.w	r2, r3, #31
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c82:	430b      	orrs	r3, r1
 8001c84:	e081      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x5ea>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	3301      	adds	r3, #1
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca0:	e015      	b.n	8001cce <HAL_ADC_ConfigChannel+0x616>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e003      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	069b      	lsls	r3, r3, #26
 8001cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x636>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	e017      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x666>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	61fb      	str	r3, [r7, #28]
  return result;
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x692>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	3301      	adds	r3, #1
 8001d36:	f003 021f 	and.w	r2, r3, #31
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	051b      	lsls	r3, r3, #20
 8001d44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d48:	e01e      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x6d0>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa93 f3a3 	rbit	r3, r3
 8001d56:	613b      	str	r3, [r7, #16]
  return result;
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d104      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001d62:	2320      	movs	r3, #32
 8001d64:	e006      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x6bc>
 8001d66:	bf00      	nop
 8001d68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fab3 f383 	clz	r3, r3
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3301      	adds	r3, #1
 8001d76:	f003 021f 	and.w	r2, r3, #31
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	3b1e      	subs	r3, #30
 8001d82:	051b      	lsls	r3, r3, #20
 8001d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	6892      	ldr	r2, [r2, #8]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f7ff fa6e 	bl	8001270 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_ADC_ConfigChannel+0x7d8>)
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d06c      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001da0:	483c      	ldr	r0, [pc, #240]	; (8001e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001da2:	f7ff f9c3 	bl	800112c <LL_ADC_GetCommonPathInternalCh>
 8001da6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3a      	ldr	r2, [pc, #232]	; (8001e98 <HAL_ADC_ConfigChannel+0x7e0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d127      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001db4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d121      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d157      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	482f      	ldr	r0, [pc, #188]	; (8001e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001dd6:	f7ff f996 	bl	8001106 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_ADC_ConfigChannel+0x7e8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	099b      	lsrs	r3, r3, #6
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <HAL_ADC_ConfigChannel+0x7ec>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df4:	e002      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f9      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e02:	e03a      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_ADC_ConfigChannel+0x7f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d113      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x77e>
 8001e0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10d      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d12a      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4819      	ldr	r0, [pc, #100]	; (8001e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e30:	f7ff f969 	bl	8001106 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e34:	e021      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_ADC_ConfigChannel+0x7f4>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d11c      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d116      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_ADC_ConfigChannel+0x7e4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d111      	bne.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480c      	ldr	r0, [pc, #48]	; (8001e94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001e62:	f7ff f950 	bl	8001106 <LL_ADC_SetCommonPathInternalCh>
 8001e66:	e008      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001e82:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	37d8      	adds	r7, #216	; 0xd8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	80080000 	.word	0x80080000
 8001e94:	50040300 	.word	0x50040300
 8001e98:	c7520000 	.word	0xc7520000
 8001e9c:	50040000 	.word	0x50040000
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	053e2d63 	.word	0x053e2d63
 8001ea8:	cb840000 	.word	0xcb840000
 8001eac:	80000001 	.word	0x80000001

08001eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001efc:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <__NVIC_GetPriorityGrouping+0x18>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	0a1b      	lsrs	r3, r3, #8
 8001f02:	f003 0307 	and.w	r3, r3, #7
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	db0b      	blt.n	8001f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 021f 	and.w	r2, r3, #31
 8001f2c:	4907      	ldr	r1, [pc, #28]	; (8001f4c <__NVIC_EnableIRQ+0x38>)
 8001f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	2001      	movs	r0, #1
 8001f36:	fa00 f202 	lsl.w	r2, r0, r2
 8001f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db0a      	blt.n	8001f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <__NVIC_SetPriority+0x4c>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	0112      	lsls	r2, r2, #4
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	440b      	add	r3, r1
 8001f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f78:	e00a      	b.n	8001f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4908      	ldr	r1, [pc, #32]	; (8001fa0 <__NVIC_SetPriority+0x50>)
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	3b04      	subs	r3, #4
 8001f88:	0112      	lsls	r2, r2, #4
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	761a      	strb	r2, [r3, #24]
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b089      	sub	sp, #36	; 0x24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f1c3 0307 	rsb	r3, r3, #7
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	bf28      	it	cs
 8001fc2:	2304      	movcs	r3, #4
 8001fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	2b06      	cmp	r3, #6
 8001fcc:	d902      	bls.n	8001fd4 <NVIC_EncodePriority+0x30>
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3b03      	subs	r3, #3
 8001fd2:	e000      	b.n	8001fd6 <NVIC_EncodePriority+0x32>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	43d9      	mvns	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ffc:	4313      	orrs	r3, r2
         );
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3724      	adds	r7, #36	; 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff4c 	bl	8001eb0 <__NVIC_SetPriorityGrouping>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002032:	f7ff ff61 	bl	8001ef8 <__NVIC_GetPriorityGrouping>
 8002036:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68b9      	ldr	r1, [r7, #8]
 800203c:	6978      	ldr	r0, [r7, #20]
 800203e:	f7ff ffb1 	bl	8001fa4 <NVIC_EncodePriority>
 8002042:	4602      	mov	r2, r0
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff80 	bl	8001f50 <__NVIC_SetPriority>
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff54 	bl	8001f14 <__NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e014      	b.n	80020b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	791b      	ldrb	r3, [r3, #4]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d105      	bne.n	800209c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f006 fc6e 	bl	8008978 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2202      	movs	r2, #2
 80020a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	795b      	ldrb	r3, [r3, #5]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d101      	bne.n	80020d6 <HAL_DAC_Start_DMA+0x1e>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e0ab      	b.n	800222e <HAL_DAC_Start_DMA+0x176>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2201      	movs	r2, #1
 80020da:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2202      	movs	r2, #2
 80020e0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d12f      	bne.n	8002148 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_DAC_Start_DMA+0x180>)
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	4a51      	ldr	r2, [pc, #324]	; (800223c <HAL_DAC_Start_DMA+0x184>)
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a50      	ldr	r2, [pc, #320]	; (8002240 <HAL_DAC_Start_DMA+0x188>)
 80020fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800210e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	2b08      	cmp	r3, #8
 8002114:	d013      	beq.n	800213e <HAL_DAC_Start_DMA+0x86>
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d845      	bhi.n	80021a8 <HAL_DAC_Start_DMA+0xf0>
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_DAC_Start_DMA+0x72>
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	2b04      	cmp	r3, #4
 8002126:	d005      	beq.n	8002134 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002128:	e03e      	b.n	80021a8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3308      	adds	r3, #8
 8002130:	613b      	str	r3, [r7, #16]
        break;
 8002132:	e03c      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	330c      	adds	r3, #12
 800213a:	613b      	str	r3, [r7, #16]
        break;
 800213c:	e037      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3310      	adds	r3, #16
 8002144:	613b      	str	r3, [r7, #16]
        break;
 8002146:	e032      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a3d      	ldr	r2, [pc, #244]	; (8002244 <HAL_DAC_Start_DMA+0x18c>)
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a3c      	ldr	r2, [pc, #240]	; (8002248 <HAL_DAC_Start_DMA+0x190>)
 8002156:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a3b      	ldr	r2, [pc, #236]	; (800224c <HAL_DAC_Start_DMA+0x194>)
 800215e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800216e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	2b08      	cmp	r3, #8
 8002174:	d013      	beq.n	800219e <HAL_DAC_Start_DMA+0xe6>
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d817      	bhi.n	80021ac <HAL_DAC_Start_DMA+0xf4>
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_DAC_Start_DMA+0xd2>
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d005      	beq.n	8002194 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002188:	e010      	b.n	80021ac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3314      	adds	r3, #20
 8002190:	613b      	str	r3, [r7, #16]
        break;
 8002192:	e00c      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3318      	adds	r3, #24
 800219a:	613b      	str	r3, [r7, #16]
        break;
 800219c:	e007      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	331c      	adds	r3, #28
 80021a4:	613b      	str	r3, [r7, #16]
        break;
 80021a6:	e002      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80021a8:	bf00      	nop
 80021aa:	e000      	b.n	80021ae <HAL_DAC_Start_DMA+0xf6>
        break;
 80021ac:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d111      	bne.n	80021d8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6898      	ldr	r0, [r3, #8]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	f000 fb83 	bl	80028d8 <HAL_DMA_Start_IT>
 80021d2:	4603      	mov	r3, r0
 80021d4:	75fb      	strb	r3, [r7, #23]
 80021d6:	e010      	b.n	80021fa <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80021e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	68d8      	ldr	r0, [r3, #12]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	f000 fb71 	bl	80028d8 <HAL_DMA_Start_IT>
 80021f6:	4603      	mov	r3, r0
 80021f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6819      	ldr	r1, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2201      	movs	r2, #1
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	e005      	b.n	800222c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800222c:	7dfb      	ldrb	r3, [r7, #23]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	08002661 	.word	0x08002661
 800223c:	08002683 	.word	0x08002683
 8002240:	0800269f 	.word	0x0800269f
 8002244:	0800271d 	.word	0x0800271d
 8002248:	0800273f 	.word	0x0800273f
 800224c:	0800275b 	.word	0x0800275b

08002250 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2201      	movs	r2, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fb95 	bl	80029ce <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e00c      	b.n	80022d0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 fb87 	bl	80029ce <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80022ce:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f0:	d120      	bne.n	8002334 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002300:	d118      	bne.n	8002334 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2204      	movs	r2, #4
 8002306:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800232c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f84b 	bl	80023ca <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800233e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002342:	d120      	bne.n	8002386 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800234e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002352:	d118      	bne.n	8002386 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2204      	movs	r2, #4
 8002358:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800236e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800237e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f9c1 	bl	8002708 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	795b      	ldrb	r3, [r3, #5]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <HAL_DAC_ConfigChannel+0x1c>
 80023f8:	2302      	movs	r3, #2
 80023fa:	e12a      	b.n	8002652 <HAL_DAC_ConfigChannel+0x272>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2201      	movs	r2, #1
 8002400:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2202      	movs	r2, #2
 8002406:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d174      	bne.n	80024fa <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002410:	f7fe fe36 	bl	8001080 <HAL_GetTick>
 8002414:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d134      	bne.n	8002486 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800241c:	e011      	b.n	8002442 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800241e:	f7fe fe2f 	bl	8001080 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	d90a      	bls.n	8002442 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f043 0208 	orr.w	r2, r3, #8
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2203      	movs	r2, #3
 800243c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e107      	b.n	8002652 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1e6      	bne.n	800241e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002450:	2001      	movs	r0, #1
 8002452:	f7fe fe21 	bl	8001098 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	69d2      	ldr	r2, [r2, #28]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
 8002460:	e01e      	b.n	80024a0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002462:	f7fe fe0d 	bl	8001080 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d90a      	bls.n	8002486 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f043 0208 	orr.w	r2, r3, #8
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2203      	movs	r2, #3
 8002480:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e0e5      	b.n	8002652 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	2b00      	cmp	r3, #0
 800248e:	dbe8      	blt.n	8002462 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002490:	2001      	movs	r0, #1
 8002492:	f7fe fe01 	bl	8001098 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	69d2      	ldr	r2, [r2, #28]
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	ea02 0103 	and.w	r1, r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	6a1a      	ldr	r2, [r3, #32]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	21ff      	movs	r1, #255	; 0xff
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	ea02 0103 	and.w	r1, r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f003 0310 	and.w	r3, r3, #16
 80024f0:	409a      	lsls	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d11d      	bne.n	800253e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002508:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	221f      	movs	r2, #31
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	4013      	ands	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	4313      	orrs	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69fa      	ldr	r2, [r7, #28]
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002544:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2207      	movs	r2, #7
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	4013      	ands	r3, r2
 8002558:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	431a      	orrs	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69fa      	ldr	r2, [r7, #28]
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	4013      	ands	r3, r2
 80025c0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e2:	d104      	bne.n	80025ee <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	e018      	b.n	8002620 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d104      	bne.n	8002600 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	e00f      	b.n	8002620 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002600:	f001 fc10 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8002604:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_DAC_ConfigChannel+0x27c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d904      	bls.n	8002618 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e003      	b.n	8002620 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800261e:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6819      	ldr	r1, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	22c0      	movs	r2, #192	; 0xc0
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2201      	movs	r2, #1
 8002648:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3720      	adds	r7, #32
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	04c4b400 	.word	0x04c4b400

08002660 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff fe8d 	bl	800238e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	711a      	strb	r2, [r3, #4]
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff fe86 	bl	80023a2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f7ff fe7c 	bl	80023b6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	711a      	strb	r2, [r3, #4]
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff ffce 	bl	80026cc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	711a      	strb	r2, [r3, #4]
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff ffc7 	bl	80026e0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff ffbd 	bl	80026f4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	711a      	strb	r2, [r3, #4]
}
 8002780:	bf00      	nop
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e08d      	b.n	80028b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_DMA_Init+0x138>)
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d80f      	bhi.n	80027c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	461a      	mov	r2, r3
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_DMA_Init+0x13c>)
 80027ae:	4413      	add	r3, r2
 80027b0:	4a45      	ldr	r2, [pc, #276]	; (80028c8 <HAL_DMA_Init+0x140>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a42      	ldr	r2, [pc, #264]	; (80028cc <HAL_DMA_Init+0x144>)
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
 80027c4:	e00e      	b.n	80027e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b40      	ldr	r3, [pc, #256]	; (80028d0 <HAL_DMA_Init+0x148>)
 80027ce:	4413      	add	r3, r2
 80027d0:	4a3d      	ldr	r2, [pc, #244]	; (80028c8 <HAL_DMA_Init+0x140>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	009a      	lsls	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a3c      	ldr	r2, [pc, #240]	; (80028d4 <HAL_DMA_Init+0x14c>)
 80027e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fa12 	bl	8002c60 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002844:	d102      	bne.n	800284c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002860:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d010      	beq.n	800288c <HAL_DMA_Init+0x104>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d80c      	bhi.n	800288c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 fa32 	bl	8002cdc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	e008      	b.n	800289e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020407 	.word	0x40020407
 80028c4:	bffdfff8 	.word	0xbffdfff8
 80028c8:	cccccccd 	.word	0xcccccccd
 80028cc:	40020000 	.word	0x40020000
 80028d0:	bffdfbf8 	.word	0xbffdfbf8
 80028d4:	40020400 	.word	0x40020400

080028d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Start_IT+0x20>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e066      	b.n	80029c6 <HAL_DMA_Start_IT+0xee>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d155      	bne.n	80029b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 f957 	bl	8002be4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 020e 	orr.w	r2, r2, #14
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e00f      	b.n	8002970 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0204 	bic.w	r2, r2, #4
 800295e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 020a 	orr.w	r2, r2, #10
 800296e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800298c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	e005      	b.n	80029c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d008      	beq.n	80029f8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2204      	movs	r2, #4
 80029ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e040      	b.n	8002a7a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 020e 	bic.w	r2, r2, #14
 8002a06:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a16:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f003 021c 	and.w	r2, r3, #28
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a66:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa2:	f003 031c 	and.w	r3, r3, #28
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d026      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x7a>
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d021      	beq.n	8002b00 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d107      	bne.n	8002ada <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0204 	bic.w	r2, r2, #4
 8002ad8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 021c 	and.w	r2, r3, #28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2104      	movs	r1, #4
 8002ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d071      	beq.n	8002bda <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002afe:	e06c      	b.n	8002bda <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	f003 031c 	and.w	r3, r3, #28
 8002b08:	2202      	movs	r2, #2
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d02e      	beq.n	8002b72 <HAL_DMA_IRQHandler+0xec>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d029      	beq.n	8002b72 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 020a 	bic.w	r2, r2, #10
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b48:	f003 021c 	and.w	r2, r3, #28
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	2102      	movs	r1, #2
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d038      	beq.n	8002bda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b70:	e033      	b.n	8002bda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f003 031c 	and.w	r3, r3, #28
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d02a      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x156>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d025      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 020e 	bic.w	r2, r2, #14
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f003 021c 	and.w	r2, r3, #28
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2101      	movs	r1, #1
 8002bae:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
}
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002bfa:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d004      	beq.n	8002c0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c0c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f003 021c 	and.w	r2, r3, #28
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c20:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b10      	cmp	r3, #16
 8002c30:	d108      	bne.n	8002c44 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c42:	e007      	b.n	8002c54 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	60da      	str	r2, [r3, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d80a      	bhi.n	8002c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	089b      	lsrs	r3, r3, #2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c80:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6493      	str	r3, [r2, #72]	; 0x48
 8002c88:	e007      	b.n	8002c9a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	009a      	lsls	r2, r3, #2
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c94:	4413      	add	r3, r2
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	3b08      	subs	r3, #8
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	40020407 	.word	0x40020407
 8002cd0:	4002081c 	.word	0x4002081c
 8002cd4:	cccccccd 	.word	0xcccccccd
 8002cd8:	40020880 	.word	0x40020880

08002cdc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cfe:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2201      	movs	r2, #1
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	1000823f 	.word	0x1000823f
 8002d20:	40020940 	.word	0x40020940

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d32:	e166      	b.n	8003002 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8158 	beq.w	8002ffc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d005      	beq.n	8002d64 <HAL_GPIO_Init+0x40>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d130      	bne.n	8002dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	2203      	movs	r2, #3
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 0201 	and.w	r2, r3, #1
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d017      	beq.n	8002e02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	2203      	movs	r2, #3
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d123      	bne.n	8002e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	08da      	lsrs	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3208      	adds	r2, #8
 8002e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	6939      	ldr	r1, [r7, #16]
 8002e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	2203      	movs	r2, #3
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 0203 	and.w	r2, r3, #3
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80b2 	beq.w	8002ffc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e98:	4b61      	ldr	r3, [pc, #388]	; (8003020 <HAL_GPIO_Init+0x2fc>)
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	4a60      	ldr	r2, [pc, #384]	; (8003020 <HAL_GPIO_Init+0x2fc>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_GPIO_Init+0x2fc>)
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002eb0:	4a5c      	ldr	r2, [pc, #368]	; (8003024 <HAL_GPIO_Init+0x300>)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	089b      	lsrs	r3, r3, #2
 8002eb6:	3302      	adds	r3, #2
 8002eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f003 0303 	and.w	r3, r3, #3
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eda:	d02b      	beq.n	8002f34 <HAL_GPIO_Init+0x210>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a52      	ldr	r2, [pc, #328]	; (8003028 <HAL_GPIO_Init+0x304>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d025      	beq.n	8002f30 <HAL_GPIO_Init+0x20c>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a51      	ldr	r2, [pc, #324]	; (800302c <HAL_GPIO_Init+0x308>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d01f      	beq.n	8002f2c <HAL_GPIO_Init+0x208>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a50      	ldr	r2, [pc, #320]	; (8003030 <HAL_GPIO_Init+0x30c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d019      	beq.n	8002f28 <HAL_GPIO_Init+0x204>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a4f      	ldr	r2, [pc, #316]	; (8003034 <HAL_GPIO_Init+0x310>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <HAL_GPIO_Init+0x200>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a4e      	ldr	r2, [pc, #312]	; (8003038 <HAL_GPIO_Init+0x314>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00d      	beq.n	8002f20 <HAL_GPIO_Init+0x1fc>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a4d      	ldr	r2, [pc, #308]	; (800303c <HAL_GPIO_Init+0x318>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <HAL_GPIO_Init+0x1f8>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a4c      	ldr	r2, [pc, #304]	; (8003040 <HAL_GPIO_Init+0x31c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d101      	bne.n	8002f18 <HAL_GPIO_Init+0x1f4>
 8002f14:	2307      	movs	r3, #7
 8002f16:	e00e      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f18:	2308      	movs	r3, #8
 8002f1a:	e00c      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f1c:	2306      	movs	r3, #6
 8002f1e:	e00a      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f20:	2305      	movs	r3, #5
 8002f22:	e008      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f24:	2304      	movs	r3, #4
 8002f26:	e006      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e004      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e002      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f34:	2300      	movs	r3, #0
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	f002 0203 	and.w	r2, r2, #3
 8002f3c:	0092      	lsls	r2, r2, #2
 8002f3e:	4093      	lsls	r3, r2
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f46:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_GPIO_Init+0x300>)
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	4013      	ands	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f78:	4a32      	ldr	r2, [pc, #200]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f7e:	4b31      	ldr	r3, [pc, #196]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fa8:	4b26      	ldr	r3, [pc, #152]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ff6:	4a13      	ldr	r2, [pc, #76]	; (8003044 <HAL_GPIO_Init+0x320>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	f47f ae91 	bne.w	8002d34 <HAL_GPIO_Init+0x10>
  }
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40021000 	.word	0x40021000
 8003024:	40010000 	.word	0x40010000
 8003028:	48000400 	.word	0x48000400
 800302c:	48000800 	.word	0x48000800
 8003030:	48000c00 	.word	0x48000c00
 8003034:	48001000 	.word	0x48001000
 8003038:	48001400 	.word	0x48001400
 800303c:	48001800 	.word	0x48001800
 8003040:	48001c00 	.word	0x48001c00
 8003044:	40010400 	.word	0x40010400

08003048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	807b      	strh	r3, [r7, #2]
 8003054:	4613      	mov	r3, r2
 8003056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003058:	787b      	ldrb	r3, [r7, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800305e:	887a      	ldrh	r2, [r7, #2]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003064:	e002      	b.n	800306c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800308a:	887a      	ldrh	r2, [r7, #2]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	43d9      	mvns	r1, r3
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	400b      	ands	r3, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030b8:	695a      	ldr	r2, [r3, #20]
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030c8:	88fb      	ldrh	r3, [r7, #6]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fba8 	bl	8007820 <HAL_GPIO_EXTI_Callback>
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40010400 	.word	0x40010400

080030dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ec:	d102      	bne.n	80030f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f2:	e00b      	b.n	800310c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003102:	d102      	bne.n	800310a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003104:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003108:	e000      	b.n	800310c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800310a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000

0800311c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d141      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800312a:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d131      	bne.n	800319c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003138:	4b47      	ldr	r3, [pc, #284]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313e:	4a46      	ldr	r2, [pc, #280]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003144:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003148:	4b43      	ldr	r3, [pc, #268]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003150:	4a41      	ldr	r2, [pc, #260]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003156:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2232      	movs	r2, #50	; 0x32
 800315e:	fb02 f303 	mul.w	r3, r2, r3
 8003162:	4a3f      	ldr	r2, [pc, #252]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	0c9b      	lsrs	r3, r3, #18
 800316a:	3301      	adds	r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800316e:	e002      	b.n	8003176 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3b01      	subs	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003176:	4b38      	ldr	r3, [pc, #224]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003182:	d102      	bne.n	800318a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f2      	bne.n	8003170 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800318a:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d158      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e057      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800319c:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	4a2d      	ldr	r2, [pc, #180]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ac:	e04d      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b4:	d141      	bne.n	800323a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c2:	d131      	bne.n	8003228 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ca:	4a23      	ldr	r2, [pc, #140]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031d4:	4b20      	ldr	r3, [pc, #128]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031e4:	4b1d      	ldr	r3, [pc, #116]	; (800325c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2232      	movs	r2, #50	; 0x32
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	3301      	adds	r3, #1
 80031f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031fa:	e002      	b.n	8003202 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3b01      	subs	r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d102      	bne.n	8003216 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f2      	bne.n	80031fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003222:	d112      	bne.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e011      	b.n	800324c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800322a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003234:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003238:	e007      	b.n	800324a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800323a:	4b07      	ldr	r3, [pc, #28]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003242:	4a05      	ldr	r2, [pc, #20]	; (8003258 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003244:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003248:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	40007000 	.word	0x40007000
 800325c:	20000018 	.word	0x20000018
 8003260:	431bde83 	.word	0x431bde83

08003264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d102      	bne.n	8003278 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f000 bc08 	b.w	8003a88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003278:	4b96      	ldr	r3, [pc, #600]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 030c 	and.w	r3, r3, #12
 8003280:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003282:	4b94      	ldr	r3, [pc, #592]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80e4 	beq.w	8003462 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d007      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4c>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	f040 808b 	bne.w	80033be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	f040 8087 	bne.w	80033be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032b0:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_OscConfig+0x64>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e3df      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	4b81      	ldr	r3, [pc, #516]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d004      	beq.n	80032e2 <HAL_RCC_OscConfig+0x7e>
 80032d8:	4b7e      	ldr	r3, [pc, #504]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e0:	e005      	b.n	80032ee <HAL_RCC_OscConfig+0x8a>
 80032e2:	4b7c      	ldr	r3, [pc, #496]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d223      	bcs.n	800333a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fdfe 	bl	8003ef8 <RCC_SetFlashLatencyFromMSIRange>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e3c0      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003306:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b70      	ldr	r3, [pc, #448]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	496d      	ldr	r1, [pc, #436]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003324:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	4968      	ldr	r1, [pc, #416]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]
 8003338:	e025      	b.n	8003386 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800333a:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4960      	ldr	r1, [pc, #384]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003358:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	495b      	ldr	r1, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003368:	4313      	orrs	r3, r2
 800336a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fdbe 	bl	8003ef8 <RCC_SetFlashLatencyFromMSIRange>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e380      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003386:	f000 fcc1 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 800338a:	4602      	mov	r2, r0
 800338c:	4b51      	ldr	r3, [pc, #324]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	4950      	ldr	r1, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003398:	5ccb      	ldrb	r3, [r1, r3]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	fa22 f303 	lsr.w	r3, r2, r3
 80033a2:	4a4e      	ldr	r2, [pc, #312]	; (80034dc <HAL_RCC_OscConfig+0x278>)
 80033a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033a6:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f005 fbea 	bl	8008b84 <HAL_InitTick>
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d052      	beq.n	8003460 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	e364      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d032      	beq.n	800342c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033c6:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d2:	f7fd fe55 	bl	8001080 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033da:	f7fd fe51 	bl	8001080 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e34d      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ec:	4b39      	ldr	r3, [pc, #228]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a35      	ldr	r2, [pc, #212]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033fe:	f043 0308 	orr.w	r3, r3, #8
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	4b33      	ldr	r3, [pc, #204]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4930      	ldr	r1, [pc, #192]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003416:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	492b      	ldr	r1, [pc, #172]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
 800342a:	e01a      	b.n	8003462 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800342c:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003438:	f7fd fe22 	bl	8001080 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003440:	f7fd fe1e 	bl	8001080 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e31a      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0x1dc>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d073      	beq.n	8003556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d005      	beq.n	8003480 <HAL_RCC_OscConfig+0x21c>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b0c      	cmp	r3, #12
 8003478:	d10e      	bne.n	8003498 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d10b      	bne.n	8003498 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d063      	beq.n	8003554 <HAL_RCC_OscConfig+0x2f0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d15f      	bne.n	8003554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e2f7      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x24c>
 80034a2:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e025      	b.n	80034fc <HAL_RCC_OscConfig+0x298>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b8:	d114      	bne.n	80034e4 <HAL_RCC_OscConfig+0x280>
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	e013      	b.n	80034fc <HAL_RCC_OscConfig+0x298>
 80034d4:	40021000 	.word	0x40021000
 80034d8:	0800e59c 	.word	0x0800e59c
 80034dc:	20000018 	.word	0x20000018
 80034e0:	20000000 	.word	0x20000000
 80034e4:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a9f      	ldr	r2, [pc, #636]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a9c      	ldr	r2, [pc, #624]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fdbc 	bl	8001080 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fd fdb8 	bl	8001080 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e2b4      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351e:	4b92      	ldr	r3, [pc, #584]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x2a8>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fd fda8 	bl	8001080 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fd fda4 	bl	8001080 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e2a0      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003546:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x2d0>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d060      	beq.n	8003624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x310>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d116      	bne.n	80035a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x328>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e27d      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	4973      	ldr	r1, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a0:	e040      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d023      	beq.n	80035f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035aa:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fd63 	bl	8001080 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035be:	f7fd fd5f 	bl	8001080 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e25b      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d0:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b62      	ldr	r3, [pc, #392]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	495f      	ldr	r1, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e018      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b5d      	ldr	r3, [pc, #372]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd fd3f 	bl	8001080 <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fd fd3b 	bl	8001080 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e237      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03c      	beq.n	80036aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd fd1a 	bl	8001080 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd fd16 	bl	8001080 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e212      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <HAL_RCC_OscConfig+0x3ec>
 8003670:	e01b      	b.n	80036aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003678:	4a3b      	ldr	r2, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fd fcfd 	bl	8001080 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368a:	f7fd fcf9 	bl	8001080 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1f5      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ef      	bne.n	800368a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a6 	beq.w	8003804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	4a26      	ldr	r2, [pc, #152]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6593      	str	r3, [r2, #88]	; 0x58
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x508>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCC_OscConfig+0x508>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_RCC_OscConfig+0x508>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fc:	f7fd fcc0 	bl	8001080 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fcbc 	bl	8001080 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1b8      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_RCC_OscConfig+0x508>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_RCC_OscConfig+0x4d8>
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800373a:	e029      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d115      	bne.n	8003770 <HAL_RCC_OscConfig+0x50c>
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a03      	ldr	r2, [pc, #12]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	4b9d      	ldr	r3, [pc, #628]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a9c      	ldr	r2, [pc, #624]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003780:	4b99      	ldr	r3, [pc, #612]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a98      	ldr	r2, [pc, #608]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd fc72 	bl	8001080 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fd fc6e 	bl	8001080 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e168      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ed      	beq.n	80037a0 <HAL_RCC_OscConfig+0x53c>
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fc5b 	bl	8001080 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fc57 	bl	8001080 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e151      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e4:	4b80      	ldr	r3, [pc, #512]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ed      	bne.n	80037ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7ffb      	ldrb	r3, [r7, #31]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b7b      	ldr	r3, [pc, #492]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a7a      	ldr	r2, [pc, #488]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d03c      	beq.n	800388a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01c      	beq.n	8003852 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003818:	4b73      	ldr	r3, [pc, #460]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 800381a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381e:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fd fc2a 	bl	8001080 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003830:	f7fd fc26 	bl	8001080 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e122      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003842:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ef      	beq.n	8003830 <HAL_RCC_OscConfig+0x5cc>
 8003850:	e01b      	b.n	800388a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003852:	4b65      	ldr	r3, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003858:	4a63      	ldr	r2, [pc, #396]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003862:	f7fd fc0d 	bl	8001080 <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003868:	e008      	b.n	800387c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800386a:	f7fd fc09 	bl	8001080 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b02      	cmp	r3, #2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e105      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800387c:	4b5a      	ldr	r3, [pc, #360]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 800387e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ef      	bne.n	800386a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80f9 	beq.w	8003a86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	2b02      	cmp	r3, #2
 800389a:	f040 80cf 	bne.w	8003a3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800389e:	4b52      	ldr	r3, [pc, #328]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0203 	and.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d12c      	bne.n	800390c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	3b01      	subs	r3, #1
 80038be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d123      	bne.n	800390c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d11b      	bne.n	800390c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d113      	bne.n	800390c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d109      	bne.n	800390c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	3b01      	subs	r3, #1
 8003906:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d071      	beq.n	80039f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	2b0c      	cmp	r3, #12
 8003910:	d068      	beq.n	80039e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003912:	4b35      	ldr	r3, [pc, #212]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d105      	bne.n	800392a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800391e:	4b32      	ldr	r3, [pc, #200]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e0ac      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800392e:	4b2e      	ldr	r3, [pc, #184]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a2d      	ldr	r2, [pc, #180]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003938:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800393a:	f7fd fba1 	bl	8001080 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fd fb9d 	bl	8001080 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e099      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003960:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	4b21      	ldr	r3, [pc, #132]	; (80039ec <HAL_RCC_OscConfig+0x788>)
 8003966:	4013      	ands	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003970:	3a01      	subs	r2, #1
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800397a:	0212      	lsls	r2, r2, #8
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003982:	0852      	lsrs	r2, r2, #1
 8003984:	3a01      	subs	r2, #1
 8003986:	0552      	lsls	r2, r2, #21
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800398e:	0852      	lsrs	r2, r2, #1
 8003990:	3a01      	subs	r2, #1
 8003992:	0652      	lsls	r2, r2, #25
 8003994:	4311      	orrs	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800399a:	06d2      	lsls	r2, r2, #27
 800399c:	430a      	orrs	r2, r1
 800399e:	4912      	ldr	r1, [pc, #72]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039a4:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a0f      	ldr	r2, [pc, #60]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80039aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4a0c      	ldr	r2, [pc, #48]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80039b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039bc:	f7fd fb60 	bl	8001080 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c4:	f7fd fb5c 	bl	8001080 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e058      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d6:	4b04      	ldr	r3, [pc, #16]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039e2:	e050      	b.n	8003a86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e04f      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
 80039e8:	40021000 	.word	0x40021000
 80039ec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f0:	4b27      	ldr	r3, [pc, #156]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d144      	bne.n	8003a86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a23      	ldr	r2, [pc, #140]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a08:	4b21      	ldr	r3, [pc, #132]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4a20      	ldr	r2, [pc, #128]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a14:	f7fd fb34 	bl	8001080 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fd fb30 	bl	8001080 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e02c      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f0      	beq.n	8003a1c <HAL_RCC_OscConfig+0x7b8>
 8003a3a:	e024      	b.n	8003a86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d01f      	beq.n	8003a82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fd fb17 	bl	8001080 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a56:	f7fd fb13 	bl	8001080 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e00f      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	4905      	ldr	r1, [pc, #20]	; (8003a90 <HAL_RCC_OscConfig+0x82c>)
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_RCC_OscConfig+0x830>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60cb      	str	r3, [r1, #12]
 8003a80:	e001      	b.n	8003a86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3720      	adds	r7, #32
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40021000 	.word	0x40021000
 8003a94:	feeefffc 	.word	0xfeeefffc

08003a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e11d      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ab0:	4b90      	ldr	r3, [pc, #576]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 030f 	and.w	r3, r3, #15
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d910      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003abe:	4b8d      	ldr	r3, [pc, #564]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f023 020f 	bic.w	r2, r3, #15
 8003ac6:	498b      	ldr	r1, [pc, #556]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ace:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d001      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e105      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d908      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003afc:	4b7e      	ldr	r3, [pc, #504]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	497b      	ldr	r1, [pc, #492]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d079      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d11e      	bne.n	8003b60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	4b75      	ldr	r3, [pc, #468]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0dc      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003b32:	f000 fa3b 	bl	8003fac <RCC_GetSysClockFreqFromPLLSource>
 8003b36:	4603      	mov	r3, r0
 8003b38:	4a70      	ldr	r2, [pc, #448]	; (8003cfc <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d946      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b3e:	4b6e      	ldr	r3, [pc, #440]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d140      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b4a:	4b6b      	ldr	r3, [pc, #428]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b52:	4a69      	ldr	r2, [pc, #420]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b5a:	2380      	movs	r3, #128	; 0x80
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e035      	b.n	8003bcc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b68:	4b63      	ldr	r3, [pc, #396]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d115      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e0b9      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d107      	bne.n	8003b90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b80:	4b5d      	ldr	r3, [pc, #372]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0ad      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b90:	4b59      	ldr	r3, [pc, #356]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0a5      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ba0:	f000 f8b4 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a55      	ldr	r2, [pc, #340]	; (8003cfc <HAL_RCC_ClockConfig+0x264>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d90f      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bac:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d109      	bne.n	8003bcc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bc0:	4a4d      	ldr	r2, [pc, #308]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bcc:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 0203 	bic.w	r2, r3, #3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4947      	ldr	r1, [pc, #284]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bde:	f7fd fa4f 	bl	8001080 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be6:	f7fd fa4b 	bl	8001080 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e077      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfc:	4b3e      	ldr	r3, [pc, #248]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 020c 	and.w	r2, r3, #12
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d1eb      	bne.n	8003be6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2b80      	cmp	r3, #128	; 0x80
 8003c12:	d105      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c14:	4b38      	ldr	r3, [pc, #224]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	4a37      	ldr	r2, [pc, #220]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d208      	bcs.n	8003c4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b2e      	ldr	r3, [pc, #184]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	492b      	ldr	r1, [pc, #172]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d210      	bcs.n	8003c7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f023 020f 	bic.w	r2, r3, #15
 8003c64:	4923      	ldr	r1, [pc, #140]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_RCC_ClockConfig+0x25c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d001      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e036      	b.n	8003cec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d008      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4918      	ldr	r1, [pc, #96]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d009      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ca8:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4910      	ldr	r1, [pc, #64]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cbc:	f000 f826 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	091b      	lsrs	r3, r3, #4
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	490c      	ldr	r1, [pc, #48]	; (8003d00 <HAL_RCC_ClockConfig+0x268>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <HAL_RCC_ClockConfig+0x26c>)
 8003cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f004 ff4f 	bl	8008b84 <HAL_InitTick>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40022000 	.word	0x40022000
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	04c4b400 	.word	0x04c4b400
 8003d00:	0800e59c 	.word	0x0800e59c
 8003d04:	20000018 	.word	0x20000018
 8003d08:	20000000 	.word	0x20000000

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x34>
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b0c      	cmp	r3, #12
 8003d38:	d121      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d11e      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d107      	bne.n	8003d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d4c:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	61fb      	str	r3, [r7, #28]
 8003d5a:	e005      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d5c:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d68:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e004      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d101      	bne.n	8003d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d90:	4b23      	ldr	r3, [pc, #140]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b0c      	cmp	r3, #12
 8003d98:	d134      	bne.n	8003e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d003      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0xac>
 8003db0:	e005      	b.n	8003dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003db2:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8003db4:	617b      	str	r3, [r7, #20]
      break;
 8003db6:	e005      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8003dba:	617b      	str	r3, [r7, #20]
      break;
 8003dbc:	e002      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	617b      	str	r3, [r7, #20]
      break;
 8003dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3301      	adds	r3, #1
 8003dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	fb03 f202 	mul.w	r2, r3, r2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	0e5b      	lsrs	r3, r3, #25
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	3301      	adds	r3, #1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e04:	69bb      	ldr	r3, [r7, #24]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800e5b4 	.word	0x0800e5b4
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000018 	.word	0x20000018

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4904      	ldr	r1, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	0800e5ac 	.word	0x0800e5ac

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e6c:	f7ff ffda 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e70:	4602      	mov	r2, r0
 8003e72:	4b06      	ldr	r3, [pc, #24]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	0adb      	lsrs	r3, r3, #11
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	4904      	ldr	r1, [pc, #16]	; (8003e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e7e:	5ccb      	ldrb	r3, [r1, r3]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	0800e5ac 	.word	0x0800e5ac

08003e94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	220f      	movs	r2, #15
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0203 	and.w	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCC_GetClockConfig+0x5c>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	08db      	lsrs	r3, r3, #3
 8003ece:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003ed6:	4b07      	ldr	r3, [pc, #28]	; (8003ef4 <HAL_RCC_GetClockConfig+0x60>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 020f 	and.w	r2, r3, #15
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40022000 	.word	0x40022000

08003ef8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f10:	f7ff f8e4 	bl	80030dc <HAL_PWREx_GetVoltageRange>
 8003f14:	6178      	str	r0, [r7, #20]
 8003f16:	e014      	b.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1c:	4a21      	ldr	r2, [pc, #132]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6593      	str	r3, [r2, #88]	; 0x58
 8003f24:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f30:	f7ff f8d4 	bl	80030dc <HAL_PWREx_GetVoltageRange>
 8003f34:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3a:	4a1a      	ldr	r2, [pc, #104]	; (8003fa4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f48:	d10b      	bne.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b80      	cmp	r3, #128	; 0x80
 8003f4e:	d913      	bls.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2ba0      	cmp	r3, #160	; 0xa0
 8003f54:	d902      	bls.n	8003f5c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f56:	2302      	movs	r3, #2
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	e00d      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e00a      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b7f      	cmp	r3, #127	; 0x7f
 8003f66:	d902      	bls.n	8003f6e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003f68:	2302      	movs	r3, #2
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	e004      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b70      	cmp	r3, #112	; 0x70
 8003f72:	d101      	bne.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f74:	2301      	movs	r3, #1
 8003f76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 020f 	bic.w	r2, r3, #15
 8003f80:	4909      	ldr	r1, [pc, #36]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40022000 	.word	0x40022000

08003fac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d00b      	beq.n	8003fda <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	d825      	bhi.n	8004014 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d008      	beq.n	8003fe0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d11f      	bne.n	8004014 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003fd6:	613b      	str	r3, [r7, #16]
    break;
 8003fd8:	e01f      	b.n	800401a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003fda:	4b25      	ldr	r3, [pc, #148]	; (8004070 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003fdc:	613b      	str	r3, [r7, #16]
    break;
 8003fde:	e01c      	b.n	800401a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe0:	4b21      	ldr	r3, [pc, #132]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d107      	bne.n	8003ffc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003fec:	4b1e      	ldr	r3, [pc, #120]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	617b      	str	r3, [r7, #20]
 8003ffa:	e005      	b.n	8004008 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ffc:	4b1a      	ldr	r3, [pc, #104]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004008:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004010:	613b      	str	r3, [r7, #16]
    break;
 8004012:	e002      	b.n	800401a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
    break;
 8004018:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	3301      	adds	r3, #1
 8004026:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	0a1b      	lsrs	r3, r3, #8
 800402e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	fb03 f202 	mul.w	r2, r3, r2
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004040:	4b09      	ldr	r3, [pc, #36]	; (8004068 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	0e5b      	lsrs	r3, r3, #25
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	3301      	adds	r3, #1
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800405a:	683b      	ldr	r3, [r7, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	40021000 	.word	0x40021000
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200
 8004074:	0800e5b4 	.word	0x0800e5b4

08004078 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004080:	2300      	movs	r3, #0
 8004082:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004084:	2300      	movs	r3, #0
 8004086:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004090:	2b00      	cmp	r3, #0
 8004092:	d040      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004098:	2b80      	cmp	r3, #128	; 0x80
 800409a:	d02a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800409c:	2b80      	cmp	r3, #128	; 0x80
 800409e:	d825      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040a0:	2b60      	cmp	r3, #96	; 0x60
 80040a2:	d026      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d821      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d006      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d81d      	bhi.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d009      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d010      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x62>
 80040b8:	e018      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ba:	4b89      	ldr	r3, [pc, #548]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	4a88      	ldr	r2, [pc, #544]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040c6:	e015      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 fb02 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040d8:	e00c      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3320      	adds	r3, #32
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fbed 	bl	80048c0 <RCCEx_PLLSAI2_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	74fb      	strb	r3, [r7, #19]
      break;
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80040f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040fa:	4b79      	ldr	r3, [pc, #484]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004100:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004108:	4975      	ldr	r1, [pc, #468]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7cfb      	ldrb	r3, [r7, #19]
 8004114:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d047      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d030      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004130:	d82a      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004136:	d02a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800413c:	d824      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800413e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004142:	d008      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004148:	d81e      	bhi.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d010      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004154:	e018      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004156:	4b62      	ldr	r3, [pc, #392]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a61      	ldr	r2, [pc, #388]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800415c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004160:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004162:	e015      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3304      	adds	r3, #4
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fab4 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004174:	e00c      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3320      	adds	r3, #32
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fb9f 	bl	80048c0 <RCCEx_PLLSAI2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004186:	e003      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	74fb      	strb	r3, [r7, #19]
      break;
 800418c:	e000      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800418e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004190:	7cfb      	ldrb	r3, [r7, #19]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10b      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004196:	4b52      	ldr	r3, [pc, #328]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004198:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	494e      	ldr	r1, [pc, #312]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80041ac:	e001      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 809f 	beq.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c0:	2300      	movs	r3, #0
 80041c2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c4:	4b46      	ldr	r3, [pc, #280]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80041d4:	2300      	movs	r3, #0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4a40      	ldr	r2, [pc, #256]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3a      	ldr	r2, [pc, #232]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004202:	f7fc ff3d 	bl	8001080 <HAL_GetTick>
 8004206:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004208:	e009      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fc ff39 	bl	8001080 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d902      	bls.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	74fb      	strb	r3, [r7, #19]
        break;
 800421c:	e005      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800421e:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0ef      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d15b      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800423a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01f      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	429a      	cmp	r2, r3
 800424c:	d019      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800425a:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800425c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800426a:	4b1d      	ldr	r3, [pc, #116]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800427a:	4a19      	ldr	r2, [pc, #100]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d016      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fc fef8 	bl	8001080 <HAL_GetTick>
 8004290:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	e00b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fc fef4 	bl	8001080 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d902      	bls.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	74fb      	strb	r3, [r7, #19]
            break;
 80042aa:	e006      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ec      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10c      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	4903      	ldr	r1, [pc, #12]	; (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	74bb      	strb	r3, [r7, #18]
 80042de:	e005      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x274>
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ec:	7c7b      	ldrb	r3, [r7, #17]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f2:	4ba0      	ldr	r3, [pc, #640]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f6:	4a9f      	ldr	r2, [pc, #636]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800430a:	4b9a      	ldr	r3, [pc, #616]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f023 0203 	bic.w	r2, r3, #3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004318:	4996      	ldr	r1, [pc, #600]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800432c:	4b91      	ldr	r3, [pc, #580]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f023 020c 	bic.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	498e      	ldr	r1, [pc, #568]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800434e:	4b89      	ldr	r3, [pc, #548]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	4985      	ldr	r1, [pc, #532]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004370:	4b80      	ldr	r3, [pc, #512]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437e:	497d      	ldr	r1, [pc, #500]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004392:	4b78      	ldr	r3, [pc, #480]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a0:	4974      	ldr	r1, [pc, #464]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043b4:	4b6f      	ldr	r3, [pc, #444]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	496c      	ldr	r1, [pc, #432]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043d6:	4b67      	ldr	r3, [pc, #412]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e4:	4963      	ldr	r1, [pc, #396]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00a      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043f8:	4b5e      	ldr	r3, [pc, #376]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004406:	495b      	ldr	r1, [pc, #364]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004408:	4313      	orrs	r3, r2
 800440a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800441a:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800441c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004420:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004428:	4952      	ldr	r1, [pc, #328]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800443c:	4b4d      	ldr	r3, [pc, #308]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444a:	494a      	ldr	r1, [pc, #296]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800445e:	4b45      	ldr	r3, [pc, #276]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	4941      	ldr	r1, [pc, #260]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446e:	4313      	orrs	r3, r2
 8004470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004480:	4b3c      	ldr	r3, [pc, #240]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004486:	f023 0203 	bic.w	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800448e:	4939      	ldr	r1, [pc, #228]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d028      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a2:	4b34      	ldr	r3, [pc, #208]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b0:	4930      	ldr	r1, [pc, #192]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c0:	d106      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4a2b      	ldr	r2, [pc, #172]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044cc:	60d3      	str	r3, [r2, #12]
 80044ce:	e011      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f8f9 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d04d      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004508:	d108      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800450c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004516:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800451a:	e012      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800451e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004522:	4a14      	ldr	r2, [pc, #80]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004528:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800452e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004532:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800453a:	490e      	ldr	r1, [pc, #56]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800454a:	d106      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004556:	60d3      	str	r3, [r2, #12]
 8004558:	e020      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800455e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004562:	d109      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004564:	4b03      	ldr	r3, [pc, #12]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4a02      	ldr	r2, [pc, #8]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	e014      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004580:	d10c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2101      	movs	r1, #1
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f8a5 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004592:	7cfb      	ldrb	r3, [r7, #19]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d028      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045a8:	4b4a      	ldr	r3, [pc, #296]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045b6:	4947      	ldr	r1, [pc, #284]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c6:	d106      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045c8:	4b42      	ldr	r3, [pc, #264]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	4a41      	ldr	r2, [pc, #260]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045d2:	60d3      	str	r3, [r2, #12]
 80045d4:	e011      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045de:	d10c      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f876 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80045f6:	7cfb      	ldrb	r3, [r7, #19]
 80045f8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01e      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004606:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004616:	492f      	ldr	r1, [pc, #188]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004628:	d10c      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	2102      	movs	r1, #2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 f851 	bl	80046d8 <RCCEx_PLLSAI1_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004640:	7cfb      	ldrb	r3, [r7, #19]
 8004642:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00b      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004650:	4b20      	ldr	r3, [pc, #128]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004652:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004656:	f023 0204 	bic.w	r2, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004660:	491c      	ldr	r1, [pc, #112]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004674:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004676:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800467a:	f023 0218 	bic.w	r2, r3, #24
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	4913      	ldr	r1, [pc, #76]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004686:	4313      	orrs	r3, r2
 8004688:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d017      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004698:	4b0e      	ldr	r3, [pc, #56]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800469a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800469e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a8:	490a      	ldr	r1, [pc, #40]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046ba:	d105      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a04      	ldr	r2, [pc, #16]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000

080046d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046e6:	4b72      	ldr	r3, [pc, #456]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00e      	beq.n	8004710 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046f2:	4b6f      	ldr	r3, [pc, #444]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0203 	and.w	r2, r3, #3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d103      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
       ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d142      	bne.n	8004790 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
 800470e:	e03f      	b.n	8004790 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d018      	beq.n	800474a <RCCEx_PLLSAI1_Config+0x72>
 8004718:	2b03      	cmp	r3, #3
 800471a:	d825      	bhi.n	8004768 <RCCEx_PLLSAI1_Config+0x90>
 800471c:	2b01      	cmp	r3, #1
 800471e:	d002      	beq.n	8004726 <RCCEx_PLLSAI1_Config+0x4e>
 8004720:	2b02      	cmp	r3, #2
 8004722:	d009      	beq.n	8004738 <RCCEx_PLLSAI1_Config+0x60>
 8004724:	e020      	b.n	8004768 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004726:	4b62      	ldr	r3, [pc, #392]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11d      	bne.n	800476e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004736:	e01a      	b.n	800476e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004738:	4b5d      	ldr	r3, [pc, #372]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004748:	e013      	b.n	8004772 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800474a:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10f      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004756:	4b56      	ldr	r3, [pc, #344]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004766:	e006      	b.n	8004776 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	73fb      	strb	r3, [r7, #15]
      break;
 800476c:	e004      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800476e:	bf00      	nop
 8004770:	e002      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004772:	bf00      	nop
 8004774:	e000      	b.n	8004778 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004776:	bf00      	nop
    }

    if(status == HAL_OK)
 8004778:	7bfb      	ldrb	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800477e:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4949      	ldr	r1, [pc, #292]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 8086 	bne.w	80048a4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004798:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a44      	ldr	r2, [pc, #272]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800479e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a4:	f7fc fc6c 	bl	8001080 <HAL_GetTick>
 80047a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047aa:	e009      	b.n	80047c0 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ac:	f7fc fc68 	bl	8001080 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d902      	bls.n	80047c0 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	73fb      	strb	r3, [r7, #15]
        break;
 80047be:	e005      	b.n	80047cc <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ef      	bne.n	80047ac <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d168      	bne.n	80048a4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d113      	bne.n	8004800 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	4b35      	ldr	r3, [pc, #212]	; (80048b4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6892      	ldr	r2, [r2, #8]
 80047e4:	0211      	lsls	r1, r2, #8
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68d2      	ldr	r2, [r2, #12]
 80047ea:	06d2      	lsls	r2, r2, #27
 80047ec:	4311      	orrs	r1, r2
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	3a01      	subs	r2, #1
 80047f4:	0112      	lsls	r2, r2, #4
 80047f6:	430a      	orrs	r2, r1
 80047f8:	492d      	ldr	r1, [pc, #180]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]
 80047fe:	e02d      	b.n	800485c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d115      	bne.n	8004832 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004806:	4b2a      	ldr	r3, [pc, #168]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	4b2b      	ldr	r3, [pc, #172]	; (80048b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6892      	ldr	r2, [r2, #8]
 8004812:	0211      	lsls	r1, r2, #8
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6912      	ldr	r2, [r2, #16]
 8004818:	0852      	lsrs	r2, r2, #1
 800481a:	3a01      	subs	r2, #1
 800481c:	0552      	lsls	r2, r2, #21
 800481e:	4311      	orrs	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	3a01      	subs	r2, #1
 8004826:	0112      	lsls	r2, r2, #4
 8004828:	430a      	orrs	r2, r1
 800482a:	4921      	ldr	r1, [pc, #132]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800482c:	4313      	orrs	r3, r2
 800482e:	610b      	str	r3, [r1, #16]
 8004830:	e014      	b.n	800485c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004832:	4b1f      	ldr	r3, [pc, #124]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	4b21      	ldr	r3, [pc, #132]	; (80048bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004838:	4013      	ands	r3, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6892      	ldr	r2, [r2, #8]
 800483e:	0211      	lsls	r1, r2, #8
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6952      	ldr	r2, [r2, #20]
 8004844:	0852      	lsrs	r2, r2, #1
 8004846:	3a01      	subs	r2, #1
 8004848:	0652      	lsls	r2, r2, #25
 800484a:	4311      	orrs	r1, r2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	3a01      	subs	r2, #1
 8004852:	0112      	lsls	r2, r2, #4
 8004854:	430a      	orrs	r2, r1
 8004856:	4916      	ldr	r1, [pc, #88]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004858:	4313      	orrs	r3, r2
 800485a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a13      	ldr	r2, [pc, #76]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004868:	f7fc fc0a 	bl	8001080 <HAL_GetTick>
 800486c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800486e:	e009      	b.n	8004884 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004870:	f7fc fc06 	bl	8001080 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d902      	bls.n	8004884 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	73fb      	strb	r3, [r7, #15]
          break;
 8004882:	e005      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0ef      	beq.n	8004870 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004890:	7bfb      	ldrb	r3, [r7, #15]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	4904      	ldr	r1, [pc, #16]	; (80048b0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	07ff800f 	.word	0x07ff800f
 80048b8:	ff9f800f 	.word	0xff9f800f
 80048bc:	f9ff800f 	.word	0xf9ff800f

080048c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048ce:	4b72      	ldr	r3, [pc, #456]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00e      	beq.n	80048f8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048da:	4b6f      	ldr	r3, [pc, #444]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f003 0203 	and.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d103      	bne.n	80048f2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
       ||
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d142      	bne.n	8004978 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	73fb      	strb	r3, [r7, #15]
 80048f6:	e03f      	b.n	8004978 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d018      	beq.n	8004932 <RCCEx_PLLSAI2_Config+0x72>
 8004900:	2b03      	cmp	r3, #3
 8004902:	d825      	bhi.n	8004950 <RCCEx_PLLSAI2_Config+0x90>
 8004904:	2b01      	cmp	r3, #1
 8004906:	d002      	beq.n	800490e <RCCEx_PLLSAI2_Config+0x4e>
 8004908:	2b02      	cmp	r3, #2
 800490a:	d009      	beq.n	8004920 <RCCEx_PLLSAI2_Config+0x60>
 800490c:	e020      	b.n	8004950 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800490e:	4b62      	ldr	r3, [pc, #392]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d11d      	bne.n	8004956 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491e:	e01a      	b.n	8004956 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004920:	4b5d      	ldr	r3, [pc, #372]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004928:	2b00      	cmp	r3, #0
 800492a:	d116      	bne.n	800495a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004930:	e013      	b.n	800495a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004932:	4b59      	ldr	r3, [pc, #356]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800493e:	4b56      	ldr	r3, [pc, #344]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800494e:	e006      	b.n	800495e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      break;
 8004954:	e004      	b.n	8004960 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004956:	bf00      	nop
 8004958:	e002      	b.n	8004960 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800495a:	bf00      	nop
 800495c:	e000      	b.n	8004960 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800495e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d108      	bne.n	8004978 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004966:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f023 0203 	bic.w	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4949      	ldr	r1, [pc, #292]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f040 8086 	bne.w	8004a8c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004980:	4b45      	ldr	r3, [pc, #276]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a44      	ldr	r2, [pc, #272]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800498c:	f7fc fb78 	bl	8001080 <HAL_GetTick>
 8004990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004992:	e009      	b.n	80049a8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004994:	f7fc fb74 	bl	8001080 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d902      	bls.n	80049a8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	73fb      	strb	r3, [r7, #15]
        break;
 80049a6:	e005      	b.n	80049b4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049a8:	4b3b      	ldr	r3, [pc, #236]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1ef      	bne.n	8004994 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d168      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049c0:	4b35      	ldr	r3, [pc, #212]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	4b35      	ldr	r3, [pc, #212]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1dc>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	6892      	ldr	r2, [r2, #8]
 80049cc:	0211      	lsls	r1, r2, #8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68d2      	ldr	r2, [r2, #12]
 80049d2:	06d2      	lsls	r2, r2, #27
 80049d4:	4311      	orrs	r1, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6852      	ldr	r2, [r2, #4]
 80049da:	3a01      	subs	r2, #1
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	430a      	orrs	r2, r1
 80049e0:	492d      	ldr	r1, [pc, #180]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	614b      	str	r3, [r1, #20]
 80049e6:	e02d      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d115      	bne.n	8004a1a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049ee:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <RCCEx_PLLSAI2_Config+0x1e0>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6892      	ldr	r2, [r2, #8]
 80049fa:	0211      	lsls	r1, r2, #8
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6912      	ldr	r2, [r2, #16]
 8004a00:	0852      	lsrs	r2, r2, #1
 8004a02:	3a01      	subs	r2, #1
 8004a04:	0552      	lsls	r2, r2, #21
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6852      	ldr	r2, [r2, #4]
 8004a0c:	3a01      	subs	r2, #1
 8004a0e:	0112      	lsls	r2, r2, #4
 8004a10:	430a      	orrs	r2, r1
 8004a12:	4921      	ldr	r1, [pc, #132]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	614b      	str	r3, [r1, #20]
 8004a18:	e014      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a1a:	4b1f      	ldr	r3, [pc, #124]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	4b21      	ldr	r3, [pc, #132]	; (8004aa4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6892      	ldr	r2, [r2, #8]
 8004a26:	0211      	lsls	r1, r2, #8
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6952      	ldr	r2, [r2, #20]
 8004a2c:	0852      	lsrs	r2, r2, #1
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0652      	lsls	r2, r2, #25
 8004a32:	4311      	orrs	r1, r2
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6852      	ldr	r2, [r2, #4]
 8004a38:	3a01      	subs	r2, #1
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4916      	ldr	r1, [pc, #88]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a44:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a50:	f7fc fb16 	bl	8001080 <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a56:	e009      	b.n	8004a6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a58:	f7fc fb12 	bl	8001080 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	73fb      	strb	r3, [r7, #15]
          break;
 8004a6a:	e005      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ef      	beq.n	8004a58 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a7e:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	4904      	ldr	r1, [pc, #16]	; (8004a98 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	07ff800f 	.word	0x07ff800f
 8004aa0:	ff9f800f 	.word	0xff9f800f
 8004aa4:	f9ff800f 	.word	0xf9ff800f

08004aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e049      	b.n	8004b4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f003 ffc8 	bl	8008a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f000 fab6 	bl	8005058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d001      	beq.n	8004b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e04f      	b.n	8004c10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a23      	ldr	r2, [pc, #140]	; (8004c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d01d      	beq.n	8004bce <HAL_TIM_Base_Start_IT+0x76>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b9a:	d018      	beq.n	8004bce <HAL_TIM_Base_Start_IT+0x76>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1f      	ldr	r2, [pc, #124]	; (8004c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <HAL_TIM_Base_Start_IT+0x76>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a1e      	ldr	r2, [pc, #120]	; (8004c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d00e      	beq.n	8004bce <HAL_TIM_Base_Start_IT+0x76>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1c      	ldr	r2, [pc, #112]	; (8004c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_TIM_Base_Start_IT+0x76>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_TIM_Base_Start_IT+0x76>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a19      	ldr	r2, [pc, #100]	; (8004c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d115      	bne.n	8004bfa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2b06      	cmp	r3, #6
 8004bde:	d015      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0xb4>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be6:	d011      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	e008      	b.n	8004c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	e000      	b.n	8004c0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40000400 	.word	0x40000400
 8004c24:	40000800 	.word	0x40000800
 8004c28:	40000c00 	.word	0x40000c00
 8004c2c:	40013400 	.word	0x40013400
 8004c30:	40014000 	.word	0x40014000
 8004c34:	00010007 	.word	0x00010007

08004c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d122      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d11b      	bne.n	8004c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0202 	mvn.w	r2, #2
 8004c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f9ce 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9c0 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f9d1 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d122      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d11b      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f06f 0204 	mvn.w	r2, #4
 8004cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2202      	movs	r2, #2
 8004cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f9a4 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004cd4:	e005      	b.n	8004ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 f996 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f9a7 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0308 	and.w	r3, r3, #8
 8004cf2:	2b08      	cmp	r3, #8
 8004cf4:	d122      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d11b      	bne.n	8004d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0208 	mvn.w	r2, #8
 8004d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2204      	movs	r2, #4
 8004d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f97a 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004d28:	e005      	b.n	8004d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f96c 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f97d 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b10      	cmp	r3, #16
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0210 	mvn.w	r2, #16
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2208      	movs	r2, #8
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f950 	bl	800501c <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f942 	bl	8005008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f953 	bl	8005030 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d10e      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0201 	mvn.w	r2, #1
 8004db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f003 fd18 	bl	80087ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc6:	2b80      	cmp	r3, #128	; 0x80
 8004dc8:	d10e      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd4:	2b80      	cmp	r3, #128	; 0x80
 8004dd6:	d107      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fafe 	bl	80053e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004df6:	d10e      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b80      	cmp	r3, #128	; 0x80
 8004e04:	d107      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 faf1 	bl	80053f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e20:	2b40      	cmp	r3, #64	; 0x40
 8004e22:	d10e      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e2e:	2b40      	cmp	r3, #64	; 0x40
 8004e30:	d107      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f901 	bl	8005044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d10e      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d107      	bne.n	8004e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f06f 0220 	mvn.w	r2, #32
 8004e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fab1 	bl	80053d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
 8004e7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_ConfigClockSource+0x1c>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e0b6      	b.n	8005000 <HAL_TIM_ConfigClockSource+0x18a>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004eb4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ebc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ece:	d03e      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xd8>
 8004ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed4:	f200 8087 	bhi.w	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004edc:	f000 8086 	beq.w	8004fec <HAL_TIM_ConfigClockSource+0x176>
 8004ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee4:	d87f      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004ee6:	2b70      	cmp	r3, #112	; 0x70
 8004ee8:	d01a      	beq.n	8004f20 <HAL_TIM_ConfigClockSource+0xaa>
 8004eea:	2b70      	cmp	r3, #112	; 0x70
 8004eec:	d87b      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004eee:	2b60      	cmp	r3, #96	; 0x60
 8004ef0:	d050      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0x11e>
 8004ef2:	2b60      	cmp	r3, #96	; 0x60
 8004ef4:	d877      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004ef6:	2b50      	cmp	r3, #80	; 0x50
 8004ef8:	d03c      	beq.n	8004f74 <HAL_TIM_ConfigClockSource+0xfe>
 8004efa:	2b50      	cmp	r3, #80	; 0x50
 8004efc:	d873      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d058      	beq.n	8004fb4 <HAL_TIM_ConfigClockSource+0x13e>
 8004f02:	2b40      	cmp	r3, #64	; 0x40
 8004f04:	d86f      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004f06:	2b30      	cmp	r3, #48	; 0x30
 8004f08:	d064      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f0a:	2b30      	cmp	r3, #48	; 0x30
 8004f0c:	d86b      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d060      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d867      	bhi.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d05c      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f1a:	2b10      	cmp	r3, #16
 8004f1c:	d05a      	beq.n	8004fd4 <HAL_TIM_ConfigClockSource+0x15e>
 8004f1e:	e062      	b.n	8004fe6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	6899      	ldr	r1, [r3, #8]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f000 f9a6 	bl	8005280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	609a      	str	r2, [r3, #8]
      break;
 8004f4c:	e04f      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6899      	ldr	r1, [r3, #8]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f000 f98f 	bl	8005280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f70:	609a      	str	r2, [r3, #8]
      break;
 8004f72:	e03c      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	6859      	ldr	r1, [r3, #4]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	461a      	mov	r2, r3
 8004f82:	f000 f903 	bl	800518c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2150      	movs	r1, #80	; 0x50
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f95c 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004f92:	e02c      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6859      	ldr	r1, [r3, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f000 f922 	bl	80051ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2160      	movs	r1, #96	; 0x60
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f94c 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004fb2:	e01c      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	f000 f8e3 	bl	800518c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2140      	movs	r1, #64	; 0x40
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f93c 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004fd2:	e00c      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f000 f933 	bl	800524a <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e003      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fea:	e000      	b.n	8004fee <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004fec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800504c:	bf00      	nop
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a40      	ldr	r2, [pc, #256]	; (800516c <TIM_Base_SetConfig+0x114>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005076:	d00f      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <TIM_Base_SetConfig+0x118>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a3c      	ldr	r2, [pc, #240]	; (8005174 <TIM_Base_SetConfig+0x11c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a3b      	ldr	r2, [pc, #236]	; (8005178 <TIM_Base_SetConfig+0x120>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0x40>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a3a      	ldr	r2, [pc, #232]	; (800517c <TIM_Base_SetConfig+0x124>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a2f      	ldr	r2, [pc, #188]	; (800516c <TIM_Base_SetConfig+0x114>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01f      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d01b      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <TIM_Base_SetConfig+0x118>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d017      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <TIM_Base_SetConfig+0x11c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <TIM_Base_SetConfig+0x120>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00f      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a29      	ldr	r2, [pc, #164]	; (800517c <TIM_Base_SetConfig+0x124>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a28      	ldr	r2, [pc, #160]	; (8005180 <TIM_Base_SetConfig+0x128>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_Base_SetConfig+0x12c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d003      	beq.n	80050f2 <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a26      	ldr	r2, [pc, #152]	; (8005188 <TIM_Base_SetConfig+0x130>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d108      	bne.n	8005104 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4313      	orrs	r3, r2
 8005102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a10      	ldr	r2, [pc, #64]	; (800516c <TIM_Base_SetConfig+0x114>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00f      	beq.n	8005150 <TIM_Base_SetConfig+0xf8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a12      	ldr	r2, [pc, #72]	; (800517c <TIM_Base_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00b      	beq.n	8005150 <TIM_Base_SetConfig+0xf8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <TIM_Base_SetConfig+0x128>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d007      	beq.n	8005150 <TIM_Base_SetConfig+0xf8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a10      	ldr	r2, [pc, #64]	; (8005184 <TIM_Base_SetConfig+0x12c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d003      	beq.n	8005150 <TIM_Base_SetConfig+0xf8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a0f      	ldr	r2, [pc, #60]	; (8005188 <TIM_Base_SetConfig+0x130>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d103      	bne.n	8005158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	691a      	ldr	r2, [r3, #16]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	615a      	str	r2, [r3, #20]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40000400 	.word	0x40000400
 8005174:	40000800 	.word	0x40000800
 8005178:	40000c00 	.word	0x40000c00
 800517c:	40013400 	.word	0x40013400
 8005180:	40014000 	.word	0x40014000
 8005184:	40014400 	.word	0x40014400
 8005188:	40014800 	.word	0x40014800

0800518c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1b      	ldr	r3, [r3, #32]
 800519c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0201 	bic.w	r2, r3, #1
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f023 030a 	bic.w	r3, r3, #10
 80051c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b087      	sub	sp, #28
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	60f8      	str	r0, [r7, #12]
 80051f2:	60b9      	str	r1, [r7, #8]
 80051f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f023 0210 	bic.w	r2, r3, #16
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a1b      	ldr	r3, [r3, #32]
 800520c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	031b      	lsls	r3, r3, #12
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4313      	orrs	r3, r2
 8005230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	621a      	str	r2, [r3, #32]
}
 800523e:	bf00      	nop
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800524a:	b480      	push	{r7}
 800524c:	b085      	sub	sp, #20
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	4313      	orrs	r3, r2
 8005268:	f043 0307 	orr.w	r3, r3, #7
 800526c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]
}
 8005274:	bf00      	nop
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800529a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	021a      	lsls	r2, r3, #8
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	609a      	str	r2, [r3, #8]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e068      	b.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a2e      	ldr	r2, [pc, #184]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a2d      	ldr	r2, [pc, #180]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d108      	bne.n	800531e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1e      	ldr	r2, [pc, #120]	; (80053b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534a:	d018      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a1b      	ldr	r2, [pc, #108]	; (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a1a      	ldr	r2, [pc, #104]	; (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a13      	ldr	r2, [pc, #76]	; (80053bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d10c      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	4313      	orrs	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40014000 	.word	0x40014000

080053d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e042      	b.n	80054a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f003 fb49 	bl	8008ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2224      	movs	r2, #36	; 0x24
 800543a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f998 	bl	8005784 <UART_SetConfig>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e022      	b.n	80054a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fc88 	bl	8005d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800547a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800548a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fd0f 	bl	8005ec0 <UART_CheckIdleState>
 80054a2:	4603      	mov	r3, r0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	f040 8084 	bne.w	80055d0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d002      	beq.n	80054d4 <HAL_UART_Transmit+0x28>
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e07c      	b.n	80055d2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_UART_Transmit+0x3a>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e075      	b.n	80055d2 <HAL_UART_Transmit+0x126>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2221      	movs	r2, #33	; 0x21
 80054fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fe:	f7fb fdbf 	bl	8001080 <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	88fa      	ldrh	r2, [r7, #6]
 8005510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551c:	d108      	bne.n	8005530 <HAL_UART_Transmit+0x84>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d104      	bne.n	8005530 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	61bb      	str	r3, [r7, #24]
 800552e:	e003      	b.n	8005538 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005540:	e02d      	b.n	800559e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	2180      	movs	r1, #128	; 0x80
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 fd02 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e03a      	b.n	80055d2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	881a      	ldrh	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800556e:	b292      	uxth	r2, r2
 8005570:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	3302      	adds	r3, #2
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e008      	b.n	800558c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	781a      	ldrb	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	b292      	uxth	r2, r2
 8005584:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3301      	adds	r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1cb      	bne.n	8005542 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2200      	movs	r2, #0
 80055b2:	2140      	movs	r1, #64	; 0x40
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fcce 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e006      	b.n	80055d2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b08a      	sub	sp, #40	; 0x28
 80055de:	af02      	add	r7, sp, #8
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4613      	mov	r3, r2
 80055e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	f040 80c1 	bne.w	8005778 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_UART_Receive+0x28>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0b9      	b.n	800577a <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_UART_Receive+0x3a>
 8005610:	2302      	movs	r3, #2
 8005612:	e0b2      	b.n	800577a <HAL_UART_Receive+0x1a0>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2222      	movs	r2, #34	; 0x22
 8005628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005632:	f7fb fd25 	bl	8001080 <HAL_GetTick>
 8005636:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	88fa      	ldrh	r2, [r7, #6]
 8005644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005650:	d10e      	bne.n	8005670 <HAL_UART_Receive+0x96>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d105      	bne.n	8005666 <HAL_UART_Receive+0x8c>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005660:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005664:	e02d      	b.n	80056c2 <HAL_UART_Receive+0xe8>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800566e:	e028      	b.n	80056c2 <HAL_UART_Receive+0xe8>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10d      	bne.n	8005694 <HAL_UART_Receive+0xba>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d104      	bne.n	800568a <HAL_UART_Receive+0xb0>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	22ff      	movs	r2, #255	; 0xff
 8005684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005688:	e01b      	b.n	80056c2 <HAL_UART_Receive+0xe8>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	227f      	movs	r2, #127	; 0x7f
 800568e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005692:	e016      	b.n	80056c2 <HAL_UART_Receive+0xe8>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800569c:	d10d      	bne.n	80056ba <HAL_UART_Receive+0xe0>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <HAL_UART_Receive+0xd6>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	227f      	movs	r2, #127	; 0x7f
 80056aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056ae:	e008      	b.n	80056c2 <HAL_UART_Receive+0xe8>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	223f      	movs	r2, #63	; 0x3f
 80056b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056b8:	e003      	b.n	80056c2 <HAL_UART_Receive+0xe8>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80056c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d2:	d108      	bne.n	80056e6 <HAL_UART_Receive+0x10c>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	e003      	b.n	80056ee <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056f6:	e033      	b.n	8005760 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2200      	movs	r2, #0
 8005700:	2120      	movs	r1, #32
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fc27 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e033      	b.n	800577a <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10c      	bne.n	8005732 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800571e:	b29a      	uxth	r2, r3
 8005720:	8a7b      	ldrh	r3, [r7, #18]
 8005722:	4013      	ands	r3, r2
 8005724:	b29a      	uxth	r2, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	3302      	adds	r3, #2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	e00d      	b.n	800574e <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005738:	b29b      	uxth	r3, r3
 800573a:	b2da      	uxtb	r2, r3
 800573c:	8a7b      	ldrh	r3, [r7, #18]
 800573e:	b2db      	uxtb	r3, r3
 8005740:	4013      	ands	r3, r2
 8005742:	b2da      	uxtb	r2, r3
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	3301      	adds	r3, #1
 800574c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1c5      	bne.n	80056f8 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e000      	b.n	800577a <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
	...

08005784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005788:	b08c      	sub	sp, #48	; 0x30
 800578a:	af00      	add	r7, sp, #0
 800578c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	431a      	orrs	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	431a      	orrs	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	4313      	orrs	r3, r2
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4baa      	ldr	r3, [pc, #680]	; (8005a5c <UART_SetConfig+0x2d8>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057bc:	430b      	orrs	r3, r1
 80057be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a9f      	ldr	r2, [pc, #636]	; (8005a60 <UART_SetConfig+0x2dc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	4313      	orrs	r3, r2
 80057ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80057fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005804:	430b      	orrs	r3, r1
 8005806:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	f023 010f 	bic.w	r1, r3, #15
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a90      	ldr	r2, [pc, #576]	; (8005a64 <UART_SetConfig+0x2e0>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d125      	bne.n	8005874 <UART_SetConfig+0xf0>
 8005828:	4b8f      	ldr	r3, [pc, #572]	; (8005a68 <UART_SetConfig+0x2e4>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	2b03      	cmp	r3, #3
 8005834:	d81a      	bhi.n	800586c <UART_SetConfig+0xe8>
 8005836:	a201      	add	r2, pc, #4	; (adr r2, 800583c <UART_SetConfig+0xb8>)
 8005838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583c:	0800584d 	.word	0x0800584d
 8005840:	0800585d 	.word	0x0800585d
 8005844:	08005855 	.word	0x08005855
 8005848:	08005865 	.word	0x08005865
 800584c:	2301      	movs	r3, #1
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005852:	e116      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005854:	2302      	movs	r3, #2
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585a:	e112      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800585c:	2304      	movs	r3, #4
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005862:	e10e      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005864:	2308      	movs	r3, #8
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586a:	e10a      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800586c:	2310      	movs	r3, #16
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005872:	e106      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a7c      	ldr	r2, [pc, #496]	; (8005a6c <UART_SetConfig+0x2e8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d138      	bne.n	80058f0 <UART_SetConfig+0x16c>
 800587e:	4b7a      	ldr	r3, [pc, #488]	; (8005a68 <UART_SetConfig+0x2e4>)
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f003 030c 	and.w	r3, r3, #12
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d82d      	bhi.n	80058e8 <UART_SetConfig+0x164>
 800588c:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <UART_SetConfig+0x110>)
 800588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005892:	bf00      	nop
 8005894:	080058c9 	.word	0x080058c9
 8005898:	080058e9 	.word	0x080058e9
 800589c:	080058e9 	.word	0x080058e9
 80058a0:	080058e9 	.word	0x080058e9
 80058a4:	080058d9 	.word	0x080058d9
 80058a8:	080058e9 	.word	0x080058e9
 80058ac:	080058e9 	.word	0x080058e9
 80058b0:	080058e9 	.word	0x080058e9
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	080058e9 	.word	0x080058e9
 80058bc:	080058e9 	.word	0x080058e9
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058e1 	.word	0x080058e1
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e0d8      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80058d0:	2302      	movs	r3, #2
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e0d4      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80058d8:	2304      	movs	r3, #4
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e0d0      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80058e0:	2308      	movs	r3, #8
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e6:	e0cc      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80058e8:	2310      	movs	r3, #16
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ee:	e0c8      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a5e      	ldr	r2, [pc, #376]	; (8005a70 <UART_SetConfig+0x2ec>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d125      	bne.n	8005946 <UART_SetConfig+0x1c2>
 80058fa:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <UART_SetConfig+0x2e4>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005900:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005904:	2b30      	cmp	r3, #48	; 0x30
 8005906:	d016      	beq.n	8005936 <UART_SetConfig+0x1b2>
 8005908:	2b30      	cmp	r3, #48	; 0x30
 800590a:	d818      	bhi.n	800593e <UART_SetConfig+0x1ba>
 800590c:	2b20      	cmp	r3, #32
 800590e:	d00a      	beq.n	8005926 <UART_SetConfig+0x1a2>
 8005910:	2b20      	cmp	r3, #32
 8005912:	d814      	bhi.n	800593e <UART_SetConfig+0x1ba>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <UART_SetConfig+0x19a>
 8005918:	2b10      	cmp	r3, #16
 800591a:	d008      	beq.n	800592e <UART_SetConfig+0x1aa>
 800591c:	e00f      	b.n	800593e <UART_SetConfig+0x1ba>
 800591e:	2300      	movs	r3, #0
 8005920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005924:	e0ad      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005926:	2302      	movs	r3, #2
 8005928:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592c:	e0a9      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800592e:	2304      	movs	r3, #4
 8005930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005934:	e0a5      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005936:	2308      	movs	r3, #8
 8005938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593c:	e0a1      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800593e:	2310      	movs	r3, #16
 8005940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005944:	e09d      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a4a      	ldr	r2, [pc, #296]	; (8005a74 <UART_SetConfig+0x2f0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d125      	bne.n	800599c <UART_SetConfig+0x218>
 8005950:	4b45      	ldr	r3, [pc, #276]	; (8005a68 <UART_SetConfig+0x2e4>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800595a:	2bc0      	cmp	r3, #192	; 0xc0
 800595c:	d016      	beq.n	800598c <UART_SetConfig+0x208>
 800595e:	2bc0      	cmp	r3, #192	; 0xc0
 8005960:	d818      	bhi.n	8005994 <UART_SetConfig+0x210>
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d00a      	beq.n	800597c <UART_SetConfig+0x1f8>
 8005966:	2b80      	cmp	r3, #128	; 0x80
 8005968:	d814      	bhi.n	8005994 <UART_SetConfig+0x210>
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <UART_SetConfig+0x1f0>
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d008      	beq.n	8005984 <UART_SetConfig+0x200>
 8005972:	e00f      	b.n	8005994 <UART_SetConfig+0x210>
 8005974:	2300      	movs	r3, #0
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597a:	e082      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800597c:	2302      	movs	r3, #2
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e07e      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598a:	e07a      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005992:	e076      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599a:	e072      	b.n	8005a82 <UART_SetConfig+0x2fe>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a35      	ldr	r2, [pc, #212]	; (8005a78 <UART_SetConfig+0x2f4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d12a      	bne.n	80059fc <UART_SetConfig+0x278>
 80059a6:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <UART_SetConfig+0x2e4>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b4:	d01a      	beq.n	80059ec <UART_SetConfig+0x268>
 80059b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ba:	d81b      	bhi.n	80059f4 <UART_SetConfig+0x270>
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c0:	d00c      	beq.n	80059dc <UART_SetConfig+0x258>
 80059c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c6:	d815      	bhi.n	80059f4 <UART_SetConfig+0x270>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <UART_SetConfig+0x250>
 80059cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d0:	d008      	beq.n	80059e4 <UART_SetConfig+0x260>
 80059d2:	e00f      	b.n	80059f4 <UART_SetConfig+0x270>
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e052      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80059dc:	2302      	movs	r3, #2
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e04e      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80059e4:	2304      	movs	r3, #4
 80059e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ea:	e04a      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80059ec:	2308      	movs	r3, #8
 80059ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f2:	e046      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80059f4:	2310      	movs	r3, #16
 80059f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059fa:	e042      	b.n	8005a82 <UART_SetConfig+0x2fe>
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <UART_SetConfig+0x2dc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d13a      	bne.n	8005a7c <UART_SetConfig+0x2f8>
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <UART_SetConfig+0x2e4>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a14:	d01a      	beq.n	8005a4c <UART_SetConfig+0x2c8>
 8005a16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a1a:	d81b      	bhi.n	8005a54 <UART_SetConfig+0x2d0>
 8005a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a20:	d00c      	beq.n	8005a3c <UART_SetConfig+0x2b8>
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a26:	d815      	bhi.n	8005a54 <UART_SetConfig+0x2d0>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d003      	beq.n	8005a34 <UART_SetConfig+0x2b0>
 8005a2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a30:	d008      	beq.n	8005a44 <UART_SetConfig+0x2c0>
 8005a32:	e00f      	b.n	8005a54 <UART_SetConfig+0x2d0>
 8005a34:	2300      	movs	r3, #0
 8005a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3a:	e022      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a42:	e01e      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005a44:	2304      	movs	r3, #4
 8005a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4a:	e01a      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a52:	e016      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005a54:	2310      	movs	r3, #16
 8005a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a5a:	e012      	b.n	8005a82 <UART_SetConfig+0x2fe>
 8005a5c:	cfff69f3 	.word	0xcfff69f3
 8005a60:	40008000 	.word	0x40008000
 8005a64:	40013800 	.word	0x40013800
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40004400 	.word	0x40004400
 8005a70:	40004800 	.word	0x40004800
 8005a74:	40004c00 	.word	0x40004c00
 8005a78:	40005000 	.word	0x40005000
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4aae      	ldr	r2, [pc, #696]	; (8005d40 <UART_SetConfig+0x5bc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	f040 8097 	bne.w	8005bbc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d823      	bhi.n	8005ade <UART_SetConfig+0x35a>
 8005a96:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <UART_SetConfig+0x318>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005ac1 	.word	0x08005ac1
 8005aa0:	08005adf 	.word	0x08005adf
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005adf 	.word	0x08005adf
 8005aac:	08005acf 	.word	0x08005acf
 8005ab0:	08005adf 	.word	0x08005adf
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005adf 	.word	0x08005adf
 8005abc:	08005ad7 	.word	0x08005ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7fe f9bc 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac6:	e010      	b.n	8005aea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac8:	4b9e      	ldr	r3, [pc, #632]	; (8005d44 <UART_SetConfig+0x5c0>)
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005acc:	e00d      	b.n	8005aea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ace:	f7fe f91d 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8005ad2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad4:	e009      	b.n	8005aea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005adc:	e005      	b.n	8005aea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ae8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f000 8130 	beq.w	8005d52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	4a94      	ldr	r2, [pc, #592]	; (8005d48 <UART_SetConfig+0x5c4>)
 8005af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005afc:	461a      	mov	r2, r3
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d305      	bcc.n	8005b22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d903      	bls.n	8005b2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b28:	e113      	b.n	8005d52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	60fa      	str	r2, [r7, #12]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	4a84      	ldr	r2, [pc, #528]	; (8005d48 <UART_SetConfig+0x5c4>)
 8005b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2200      	movs	r2, #0
 8005b40:	603b      	str	r3, [r7, #0]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b4c:	f7fb f8b4 	bl	8000cb8 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4610      	mov	r0, r2
 8005b56:	4619      	mov	r1, r3
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	020b      	lsls	r3, r1, #8
 8005b62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b66:	0202      	lsls	r2, r0, #8
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	6849      	ldr	r1, [r1, #4]
 8005b6c:	0849      	lsrs	r1, r1, #1
 8005b6e:	2000      	movs	r0, #0
 8005b70:	460c      	mov	r4, r1
 8005b72:	4605      	mov	r5, r0
 8005b74:	eb12 0804 	adds.w	r8, r2, r4
 8005b78:	eb43 0905 	adc.w	r9, r3, r5
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	469a      	mov	sl, r3
 8005b84:	4693      	mov	fp, r2
 8005b86:	4652      	mov	r2, sl
 8005b88:	465b      	mov	r3, fp
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	f7fb f893 	bl	8000cb8 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4613      	mov	r3, r2
 8005b98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ba0:	d308      	bcc.n	8005bb4 <UART_SetConfig+0x430>
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba8:	d204      	bcs.n	8005bb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	e0ce      	b.n	8005d52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bba:	e0ca      	b.n	8005d52 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc4:	d166      	bne.n	8005c94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d827      	bhi.n	8005c1e <UART_SetConfig+0x49a>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <UART_SetConfig+0x450>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005bf9 	.word	0x08005bf9
 8005bd8:	08005c01 	.word	0x08005c01
 8005bdc:	08005c09 	.word	0x08005c09
 8005be0:	08005c1f 	.word	0x08005c1f
 8005be4:	08005c0f 	.word	0x08005c0f
 8005be8:	08005c1f 	.word	0x08005c1f
 8005bec:	08005c1f 	.word	0x08005c1f
 8005bf0:	08005c1f 	.word	0x08005c1f
 8005bf4:	08005c17 	.word	0x08005c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf8:	f7fe f920 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005bfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005bfe:	e014      	b.n	8005c2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c00:	f7fe f932 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005c04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c06:	e010      	b.n	8005c2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c08:	4b4e      	ldr	r3, [pc, #312]	; (8005d44 <UART_SetConfig+0x5c0>)
 8005c0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c0c:	e00d      	b.n	8005c2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0e:	f7fe f87d 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8005c12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c14:	e009      	b.n	8005c2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c1c:	e005      	b.n	8005c2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 8090 	beq.w	8005d52 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	4a44      	ldr	r2, [pc, #272]	; (8005d48 <UART_SetConfig+0x5c4>)
 8005c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c44:	005a      	lsls	r2, r3, #1
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	441a      	add	r2, r3
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c56:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	d916      	bls.n	8005c8c <UART_SetConfig+0x508>
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c64:	d212      	bcs.n	8005c8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f023 030f 	bic.w	r3, r3, #15
 8005c6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	8bfb      	ldrh	r3, [r7, #30]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	8bfa      	ldrh	r2, [r7, #30]
 8005c88:	60da      	str	r2, [r3, #12]
 8005c8a:	e062      	b.n	8005d52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c92:	e05e      	b.n	8005d52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d828      	bhi.n	8005cee <UART_SetConfig+0x56a>
 8005c9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x520>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	08005cef 	.word	0x08005cef
 8005cb4:	08005cdf 	.word	0x08005cdf
 8005cb8:	08005cef 	.word	0x08005cef
 8005cbc:	08005cef 	.word	0x08005cef
 8005cc0:	08005cef 	.word	0x08005cef
 8005cc4:	08005ce7 	.word	0x08005ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fe f8b8 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8005ccc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cce:	e014      	b.n	8005cfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd0:	f7fe f8ca 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8005cd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cd6:	e010      	b.n	8005cfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd8:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <UART_SetConfig+0x5c0>)
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cdc:	e00d      	b.n	8005cfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cde:	f7fe f815 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 8005ce2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce4:	e009      	b.n	8005cfa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cec:	e005      	b.n	8005cfa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cf8:	bf00      	nop
    }

    if (pclk != 0U)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d028      	beq.n	8005d52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	4a10      	ldr	r2, [pc, #64]	; (8005d48 <UART_SetConfig+0x5c4>)
 8005d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	441a      	add	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d910      	bls.n	8005d4c <UART_SetConfig+0x5c8>
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d20c      	bcs.n	8005d4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60da      	str	r2, [r3, #12]
 8005d3c:	e009      	b.n	8005d52 <UART_SetConfig+0x5ce>
 8005d3e:	bf00      	nop
 8005d40:	40008000 	.word	0x40008000
 8005d44:	00f42400 	.word	0x00f42400
 8005d48:	0800e574 	.word	0x0800e574
      }
      else
      {
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2200      	movs	r2, #0
 8005d66:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005d6e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3730      	adds	r7, #48	; 0x30
 8005d76:	46bd      	mov	sp, r7
 8005d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00a      	beq.n	8005e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01a      	beq.n	8005e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e7a:	d10a      	bne.n	8005e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af02      	add	r7, sp, #8
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ed0:	f7fb f8d6 	bl	8001080 <HAL_GetTick>
 8005ed4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d10e      	bne.n	8005f02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f82f 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e025      	b.n	8005f4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d10e      	bne.n	8005f2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f819 	bl	8005f56 <UART_WaitOnFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e00f      	b.n	8005f4e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b09c      	sub	sp, #112	; 0x70
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4613      	mov	r3, r2
 8005f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f66:	e0a9      	b.n	80060bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f6e:	f000 80a5 	beq.w	80060bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fb f885 	bl	8001080 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d140      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f90:	e853 3f00 	ldrex	r3, [r3]
 8005f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fae:	e841 2300 	strex	r3, r2, [r1]
 8005fb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1e6      	bne.n	8005f88 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fda:	64ba      	str	r2, [r7, #72]	; 0x48
 8005fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e5      	bne.n	8005fba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e069      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d051      	beq.n	80060bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006026:	d149      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006030:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	e853 3f00 	ldrex	r3, [r3]
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006046:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	461a      	mov	r2, r3
 800604e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006050:	637b      	str	r3, [r7, #52]	; 0x34
 8006052:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e6      	bne.n	8006032 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	613b      	str	r3, [r7, #16]
   return(result);
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f023 0301 	bic.w	r3, r3, #1
 800607a:	66bb      	str	r3, [r7, #104]	; 0x68
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006084:	623a      	str	r2, [r7, #32]
 8006086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	69f9      	ldr	r1, [r7, #28]
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	61bb      	str	r3, [r7, #24]
   return(result);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e010      	b.n	80060de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	bf0c      	ite	eq
 80060cc:	2301      	moveq	r3, #1
 80060ce:	2300      	movne	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	f43f af46 	beq.w	8005f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3770      	adds	r7, #112	; 0x70
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_UARTEx_DisableFifoMode+0x16>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e027      	b.n	800614c <HAL_UARTEx_DisableFifoMode+0x66>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2224      	movs	r2, #36	; 0x24
 8006108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800612a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e02d      	b.n	80061cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f022 0201 	bic.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f84f 	bl	8006250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e02d      	b.n	8006248 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2224      	movs	r2, #36	; 0x24
 80061f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0201 	bic.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	430a      	orrs	r2, r1
 8006226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f000 f811 	bl	8006250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006270:	e031      	b.n	80062d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006272:	2308      	movs	r3, #8
 8006274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006276:	2308      	movs	r3, #8
 8006278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	0e5b      	lsrs	r3, r3, #25
 8006282:	b2db      	uxtb	r3, r3
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	0f5b      	lsrs	r3, r3, #29
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	7b3a      	ldrb	r2, [r7, #12]
 800629e:	4911      	ldr	r1, [pc, #68]	; (80062e4 <UARTEx_SetNbDataToProcess+0x94>)
 80062a0:	5c8a      	ldrb	r2, [r1, r2]
 80062a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062a6:	7b3a      	ldrb	r2, [r7, #12]
 80062a8:	490f      	ldr	r1, [pc, #60]	; (80062e8 <UARTEx_SetNbDataToProcess+0x98>)
 80062aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	7b7a      	ldrb	r2, [r7, #13]
 80062bc:	4909      	ldr	r1, [pc, #36]	; (80062e4 <UARTEx_SetNbDataToProcess+0x94>)
 80062be:	5c8a      	ldrb	r2, [r1, r2]
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062c4:	7b7a      	ldrb	r2, [r7, #13]
 80062c6:	4908      	ldr	r1, [pc, #32]	; (80062e8 <UARTEx_SetNbDataToProcess+0x98>)
 80062c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	0800e58c 	.word	0x0800e58c
 80062e8:	0800e594 	.word	0x0800e594

080062ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80062fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80062fe:	2b84      	cmp	r3, #132	; 0x84
 8006300:	d005      	beq.n	800630e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	3303      	adds	r3, #3
 800630c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800630e:	68fb      	ldr	r3, [r7, #12]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006320:	f000 fade 	bl	80068e0 <vTaskStartScheduler>
  
  return osOK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	bd80      	pop	{r7, pc}

0800632a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800632a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800632c:	b089      	sub	sp, #36	; 0x24
 800632e:	af04      	add	r7, sp, #16
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d020      	beq.n	800637e <osThreadCreate+0x54>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01c      	beq.n	800637e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685c      	ldr	r4, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681d      	ldr	r5, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691e      	ldr	r6, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ffc8 	bl	80062ec <makeFreeRtosPriority>
 800635c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006366:	9202      	str	r2, [sp, #8]
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	9100      	str	r1, [sp, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	4632      	mov	r2, r6
 8006370:	4629      	mov	r1, r5
 8006372:	4620      	mov	r0, r4
 8006374:	f000 f8ed 	bl	8006552 <xTaskCreateStatic>
 8006378:	4603      	mov	r3, r0
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	e01c      	b.n	80063b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685c      	ldr	r4, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800638a:	b29e      	uxth	r6, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff ffaa 	bl	80062ec <makeFreeRtosPriority>
 8006398:	4602      	mov	r2, r0
 800639a:	f107 030c 	add.w	r3, r7, #12
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	9200      	str	r2, [sp, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	4632      	mov	r2, r6
 80063a6:	4629      	mov	r1, r5
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 f92f 	bl	800660c <xTaskCreate>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d001      	beq.n	80063b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <osDelay+0x16>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	e000      	b.n	80063da <osDelay+0x18>
 80063d8:	2301      	movs	r3, #1
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fa4c 	bl	8006878 <vTaskDelay>
  
  return osOK;
 80063e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f103 0208 	add.w	r2, r3, #8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006402:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f103 0208 	add.w	r2, r3, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f103 0208 	add.w	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	601a      	str	r2, [r3, #0]
}
 8006480:	bf00      	nop
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a2:	d103      	bne.n	80064ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e00c      	b.n	80064c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3308      	adds	r3, #8
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	e002      	b.n	80064ba <vListInsert+0x2e>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d2f6      	bcs.n	80064b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	601a      	str	r2, [r3, #0]
}
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6892      	ldr	r2, [r2, #8]
 8006514:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6852      	ldr	r2, [r2, #4]
 800651e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d103      	bne.n	8006532 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr

08006552 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006552:	b580      	push	{r7, lr}
 8006554:	b08e      	sub	sp, #56	; 0x38
 8006556:	af04      	add	r7, sp, #16
 8006558:	60f8      	str	r0, [r7, #12]
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10a      	bne.n	800657c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006578:	bf00      	nop
 800657a:	e7fe      	b.n	800657a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800657c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <xTaskCreateStatic+0x46>
	__asm volatile
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	61fb      	str	r3, [r7, #28]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006598:	2354      	movs	r3, #84	; 0x54
 800659a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b54      	cmp	r3, #84	; 0x54
 80065a0:	d00a      	beq.n	80065b8 <xTaskCreateStatic+0x66>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	61bb      	str	r3, [r7, #24]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80065b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01e      	beq.n	80065fe <xTaskCreateStatic+0xac>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d01b      	beq.n	80065fe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ce:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80065d8:	2300      	movs	r3, #0
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	9302      	str	r3, [sp, #8]
 80065e0:	f107 0314 	add.w	r3, r7, #20
 80065e4:	9301      	str	r3, [sp, #4]
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	68b9      	ldr	r1, [r7, #8]
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f850 	bl	8006696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065f8:	f000 f8d4 	bl	80067a4 <prvAddNewTaskToReadyList>
 80065fc:	e001      	b.n	8006602 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006602:	697b      	ldr	r3, [r7, #20]
	}
 8006604:	4618      	mov	r0, r3
 8006606:	3728      	adds	r7, #40	; 0x28
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800660c:	b580      	push	{r7, lr}
 800660e:	b08c      	sub	sp, #48	; 0x30
 8006610:	af04      	add	r7, sp, #16
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800661c:	88fb      	ldrh	r3, [r7, #6]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fec9 	bl	80073b8 <pvPortMalloc>
 8006626:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00e      	beq.n	800664c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800662e:	2054      	movs	r0, #84	; 0x54
 8006630:	f000 fec2 	bl	80073b8 <pvPortMalloc>
 8006634:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
 8006642:	e005      	b.n	8006650 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006644:	6978      	ldr	r0, [r7, #20]
 8006646:	f000 ff83 	bl	8007550 <vPortFree>
 800664a:	e001      	b.n	8006650 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800664c:	2300      	movs	r3, #0
 800664e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d017      	beq.n	8006686 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800665e:	88fa      	ldrh	r2, [r7, #6]
 8006660:	2300      	movs	r3, #0
 8006662:	9303      	str	r3, [sp, #12]
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	9302      	str	r3, [sp, #8]
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	9301      	str	r3, [sp, #4]
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68b9      	ldr	r1, [r7, #8]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f80e 	bl	8006696 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800667a:	69f8      	ldr	r0, [r7, #28]
 800667c:	f000 f892 	bl	80067a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e002      	b.n	800668c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800668a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800668c:	69bb      	ldr	r3, [r7, #24]
	}
 800668e:	4618      	mov	r0, r3
 8006690:	3720      	adds	r7, #32
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b088      	sub	sp, #32
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
 800669e:	60b9      	str	r1, [r7, #8]
 80066a0:	607a      	str	r2, [r7, #4]
 80066a2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80066ae:	3b01      	subs	r3, #1
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f023 0307 	bic.w	r3, r3, #7
 80066bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <prvInitialiseNewTask+0x48>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	617b      	str	r3, [r7, #20]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01f      	beq.n	8006724 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80066e4:	2300      	movs	r3, #0
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e012      	b.n	8006710 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	4413      	add	r3, r2
 80066f0:	7819      	ldrb	r1, [r3, #0]
 80066f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	4413      	add	r3, r2
 80066f8:	3334      	adds	r3, #52	; 0x34
 80066fa:	460a      	mov	r2, r1
 80066fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d006      	beq.n	8006718 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	3301      	adds	r3, #1
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	2b0f      	cmp	r3, #15
 8006714:	d9e9      	bls.n	80066ea <prvInitialiseNewTask+0x54>
 8006716:	e000      	b.n	800671a <prvInitialiseNewTask+0x84>
			{
				break;
 8006718:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800671a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006722:	e003      	b.n	800672c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800672c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672e:	2b06      	cmp	r3, #6
 8006730:	d901      	bls.n	8006736 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006732:	2306      	movs	r3, #6
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800673a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006740:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	2200      	movs	r2, #0
 8006746:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	3304      	adds	r3, #4
 800674c:	4618      	mov	r0, r3
 800674e:	f7ff fe6c 	bl	800642a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	3318      	adds	r3, #24
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fe67 	bl	800642a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006760:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006764:	f1c3 0207 	rsb	r2, r3, #7
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006770:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2200      	movs	r2, #0
 8006776:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	69b8      	ldr	r0, [r7, #24]
 8006786:	f000 fc05 	bl	8006f94 <pxPortInitialiseStack>
 800678a:	4602      	mov	r2, r0
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800679c:	bf00      	nop
 800679e:	3720      	adds	r7, #32
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80067ac:	f000 fd22 	bl	80071f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80067b0:	4b2a      	ldr	r3, [pc, #168]	; (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	4a29      	ldr	r2, [pc, #164]	; (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80067ba:	4b29      	ldr	r3, [pc, #164]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80067c2:	4a27      	ldr	r2, [pc, #156]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80067c8:	4b24      	ldr	r3, [pc, #144]	; (800685c <prvAddNewTaskToReadyList+0xb8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d110      	bne.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80067d0:	f000 fabc 	bl	8006d4c <prvInitialiseTaskLists>
 80067d4:	e00d      	b.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80067d6:	4b23      	ldr	r3, [pc, #140]	; (8006864 <prvAddNewTaskToReadyList+0xc0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d109      	bne.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d802      	bhi.n	80067f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80067ec:	4a1c      	ldr	r2, [pc, #112]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <prvAddNewTaskToReadyList+0xc4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3301      	adds	r3, #1
 80067f8:	4a1b      	ldr	r2, [pc, #108]	; (8006868 <prvAddNewTaskToReadyList+0xc4>)
 80067fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006800:	2201      	movs	r2, #1
 8006802:	409a      	lsls	r2, r3
 8006804:	4b19      	ldr	r3, [pc, #100]	; (800686c <prvAddNewTaskToReadyList+0xc8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4313      	orrs	r3, r2
 800680a:	4a18      	ldr	r2, [pc, #96]	; (800686c <prvAddNewTaskToReadyList+0xc8>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006812:	4613      	mov	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4a15      	ldr	r2, [pc, #84]	; (8006870 <prvAddNewTaskToReadyList+0xcc>)
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3304      	adds	r3, #4
 8006822:	4619      	mov	r1, r3
 8006824:	4610      	mov	r0, r2
 8006826:	f7ff fe0d 	bl	8006444 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800682a:	f000 fd13 	bl	8007254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <prvAddNewTaskToReadyList+0xc0>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00e      	beq.n	8006854 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006836:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvAddNewTaskToReadyList+0xbc>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	429a      	cmp	r2, r3
 8006842:	d207      	bcs.n	8006854 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006844:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <prvAddNewTaskToReadyList+0xd0>)
 8006846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000310 	.word	0x20000310
 8006860:	20000210 	.word	0x20000210
 8006864:	2000031c 	.word	0x2000031c
 8006868:	2000032c 	.word	0x2000032c
 800686c:	20000318 	.word	0x20000318
 8006870:	20000214 	.word	0x20000214
 8006874:	e000ed04 	.word	0xe000ed04

08006878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006880:	2300      	movs	r3, #0
 8006882:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d017      	beq.n	80068ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <vTaskDelay+0x60>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <vTaskDelay+0x30>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	60bb      	str	r3, [r7, #8]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80068a8:	f000 f87a 	bl	80069a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80068ac:	2100      	movs	r1, #0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fb0a 	bl	8006ec8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80068b4:	f000 f882 	bl	80069bc <xTaskResumeAll>
 80068b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <vTaskDelay+0x64>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	20000338 	.word	0x20000338
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80068e6:	2300      	movs	r3, #0
 80068e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80068ee:	463a      	mov	r2, r7
 80068f0:	1d39      	adds	r1, r7, #4
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 ff48 	bl	800778c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	9202      	str	r2, [sp, #8]
 8006904:	9301      	str	r3, [sp, #4]
 8006906:	2300      	movs	r3, #0
 8006908:	9300      	str	r3, [sp, #0]
 800690a:	2300      	movs	r3, #0
 800690c:	460a      	mov	r2, r1
 800690e:	491e      	ldr	r1, [pc, #120]	; (8006988 <vTaskStartScheduler+0xa8>)
 8006910:	481e      	ldr	r0, [pc, #120]	; (800698c <vTaskStartScheduler+0xac>)
 8006912:	f7ff fe1e 	bl	8006552 <xTaskCreateStatic>
 8006916:	4603      	mov	r3, r0
 8006918:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <vTaskStartScheduler+0xb0>)
 800691a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800691c:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <vTaskStartScheduler+0xb0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006924:	2301      	movs	r3, #1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	e001      	b.n	800692e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d116      	bne.n	8006962 <vTaskStartScheduler+0x82>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	613b      	str	r3, [r7, #16]
}
 8006946:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006948:	4b12      	ldr	r3, [pc, #72]	; (8006994 <vTaskStartScheduler+0xb4>)
 800694a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800694e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006950:	4b11      	ldr	r3, [pc, #68]	; (8006998 <vTaskStartScheduler+0xb8>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006956:	4b11      	ldr	r3, [pc, #68]	; (800699c <vTaskStartScheduler+0xbc>)
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800695c:	f000 fba8 	bl	80070b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006960:	e00e      	b.n	8006980 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006968:	d10a      	bne.n	8006980 <vTaskStartScheduler+0xa0>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	60fb      	str	r3, [r7, #12]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <vTaskStartScheduler+0x9e>
}
 8006980:	bf00      	nop
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	0800e2d0 	.word	0x0800e2d0
 800698c:	08006d1d 	.word	0x08006d1d
 8006990:	20000334 	.word	0x20000334
 8006994:	20000330 	.word	0x20000330
 8006998:	2000031c 	.word	0x2000031c
 800699c:	20000314 	.word	0x20000314

080069a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80069a4:	4b04      	ldr	r3, [pc, #16]	; (80069b8 <vTaskSuspendAll+0x18>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3301      	adds	r3, #1
 80069aa:	4a03      	ldr	r2, [pc, #12]	; (80069b8 <vTaskSuspendAll+0x18>)
 80069ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80069ae:	bf00      	nop
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	20000338 	.word	0x20000338

080069bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80069ca:	4b41      	ldr	r3, [pc, #260]	; (8006ad0 <xTaskResumeAll+0x114>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	603b      	str	r3, [r7, #0]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80069e8:	f000 fc04 	bl	80071f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80069ec:	4b38      	ldr	r3, [pc, #224]	; (8006ad0 <xTaskResumeAll+0x114>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3b01      	subs	r3, #1
 80069f2:	4a37      	ldr	r2, [pc, #220]	; (8006ad0 <xTaskResumeAll+0x114>)
 80069f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f6:	4b36      	ldr	r3, [pc, #216]	; (8006ad0 <xTaskResumeAll+0x114>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d161      	bne.n	8006ac2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80069fe:	4b35      	ldr	r3, [pc, #212]	; (8006ad4 <xTaskResumeAll+0x118>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d05d      	beq.n	8006ac2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a06:	e02e      	b.n	8006a66 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	4b33      	ldr	r3, [pc, #204]	; (8006ad8 <xTaskResumeAll+0x11c>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3318      	adds	r3, #24
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fd72 	bl	80064fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7ff fd6d 	bl	80064fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	2201      	movs	r2, #1
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	4b2b      	ldr	r3, [pc, #172]	; (8006adc <xTaskResumeAll+0x120>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	4a2a      	ldr	r2, [pc, #168]	; (8006adc <xTaskResumeAll+0x120>)
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <xTaskResumeAll+0x124>)
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3304      	adds	r3, #4
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7ff fcf9 	bl	8006444 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a56:	4b23      	ldr	r3, [pc, #140]	; (8006ae4 <xTaskResumeAll+0x128>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006a60:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <xTaskResumeAll+0x12c>)
 8006a62:	2201      	movs	r2, #1
 8006a64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTaskResumeAll+0x11c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1cc      	bne.n	8006a08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a74:	f000 fa08 	bl	8006e88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a78:	4b1c      	ldr	r3, [pc, #112]	; (8006aec <xTaskResumeAll+0x130>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d010      	beq.n	8006aa6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a84:	f000 f836 	bl	8006af4 <xTaskIncrementTick>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a8e:	4b16      	ldr	r3, [pc, #88]	; (8006ae8 <xTaskResumeAll+0x12c>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f1      	bne.n	8006a84 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006aa0:	4b12      	ldr	r3, [pc, #72]	; (8006aec <xTaskResumeAll+0x130>)
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006aa6:	4b10      	ldr	r3, [pc, #64]	; (8006ae8 <xTaskResumeAll+0x12c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <xTaskResumeAll+0x134>)
 8006ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ac2:	f000 fbc7 	bl	8007254 <vPortExitCritical>

	return xAlreadyYielded;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000338 	.word	0x20000338
 8006ad4:	20000310 	.word	0x20000310
 8006ad8:	200002d0 	.word	0x200002d0
 8006adc:	20000318 	.word	0x20000318
 8006ae0:	20000214 	.word	0x20000214
 8006ae4:	20000210 	.word	0x20000210
 8006ae8:	20000324 	.word	0x20000324
 8006aec:	20000320 	.word	0x20000320
 8006af0:	e000ed04 	.word	0xe000ed04

08006af4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006afe:	4b4e      	ldr	r3, [pc, #312]	; (8006c38 <xTaskIncrementTick+0x144>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f040 808e 	bne.w	8006c24 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006b08:	4b4c      	ldr	r3, [pc, #304]	; (8006c3c <xTaskIncrementTick+0x148>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006b10:	4a4a      	ldr	r2, [pc, #296]	; (8006c3c <xTaskIncrementTick+0x148>)
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d120      	bne.n	8006b5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006b1c:	4b48      	ldr	r3, [pc, #288]	; (8006c40 <xTaskIncrementTick+0x14c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <xTaskIncrementTick+0x48>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	603b      	str	r3, [r7, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <xTaskIncrementTick+0x46>
 8006b3c:	4b40      	ldr	r3, [pc, #256]	; (8006c40 <xTaskIncrementTick+0x14c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	4b40      	ldr	r3, [pc, #256]	; (8006c44 <xTaskIncrementTick+0x150>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a3e      	ldr	r2, [pc, #248]	; (8006c40 <xTaskIncrementTick+0x14c>)
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	4a3e      	ldr	r2, [pc, #248]	; (8006c44 <xTaskIncrementTick+0x150>)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4b3d      	ldr	r3, [pc, #244]	; (8006c48 <xTaskIncrementTick+0x154>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	4a3c      	ldr	r2, [pc, #240]	; (8006c48 <xTaskIncrementTick+0x154>)
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	f000 f995 	bl	8006e88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b5e:	4b3b      	ldr	r3, [pc, #236]	; (8006c4c <xTaskIncrementTick+0x158>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d348      	bcc.n	8006bfa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b68:	4b35      	ldr	r3, [pc, #212]	; (8006c40 <xTaskIncrementTick+0x14c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b72:	4b36      	ldr	r3, [pc, #216]	; (8006c4c <xTaskIncrementTick+0x158>)
 8006b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b78:	601a      	str	r2, [r3, #0]
					break;
 8006b7a:	e03e      	b.n	8006bfa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b7c:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <xTaskIncrementTick+0x14c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d203      	bcs.n	8006b9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b94:	4a2d      	ldr	r2, [pc, #180]	; (8006c4c <xTaskIncrementTick+0x158>)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b9a:	e02e      	b.n	8006bfa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fcac 	bl	80064fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	3318      	adds	r3, #24
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fca3 	bl	80064fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <xTaskIncrementTick+0x15c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	4a22      	ldr	r2, [pc, #136]	; (8006c50 <xTaskIncrementTick+0x15c>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a1f      	ldr	r2, [pc, #124]	; (8006c54 <xTaskIncrementTick+0x160>)
 8006bd8:	441a      	add	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4619      	mov	r1, r3
 8006be0:	4610      	mov	r0, r2
 8006be2:	f7ff fc2f 	bl	8006444 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <xTaskIncrementTick+0x164>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d3b9      	bcc.n	8006b68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006bf8:	e7b6      	b.n	8006b68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006bfa:	4b17      	ldr	r3, [pc, #92]	; (8006c58 <xTaskIncrementTick+0x164>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c00:	4914      	ldr	r1, [pc, #80]	; (8006c54 <xTaskIncrementTick+0x160>)
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d901      	bls.n	8006c16 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006c12:	2301      	movs	r3, #1
 8006c14:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006c16:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <xTaskIncrementTick+0x168>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e004      	b.n	8006c2e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <xTaskIncrementTick+0x16c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	4a0d      	ldr	r2, [pc, #52]	; (8006c60 <xTaskIncrementTick+0x16c>)
 8006c2c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006c2e:	697b      	ldr	r3, [r7, #20]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000338 	.word	0x20000338
 8006c3c:	20000314 	.word	0x20000314
 8006c40:	200002c8 	.word	0x200002c8
 8006c44:	200002cc 	.word	0x200002cc
 8006c48:	20000328 	.word	0x20000328
 8006c4c:	20000330 	.word	0x20000330
 8006c50:	20000318 	.word	0x20000318
 8006c54:	20000214 	.word	0x20000214
 8006c58:	20000210 	.word	0x20000210
 8006c5c:	20000324 	.word	0x20000324
 8006c60:	20000320 	.word	0x20000320

08006c64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c6a:	4b27      	ldr	r3, [pc, #156]	; (8006d08 <vTaskSwitchContext+0xa4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d003      	beq.n	8006c7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <vTaskSwitchContext+0xa8>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c78:	e03f      	b.n	8006cfa <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006c7a:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <vTaskSwitchContext+0xa8>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c80:	4b23      	ldr	r3, [pc, #140]	; (8006d10 <vTaskSwitchContext+0xac>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	fab3 f383 	clz	r3, r3
 8006c8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c8e:	7afb      	ldrb	r3, [r7, #11]
 8006c90:	f1c3 031f 	rsb	r3, r3, #31
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	491f      	ldr	r1, [pc, #124]	; (8006d14 <vTaskSwitchContext+0xb0>)
 8006c98:	697a      	ldr	r2, [r7, #20]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	607b      	str	r3, [r7, #4]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vTaskSwitchContext+0x5a>
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a12      	ldr	r2, [pc, #72]	; (8006d14 <vTaskSwitchContext+0xb0>)
 8006ccc:	4413      	add	r3, r2
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	3308      	adds	r3, #8
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d104      	bne.n	8006cf0 <vTaskSwitchContext+0x8c>
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	605a      	str	r2, [r3, #4]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	4a08      	ldr	r2, [pc, #32]	; (8006d18 <vTaskSwitchContext+0xb4>)
 8006cf8:	6013      	str	r3, [r2, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000338 	.word	0x20000338
 8006d0c:	20000324 	.word	0x20000324
 8006d10:	20000318 	.word	0x20000318
 8006d14:	20000214 	.word	0x20000214
 8006d18:	20000210 	.word	0x20000210

08006d1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d24:	f000 f852 	bl	8006dcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d28:	4b06      	ldr	r3, [pc, #24]	; (8006d44 <prvIdleTask+0x28>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d9f9      	bls.n	8006d24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d30:	4b05      	ldr	r3, [pc, #20]	; (8006d48 <prvIdleTask+0x2c>)
 8006d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d40:	e7f0      	b.n	8006d24 <prvIdleTask+0x8>
 8006d42:	bf00      	nop
 8006d44:	20000214 	.word	0x20000214
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d52:	2300      	movs	r3, #0
 8006d54:	607b      	str	r3, [r7, #4]
 8006d56:	e00c      	b.n	8006d72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4a12      	ldr	r2, [pc, #72]	; (8006dac <prvInitialiseTaskLists+0x60>)
 8006d64:	4413      	add	r3, r2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff fb3f 	bl	80063ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	607b      	str	r3, [r7, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b06      	cmp	r3, #6
 8006d76:	d9ef      	bls.n	8006d58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d78:	480d      	ldr	r0, [pc, #52]	; (8006db0 <prvInitialiseTaskLists+0x64>)
 8006d7a:	f7ff fb36 	bl	80063ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d7e:	480d      	ldr	r0, [pc, #52]	; (8006db4 <prvInitialiseTaskLists+0x68>)
 8006d80:	f7ff fb33 	bl	80063ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d84:	480c      	ldr	r0, [pc, #48]	; (8006db8 <prvInitialiseTaskLists+0x6c>)
 8006d86:	f7ff fb30 	bl	80063ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d8a:	480c      	ldr	r0, [pc, #48]	; (8006dbc <prvInitialiseTaskLists+0x70>)
 8006d8c:	f7ff fb2d 	bl	80063ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d90:	480b      	ldr	r0, [pc, #44]	; (8006dc0 <prvInitialiseTaskLists+0x74>)
 8006d92:	f7ff fb2a 	bl	80063ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <prvInitialiseTaskLists+0x78>)
 8006d98:	4a05      	ldr	r2, [pc, #20]	; (8006db0 <prvInitialiseTaskLists+0x64>)
 8006d9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	; (8006dc8 <prvInitialiseTaskLists+0x7c>)
 8006d9e:	4a05      	ldr	r2, [pc, #20]	; (8006db4 <prvInitialiseTaskLists+0x68>)
 8006da0:	601a      	str	r2, [r3, #0]
}
 8006da2:	bf00      	nop
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	20000214 	.word	0x20000214
 8006db0:	200002a0 	.word	0x200002a0
 8006db4:	200002b4 	.word	0x200002b4
 8006db8:	200002d0 	.word	0x200002d0
 8006dbc:	200002e4 	.word	0x200002e4
 8006dc0:	200002fc 	.word	0x200002fc
 8006dc4:	200002c8 	.word	0x200002c8
 8006dc8:	200002cc 	.word	0x200002cc

08006dcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dd2:	e019      	b.n	8006e08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dd4:	f000 fa0e 	bl	80071f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd8:	4b10      	ldr	r3, [pc, #64]	; (8006e1c <prvCheckTasksWaitingTermination+0x50>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7ff fb8a 	bl	80064fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dea:	4b0d      	ldr	r3, [pc, #52]	; (8006e20 <prvCheckTasksWaitingTermination+0x54>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	4a0b      	ldr	r2, [pc, #44]	; (8006e20 <prvCheckTasksWaitingTermination+0x54>)
 8006df2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006df4:	4b0b      	ldr	r3, [pc, #44]	; (8006e24 <prvCheckTasksWaitingTermination+0x58>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	4a0a      	ldr	r2, [pc, #40]	; (8006e24 <prvCheckTasksWaitingTermination+0x58>)
 8006dfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dfe:	f000 fa29 	bl	8007254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f810 	bl	8006e28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <prvCheckTasksWaitingTermination+0x58>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1e1      	bne.n	8006dd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e10:	bf00      	nop
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	200002e4 	.word	0x200002e4
 8006e20:	20000310 	.word	0x20000310
 8006e24:	200002f8 	.word	0x200002f8

08006e28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d108      	bne.n	8006e4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fb86 	bl	8007550 <vPortFree>
				vPortFree( pxTCB );
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fb83 	bl	8007550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e4a:	e018      	b.n	8006e7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d103      	bne.n	8006e5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 fb7a 	bl	8007550 <vPortFree>
	}
 8006e5c:	e00f      	b.n	8006e7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d00a      	beq.n	8006e7e <prvDeleteTCB+0x56>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	60fb      	str	r3, [r7, #12]
}
 8006e7a:	bf00      	nop
 8006e7c:	e7fe      	b.n	8006e7c <prvDeleteTCB+0x54>
	}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	; (8006ec0 <prvResetNextTaskUnblockTime+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d104      	bne.n	8006ea2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8006e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ea0:	e008      	b.n	8006eb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ea2:	4b07      	ldr	r3, [pc, #28]	; (8006ec0 <prvResetNextTaskUnblockTime+0x38>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	4a04      	ldr	r2, [pc, #16]	; (8006ec4 <prvResetNextTaskUnblockTime+0x3c>)
 8006eb2:	6013      	str	r3, [r2, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	200002c8 	.word	0x200002c8
 8006ec4:	20000330 	.word	0x20000330

08006ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ed2:	4b29      	ldr	r3, [pc, #164]	; (8006f78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ed8:	4b28      	ldr	r3, [pc, #160]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7ff fb0d 	bl	80064fe <uxListRemove>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006eea:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43da      	mvns	r2, r3
 8006ef8:	4b21      	ldr	r3, [pc, #132]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4013      	ands	r3, r2
 8006efe:	4a20      	ldr	r2, [pc, #128]	; (8006f80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f08:	d10a      	bne.n	8006f20 <prvAddCurrentTaskToDelayedList+0x58>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d007      	beq.n	8006f20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3304      	adds	r3, #4
 8006f16:	4619      	mov	r1, r3
 8006f18:	481a      	ldr	r0, [pc, #104]	; (8006f84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f1a:	f7ff fa93 	bl	8006444 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f1e:	e026      	b.n	8006f6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d209      	bcs.n	8006f4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f38:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3304      	adds	r3, #4
 8006f42:	4619      	mov	r1, r3
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7ff faa1 	bl	800648c <vListInsert>
}
 8006f4a:	e010      	b.n	8006f6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3304      	adds	r3, #4
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f7ff fa97 	bl	800648c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d202      	bcs.n	8006f6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f68:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6013      	str	r3, [r2, #0]
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000314 	.word	0x20000314
 8006f7c:	20000210 	.word	0x20000210
 8006f80:	20000318 	.word	0x20000318
 8006f84:	200002fc 	.word	0x200002fc
 8006f88:	200002cc 	.word	0x200002cc
 8006f8c:	200002c8 	.word	0x200002c8
 8006f90:	20000330 	.word	0x20000330

08006f94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3b04      	subs	r3, #4
 8006fa4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3b04      	subs	r3, #4
 8006fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f023 0201 	bic.w	r2, r3, #1
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3b04      	subs	r3, #4
 8006fc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fc4:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <pxPortInitialiseStack+0x64>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3b14      	subs	r3, #20
 8006fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f06f 0202 	mvn.w	r2, #2
 8006fe2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3b20      	subs	r3, #32
 8006fe8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006fea:	68fb      	ldr	r3, [r7, #12]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	08006ffd 	.word	0x08006ffd

08006ffc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <prvTaskExitError+0x54>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800700e:	d00a      	beq.n	8007026 <prvTaskExitError+0x2a>
	__asm volatile
 8007010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007014:	f383 8811 	msr	BASEPRI, r3
 8007018:	f3bf 8f6f 	isb	sy
 800701c:	f3bf 8f4f 	dsb	sy
 8007020:	60fb      	str	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	e7fe      	b.n	8007024 <prvTaskExitError+0x28>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	60bb      	str	r3, [r7, #8]
}
 8007038:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800703a:	bf00      	nop
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0fc      	beq.n	800703c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	20000008 	.word	0x20000008
	...

08007060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007060:	4b07      	ldr	r3, [pc, #28]	; (8007080 <pxCurrentTCBConst2>)
 8007062:	6819      	ldr	r1, [r3, #0]
 8007064:	6808      	ldr	r0, [r1, #0]
 8007066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706a:	f380 8809 	msr	PSP, r0
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8811 	msr	BASEPRI, r0
 800707a:	4770      	bx	lr
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst2>:
 8007080:	20000210 	.word	0x20000210
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007088:	4808      	ldr	r0, [pc, #32]	; (80070ac <prvPortStartFirstTask+0x24>)
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	6800      	ldr	r0, [r0, #0]
 800708e:	f380 8808 	msr	MSP, r0
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8814 	msr	CONTROL, r0
 800709a:	b662      	cpsie	i
 800709c:	b661      	cpsie	f
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	df00      	svc	0
 80070a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070aa:	bf00      	nop
 80070ac:	e000ed08 	.word	0xe000ed08

080070b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070b6:	4b46      	ldr	r3, [pc, #280]	; (80071d0 <xPortStartScheduler+0x120>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a46      	ldr	r2, [pc, #280]	; (80071d4 <xPortStartScheduler+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d10a      	bne.n	80070d6 <xPortStartScheduler+0x26>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	613b      	str	r3, [r7, #16]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070d6:	4b3e      	ldr	r3, [pc, #248]	; (80071d0 <xPortStartScheduler+0x120>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <xPortStartScheduler+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10a      	bne.n	80070f6 <xPortStartScheduler+0x46>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	60fb      	str	r3, [r7, #12]
}
 80070f2:	bf00      	nop
 80070f4:	e7fe      	b.n	80070f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <xPortStartScheduler+0x12c>)
 80070f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	22ff      	movs	r2, #255	; 0xff
 8007106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	b2db      	uxtb	r3, r3
 800710e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007118:	b2da      	uxtb	r2, r3
 800711a:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <xPortStartScheduler+0x130>)
 800711c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800711e:	4b31      	ldr	r3, [pc, #196]	; (80071e4 <xPortStartScheduler+0x134>)
 8007120:	2207      	movs	r2, #7
 8007122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007124:	e009      	b.n	800713a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007126:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <xPortStartScheduler+0x134>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	4a2d      	ldr	r2, [pc, #180]	; (80071e4 <xPortStartScheduler+0x134>)
 800712e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800713a:	78fb      	ldrb	r3, [r7, #3]
 800713c:	b2db      	uxtb	r3, r3
 800713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007142:	2b80      	cmp	r3, #128	; 0x80
 8007144:	d0ef      	beq.n	8007126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007146:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <xPortStartScheduler+0x134>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f1c3 0307 	rsb	r3, r3, #7
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00a      	beq.n	8007168 <xPortStartScheduler+0xb8>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	60bb      	str	r3, [r7, #8]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007168:	4b1e      	ldr	r3, [pc, #120]	; (80071e4 <xPortStartScheduler+0x134>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	4a1d      	ldr	r2, [pc, #116]	; (80071e4 <xPortStartScheduler+0x134>)
 8007170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007172:	4b1c      	ldr	r3, [pc, #112]	; (80071e4 <xPortStartScheduler+0x134>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800717a:	4a1a      	ldr	r2, [pc, #104]	; (80071e4 <xPortStartScheduler+0x134>)
 800717c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007186:	4b18      	ldr	r3, [pc, #96]	; (80071e8 <xPortStartScheduler+0x138>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a17      	ldr	r2, [pc, #92]	; (80071e8 <xPortStartScheduler+0x138>)
 800718c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007192:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <xPortStartScheduler+0x138>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a14      	ldr	r2, [pc, #80]	; (80071e8 <xPortStartScheduler+0x138>)
 8007198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800719c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800719e:	f000 f8dd 	bl	800735c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071a2:	4b12      	ldr	r3, [pc, #72]	; (80071ec <xPortStartScheduler+0x13c>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071a8:	f000 f8fc 	bl	80073a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <xPortStartScheduler+0x140>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <xPortStartScheduler+0x140>)
 80071b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80071b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071b8:	f7ff ff66 	bl	8007088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071bc:	f7ff fd52 	bl	8006c64 <vTaskSwitchContext>
	prvTaskExitError();
 80071c0:	f7ff ff1c 	bl	8006ffc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	e000ed00 	.word	0xe000ed00
 80071d4:	410fc271 	.word	0x410fc271
 80071d8:	410fc270 	.word	0x410fc270
 80071dc:	e000e400 	.word	0xe000e400
 80071e0:	2000033c 	.word	0x2000033c
 80071e4:	20000340 	.word	0x20000340
 80071e8:	e000ed20 	.word	0xe000ed20
 80071ec:	20000008 	.word	0x20000008
 80071f0:	e000ef34 	.word	0xe000ef34

080071f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	607b      	str	r3, [r7, #4]
}
 800720c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800720e:	4b0f      	ldr	r3, [pc, #60]	; (800724c <vPortEnterCritical+0x58>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3301      	adds	r3, #1
 8007214:	4a0d      	ldr	r2, [pc, #52]	; (800724c <vPortEnterCritical+0x58>)
 8007216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <vPortEnterCritical+0x58>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d10f      	bne.n	8007240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007220:	4b0b      	ldr	r3, [pc, #44]	; (8007250 <vPortEnterCritical+0x5c>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <vPortEnterCritical+0x4c>
	__asm volatile
 800722a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722e:	f383 8811 	msr	BASEPRI, r3
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	603b      	str	r3, [r7, #0]
}
 800723c:	bf00      	nop
 800723e:	e7fe      	b.n	800723e <vPortEnterCritical+0x4a>
	}
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	20000008 	.word	0x20000008
 8007250:	e000ed04 	.word	0xe000ed04

08007254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800725a:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <vPortExitCritical+0x50>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10a      	bne.n	8007278 <vPortExitCritical+0x24>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	607b      	str	r3, [r7, #4]
}
 8007274:	bf00      	nop
 8007276:	e7fe      	b.n	8007276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007278:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <vPortExitCritical+0x50>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	4a09      	ldr	r2, [pc, #36]	; (80072a4 <vPortExitCritical+0x50>)
 8007280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d105      	bne.n	8007296 <vPortExitCritical+0x42>
 800728a:	2300      	movs	r3, #0
 800728c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000008 	.word	0x20000008
	...

080072b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072b0:	f3ef 8009 	mrs	r0, PSP
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	4b15      	ldr	r3, [pc, #84]	; (8007310 <pxCurrentTCBConst>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	f01e 0f10 	tst.w	lr, #16
 80072c0:	bf08      	it	eq
 80072c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6010      	str	r0, [r2, #0]
 80072cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072d4:	f380 8811 	msr	BASEPRI, r0
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f7ff fcc0 	bl	8006c64 <vTaskSwitchContext>
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f380 8811 	msr	BASEPRI, r0
 80072ec:	bc09      	pop	{r0, r3}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f6:	f01e 0f10 	tst.w	lr, #16
 80072fa:	bf08      	it	eq
 80072fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007300:	f380 8809 	msr	PSP, r0
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst>:
 8007310:	20000210 	.word	0x20000210
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	607b      	str	r3, [r7, #4]
}
 8007330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007332:	f7ff fbdf 	bl	8006af4 <xTaskIncrementTick>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <SysTick_Handler+0x40>)
 800733e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	2300      	movs	r3, #0
 8007346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	f383 8811 	msr	BASEPRI, r3
}
 800734e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007360:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007366:	4b0b      	ldr	r3, [pc, #44]	; (8007394 <vPortSetupTimerInterrupt+0x38>)
 8007368:	2200      	movs	r2, #0
 800736a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <vPortSetupTimerInterrupt+0x3c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <vPortSetupTimerInterrupt+0x40>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	4a09      	ldr	r2, [pc, #36]	; (80073a0 <vPortSetupTimerInterrupt+0x44>)
 800737a:	3b01      	subs	r3, #1
 800737c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800737e:	4b04      	ldr	r3, [pc, #16]	; (8007390 <vPortSetupTimerInterrupt+0x34>)
 8007380:	2207      	movs	r2, #7
 8007382:	601a      	str	r2, [r3, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	e000e010 	.word	0xe000e010
 8007394:	e000e018 	.word	0xe000e018
 8007398:	20000018 	.word	0x20000018
 800739c:	10624dd3 	.word	0x10624dd3
 80073a0:	e000e014 	.word	0xe000e014

080073a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80073b4 <vPortEnableVFP+0x10>
 80073a8:	6801      	ldr	r1, [r0, #0]
 80073aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073ae:	6001      	str	r1, [r0, #0]
 80073b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073b2:	bf00      	nop
 80073b4:	e000ed88 	.word	0xe000ed88

080073b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b08a      	sub	sp, #40	; 0x28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073c4:	f7ff faec 	bl	80069a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073c8:	4b5b      	ldr	r3, [pc, #364]	; (8007538 <pvPortMalloc+0x180>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073d0:	f000 f920 	bl	8007614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073d4:	4b59      	ldr	r3, [pc, #356]	; (800753c <pvPortMalloc+0x184>)
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8093 	bne.w	8007508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d01d      	beq.n	8007424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80073e8:	2208      	movs	r2, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4413      	add	r3, r2
 80073ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d014      	beq.n	8007424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f023 0307 	bic.w	r3, r3, #7
 8007400:	3308      	adds	r3, #8
 8007402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f003 0307 	and.w	r3, r3, #7
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <pvPortMalloc+0x6c>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	617b      	str	r3, [r7, #20]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d06e      	beq.n	8007508 <pvPortMalloc+0x150>
 800742a:	4b45      	ldr	r3, [pc, #276]	; (8007540 <pvPortMalloc+0x188>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d869      	bhi.n	8007508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007434:	4b43      	ldr	r3, [pc, #268]	; (8007544 <pvPortMalloc+0x18c>)
 8007436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007438:	4b42      	ldr	r3, [pc, #264]	; (8007544 <pvPortMalloc+0x18c>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800743e:	e004      	b.n	800744a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	429a      	cmp	r2, r3
 8007452:	d903      	bls.n	800745c <pvPortMalloc+0xa4>
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f1      	bne.n	8007440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800745c:	4b36      	ldr	r3, [pc, #216]	; (8007538 <pvPortMalloc+0x180>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007462:	429a      	cmp	r2, r3
 8007464:	d050      	beq.n	8007508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2208      	movs	r2, #8
 800746c:	4413      	add	r3, r2
 800746e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	2308      	movs	r3, #8
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	429a      	cmp	r2, r3
 8007486:	d91f      	bls.n	80074c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <pvPortMalloc+0xf8>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	613b      	str	r3, [r7, #16]
}
 80074ac:	bf00      	nop
 80074ae:	e7fe      	b.n	80074ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	1ad2      	subs	r2, r2, r3
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074c2:	69b8      	ldr	r0, [r7, #24]
 80074c4:	f000 f908 	bl	80076d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074c8:	4b1d      	ldr	r3, [pc, #116]	; (8007540 <pvPortMalloc+0x188>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <pvPortMalloc+0x188>)
 80074d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074d6:	4b1a      	ldr	r3, [pc, #104]	; (8007540 <pvPortMalloc+0x188>)
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <pvPortMalloc+0x190>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d203      	bcs.n	80074ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074e2:	4b17      	ldr	r3, [pc, #92]	; (8007540 <pvPortMalloc+0x188>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a18      	ldr	r2, [pc, #96]	; (8007548 <pvPortMalloc+0x190>)
 80074e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <pvPortMalloc+0x184>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	2200      	movs	r2, #0
 80074fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074fe:	4b13      	ldr	r3, [pc, #76]	; (800754c <pvPortMalloc+0x194>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3301      	adds	r3, #1
 8007504:	4a11      	ldr	r2, [pc, #68]	; (800754c <pvPortMalloc+0x194>)
 8007506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007508:	f7ff fa58 	bl	80069bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <pvPortMalloc+0x174>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60fb      	str	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <pvPortMalloc+0x172>
	return pvReturn;
 800752c:	69fb      	ldr	r3, [r7, #28]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3728      	adds	r7, #40	; 0x28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000f04 	.word	0x20000f04
 800753c:	20000f18 	.word	0x20000f18
 8007540:	20000f08 	.word	0x20000f08
 8007544:	20000efc 	.word	0x20000efc
 8007548:	20000f0c 	.word	0x20000f0c
 800754c:	20000f10 	.word	0x20000f10

08007550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d04d      	beq.n	80075fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007562:	2308      	movs	r3, #8
 8007564:	425b      	negs	r3, r3
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	4413      	add	r3, r2
 800756a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	4b24      	ldr	r3, [pc, #144]	; (8007608 <vPortFree+0xb8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4013      	ands	r3, r2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10a      	bne.n	8007594 <vPortFree+0x44>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	60fb      	str	r3, [r7, #12]
}
 8007590:	bf00      	nop
 8007592:	e7fe      	b.n	8007592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <vPortFree+0x62>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60bb      	str	r3, [r7, #8]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	685a      	ldr	r2, [r3, #4]
 80075b6:	4b14      	ldr	r3, [pc, #80]	; (8007608 <vPortFree+0xb8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d01e      	beq.n	80075fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d11a      	bne.n	80075fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <vPortFree+0xb8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	401a      	ands	r2, r3
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80075d8:	f7ff f9e2 	bl	80069a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	4b0a      	ldr	r3, [pc, #40]	; (800760c <vPortFree+0xbc>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4413      	add	r3, r2
 80075e6:	4a09      	ldr	r2, [pc, #36]	; (800760c <vPortFree+0xbc>)
 80075e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075ea:	6938      	ldr	r0, [r7, #16]
 80075ec:	f000 f874 	bl	80076d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075f0:	4b07      	ldr	r3, [pc, #28]	; (8007610 <vPortFree+0xc0>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	4a06      	ldr	r2, [pc, #24]	; (8007610 <vPortFree+0xc0>)
 80075f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075fa:	f7ff f9df 	bl	80069bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075fe:	bf00      	nop
 8007600:	3718      	adds	r7, #24
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	20000f18 	.word	0x20000f18
 800760c:	20000f08 	.word	0x20000f08
 8007610:	20000f14 	.word	0x20000f14

08007614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800761a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800761e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007620:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <prvHeapInit+0xac>)
 8007622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00c      	beq.n	8007648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3307      	adds	r3, #7
 8007632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0307 	bic.w	r3, r3, #7
 800763a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <prvHeapInit+0xac>)
 8007644:	4413      	add	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <prvHeapInit+0xb0>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007652:	4b1c      	ldr	r3, [pc, #112]	; (80076c4 <prvHeapInit+0xb0>)
 8007654:	2200      	movs	r2, #0
 8007656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	4413      	add	r3, r2
 800765e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007660:	2208      	movs	r2, #8
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a15      	ldr	r2, [pc, #84]	; (80076c8 <prvHeapInit+0xb4>)
 8007674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007676:	4b14      	ldr	r3, [pc, #80]	; (80076c8 <prvHeapInit+0xb4>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2200      	movs	r2, #0
 800767c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800767e:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <prvHeapInit+0xb4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	1ad2      	subs	r2, r2, r3
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <prvHeapInit+0xb4>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <prvHeapInit+0xb8>)
 80076a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	4a09      	ldr	r2, [pc, #36]	; (80076d0 <prvHeapInit+0xbc>)
 80076aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076ac:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <prvHeapInit+0xc0>)
 80076ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076b2:	601a      	str	r2, [r3, #0]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	20000344 	.word	0x20000344
 80076c4:	20000efc 	.word	0x20000efc
 80076c8:	20000f04 	.word	0x20000f04
 80076cc:	20000f0c 	.word	0x20000f0c
 80076d0:	20000f08 	.word	0x20000f08
 80076d4:	20000f18 	.word	0x20000f18

080076d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80076e0:	4b28      	ldr	r3, [pc, #160]	; (8007784 <prvInsertBlockIntoFreeList+0xac>)
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e002      	b.n	80076ec <prvInsertBlockIntoFreeList+0x14>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d8f7      	bhi.n	80076e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d108      	bne.n	800771a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	685a      	ldr	r2, [r3, #4]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	441a      	add	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d118      	bne.n	8007760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	4b15      	ldr	r3, [pc, #84]	; (8007788 <prvInsertBlockIntoFreeList+0xb0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	429a      	cmp	r2, r3
 8007738:	d00d      	beq.n	8007756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	441a      	add	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	e008      	b.n	8007768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvInsertBlockIntoFreeList+0xb0>)
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	e003      	b.n	8007768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d002      	beq.n	8007776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	20000efc 	.word	0x20000efc
 8007788:	20000f04 	.word	0x20000f04

0800778c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4a07      	ldr	r2, [pc, #28]	; (80077b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800779c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4a06      	ldr	r2, [pc, #24]	; (80077bc <vApplicationGetIdleTaskMemory+0x30>)
 80077a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2280      	movs	r2, #128	; 0x80
 80077a8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	20000f1c 	.word	0x20000f1c
 80077bc:	20000f70 	.word	0x20000f70

080077c0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80077c8:	1d39      	adds	r1, r7, #4
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077ce:	2201      	movs	r2, #1
 80077d0:	4803      	ldr	r0, [pc, #12]	; (80077e0 <__io_putchar+0x20>)
 80077d2:	f7fd fe6b 	bl	80054ac <HAL_UART_Transmit>
  return ch;
 80077d6:	687b      	ldr	r3, [r7, #4]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	200012e4 	.word	0x200012e4

080077e4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 80077ee:	4b0b      	ldr	r3, [pc, #44]	; (800781c <__io_getchar+0x38>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2208      	movs	r2, #8
 80077f4:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80077f6:	1df9      	adds	r1, r7, #7
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fc:	2201      	movs	r2, #1
 80077fe:	4807      	ldr	r0, [pc, #28]	; (800781c <__io_getchar+0x38>)
 8007800:	f7fd feeb 	bl	80055da <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8007804:	1df9      	adds	r1, r7, #7
 8007806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800780a:	2201      	movs	r2, #1
 800780c:	4803      	ldr	r0, [pc, #12]	; (800781c <__io_getchar+0x38>)
 800780e:	f7fd fe4d 	bl	80054ac <HAL_UART_Transmit>
  return ch;
 8007812:	79fb      	ldrb	r3, [r7, #7]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200012e4 	.word	0x200012e4

08007820 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	80fb      	strh	r3, [r7, #6]
	sprintf(buffer, "Interrupt \n\r");
 800782a:	4926      	ldr	r1, [pc, #152]	; (80078c4 <HAL_GPIO_EXTI_Callback+0xa4>)
 800782c:	4826      	ldr	r0, [pc, #152]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800782e:	f002 fb27 	bl	8009e80 <siprintf>
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007838:	d140      	bne.n	80078bc <HAL_GPIO_EXTI_Callback+0x9c>
		sprintf(buffer, "Button Pressed. \n\r");
 800783a:	4924      	ldr	r1, [pc, #144]	; (80078cc <HAL_GPIO_EXTI_Callback+0xac>)
 800783c:	4822      	ldr	r0, [pc, #136]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800783e:	f002 fb1f 	bl	8009e80 <siprintf>
		HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8007842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007846:	4822      	ldr	r0, [pc, #136]	; (80078d0 <HAL_GPIO_EXTI_Callback+0xb0>)
 8007848:	f7fb fc16 	bl	8003078 <HAL_GPIO_TogglePin>
		mode = (mode+1)%2;
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	bfb8      	it	lt
 800785a:	425b      	neglt	r3, r3
 800785c:	b2da      	uxtb	r2, r3
 800785e:	4b1d      	ldr	r3, [pc, #116]	; (80078d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8007860:	701a      	strb	r2, [r3, #0]
		if (mode == 1) {
 8007862:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <HAL_GPIO_EXTI_Callback+0xb4>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d114      	bne.n	8007894 <HAL_GPIO_EXTI_Callback+0x74>
			sprintf(buffer, "Taking input Morse input (array), displaying letter to terminal. \n\r");
 800786a:	491b      	ldr	r1, [pc, #108]	; (80078d8 <HAL_GPIO_EXTI_Callback+0xb8>)
 800786c:	4816      	ldr	r0, [pc, #88]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800786e:	f002 fb07 	bl	8009e80 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8007872:	230a      	movs	r3, #10
 8007874:	2232      	movs	r2, #50	; 0x32
 8007876:	4914      	ldr	r1, [pc, #80]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8007878:	4818      	ldr	r0, [pc, #96]	; (80078dc <HAL_GPIO_EXTI_Callback+0xbc>)
 800787a:	f7fd fe17 	bl	80054ac <HAL_UART_Transmit>
			sprintf(buffer, "Press one more letter to end current translation. \n\r");
 800787e:	4918      	ldr	r1, [pc, #96]	; (80078e0 <HAL_GPIO_EXTI_Callback+0xc0>)
 8007880:	4811      	ldr	r0, [pc, #68]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8007882:	f002 fafd 	bl	8009e80 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8007886:	230a      	movs	r3, #10
 8007888:	2232      	movs	r2, #50	; 0x32
 800788a:	490f      	ldr	r1, [pc, #60]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 800788c:	4813      	ldr	r0, [pc, #76]	; (80078dc <HAL_GPIO_EXTI_Callback+0xbc>)
 800788e:	f7fd fe0d 	bl	80054ac <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
			sprintf(buffer, "Press the spacebar to end current translation. \n\r");
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
		}
	}
}
 8007892:	e013      	b.n	80078bc <HAL_GPIO_EXTI_Callback+0x9c>
			sprintf(buffer, "Taking letter input from terminal, outputting Morse. \n\r");
 8007894:	4913      	ldr	r1, [pc, #76]	; (80078e4 <HAL_GPIO_EXTI_Callback+0xc4>)
 8007896:	480c      	ldr	r0, [pc, #48]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 8007898:	f002 faf2 	bl	8009e80 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 800789c:	230a      	movs	r3, #10
 800789e:	2232      	movs	r2, #50	; 0x32
 80078a0:	4909      	ldr	r1, [pc, #36]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80078a2:	480e      	ldr	r0, [pc, #56]	; (80078dc <HAL_GPIO_EXTI_Callback+0xbc>)
 80078a4:	f7fd fe02 	bl	80054ac <HAL_UART_Transmit>
			sprintf(buffer, "Press the spacebar to end current translation. \n\r");
 80078a8:	490f      	ldr	r1, [pc, #60]	; (80078e8 <HAL_GPIO_EXTI_Callback+0xc8>)
 80078aa:	4807      	ldr	r0, [pc, #28]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80078ac:	f002 fae8 	bl	8009e80 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 80078b0:	230a      	movs	r3, #10
 80078b2:	2232      	movs	r2, #50	; 0x32
 80078b4:	4904      	ldr	r1, [pc, #16]	; (80078c8 <HAL_GPIO_EXTI_Callback+0xa8>)
 80078b6:	4809      	ldr	r0, [pc, #36]	; (80078dc <HAL_GPIO_EXTI_Callback+0xbc>)
 80078b8:	f7fd fdf8 	bl	80054ac <HAL_UART_Transmit>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	0800e2f8 	.word	0x0800e2f8
 80078c8:	200013ec 	.word	0x200013ec
 80078cc:	0800e308 	.word	0x0800e308
 80078d0:	48000400 	.word	0x48000400
 80078d4:	20001388 	.word	0x20001388
 80078d8:	0800e31c 	.word	0x0800e31c
 80078dc:	200012e4 	.word	0x200012e4
 80078e0:	0800e360 	.word	0x0800e360
 80078e4:	0800e398 	.word	0x0800e398
 80078e8:	0800e3d0 	.word	0x0800e3d0

080078ec <updateMorseLetter>:


/**
 * Update global variables for the Morse array based on the inputted letter
 */
void updateMorseLetter(char letter){
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	71fb      	strb	r3, [r7, #7]

	// \0s for space
	morseLetterSize = 4;
 80078f6:	4bb6      	ldr	r3, [pc, #728]	; (8007bd0 <updateMorseLetter+0x2e4>)
 80078f8:	2204      	movs	r2, #4
 80078fa:	601a      	str	r2, [r3, #0]
	morseLetter[0] = '\0'; morseLetter[1] = '\0'; morseLetter[2] = '\0'; morseLetter[3] = '\0';
 80078fc:	4bb5      	ldr	r3, [pc, #724]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80078fe:	2200      	movs	r2, #0
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	4bb4      	ldr	r3, [pc, #720]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007904:	2200      	movs	r2, #0
 8007906:	705a      	strb	r2, [r3, #1]
 8007908:	4bb2      	ldr	r3, [pc, #712]	; (8007bd4 <updateMorseLetter+0x2e8>)
 800790a:	2200      	movs	r2, #0
 800790c:	709a      	strb	r2, [r3, #2]
 800790e:	4bb1      	ldr	r3, [pc, #708]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007910:	2200      	movs	r2, #0
 8007912:	70da      	strb	r2, [r3, #3]
	switch (letter)
 8007914:	79fb      	ldrb	r3, [r7, #7]
 8007916:	3b61      	subs	r3, #97	; 0x61
 8007918:	2b19      	cmp	r3, #25
 800791a:	f200 819a 	bhi.w	8007c52 <updateMorseLetter+0x366>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <updateMorseLetter+0x38>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	0800798d 	.word	0x0800798d
 8007928:	080079a1 	.word	0x080079a1
 800792c:	080079c1 	.word	0x080079c1
 8007930:	080079e1 	.word	0x080079e1
 8007934:	080079fb 	.word	0x080079fb
 8007938:	08007a09 	.word	0x08007a09
 800793c:	08007a29 	.word	0x08007a29
 8007940:	08007a43 	.word	0x08007a43
 8007944:	08007a63 	.word	0x08007a63
 8007948:	08007a77 	.word	0x08007a77
 800794c:	08007a97 	.word	0x08007a97
 8007950:	08007ab1 	.word	0x08007ab1
 8007954:	08007ad1 	.word	0x08007ad1
 8007958:	08007ae5 	.word	0x08007ae5
 800795c:	08007af9 	.word	0x08007af9
 8007960:	08007b13 	.word	0x08007b13
 8007964:	08007b33 	.word	0x08007b33
 8007968:	08007b53 	.word	0x08007b53
 800796c:	08007b6d 	.word	0x08007b6d
 8007970:	08007b87 	.word	0x08007b87
 8007974:	08007b95 	.word	0x08007b95
 8007978:	08007baf 	.word	0x08007baf
 800797c:	08007bd9 	.word	0x08007bd9
 8007980:	08007bf3 	.word	0x08007bf3
 8007984:	08007c13 	.word	0x08007c13
 8007988:	08007c33 	.word	0x08007c33
	{
		case 'a':
			morseLetter[0] = '.'; morseLetter[1] = '-';
 800798c:	4b91      	ldr	r3, [pc, #580]	; (8007bd4 <updateMorseLetter+0x2e8>)
 800798e:	222e      	movs	r2, #46	; 0x2e
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	4b90      	ldr	r3, [pc, #576]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007994:	222d      	movs	r2, #45	; 0x2d
 8007996:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007998:	4b8d      	ldr	r3, [pc, #564]	; (8007bd0 <updateMorseLetter+0x2e4>)
 800799a:	2202      	movs	r2, #2
 800799c:	601a      	str	r2, [r3, #0]
			break;
 800799e:	e158      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'b':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 80079a0:	4b8c      	ldr	r3, [pc, #560]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079a2:	222d      	movs	r2, #45	; 0x2d
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	4b8b      	ldr	r3, [pc, #556]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079a8:	222e      	movs	r2, #46	; 0x2e
 80079aa:	705a      	strb	r2, [r3, #1]
 80079ac:	4b89      	ldr	r3, [pc, #548]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079ae:	222e      	movs	r2, #46	; 0x2e
 80079b0:	709a      	strb	r2, [r3, #2]
 80079b2:	4b88      	ldr	r3, [pc, #544]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079b4:	222e      	movs	r2, #46	; 0x2e
 80079b6:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80079b8:	4b85      	ldr	r3, [pc, #532]	; (8007bd0 <updateMorseLetter+0x2e4>)
 80079ba:	2204      	movs	r2, #4
 80079bc:	601a      	str	r2, [r3, #0]
			break;
 80079be:	e148      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'c':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 80079c0:	4b84      	ldr	r3, [pc, #528]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079c2:	222d      	movs	r2, #45	; 0x2d
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	4b83      	ldr	r3, [pc, #524]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079c8:	222e      	movs	r2, #46	; 0x2e
 80079ca:	705a      	strb	r2, [r3, #1]
 80079cc:	4b81      	ldr	r3, [pc, #516]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079ce:	222d      	movs	r2, #45	; 0x2d
 80079d0:	709a      	strb	r2, [r3, #2]
 80079d2:	4b80      	ldr	r3, [pc, #512]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079d4:	222e      	movs	r2, #46	; 0x2e
 80079d6:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80079d8:	4b7d      	ldr	r3, [pc, #500]	; (8007bd0 <updateMorseLetter+0x2e4>)
 80079da:	2204      	movs	r2, #4
 80079dc:	601a      	str	r2, [r3, #0]
			break;
 80079de:	e138      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'd':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.';
 80079e0:	4b7c      	ldr	r3, [pc, #496]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079e2:	222d      	movs	r2, #45	; 0x2d
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	4b7b      	ldr	r3, [pc, #492]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079e8:	222e      	movs	r2, #46	; 0x2e
 80079ea:	705a      	strb	r2, [r3, #1]
 80079ec:	4b79      	ldr	r3, [pc, #484]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079ee:	222e      	movs	r2, #46	; 0x2e
 80079f0:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 80079f2:	4b77      	ldr	r3, [pc, #476]	; (8007bd0 <updateMorseLetter+0x2e4>)
 80079f4:	2203      	movs	r2, #3
 80079f6:	601a      	str	r2, [r3, #0]
			break;
 80079f8:	e12b      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'e':
			morseLetter[0] = '.';
 80079fa:	4b76      	ldr	r3, [pc, #472]	; (8007bd4 <updateMorseLetter+0x2e8>)
 80079fc:	222e      	movs	r2, #46	; 0x2e
 80079fe:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 8007a00:	4b73      	ldr	r3, [pc, #460]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
			break;
 8007a06:	e124      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'f':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8007a08:	4b72      	ldr	r3, [pc, #456]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a0a:	222e      	movs	r2, #46	; 0x2e
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	4b71      	ldr	r3, [pc, #452]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a10:	222e      	movs	r2, #46	; 0x2e
 8007a12:	705a      	strb	r2, [r3, #1]
 8007a14:	4b6f      	ldr	r3, [pc, #444]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a16:	222d      	movs	r2, #45	; 0x2d
 8007a18:	709a      	strb	r2, [r3, #2]
 8007a1a:	4b6e      	ldr	r3, [pc, #440]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a1c:	222e      	movs	r2, #46	; 0x2e
 8007a1e:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007a20:	4b6b      	ldr	r3, [pc, #428]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007a22:	2204      	movs	r2, #4
 8007a24:	601a      	str	r2, [r3, #0]
			break;
 8007a26:	e114      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'g':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8007a28:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a2a:	222d      	movs	r2, #45	; 0x2d
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	4b69      	ldr	r3, [pc, #420]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a30:	222d      	movs	r2, #45	; 0x2d
 8007a32:	705a      	strb	r2, [r3, #1]
 8007a34:	4b67      	ldr	r3, [pc, #412]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a36:	222e      	movs	r2, #46	; 0x2e
 8007a38:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007a3a:	4b65      	ldr	r3, [pc, #404]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	601a      	str	r2, [r3, #0]
			break;
 8007a40:	e107      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'h':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8007a42:	4b64      	ldr	r3, [pc, #400]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a44:	222e      	movs	r2, #46	; 0x2e
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	4b62      	ldr	r3, [pc, #392]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a4a:	222e      	movs	r2, #46	; 0x2e
 8007a4c:	705a      	strb	r2, [r3, #1]
 8007a4e:	4b61      	ldr	r3, [pc, #388]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a50:	222e      	movs	r2, #46	; 0x2e
 8007a52:	709a      	strb	r2, [r3, #2]
 8007a54:	4b5f      	ldr	r3, [pc, #380]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a56:	222e      	movs	r2, #46	; 0x2e
 8007a58:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007a5a:	4b5d      	ldr	r3, [pc, #372]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	601a      	str	r2, [r3, #0]
			break;
 8007a60:	e0f7      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'i':
			morseLetter[0] = '.'; morseLetter[1] = '.';
 8007a62:	4b5c      	ldr	r3, [pc, #368]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a64:	222e      	movs	r2, #46	; 0x2e
 8007a66:	701a      	strb	r2, [r3, #0]
 8007a68:	4b5a      	ldr	r3, [pc, #360]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a6a:	222e      	movs	r2, #46	; 0x2e
 8007a6c:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007a6e:	4b58      	ldr	r3, [pc, #352]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007a70:	2202      	movs	r2, #2
 8007a72:	601a      	str	r2, [r3, #0]
			break;
 8007a74:	e0ed      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'j':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8007a76:	4b57      	ldr	r3, [pc, #348]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a78:	222e      	movs	r2, #46	; 0x2e
 8007a7a:	701a      	strb	r2, [r3, #0]
 8007a7c:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a7e:	222d      	movs	r2, #45	; 0x2d
 8007a80:	705a      	strb	r2, [r3, #1]
 8007a82:	4b54      	ldr	r3, [pc, #336]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a84:	222d      	movs	r2, #45	; 0x2d
 8007a86:	709a      	strb	r2, [r3, #2]
 8007a88:	4b52      	ldr	r3, [pc, #328]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a8a:	222d      	movs	r2, #45	; 0x2d
 8007a8c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007a8e:	4b50      	ldr	r3, [pc, #320]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007a90:	2204      	movs	r2, #4
 8007a92:	601a      	str	r2, [r3, #0]
			break;
 8007a94:	e0dd      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'k':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8007a96:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a98:	222d      	movs	r2, #45	; 0x2d
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	4b4d      	ldr	r3, [pc, #308]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007a9e:	222e      	movs	r2, #46	; 0x2e
 8007aa0:	705a      	strb	r2, [r3, #1]
 8007aa2:	4b4c      	ldr	r3, [pc, #304]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007aa4:	222d      	movs	r2, #45	; 0x2d
 8007aa6:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007aa8:	4b49      	ldr	r3, [pc, #292]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007aaa:	2203      	movs	r2, #3
 8007aac:	601a      	str	r2, [r3, #0]
			break;
 8007aae:	e0d0      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'l':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8007ab0:	4b48      	ldr	r3, [pc, #288]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ab2:	222e      	movs	r2, #46	; 0x2e
 8007ab4:	701a      	strb	r2, [r3, #0]
 8007ab6:	4b47      	ldr	r3, [pc, #284]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ab8:	222d      	movs	r2, #45	; 0x2d
 8007aba:	705a      	strb	r2, [r3, #1]
 8007abc:	4b45      	ldr	r3, [pc, #276]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007abe:	222e      	movs	r2, #46	; 0x2e
 8007ac0:	709a      	strb	r2, [r3, #2]
 8007ac2:	4b44      	ldr	r3, [pc, #272]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ac4:	222e      	movs	r2, #46	; 0x2e
 8007ac6:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007ac8:	4b41      	ldr	r3, [pc, #260]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007aca:	2204      	movs	r2, #4
 8007acc:	601a      	str	r2, [r3, #0]
			break;
 8007ace:	e0c0      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'm':
			morseLetter[0] = '-'; morseLetter[1] = '-';
 8007ad0:	4b40      	ldr	r3, [pc, #256]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ad2:	222d      	movs	r2, #45	; 0x2d
 8007ad4:	701a      	strb	r2, [r3, #0]
 8007ad6:	4b3f      	ldr	r3, [pc, #252]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ad8:	222d      	movs	r2, #45	; 0x2d
 8007ada:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007adc:	4b3c      	ldr	r3, [pc, #240]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007ade:	2202      	movs	r2, #2
 8007ae0:	601a      	str	r2, [r3, #0]
			break;
 8007ae2:	e0b6      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'n':
			morseLetter[0] = '-'; morseLetter[1] = '.';
 8007ae4:	4b3b      	ldr	r3, [pc, #236]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ae6:	222d      	movs	r2, #45	; 0x2d
 8007ae8:	701a      	strb	r2, [r3, #0]
 8007aea:	4b3a      	ldr	r3, [pc, #232]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007aec:	222e      	movs	r2, #46	; 0x2e
 8007aee:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007af0:	4b37      	ldr	r3, [pc, #220]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007af2:	2202      	movs	r2, #2
 8007af4:	601a      	str	r2, [r3, #0]
			break;
 8007af6:	e0ac      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'o':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '-';
 8007af8:	4b36      	ldr	r3, [pc, #216]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007afa:	222d      	movs	r2, #45	; 0x2d
 8007afc:	701a      	strb	r2, [r3, #0]
 8007afe:	4b35      	ldr	r3, [pc, #212]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b00:	222d      	movs	r2, #45	; 0x2d
 8007b02:	705a      	strb	r2, [r3, #1]
 8007b04:	4b33      	ldr	r3, [pc, #204]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b06:	222d      	movs	r2, #45	; 0x2d
 8007b08:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007b0a:	4b31      	ldr	r3, [pc, #196]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	601a      	str	r2, [r3, #0]
			break;
 8007b10:	e09f      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'p':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8007b12:	4b30      	ldr	r3, [pc, #192]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b14:	222e      	movs	r2, #46	; 0x2e
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	4b2e      	ldr	r3, [pc, #184]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b1a:	222d      	movs	r2, #45	; 0x2d
 8007b1c:	705a      	strb	r2, [r3, #1]
 8007b1e:	4b2d      	ldr	r3, [pc, #180]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b20:	222d      	movs	r2, #45	; 0x2d
 8007b22:	709a      	strb	r2, [r3, #2]
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b26:	222e      	movs	r2, #46	; 0x2e
 8007b28:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007b2a:	4b29      	ldr	r3, [pc, #164]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	601a      	str	r2, [r3, #0]
			break;
 8007b30:	e08f      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'q':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8007b32:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b34:	222d      	movs	r2, #45	; 0x2d
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	4b26      	ldr	r3, [pc, #152]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b3a:	222d      	movs	r2, #45	; 0x2d
 8007b3c:	705a      	strb	r2, [r3, #1]
 8007b3e:	4b25      	ldr	r3, [pc, #148]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b40:	222e      	movs	r2, #46	; 0x2e
 8007b42:	709a      	strb	r2, [r3, #2]
 8007b44:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b46:	222d      	movs	r2, #45	; 0x2d
 8007b48:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007b4a:	4b21      	ldr	r3, [pc, #132]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007b4c:	2204      	movs	r2, #4
 8007b4e:	601a      	str	r2, [r3, #0]
			break;
 8007b50:	e07f      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'r':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b54:	222e      	movs	r2, #46	; 0x2e
 8007b56:	701a      	strb	r2, [r3, #0]
 8007b58:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b5a:	222d      	movs	r2, #45	; 0x2d
 8007b5c:	705a      	strb	r2, [r3, #1]
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b60:	222e      	movs	r2, #46	; 0x2e
 8007b62:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007b64:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007b66:	2203      	movs	r2, #3
 8007b68:	601a      	str	r2, [r3, #0]
			break;
 8007b6a:	e072      	b.n	8007c52 <updateMorseLetter+0x366>
		case 's':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.';
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b6e:	222e      	movs	r2, #46	; 0x2e
 8007b70:	701a      	strb	r2, [r3, #0]
 8007b72:	4b18      	ldr	r3, [pc, #96]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b74:	222e      	movs	r2, #46	; 0x2e
 8007b76:	705a      	strb	r2, [r3, #1]
 8007b78:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b7a:	222e      	movs	r2, #46	; 0x2e
 8007b7c:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007b80:	2203      	movs	r2, #3
 8007b82:	601a      	str	r2, [r3, #0]
			break;
 8007b84:	e065      	b.n	8007c52 <updateMorseLetter+0x366>
		case 't':
			morseLetter[0] = '-';
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b88:	222d      	movs	r2, #45	; 0x2d
 8007b8a:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 8007b8c:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
			break;
 8007b92:	e05e      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'u':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8007b94:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b96:	222e      	movs	r2, #46	; 0x2e
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007b9c:	222e      	movs	r2, #46	; 0x2e
 8007b9e:	705a      	strb	r2, [r3, #1]
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007ba2:	222d      	movs	r2, #45	; 0x2d
 8007ba4:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007ba6:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007ba8:	2203      	movs	r2, #3
 8007baa:	601a      	str	r2, [r3, #0]
			break;
 8007bac:	e051      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'v':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8007bae:	4b09      	ldr	r3, [pc, #36]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007bb0:	222e      	movs	r2, #46	; 0x2e
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007bb6:	222e      	movs	r2, #46	; 0x2e
 8007bb8:	705a      	strb	r2, [r3, #1]
 8007bba:	4b06      	ldr	r3, [pc, #24]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007bbc:	222e      	movs	r2, #46	; 0x2e
 8007bbe:	709a      	strb	r2, [r3, #2]
 8007bc0:	4b04      	ldr	r3, [pc, #16]	; (8007bd4 <updateMorseLetter+0x2e8>)
 8007bc2:	222d      	movs	r2, #45	; 0x2d
 8007bc4:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007bc6:	4b02      	ldr	r3, [pc, #8]	; (8007bd0 <updateMorseLetter+0x2e4>)
 8007bc8:	2204      	movs	r2, #4
 8007bca:	601a      	str	r2, [r3, #0]
			break;
 8007bcc:	e041      	b.n	8007c52 <updateMorseLetter+0x366>
 8007bce:	bf00      	nop
 8007bd0:	20001380 	.word	0x20001380
 8007bd4:	20001384 	.word	0x20001384
		case 'w':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-';
 8007bd8:	4b21      	ldr	r3, [pc, #132]	; (8007c60 <updateMorseLetter+0x374>)
 8007bda:	222e      	movs	r2, #46	; 0x2e
 8007bdc:	701a      	strb	r2, [r3, #0]
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <updateMorseLetter+0x374>)
 8007be0:	222d      	movs	r2, #45	; 0x2d
 8007be2:	705a      	strb	r2, [r3, #1]
 8007be4:	4b1e      	ldr	r3, [pc, #120]	; (8007c60 <updateMorseLetter+0x374>)
 8007be6:	222d      	movs	r2, #45	; 0x2d
 8007be8:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007bea:	4b1e      	ldr	r3, [pc, #120]	; (8007c64 <updateMorseLetter+0x378>)
 8007bec:	2203      	movs	r2, #3
 8007bee:	601a      	str	r2, [r3, #0]
			break;
 8007bf0:	e02f      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'x':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8007bf2:	4b1b      	ldr	r3, [pc, #108]	; (8007c60 <updateMorseLetter+0x374>)
 8007bf4:	222d      	movs	r2, #45	; 0x2d
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	4b19      	ldr	r3, [pc, #100]	; (8007c60 <updateMorseLetter+0x374>)
 8007bfa:	222e      	movs	r2, #46	; 0x2e
 8007bfc:	705a      	strb	r2, [r3, #1]
 8007bfe:	4b18      	ldr	r3, [pc, #96]	; (8007c60 <updateMorseLetter+0x374>)
 8007c00:	222e      	movs	r2, #46	; 0x2e
 8007c02:	709a      	strb	r2, [r3, #2]
 8007c04:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <updateMorseLetter+0x374>)
 8007c06:	222d      	movs	r2, #45	; 0x2d
 8007c08:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007c0a:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <updateMorseLetter+0x378>)
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	601a      	str	r2, [r3, #0]
			break;
 8007c10:	e01f      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'y':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <updateMorseLetter+0x374>)
 8007c14:	222d      	movs	r2, #45	; 0x2d
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	4b11      	ldr	r3, [pc, #68]	; (8007c60 <updateMorseLetter+0x374>)
 8007c1a:	222e      	movs	r2, #46	; 0x2e
 8007c1c:	705a      	strb	r2, [r3, #1]
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <updateMorseLetter+0x374>)
 8007c20:	222d      	movs	r2, #45	; 0x2d
 8007c22:	709a      	strb	r2, [r3, #2]
 8007c24:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <updateMorseLetter+0x374>)
 8007c26:	222d      	movs	r2, #45	; 0x2d
 8007c28:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <updateMorseLetter+0x378>)
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	601a      	str	r2, [r3, #0]
			break;
 8007c30:	e00f      	b.n	8007c52 <updateMorseLetter+0x366>
		case 'z':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8007c32:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <updateMorseLetter+0x374>)
 8007c34:	222d      	movs	r2, #45	; 0x2d
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <updateMorseLetter+0x374>)
 8007c3a:	222d      	movs	r2, #45	; 0x2d
 8007c3c:	705a      	strb	r2, [r3, #1]
 8007c3e:	4b08      	ldr	r3, [pc, #32]	; (8007c60 <updateMorseLetter+0x374>)
 8007c40:	222e      	movs	r2, #46	; 0x2e
 8007c42:	709a      	strb	r2, [r3, #2]
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <updateMorseLetter+0x374>)
 8007c46:	222e      	movs	r2, #46	; 0x2e
 8007c48:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007c4a:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <updateMorseLetter+0x378>)
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	601a      	str	r2, [r3, #0]
	}
}
 8007c50:	e7ff      	b.n	8007c52 <updateMorseLetter+0x366>
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20001384 	.word	0x20001384
 8007c64:	20001380 	.word	0x20001380

08007c68 <printMorseLetter>:

/**
 * print the current Morse array to the serial terminal
 */
void printMorseLetter() {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	if (morseLetter[0] == '\0') {
 8007c6e:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <printMorseLetter+0x60>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10a      	bne.n	8007c8c <printMorseLetter+0x24>
		sprintf(buffer, " *space* ");
 8007c76:	4915      	ldr	r1, [pc, #84]	; (8007ccc <printMorseLetter+0x64>)
 8007c78:	4815      	ldr	r0, [pc, #84]	; (8007cd0 <printMorseLetter+0x68>)
 8007c7a:	f002 f901 	bl	8009e80 <siprintf>
		HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8007c7e:	230a      	movs	r3, #10
 8007c80:	2232      	movs	r2, #50	; 0x32
 8007c82:	4913      	ldr	r1, [pc, #76]	; (8007cd0 <printMorseLetter+0x68>)
 8007c84:	4813      	ldr	r0, [pc, #76]	; (8007cd4 <printMorseLetter+0x6c>)
 8007c86:	f7fd fc11 	bl	80054ac <HAL_UART_Transmit>
		for (int i = 0; i < morseLetterSize; i++){
			sprintf(buffer, "%c", morseLetter[i]);
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
		}
	}
}
 8007c8a:	e019      	b.n	8007cc0 <printMorseLetter+0x58>
		for (int i = 0; i < morseLetterSize; i++){
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	607b      	str	r3, [r7, #4]
 8007c90:	e011      	b.n	8007cb6 <printMorseLetter+0x4e>
			sprintf(buffer, "%c", morseLetter[i]);
 8007c92:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <printMorseLetter+0x60>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4413      	add	r3, r2
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	490e      	ldr	r1, [pc, #56]	; (8007cd8 <printMorseLetter+0x70>)
 8007c9e:	480c      	ldr	r0, [pc, #48]	; (8007cd0 <printMorseLetter+0x68>)
 8007ca0:	f002 f8ee 	bl	8009e80 <siprintf>
			HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8007ca4:	230a      	movs	r3, #10
 8007ca6:	2232      	movs	r2, #50	; 0x32
 8007ca8:	4909      	ldr	r1, [pc, #36]	; (8007cd0 <printMorseLetter+0x68>)
 8007caa:	480a      	ldr	r0, [pc, #40]	; (8007cd4 <printMorseLetter+0x6c>)
 8007cac:	f7fd fbfe 	bl	80054ac <HAL_UART_Transmit>
		for (int i = 0; i < morseLetterSize; i++){
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	607b      	str	r3, [r7, #4]
 8007cb6:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <printMorseLetter+0x74>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	dbe8      	blt.n	8007c92 <printMorseLetter+0x2a>
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20001384 	.word	0x20001384
 8007ccc:	0800e404 	.word	0x0800e404
 8007cd0:	200013ec 	.word	0x200013ec
 8007cd4:	200012e4 	.word	0x200012e4
 8007cd8:	0800e410 	.word	0x0800e410
 8007cdc:	20001380 	.word	0x20001380

08007ce0 <playMorseToSpeaker>:

/**
 * Play the current Morse array to the DAC speaker (and display on LED)
 */
void playMorseToSpeaker(char *morseArray, int morseArraySize) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af02      	add	r7, sp, #8
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < morseArraySize; i++) {
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	e055      	b.n	8007d9c <playMorseToSpeaker+0xbc>
		if (morseArray[i] == '.') {
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cfa:	d123      	bne.n	8007d44 <playMorseToSpeaker+0x64>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *beepArray, (uint32_t) beepArraySize, DAC_ALIGN_12B_R);
 8007cfc:	4b31      	ldr	r3, [pc, #196]	; (8007dc4 <playMorseToSpeaker+0xe4>)
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	4b31      	ldr	r3, [pc, #196]	; (8007dc8 <playMorseToSpeaker+0xe8>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4619      	mov	r1, r3
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	2100      	movs	r1, #0
 8007d10:	482e      	ldr	r0, [pc, #184]	; (8007dcc <playMorseToSpeaker+0xec>)
 8007d12:	f7fa f9d1 	bl	80020b8 <HAL_DAC_Start_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8007d16:	2120      	movs	r1, #32
 8007d18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d1c:	f7fb f9ac 	bl	8003078 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007d20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d24:	f7f9 f9b8 	bl	8001098 <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4828      	ldr	r0, [pc, #160]	; (8007dcc <playMorseToSpeaker+0xec>)
 8007d2c:	f7fa fa90 	bl	8002250 <HAL_DAC_Stop_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8007d30:	2120      	movs	r1, #32
 8007d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d36:	f7fb f99f 	bl	8003078 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007d3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d3e:	f7f9 f9ab 	bl	8001098 <HAL_Delay>
 8007d42:	e028      	b.n	8007d96 <playMorseToSpeaker+0xb6>
		} else if (morseArray[i] == '-') {
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	4413      	add	r3, r2
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b2d      	cmp	r3, #45	; 0x2d
 8007d4e:	d134      	bne.n	8007dba <playMorseToSpeaker+0xda>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *beepArray, (uint32_t) beepArraySize, DAC_ALIGN_12B_R);
 8007d50:	4b1c      	ldr	r3, [pc, #112]	; (8007dc4 <playMorseToSpeaker+0xe4>)
 8007d52:	881b      	ldrh	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b1c      	ldr	r3, [pc, #112]	; (8007dc8 <playMorseToSpeaker+0xe8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	460b      	mov	r3, r1
 8007d62:	2100      	movs	r1, #0
 8007d64:	4819      	ldr	r0, [pc, #100]	; (8007dcc <playMorseToSpeaker+0xec>)
 8007d66:	f7fa f9a7 	bl	80020b8 <HAL_DAC_Start_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8007d6a:	2120      	movs	r1, #32
 8007d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d70:	f7fb f982 	bl	8003078 <HAL_GPIO_TogglePin>
			HAL_Delay(600);
 8007d74:	f44f 7016 	mov.w	r0, #600	; 0x258
 8007d78:	f7f9 f98e 	bl	8001098 <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4813      	ldr	r0, [pc, #76]	; (8007dcc <playMorseToSpeaker+0xec>)
 8007d80:	f7fa fa66 	bl	8002250 <HAL_DAC_Stop_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8007d84:	2120      	movs	r1, #32
 8007d86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d8a:	f7fb f975 	bl	8003078 <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 8007d8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007d92:	f7f9 f981 	bl	8001098 <HAL_Delay>
	for (int i = 0; i < morseArraySize; i++) {
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	dba5      	blt.n	8007cf0 <playMorseToSpeaker+0x10>
		} else {
			return;
		}
	}
	sprintf(buffer, "\n\r");
 8007da4:	490a      	ldr	r1, [pc, #40]	; (8007dd0 <playMorseToSpeaker+0xf0>)
 8007da6:	480b      	ldr	r0, [pc, #44]	; (8007dd4 <playMorseToSpeaker+0xf4>)
 8007da8:	f002 f86a 	bl	8009e80 <siprintf>
	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8007dac:	230a      	movs	r3, #10
 8007dae:	2232      	movs	r2, #50	; 0x32
 8007db0:	4908      	ldr	r1, [pc, #32]	; (8007dd4 <playMorseToSpeaker+0xf4>)
 8007db2:	4809      	ldr	r0, [pc, #36]	; (8007dd8 <playMorseToSpeaker+0xf8>)
 8007db4:	f7fd fb7a 	bl	80054ac <HAL_UART_Transmit>
 8007db8:	e000      	b.n	8007dbc <playMorseToSpeaker+0xdc>
			return;
 8007dba:	bf00      	nop
}
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20001390 	.word	0x20001390
 8007dc8:	20000014 	.word	0x20000014
 8007dcc:	200011d8 	.word	0x200011d8
 8007dd0:	0800e414 	.word	0x0800e414
 8007dd4:	200013ec 	.word	0x200013ec
 8007dd8:	200012e4 	.word	0x200012e4

08007ddc <getLetterFromMorse>:

/**
 * Get a letter from the inputted Morse array
 */
char getLetterFromMorse(char *morseArray, int morseArraySize) {
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	char nullChar = '\0';
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
	if (morseArraySize == 0) {return nullChar;}
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <getLetterFromMorse+0x18>
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	e0bc      	b.n	8007f6e <getLetterFromMorse+0x192>
	switch (morseArray[0]) {
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	2b2d      	cmp	r3, #45	; 0x2d
 8007dfa:	d05e      	beq.n	8007eba <getLetterFromMorse+0xde>
 8007dfc:	2b2e      	cmp	r3, #46	; 0x2e
 8007dfe:	f040 80b5 	bne.w	8007f6c <getLetterFromMorse+0x190>
	case '.':
		if (morseArraySize == 1) {return 'E';}
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <getLetterFromMorse+0x30>
 8007e08:	2345      	movs	r3, #69	; 0x45
 8007e0a:	e0b0      	b.n	8007f6e <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b2d      	cmp	r3, #45	; 0x2d
 8007e14:	d029      	beq.n	8007e6a <getLetterFromMorse+0x8e>
 8007e16:	2b2e      	cmp	r3, #46	; 0x2e
 8007e18:	d14f      	bne.n	8007eba <getLetterFromMorse+0xde>
		case '.':
			if (morseArraySize == 2) {return 'I';}
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d101      	bne.n	8007e24 <getLetterFromMorse+0x48>
 8007e20:	2349      	movs	r3, #73	; 0x49
 8007e22:	e0a4      	b.n	8007f6e <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3302      	adds	r3, #2
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b2d      	cmp	r3, #45	; 0x2d
 8007e2c:	d011      	beq.n	8007e52 <getLetterFromMorse+0x76>
 8007e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e30:	d11b      	bne.n	8007e6a <getLetterFromMorse+0x8e>
			case '.':
				if (morseArraySize == 3) {return 'S';}
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2b03      	cmp	r3, #3
 8007e36:	d101      	bne.n	8007e3c <getLetterFromMorse+0x60>
 8007e38:	2353      	movs	r3, #83	; 0x53
 8007e3a:	e098      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3303      	adds	r3, #3
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	2b2d      	cmp	r3, #45	; 0x2d
 8007e44:	d003      	beq.n	8007e4e <getLetterFromMorse+0x72>
 8007e46:	2b2e      	cmp	r3, #46	; 0x2e
 8007e48:	d103      	bne.n	8007e52 <getLetterFromMorse+0x76>
				case '.':
					return 'H';
 8007e4a:	2348      	movs	r3, #72	; 0x48
 8007e4c:	e08f      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					return 'V';
 8007e4e:	2356      	movs	r3, #86	; 0x56
 8007e50:	e08d      	b.n	8007f6e <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'U';}
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d101      	bne.n	8007e5c <getLetterFromMorse+0x80>
 8007e58:	2355      	movs	r3, #85	; 0x55
 8007e5a:	e088      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3303      	adds	r3, #3
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	2b2e      	cmp	r3, #46	; 0x2e
 8007e64:	d101      	bne.n	8007e6a <getLetterFromMorse+0x8e>
				case '.':
					return 'F';
 8007e66:	2346      	movs	r3, #70	; 0x46
 8007e68:	e081      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					;
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'A';}
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d101      	bne.n	8007e74 <getLetterFromMorse+0x98>
 8007e70:	2341      	movs	r3, #65	; 0x41
 8007e72:	e07c      	b.n	8007f6e <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3302      	adds	r3, #2
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b2d      	cmp	r3, #45	; 0x2d
 8007e7c:	d00d      	beq.n	8007e9a <getLetterFromMorse+0xbe>
 8007e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e80:	d11b      	bne.n	8007eba <getLetterFromMorse+0xde>
			case '.':
				if (morseArraySize == 3) {return 'R';}
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d101      	bne.n	8007e8c <getLetterFromMorse+0xb0>
 8007e88:	2352      	movs	r3, #82	; 0x52
 8007e8a:	e070      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3303      	adds	r3, #3
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	2b2e      	cmp	r3, #46	; 0x2e
 8007e94:	d101      	bne.n	8007e9a <getLetterFromMorse+0xbe>
				case '.':
					return 'L';
 8007e96:	234c      	movs	r3, #76	; 0x4c
 8007e98:	e069      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					;
				}
			case '-':
				if (morseArraySize == 3) {return 'W';}
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d101      	bne.n	8007ea4 <getLetterFromMorse+0xc8>
 8007ea0:	2357      	movs	r3, #87	; 0x57
 8007ea2:	e064      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3303      	adds	r3, #3
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b2d      	cmp	r3, #45	; 0x2d
 8007eac:	d003      	beq.n	8007eb6 <getLetterFromMorse+0xda>
 8007eae:	2b2e      	cmp	r3, #46	; 0x2e
 8007eb0:	d103      	bne.n	8007eba <getLetterFromMorse+0xde>
				case '.':
					return 'P';
 8007eb2:	2350      	movs	r3, #80	; 0x50
 8007eb4:	e05b      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					return 'J';
 8007eb6:	234a      	movs	r3, #74	; 0x4a
 8007eb8:	e059      	b.n	8007f6e <getLetterFromMorse+0x192>
				}
			}
		}
	case '-':
		if (morseArraySize == 1) {return 'T';}
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <getLetterFromMorse+0xe8>
 8007ec0:	2354      	movs	r3, #84	; 0x54
 8007ec2:	e054      	b.n	8007f6e <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b2d      	cmp	r3, #45	; 0x2d
 8007ecc:	d02d      	beq.n	8007f2a <getLetterFromMorse+0x14e>
 8007ece:	2b2e      	cmp	r3, #46	; 0x2e
 8007ed0:	d14c      	bne.n	8007f6c <getLetterFromMorse+0x190>
		case '.':
			if (morseArraySize == 2) {return 'N';}
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d101      	bne.n	8007edc <getLetterFromMorse+0x100>
 8007ed8:	234e      	movs	r3, #78	; 0x4e
 8007eda:	e048      	b.n	8007f6e <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3302      	adds	r3, #2
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	2b2d      	cmp	r3, #45	; 0x2d
 8007ee4:	d011      	beq.n	8007f0a <getLetterFromMorse+0x12e>
 8007ee6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee8:	d11f      	bne.n	8007f2a <getLetterFromMorse+0x14e>
			case '.':
				if (morseArraySize == 3) {return 'D';}
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d101      	bne.n	8007ef4 <getLetterFromMorse+0x118>
 8007ef0:	2344      	movs	r3, #68	; 0x44
 8007ef2:	e03c      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3303      	adds	r3, #3
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b2d      	cmp	r3, #45	; 0x2d
 8007efc:	d003      	beq.n	8007f06 <getLetterFromMorse+0x12a>
 8007efe:	2b2e      	cmp	r3, #46	; 0x2e
 8007f00:	d103      	bne.n	8007f0a <getLetterFromMorse+0x12e>
				case '.':
					return 'B';
 8007f02:	2342      	movs	r3, #66	; 0x42
 8007f04:	e033      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					return 'X';
 8007f06:	2358      	movs	r3, #88	; 0x58
 8007f08:	e031      	b.n	8007f6e <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'K';}
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b03      	cmp	r3, #3
 8007f0e:	d101      	bne.n	8007f14 <getLetterFromMorse+0x138>
 8007f10:	234b      	movs	r3, #75	; 0x4b
 8007f12:	e02c      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3303      	adds	r3, #3
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b2d      	cmp	r3, #45	; 0x2d
 8007f1c:	d003      	beq.n	8007f26 <getLetterFromMorse+0x14a>
 8007f1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f20:	d103      	bne.n	8007f2a <getLetterFromMorse+0x14e>
				case '.':
					return 'C';
 8007f22:	2343      	movs	r3, #67	; 0x43
 8007f24:	e023      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					return 'Y';
 8007f26:	2359      	movs	r3, #89	; 0x59
 8007f28:	e021      	b.n	8007f6e <getLetterFromMorse+0x192>
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'M';}
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d101      	bne.n	8007f34 <getLetterFromMorse+0x158>
 8007f30:	234d      	movs	r3, #77	; 0x4d
 8007f32:	e01c      	b.n	8007f6e <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	3302      	adds	r3, #2
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b2d      	cmp	r3, #45	; 0x2d
 8007f3c:	d011      	beq.n	8007f62 <getLetterFromMorse+0x186>
 8007f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f40:	d114      	bne.n	8007f6c <getLetterFromMorse+0x190>
			case '.':
				if (morseArraySize == 3) {return 'G';}
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b03      	cmp	r3, #3
 8007f46:	d101      	bne.n	8007f4c <getLetterFromMorse+0x170>
 8007f48:	2347      	movs	r3, #71	; 0x47
 8007f4a:	e010      	b.n	8007f6e <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3303      	adds	r3, #3
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b2d      	cmp	r3, #45	; 0x2d
 8007f54:	d003      	beq.n	8007f5e <getLetterFromMorse+0x182>
 8007f56:	2b2e      	cmp	r3, #46	; 0x2e
 8007f58:	d103      	bne.n	8007f62 <getLetterFromMorse+0x186>
				case '.':
					return 'Z';
 8007f5a:	235a      	movs	r3, #90	; 0x5a
 8007f5c:	e007      	b.n	8007f6e <getLetterFromMorse+0x192>
				case '-':
					return 'Q';
 8007f5e:	2351      	movs	r3, #81	; 0x51
 8007f60:	e005      	b.n	8007f6e <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'O';}
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d101      	bne.n	8007f6c <getLetterFromMorse+0x190>
 8007f68:	234f      	movs	r3, #79	; 0x4f
 8007f6a:	e000      	b.n	8007f6e <getLetterFromMorse+0x192>
					;
				}
			}
		}
	}
	return nullChar;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007f7c:	b5b0      	push	{r4, r5, r7, lr}
 8007f7e:	b090      	sub	sp, #64	; 0x40
 8007f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	/*
	 * mode 0 for taking input from terminal, outputting Morse code
	 * mode 1 for taking input of array for Morse letter, displaying letter to terminal
	 */
mode = 0;
 8007f82:	4b55      	ldr	r3, [pc, #340]	; (80080d8 <main+0x15c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]


morseInputArray[0] = '\0';
 8007f88:	4b54      	ldr	r3, [pc, #336]	; (80080dc <main+0x160>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	701a      	strb	r2, [r3, #0]
morseInputArray[1] = '\0';
 8007f8e:	4b53      	ldr	r3, [pc, #332]	; (80080dc <main+0x160>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	705a      	strb	r2, [r3, #1]
morseInputArray[2] = '\0';
 8007f94:	4b51      	ldr	r3, [pc, #324]	; (80080dc <main+0x160>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	709a      	strb	r2, [r3, #2]
morseInputArray[3] = '\0';
 8007f9a:	4b50      	ldr	r3, [pc, #320]	; (80080dc <main+0x160>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	70da      	strb	r2, [r3, #3]
morseInputArraySize = 0;
 8007fa0:	4b4f      	ldr	r3, [pc, #316]	; (80080e0 <main+0x164>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]


notSpace = 1; // 1 is true
 8007fa6:	4b4f      	ldr	r3, [pc, #316]	; (80080e4 <main+0x168>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fac:	f7f9 f83c 	bl	8001028 <HAL_Init>

  /* USER CODE BEGIN Init */
  // for scanf
  setvbuf(stdin, NULL, _IONBF, 0);
 8007fb0:	4b4d      	ldr	r3, [pc, #308]	; (80080e8 <main+0x16c>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6858      	ldr	r0, [r3, #4]
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2202      	movs	r2, #2
 8007fba:	2100      	movs	r1, #0
 8007fbc:	f001 fe94 	bl	8009ce8 <setvbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fc0:	f000 f8b0 	bl	8008124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fc4:	f000 faae 	bl	8008524 <MX_GPIO_Init>
  MX_DMA_Init();
 8007fc8:	f000 fa82 	bl	80084d0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8007fcc:	f000 fa34 	bl	8008438 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8007fd0:	f000 f960 	bl	8008294 <MX_DAC1_Init>
  MX_TIM2_Init();
 8007fd4:	f000 f992 	bl	80082fc <MX_TIM2_Init>
  MX_ADC1_Init();
 8007fd8:	f000 f8f6 	bl	80081c8 <MX_ADC1_Init>
  MX_TIM5_Init();
 8007fdc:	f000 f9dc 	bl	8008398 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 8007fe0:	4842      	ldr	r0, [pc, #264]	; (80080ec <main+0x170>)
 8007fe2:	f7fc fdb9 	bl	8004b58 <HAL_TIM_Base_Start_IT>

  /*
   * Initialize beeps
   */
  for (int i = 0; i < beepArraySize; i++) {
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fea:	e02a      	b.n	8008042 <main+0xc6>
	  beepArray[i] = (arm_sin_f32(2*PI*i/beepArraySize)+1)*(1365); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 8007fec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ff6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80080f0 <main+0x174>
 8007ffa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ffe:	4b3d      	ldr	r3, [pc, #244]	; (80080f4 <main+0x178>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800800a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800800e:	eeb0 0a66 	vmov.f32	s0, s13
 8008012:	f000 ff69 	bl	8008ee8 <arm_sin_f32>
 8008016:	eef0 7a40 	vmov.f32	s15, s0
 800801a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800801e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008022:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80080f8 <main+0x17c>
 8008026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800802a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800802e:	ee17 3a90 	vmov	r3, s15
 8008032:	b299      	uxth	r1, r3
 8008034:	4a31      	ldr	r2, [pc, #196]	; (80080fc <main+0x180>)
 8008036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008038:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < beepArraySize; i++) {
 800803c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803e:	3301      	adds	r3, #1
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008042:	4b2c      	ldr	r3, [pc, #176]	; (80080f4 <main+0x178>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008048:	429a      	cmp	r2, r3
 800804a:	dbcf      	blt.n	8007fec <main+0x70>
  }

  sprintf(buffer, "Welcome to the Morse code translator!\n\r");
 800804c:	492c      	ldr	r1, [pc, #176]	; (8008100 <main+0x184>)
 800804e:	482d      	ldr	r0, [pc, #180]	; (8008104 <main+0x188>)
 8008050:	f001 ff16 	bl	8009e80 <siprintf>
  HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008054:	230a      	movs	r3, #10
 8008056:	2232      	movs	r2, #50	; 0x32
 8008058:	492a      	ldr	r1, [pc, #168]	; (8008104 <main+0x188>)
 800805a:	482b      	ldr	r0, [pc, #172]	; (8008108 <main+0x18c>)
 800805c:	f7fd fa26 	bl	80054ac <HAL_UART_Transmit>
  sprintf(buffer, "Operating system starting now.\n\r");
 8008060:	492a      	ldr	r1, [pc, #168]	; (800810c <main+0x190>)
 8008062:	4828      	ldr	r0, [pc, #160]	; (8008104 <main+0x188>)
 8008064:	f001 ff0c 	bl	8009e80 <siprintf>
  HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008068:	230a      	movs	r3, #10
 800806a:	2232      	movs	r2, #50	; 0x32
 800806c:	4925      	ldr	r1, [pc, #148]	; (8008104 <main+0x188>)
 800806e:	4826      	ldr	r0, [pc, #152]	; (8008108 <main+0x18c>)
 8008070:	f7fd fa1c 	bl	80054ac <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of letterToMorse */
  osThreadDef(letterToMorse, StartLetterToMorse, osPriorityNormal, 0, 128);
 8008074:	4b26      	ldr	r3, [pc, #152]	; (8008110 <main+0x194>)
 8008076:	f107 0420 	add.w	r4, r7, #32
 800807a:	461d      	mov	r5, r3
 800807c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800807e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  letterToMorseHandle = osThreadCreate(osThread(letterToMorse), NULL);
 8008088:	f107 0320 	add.w	r3, r7, #32
 800808c:	2100      	movs	r1, #0
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe f94b 	bl	800632a <osThreadCreate>
 8008094:	4603      	mov	r3, r0
 8008096:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <main+0x198>)
 8008098:	6013      	str	r3, [r2, #0]

  /* definition and creation of morseToLetter */
  osThreadDef(morseToLetter, StartMorseToLetter, osPriorityNormal, 0, 128);
 800809a:	4b1f      	ldr	r3, [pc, #124]	; (8008118 <main+0x19c>)
 800809c:	1d3c      	adds	r4, r7, #4
 800809e:	461d      	mov	r5, r3
 80080a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  morseToLetterHandle = osThreadCreate(osThread(morseToLetter), NULL);
 80080ac:	1d3b      	adds	r3, r7, #4
 80080ae:	2100      	movs	r1, #0
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7fe f93a 	bl	800632a <osThreadCreate>
 80080b6:	4603      	mov	r3, r0
 80080b8:	4a18      	ldr	r2, [pc, #96]	; (800811c <main+0x1a0>)
 80080ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80080bc:	f7fe f92e 	bl	800631c <osKernelStart>
//		  letterToPrint = getLetterFromMorse(code, morseInputArraySize);
//		  sprintf(buffer, "Letter from  input: %c \n\r", letterToPrint);
//		  HAL_Delay(500);
//	  }

	  sprintf(buffer, "Not in OS\n\r");
 80080c0:	4917      	ldr	r1, [pc, #92]	; (8008120 <main+0x1a4>)
 80080c2:	4810      	ldr	r0, [pc, #64]	; (8008104 <main+0x188>)
 80080c4:	f001 fedc 	bl	8009e80 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 80080c8:	230a      	movs	r3, #10
 80080ca:	2232      	movs	r2, #50	; 0x32
 80080cc:	490d      	ldr	r1, [pc, #52]	; (8008104 <main+0x188>)
 80080ce:	480e      	ldr	r0, [pc, #56]	; (8008108 <main+0x18c>)
 80080d0:	f7fd f9ec 	bl	80054ac <HAL_UART_Transmit>
	  sprintf(buffer, "Not in OS\n\r");
 80080d4:	e7f4      	b.n	80080c0 <main+0x144>
 80080d6:	bf00      	nop
 80080d8:	20001388 	.word	0x20001388
 80080dc:	2000000c 	.word	0x2000000c
 80080e0:	20000010 	.word	0x20000010
 80080e4:	200013e9 	.word	0x200013e9
 80080e8:	2000001c 	.word	0x2000001c
 80080ec:	2000124c 	.word	0x2000124c
 80080f0:	40c90fdb 	.word	0x40c90fdb
 80080f4:	20000014 	.word	0x20000014
 80080f8:	44aaa000 	.word	0x44aaa000
 80080fc:	20001390 	.word	0x20001390
 8008100:	0800e418 	.word	0x0800e418
 8008104:	200013ec 	.word	0x200013ec
 8008108:	200012e4 	.word	0x200012e4
 800810c:	0800e440 	.word	0x0800e440
 8008110:	0800e470 	.word	0x0800e470
 8008114:	20001374 	.word	0x20001374
 8008118:	0800e48c 	.word	0x0800e48c
 800811c:	20001378 	.word	0x20001378
 8008120:	0800e464 	.word	0x0800e464

08008124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b096      	sub	sp, #88	; 0x58
 8008128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800812a:	f107 0314 	add.w	r3, r7, #20
 800812e:	2244      	movs	r2, #68	; 0x44
 8008130:	2100      	movs	r1, #0
 8008132:	4618      	mov	r0, r3
 8008134:	f000 ff56 	bl	8008fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008138:	463b      	mov	r3, r7
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]
 8008142:	60da      	str	r2, [r3, #12]
 8008144:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8008146:	2000      	movs	r0, #0
 8008148:	f7fa ffe8 	bl	800311c <HAL_PWREx_ControlVoltageScaling>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8008152:	f000 fb69 	bl	8008828 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008156:	2310      	movs	r3, #16
 8008158:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800815a:	2301      	movs	r3, #1
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008162:	2360      	movs	r3, #96	; 0x60
 8008164:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008166:	2302      	movs	r3, #2
 8008168:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800816a:	2301      	movs	r3, #1
 800816c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800816e:	2301      	movs	r3, #1
 8008170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8008172:	233c      	movs	r3, #60	; 0x3c
 8008174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008176:	2302      	movs	r3, #2
 8008178:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800817a:	2302      	movs	r3, #2
 800817c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800817e:	2302      	movs	r3, #2
 8008180:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008182:	f107 0314 	add.w	r3, r7, #20
 8008186:	4618      	mov	r0, r3
 8008188:	f7fb f86c 	bl	8003264 <HAL_RCC_OscConfig>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8008192:	f000 fb49 	bl	8008828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008196:	230f      	movs	r3, #15
 8008198:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800819a:	2303      	movs	r3, #3
 800819c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800819e:	2300      	movs	r3, #0
 80081a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80081a6:	2300      	movs	r3, #0
 80081a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80081aa:	463b      	mov	r3, r7
 80081ac:	2105      	movs	r1, #5
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fb fc72 	bl	8003a98 <HAL_RCC_ClockConfig>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80081ba:	f000 fb35 	bl	8008828 <Error_Handler>
  }
}
 80081be:	bf00      	nop
 80081c0:	3758      	adds	r7, #88	; 0x58
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80081ce:	463b      	mov	r3, r7
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	605a      	str	r2, [r3, #4]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	60da      	str	r2, [r3, #12]
 80081da:	611a      	str	r2, [r3, #16]
 80081dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80081de:	4b2a      	ldr	r3, [pc, #168]	; (8008288 <MX_ADC1_Init+0xc0>)
 80081e0:	4a2a      	ldr	r2, [pc, #168]	; (800828c <MX_ADC1_Init+0xc4>)
 80081e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80081e4:	4b28      	ldr	r3, [pc, #160]	; (8008288 <MX_ADC1_Init+0xc0>)
 80081e6:	2200      	movs	r2, #0
 80081e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80081ea:	4b27      	ldr	r3, [pc, #156]	; (8008288 <MX_ADC1_Init+0xc0>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80081f0:	4b25      	ldr	r3, [pc, #148]	; (8008288 <MX_ADC1_Init+0xc0>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80081f6:	4b24      	ldr	r3, [pc, #144]	; (8008288 <MX_ADC1_Init+0xc0>)
 80081f8:	2200      	movs	r2, #0
 80081fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80081fc:	4b22      	ldr	r3, [pc, #136]	; (8008288 <MX_ADC1_Init+0xc0>)
 80081fe:	2204      	movs	r2, #4
 8008200:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008202:	4b21      	ldr	r3, [pc, #132]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008204:	2200      	movs	r2, #0
 8008206:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8008208:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <MX_ADC1_Init+0xc0>)
 800820a:	2200      	movs	r2, #0
 800820c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800820e:	4b1e      	ldr	r3, [pc, #120]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008210:	2201      	movs	r2, #1
 8008212:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008214:	4b1c      	ldr	r3, [pc, #112]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800821c:	4b1a      	ldr	r3, [pc, #104]	; (8008288 <MX_ADC1_Init+0xc0>)
 800821e:	2200      	movs	r2, #0
 8008220:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008222:	4b19      	ldr	r3, [pc, #100]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008224:	2200      	movs	r2, #0
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008228:	4b17      	ldr	r3, [pc, #92]	; (8008288 <MX_ADC1_Init+0xc0>)
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008230:	4b15      	ldr	r3, [pc, #84]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008232:	2200      	movs	r2, #0
 8008234:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008240:	2204      	movs	r2, #4
 8008242:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008244:	4810      	ldr	r0, [pc, #64]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008246:	f7f9 f8eb 	bl	8001420 <HAL_ADC_Init>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8008250:	f000 faea 	bl	8008828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <MX_ADC1_Init+0xc8>)
 8008256:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008258:	2306      	movs	r3, #6
 800825a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800825c:	2300      	movs	r3, #0
 800825e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008260:	237f      	movs	r3, #127	; 0x7f
 8008262:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008264:	2304      	movs	r3, #4
 8008266:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800826c:	463b      	mov	r3, r7
 800826e:	4619      	mov	r1, r3
 8008270:	4805      	ldr	r0, [pc, #20]	; (8008288 <MX_ADC1_Init+0xc0>)
 8008272:	f7f9 fa21 	bl	80016b8 <HAL_ADC_ConfigChannel>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 800827c:	f000 fad4 	bl	8008828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008280:	bf00      	nop
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20001170 	.word	0x20001170
 800828c:	50040000 	.word	0x50040000
 8008290:	04300002 	.word	0x04300002

08008294 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b08a      	sub	sp, #40	; 0x28
 8008298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800829a:	463b      	mov	r3, r7
 800829c:	2228      	movs	r2, #40	; 0x28
 800829e:	2100      	movs	r1, #0
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fe9f 	bl	8008fe4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80082a6:	4b13      	ldr	r3, [pc, #76]	; (80082f4 <MX_DAC1_Init+0x60>)
 80082a8:	4a13      	ldr	r2, [pc, #76]	; (80082f8 <MX_DAC1_Init+0x64>)
 80082aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80082ac:	4811      	ldr	r0, [pc, #68]	; (80082f4 <MX_DAC1_Init+0x60>)
 80082ae:	f7f9 fee1 	bl	8002074 <HAL_DAC_Init>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d001      	beq.n	80082bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80082b8:	f000 fab6 	bl	8008828 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80082c0:	230a      	movs	r3, #10
 80082c2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80082c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082c8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80082d2:	2300      	movs	r3, #0
 80082d4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80082d6:	463b      	mov	r3, r7
 80082d8:	2200      	movs	r2, #0
 80082da:	4619      	mov	r1, r3
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <MX_DAC1_Init+0x60>)
 80082de:	f7fa f87f 	bl	80023e0 <HAL_DAC_ConfigChannel>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d001      	beq.n	80082ec <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80082e8:	f000 fa9e 	bl	8008828 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80082ec:	bf00      	nop
 80082ee:	3728      	adds	r7, #40	; 0x28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	200011d8 	.word	0x200011d8
 80082f8:	40007400 	.word	0x40007400

080082fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008302:	f107 0310 	add.w	r3, r7, #16
 8008306:	2200      	movs	r2, #0
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	605a      	str	r2, [r3, #4]
 800830c:	609a      	str	r2, [r3, #8]
 800830e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008310:	1d3b      	adds	r3, r7, #4
 8008312:	2200      	movs	r2, #0
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	605a      	str	r2, [r3, #4]
 8008318:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800831a:	4b1e      	ldr	r3, [pc, #120]	; (8008394 <MX_TIM2_Init+0x98>)
 800831c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008322:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <MX_TIM2_Init+0x98>)
 8008324:	2200      	movs	r2, #0
 8008326:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008328:	4b1a      	ldr	r3, [pc, #104]	; (8008394 <MX_TIM2_Init+0x98>)
 800832a:	2200      	movs	r2, #0
 800832c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 800832e:	4b19      	ldr	r3, [pc, #100]	; (8008394 <MX_TIM2_Init+0x98>)
 8008330:	f640 22a1 	movw	r2, #2721	; 0xaa1
 8008334:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008336:	4b17      	ldr	r3, [pc, #92]	; (8008394 <MX_TIM2_Init+0x98>)
 8008338:	2200      	movs	r2, #0
 800833a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800833c:	4b15      	ldr	r3, [pc, #84]	; (8008394 <MX_TIM2_Init+0x98>)
 800833e:	2200      	movs	r2, #0
 8008340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008342:	4814      	ldr	r0, [pc, #80]	; (8008394 <MX_TIM2_Init+0x98>)
 8008344:	f7fc fbb0 	bl	8004aa8 <HAL_TIM_Base_Init>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800834e:	f000 fa6b 	bl	8008828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008356:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008358:	f107 0310 	add.w	r3, r7, #16
 800835c:	4619      	mov	r1, r3
 800835e:	480d      	ldr	r0, [pc, #52]	; (8008394 <MX_TIM2_Init+0x98>)
 8008360:	f7fc fd89 	bl	8004e76 <HAL_TIM_ConfigClockSource>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800836a:	f000 fa5d 	bl	8008828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800836e:	2320      	movs	r3, #32
 8008370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008376:	1d3b      	adds	r3, r7, #4
 8008378:	4619      	mov	r1, r3
 800837a:	4806      	ldr	r0, [pc, #24]	; (8008394 <MX_TIM2_Init+0x98>)
 800837c:	f7fc ffa0 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008386:	f000 fa4f 	bl	8008828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800838a:	bf00      	nop
 800838c:	3720      	adds	r7, #32
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	2000124c 	.word	0x2000124c

08008398 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b088      	sub	sp, #32
 800839c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800839e:	f107 0310 	add.w	r3, r7, #16
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	605a      	str	r2, [r3, #4]
 80083a8:	609a      	str	r2, [r3, #8]
 80083aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083ac:	1d3b      	adds	r3, r7, #4
 80083ae:	2200      	movs	r2, #0
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	605a      	str	r2, [r3, #4]
 80083b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80083b6:	4b1d      	ldr	r3, [pc, #116]	; (800842c <MX_TIM5_Init+0x94>)
 80083b8:	4a1d      	ldr	r2, [pc, #116]	; (8008430 <MX_TIM5_Init+0x98>)
 80083ba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80083bc:	4b1b      	ldr	r3, [pc, #108]	; (800842c <MX_TIM5_Init+0x94>)
 80083be:	2200      	movs	r2, #0
 80083c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083c2:	4b1a      	ldr	r3, [pc, #104]	; (800842c <MX_TIM5_Init+0x94>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 120000;
 80083c8:	4b18      	ldr	r3, [pc, #96]	; (800842c <MX_TIM5_Init+0x94>)
 80083ca:	4a1a      	ldr	r2, [pc, #104]	; (8008434 <MX_TIM5_Init+0x9c>)
 80083cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083ce:	4b17      	ldr	r3, [pc, #92]	; (800842c <MX_TIM5_Init+0x94>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <MX_TIM5_Init+0x94>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80083da:	4814      	ldr	r0, [pc, #80]	; (800842c <MX_TIM5_Init+0x94>)
 80083dc:	f7fc fb64 	bl	8004aa8 <HAL_TIM_Base_Init>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d001      	beq.n	80083ea <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80083e6:	f000 fa1f 	bl	8008828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80083f0:	f107 0310 	add.w	r3, r7, #16
 80083f4:	4619      	mov	r1, r3
 80083f6:	480d      	ldr	r0, [pc, #52]	; (800842c <MX_TIM5_Init+0x94>)
 80083f8:	f7fc fd3d 	bl	8004e76 <HAL_TIM_ConfigClockSource>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8008402:	f000 fa11 	bl	8008828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800840e:	1d3b      	adds	r3, r7, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4806      	ldr	r0, [pc, #24]	; (800842c <MX_TIM5_Init+0x94>)
 8008414:	f7fc ff54 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d001      	beq.n	8008422 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800841e:	f000 fa03 	bl	8008828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008422:	bf00      	nop
 8008424:	3720      	adds	r7, #32
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	20001298 	.word	0x20001298
 8008430:	40000c00 	.word	0x40000c00
 8008434:	0001d4c0 	.word	0x0001d4c0

08008438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800843c:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 800843e:	4a23      	ldr	r2, [pc, #140]	; (80084cc <MX_USART1_UART_Init+0x94>)
 8008440:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008442:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008444:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008448:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800844a:	4b1f      	ldr	r3, [pc, #124]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 800844c:	2200      	movs	r2, #0
 800844e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008450:	4b1d      	ldr	r3, [pc, #116]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008452:	2200      	movs	r2, #0
 8008454:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008456:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008458:	2200      	movs	r2, #0
 800845a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800845c:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 800845e:	220c      	movs	r2, #12
 8008460:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008462:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008464:	2200      	movs	r2, #0
 8008466:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 800846a:	2200      	movs	r2, #0
 800846c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800846e:	4b16      	ldr	r3, [pc, #88]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008470:	2200      	movs	r2, #0
 8008472:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008476:	2200      	movs	r2, #0
 8008478:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800847a:	4b13      	ldr	r3, [pc, #76]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 800847c:	2200      	movs	r2, #0
 800847e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008480:	4811      	ldr	r0, [pc, #68]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008482:	f7fc ffc3 	bl	800540c <HAL_UART_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800848c:	f000 f9cc 	bl	8008828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008490:	2100      	movs	r1, #0
 8008492:	480d      	ldr	r0, [pc, #52]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 8008494:	f7fd fe60 	bl	8006158 <HAL_UARTEx_SetTxFifoThreshold>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800849e:	f000 f9c3 	bl	8008828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80084a2:	2100      	movs	r1, #0
 80084a4:	4808      	ldr	r0, [pc, #32]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 80084a6:	f7fd fe95 	bl	80061d4 <HAL_UARTEx_SetRxFifoThreshold>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80084b0:	f000 f9ba 	bl	8008828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80084b4:	4804      	ldr	r0, [pc, #16]	; (80084c8 <MX_USART1_UART_Init+0x90>)
 80084b6:	f7fd fe16 	bl	80060e6 <HAL_UARTEx_DisableFifoMode>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d001      	beq.n	80084c4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80084c0:	f000 f9b2 	bl	8008828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80084c4:	bf00      	nop
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	200012e4 	.word	0x200012e4
 80084cc:	40013800 	.word	0x40013800

080084d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <MX_DMA_Init+0x50>)
 80084d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084da:	4a11      	ldr	r2, [pc, #68]	; (8008520 <MX_DMA_Init+0x50>)
 80084dc:	f043 0304 	orr.w	r3, r3, #4
 80084e0:	6493      	str	r3, [r2, #72]	; 0x48
 80084e2:	4b0f      	ldr	r3, [pc, #60]	; (8008520 <MX_DMA_Init+0x50>)
 80084e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e6:	f003 0304 	and.w	r3, r3, #4
 80084ea:	607b      	str	r3, [r7, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80084ee:	4b0c      	ldr	r3, [pc, #48]	; (8008520 <MX_DMA_Init+0x50>)
 80084f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f2:	4a0b      	ldr	r2, [pc, #44]	; (8008520 <MX_DMA_Init+0x50>)
 80084f4:	f043 0301 	orr.w	r3, r3, #1
 80084f8:	6493      	str	r3, [r2, #72]	; 0x48
 80084fa:	4b09      	ldr	r3, [pc, #36]	; (8008520 <MX_DMA_Init+0x50>)
 80084fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8008506:	2200      	movs	r2, #0
 8008508:	2105      	movs	r1, #5
 800850a:	200b      	movs	r0, #11
 800850c:	f7f9 fd88 	bl	8002020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008510:	200b      	movs	r0, #11
 8008512:	f7f9 fda1 	bl	8002058 <HAL_NVIC_EnableIRQ>

}
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	40021000 	.word	0x40021000

08008524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	2200      	movs	r2, #0
 8008530:	601a      	str	r2, [r3, #0]
 8008532:	605a      	str	r2, [r3, #4]
 8008534:	609a      	str	r2, [r3, #8]
 8008536:	60da      	str	r2, [r3, #12]
 8008538:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <MX_GPIO_Init+0xe8>)
 800853c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853e:	4a33      	ldr	r2, [pc, #204]	; (800860c <MX_GPIO_Init+0xe8>)
 8008540:	f043 0304 	orr.w	r3, r3, #4
 8008544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008546:	4b31      	ldr	r3, [pc, #196]	; (800860c <MX_GPIO_Init+0xe8>)
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008552:	4b2e      	ldr	r3, [pc, #184]	; (800860c <MX_GPIO_Init+0xe8>)
 8008554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008556:	4a2d      	ldr	r2, [pc, #180]	; (800860c <MX_GPIO_Init+0xe8>)
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800855e:	4b2b      	ldr	r3, [pc, #172]	; (800860c <MX_GPIO_Init+0xe8>)
 8008560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	607b      	str	r3, [r7, #4]
 8008568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800856a:	4b28      	ldr	r3, [pc, #160]	; (800860c <MX_GPIO_Init+0xe8>)
 800856c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856e:	4a27      	ldr	r2, [pc, #156]	; (800860c <MX_GPIO_Init+0xe8>)
 8008570:	f043 0302 	orr.w	r3, r3, #2
 8008574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008576:	4b25      	ldr	r3, [pc, #148]	; (800860c <MX_GPIO_Init+0xe8>)
 8008578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8008582:	2200      	movs	r2, #0
 8008584:	2120      	movs	r1, #32
 8008586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800858a:	f7fa fd5d 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 800858e:	2200      	movs	r2, #0
 8008590:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008594:	481e      	ldr	r0, [pc, #120]	; (8008610 <MX_GPIO_Init+0xec>)
 8008596:	f7fa fd57 	bl	8003048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 800859a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800859e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80085a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80085a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 80085aa:	f107 030c 	add.w	r3, r7, #12
 80085ae:	4619      	mov	r1, r3
 80085b0:	4818      	ldr	r0, [pc, #96]	; (8008614 <MX_GPIO_Init+0xf0>)
 80085b2:	f7fa fbb7 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 80085b6:	2320      	movs	r3, #32
 80085b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085ba:	2301      	movs	r3, #1
 80085bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 80085c6:	f107 030c 	add.w	r3, r7, #12
 80085ca:	4619      	mov	r1, r3
 80085cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80085d0:	f7fa fba8 	bl	8002d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 80085d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085da:	2301      	movs	r3, #1
 80085dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	4619      	mov	r1, r3
 80085ec:	4808      	ldr	r0, [pc, #32]	; (8008610 <MX_GPIO_Init+0xec>)
 80085ee:	f7fa fb99 	bl	8002d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80085f2:	2200      	movs	r2, #0
 80085f4:	2105      	movs	r1, #5
 80085f6:	2028      	movs	r0, #40	; 0x28
 80085f8:	f7f9 fd12 	bl	8002020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80085fc:	2028      	movs	r0, #40	; 0x28
 80085fe:	f7f9 fd2b 	bl	8002058 <HAL_NVIC_EnableIRQ>

}
 8008602:	bf00      	nop
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40021000 	.word	0x40021000
 8008610:	48000400 	.word	0x48000400
 8008614:	48000800 	.word	0x48000800

08008618 <StartLetterToMorse>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartLetterToMorse */
void StartLetterToMorse(void const * argument)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008620:	2001      	movs	r0, #1
 8008622:	f7fd fece 	bl	80063c2 <osDelay>

    // get character from user
    sprintf(buffer, "Input a character: ");
 8008626:	4921      	ldr	r1, [pc, #132]	; (80086ac <StartLetterToMorse+0x94>)
 8008628:	4821      	ldr	r0, [pc, #132]	; (80086b0 <StartLetterToMorse+0x98>)
 800862a:	f001 fc29 	bl	8009e80 <siprintf>
    HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 800862e:	230a      	movs	r3, #10
 8008630:	2232      	movs	r2, #50	; 0x32
 8008632:	491f      	ldr	r1, [pc, #124]	; (80086b0 <StartLetterToMorse+0x98>)
 8008634:	481f      	ldr	r0, [pc, #124]	; (80086b4 <StartLetterToMorse+0x9c>)
 8008636:	f7fc ff39 	bl	80054ac <HAL_UART_Transmit>
    sscanf(buffer, "%c", &inputChar);
 800863a:	4a1f      	ldr	r2, [pc, #124]	; (80086b8 <StartLetterToMorse+0xa0>)
 800863c:	491f      	ldr	r1, [pc, #124]	; (80086bc <StartLetterToMorse+0xa4>)
 800863e:	481c      	ldr	r0, [pc, #112]	; (80086b0 <StartLetterToMorse+0x98>)
 8008640:	f001 fc3e 	bl	8009ec0 <siscanf>
    sprintf(buffer, "\n\rYou entered: %c \n\r", inputChar); // print character
 8008644:	4b1c      	ldr	r3, [pc, #112]	; (80086b8 <StartLetterToMorse+0xa0>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	491d      	ldr	r1, [pc, #116]	; (80086c0 <StartLetterToMorse+0xa8>)
 800864c:	4818      	ldr	r0, [pc, #96]	; (80086b0 <StartLetterToMorse+0x98>)
 800864e:	f001 fc17 	bl	8009e80 <siprintf>
    HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008652:	230a      	movs	r3, #10
 8008654:	2232      	movs	r2, #50	; 0x32
 8008656:	4916      	ldr	r1, [pc, #88]	; (80086b0 <StartLetterToMorse+0x98>)
 8008658:	4816      	ldr	r0, [pc, #88]	; (80086b4 <StartLetterToMorse+0x9c>)
 800865a:	f7fc ff27 	bl	80054ac <HAL_UART_Transmit>
    //sprintf(buffer, "ASCII Character: %d \n\r", inputChar); // print ASCII value

    // Update, display, and play the Morse letter
    updateMorseLetter(inputChar);
 800865e:	4b16      	ldr	r3, [pc, #88]	; (80086b8 <StartLetterToMorse+0xa0>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4618      	mov	r0, r3
 8008664:	f7ff f942 	bl	80078ec <updateMorseLetter>
    sprintf(buffer, "Morse Translation: ");
 8008668:	4916      	ldr	r1, [pc, #88]	; (80086c4 <StartLetterToMorse+0xac>)
 800866a:	4811      	ldr	r0, [pc, #68]	; (80086b0 <StartLetterToMorse+0x98>)
 800866c:	f001 fc08 	bl	8009e80 <siprintf>
    HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008670:	230a      	movs	r3, #10
 8008672:	2232      	movs	r2, #50	; 0x32
 8008674:	490e      	ldr	r1, [pc, #56]	; (80086b0 <StartLetterToMorse+0x98>)
 8008676:	480f      	ldr	r0, [pc, #60]	; (80086b4 <StartLetterToMorse+0x9c>)
 8008678:	f7fc ff18 	bl	80054ac <HAL_UART_Transmit>
    printMorseLetter();
 800867c:	f7ff faf4 	bl	8007c68 <printMorseLetter>
    sprintf(buffer, "\n\r");
 8008680:	4911      	ldr	r1, [pc, #68]	; (80086c8 <StartLetterToMorse+0xb0>)
 8008682:	480b      	ldr	r0, [pc, #44]	; (80086b0 <StartLetterToMorse+0x98>)
 8008684:	f001 fbfc 	bl	8009e80 <siprintf>
    HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008688:	230a      	movs	r3, #10
 800868a:	2232      	movs	r2, #50	; 0x32
 800868c:	4908      	ldr	r1, [pc, #32]	; (80086b0 <StartLetterToMorse+0x98>)
 800868e:	4809      	ldr	r0, [pc, #36]	; (80086b4 <StartLetterToMorse+0x9c>)
 8008690:	f7fc ff0c 	bl	80054ac <HAL_UART_Transmit>
    playMorseToSpeaker(morseLetter, morseLetterSize);
 8008694:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <StartLetterToMorse+0xb4>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4619      	mov	r1, r3
 800869a:	480d      	ldr	r0, [pc, #52]	; (80086d0 <StartLetterToMorse+0xb8>)
 800869c:	f7ff fb20 	bl	8007ce0 <playMorseToSpeaker>
    osDelay(1000);
 80086a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086a4:	f7fd fe8d 	bl	80063c2 <osDelay>
    osDelay(1);
 80086a8:	e7ba      	b.n	8008620 <StartLetterToMorse+0x8>
 80086aa:	bf00      	nop
 80086ac:	0800e4a8 	.word	0x0800e4a8
 80086b0:	200013ec 	.word	0x200013ec
 80086b4:	200012e4 	.word	0x200012e4
 80086b8:	2000137c 	.word	0x2000137c
 80086bc:	0800e410 	.word	0x0800e410
 80086c0:	0800e4bc 	.word	0x0800e4bc
 80086c4:	0800e4d4 	.word	0x0800e4d4
 80086c8:	0800e414 	.word	0x0800e414
 80086cc:	20001380 	.word	0x20001380
 80086d0:	20001384 	.word	0x20001384

080086d4 <StartMorseToLetter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMorseToLetter */
void StartMorseToLetter(void const * argument)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMorseToLetter */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80086dc:	2001      	movs	r0, #1
 80086de:	f7fd fe70 	bl	80063c2 <osDelay>

    // reset input stuff
    notSpace = 1;
 80086e2:	4b36      	ldr	r3, [pc, #216]	; (80087bc <StartMorseToLetter+0xe8>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	701a      	strb	r2, [r3, #0]
    morseInputArraySize = 0;
 80086e8:	4b35      	ldr	r3, [pc, #212]	; (80087c0 <StartMorseToLetter+0xec>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	601a      	str	r2, [r3, #0]
    morseInputArray[0] = '\0'; morseInputArray[1] = '\0'; morseInputArray[2] = '\0'; morseInputArray[3] = '\0';
 80086ee:	4b35      	ldr	r3, [pc, #212]	; (80087c4 <StartMorseToLetter+0xf0>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	4b33      	ldr	r3, [pc, #204]	; (80087c4 <StartMorseToLetter+0xf0>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	705a      	strb	r2, [r3, #1]
 80086fa:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <StartMorseToLetter+0xf0>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	709a      	strb	r2, [r3, #2]
 8008700:	4b30      	ldr	r3, [pc, #192]	; (80087c4 <StartMorseToLetter+0xf0>)
 8008702:	2200      	movs	r2, #0
 8008704:	70da      	strb	r2, [r3, #3]
    // get user input until space input
    sprintf(buffer, "\n\rInput Morse (. and - with a space at the end)\n\r");
 8008706:	4930      	ldr	r1, [pc, #192]	; (80087c8 <StartMorseToLetter+0xf4>)
 8008708:	4830      	ldr	r0, [pc, #192]	; (80087cc <StartMorseToLetter+0xf8>)
 800870a:	f001 fbb9 	bl	8009e80 <siprintf>
    HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 800870e:	230a      	movs	r3, #10
 8008710:	2232      	movs	r2, #50	; 0x32
 8008712:	492e      	ldr	r1, [pc, #184]	; (80087cc <StartMorseToLetter+0xf8>)
 8008714:	482e      	ldr	r0, [pc, #184]	; (80087d0 <StartMorseToLetter+0xfc>)
 8008716:	f7fc fec9 	bl	80054ac <HAL_UART_Transmit>
    while (notSpace == 1) {
 800871a:	e049      	b.n	80087b0 <StartMorseToLetter+0xdc>
   	  	sscanf(buffer, "%c", &inputChar);
 800871c:	4a2d      	ldr	r2, [pc, #180]	; (80087d4 <StartMorseToLetter+0x100>)
 800871e:	492e      	ldr	r1, [pc, #184]	; (80087d8 <StartMorseToLetter+0x104>)
 8008720:	482a      	ldr	r0, [pc, #168]	; (80087cc <StartMorseToLetter+0xf8>)
 8008722:	f001 fbcd 	bl	8009ec0 <siscanf>
   	  	if (inputChar == 32) {
 8008726:	4b2b      	ldr	r3, [pc, #172]	; (80087d4 <StartMorseToLetter+0x100>)
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2b20      	cmp	r3, #32
 800872c:	d10d      	bne.n	800874a <StartMorseToLetter+0x76>
   		  	sprintf(buffer, "\n\rSpace Inputed\n\r");
 800872e:	492b      	ldr	r1, [pc, #172]	; (80087dc <StartMorseToLetter+0x108>)
 8008730:	4826      	ldr	r0, [pc, #152]	; (80087cc <StartMorseToLetter+0xf8>)
 8008732:	f001 fba5 	bl	8009e80 <siprintf>
   		 HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008736:	230a      	movs	r3, #10
 8008738:	2232      	movs	r2, #50	; 0x32
 800873a:	4924      	ldr	r1, [pc, #144]	; (80087cc <StartMorseToLetter+0xf8>)
 800873c:	4824      	ldr	r0, [pc, #144]	; (80087d0 <StartMorseToLetter+0xfc>)
 800873e:	f7fc feb5 	bl	80054ac <HAL_UART_Transmit>
   		  	notSpace = 0;
 8008742:	4b1e      	ldr	r3, [pc, #120]	; (80087bc <StartMorseToLetter+0xe8>)
 8008744:	2200      	movs	r2, #0
 8008746:	701a      	strb	r2, [r3, #0]
   		  	break;
 8008748:	e036      	b.n	80087b8 <StartMorseToLetter+0xe4>
   	  	}
   	  	sprintf(buffer, " You entered: %c\n\r", inputChar);
 800874a:	4b22      	ldr	r3, [pc, #136]	; (80087d4 <StartMorseToLetter+0x100>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	4923      	ldr	r1, [pc, #140]	; (80087e0 <StartMorseToLetter+0x10c>)
 8008752:	481e      	ldr	r0, [pc, #120]	; (80087cc <StartMorseToLetter+0xf8>)
 8008754:	f001 fb94 	bl	8009e80 <siprintf>
   	  	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008758:	230a      	movs	r3, #10
 800875a:	2232      	movs	r2, #50	; 0x32
 800875c:	491b      	ldr	r1, [pc, #108]	; (80087cc <StartMorseToLetter+0xf8>)
 800875e:	481c      	ldr	r0, [pc, #112]	; (80087d0 <StartMorseToLetter+0xfc>)
 8008760:	f7fc fea4 	bl	80054ac <HAL_UART_Transmit>
   	  	morseInputArray[morseInputArraySize] = inputChar;
 8008764:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <StartMorseToLetter+0xec>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a1a      	ldr	r2, [pc, #104]	; (80087d4 <StartMorseToLetter+0x100>)
 800876a:	7811      	ldrb	r1, [r2, #0]
 800876c:	4a15      	ldr	r2, [pc, #84]	; (80087c4 <StartMorseToLetter+0xf0>)
 800876e:	54d1      	strb	r1, [r2, r3]
   	  	morseInputArraySize = morseInputArraySize+1;
 8008770:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <StartMorseToLetter+0xec>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3301      	adds	r3, #1
 8008776:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <StartMorseToLetter+0xec>)
 8008778:	6013      	str	r3, [r2, #0]
   	  	// print letter
   	  	letterToPrint = getLetterFromMorse(morseInputArray, morseInputArraySize);
 800877a:	4b11      	ldr	r3, [pc, #68]	; (80087c0 <StartMorseToLetter+0xec>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4619      	mov	r1, r3
 8008780:	4810      	ldr	r0, [pc, #64]	; (80087c4 <StartMorseToLetter+0xf0>)
 8008782:	f7ff fb2b 	bl	8007ddc <getLetterFromMorse>
 8008786:	4603      	mov	r3, r0
 8008788:	461a      	mov	r2, r3
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <StartMorseToLetter+0x110>)
 800878c:	701a      	strb	r2, [r3, #0]
   	 	sprintf(buffer, "Letter from  input: %c \n\r", letterToPrint);
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <StartMorseToLetter+0x110>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461a      	mov	r2, r3
 8008794:	4914      	ldr	r1, [pc, #80]	; (80087e8 <StartMorseToLetter+0x114>)
 8008796:	480d      	ldr	r0, [pc, #52]	; (80087cc <StartMorseToLetter+0xf8>)
 8008798:	f001 fb72 	bl	8009e80 <siprintf>
   	 	HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 800879c:	230a      	movs	r3, #10
 800879e:	2232      	movs	r2, #50	; 0x32
 80087a0:	490a      	ldr	r1, [pc, #40]	; (80087cc <StartMorseToLetter+0xf8>)
 80087a2:	480b      	ldr	r0, [pc, #44]	; (80087d0 <StartMorseToLetter+0xfc>)
 80087a4:	f7fc fe82 	bl	80054ac <HAL_UART_Transmit>
   	 	osDelay(500);
 80087a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087ac:	f7fd fe09 	bl	80063c2 <osDelay>
    while (notSpace == 1) {
 80087b0:	4b02      	ldr	r3, [pc, #8]	; (80087bc <StartMorseToLetter+0xe8>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d0b1      	beq.n	800871c <StartMorseToLetter+0x48>
    osDelay(1);
 80087b8:	e790      	b.n	80086dc <StartMorseToLetter+0x8>
 80087ba:	bf00      	nop
 80087bc:	200013e9 	.word	0x200013e9
 80087c0:	20000010 	.word	0x20000010
 80087c4:	2000000c 	.word	0x2000000c
 80087c8:	0800e4e8 	.word	0x0800e4e8
 80087cc:	200013ec 	.word	0x200013ec
 80087d0:	200012e4 	.word	0x200012e4
 80087d4:	2000137c 	.word	0x2000137c
 80087d8:	0800e410 	.word	0x0800e410
 80087dc:	0800e51c 	.word	0x0800e51c
 80087e0:	0800e530 	.word	0x0800e530
 80087e4:	200013e8 	.word	0x200013e8
 80087e8:	0800e544 	.word	0x0800e544

080087ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim == &htim5) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a09      	ldr	r2, [pc, #36]	; (800881c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d104      	bne.n	8008806 <HAL_TIM_PeriodElapsedCallback+0x1a>
		millis++;
 80087fc:	4b08      	ldr	r3, [pc, #32]	; (8008820 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	4a07      	ldr	r2, [pc, #28]	; (8008820 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8008804:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a06      	ldr	r2, [pc, #24]	; (8008824 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d101      	bne.n	8008814 <HAL_TIM_PeriodElapsedCallback+0x28>
    HAL_IncTick();
 8008810:	f7f8 fc22 	bl	8001058 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008814:	bf00      	nop
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20001298 	.word	0x20001298
 8008820:	2000138c 	.word	0x2000138c
 8008824:	40001000 	.word	0x40001000

08008828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800882c:	b672      	cpsid	i
}
 800882e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  sprintf(buffer, "Error\n\r");
 8008830:	4905      	ldr	r1, [pc, #20]	; (8008848 <Error_Handler+0x20>)
 8008832:	4806      	ldr	r0, [pc, #24]	; (800884c <Error_Handler+0x24>)
 8008834:	f001 fb24 	bl	8009e80 <siprintf>
  HAL_UART_Transmit(&huart1, buffer, sizeof(buffer), 10);
 8008838:	230a      	movs	r3, #10
 800883a:	2232      	movs	r2, #50	; 0x32
 800883c:	4903      	ldr	r1, [pc, #12]	; (800884c <Error_Handler+0x24>)
 800883e:	4804      	ldr	r0, [pc, #16]	; (8008850 <Error_Handler+0x28>)
 8008840:	f7fc fe34 	bl	80054ac <HAL_UART_Transmit>
  while (1)
 8008844:	e7fe      	b.n	8008844 <Error_Handler+0x1c>
 8008846:	bf00      	nop
 8008848:	0800e560 	.word	0x0800e560
 800884c:	200013ec 	.word	0x200013ec
 8008850:	200012e4 	.word	0x200012e4

08008854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <HAL_MspInit+0x4c>)
 800885c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885e:	4a10      	ldr	r2, [pc, #64]	; (80088a0 <HAL_MspInit+0x4c>)
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	6613      	str	r3, [r2, #96]	; 0x60
 8008866:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <HAL_MspInit+0x4c>)
 8008868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	607b      	str	r3, [r7, #4]
 8008870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008872:	4b0b      	ldr	r3, [pc, #44]	; (80088a0 <HAL_MspInit+0x4c>)
 8008874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008876:	4a0a      	ldr	r2, [pc, #40]	; (80088a0 <HAL_MspInit+0x4c>)
 8008878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800887c:	6593      	str	r3, [r2, #88]	; 0x58
 800887e:	4b08      	ldr	r3, [pc, #32]	; (80088a0 <HAL_MspInit+0x4c>)
 8008880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800888a:	2200      	movs	r2, #0
 800888c:	210f      	movs	r1, #15
 800888e:	f06f 0001 	mvn.w	r0, #1
 8008892:	f7f9 fbc5 	bl	8002020 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008896:	bf00      	nop
 8008898:	3708      	adds	r7, #8
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	40021000 	.word	0x40021000

080088a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b0ae      	sub	sp, #184	; 0xb8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	605a      	str	r2, [r3, #4]
 80088b6:	609a      	str	r2, [r3, #8]
 80088b8:	60da      	str	r2, [r3, #12]
 80088ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088bc:	f107 0310 	add.w	r3, r7, #16
 80088c0:	2294      	movs	r2, #148	; 0x94
 80088c2:	2100      	movs	r1, #0
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fb8d 	bl	8008fe4 <memset>
  if(hadc->Instance==ADC1)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a27      	ldr	r2, [pc, #156]	; (800896c <HAL_ADC_MspInit+0xc8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d146      	bne.n	8008962 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80088d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088d8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80088da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80088de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80088e2:	2301      	movs	r3, #1
 80088e4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80088e6:	2301      	movs	r3, #1
 80088e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80088ea:	2318      	movs	r3, #24
 80088ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80088ee:	2302      	movs	r3, #2
 80088f0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80088f2:	2302      	movs	r3, #2
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80088f6:	2302      	movs	r3, #2
 80088f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80088fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008900:	f107 0310 	add.w	r3, r7, #16
 8008904:	4618      	mov	r0, r3
 8008906:	f7fb fbb7 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8008910:	f7ff ff8a 	bl	8008828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008914:	4b16      	ldr	r3, [pc, #88]	; (8008970 <HAL_ADC_MspInit+0xcc>)
 8008916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008918:	4a15      	ldr	r2, [pc, #84]	; (8008970 <HAL_ADC_MspInit+0xcc>)
 800891a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800891e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008920:	4b13      	ldr	r3, [pc, #76]	; (8008970 <HAL_ADC_MspInit+0xcc>)
 8008922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <HAL_ADC_MspInit+0xcc>)
 800892e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008930:	4a0f      	ldr	r2, [pc, #60]	; (8008970 <HAL_ADC_MspInit+0xcc>)
 8008932:	f043 0304 	orr.w	r3, r3, #4
 8008936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008938:	4b0d      	ldr	r3, [pc, #52]	; (8008970 <HAL_ADC_MspInit+0xcc>)
 800893a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	60bb      	str	r3, [r7, #8]
 8008942:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008944:	2301      	movs	r3, #1
 8008946:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800894a:	230b      	movs	r3, #11
 800894c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008950:	2300      	movs	r3, #0
 8008952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008956:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800895a:	4619      	mov	r1, r3
 800895c:	4805      	ldr	r0, [pc, #20]	; (8008974 <HAL_ADC_MspInit+0xd0>)
 800895e:	f7fa f9e1 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008962:	bf00      	nop
 8008964:	37b8      	adds	r7, #184	; 0xb8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	50040000 	.word	0x50040000
 8008970:	40021000 	.word	0x40021000
 8008974:	48000800 	.word	0x48000800

08008978 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008980:	f107 0314 	add.w	r3, r7, #20
 8008984:	2200      	movs	r2, #0
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	605a      	str	r2, [r3, #4]
 800898a:	609a      	str	r2, [r3, #8]
 800898c:	60da      	str	r2, [r3, #12]
 800898e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a2f      	ldr	r2, [pc, #188]	; (8008a54 <HAL_DAC_MspInit+0xdc>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d157      	bne.n	8008a4a <HAL_DAC_MspInit+0xd2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800899a:	4b2f      	ldr	r3, [pc, #188]	; (8008a58 <HAL_DAC_MspInit+0xe0>)
 800899c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899e:	4a2e      	ldr	r2, [pc, #184]	; (8008a58 <HAL_DAC_MspInit+0xe0>)
 80089a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089a4:	6593      	str	r3, [r2, #88]	; 0x58
 80089a6:	4b2c      	ldr	r3, [pc, #176]	; (8008a58 <HAL_DAC_MspInit+0xe0>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089ae:	613b      	str	r3, [r7, #16]
 80089b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b2:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <HAL_DAC_MspInit+0xe0>)
 80089b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b6:	4a28      	ldr	r2, [pc, #160]	; (8008a58 <HAL_DAC_MspInit+0xe0>)
 80089b8:	f043 0301 	orr.w	r3, r3, #1
 80089bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089be:	4b26      	ldr	r3, [pc, #152]	; (8008a58 <HAL_DAC_MspInit+0xe0>)
 80089c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c2:	f003 0301 	and.w	r3, r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80089ca:	2310      	movs	r3, #16
 80089cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089ce:	2303      	movs	r3, #3
 80089d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d6:	f107 0314 	add.w	r3, r7, #20
 80089da:	4619      	mov	r1, r3
 80089dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089e0:	f7fa f9a0 	bl	8002d24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80089e4:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 80089e6:	4a1e      	ldr	r2, [pc, #120]	; (8008a60 <HAL_DAC_MspInit+0xe8>)
 80089e8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80089ea:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 80089ec:	2206      	movs	r2, #6
 80089ee:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089f0:	4b1a      	ldr	r3, [pc, #104]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 80089f2:	2210      	movs	r2, #16
 80089f4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80089f6:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80089fc:	4b17      	ldr	r3, [pc, #92]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 80089fe:	2280      	movs	r2, #128	; 0x80
 8008a00:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008a02:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a08:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008a0a:	4b14      	ldr	r3, [pc, #80]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a10:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8008a12:	4b12      	ldr	r3, [pc, #72]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a14:	2220      	movs	r2, #32
 8008a16:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008a18:	4b10      	ldr	r3, [pc, #64]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8008a1e:	480f      	ldr	r0, [pc, #60]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a20:	f7f9 feb2 	bl	8002788 <HAL_DMA_Init>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8008a2a:	f7ff fefd 	bl	8008828 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a0a      	ldr	r2, [pc, #40]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a32:	609a      	str	r2, [r3, #8]
 8008a34:	4a09      	ldr	r2, [pc, #36]	; (8008a5c <HAL_DAC_MspInit+0xe4>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	210f      	movs	r1, #15
 8008a3e:	2036      	movs	r0, #54	; 0x36
 8008a40:	f7f9 faee 	bl	8002020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008a44:	2036      	movs	r0, #54	; 0x36
 8008a46:	f7f9 fb07 	bl	8002058 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008a4a:	bf00      	nop
 8008a4c:	3728      	adds	r7, #40	; 0x28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	40007400 	.word	0x40007400
 8008a58:	40021000 	.word	0x40021000
 8008a5c:	200011ec 	.word	0x200011ec
 8008a60:	40020008 	.word	0x40020008

08008a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a74:	d10c      	bne.n	8008a90 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008a76:	4b12      	ldr	r3, [pc, #72]	; (8008ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8008a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a7a:	4a11      	ldr	r2, [pc, #68]	; (8008ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	6593      	str	r3, [r2, #88]	; 0x58
 8008a82:	4b0f      	ldr	r3, [pc, #60]	; (8008ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008a8e:	e010      	b.n	8008ab2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a0b      	ldr	r2, [pc, #44]	; (8008ac4 <HAL_TIM_Base_MspInit+0x60>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d10b      	bne.n	8008ab2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9e:	4a08      	ldr	r2, [pc, #32]	; (8008ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8008aa0:	f043 0308 	orr.w	r3, r3, #8
 8008aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <HAL_TIM_Base_MspInit+0x5c>)
 8008aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	60bb      	str	r3, [r7, #8]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
}
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	40021000 	.word	0x40021000
 8008ac4:	40000c00 	.word	0x40000c00

08008ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b0ae      	sub	sp, #184	; 0xb8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ad0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	609a      	str	r2, [r3, #8]
 8008adc:	60da      	str	r2, [r3, #12]
 8008ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ae0:	f107 0310 	add.w	r3, r7, #16
 8008ae4:	2294      	movs	r2, #148	; 0x94
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 fa7b 	bl	8008fe4 <memset>
  if(huart->Instance==USART1)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a21      	ldr	r2, [pc, #132]	; (8008b78 <HAL_UART_MspInit+0xb0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d13a      	bne.n	8008b6e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008af8:	2301      	movs	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008afc:	2300      	movs	r3, #0
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b00:	f107 0310 	add.w	r3, r7, #16
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fb fab7 	bl	8004078 <HAL_RCCEx_PeriphCLKConfig>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008b10:	f7ff fe8a 	bl	8008828 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008b14:	4b19      	ldr	r3, [pc, #100]	; (8008b7c <HAL_UART_MspInit+0xb4>)
 8008b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b18:	4a18      	ldr	r2, [pc, #96]	; (8008b7c <HAL_UART_MspInit+0xb4>)
 8008b1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b1e:	6613      	str	r3, [r2, #96]	; 0x60
 8008b20:	4b16      	ldr	r3, [pc, #88]	; (8008b7c <HAL_UART_MspInit+0xb4>)
 8008b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b28:	60fb      	str	r3, [r7, #12]
 8008b2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b2c:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <HAL_UART_MspInit+0xb4>)
 8008b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b30:	4a12      	ldr	r2, [pc, #72]	; (8008b7c <HAL_UART_MspInit+0xb4>)
 8008b32:	f043 0302 	orr.w	r3, r3, #2
 8008b36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b38:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <HAL_UART_MspInit+0xb4>)
 8008b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	60bb      	str	r3, [r7, #8]
 8008b42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008b44:	23c0      	movs	r3, #192	; 0xc0
 8008b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b4a:	2302      	movs	r3, #2
 8008b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b50:	2300      	movs	r3, #0
 8008b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b56:	2303      	movs	r3, #3
 8008b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008b5c:	2307      	movs	r3, #7
 8008b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008b66:	4619      	mov	r1, r3
 8008b68:	4805      	ldr	r0, [pc, #20]	; (8008b80 <HAL_UART_MspInit+0xb8>)
 8008b6a:	f7fa f8db 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008b6e:	bf00      	nop
 8008b70:	37b8      	adds	r7, #184	; 0xb8
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40013800 	.word	0x40013800
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	48000400 	.word	0x48000400

08008b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08e      	sub	sp, #56	; 0x38
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008b92:	4b34      	ldr	r3, [pc, #208]	; (8008c64 <HAL_InitTick+0xe0>)
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b96:	4a33      	ldr	r2, [pc, #204]	; (8008c64 <HAL_InitTick+0xe0>)
 8008b98:	f043 0310 	orr.w	r3, r3, #16
 8008b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b9e:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <HAL_InitTick+0xe0>)
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008baa:	f107 0210 	add.w	r2, r7, #16
 8008bae:	f107 0314 	add.w	r3, r7, #20
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7fb f96d 	bl	8003e94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8008bba:	6a3b      	ldr	r3, [r7, #32]
 8008bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d103      	bne.n	8008bcc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008bc4:	f7fb f93a 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8008bc8:	6378      	str	r0, [r7, #52]	; 0x34
 8008bca:	e004      	b.n	8008bd6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8008bcc:	f7fb f936 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd8:	4a23      	ldr	r2, [pc, #140]	; (8008c68 <HAL_InitTick+0xe4>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	0c9b      	lsrs	r3, r3, #18
 8008be0:	3b01      	subs	r3, #1
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008be4:	4b21      	ldr	r3, [pc, #132]	; (8008c6c <HAL_InitTick+0xe8>)
 8008be6:	4a22      	ldr	r2, [pc, #136]	; (8008c70 <HAL_InitTick+0xec>)
 8008be8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008bea:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <HAL_InitTick+0xe8>)
 8008bec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008bf0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008bf2:	4a1e      	ldr	r2, [pc, #120]	; (8008c6c <HAL_InitTick+0xe8>)
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <HAL_InitTick+0xe8>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bfe:	4b1b      	ldr	r3, [pc, #108]	; (8008c6c <HAL_InitTick+0xe8>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c04:	4b19      	ldr	r3, [pc, #100]	; (8008c6c <HAL_InitTick+0xe8>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008c0a:	4818      	ldr	r0, [pc, #96]	; (8008c6c <HAL_InitTick+0xe8>)
 8008c0c:	f7fb ff4c 	bl	8004aa8 <HAL_TIM_Base_Init>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008c16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d11b      	bne.n	8008c56 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008c1e:	4813      	ldr	r0, [pc, #76]	; (8008c6c <HAL_InitTick+0xe8>)
 8008c20:	f7fb ff9a 	bl	8004b58 <HAL_TIM_Base_Start_IT>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008c2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d111      	bne.n	8008c56 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008c32:	2036      	movs	r0, #54	; 0x36
 8008c34:	f7f9 fa10 	bl	8002058 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b0f      	cmp	r3, #15
 8008c3c:	d808      	bhi.n	8008c50 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008c3e:	2200      	movs	r2, #0
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	2036      	movs	r0, #54	; 0x36
 8008c44:	f7f9 f9ec 	bl	8002020 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008c48:	4a0a      	ldr	r2, [pc, #40]	; (8008c74 <HAL_InitTick+0xf0>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	e002      	b.n	8008c56 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008c56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3738      	adds	r7, #56	; 0x38
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	40021000 	.word	0x40021000
 8008c68:	431bde83 	.word	0x431bde83
 8008c6c:	20001420 	.word	0x20001420
 8008c70:	40001000 	.word	0x40001000
 8008c74:	20000000 	.word	0x20000000

08008c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008c7c:	e7fe      	b.n	8008c7c <NMI_Handler+0x4>

08008c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c82:	e7fe      	b.n	8008c82 <HardFault_Handler+0x4>

08008c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c88:	e7fe      	b.n	8008c88 <MemManage_Handler+0x4>

08008c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c8e:	e7fe      	b.n	8008c8e <BusFault_Handler+0x4>

08008c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c90:	b480      	push	{r7}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c94:	e7fe      	b.n	8008c94 <UsageFault_Handler+0x4>

08008c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c96:	b480      	push	{r7}
 8008c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c9a:	bf00      	nop
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008ca8:	4802      	ldr	r0, [pc, #8]	; (8008cb4 <DMA1_Channel1_IRQHandler+0x10>)
 8008caa:	f7f9 feec 	bl	8002a86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	200011ec 	.word	0x200011ec

08008cb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 8008cbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008cc0:	f7fa f9f4 	bl	80030ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008cc4:	bf00      	nop
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008ccc:	4803      	ldr	r0, [pc, #12]	; (8008cdc <TIM6_DAC_IRQHandler+0x14>)
 8008cce:	f7fb ffb3 	bl	8004c38 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8008cd2:	4803      	ldr	r0, [pc, #12]	; (8008ce0 <TIM6_DAC_IRQHandler+0x18>)
 8008cd4:	f7f9 fb01 	bl	80022da <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008cd8:	bf00      	nop
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20001420 	.word	0x20001420
 8008ce0:	200011d8 	.word	0x200011d8

08008ce4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return 1;
 8008ce8:	2301      	movs	r3, #1
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <_kill>:

int _kill(int pid, int sig)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008cfe:	f000 f939 	bl	8008f74 <__errno>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2216      	movs	r2, #22
 8008d06:	601a      	str	r2, [r3, #0]
  return -1;
 8008d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <_exit>:

void _exit (int status)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7ff ffe7 	bl	8008cf4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008d26:	e7fe      	b.n	8008d26 <_exit+0x12>

08008d28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d34:	2300      	movs	r3, #0
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	e00a      	b.n	8008d50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008d3a:	f7fe fd53 	bl	80077e4 <__io_getchar>
 8008d3e:	4601      	mov	r1, r0
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	60ba      	str	r2, [r7, #8]
 8008d46:	b2ca      	uxtb	r2, r1
 8008d48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	dbf0      	blt.n	8008d3a <_read+0x12>
  }

  return len;
 8008d58:	687b      	ldr	r3, [r7, #4]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b086      	sub	sp, #24
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	60f8      	str	r0, [r7, #12]
 8008d6a:	60b9      	str	r1, [r7, #8]
 8008d6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	617b      	str	r3, [r7, #20]
 8008d72:	e009      	b.n	8008d88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	60ba      	str	r2, [r7, #8]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7fe fd1f 	bl	80077c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	3301      	adds	r3, #1
 8008d86:	617b      	str	r3, [r7, #20]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	dbf1      	blt.n	8008d74 <_write+0x12>
  }
  return len;
 8008d90:	687b      	ldr	r3, [r7, #4]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <_close>:

int _close(int file)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
 8008dba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008dc2:	605a      	str	r2, [r3, #4]
  return 0;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <_isatty>:

int _isatty(int file)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b083      	sub	sp, #12
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008dda:	2301      	movs	r3, #1
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e0c:	4a14      	ldr	r2, [pc, #80]	; (8008e60 <_sbrk+0x5c>)
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <_sbrk+0x60>)
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e18:	4b13      	ldr	r3, [pc, #76]	; (8008e68 <_sbrk+0x64>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e20:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <_sbrk+0x64>)
 8008e22:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <_sbrk+0x68>)
 8008e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <_sbrk+0x64>)
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d207      	bcs.n	8008e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e34:	f000 f89e 	bl	8008f74 <__errno>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	220c      	movs	r2, #12
 8008e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e42:	e009      	b.n	8008e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e44:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <_sbrk+0x64>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e4a:	4b07      	ldr	r3, [pc, #28]	; (8008e68 <_sbrk+0x64>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	4a05      	ldr	r2, [pc, #20]	; (8008e68 <_sbrk+0x64>)
 8008e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008e56:	68fb      	ldr	r3, [r7, #12]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200a0000 	.word	0x200a0000
 8008e64:	00000400 	.word	0x00000400
 8008e68:	2000146c 	.word	0x2000146c
 8008e6c:	20001480 	.word	0x20001480

08008e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008e74:	4b06      	ldr	r3, [pc, #24]	; (8008e90 <SystemInit+0x20>)
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7a:	4a05      	ldr	r2, [pc, #20]	; (8008e90 <SystemInit+0x20>)
 8008e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	e000ed00 	.word	0xe000ed00

08008e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008e98:	f7ff ffea 	bl	8008e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e9c:	480c      	ldr	r0, [pc, #48]	; (8008ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8008e9e:	490d      	ldr	r1, [pc, #52]	; (8008ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ea0:	4a0d      	ldr	r2, [pc, #52]	; (8008ed8 <LoopForever+0xe>)
  movs r3, #0
 8008ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ea4:	e002      	b.n	8008eac <LoopCopyDataInit>

08008ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008eaa:	3304      	adds	r3, #4

08008eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008eb0:	d3f9      	bcc.n	8008ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008eb2:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8008eb4:	4c0a      	ldr	r4, [pc, #40]	; (8008ee0 <LoopForever+0x16>)
  movs r3, #0
 8008eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008eb8:	e001      	b.n	8008ebe <LoopFillZerobss>

08008eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ebc:	3204      	adds	r2, #4

08008ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ec0:	d3fb      	bcc.n	8008eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008ec2:	f000 f85d 	bl	8008f80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008ec6:	f7ff f859 	bl	8007f7c <main>

08008eca <LoopForever>:

LoopForever:
    b LoopForever
 8008eca:	e7fe      	b.n	8008eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008ecc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ed4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8008ed8:	0800f2bc 	.word	0x0800f2bc
  ldr r2, =_sbss
 8008edc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8008ee0:	20001480 	.word	0x20001480

08008ee4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008ee4:	e7fe      	b.n	8008ee4 <ADC1_IRQHandler>
	...

08008ee8 <arm_sin_f32>:
 8008ee8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008f68 <arm_sin_f32+0x80>
 8008eec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ef0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008efc:	d504      	bpl.n	8008f08 <arm_sin_f32+0x20>
 8008efe:	ee17 3a90 	vmov	r3, s15
 8008f02:	3b01      	subs	r3, #1
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f0c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008f6c <arm_sin_f32+0x84>
 8008f10:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f14:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008f18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8008f1c:	ee17 3a90 	vmov	r3, s15
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f26:	d21a      	bcs.n	8008f5e <arm_sin_f32+0x76>
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	1c59      	adds	r1, r3, #1
 8008f32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008f36:	4a0e      	ldr	r2, [pc, #56]	; (8008f70 <arm_sin_f32+0x88>)
 8008f38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f40:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008f44:	ed93 7a00 	vldr	s14, [r3]
 8008f48:	edd2 6a00 	vldr	s13, [r2]
 8008f4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008f50:	ee20 0a26 	vmul.f32	s0, s0, s13
 8008f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f58:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008f5c:	4770      	bx	lr
 8008f5e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008f62:	2101      	movs	r1, #1
 8008f64:	2300      	movs	r3, #0
 8008f66:	e7e6      	b.n	8008f36 <arm_sin_f32+0x4e>
 8008f68:	3e22f983 	.word	0x3e22f983
 8008f6c:	44000000 	.word	0x44000000
 8008f70:	0800e5e4 	.word	0x0800e5e4

08008f74 <__errno>:
 8008f74:	4b01      	ldr	r3, [pc, #4]	; (8008f7c <__errno+0x8>)
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	2000001c 	.word	0x2000001c

08008f80 <__libc_init_array>:
 8008f80:	b570      	push	{r4, r5, r6, lr}
 8008f82:	4d0d      	ldr	r5, [pc, #52]	; (8008fb8 <__libc_init_array+0x38>)
 8008f84:	4c0d      	ldr	r4, [pc, #52]	; (8008fbc <__libc_init_array+0x3c>)
 8008f86:	1b64      	subs	r4, r4, r5
 8008f88:	10a4      	asrs	r4, r4, #2
 8008f8a:	2600      	movs	r6, #0
 8008f8c:	42a6      	cmp	r6, r4
 8008f8e:	d109      	bne.n	8008fa4 <__libc_init_array+0x24>
 8008f90:	4d0b      	ldr	r5, [pc, #44]	; (8008fc0 <__libc_init_array+0x40>)
 8008f92:	4c0c      	ldr	r4, [pc, #48]	; (8008fc4 <__libc_init_array+0x44>)
 8008f94:	f005 f990 	bl	800e2b8 <_init>
 8008f98:	1b64      	subs	r4, r4, r5
 8008f9a:	10a4      	asrs	r4, r4, #2
 8008f9c:	2600      	movs	r6, #0
 8008f9e:	42a6      	cmp	r6, r4
 8008fa0:	d105      	bne.n	8008fae <__libc_init_array+0x2e>
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa8:	4798      	blx	r3
 8008faa:	3601      	adds	r6, #1
 8008fac:	e7ee      	b.n	8008f8c <__libc_init_array+0xc>
 8008fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fb2:	4798      	blx	r3
 8008fb4:	3601      	adds	r6, #1
 8008fb6:	e7f2      	b.n	8008f9e <__libc_init_array+0x1e>
 8008fb8:	0800f2b4 	.word	0x0800f2b4
 8008fbc:	0800f2b4 	.word	0x0800f2b4
 8008fc0:	0800f2b4 	.word	0x0800f2b4
 8008fc4:	0800f2b8 	.word	0x0800f2b8

08008fc8 <memcpy>:
 8008fc8:	440a      	add	r2, r1
 8008fca:	4291      	cmp	r1, r2
 8008fcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008fd0:	d100      	bne.n	8008fd4 <memcpy+0xc>
 8008fd2:	4770      	bx	lr
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fde:	4291      	cmp	r1, r2
 8008fe0:	d1f9      	bne.n	8008fd6 <memcpy+0xe>
 8008fe2:	bd10      	pop	{r4, pc}

08008fe4 <memset>:
 8008fe4:	4402      	add	r2, r0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d100      	bne.n	8008fee <memset+0xa>
 8008fec:	4770      	bx	lr
 8008fee:	f803 1b01 	strb.w	r1, [r3], #1
 8008ff2:	e7f9      	b.n	8008fe8 <memset+0x4>

08008ff4 <__cvt>:
 8008ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ff8:	ec55 4b10 	vmov	r4, r5, d0
 8008ffc:	2d00      	cmp	r5, #0
 8008ffe:	460e      	mov	r6, r1
 8009000:	4619      	mov	r1, r3
 8009002:	462b      	mov	r3, r5
 8009004:	bfbb      	ittet	lt
 8009006:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800900a:	461d      	movlt	r5, r3
 800900c:	2300      	movge	r3, #0
 800900e:	232d      	movlt	r3, #45	; 0x2d
 8009010:	700b      	strb	r3, [r1, #0]
 8009012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009014:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009018:	4691      	mov	r9, r2
 800901a:	f023 0820 	bic.w	r8, r3, #32
 800901e:	bfbc      	itt	lt
 8009020:	4622      	movlt	r2, r4
 8009022:	4614      	movlt	r4, r2
 8009024:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009028:	d005      	beq.n	8009036 <__cvt+0x42>
 800902a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800902e:	d100      	bne.n	8009032 <__cvt+0x3e>
 8009030:	3601      	adds	r6, #1
 8009032:	2102      	movs	r1, #2
 8009034:	e000      	b.n	8009038 <__cvt+0x44>
 8009036:	2103      	movs	r1, #3
 8009038:	ab03      	add	r3, sp, #12
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	ab02      	add	r3, sp, #8
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	ec45 4b10 	vmov	d0, r4, r5
 8009044:	4653      	mov	r3, sl
 8009046:	4632      	mov	r2, r6
 8009048:	f001 ff0a 	bl	800ae60 <_dtoa_r>
 800904c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009050:	4607      	mov	r7, r0
 8009052:	d102      	bne.n	800905a <__cvt+0x66>
 8009054:	f019 0f01 	tst.w	r9, #1
 8009058:	d022      	beq.n	80090a0 <__cvt+0xac>
 800905a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800905e:	eb07 0906 	add.w	r9, r7, r6
 8009062:	d110      	bne.n	8009086 <__cvt+0x92>
 8009064:	783b      	ldrb	r3, [r7, #0]
 8009066:	2b30      	cmp	r3, #48	; 0x30
 8009068:	d10a      	bne.n	8009080 <__cvt+0x8c>
 800906a:	2200      	movs	r2, #0
 800906c:	2300      	movs	r3, #0
 800906e:	4620      	mov	r0, r4
 8009070:	4629      	mov	r1, r5
 8009072:	f7f7 fd41 	bl	8000af8 <__aeabi_dcmpeq>
 8009076:	b918      	cbnz	r0, 8009080 <__cvt+0x8c>
 8009078:	f1c6 0601 	rsb	r6, r6, #1
 800907c:	f8ca 6000 	str.w	r6, [sl]
 8009080:	f8da 3000 	ldr.w	r3, [sl]
 8009084:	4499      	add	r9, r3
 8009086:	2200      	movs	r2, #0
 8009088:	2300      	movs	r3, #0
 800908a:	4620      	mov	r0, r4
 800908c:	4629      	mov	r1, r5
 800908e:	f7f7 fd33 	bl	8000af8 <__aeabi_dcmpeq>
 8009092:	b108      	cbz	r0, 8009098 <__cvt+0xa4>
 8009094:	f8cd 900c 	str.w	r9, [sp, #12]
 8009098:	2230      	movs	r2, #48	; 0x30
 800909a:	9b03      	ldr	r3, [sp, #12]
 800909c:	454b      	cmp	r3, r9
 800909e:	d307      	bcc.n	80090b0 <__cvt+0xbc>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090a4:	1bdb      	subs	r3, r3, r7
 80090a6:	4638      	mov	r0, r7
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	b004      	add	sp, #16
 80090ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b0:	1c59      	adds	r1, r3, #1
 80090b2:	9103      	str	r1, [sp, #12]
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e7f0      	b.n	800909a <__cvt+0xa6>

080090b8 <__exponent>:
 80090b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ba:	4603      	mov	r3, r0
 80090bc:	2900      	cmp	r1, #0
 80090be:	bfb8      	it	lt
 80090c0:	4249      	neglt	r1, r1
 80090c2:	f803 2b02 	strb.w	r2, [r3], #2
 80090c6:	bfb4      	ite	lt
 80090c8:	222d      	movlt	r2, #45	; 0x2d
 80090ca:	222b      	movge	r2, #43	; 0x2b
 80090cc:	2909      	cmp	r1, #9
 80090ce:	7042      	strb	r2, [r0, #1]
 80090d0:	dd2a      	ble.n	8009128 <__exponent+0x70>
 80090d2:	f10d 0407 	add.w	r4, sp, #7
 80090d6:	46a4      	mov	ip, r4
 80090d8:	270a      	movs	r7, #10
 80090da:	46a6      	mov	lr, r4
 80090dc:	460a      	mov	r2, r1
 80090de:	fb91 f6f7 	sdiv	r6, r1, r7
 80090e2:	fb07 1516 	mls	r5, r7, r6, r1
 80090e6:	3530      	adds	r5, #48	; 0x30
 80090e8:	2a63      	cmp	r2, #99	; 0x63
 80090ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80090ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090f2:	4631      	mov	r1, r6
 80090f4:	dcf1      	bgt.n	80090da <__exponent+0x22>
 80090f6:	3130      	adds	r1, #48	; 0x30
 80090f8:	f1ae 0502 	sub.w	r5, lr, #2
 80090fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009100:	1c44      	adds	r4, r0, #1
 8009102:	4629      	mov	r1, r5
 8009104:	4561      	cmp	r1, ip
 8009106:	d30a      	bcc.n	800911e <__exponent+0x66>
 8009108:	f10d 0209 	add.w	r2, sp, #9
 800910c:	eba2 020e 	sub.w	r2, r2, lr
 8009110:	4565      	cmp	r5, ip
 8009112:	bf88      	it	hi
 8009114:	2200      	movhi	r2, #0
 8009116:	4413      	add	r3, r2
 8009118:	1a18      	subs	r0, r3, r0
 800911a:	b003      	add	sp, #12
 800911c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009122:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009126:	e7ed      	b.n	8009104 <__exponent+0x4c>
 8009128:	2330      	movs	r3, #48	; 0x30
 800912a:	3130      	adds	r1, #48	; 0x30
 800912c:	7083      	strb	r3, [r0, #2]
 800912e:	70c1      	strb	r1, [r0, #3]
 8009130:	1d03      	adds	r3, r0, #4
 8009132:	e7f1      	b.n	8009118 <__exponent+0x60>

08009134 <_printf_float>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	ed2d 8b02 	vpush	{d8}
 800913c:	b08d      	sub	sp, #52	; 0x34
 800913e:	460c      	mov	r4, r1
 8009140:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009144:	4616      	mov	r6, r2
 8009146:	461f      	mov	r7, r3
 8009148:	4605      	mov	r5, r0
 800914a:	f003 f99d 	bl	800c488 <_localeconv_r>
 800914e:	f8d0 a000 	ldr.w	sl, [r0]
 8009152:	4650      	mov	r0, sl
 8009154:	f7f7 f854 	bl	8000200 <strlen>
 8009158:	2300      	movs	r3, #0
 800915a:	930a      	str	r3, [sp, #40]	; 0x28
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	9305      	str	r3, [sp, #20]
 8009160:	f8d8 3000 	ldr.w	r3, [r8]
 8009164:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009168:	3307      	adds	r3, #7
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	f103 0208 	add.w	r2, r3, #8
 8009172:	f8c8 2000 	str.w	r2, [r8]
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800917e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009182:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009186:	9307      	str	r3, [sp, #28]
 8009188:	f8cd 8018 	str.w	r8, [sp, #24]
 800918c:	ee08 0a10 	vmov	s16, r0
 8009190:	4b9f      	ldr	r3, [pc, #636]	; (8009410 <_printf_float+0x2dc>)
 8009192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800919a:	f7f7 fcdf 	bl	8000b5c <__aeabi_dcmpun>
 800919e:	bb88      	cbnz	r0, 8009204 <_printf_float+0xd0>
 80091a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091a4:	4b9a      	ldr	r3, [pc, #616]	; (8009410 <_printf_float+0x2dc>)
 80091a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091aa:	f7f7 fcb9 	bl	8000b20 <__aeabi_dcmple>
 80091ae:	bb48      	cbnz	r0, 8009204 <_printf_float+0xd0>
 80091b0:	2200      	movs	r2, #0
 80091b2:	2300      	movs	r3, #0
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	f7f7 fca8 	bl	8000b0c <__aeabi_dcmplt>
 80091bc:	b110      	cbz	r0, 80091c4 <_printf_float+0x90>
 80091be:	232d      	movs	r3, #45	; 0x2d
 80091c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091c4:	4b93      	ldr	r3, [pc, #588]	; (8009414 <_printf_float+0x2e0>)
 80091c6:	4894      	ldr	r0, [pc, #592]	; (8009418 <_printf_float+0x2e4>)
 80091c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091cc:	bf94      	ite	ls
 80091ce:	4698      	movls	r8, r3
 80091d0:	4680      	movhi	r8, r0
 80091d2:	2303      	movs	r3, #3
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	9b05      	ldr	r3, [sp, #20]
 80091d8:	f023 0204 	bic.w	r2, r3, #4
 80091dc:	6022      	str	r2, [r4, #0]
 80091de:	f04f 0900 	mov.w	r9, #0
 80091e2:	9700      	str	r7, [sp, #0]
 80091e4:	4633      	mov	r3, r6
 80091e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80091e8:	4621      	mov	r1, r4
 80091ea:	4628      	mov	r0, r5
 80091ec:	f000 f9d8 	bl	80095a0 <_printf_common>
 80091f0:	3001      	adds	r0, #1
 80091f2:	f040 8090 	bne.w	8009316 <_printf_float+0x1e2>
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091fa:	b00d      	add	sp, #52	; 0x34
 80091fc:	ecbd 8b02 	vpop	{d8}
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	4642      	mov	r2, r8
 8009206:	464b      	mov	r3, r9
 8009208:	4640      	mov	r0, r8
 800920a:	4649      	mov	r1, r9
 800920c:	f7f7 fca6 	bl	8000b5c <__aeabi_dcmpun>
 8009210:	b140      	cbz	r0, 8009224 <_printf_float+0xf0>
 8009212:	464b      	mov	r3, r9
 8009214:	2b00      	cmp	r3, #0
 8009216:	bfbc      	itt	lt
 8009218:	232d      	movlt	r3, #45	; 0x2d
 800921a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800921e:	487f      	ldr	r0, [pc, #508]	; (800941c <_printf_float+0x2e8>)
 8009220:	4b7f      	ldr	r3, [pc, #508]	; (8009420 <_printf_float+0x2ec>)
 8009222:	e7d1      	b.n	80091c8 <_printf_float+0x94>
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800922a:	9206      	str	r2, [sp, #24]
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	d13f      	bne.n	80092b0 <_printf_float+0x17c>
 8009230:	2306      	movs	r3, #6
 8009232:	6063      	str	r3, [r4, #4]
 8009234:	9b05      	ldr	r3, [sp, #20]
 8009236:	6861      	ldr	r1, [r4, #4]
 8009238:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800923c:	2300      	movs	r3, #0
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	ab0a      	add	r3, sp, #40	; 0x28
 8009242:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009246:	ab09      	add	r3, sp, #36	; 0x24
 8009248:	ec49 8b10 	vmov	d0, r8, r9
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009254:	4628      	mov	r0, r5
 8009256:	f7ff fecd 	bl	8008ff4 <__cvt>
 800925a:	9b06      	ldr	r3, [sp, #24]
 800925c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800925e:	2b47      	cmp	r3, #71	; 0x47
 8009260:	4680      	mov	r8, r0
 8009262:	d108      	bne.n	8009276 <_printf_float+0x142>
 8009264:	1cc8      	adds	r0, r1, #3
 8009266:	db02      	blt.n	800926e <_printf_float+0x13a>
 8009268:	6863      	ldr	r3, [r4, #4]
 800926a:	4299      	cmp	r1, r3
 800926c:	dd41      	ble.n	80092f2 <_printf_float+0x1be>
 800926e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009272:	fa5f fb8b 	uxtb.w	fp, fp
 8009276:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800927a:	d820      	bhi.n	80092be <_printf_float+0x18a>
 800927c:	3901      	subs	r1, #1
 800927e:	465a      	mov	r2, fp
 8009280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009284:	9109      	str	r1, [sp, #36]	; 0x24
 8009286:	f7ff ff17 	bl	80090b8 <__exponent>
 800928a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800928c:	1813      	adds	r3, r2, r0
 800928e:	2a01      	cmp	r2, #1
 8009290:	4681      	mov	r9, r0
 8009292:	6123      	str	r3, [r4, #16]
 8009294:	dc02      	bgt.n	800929c <_printf_float+0x168>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	07d2      	lsls	r2, r2, #31
 800929a:	d501      	bpl.n	80092a0 <_printf_float+0x16c>
 800929c:	3301      	adds	r3, #1
 800929e:	6123      	str	r3, [r4, #16]
 80092a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d09c      	beq.n	80091e2 <_printf_float+0xae>
 80092a8:	232d      	movs	r3, #45	; 0x2d
 80092aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092ae:	e798      	b.n	80091e2 <_printf_float+0xae>
 80092b0:	9a06      	ldr	r2, [sp, #24]
 80092b2:	2a47      	cmp	r2, #71	; 0x47
 80092b4:	d1be      	bne.n	8009234 <_printf_float+0x100>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1bc      	bne.n	8009234 <_printf_float+0x100>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e7b9      	b.n	8009232 <_printf_float+0xfe>
 80092be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092c2:	d118      	bne.n	80092f6 <_printf_float+0x1c2>
 80092c4:	2900      	cmp	r1, #0
 80092c6:	6863      	ldr	r3, [r4, #4]
 80092c8:	dd0b      	ble.n	80092e2 <_printf_float+0x1ae>
 80092ca:	6121      	str	r1, [r4, #16]
 80092cc:	b913      	cbnz	r3, 80092d4 <_printf_float+0x1a0>
 80092ce:	6822      	ldr	r2, [r4, #0]
 80092d0:	07d0      	lsls	r0, r2, #31
 80092d2:	d502      	bpl.n	80092da <_printf_float+0x1a6>
 80092d4:	3301      	adds	r3, #1
 80092d6:	440b      	add	r3, r1
 80092d8:	6123      	str	r3, [r4, #16]
 80092da:	65a1      	str	r1, [r4, #88]	; 0x58
 80092dc:	f04f 0900 	mov.w	r9, #0
 80092e0:	e7de      	b.n	80092a0 <_printf_float+0x16c>
 80092e2:	b913      	cbnz	r3, 80092ea <_printf_float+0x1b6>
 80092e4:	6822      	ldr	r2, [r4, #0]
 80092e6:	07d2      	lsls	r2, r2, #31
 80092e8:	d501      	bpl.n	80092ee <_printf_float+0x1ba>
 80092ea:	3302      	adds	r3, #2
 80092ec:	e7f4      	b.n	80092d8 <_printf_float+0x1a4>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e7f2      	b.n	80092d8 <_printf_float+0x1a4>
 80092f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	4299      	cmp	r1, r3
 80092fa:	db05      	blt.n	8009308 <_printf_float+0x1d4>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	6121      	str	r1, [r4, #16]
 8009300:	07d8      	lsls	r0, r3, #31
 8009302:	d5ea      	bpl.n	80092da <_printf_float+0x1a6>
 8009304:	1c4b      	adds	r3, r1, #1
 8009306:	e7e7      	b.n	80092d8 <_printf_float+0x1a4>
 8009308:	2900      	cmp	r1, #0
 800930a:	bfd4      	ite	le
 800930c:	f1c1 0202 	rsble	r2, r1, #2
 8009310:	2201      	movgt	r2, #1
 8009312:	4413      	add	r3, r2
 8009314:	e7e0      	b.n	80092d8 <_printf_float+0x1a4>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	055a      	lsls	r2, r3, #21
 800931a:	d407      	bmi.n	800932c <_printf_float+0x1f8>
 800931c:	6923      	ldr	r3, [r4, #16]
 800931e:	4642      	mov	r2, r8
 8009320:	4631      	mov	r1, r6
 8009322:	4628      	mov	r0, r5
 8009324:	47b8      	blx	r7
 8009326:	3001      	adds	r0, #1
 8009328:	d12c      	bne.n	8009384 <_printf_float+0x250>
 800932a:	e764      	b.n	80091f6 <_printf_float+0xc2>
 800932c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009330:	f240 80e0 	bls.w	80094f4 <_printf_float+0x3c0>
 8009334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	f7f7 fbdc 	bl	8000af8 <__aeabi_dcmpeq>
 8009340:	2800      	cmp	r0, #0
 8009342:	d034      	beq.n	80093ae <_printf_float+0x27a>
 8009344:	4a37      	ldr	r2, [pc, #220]	; (8009424 <_printf_float+0x2f0>)
 8009346:	2301      	movs	r3, #1
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	f43f af51 	beq.w	80091f6 <_printf_float+0xc2>
 8009354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009358:	429a      	cmp	r2, r3
 800935a:	db02      	blt.n	8009362 <_printf_float+0x22e>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	07d8      	lsls	r0, r3, #31
 8009360:	d510      	bpl.n	8009384 <_printf_float+0x250>
 8009362:	ee18 3a10 	vmov	r3, s16
 8009366:	4652      	mov	r2, sl
 8009368:	4631      	mov	r1, r6
 800936a:	4628      	mov	r0, r5
 800936c:	47b8      	blx	r7
 800936e:	3001      	adds	r0, #1
 8009370:	f43f af41 	beq.w	80091f6 <_printf_float+0xc2>
 8009374:	f04f 0800 	mov.w	r8, #0
 8009378:	f104 091a 	add.w	r9, r4, #26
 800937c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937e:	3b01      	subs	r3, #1
 8009380:	4543      	cmp	r3, r8
 8009382:	dc09      	bgt.n	8009398 <_printf_float+0x264>
 8009384:	6823      	ldr	r3, [r4, #0]
 8009386:	079b      	lsls	r3, r3, #30
 8009388:	f100 8105 	bmi.w	8009596 <_printf_float+0x462>
 800938c:	68e0      	ldr	r0, [r4, #12]
 800938e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009390:	4298      	cmp	r0, r3
 8009392:	bfb8      	it	lt
 8009394:	4618      	movlt	r0, r3
 8009396:	e730      	b.n	80091fa <_printf_float+0xc6>
 8009398:	2301      	movs	r3, #1
 800939a:	464a      	mov	r2, r9
 800939c:	4631      	mov	r1, r6
 800939e:	4628      	mov	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f af27 	beq.w	80091f6 <_printf_float+0xc2>
 80093a8:	f108 0801 	add.w	r8, r8, #1
 80093ac:	e7e6      	b.n	800937c <_printf_float+0x248>
 80093ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dc39      	bgt.n	8009428 <_printf_float+0x2f4>
 80093b4:	4a1b      	ldr	r2, [pc, #108]	; (8009424 <_printf_float+0x2f0>)
 80093b6:	2301      	movs	r3, #1
 80093b8:	4631      	mov	r1, r6
 80093ba:	4628      	mov	r0, r5
 80093bc:	47b8      	blx	r7
 80093be:	3001      	adds	r0, #1
 80093c0:	f43f af19 	beq.w	80091f6 <_printf_float+0xc2>
 80093c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093c8:	4313      	orrs	r3, r2
 80093ca:	d102      	bne.n	80093d2 <_printf_float+0x29e>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	07d9      	lsls	r1, r3, #31
 80093d0:	d5d8      	bpl.n	8009384 <_printf_float+0x250>
 80093d2:	ee18 3a10 	vmov	r3, s16
 80093d6:	4652      	mov	r2, sl
 80093d8:	4631      	mov	r1, r6
 80093da:	4628      	mov	r0, r5
 80093dc:	47b8      	blx	r7
 80093de:	3001      	adds	r0, #1
 80093e0:	f43f af09 	beq.w	80091f6 <_printf_float+0xc2>
 80093e4:	f04f 0900 	mov.w	r9, #0
 80093e8:	f104 0a1a 	add.w	sl, r4, #26
 80093ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ee:	425b      	negs	r3, r3
 80093f0:	454b      	cmp	r3, r9
 80093f2:	dc01      	bgt.n	80093f8 <_printf_float+0x2c4>
 80093f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093f6:	e792      	b.n	800931e <_printf_float+0x1ea>
 80093f8:	2301      	movs	r3, #1
 80093fa:	4652      	mov	r2, sl
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	f43f aef7 	beq.w	80091f6 <_printf_float+0xc2>
 8009408:	f109 0901 	add.w	r9, r9, #1
 800940c:	e7ee      	b.n	80093ec <_printf_float+0x2b8>
 800940e:	bf00      	nop
 8009410:	7fefffff 	.word	0x7fefffff
 8009414:	0800edec 	.word	0x0800edec
 8009418:	0800edf0 	.word	0x0800edf0
 800941c:	0800edf8 	.word	0x0800edf8
 8009420:	0800edf4 	.word	0x0800edf4
 8009424:	0800f259 	.word	0x0800f259
 8009428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800942a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800942c:	429a      	cmp	r2, r3
 800942e:	bfa8      	it	ge
 8009430:	461a      	movge	r2, r3
 8009432:	2a00      	cmp	r2, #0
 8009434:	4691      	mov	r9, r2
 8009436:	dc37      	bgt.n	80094a8 <_printf_float+0x374>
 8009438:	f04f 0b00 	mov.w	fp, #0
 800943c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009440:	f104 021a 	add.w	r2, r4, #26
 8009444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	eba3 0309 	sub.w	r3, r3, r9
 800944c:	455b      	cmp	r3, fp
 800944e:	dc33      	bgt.n	80094b8 <_printf_float+0x384>
 8009450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009454:	429a      	cmp	r2, r3
 8009456:	db3b      	blt.n	80094d0 <_printf_float+0x39c>
 8009458:	6823      	ldr	r3, [r4, #0]
 800945a:	07da      	lsls	r2, r3, #31
 800945c:	d438      	bmi.n	80094d0 <_printf_float+0x39c>
 800945e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009460:	9a05      	ldr	r2, [sp, #20]
 8009462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009464:	1a9a      	subs	r2, r3, r2
 8009466:	eba3 0901 	sub.w	r9, r3, r1
 800946a:	4591      	cmp	r9, r2
 800946c:	bfa8      	it	ge
 800946e:	4691      	movge	r9, r2
 8009470:	f1b9 0f00 	cmp.w	r9, #0
 8009474:	dc35      	bgt.n	80094e2 <_printf_float+0x3ae>
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800947e:	f104 0a1a 	add.w	sl, r4, #26
 8009482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	eba3 0309 	sub.w	r3, r3, r9
 800948c:	4543      	cmp	r3, r8
 800948e:	f77f af79 	ble.w	8009384 <_printf_float+0x250>
 8009492:	2301      	movs	r3, #1
 8009494:	4652      	mov	r2, sl
 8009496:	4631      	mov	r1, r6
 8009498:	4628      	mov	r0, r5
 800949a:	47b8      	blx	r7
 800949c:	3001      	adds	r0, #1
 800949e:	f43f aeaa 	beq.w	80091f6 <_printf_float+0xc2>
 80094a2:	f108 0801 	add.w	r8, r8, #1
 80094a6:	e7ec      	b.n	8009482 <_printf_float+0x34e>
 80094a8:	4613      	mov	r3, r2
 80094aa:	4631      	mov	r1, r6
 80094ac:	4642      	mov	r2, r8
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b8      	blx	r7
 80094b2:	3001      	adds	r0, #1
 80094b4:	d1c0      	bne.n	8009438 <_printf_float+0x304>
 80094b6:	e69e      	b.n	80091f6 <_printf_float+0xc2>
 80094b8:	2301      	movs	r3, #1
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	9205      	str	r2, [sp, #20]
 80094c0:	47b8      	blx	r7
 80094c2:	3001      	adds	r0, #1
 80094c4:	f43f ae97 	beq.w	80091f6 <_printf_float+0xc2>
 80094c8:	9a05      	ldr	r2, [sp, #20]
 80094ca:	f10b 0b01 	add.w	fp, fp, #1
 80094ce:	e7b9      	b.n	8009444 <_printf_float+0x310>
 80094d0:	ee18 3a10 	vmov	r3, s16
 80094d4:	4652      	mov	r2, sl
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	d1be      	bne.n	800945e <_printf_float+0x32a>
 80094e0:	e689      	b.n	80091f6 <_printf_float+0xc2>
 80094e2:	9a05      	ldr	r2, [sp, #20]
 80094e4:	464b      	mov	r3, r9
 80094e6:	4442      	add	r2, r8
 80094e8:	4631      	mov	r1, r6
 80094ea:	4628      	mov	r0, r5
 80094ec:	47b8      	blx	r7
 80094ee:	3001      	adds	r0, #1
 80094f0:	d1c1      	bne.n	8009476 <_printf_float+0x342>
 80094f2:	e680      	b.n	80091f6 <_printf_float+0xc2>
 80094f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094f6:	2a01      	cmp	r2, #1
 80094f8:	dc01      	bgt.n	80094fe <_printf_float+0x3ca>
 80094fa:	07db      	lsls	r3, r3, #31
 80094fc:	d538      	bpl.n	8009570 <_printf_float+0x43c>
 80094fe:	2301      	movs	r3, #1
 8009500:	4642      	mov	r2, r8
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	f43f ae74 	beq.w	80091f6 <_printf_float+0xc2>
 800950e:	ee18 3a10 	vmov	r3, s16
 8009512:	4652      	mov	r2, sl
 8009514:	4631      	mov	r1, r6
 8009516:	4628      	mov	r0, r5
 8009518:	47b8      	blx	r7
 800951a:	3001      	adds	r0, #1
 800951c:	f43f ae6b 	beq.w	80091f6 <_printf_float+0xc2>
 8009520:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009524:	2200      	movs	r2, #0
 8009526:	2300      	movs	r3, #0
 8009528:	f7f7 fae6 	bl	8000af8 <__aeabi_dcmpeq>
 800952c:	b9d8      	cbnz	r0, 8009566 <_printf_float+0x432>
 800952e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009530:	f108 0201 	add.w	r2, r8, #1
 8009534:	3b01      	subs	r3, #1
 8009536:	4631      	mov	r1, r6
 8009538:	4628      	mov	r0, r5
 800953a:	47b8      	blx	r7
 800953c:	3001      	adds	r0, #1
 800953e:	d10e      	bne.n	800955e <_printf_float+0x42a>
 8009540:	e659      	b.n	80091f6 <_printf_float+0xc2>
 8009542:	2301      	movs	r3, #1
 8009544:	4652      	mov	r2, sl
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae52 	beq.w	80091f6 <_printf_float+0xc2>
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009558:	3b01      	subs	r3, #1
 800955a:	4543      	cmp	r3, r8
 800955c:	dcf1      	bgt.n	8009542 <_printf_float+0x40e>
 800955e:	464b      	mov	r3, r9
 8009560:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009564:	e6dc      	b.n	8009320 <_printf_float+0x1ec>
 8009566:	f04f 0800 	mov.w	r8, #0
 800956a:	f104 0a1a 	add.w	sl, r4, #26
 800956e:	e7f2      	b.n	8009556 <_printf_float+0x422>
 8009570:	2301      	movs	r3, #1
 8009572:	4642      	mov	r2, r8
 8009574:	e7df      	b.n	8009536 <_printf_float+0x402>
 8009576:	2301      	movs	r3, #1
 8009578:	464a      	mov	r2, r9
 800957a:	4631      	mov	r1, r6
 800957c:	4628      	mov	r0, r5
 800957e:	47b8      	blx	r7
 8009580:	3001      	adds	r0, #1
 8009582:	f43f ae38 	beq.w	80091f6 <_printf_float+0xc2>
 8009586:	f108 0801 	add.w	r8, r8, #1
 800958a:	68e3      	ldr	r3, [r4, #12]
 800958c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800958e:	1a5b      	subs	r3, r3, r1
 8009590:	4543      	cmp	r3, r8
 8009592:	dcf0      	bgt.n	8009576 <_printf_float+0x442>
 8009594:	e6fa      	b.n	800938c <_printf_float+0x258>
 8009596:	f04f 0800 	mov.w	r8, #0
 800959a:	f104 0919 	add.w	r9, r4, #25
 800959e:	e7f4      	b.n	800958a <_printf_float+0x456>

080095a0 <_printf_common>:
 80095a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095a4:	4616      	mov	r6, r2
 80095a6:	4699      	mov	r9, r3
 80095a8:	688a      	ldr	r2, [r1, #8]
 80095aa:	690b      	ldr	r3, [r1, #16]
 80095ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b0:	4293      	cmp	r3, r2
 80095b2:	bfb8      	it	lt
 80095b4:	4613      	movlt	r3, r2
 80095b6:	6033      	str	r3, [r6, #0]
 80095b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095bc:	4607      	mov	r7, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	b10a      	cbz	r2, 80095c6 <_printf_common+0x26>
 80095c2:	3301      	adds	r3, #1
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	0699      	lsls	r1, r3, #26
 80095ca:	bf42      	ittt	mi
 80095cc:	6833      	ldrmi	r3, [r6, #0]
 80095ce:	3302      	addmi	r3, #2
 80095d0:	6033      	strmi	r3, [r6, #0]
 80095d2:	6825      	ldr	r5, [r4, #0]
 80095d4:	f015 0506 	ands.w	r5, r5, #6
 80095d8:	d106      	bne.n	80095e8 <_printf_common+0x48>
 80095da:	f104 0a19 	add.w	sl, r4, #25
 80095de:	68e3      	ldr	r3, [r4, #12]
 80095e0:	6832      	ldr	r2, [r6, #0]
 80095e2:	1a9b      	subs	r3, r3, r2
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	dc26      	bgt.n	8009636 <_printf_common+0x96>
 80095e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095ec:	1e13      	subs	r3, r2, #0
 80095ee:	6822      	ldr	r2, [r4, #0]
 80095f0:	bf18      	it	ne
 80095f2:	2301      	movne	r3, #1
 80095f4:	0692      	lsls	r2, r2, #26
 80095f6:	d42b      	bmi.n	8009650 <_printf_common+0xb0>
 80095f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095fc:	4649      	mov	r1, r9
 80095fe:	4638      	mov	r0, r7
 8009600:	47c0      	blx	r8
 8009602:	3001      	adds	r0, #1
 8009604:	d01e      	beq.n	8009644 <_printf_common+0xa4>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	68e5      	ldr	r5, [r4, #12]
 800960a:	6832      	ldr	r2, [r6, #0]
 800960c:	f003 0306 	and.w	r3, r3, #6
 8009610:	2b04      	cmp	r3, #4
 8009612:	bf08      	it	eq
 8009614:	1aad      	subeq	r5, r5, r2
 8009616:	68a3      	ldr	r3, [r4, #8]
 8009618:	6922      	ldr	r2, [r4, #16]
 800961a:	bf0c      	ite	eq
 800961c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009620:	2500      	movne	r5, #0
 8009622:	4293      	cmp	r3, r2
 8009624:	bfc4      	itt	gt
 8009626:	1a9b      	subgt	r3, r3, r2
 8009628:	18ed      	addgt	r5, r5, r3
 800962a:	2600      	movs	r6, #0
 800962c:	341a      	adds	r4, #26
 800962e:	42b5      	cmp	r5, r6
 8009630:	d11a      	bne.n	8009668 <_printf_common+0xc8>
 8009632:	2000      	movs	r0, #0
 8009634:	e008      	b.n	8009648 <_printf_common+0xa8>
 8009636:	2301      	movs	r3, #1
 8009638:	4652      	mov	r2, sl
 800963a:	4649      	mov	r1, r9
 800963c:	4638      	mov	r0, r7
 800963e:	47c0      	blx	r8
 8009640:	3001      	adds	r0, #1
 8009642:	d103      	bne.n	800964c <_printf_common+0xac>
 8009644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964c:	3501      	adds	r5, #1
 800964e:	e7c6      	b.n	80095de <_printf_common+0x3e>
 8009650:	18e1      	adds	r1, r4, r3
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	2030      	movs	r0, #48	; 0x30
 8009656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800965a:	4422      	add	r2, r4
 800965c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009664:	3302      	adds	r3, #2
 8009666:	e7c7      	b.n	80095f8 <_printf_common+0x58>
 8009668:	2301      	movs	r3, #1
 800966a:	4622      	mov	r2, r4
 800966c:	4649      	mov	r1, r9
 800966e:	4638      	mov	r0, r7
 8009670:	47c0      	blx	r8
 8009672:	3001      	adds	r0, #1
 8009674:	d0e6      	beq.n	8009644 <_printf_common+0xa4>
 8009676:	3601      	adds	r6, #1
 8009678:	e7d9      	b.n	800962e <_printf_common+0x8e>
	...

0800967c <_printf_i>:
 800967c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	7e0f      	ldrb	r7, [r1, #24]
 8009682:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009684:	2f78      	cmp	r7, #120	; 0x78
 8009686:	4691      	mov	r9, r2
 8009688:	4680      	mov	r8, r0
 800968a:	460c      	mov	r4, r1
 800968c:	469a      	mov	sl, r3
 800968e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009692:	d807      	bhi.n	80096a4 <_printf_i+0x28>
 8009694:	2f62      	cmp	r7, #98	; 0x62
 8009696:	d80a      	bhi.n	80096ae <_printf_i+0x32>
 8009698:	2f00      	cmp	r7, #0
 800969a:	f000 80d8 	beq.w	800984e <_printf_i+0x1d2>
 800969e:	2f58      	cmp	r7, #88	; 0x58
 80096a0:	f000 80a3 	beq.w	80097ea <_printf_i+0x16e>
 80096a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096ac:	e03a      	b.n	8009724 <_printf_i+0xa8>
 80096ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096b2:	2b15      	cmp	r3, #21
 80096b4:	d8f6      	bhi.n	80096a4 <_printf_i+0x28>
 80096b6:	a101      	add	r1, pc, #4	; (adr r1, 80096bc <_printf_i+0x40>)
 80096b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096bc:	08009715 	.word	0x08009715
 80096c0:	08009729 	.word	0x08009729
 80096c4:	080096a5 	.word	0x080096a5
 80096c8:	080096a5 	.word	0x080096a5
 80096cc:	080096a5 	.word	0x080096a5
 80096d0:	080096a5 	.word	0x080096a5
 80096d4:	08009729 	.word	0x08009729
 80096d8:	080096a5 	.word	0x080096a5
 80096dc:	080096a5 	.word	0x080096a5
 80096e0:	080096a5 	.word	0x080096a5
 80096e4:	080096a5 	.word	0x080096a5
 80096e8:	08009835 	.word	0x08009835
 80096ec:	08009759 	.word	0x08009759
 80096f0:	08009817 	.word	0x08009817
 80096f4:	080096a5 	.word	0x080096a5
 80096f8:	080096a5 	.word	0x080096a5
 80096fc:	08009857 	.word	0x08009857
 8009700:	080096a5 	.word	0x080096a5
 8009704:	08009759 	.word	0x08009759
 8009708:	080096a5 	.word	0x080096a5
 800970c:	080096a5 	.word	0x080096a5
 8009710:	0800981f 	.word	0x0800981f
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	1d1a      	adds	r2, r3, #4
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	602a      	str	r2, [r5, #0]
 800971c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009724:	2301      	movs	r3, #1
 8009726:	e0a3      	b.n	8009870 <_printf_i+0x1f4>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	6829      	ldr	r1, [r5, #0]
 800972c:	0606      	lsls	r6, r0, #24
 800972e:	f101 0304 	add.w	r3, r1, #4
 8009732:	d50a      	bpl.n	800974a <_printf_i+0xce>
 8009734:	680e      	ldr	r6, [r1, #0]
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	2e00      	cmp	r6, #0
 800973a:	da03      	bge.n	8009744 <_printf_i+0xc8>
 800973c:	232d      	movs	r3, #45	; 0x2d
 800973e:	4276      	negs	r6, r6
 8009740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009744:	485e      	ldr	r0, [pc, #376]	; (80098c0 <_printf_i+0x244>)
 8009746:	230a      	movs	r3, #10
 8009748:	e019      	b.n	800977e <_printf_i+0x102>
 800974a:	680e      	ldr	r6, [r1, #0]
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009752:	bf18      	it	ne
 8009754:	b236      	sxthne	r6, r6
 8009756:	e7ef      	b.n	8009738 <_printf_i+0xbc>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1d19      	adds	r1, r3, #4
 800975e:	6029      	str	r1, [r5, #0]
 8009760:	0601      	lsls	r1, r0, #24
 8009762:	d501      	bpl.n	8009768 <_printf_i+0xec>
 8009764:	681e      	ldr	r6, [r3, #0]
 8009766:	e002      	b.n	800976e <_printf_i+0xf2>
 8009768:	0646      	lsls	r6, r0, #25
 800976a:	d5fb      	bpl.n	8009764 <_printf_i+0xe8>
 800976c:	881e      	ldrh	r6, [r3, #0]
 800976e:	4854      	ldr	r0, [pc, #336]	; (80098c0 <_printf_i+0x244>)
 8009770:	2f6f      	cmp	r7, #111	; 0x6f
 8009772:	bf0c      	ite	eq
 8009774:	2308      	moveq	r3, #8
 8009776:	230a      	movne	r3, #10
 8009778:	2100      	movs	r1, #0
 800977a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800977e:	6865      	ldr	r5, [r4, #4]
 8009780:	60a5      	str	r5, [r4, #8]
 8009782:	2d00      	cmp	r5, #0
 8009784:	bfa2      	ittt	ge
 8009786:	6821      	ldrge	r1, [r4, #0]
 8009788:	f021 0104 	bicge.w	r1, r1, #4
 800978c:	6021      	strge	r1, [r4, #0]
 800978e:	b90e      	cbnz	r6, 8009794 <_printf_i+0x118>
 8009790:	2d00      	cmp	r5, #0
 8009792:	d04d      	beq.n	8009830 <_printf_i+0x1b4>
 8009794:	4615      	mov	r5, r2
 8009796:	fbb6 f1f3 	udiv	r1, r6, r3
 800979a:	fb03 6711 	mls	r7, r3, r1, r6
 800979e:	5dc7      	ldrb	r7, [r0, r7]
 80097a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097a4:	4637      	mov	r7, r6
 80097a6:	42bb      	cmp	r3, r7
 80097a8:	460e      	mov	r6, r1
 80097aa:	d9f4      	bls.n	8009796 <_printf_i+0x11a>
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d10b      	bne.n	80097c8 <_printf_i+0x14c>
 80097b0:	6823      	ldr	r3, [r4, #0]
 80097b2:	07de      	lsls	r6, r3, #31
 80097b4:	d508      	bpl.n	80097c8 <_printf_i+0x14c>
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	6861      	ldr	r1, [r4, #4]
 80097ba:	4299      	cmp	r1, r3
 80097bc:	bfde      	ittt	le
 80097be:	2330      	movle	r3, #48	; 0x30
 80097c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80097c8:	1b52      	subs	r2, r2, r5
 80097ca:	6122      	str	r2, [r4, #16]
 80097cc:	f8cd a000 	str.w	sl, [sp]
 80097d0:	464b      	mov	r3, r9
 80097d2:	aa03      	add	r2, sp, #12
 80097d4:	4621      	mov	r1, r4
 80097d6:	4640      	mov	r0, r8
 80097d8:	f7ff fee2 	bl	80095a0 <_printf_common>
 80097dc:	3001      	adds	r0, #1
 80097de:	d14c      	bne.n	800987a <_printf_i+0x1fe>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097e4:	b004      	add	sp, #16
 80097e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ea:	4835      	ldr	r0, [pc, #212]	; (80098c0 <_printf_i+0x244>)
 80097ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097f0:	6829      	ldr	r1, [r5, #0]
 80097f2:	6823      	ldr	r3, [r4, #0]
 80097f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80097f8:	6029      	str	r1, [r5, #0]
 80097fa:	061d      	lsls	r5, r3, #24
 80097fc:	d514      	bpl.n	8009828 <_printf_i+0x1ac>
 80097fe:	07df      	lsls	r7, r3, #31
 8009800:	bf44      	itt	mi
 8009802:	f043 0320 	orrmi.w	r3, r3, #32
 8009806:	6023      	strmi	r3, [r4, #0]
 8009808:	b91e      	cbnz	r6, 8009812 <_printf_i+0x196>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	f023 0320 	bic.w	r3, r3, #32
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	2310      	movs	r3, #16
 8009814:	e7b0      	b.n	8009778 <_printf_i+0xfc>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	f043 0320 	orr.w	r3, r3, #32
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	2378      	movs	r3, #120	; 0x78
 8009820:	4828      	ldr	r0, [pc, #160]	; (80098c4 <_printf_i+0x248>)
 8009822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009826:	e7e3      	b.n	80097f0 <_printf_i+0x174>
 8009828:	0659      	lsls	r1, r3, #25
 800982a:	bf48      	it	mi
 800982c:	b2b6      	uxthmi	r6, r6
 800982e:	e7e6      	b.n	80097fe <_printf_i+0x182>
 8009830:	4615      	mov	r5, r2
 8009832:	e7bb      	b.n	80097ac <_printf_i+0x130>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	6826      	ldr	r6, [r4, #0]
 8009838:	6961      	ldr	r1, [r4, #20]
 800983a:	1d18      	adds	r0, r3, #4
 800983c:	6028      	str	r0, [r5, #0]
 800983e:	0635      	lsls	r5, r6, #24
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	d501      	bpl.n	8009848 <_printf_i+0x1cc>
 8009844:	6019      	str	r1, [r3, #0]
 8009846:	e002      	b.n	800984e <_printf_i+0x1d2>
 8009848:	0670      	lsls	r0, r6, #25
 800984a:	d5fb      	bpl.n	8009844 <_printf_i+0x1c8>
 800984c:	8019      	strh	r1, [r3, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	4615      	mov	r5, r2
 8009854:	e7ba      	b.n	80097cc <_printf_i+0x150>
 8009856:	682b      	ldr	r3, [r5, #0]
 8009858:	1d1a      	adds	r2, r3, #4
 800985a:	602a      	str	r2, [r5, #0]
 800985c:	681d      	ldr	r5, [r3, #0]
 800985e:	6862      	ldr	r2, [r4, #4]
 8009860:	2100      	movs	r1, #0
 8009862:	4628      	mov	r0, r5
 8009864:	f7f6 fcd4 	bl	8000210 <memchr>
 8009868:	b108      	cbz	r0, 800986e <_printf_i+0x1f2>
 800986a:	1b40      	subs	r0, r0, r5
 800986c:	6060      	str	r0, [r4, #4]
 800986e:	6863      	ldr	r3, [r4, #4]
 8009870:	6123      	str	r3, [r4, #16]
 8009872:	2300      	movs	r3, #0
 8009874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009878:	e7a8      	b.n	80097cc <_printf_i+0x150>
 800987a:	6923      	ldr	r3, [r4, #16]
 800987c:	462a      	mov	r2, r5
 800987e:	4649      	mov	r1, r9
 8009880:	4640      	mov	r0, r8
 8009882:	47d0      	blx	sl
 8009884:	3001      	adds	r0, #1
 8009886:	d0ab      	beq.n	80097e0 <_printf_i+0x164>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	079b      	lsls	r3, r3, #30
 800988c:	d413      	bmi.n	80098b6 <_printf_i+0x23a>
 800988e:	68e0      	ldr	r0, [r4, #12]
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	4298      	cmp	r0, r3
 8009894:	bfb8      	it	lt
 8009896:	4618      	movlt	r0, r3
 8009898:	e7a4      	b.n	80097e4 <_printf_i+0x168>
 800989a:	2301      	movs	r3, #1
 800989c:	4632      	mov	r2, r6
 800989e:	4649      	mov	r1, r9
 80098a0:	4640      	mov	r0, r8
 80098a2:	47d0      	blx	sl
 80098a4:	3001      	adds	r0, #1
 80098a6:	d09b      	beq.n	80097e0 <_printf_i+0x164>
 80098a8:	3501      	adds	r5, #1
 80098aa:	68e3      	ldr	r3, [r4, #12]
 80098ac:	9903      	ldr	r1, [sp, #12]
 80098ae:	1a5b      	subs	r3, r3, r1
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	dcf2      	bgt.n	800989a <_printf_i+0x21e>
 80098b4:	e7eb      	b.n	800988e <_printf_i+0x212>
 80098b6:	2500      	movs	r5, #0
 80098b8:	f104 0619 	add.w	r6, r4, #25
 80098bc:	e7f5      	b.n	80098aa <_printf_i+0x22e>
 80098be:	bf00      	nop
 80098c0:	0800edfc 	.word	0x0800edfc
 80098c4:	0800ee0d 	.word	0x0800ee0d

080098c8 <_scanf_float>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	b087      	sub	sp, #28
 80098ce:	4617      	mov	r7, r2
 80098d0:	9303      	str	r3, [sp, #12]
 80098d2:	688b      	ldr	r3, [r1, #8]
 80098d4:	1e5a      	subs	r2, r3, #1
 80098d6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098da:	bf83      	ittte	hi
 80098dc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80098e0:	195b      	addhi	r3, r3, r5
 80098e2:	9302      	strhi	r3, [sp, #8]
 80098e4:	2300      	movls	r3, #0
 80098e6:	bf86      	itte	hi
 80098e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098ec:	608b      	strhi	r3, [r1, #8]
 80098ee:	9302      	strls	r3, [sp, #8]
 80098f0:	680b      	ldr	r3, [r1, #0]
 80098f2:	468b      	mov	fp, r1
 80098f4:	2500      	movs	r5, #0
 80098f6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80098fa:	f84b 3b1c 	str.w	r3, [fp], #28
 80098fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009902:	4680      	mov	r8, r0
 8009904:	460c      	mov	r4, r1
 8009906:	465e      	mov	r6, fp
 8009908:	46aa      	mov	sl, r5
 800990a:	46a9      	mov	r9, r5
 800990c:	9501      	str	r5, [sp, #4]
 800990e:	68a2      	ldr	r2, [r4, #8]
 8009910:	b152      	cbz	r2, 8009928 <_scanf_float+0x60>
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b4e      	cmp	r3, #78	; 0x4e
 8009918:	d864      	bhi.n	80099e4 <_scanf_float+0x11c>
 800991a:	2b40      	cmp	r3, #64	; 0x40
 800991c:	d83c      	bhi.n	8009998 <_scanf_float+0xd0>
 800991e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009922:	b2c8      	uxtb	r0, r1
 8009924:	280e      	cmp	r0, #14
 8009926:	d93a      	bls.n	800999e <_scanf_float+0xd6>
 8009928:	f1b9 0f00 	cmp.w	r9, #0
 800992c:	d003      	beq.n	8009936 <_scanf_float+0x6e>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800993a:	f1ba 0f01 	cmp.w	sl, #1
 800993e:	f200 8113 	bhi.w	8009b68 <_scanf_float+0x2a0>
 8009942:	455e      	cmp	r6, fp
 8009944:	f200 8105 	bhi.w	8009b52 <_scanf_float+0x28a>
 8009948:	2501      	movs	r5, #1
 800994a:	4628      	mov	r0, r5
 800994c:	b007      	add	sp, #28
 800994e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009952:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009956:	2a0d      	cmp	r2, #13
 8009958:	d8e6      	bhi.n	8009928 <_scanf_float+0x60>
 800995a:	a101      	add	r1, pc, #4	; (adr r1, 8009960 <_scanf_float+0x98>)
 800995c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009960:	08009a9f 	.word	0x08009a9f
 8009964:	08009929 	.word	0x08009929
 8009968:	08009929 	.word	0x08009929
 800996c:	08009929 	.word	0x08009929
 8009970:	08009aff 	.word	0x08009aff
 8009974:	08009ad7 	.word	0x08009ad7
 8009978:	08009929 	.word	0x08009929
 800997c:	08009929 	.word	0x08009929
 8009980:	08009aad 	.word	0x08009aad
 8009984:	08009929 	.word	0x08009929
 8009988:	08009929 	.word	0x08009929
 800998c:	08009929 	.word	0x08009929
 8009990:	08009929 	.word	0x08009929
 8009994:	08009a65 	.word	0x08009a65
 8009998:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800999c:	e7db      	b.n	8009956 <_scanf_float+0x8e>
 800999e:	290e      	cmp	r1, #14
 80099a0:	d8c2      	bhi.n	8009928 <_scanf_float+0x60>
 80099a2:	a001      	add	r0, pc, #4	; (adr r0, 80099a8 <_scanf_float+0xe0>)
 80099a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80099a8:	08009a57 	.word	0x08009a57
 80099ac:	08009929 	.word	0x08009929
 80099b0:	08009a57 	.word	0x08009a57
 80099b4:	08009aeb 	.word	0x08009aeb
 80099b8:	08009929 	.word	0x08009929
 80099bc:	08009a05 	.word	0x08009a05
 80099c0:	08009a41 	.word	0x08009a41
 80099c4:	08009a41 	.word	0x08009a41
 80099c8:	08009a41 	.word	0x08009a41
 80099cc:	08009a41 	.word	0x08009a41
 80099d0:	08009a41 	.word	0x08009a41
 80099d4:	08009a41 	.word	0x08009a41
 80099d8:	08009a41 	.word	0x08009a41
 80099dc:	08009a41 	.word	0x08009a41
 80099e0:	08009a41 	.word	0x08009a41
 80099e4:	2b6e      	cmp	r3, #110	; 0x6e
 80099e6:	d809      	bhi.n	80099fc <_scanf_float+0x134>
 80099e8:	2b60      	cmp	r3, #96	; 0x60
 80099ea:	d8b2      	bhi.n	8009952 <_scanf_float+0x8a>
 80099ec:	2b54      	cmp	r3, #84	; 0x54
 80099ee:	d077      	beq.n	8009ae0 <_scanf_float+0x218>
 80099f0:	2b59      	cmp	r3, #89	; 0x59
 80099f2:	d199      	bne.n	8009928 <_scanf_float+0x60>
 80099f4:	2d07      	cmp	r5, #7
 80099f6:	d197      	bne.n	8009928 <_scanf_float+0x60>
 80099f8:	2508      	movs	r5, #8
 80099fa:	e029      	b.n	8009a50 <_scanf_float+0x188>
 80099fc:	2b74      	cmp	r3, #116	; 0x74
 80099fe:	d06f      	beq.n	8009ae0 <_scanf_float+0x218>
 8009a00:	2b79      	cmp	r3, #121	; 0x79
 8009a02:	e7f6      	b.n	80099f2 <_scanf_float+0x12a>
 8009a04:	6821      	ldr	r1, [r4, #0]
 8009a06:	05c8      	lsls	r0, r1, #23
 8009a08:	d51a      	bpl.n	8009a40 <_scanf_float+0x178>
 8009a0a:	9b02      	ldr	r3, [sp, #8]
 8009a0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009a10:	6021      	str	r1, [r4, #0]
 8009a12:	f109 0901 	add.w	r9, r9, #1
 8009a16:	b11b      	cbz	r3, 8009a20 <_scanf_float+0x158>
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	3201      	adds	r2, #1
 8009a1c:	9302      	str	r3, [sp, #8]
 8009a1e:	60a2      	str	r2, [r4, #8]
 8009a20:	68a3      	ldr	r3, [r4, #8]
 8009a22:	3b01      	subs	r3, #1
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	6923      	ldr	r3, [r4, #16]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	607b      	str	r3, [r7, #4]
 8009a34:	f340 8084 	ble.w	8009b40 <_scanf_float+0x278>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	603b      	str	r3, [r7, #0]
 8009a3e:	e766      	b.n	800990e <_scanf_float+0x46>
 8009a40:	eb1a 0f05 	cmn.w	sl, r5
 8009a44:	f47f af70 	bne.w	8009928 <_scanf_float+0x60>
 8009a48:	6822      	ldr	r2, [r4, #0]
 8009a4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	f806 3b01 	strb.w	r3, [r6], #1
 8009a54:	e7e4      	b.n	8009a20 <_scanf_float+0x158>
 8009a56:	6822      	ldr	r2, [r4, #0]
 8009a58:	0610      	lsls	r0, r2, #24
 8009a5a:	f57f af65 	bpl.w	8009928 <_scanf_float+0x60>
 8009a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a62:	e7f4      	b.n	8009a4e <_scanf_float+0x186>
 8009a64:	f1ba 0f00 	cmp.w	sl, #0
 8009a68:	d10e      	bne.n	8009a88 <_scanf_float+0x1c0>
 8009a6a:	f1b9 0f00 	cmp.w	r9, #0
 8009a6e:	d10e      	bne.n	8009a8e <_scanf_float+0x1c6>
 8009a70:	6822      	ldr	r2, [r4, #0]
 8009a72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a7a:	d108      	bne.n	8009a8e <_scanf_float+0x1c6>
 8009a7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a80:	6022      	str	r2, [r4, #0]
 8009a82:	f04f 0a01 	mov.w	sl, #1
 8009a86:	e7e3      	b.n	8009a50 <_scanf_float+0x188>
 8009a88:	f1ba 0f02 	cmp.w	sl, #2
 8009a8c:	d055      	beq.n	8009b3a <_scanf_float+0x272>
 8009a8e:	2d01      	cmp	r5, #1
 8009a90:	d002      	beq.n	8009a98 <_scanf_float+0x1d0>
 8009a92:	2d04      	cmp	r5, #4
 8009a94:	f47f af48 	bne.w	8009928 <_scanf_float+0x60>
 8009a98:	3501      	adds	r5, #1
 8009a9a:	b2ed      	uxtb	r5, r5
 8009a9c:	e7d8      	b.n	8009a50 <_scanf_float+0x188>
 8009a9e:	f1ba 0f01 	cmp.w	sl, #1
 8009aa2:	f47f af41 	bne.w	8009928 <_scanf_float+0x60>
 8009aa6:	f04f 0a02 	mov.w	sl, #2
 8009aaa:	e7d1      	b.n	8009a50 <_scanf_float+0x188>
 8009aac:	b97d      	cbnz	r5, 8009ace <_scanf_float+0x206>
 8009aae:	f1b9 0f00 	cmp.w	r9, #0
 8009ab2:	f47f af3c 	bne.w	800992e <_scanf_float+0x66>
 8009ab6:	6822      	ldr	r2, [r4, #0]
 8009ab8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009abc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009ac0:	f47f af39 	bne.w	8009936 <_scanf_float+0x6e>
 8009ac4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ac8:	6022      	str	r2, [r4, #0]
 8009aca:	2501      	movs	r5, #1
 8009acc:	e7c0      	b.n	8009a50 <_scanf_float+0x188>
 8009ace:	2d03      	cmp	r5, #3
 8009ad0:	d0e2      	beq.n	8009a98 <_scanf_float+0x1d0>
 8009ad2:	2d05      	cmp	r5, #5
 8009ad4:	e7de      	b.n	8009a94 <_scanf_float+0x1cc>
 8009ad6:	2d02      	cmp	r5, #2
 8009ad8:	f47f af26 	bne.w	8009928 <_scanf_float+0x60>
 8009adc:	2503      	movs	r5, #3
 8009ade:	e7b7      	b.n	8009a50 <_scanf_float+0x188>
 8009ae0:	2d06      	cmp	r5, #6
 8009ae2:	f47f af21 	bne.w	8009928 <_scanf_float+0x60>
 8009ae6:	2507      	movs	r5, #7
 8009ae8:	e7b2      	b.n	8009a50 <_scanf_float+0x188>
 8009aea:	6822      	ldr	r2, [r4, #0]
 8009aec:	0591      	lsls	r1, r2, #22
 8009aee:	f57f af1b 	bpl.w	8009928 <_scanf_float+0x60>
 8009af2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009af6:	6022      	str	r2, [r4, #0]
 8009af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009afc:	e7a8      	b.n	8009a50 <_scanf_float+0x188>
 8009afe:	6822      	ldr	r2, [r4, #0]
 8009b00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009b04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009b08:	d006      	beq.n	8009b18 <_scanf_float+0x250>
 8009b0a:	0550      	lsls	r0, r2, #21
 8009b0c:	f57f af0c 	bpl.w	8009928 <_scanf_float+0x60>
 8009b10:	f1b9 0f00 	cmp.w	r9, #0
 8009b14:	f43f af0f 	beq.w	8009936 <_scanf_float+0x6e>
 8009b18:	0591      	lsls	r1, r2, #22
 8009b1a:	bf58      	it	pl
 8009b1c:	9901      	ldrpl	r1, [sp, #4]
 8009b1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b22:	bf58      	it	pl
 8009b24:	eba9 0101 	subpl.w	r1, r9, r1
 8009b28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009b2c:	bf58      	it	pl
 8009b2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b32:	6022      	str	r2, [r4, #0]
 8009b34:	f04f 0900 	mov.w	r9, #0
 8009b38:	e78a      	b.n	8009a50 <_scanf_float+0x188>
 8009b3a:	f04f 0a03 	mov.w	sl, #3
 8009b3e:	e787      	b.n	8009a50 <_scanf_float+0x188>
 8009b40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b44:	4639      	mov	r1, r7
 8009b46:	4640      	mov	r0, r8
 8009b48:	4798      	blx	r3
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f43f aedf 	beq.w	800990e <_scanf_float+0x46>
 8009b50:	e6ea      	b.n	8009928 <_scanf_float+0x60>
 8009b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b5a:	463a      	mov	r2, r7
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4798      	blx	r3
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	6123      	str	r3, [r4, #16]
 8009b66:	e6ec      	b.n	8009942 <_scanf_float+0x7a>
 8009b68:	1e6b      	subs	r3, r5, #1
 8009b6a:	2b06      	cmp	r3, #6
 8009b6c:	d825      	bhi.n	8009bba <_scanf_float+0x2f2>
 8009b6e:	2d02      	cmp	r5, #2
 8009b70:	d836      	bhi.n	8009be0 <_scanf_float+0x318>
 8009b72:	455e      	cmp	r6, fp
 8009b74:	f67f aee8 	bls.w	8009948 <_scanf_float+0x80>
 8009b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b80:	463a      	mov	r2, r7
 8009b82:	4640      	mov	r0, r8
 8009b84:	4798      	blx	r3
 8009b86:	6923      	ldr	r3, [r4, #16]
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	6123      	str	r3, [r4, #16]
 8009b8c:	e7f1      	b.n	8009b72 <_scanf_float+0x2aa>
 8009b8e:	9802      	ldr	r0, [sp, #8]
 8009b90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009b98:	9002      	str	r0, [sp, #8]
 8009b9a:	463a      	mov	r2, r7
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	4798      	blx	r3
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009baa:	fa5f fa8a 	uxtb.w	sl, sl
 8009bae:	f1ba 0f02 	cmp.w	sl, #2
 8009bb2:	d1ec      	bne.n	8009b8e <_scanf_float+0x2c6>
 8009bb4:	3d03      	subs	r5, #3
 8009bb6:	b2ed      	uxtb	r5, r5
 8009bb8:	1b76      	subs	r6, r6, r5
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	05da      	lsls	r2, r3, #23
 8009bbe:	d52f      	bpl.n	8009c20 <_scanf_float+0x358>
 8009bc0:	055b      	lsls	r3, r3, #21
 8009bc2:	d510      	bpl.n	8009be6 <_scanf_float+0x31e>
 8009bc4:	455e      	cmp	r6, fp
 8009bc6:	f67f aebf 	bls.w	8009948 <_scanf_float+0x80>
 8009bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4798      	blx	r3
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	e7f1      	b.n	8009bc4 <_scanf_float+0x2fc>
 8009be0:	46aa      	mov	sl, r5
 8009be2:	9602      	str	r6, [sp, #8]
 8009be4:	e7df      	b.n	8009ba6 <_scanf_float+0x2de>
 8009be6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	2965      	cmp	r1, #101	; 0x65
 8009bee:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009bf2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	d00c      	beq.n	8009c14 <_scanf_float+0x34c>
 8009bfa:	2945      	cmp	r1, #69	; 0x45
 8009bfc:	d00a      	beq.n	8009c14 <_scanf_float+0x34c>
 8009bfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c02:	463a      	mov	r2, r7
 8009c04:	4640      	mov	r0, r8
 8009c06:	4798      	blx	r3
 8009c08:	6923      	ldr	r3, [r4, #16]
 8009c0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	1eb5      	subs	r5, r6, #2
 8009c12:	6123      	str	r3, [r4, #16]
 8009c14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c18:	463a      	mov	r2, r7
 8009c1a:	4640      	mov	r0, r8
 8009c1c:	4798      	blx	r3
 8009c1e:	462e      	mov	r6, r5
 8009c20:	6825      	ldr	r5, [r4, #0]
 8009c22:	f015 0510 	ands.w	r5, r5, #16
 8009c26:	d159      	bne.n	8009cdc <_scanf_float+0x414>
 8009c28:	7035      	strb	r5, [r6, #0]
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c34:	d11b      	bne.n	8009c6e <_scanf_float+0x3a6>
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	454b      	cmp	r3, r9
 8009c3a:	eba3 0209 	sub.w	r2, r3, r9
 8009c3e:	d123      	bne.n	8009c88 <_scanf_float+0x3c0>
 8009c40:	2200      	movs	r2, #0
 8009c42:	4659      	mov	r1, fp
 8009c44:	4640      	mov	r0, r8
 8009c46:	f000 ffd1 	bl	800abec <_strtod_r>
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	f012 0f02 	tst.w	r2, #2
 8009c52:	ec57 6b10 	vmov	r6, r7, d0
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	d021      	beq.n	8009c9e <_scanf_float+0x3d6>
 8009c5a:	9903      	ldr	r1, [sp, #12]
 8009c5c:	1d1a      	adds	r2, r3, #4
 8009c5e:	600a      	str	r2, [r1, #0]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	e9c3 6700 	strd	r6, r7, [r3]
 8009c66:	68e3      	ldr	r3, [r4, #12]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	60e3      	str	r3, [r4, #12]
 8009c6c:	e66d      	b.n	800994a <_scanf_float+0x82>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0e5      	beq.n	8009c40 <_scanf_float+0x378>
 8009c74:	9905      	ldr	r1, [sp, #20]
 8009c76:	230a      	movs	r3, #10
 8009c78:	462a      	mov	r2, r5
 8009c7a:	3101      	adds	r1, #1
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	f001 f83d 	bl	800acfc <_strtol_r>
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	9e05      	ldr	r6, [sp, #20]
 8009c86:	1ac2      	subs	r2, r0, r3
 8009c88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c8c:	429e      	cmp	r6, r3
 8009c8e:	bf28      	it	cs
 8009c90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009c94:	4912      	ldr	r1, [pc, #72]	; (8009ce0 <_scanf_float+0x418>)
 8009c96:	4630      	mov	r0, r6
 8009c98:	f000 f8f2 	bl	8009e80 <siprintf>
 8009c9c:	e7d0      	b.n	8009c40 <_scanf_float+0x378>
 8009c9e:	9903      	ldr	r1, [sp, #12]
 8009ca0:	f012 0f04 	tst.w	r2, #4
 8009ca4:	f103 0204 	add.w	r2, r3, #4
 8009ca8:	600a      	str	r2, [r1, #0]
 8009caa:	d1d9      	bne.n	8009c60 <_scanf_float+0x398>
 8009cac:	f8d3 8000 	ldr.w	r8, [r3]
 8009cb0:	ee10 2a10 	vmov	r2, s0
 8009cb4:	ee10 0a10 	vmov	r0, s0
 8009cb8:	463b      	mov	r3, r7
 8009cba:	4639      	mov	r1, r7
 8009cbc:	f7f6 ff4e 	bl	8000b5c <__aeabi_dcmpun>
 8009cc0:	b128      	cbz	r0, 8009cce <_scanf_float+0x406>
 8009cc2:	4808      	ldr	r0, [pc, #32]	; (8009ce4 <_scanf_float+0x41c>)
 8009cc4:	f000 f8d6 	bl	8009e74 <nanf>
 8009cc8:	ed88 0a00 	vstr	s0, [r8]
 8009ccc:	e7cb      	b.n	8009c66 <_scanf_float+0x39e>
 8009cce:	4630      	mov	r0, r6
 8009cd0:	4639      	mov	r1, r7
 8009cd2:	f7f6 ffa1 	bl	8000c18 <__aeabi_d2f>
 8009cd6:	f8c8 0000 	str.w	r0, [r8]
 8009cda:	e7c4      	b.n	8009c66 <_scanf_float+0x39e>
 8009cdc:	2500      	movs	r5, #0
 8009cde:	e634      	b.n	800994a <_scanf_float+0x82>
 8009ce0:	0800ee1e 	.word	0x0800ee1e
 8009ce4:	0800f2ab 	.word	0x0800f2ab

08009ce8 <setvbuf>:
 8009ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cec:	461d      	mov	r5, r3
 8009cee:	4b5d      	ldr	r3, [pc, #372]	; (8009e64 <setvbuf+0x17c>)
 8009cf0:	681f      	ldr	r7, [r3, #0]
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	460e      	mov	r6, r1
 8009cf6:	4690      	mov	r8, r2
 8009cf8:	b127      	cbz	r7, 8009d04 <setvbuf+0x1c>
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	b913      	cbnz	r3, 8009d04 <setvbuf+0x1c>
 8009cfe:	4638      	mov	r0, r7
 8009d00:	f001 ffb6 	bl	800bc70 <__sinit>
 8009d04:	4b58      	ldr	r3, [pc, #352]	; (8009e68 <setvbuf+0x180>)
 8009d06:	429c      	cmp	r4, r3
 8009d08:	d167      	bne.n	8009dda <setvbuf+0xf2>
 8009d0a:	687c      	ldr	r4, [r7, #4]
 8009d0c:	f1b8 0f02 	cmp.w	r8, #2
 8009d10:	d006      	beq.n	8009d20 <setvbuf+0x38>
 8009d12:	f1b8 0f01 	cmp.w	r8, #1
 8009d16:	f200 809f 	bhi.w	8009e58 <setvbuf+0x170>
 8009d1a:	2d00      	cmp	r5, #0
 8009d1c:	f2c0 809c 	blt.w	8009e58 <setvbuf+0x170>
 8009d20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d22:	07db      	lsls	r3, r3, #31
 8009d24:	d405      	bmi.n	8009d32 <setvbuf+0x4a>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	0598      	lsls	r0, r3, #22
 8009d2a:	d402      	bmi.n	8009d32 <setvbuf+0x4a>
 8009d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d2e:	f002 fbb0 	bl	800c492 <__retarget_lock_acquire_recursive>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4638      	mov	r0, r7
 8009d36:	f001 ff07 	bl	800bb48 <_fflush_r>
 8009d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d3c:	b141      	cbz	r1, 8009d50 <setvbuf+0x68>
 8009d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d42:	4299      	cmp	r1, r3
 8009d44:	d002      	beq.n	8009d4c <setvbuf+0x64>
 8009d46:	4638      	mov	r0, r7
 8009d48:	f003 f910 	bl	800cf6c <_free_r>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8009d50:	2300      	movs	r3, #0
 8009d52:	61a3      	str	r3, [r4, #24]
 8009d54:	6063      	str	r3, [r4, #4]
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	0619      	lsls	r1, r3, #24
 8009d5a:	d503      	bpl.n	8009d64 <setvbuf+0x7c>
 8009d5c:	6921      	ldr	r1, [r4, #16]
 8009d5e:	4638      	mov	r0, r7
 8009d60:	f003 f904 	bl	800cf6c <_free_r>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009d6a:	f023 0303 	bic.w	r3, r3, #3
 8009d6e:	f1b8 0f02 	cmp.w	r8, #2
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	d06c      	beq.n	8009e50 <setvbuf+0x168>
 8009d76:	ab01      	add	r3, sp, #4
 8009d78:	466a      	mov	r2, sp
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4638      	mov	r0, r7
 8009d7e:	f002 fb9d 	bl	800c4bc <__swhatbuf_r>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	4318      	orrs	r0, r3
 8009d86:	81a0      	strh	r0, [r4, #12]
 8009d88:	2d00      	cmp	r5, #0
 8009d8a:	d130      	bne.n	8009dee <setvbuf+0x106>
 8009d8c:	9d00      	ldr	r5, [sp, #0]
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f002 fbfa 	bl	800c588 <malloc>
 8009d94:	4606      	mov	r6, r0
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d155      	bne.n	8009e46 <setvbuf+0x15e>
 8009d9a:	f8dd 9000 	ldr.w	r9, [sp]
 8009d9e:	45a9      	cmp	r9, r5
 8009da0:	d14a      	bne.n	8009e38 <setvbuf+0x150>
 8009da2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009da6:	2200      	movs	r2, #0
 8009da8:	60a2      	str	r2, [r4, #8]
 8009daa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009dae:	6022      	str	r2, [r4, #0]
 8009db0:	6122      	str	r2, [r4, #16]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009db8:	6162      	str	r2, [r4, #20]
 8009dba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009dbc:	f043 0302 	orr.w	r3, r3, #2
 8009dc0:	07d2      	lsls	r2, r2, #31
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	d405      	bmi.n	8009dd2 <setvbuf+0xea>
 8009dc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009dca:	d102      	bne.n	8009dd2 <setvbuf+0xea>
 8009dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dce:	f002 fb61 	bl	800c494 <__retarget_lock_release_recursive>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	b003      	add	sp, #12
 8009dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dda:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <setvbuf+0x184>)
 8009ddc:	429c      	cmp	r4, r3
 8009dde:	d101      	bne.n	8009de4 <setvbuf+0xfc>
 8009de0:	68bc      	ldr	r4, [r7, #8]
 8009de2:	e793      	b.n	8009d0c <setvbuf+0x24>
 8009de4:	4b22      	ldr	r3, [pc, #136]	; (8009e70 <setvbuf+0x188>)
 8009de6:	429c      	cmp	r4, r3
 8009de8:	bf08      	it	eq
 8009dea:	68fc      	ldreq	r4, [r7, #12]
 8009dec:	e78e      	b.n	8009d0c <setvbuf+0x24>
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	d0cd      	beq.n	8009d8e <setvbuf+0xa6>
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	b913      	cbnz	r3, 8009dfc <setvbuf+0x114>
 8009df6:	4638      	mov	r0, r7
 8009df8:	f001 ff3a 	bl	800bc70 <__sinit>
 8009dfc:	f1b8 0f01 	cmp.w	r8, #1
 8009e00:	bf08      	it	eq
 8009e02:	89a3      	ldrheq	r3, [r4, #12]
 8009e04:	6026      	str	r6, [r4, #0]
 8009e06:	bf04      	itt	eq
 8009e08:	f043 0301 	orreq.w	r3, r3, #1
 8009e0c:	81a3      	strheq	r3, [r4, #12]
 8009e0e:	89a2      	ldrh	r2, [r4, #12]
 8009e10:	f012 0308 	ands.w	r3, r2, #8
 8009e14:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009e18:	d01c      	beq.n	8009e54 <setvbuf+0x16c>
 8009e1a:	07d3      	lsls	r3, r2, #31
 8009e1c:	bf41      	itttt	mi
 8009e1e:	2300      	movmi	r3, #0
 8009e20:	426d      	negmi	r5, r5
 8009e22:	60a3      	strmi	r3, [r4, #8]
 8009e24:	61a5      	strmi	r5, [r4, #24]
 8009e26:	bf58      	it	pl
 8009e28:	60a5      	strpl	r5, [r4, #8]
 8009e2a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009e2c:	f015 0501 	ands.w	r5, r5, #1
 8009e30:	d115      	bne.n	8009e5e <setvbuf+0x176>
 8009e32:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009e36:	e7c8      	b.n	8009dca <setvbuf+0xe2>
 8009e38:	4648      	mov	r0, r9
 8009e3a:	f002 fba5 	bl	800c588 <malloc>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d0ae      	beq.n	8009da2 <setvbuf+0xba>
 8009e44:	464d      	mov	r5, r9
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	e7d0      	b.n	8009df2 <setvbuf+0x10a>
 8009e50:	2500      	movs	r5, #0
 8009e52:	e7a8      	b.n	8009da6 <setvbuf+0xbe>
 8009e54:	60a3      	str	r3, [r4, #8]
 8009e56:	e7e8      	b.n	8009e2a <setvbuf+0x142>
 8009e58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009e5c:	e7b9      	b.n	8009dd2 <setvbuf+0xea>
 8009e5e:	2500      	movs	r5, #0
 8009e60:	e7b7      	b.n	8009dd2 <setvbuf+0xea>
 8009e62:	bf00      	nop
 8009e64:	2000001c 	.word	0x2000001c
 8009e68:	0800f02c 	.word	0x0800f02c
 8009e6c:	0800f04c 	.word	0x0800f04c
 8009e70:	0800f00c 	.word	0x0800f00c

08009e74 <nanf>:
 8009e74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e7c <nanf+0x8>
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	7fc00000 	.word	0x7fc00000

08009e80 <siprintf>:
 8009e80:	b40e      	push	{r1, r2, r3}
 8009e82:	b500      	push	{lr}
 8009e84:	b09c      	sub	sp, #112	; 0x70
 8009e86:	ab1d      	add	r3, sp, #116	; 0x74
 8009e88:	9002      	str	r0, [sp, #8]
 8009e8a:	9006      	str	r0, [sp, #24]
 8009e8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e90:	4809      	ldr	r0, [pc, #36]	; (8009eb8 <siprintf+0x38>)
 8009e92:	9107      	str	r1, [sp, #28]
 8009e94:	9104      	str	r1, [sp, #16]
 8009e96:	4909      	ldr	r1, [pc, #36]	; (8009ebc <siprintf+0x3c>)
 8009e98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9c:	9105      	str	r1, [sp, #20]
 8009e9e:	6800      	ldr	r0, [r0, #0]
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	a902      	add	r1, sp, #8
 8009ea4:	f003 f99e 	bl	800d1e4 <_svfiprintf_r>
 8009ea8:	9b02      	ldr	r3, [sp, #8]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
 8009eae:	b01c      	add	sp, #112	; 0x70
 8009eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb4:	b003      	add	sp, #12
 8009eb6:	4770      	bx	lr
 8009eb8:	2000001c 	.word	0x2000001c
 8009ebc:	ffff0208 	.word	0xffff0208

08009ec0 <siscanf>:
 8009ec0:	b40e      	push	{r1, r2, r3}
 8009ec2:	b510      	push	{r4, lr}
 8009ec4:	b09f      	sub	sp, #124	; 0x7c
 8009ec6:	ac21      	add	r4, sp, #132	; 0x84
 8009ec8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009ecc:	f854 2b04 	ldr.w	r2, [r4], #4
 8009ed0:	9201      	str	r2, [sp, #4]
 8009ed2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009ed6:	9004      	str	r0, [sp, #16]
 8009ed8:	9008      	str	r0, [sp, #32]
 8009eda:	f7f6 f991 	bl	8000200 <strlen>
 8009ede:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <siscanf+0x50>)
 8009ee0:	9005      	str	r0, [sp, #20]
 8009ee2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8009ee6:	480b      	ldr	r0, [pc, #44]	; (8009f14 <siscanf+0x54>)
 8009ee8:	9a01      	ldr	r2, [sp, #4]
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	9403      	str	r4, [sp, #12]
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9311      	str	r3, [sp, #68]	; 0x44
 8009ef2:	9316      	str	r3, [sp, #88]	; 0x58
 8009ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ef8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	4623      	mov	r3, r4
 8009f00:	f003 faca 	bl	800d498 <__ssvfiscanf_r>
 8009f04:	b01f      	add	sp, #124	; 0x7c
 8009f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f0a:	b003      	add	sp, #12
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	08009f3b 	.word	0x08009f3b
 8009f14:	2000001c 	.word	0x2000001c

08009f18 <__sread>:
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f20:	f003 fd84 	bl	800da2c <_read_r>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	bfab      	itete	ge
 8009f28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f2c:	181b      	addge	r3, r3, r0
 8009f2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f32:	bfac      	ite	ge
 8009f34:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f36:	81a3      	strhlt	r3, [r4, #12]
 8009f38:	bd10      	pop	{r4, pc}

08009f3a <__seofread>:
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	4770      	bx	lr

08009f3e <__swrite>:
 8009f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f42:	461f      	mov	r7, r3
 8009f44:	898b      	ldrh	r3, [r1, #12]
 8009f46:	05db      	lsls	r3, r3, #23
 8009f48:	4605      	mov	r5, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	d505      	bpl.n	8009f5c <__swrite+0x1e>
 8009f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f54:	2302      	movs	r3, #2
 8009f56:	2200      	movs	r2, #0
 8009f58:	f002 fa9e 	bl	800c498 <_lseek_r>
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	4632      	mov	r2, r6
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f72:	f000 bec5 	b.w	800ad00 <_write_r>

08009f76 <__sseek>:
 8009f76:	b510      	push	{r4, lr}
 8009f78:	460c      	mov	r4, r1
 8009f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7e:	f002 fa8b 	bl	800c498 <_lseek_r>
 8009f82:	1c43      	adds	r3, r0, #1
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	bf15      	itete	ne
 8009f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f92:	81a3      	strheq	r3, [r4, #12]
 8009f94:	bf18      	it	ne
 8009f96:	81a3      	strhne	r3, [r4, #12]
 8009f98:	bd10      	pop	{r4, pc}

08009f9a <__sclose>:
 8009f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f9e:	f000 bec1 	b.w	800ad24 <_close_r>

08009fa2 <sulp>:
 8009fa2:	b570      	push	{r4, r5, r6, lr}
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	460d      	mov	r5, r1
 8009fa8:	ec45 4b10 	vmov	d0, r4, r5
 8009fac:	4616      	mov	r6, r2
 8009fae:	f002 fe77 	bl	800cca0 <__ulp>
 8009fb2:	ec51 0b10 	vmov	r0, r1, d0
 8009fb6:	b17e      	cbz	r6, 8009fd8 <sulp+0x36>
 8009fb8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009fbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dd09      	ble.n	8009fd8 <sulp+0x36>
 8009fc4:	051b      	lsls	r3, r3, #20
 8009fc6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009fca:	2400      	movs	r4, #0
 8009fcc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	462b      	mov	r3, r5
 8009fd4:	f7f6 fb28 	bl	8000628 <__aeabi_dmul>
 8009fd8:	bd70      	pop	{r4, r5, r6, pc}
 8009fda:	0000      	movs	r0, r0
 8009fdc:	0000      	movs	r0, r0
	...

08009fe0 <_strtod_l>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ed2d 8b02 	vpush	{d8}
 8009fe8:	b09d      	sub	sp, #116	; 0x74
 8009fea:	461f      	mov	r7, r3
 8009fec:	2300      	movs	r3, #0
 8009fee:	9318      	str	r3, [sp, #96]	; 0x60
 8009ff0:	4ba2      	ldr	r3, [pc, #648]	; (800a27c <_strtod_l+0x29c>)
 8009ff2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	4688      	mov	r8, r1
 8009ffe:	f7f6 f8ff 	bl	8000200 <strlen>
 800a002:	f04f 0a00 	mov.w	sl, #0
 800a006:	4605      	mov	r5, r0
 800a008:	f04f 0b00 	mov.w	fp, #0
 800a00c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	2a2b      	cmp	r2, #43	; 0x2b
 800a016:	d04e      	beq.n	800a0b6 <_strtod_l+0xd6>
 800a018:	d83b      	bhi.n	800a092 <_strtod_l+0xb2>
 800a01a:	2a0d      	cmp	r2, #13
 800a01c:	d834      	bhi.n	800a088 <_strtod_l+0xa8>
 800a01e:	2a08      	cmp	r2, #8
 800a020:	d834      	bhi.n	800a08c <_strtod_l+0xac>
 800a022:	2a00      	cmp	r2, #0
 800a024:	d03e      	beq.n	800a0a4 <_strtod_l+0xc4>
 800a026:	2300      	movs	r3, #0
 800a028:	930a      	str	r3, [sp, #40]	; 0x28
 800a02a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a02c:	7833      	ldrb	r3, [r6, #0]
 800a02e:	2b30      	cmp	r3, #48	; 0x30
 800a030:	f040 80b0 	bne.w	800a194 <_strtod_l+0x1b4>
 800a034:	7873      	ldrb	r3, [r6, #1]
 800a036:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a03a:	2b58      	cmp	r3, #88	; 0x58
 800a03c:	d168      	bne.n	800a110 <_strtod_l+0x130>
 800a03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	ab18      	add	r3, sp, #96	; 0x60
 800a044:	9702      	str	r7, [sp, #8]
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	4a8d      	ldr	r2, [pc, #564]	; (800a280 <_strtod_l+0x2a0>)
 800a04a:	ab19      	add	r3, sp, #100	; 0x64
 800a04c:	a917      	add	r1, sp, #92	; 0x5c
 800a04e:	4620      	mov	r0, r4
 800a050:	f001 ff12 	bl	800be78 <__gethex>
 800a054:	f010 0707 	ands.w	r7, r0, #7
 800a058:	4605      	mov	r5, r0
 800a05a:	d005      	beq.n	800a068 <_strtod_l+0x88>
 800a05c:	2f06      	cmp	r7, #6
 800a05e:	d12c      	bne.n	800a0ba <_strtod_l+0xda>
 800a060:	3601      	adds	r6, #1
 800a062:	2300      	movs	r3, #0
 800a064:	9617      	str	r6, [sp, #92]	; 0x5c
 800a066:	930a      	str	r3, [sp, #40]	; 0x28
 800a068:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f040 8590 	bne.w	800ab90 <_strtod_l+0xbb0>
 800a070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a072:	b1eb      	cbz	r3, 800a0b0 <_strtod_l+0xd0>
 800a074:	4652      	mov	r2, sl
 800a076:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a07a:	ec43 2b10 	vmov	d0, r2, r3
 800a07e:	b01d      	add	sp, #116	; 0x74
 800a080:	ecbd 8b02 	vpop	{d8}
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	2a20      	cmp	r2, #32
 800a08a:	d1cc      	bne.n	800a026 <_strtod_l+0x46>
 800a08c:	3301      	adds	r3, #1
 800a08e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a090:	e7be      	b.n	800a010 <_strtod_l+0x30>
 800a092:	2a2d      	cmp	r2, #45	; 0x2d
 800a094:	d1c7      	bne.n	800a026 <_strtod_l+0x46>
 800a096:	2201      	movs	r2, #1
 800a098:	920a      	str	r2, [sp, #40]	; 0x28
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a09e:	785b      	ldrb	r3, [r3, #1]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1c2      	bne.n	800a02a <_strtod_l+0x4a>
 800a0a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a0a6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f040 856e 	bne.w	800ab8c <_strtod_l+0xbac>
 800a0b0:	4652      	mov	r2, sl
 800a0b2:	465b      	mov	r3, fp
 800a0b4:	e7e1      	b.n	800a07a <_strtod_l+0x9a>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	e7ee      	b.n	800a098 <_strtod_l+0xb8>
 800a0ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a0bc:	b13a      	cbz	r2, 800a0ce <_strtod_l+0xee>
 800a0be:	2135      	movs	r1, #53	; 0x35
 800a0c0:	a81a      	add	r0, sp, #104	; 0x68
 800a0c2:	f002 fef8 	bl	800ceb6 <__copybits>
 800a0c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f002 fab7 	bl	800c63c <_Bfree>
 800a0ce:	3f01      	subs	r7, #1
 800a0d0:	2f04      	cmp	r7, #4
 800a0d2:	d806      	bhi.n	800a0e2 <_strtod_l+0x102>
 800a0d4:	e8df f007 	tbb	[pc, r7]
 800a0d8:	1714030a 	.word	0x1714030a
 800a0dc:	0a          	.byte	0x0a
 800a0dd:	00          	.byte	0x00
 800a0de:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a0e2:	0728      	lsls	r0, r5, #28
 800a0e4:	d5c0      	bpl.n	800a068 <_strtod_l+0x88>
 800a0e6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a0ea:	e7bd      	b.n	800a068 <_strtod_l+0x88>
 800a0ec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a0f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a0f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a0f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a0fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a0fe:	e7f0      	b.n	800a0e2 <_strtod_l+0x102>
 800a100:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a284 <_strtod_l+0x2a4>
 800a104:	e7ed      	b.n	800a0e2 <_strtod_l+0x102>
 800a106:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a10a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a10e:	e7e8      	b.n	800a0e2 <_strtod_l+0x102>
 800a110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	9217      	str	r2, [sp, #92]	; 0x5c
 800a116:	785b      	ldrb	r3, [r3, #1]
 800a118:	2b30      	cmp	r3, #48	; 0x30
 800a11a:	d0f9      	beq.n	800a110 <_strtod_l+0x130>
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d0a3      	beq.n	800a068 <_strtod_l+0x88>
 800a120:	2301      	movs	r3, #1
 800a122:	f04f 0900 	mov.w	r9, #0
 800a126:	9304      	str	r3, [sp, #16]
 800a128:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a12a:	9308      	str	r3, [sp, #32]
 800a12c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a130:	464f      	mov	r7, r9
 800a132:	220a      	movs	r2, #10
 800a134:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a136:	7806      	ldrb	r6, [r0, #0]
 800a138:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a13c:	b2d9      	uxtb	r1, r3
 800a13e:	2909      	cmp	r1, #9
 800a140:	d92a      	bls.n	800a198 <_strtod_l+0x1b8>
 800a142:	9905      	ldr	r1, [sp, #20]
 800a144:	462a      	mov	r2, r5
 800a146:	f003 fcd3 	bl	800daf0 <strncmp>
 800a14a:	b398      	cbz	r0, 800a1b4 <_strtod_l+0x1d4>
 800a14c:	2000      	movs	r0, #0
 800a14e:	4632      	mov	r2, r6
 800a150:	463d      	mov	r5, r7
 800a152:	9005      	str	r0, [sp, #20]
 800a154:	4603      	mov	r3, r0
 800a156:	2a65      	cmp	r2, #101	; 0x65
 800a158:	d001      	beq.n	800a15e <_strtod_l+0x17e>
 800a15a:	2a45      	cmp	r2, #69	; 0x45
 800a15c:	d118      	bne.n	800a190 <_strtod_l+0x1b0>
 800a15e:	b91d      	cbnz	r5, 800a168 <_strtod_l+0x188>
 800a160:	9a04      	ldr	r2, [sp, #16]
 800a162:	4302      	orrs	r2, r0
 800a164:	d09e      	beq.n	800a0a4 <_strtod_l+0xc4>
 800a166:	2500      	movs	r5, #0
 800a168:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a16c:	f108 0201 	add.w	r2, r8, #1
 800a170:	9217      	str	r2, [sp, #92]	; 0x5c
 800a172:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a176:	2a2b      	cmp	r2, #43	; 0x2b
 800a178:	d075      	beq.n	800a266 <_strtod_l+0x286>
 800a17a:	2a2d      	cmp	r2, #45	; 0x2d
 800a17c:	d07b      	beq.n	800a276 <_strtod_l+0x296>
 800a17e:	f04f 0c00 	mov.w	ip, #0
 800a182:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a186:	2909      	cmp	r1, #9
 800a188:	f240 8082 	bls.w	800a290 <_strtod_l+0x2b0>
 800a18c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a190:	2600      	movs	r6, #0
 800a192:	e09d      	b.n	800a2d0 <_strtod_l+0x2f0>
 800a194:	2300      	movs	r3, #0
 800a196:	e7c4      	b.n	800a122 <_strtod_l+0x142>
 800a198:	2f08      	cmp	r7, #8
 800a19a:	bfd8      	it	le
 800a19c:	9907      	ldrle	r1, [sp, #28]
 800a19e:	f100 0001 	add.w	r0, r0, #1
 800a1a2:	bfda      	itte	le
 800a1a4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a1a8:	9307      	strle	r3, [sp, #28]
 800a1aa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a1ae:	3701      	adds	r7, #1
 800a1b0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a1b2:	e7bf      	b.n	800a134 <_strtod_l+0x154>
 800a1b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1b6:	195a      	adds	r2, r3, r5
 800a1b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1ba:	5d5a      	ldrb	r2, [r3, r5]
 800a1bc:	2f00      	cmp	r7, #0
 800a1be:	d037      	beq.n	800a230 <_strtod_l+0x250>
 800a1c0:	9005      	str	r0, [sp, #20]
 800a1c2:	463d      	mov	r5, r7
 800a1c4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a1c8:	2b09      	cmp	r3, #9
 800a1ca:	d912      	bls.n	800a1f2 <_strtod_l+0x212>
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	e7c2      	b.n	800a156 <_strtod_l+0x176>
 800a1d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1d2:	1c5a      	adds	r2, r3, #1
 800a1d4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1d6:	785a      	ldrb	r2, [r3, #1]
 800a1d8:	3001      	adds	r0, #1
 800a1da:	2a30      	cmp	r2, #48	; 0x30
 800a1dc:	d0f8      	beq.n	800a1d0 <_strtod_l+0x1f0>
 800a1de:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1e2:	2b08      	cmp	r3, #8
 800a1e4:	f200 84d9 	bhi.w	800ab9a <_strtod_l+0xbba>
 800a1e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ea:	9005      	str	r0, [sp, #20]
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	9308      	str	r3, [sp, #32]
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	3a30      	subs	r2, #48	; 0x30
 800a1f4:	f100 0301 	add.w	r3, r0, #1
 800a1f8:	d014      	beq.n	800a224 <_strtod_l+0x244>
 800a1fa:	9905      	ldr	r1, [sp, #20]
 800a1fc:	4419      	add	r1, r3
 800a1fe:	9105      	str	r1, [sp, #20]
 800a200:	462b      	mov	r3, r5
 800a202:	eb00 0e05 	add.w	lr, r0, r5
 800a206:	210a      	movs	r1, #10
 800a208:	4573      	cmp	r3, lr
 800a20a:	d113      	bne.n	800a234 <_strtod_l+0x254>
 800a20c:	182b      	adds	r3, r5, r0
 800a20e:	2b08      	cmp	r3, #8
 800a210:	f105 0501 	add.w	r5, r5, #1
 800a214:	4405      	add	r5, r0
 800a216:	dc1c      	bgt.n	800a252 <_strtod_l+0x272>
 800a218:	9907      	ldr	r1, [sp, #28]
 800a21a:	230a      	movs	r3, #10
 800a21c:	fb03 2301 	mla	r3, r3, r1, r2
 800a220:	9307      	str	r3, [sp, #28]
 800a222:	2300      	movs	r3, #0
 800a224:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a226:	1c51      	adds	r1, r2, #1
 800a228:	9117      	str	r1, [sp, #92]	; 0x5c
 800a22a:	7852      	ldrb	r2, [r2, #1]
 800a22c:	4618      	mov	r0, r3
 800a22e:	e7c9      	b.n	800a1c4 <_strtod_l+0x1e4>
 800a230:	4638      	mov	r0, r7
 800a232:	e7d2      	b.n	800a1da <_strtod_l+0x1fa>
 800a234:	2b08      	cmp	r3, #8
 800a236:	dc04      	bgt.n	800a242 <_strtod_l+0x262>
 800a238:	9e07      	ldr	r6, [sp, #28]
 800a23a:	434e      	muls	r6, r1
 800a23c:	9607      	str	r6, [sp, #28]
 800a23e:	3301      	adds	r3, #1
 800a240:	e7e2      	b.n	800a208 <_strtod_l+0x228>
 800a242:	f103 0c01 	add.w	ip, r3, #1
 800a246:	f1bc 0f10 	cmp.w	ip, #16
 800a24a:	bfd8      	it	le
 800a24c:	fb01 f909 	mulle.w	r9, r1, r9
 800a250:	e7f5      	b.n	800a23e <_strtod_l+0x25e>
 800a252:	2d10      	cmp	r5, #16
 800a254:	bfdc      	itt	le
 800a256:	230a      	movle	r3, #10
 800a258:	fb03 2909 	mlale	r9, r3, r9, r2
 800a25c:	e7e1      	b.n	800a222 <_strtod_l+0x242>
 800a25e:	2300      	movs	r3, #0
 800a260:	9305      	str	r3, [sp, #20]
 800a262:	2301      	movs	r3, #1
 800a264:	e77c      	b.n	800a160 <_strtod_l+0x180>
 800a266:	f04f 0c00 	mov.w	ip, #0
 800a26a:	f108 0202 	add.w	r2, r8, #2
 800a26e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a270:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a274:	e785      	b.n	800a182 <_strtod_l+0x1a2>
 800a276:	f04f 0c01 	mov.w	ip, #1
 800a27a:	e7f6      	b.n	800a26a <_strtod_l+0x28a>
 800a27c:	0800f0d4 	.word	0x0800f0d4
 800a280:	0800ee24 	.word	0x0800ee24
 800a284:	7ff00000 	.word	0x7ff00000
 800a288:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a28a:	1c51      	adds	r1, r2, #1
 800a28c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a28e:	7852      	ldrb	r2, [r2, #1]
 800a290:	2a30      	cmp	r2, #48	; 0x30
 800a292:	d0f9      	beq.n	800a288 <_strtod_l+0x2a8>
 800a294:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a298:	2908      	cmp	r1, #8
 800a29a:	f63f af79 	bhi.w	800a190 <_strtod_l+0x1b0>
 800a29e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a2a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2a4:	9206      	str	r2, [sp, #24]
 800a2a6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2a8:	1c51      	adds	r1, r2, #1
 800a2aa:	9117      	str	r1, [sp, #92]	; 0x5c
 800a2ac:	7852      	ldrb	r2, [r2, #1]
 800a2ae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a2b2:	2e09      	cmp	r6, #9
 800a2b4:	d937      	bls.n	800a326 <_strtod_l+0x346>
 800a2b6:	9e06      	ldr	r6, [sp, #24]
 800a2b8:	1b89      	subs	r1, r1, r6
 800a2ba:	2908      	cmp	r1, #8
 800a2bc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a2c0:	dc02      	bgt.n	800a2c8 <_strtod_l+0x2e8>
 800a2c2:	4576      	cmp	r6, lr
 800a2c4:	bfa8      	it	ge
 800a2c6:	4676      	movge	r6, lr
 800a2c8:	f1bc 0f00 	cmp.w	ip, #0
 800a2cc:	d000      	beq.n	800a2d0 <_strtod_l+0x2f0>
 800a2ce:	4276      	negs	r6, r6
 800a2d0:	2d00      	cmp	r5, #0
 800a2d2:	d14d      	bne.n	800a370 <_strtod_l+0x390>
 800a2d4:	9904      	ldr	r1, [sp, #16]
 800a2d6:	4301      	orrs	r1, r0
 800a2d8:	f47f aec6 	bne.w	800a068 <_strtod_l+0x88>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f47f aee1 	bne.w	800a0a4 <_strtod_l+0xc4>
 800a2e2:	2a69      	cmp	r2, #105	; 0x69
 800a2e4:	d027      	beq.n	800a336 <_strtod_l+0x356>
 800a2e6:	dc24      	bgt.n	800a332 <_strtod_l+0x352>
 800a2e8:	2a49      	cmp	r2, #73	; 0x49
 800a2ea:	d024      	beq.n	800a336 <_strtod_l+0x356>
 800a2ec:	2a4e      	cmp	r2, #78	; 0x4e
 800a2ee:	f47f aed9 	bne.w	800a0a4 <_strtod_l+0xc4>
 800a2f2:	499f      	ldr	r1, [pc, #636]	; (800a570 <_strtod_l+0x590>)
 800a2f4:	a817      	add	r0, sp, #92	; 0x5c
 800a2f6:	f002 f817 	bl	800c328 <__match>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aed2 	beq.w	800a0a4 <_strtod_l+0xc4>
 800a300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b28      	cmp	r3, #40	; 0x28
 800a306:	d12d      	bne.n	800a364 <_strtod_l+0x384>
 800a308:	499a      	ldr	r1, [pc, #616]	; (800a574 <_strtod_l+0x594>)
 800a30a:	aa1a      	add	r2, sp, #104	; 0x68
 800a30c:	a817      	add	r0, sp, #92	; 0x5c
 800a30e:	f002 f81f 	bl	800c350 <__hexnan>
 800a312:	2805      	cmp	r0, #5
 800a314:	d126      	bne.n	800a364 <_strtod_l+0x384>
 800a316:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a318:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a31c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a320:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a324:	e6a0      	b.n	800a068 <_strtod_l+0x88>
 800a326:	210a      	movs	r1, #10
 800a328:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a32c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a330:	e7b9      	b.n	800a2a6 <_strtod_l+0x2c6>
 800a332:	2a6e      	cmp	r2, #110	; 0x6e
 800a334:	e7db      	b.n	800a2ee <_strtod_l+0x30e>
 800a336:	4990      	ldr	r1, [pc, #576]	; (800a578 <_strtod_l+0x598>)
 800a338:	a817      	add	r0, sp, #92	; 0x5c
 800a33a:	f001 fff5 	bl	800c328 <__match>
 800a33e:	2800      	cmp	r0, #0
 800a340:	f43f aeb0 	beq.w	800a0a4 <_strtod_l+0xc4>
 800a344:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a346:	498d      	ldr	r1, [pc, #564]	; (800a57c <_strtod_l+0x59c>)
 800a348:	3b01      	subs	r3, #1
 800a34a:	a817      	add	r0, sp, #92	; 0x5c
 800a34c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a34e:	f001 ffeb 	bl	800c328 <__match>
 800a352:	b910      	cbnz	r0, 800a35a <_strtod_l+0x37a>
 800a354:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a356:	3301      	adds	r3, #1
 800a358:	9317      	str	r3, [sp, #92]	; 0x5c
 800a35a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a58c <_strtod_l+0x5ac>
 800a35e:	f04f 0a00 	mov.w	sl, #0
 800a362:	e681      	b.n	800a068 <_strtod_l+0x88>
 800a364:	4886      	ldr	r0, [pc, #536]	; (800a580 <_strtod_l+0x5a0>)
 800a366:	f003 fb73 	bl	800da50 <nan>
 800a36a:	ec5b ab10 	vmov	sl, fp, d0
 800a36e:	e67b      	b.n	800a068 <_strtod_l+0x88>
 800a370:	9b05      	ldr	r3, [sp, #20]
 800a372:	9807      	ldr	r0, [sp, #28]
 800a374:	1af3      	subs	r3, r6, r3
 800a376:	2f00      	cmp	r7, #0
 800a378:	bf08      	it	eq
 800a37a:	462f      	moveq	r7, r5
 800a37c:	2d10      	cmp	r5, #16
 800a37e:	9306      	str	r3, [sp, #24]
 800a380:	46a8      	mov	r8, r5
 800a382:	bfa8      	it	ge
 800a384:	f04f 0810 	movge.w	r8, #16
 800a388:	f7f6 f8d4 	bl	8000534 <__aeabi_ui2d>
 800a38c:	2d09      	cmp	r5, #9
 800a38e:	4682      	mov	sl, r0
 800a390:	468b      	mov	fp, r1
 800a392:	dd13      	ble.n	800a3bc <_strtod_l+0x3dc>
 800a394:	4b7b      	ldr	r3, [pc, #492]	; (800a584 <_strtod_l+0x5a4>)
 800a396:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a39a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a39e:	f7f6 f943 	bl	8000628 <__aeabi_dmul>
 800a3a2:	4682      	mov	sl, r0
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	468b      	mov	fp, r1
 800a3a8:	f7f6 f8c4 	bl	8000534 <__aeabi_ui2d>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4650      	mov	r0, sl
 800a3b2:	4659      	mov	r1, fp
 800a3b4:	f7f5 ff82 	bl	80002bc <__adddf3>
 800a3b8:	4682      	mov	sl, r0
 800a3ba:	468b      	mov	fp, r1
 800a3bc:	2d0f      	cmp	r5, #15
 800a3be:	dc38      	bgt.n	800a432 <_strtod_l+0x452>
 800a3c0:	9b06      	ldr	r3, [sp, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f43f ae50 	beq.w	800a068 <_strtod_l+0x88>
 800a3c8:	dd24      	ble.n	800a414 <_strtod_l+0x434>
 800a3ca:	2b16      	cmp	r3, #22
 800a3cc:	dc0b      	bgt.n	800a3e6 <_strtod_l+0x406>
 800a3ce:	496d      	ldr	r1, [pc, #436]	; (800a584 <_strtod_l+0x5a4>)
 800a3d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3d8:	4652      	mov	r2, sl
 800a3da:	465b      	mov	r3, fp
 800a3dc:	f7f6 f924 	bl	8000628 <__aeabi_dmul>
 800a3e0:	4682      	mov	sl, r0
 800a3e2:	468b      	mov	fp, r1
 800a3e4:	e640      	b.n	800a068 <_strtod_l+0x88>
 800a3e6:	9a06      	ldr	r2, [sp, #24]
 800a3e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	db20      	blt.n	800a432 <_strtod_l+0x452>
 800a3f0:	4c64      	ldr	r4, [pc, #400]	; (800a584 <_strtod_l+0x5a4>)
 800a3f2:	f1c5 050f 	rsb	r5, r5, #15
 800a3f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a402:	f7f6 f911 	bl	8000628 <__aeabi_dmul>
 800a406:	9b06      	ldr	r3, [sp, #24]
 800a408:	1b5d      	subs	r5, r3, r5
 800a40a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a40e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a412:	e7e3      	b.n	800a3dc <_strtod_l+0x3fc>
 800a414:	9b06      	ldr	r3, [sp, #24]
 800a416:	3316      	adds	r3, #22
 800a418:	db0b      	blt.n	800a432 <_strtod_l+0x452>
 800a41a:	9b05      	ldr	r3, [sp, #20]
 800a41c:	1b9e      	subs	r6, r3, r6
 800a41e:	4b59      	ldr	r3, [pc, #356]	; (800a584 <_strtod_l+0x5a4>)
 800a420:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a424:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a428:	4650      	mov	r0, sl
 800a42a:	4659      	mov	r1, fp
 800a42c:	f7f6 fa26 	bl	800087c <__aeabi_ddiv>
 800a430:	e7d6      	b.n	800a3e0 <_strtod_l+0x400>
 800a432:	9b06      	ldr	r3, [sp, #24]
 800a434:	eba5 0808 	sub.w	r8, r5, r8
 800a438:	4498      	add	r8, r3
 800a43a:	f1b8 0f00 	cmp.w	r8, #0
 800a43e:	dd74      	ble.n	800a52a <_strtod_l+0x54a>
 800a440:	f018 030f 	ands.w	r3, r8, #15
 800a444:	d00a      	beq.n	800a45c <_strtod_l+0x47c>
 800a446:	494f      	ldr	r1, [pc, #316]	; (800a584 <_strtod_l+0x5a4>)
 800a448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a44c:	4652      	mov	r2, sl
 800a44e:	465b      	mov	r3, fp
 800a450:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a454:	f7f6 f8e8 	bl	8000628 <__aeabi_dmul>
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	f038 080f 	bics.w	r8, r8, #15
 800a460:	d04f      	beq.n	800a502 <_strtod_l+0x522>
 800a462:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a466:	dd22      	ble.n	800a4ae <_strtod_l+0x4ce>
 800a468:	2500      	movs	r5, #0
 800a46a:	462e      	mov	r6, r5
 800a46c:	9507      	str	r5, [sp, #28]
 800a46e:	9505      	str	r5, [sp, #20]
 800a470:	2322      	movs	r3, #34	; 0x22
 800a472:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a58c <_strtod_l+0x5ac>
 800a476:	6023      	str	r3, [r4, #0]
 800a478:	f04f 0a00 	mov.w	sl, #0
 800a47c:	9b07      	ldr	r3, [sp, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f43f adf2 	beq.w	800a068 <_strtod_l+0x88>
 800a484:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a486:	4620      	mov	r0, r4
 800a488:	f002 f8d8 	bl	800c63c <_Bfree>
 800a48c:	9905      	ldr	r1, [sp, #20]
 800a48e:	4620      	mov	r0, r4
 800a490:	f002 f8d4 	bl	800c63c <_Bfree>
 800a494:	4631      	mov	r1, r6
 800a496:	4620      	mov	r0, r4
 800a498:	f002 f8d0 	bl	800c63c <_Bfree>
 800a49c:	9907      	ldr	r1, [sp, #28]
 800a49e:	4620      	mov	r0, r4
 800a4a0:	f002 f8cc 	bl	800c63c <_Bfree>
 800a4a4:	4629      	mov	r1, r5
 800a4a6:	4620      	mov	r0, r4
 800a4a8:	f002 f8c8 	bl	800c63c <_Bfree>
 800a4ac:	e5dc      	b.n	800a068 <_strtod_l+0x88>
 800a4ae:	4b36      	ldr	r3, [pc, #216]	; (800a588 <_strtod_l+0x5a8>)
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	4659      	mov	r1, fp
 800a4bc:	4699      	mov	r9, r3
 800a4be:	f1b8 0f01 	cmp.w	r8, #1
 800a4c2:	dc21      	bgt.n	800a508 <_strtod_l+0x528>
 800a4c4:	b10b      	cbz	r3, 800a4ca <_strtod_l+0x4ea>
 800a4c6:	4682      	mov	sl, r0
 800a4c8:	468b      	mov	fp, r1
 800a4ca:	4b2f      	ldr	r3, [pc, #188]	; (800a588 <_strtod_l+0x5a8>)
 800a4cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a4d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a4d4:	4652      	mov	r2, sl
 800a4d6:	465b      	mov	r3, fp
 800a4d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a4dc:	f7f6 f8a4 	bl	8000628 <__aeabi_dmul>
 800a4e0:	4b2a      	ldr	r3, [pc, #168]	; (800a58c <_strtod_l+0x5ac>)
 800a4e2:	460a      	mov	r2, r1
 800a4e4:	400b      	ands	r3, r1
 800a4e6:	492a      	ldr	r1, [pc, #168]	; (800a590 <_strtod_l+0x5b0>)
 800a4e8:	428b      	cmp	r3, r1
 800a4ea:	4682      	mov	sl, r0
 800a4ec:	d8bc      	bhi.n	800a468 <_strtod_l+0x488>
 800a4ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a4f2:	428b      	cmp	r3, r1
 800a4f4:	bf86      	itte	hi
 800a4f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a594 <_strtod_l+0x5b4>
 800a4fa:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a4fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a502:	2300      	movs	r3, #0
 800a504:	9304      	str	r3, [sp, #16]
 800a506:	e084      	b.n	800a612 <_strtod_l+0x632>
 800a508:	f018 0f01 	tst.w	r8, #1
 800a50c:	d005      	beq.n	800a51a <_strtod_l+0x53a>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 f888 	bl	8000628 <__aeabi_dmul>
 800a518:	2301      	movs	r3, #1
 800a51a:	9a04      	ldr	r2, [sp, #16]
 800a51c:	3208      	adds	r2, #8
 800a51e:	f109 0901 	add.w	r9, r9, #1
 800a522:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a526:	9204      	str	r2, [sp, #16]
 800a528:	e7c9      	b.n	800a4be <_strtod_l+0x4de>
 800a52a:	d0ea      	beq.n	800a502 <_strtod_l+0x522>
 800a52c:	f1c8 0800 	rsb	r8, r8, #0
 800a530:	f018 020f 	ands.w	r2, r8, #15
 800a534:	d00a      	beq.n	800a54c <_strtod_l+0x56c>
 800a536:	4b13      	ldr	r3, [pc, #76]	; (800a584 <_strtod_l+0x5a4>)
 800a538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a53c:	4650      	mov	r0, sl
 800a53e:	4659      	mov	r1, fp
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f7f6 f99a 	bl	800087c <__aeabi_ddiv>
 800a548:	4682      	mov	sl, r0
 800a54a:	468b      	mov	fp, r1
 800a54c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a550:	d0d7      	beq.n	800a502 <_strtod_l+0x522>
 800a552:	f1b8 0f1f 	cmp.w	r8, #31
 800a556:	dd1f      	ble.n	800a598 <_strtod_l+0x5b8>
 800a558:	2500      	movs	r5, #0
 800a55a:	462e      	mov	r6, r5
 800a55c:	9507      	str	r5, [sp, #28]
 800a55e:	9505      	str	r5, [sp, #20]
 800a560:	2322      	movs	r3, #34	; 0x22
 800a562:	f04f 0a00 	mov.w	sl, #0
 800a566:	f04f 0b00 	mov.w	fp, #0
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	e786      	b.n	800a47c <_strtod_l+0x49c>
 800a56e:	bf00      	nop
 800a570:	0800edf9 	.word	0x0800edf9
 800a574:	0800ee38 	.word	0x0800ee38
 800a578:	0800edf1 	.word	0x0800edf1
 800a57c:	0800ef7c 	.word	0x0800ef7c
 800a580:	0800f2ab 	.word	0x0800f2ab
 800a584:	0800f170 	.word	0x0800f170
 800a588:	0800f148 	.word	0x0800f148
 800a58c:	7ff00000 	.word	0x7ff00000
 800a590:	7ca00000 	.word	0x7ca00000
 800a594:	7fefffff 	.word	0x7fefffff
 800a598:	f018 0310 	ands.w	r3, r8, #16
 800a59c:	bf18      	it	ne
 800a59e:	236a      	movne	r3, #106	; 0x6a
 800a5a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a950 <_strtod_l+0x970>
 800a5a4:	9304      	str	r3, [sp, #16]
 800a5a6:	4650      	mov	r0, sl
 800a5a8:	4659      	mov	r1, fp
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	f018 0f01 	tst.w	r8, #1
 800a5b0:	d004      	beq.n	800a5bc <_strtod_l+0x5dc>
 800a5b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a5b6:	f7f6 f837 	bl	8000628 <__aeabi_dmul>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a5c0:	f109 0908 	add.w	r9, r9, #8
 800a5c4:	d1f2      	bne.n	800a5ac <_strtod_l+0x5cc>
 800a5c6:	b10b      	cbz	r3, 800a5cc <_strtod_l+0x5ec>
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	468b      	mov	fp, r1
 800a5cc:	9b04      	ldr	r3, [sp, #16]
 800a5ce:	b1c3      	cbz	r3, 800a602 <_strtod_l+0x622>
 800a5d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a5d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	4659      	mov	r1, fp
 800a5dc:	dd11      	ble.n	800a602 <_strtod_l+0x622>
 800a5de:	2b1f      	cmp	r3, #31
 800a5e0:	f340 8124 	ble.w	800a82c <_strtod_l+0x84c>
 800a5e4:	2b34      	cmp	r3, #52	; 0x34
 800a5e6:	bfde      	ittt	le
 800a5e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a5ec:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a5f0:	fa03 f202 	lslle.w	r2, r3, r2
 800a5f4:	f04f 0a00 	mov.w	sl, #0
 800a5f8:	bfcc      	ite	gt
 800a5fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a5fe:	ea02 0b01 	andle.w	fp, r2, r1
 800a602:	2200      	movs	r2, #0
 800a604:	2300      	movs	r3, #0
 800a606:	4650      	mov	r0, sl
 800a608:	4659      	mov	r1, fp
 800a60a:	f7f6 fa75 	bl	8000af8 <__aeabi_dcmpeq>
 800a60e:	2800      	cmp	r0, #0
 800a610:	d1a2      	bne.n	800a558 <_strtod_l+0x578>
 800a612:	9b07      	ldr	r3, [sp, #28]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	9908      	ldr	r1, [sp, #32]
 800a618:	462b      	mov	r3, r5
 800a61a:	463a      	mov	r2, r7
 800a61c:	4620      	mov	r0, r4
 800a61e:	f002 f875 	bl	800c70c <__s2b>
 800a622:	9007      	str	r0, [sp, #28]
 800a624:	2800      	cmp	r0, #0
 800a626:	f43f af1f 	beq.w	800a468 <_strtod_l+0x488>
 800a62a:	9b05      	ldr	r3, [sp, #20]
 800a62c:	1b9e      	subs	r6, r3, r6
 800a62e:	9b06      	ldr	r3, [sp, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	bfb4      	ite	lt
 800a634:	4633      	movlt	r3, r6
 800a636:	2300      	movge	r3, #0
 800a638:	930c      	str	r3, [sp, #48]	; 0x30
 800a63a:	9b06      	ldr	r3, [sp, #24]
 800a63c:	2500      	movs	r5, #0
 800a63e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a642:	9312      	str	r3, [sp, #72]	; 0x48
 800a644:	462e      	mov	r6, r5
 800a646:	9b07      	ldr	r3, [sp, #28]
 800a648:	4620      	mov	r0, r4
 800a64a:	6859      	ldr	r1, [r3, #4]
 800a64c:	f001 ffb6 	bl	800c5bc <_Balloc>
 800a650:	9005      	str	r0, [sp, #20]
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f af0c 	beq.w	800a470 <_strtod_l+0x490>
 800a658:	9b07      	ldr	r3, [sp, #28]
 800a65a:	691a      	ldr	r2, [r3, #16]
 800a65c:	3202      	adds	r2, #2
 800a65e:	f103 010c 	add.w	r1, r3, #12
 800a662:	0092      	lsls	r2, r2, #2
 800a664:	300c      	adds	r0, #12
 800a666:	f7fe fcaf 	bl	8008fc8 <memcpy>
 800a66a:	ec4b ab10 	vmov	d0, sl, fp
 800a66e:	aa1a      	add	r2, sp, #104	; 0x68
 800a670:	a919      	add	r1, sp, #100	; 0x64
 800a672:	4620      	mov	r0, r4
 800a674:	f002 fb90 	bl	800cd98 <__d2b>
 800a678:	ec4b ab18 	vmov	d8, sl, fp
 800a67c:	9018      	str	r0, [sp, #96]	; 0x60
 800a67e:	2800      	cmp	r0, #0
 800a680:	f43f aef6 	beq.w	800a470 <_strtod_l+0x490>
 800a684:	2101      	movs	r1, #1
 800a686:	4620      	mov	r0, r4
 800a688:	f002 f8da 	bl	800c840 <__i2b>
 800a68c:	4606      	mov	r6, r0
 800a68e:	2800      	cmp	r0, #0
 800a690:	f43f aeee 	beq.w	800a470 <_strtod_l+0x490>
 800a694:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a696:	9904      	ldr	r1, [sp, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bfab      	itete	ge
 800a69c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a69e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a6a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a6a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a6a6:	bfac      	ite	ge
 800a6a8:	eb03 0902 	addge.w	r9, r3, r2
 800a6ac:	1ad7      	sublt	r7, r2, r3
 800a6ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a6b0:	eba3 0801 	sub.w	r8, r3, r1
 800a6b4:	4490      	add	r8, r2
 800a6b6:	4ba1      	ldr	r3, [pc, #644]	; (800a93c <_strtod_l+0x95c>)
 800a6b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a6bc:	4598      	cmp	r8, r3
 800a6be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a6c2:	f280 80c7 	bge.w	800a854 <_strtod_l+0x874>
 800a6c6:	eba3 0308 	sub.w	r3, r3, r8
 800a6ca:	2b1f      	cmp	r3, #31
 800a6cc:	eba2 0203 	sub.w	r2, r2, r3
 800a6d0:	f04f 0101 	mov.w	r1, #1
 800a6d4:	f300 80b1 	bgt.w	800a83a <_strtod_l+0x85a>
 800a6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6dc:	930d      	str	r3, [sp, #52]	; 0x34
 800a6de:	2300      	movs	r3, #0
 800a6e0:	9308      	str	r3, [sp, #32]
 800a6e2:	eb09 0802 	add.w	r8, r9, r2
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	45c1      	cmp	r9, r8
 800a6ea:	4417      	add	r7, r2
 800a6ec:	441f      	add	r7, r3
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	bfa8      	it	ge
 800a6f2:	4643      	movge	r3, r8
 800a6f4:	42bb      	cmp	r3, r7
 800a6f6:	bfa8      	it	ge
 800a6f8:	463b      	movge	r3, r7
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	bfc2      	ittt	gt
 800a6fe:	eba8 0803 	subgt.w	r8, r8, r3
 800a702:	1aff      	subgt	r7, r7, r3
 800a704:	eba9 0903 	subgt.w	r9, r9, r3
 800a708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	dd17      	ble.n	800a73e <_strtod_l+0x75e>
 800a70e:	4631      	mov	r1, r6
 800a710:	461a      	mov	r2, r3
 800a712:	4620      	mov	r0, r4
 800a714:	f002 f954 	bl	800c9c0 <__pow5mult>
 800a718:	4606      	mov	r6, r0
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f43f aea8 	beq.w	800a470 <_strtod_l+0x490>
 800a720:	4601      	mov	r1, r0
 800a722:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a724:	4620      	mov	r0, r4
 800a726:	f002 f8a1 	bl	800c86c <__multiply>
 800a72a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f43f ae9f 	beq.w	800a470 <_strtod_l+0x490>
 800a732:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a734:	4620      	mov	r0, r4
 800a736:	f001 ff81 	bl	800c63c <_Bfree>
 800a73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a73c:	9318      	str	r3, [sp, #96]	; 0x60
 800a73e:	f1b8 0f00 	cmp.w	r8, #0
 800a742:	f300 808c 	bgt.w	800a85e <_strtod_l+0x87e>
 800a746:	9b06      	ldr	r3, [sp, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	dd08      	ble.n	800a75e <_strtod_l+0x77e>
 800a74c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a74e:	9905      	ldr	r1, [sp, #20]
 800a750:	4620      	mov	r0, r4
 800a752:	f002 f935 	bl	800c9c0 <__pow5mult>
 800a756:	9005      	str	r0, [sp, #20]
 800a758:	2800      	cmp	r0, #0
 800a75a:	f43f ae89 	beq.w	800a470 <_strtod_l+0x490>
 800a75e:	2f00      	cmp	r7, #0
 800a760:	dd08      	ble.n	800a774 <_strtod_l+0x794>
 800a762:	9905      	ldr	r1, [sp, #20]
 800a764:	463a      	mov	r2, r7
 800a766:	4620      	mov	r0, r4
 800a768:	f002 f984 	bl	800ca74 <__lshift>
 800a76c:	9005      	str	r0, [sp, #20]
 800a76e:	2800      	cmp	r0, #0
 800a770:	f43f ae7e 	beq.w	800a470 <_strtod_l+0x490>
 800a774:	f1b9 0f00 	cmp.w	r9, #0
 800a778:	dd08      	ble.n	800a78c <_strtod_l+0x7ac>
 800a77a:	4631      	mov	r1, r6
 800a77c:	464a      	mov	r2, r9
 800a77e:	4620      	mov	r0, r4
 800a780:	f002 f978 	bl	800ca74 <__lshift>
 800a784:	4606      	mov	r6, r0
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f ae72 	beq.w	800a470 <_strtod_l+0x490>
 800a78c:	9a05      	ldr	r2, [sp, #20]
 800a78e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a790:	4620      	mov	r0, r4
 800a792:	f002 f9fb 	bl	800cb8c <__mdiff>
 800a796:	4605      	mov	r5, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	f43f ae69 	beq.w	800a470 <_strtod_l+0x490>
 800a79e:	68c3      	ldr	r3, [r0, #12]
 800a7a0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60c3      	str	r3, [r0, #12]
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	f002 f9d4 	bl	800cb54 <__mcmp>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	da60      	bge.n	800a872 <_strtod_l+0x892>
 800a7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7b2:	ea53 030a 	orrs.w	r3, r3, sl
 800a7b6:	f040 8082 	bne.w	800a8be <_strtod_l+0x8de>
 800a7ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d17d      	bne.n	800a8be <_strtod_l+0x8de>
 800a7c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7c6:	0d1b      	lsrs	r3, r3, #20
 800a7c8:	051b      	lsls	r3, r3, #20
 800a7ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a7ce:	d976      	bls.n	800a8be <_strtod_l+0x8de>
 800a7d0:	696b      	ldr	r3, [r5, #20]
 800a7d2:	b913      	cbnz	r3, 800a7da <_strtod_l+0x7fa>
 800a7d4:	692b      	ldr	r3, [r5, #16]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	dd71      	ble.n	800a8be <_strtod_l+0x8de>
 800a7da:	4629      	mov	r1, r5
 800a7dc:	2201      	movs	r2, #1
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f002 f948 	bl	800ca74 <__lshift>
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	f002 f9b4 	bl	800cb54 <__mcmp>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	dd66      	ble.n	800a8be <_strtod_l+0x8de>
 800a7f0:	9904      	ldr	r1, [sp, #16]
 800a7f2:	4a53      	ldr	r2, [pc, #332]	; (800a940 <_strtod_l+0x960>)
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	2900      	cmp	r1, #0
 800a7f8:	f000 8081 	beq.w	800a8fe <_strtod_l+0x91e>
 800a7fc:	ea02 010b 	and.w	r1, r2, fp
 800a800:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a804:	dc7b      	bgt.n	800a8fe <_strtod_l+0x91e>
 800a806:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a80a:	f77f aea9 	ble.w	800a560 <_strtod_l+0x580>
 800a80e:	4b4d      	ldr	r3, [pc, #308]	; (800a944 <_strtod_l+0x964>)
 800a810:	4650      	mov	r0, sl
 800a812:	4659      	mov	r1, fp
 800a814:	2200      	movs	r2, #0
 800a816:	f7f5 ff07 	bl	8000628 <__aeabi_dmul>
 800a81a:	460b      	mov	r3, r1
 800a81c:	4303      	orrs	r3, r0
 800a81e:	bf08      	it	eq
 800a820:	2322      	moveq	r3, #34	; 0x22
 800a822:	4682      	mov	sl, r0
 800a824:	468b      	mov	fp, r1
 800a826:	bf08      	it	eq
 800a828:	6023      	streq	r3, [r4, #0]
 800a82a:	e62b      	b.n	800a484 <_strtod_l+0x4a4>
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a830:	fa02 f303 	lsl.w	r3, r2, r3
 800a834:	ea03 0a0a 	and.w	sl, r3, sl
 800a838:	e6e3      	b.n	800a602 <_strtod_l+0x622>
 800a83a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a83e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a842:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a846:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a84a:	fa01 f308 	lsl.w	r3, r1, r8
 800a84e:	9308      	str	r3, [sp, #32]
 800a850:	910d      	str	r1, [sp, #52]	; 0x34
 800a852:	e746      	b.n	800a6e2 <_strtod_l+0x702>
 800a854:	2300      	movs	r3, #0
 800a856:	9308      	str	r3, [sp, #32]
 800a858:	2301      	movs	r3, #1
 800a85a:	930d      	str	r3, [sp, #52]	; 0x34
 800a85c:	e741      	b.n	800a6e2 <_strtod_l+0x702>
 800a85e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a860:	4642      	mov	r2, r8
 800a862:	4620      	mov	r0, r4
 800a864:	f002 f906 	bl	800ca74 <__lshift>
 800a868:	9018      	str	r0, [sp, #96]	; 0x60
 800a86a:	2800      	cmp	r0, #0
 800a86c:	f47f af6b 	bne.w	800a746 <_strtod_l+0x766>
 800a870:	e5fe      	b.n	800a470 <_strtod_l+0x490>
 800a872:	465f      	mov	r7, fp
 800a874:	d16e      	bne.n	800a954 <_strtod_l+0x974>
 800a876:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a878:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a87c:	b342      	cbz	r2, 800a8d0 <_strtod_l+0x8f0>
 800a87e:	4a32      	ldr	r2, [pc, #200]	; (800a948 <_strtod_l+0x968>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d128      	bne.n	800a8d6 <_strtod_l+0x8f6>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	4651      	mov	r1, sl
 800a888:	b1eb      	cbz	r3, 800a8c6 <_strtod_l+0x8e6>
 800a88a:	4b2d      	ldr	r3, [pc, #180]	; (800a940 <_strtod_l+0x960>)
 800a88c:	403b      	ands	r3, r7
 800a88e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a896:	d819      	bhi.n	800a8cc <_strtod_l+0x8ec>
 800a898:	0d1b      	lsrs	r3, r3, #20
 800a89a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	4299      	cmp	r1, r3
 800a8a4:	d117      	bne.n	800a8d6 <_strtod_l+0x8f6>
 800a8a6:	4b29      	ldr	r3, [pc, #164]	; (800a94c <_strtod_l+0x96c>)
 800a8a8:	429f      	cmp	r7, r3
 800a8aa:	d102      	bne.n	800a8b2 <_strtod_l+0x8d2>
 800a8ac:	3101      	adds	r1, #1
 800a8ae:	f43f addf 	beq.w	800a470 <_strtod_l+0x490>
 800a8b2:	4b23      	ldr	r3, [pc, #140]	; (800a940 <_strtod_l+0x960>)
 800a8b4:	403b      	ands	r3, r7
 800a8b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a8ba:	f04f 0a00 	mov.w	sl, #0
 800a8be:	9b04      	ldr	r3, [sp, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1a4      	bne.n	800a80e <_strtod_l+0x82e>
 800a8c4:	e5de      	b.n	800a484 <_strtod_l+0x4a4>
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8ca:	e7ea      	b.n	800a8a2 <_strtod_l+0x8c2>
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	e7e8      	b.n	800a8a2 <_strtod_l+0x8c2>
 800a8d0:	ea53 030a 	orrs.w	r3, r3, sl
 800a8d4:	d08c      	beq.n	800a7f0 <_strtod_l+0x810>
 800a8d6:	9b08      	ldr	r3, [sp, #32]
 800a8d8:	b1db      	cbz	r3, 800a912 <_strtod_l+0x932>
 800a8da:	423b      	tst	r3, r7
 800a8dc:	d0ef      	beq.n	800a8be <_strtod_l+0x8de>
 800a8de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8e0:	9a04      	ldr	r2, [sp, #16]
 800a8e2:	4650      	mov	r0, sl
 800a8e4:	4659      	mov	r1, fp
 800a8e6:	b1c3      	cbz	r3, 800a91a <_strtod_l+0x93a>
 800a8e8:	f7ff fb5b 	bl	8009fa2 <sulp>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	ec51 0b18 	vmov	r0, r1, d8
 800a8f4:	f7f5 fce2 	bl	80002bc <__adddf3>
 800a8f8:	4682      	mov	sl, r0
 800a8fa:	468b      	mov	fp, r1
 800a8fc:	e7df      	b.n	800a8be <_strtod_l+0x8de>
 800a8fe:	4013      	ands	r3, r2
 800a900:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a904:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a908:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a90c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a910:	e7d5      	b.n	800a8be <_strtod_l+0x8de>
 800a912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a914:	ea13 0f0a 	tst.w	r3, sl
 800a918:	e7e0      	b.n	800a8dc <_strtod_l+0x8fc>
 800a91a:	f7ff fb42 	bl	8009fa2 <sulp>
 800a91e:	4602      	mov	r2, r0
 800a920:	460b      	mov	r3, r1
 800a922:	ec51 0b18 	vmov	r0, r1, d8
 800a926:	f7f5 fcc7 	bl	80002b8 <__aeabi_dsub>
 800a92a:	2200      	movs	r2, #0
 800a92c:	2300      	movs	r3, #0
 800a92e:	4682      	mov	sl, r0
 800a930:	468b      	mov	fp, r1
 800a932:	f7f6 f8e1 	bl	8000af8 <__aeabi_dcmpeq>
 800a936:	2800      	cmp	r0, #0
 800a938:	d0c1      	beq.n	800a8be <_strtod_l+0x8de>
 800a93a:	e611      	b.n	800a560 <_strtod_l+0x580>
 800a93c:	fffffc02 	.word	0xfffffc02
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	39500000 	.word	0x39500000
 800a948:	000fffff 	.word	0x000fffff
 800a94c:	7fefffff 	.word	0x7fefffff
 800a950:	0800ee50 	.word	0x0800ee50
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	f002 fa7a 	bl	800ce50 <__ratio>
 800a95c:	ec59 8b10 	vmov	r8, r9, d0
 800a960:	ee10 0a10 	vmov	r0, s0
 800a964:	2200      	movs	r2, #0
 800a966:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7f6 f8d8 	bl	8000b20 <__aeabi_dcmple>
 800a970:	2800      	cmp	r0, #0
 800a972:	d07a      	beq.n	800aa6a <_strtod_l+0xa8a>
 800a974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a976:	2b00      	cmp	r3, #0
 800a978:	d04a      	beq.n	800aa10 <_strtod_l+0xa30>
 800a97a:	4b95      	ldr	r3, [pc, #596]	; (800abd0 <_strtod_l+0xbf0>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a982:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800abd0 <_strtod_l+0xbf0>
 800a986:	f04f 0800 	mov.w	r8, #0
 800a98a:	4b92      	ldr	r3, [pc, #584]	; (800abd4 <_strtod_l+0xbf4>)
 800a98c:	403b      	ands	r3, r7
 800a98e:	930d      	str	r3, [sp, #52]	; 0x34
 800a990:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a992:	4b91      	ldr	r3, [pc, #580]	; (800abd8 <_strtod_l+0xbf8>)
 800a994:	429a      	cmp	r2, r3
 800a996:	f040 80b0 	bne.w	800aafa <_strtod_l+0xb1a>
 800a99a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a99e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a9a2:	ec4b ab10 	vmov	d0, sl, fp
 800a9a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9aa:	f002 f979 	bl	800cca0 <__ulp>
 800a9ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9b2:	ec53 2b10 	vmov	r2, r3, d0
 800a9b6:	f7f5 fe37 	bl	8000628 <__aeabi_dmul>
 800a9ba:	4652      	mov	r2, sl
 800a9bc:	465b      	mov	r3, fp
 800a9be:	f7f5 fc7d 	bl	80002bc <__adddf3>
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4983      	ldr	r1, [pc, #524]	; (800abd4 <_strtod_l+0xbf4>)
 800a9c6:	4a85      	ldr	r2, [pc, #532]	; (800abdc <_strtod_l+0xbfc>)
 800a9c8:	4019      	ands	r1, r3
 800a9ca:	4291      	cmp	r1, r2
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	d960      	bls.n	800aa92 <_strtod_l+0xab2>
 800a9d0:	ee18 3a90 	vmov	r3, s17
 800a9d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d104      	bne.n	800a9e6 <_strtod_l+0xa06>
 800a9dc:	ee18 3a10 	vmov	r3, s16
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	f43f ad45 	beq.w	800a470 <_strtod_l+0x490>
 800a9e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800abe8 <_strtod_l+0xc08>
 800a9ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a9ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 fe23 	bl	800c63c <_Bfree>
 800a9f6:	9905      	ldr	r1, [sp, #20]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f001 fe1f 	bl	800c63c <_Bfree>
 800a9fe:	4631      	mov	r1, r6
 800aa00:	4620      	mov	r0, r4
 800aa02:	f001 fe1b 	bl	800c63c <_Bfree>
 800aa06:	4629      	mov	r1, r5
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f001 fe17 	bl	800c63c <_Bfree>
 800aa0e:	e61a      	b.n	800a646 <_strtod_l+0x666>
 800aa10:	f1ba 0f00 	cmp.w	sl, #0
 800aa14:	d11b      	bne.n	800aa4e <_strtod_l+0xa6e>
 800aa16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa1a:	b9f3      	cbnz	r3, 800aa5a <_strtod_l+0xa7a>
 800aa1c:	4b6c      	ldr	r3, [pc, #432]	; (800abd0 <_strtod_l+0xbf0>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4640      	mov	r0, r8
 800aa22:	4649      	mov	r1, r9
 800aa24:	f7f6 f872 	bl	8000b0c <__aeabi_dcmplt>
 800aa28:	b9d0      	cbnz	r0, 800aa60 <_strtod_l+0xa80>
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	4b6c      	ldr	r3, [pc, #432]	; (800abe0 <_strtod_l+0xc00>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	f7f5 fdf9 	bl	8000628 <__aeabi_dmul>
 800aa36:	4680      	mov	r8, r0
 800aa38:	4689      	mov	r9, r1
 800aa3a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa3e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800aa42:	9315      	str	r3, [sp, #84]	; 0x54
 800aa44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa48:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa4c:	e79d      	b.n	800a98a <_strtod_l+0x9aa>
 800aa4e:	f1ba 0f01 	cmp.w	sl, #1
 800aa52:	d102      	bne.n	800aa5a <_strtod_l+0xa7a>
 800aa54:	2f00      	cmp	r7, #0
 800aa56:	f43f ad83 	beq.w	800a560 <_strtod_l+0x580>
 800aa5a:	4b62      	ldr	r3, [pc, #392]	; (800abe4 <_strtod_l+0xc04>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	e78e      	b.n	800a97e <_strtod_l+0x99e>
 800aa60:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800abe0 <_strtod_l+0xc00>
 800aa64:	f04f 0800 	mov.w	r8, #0
 800aa68:	e7e7      	b.n	800aa3a <_strtod_l+0xa5a>
 800aa6a:	4b5d      	ldr	r3, [pc, #372]	; (800abe0 <_strtod_l+0xc00>)
 800aa6c:	4640      	mov	r0, r8
 800aa6e:	4649      	mov	r1, r9
 800aa70:	2200      	movs	r2, #0
 800aa72:	f7f5 fdd9 	bl	8000628 <__aeabi_dmul>
 800aa76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4689      	mov	r9, r1
 800aa7c:	b933      	cbnz	r3, 800aa8c <_strtod_l+0xaac>
 800aa7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa82:	900e      	str	r0, [sp, #56]	; 0x38
 800aa84:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aa8a:	e7dd      	b.n	800aa48 <_strtod_l+0xa68>
 800aa8c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800aa90:	e7f9      	b.n	800aa86 <_strtod_l+0xaa6>
 800aa92:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1a8      	bne.n	800a9ee <_strtod_l+0xa0e>
 800aa9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aaa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aaa2:	0d1b      	lsrs	r3, r3, #20
 800aaa4:	051b      	lsls	r3, r3, #20
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d1a1      	bne.n	800a9ee <_strtod_l+0xa0e>
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f6 f91b 	bl	8000ce8 <__aeabi_d2lz>
 800aab2:	f7f5 fd8b 	bl	80005cc <__aeabi_l2d>
 800aab6:	4602      	mov	r2, r0
 800aab8:	460b      	mov	r3, r1
 800aaba:	4640      	mov	r0, r8
 800aabc:	4649      	mov	r1, r9
 800aabe:	f7f5 fbfb 	bl	80002b8 <__aeabi_dsub>
 800aac2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aac8:	ea43 030a 	orr.w	r3, r3, sl
 800aacc:	4313      	orrs	r3, r2
 800aace:	4680      	mov	r8, r0
 800aad0:	4689      	mov	r9, r1
 800aad2:	d055      	beq.n	800ab80 <_strtod_l+0xba0>
 800aad4:	a336      	add	r3, pc, #216	; (adr r3, 800abb0 <_strtod_l+0xbd0>)
 800aad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aada:	f7f6 f817 	bl	8000b0c <__aeabi_dcmplt>
 800aade:	2800      	cmp	r0, #0
 800aae0:	f47f acd0 	bne.w	800a484 <_strtod_l+0x4a4>
 800aae4:	a334      	add	r3, pc, #208	; (adr r3, 800abb8 <_strtod_l+0xbd8>)
 800aae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	f7f6 f82b 	bl	8000b48 <__aeabi_dcmpgt>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	f43f af7b 	beq.w	800a9ee <_strtod_l+0xa0e>
 800aaf8:	e4c4      	b.n	800a484 <_strtod_l+0x4a4>
 800aafa:	9b04      	ldr	r3, [sp, #16]
 800aafc:	b333      	cbz	r3, 800ab4c <_strtod_l+0xb6c>
 800aafe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab04:	d822      	bhi.n	800ab4c <_strtod_l+0xb6c>
 800ab06:	a32e      	add	r3, pc, #184	; (adr r3, 800abc0 <_strtod_l+0xbe0>)
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	4640      	mov	r0, r8
 800ab0e:	4649      	mov	r1, r9
 800ab10:	f7f6 f806 	bl	8000b20 <__aeabi_dcmple>
 800ab14:	b1a0      	cbz	r0, 800ab40 <_strtod_l+0xb60>
 800ab16:	4649      	mov	r1, r9
 800ab18:	4640      	mov	r0, r8
 800ab1a:	f7f6 f85d 	bl	8000bd8 <__aeabi_d2uiz>
 800ab1e:	2801      	cmp	r0, #1
 800ab20:	bf38      	it	cc
 800ab22:	2001      	movcc	r0, #1
 800ab24:	f7f5 fd06 	bl	8000534 <__aeabi_ui2d>
 800ab28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	4689      	mov	r9, r1
 800ab2e:	bb23      	cbnz	r3, 800ab7a <_strtod_l+0xb9a>
 800ab30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab34:	9010      	str	r0, [sp, #64]	; 0x40
 800ab36:	9311      	str	r3, [sp, #68]	; 0x44
 800ab38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ab3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab44:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab50:	eeb0 0a48 	vmov.f32	s0, s16
 800ab54:	eef0 0a68 	vmov.f32	s1, s17
 800ab58:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab5c:	f002 f8a0 	bl	800cca0 <__ulp>
 800ab60:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab64:	ec53 2b10 	vmov	r2, r3, d0
 800ab68:	f7f5 fd5e 	bl	8000628 <__aeabi_dmul>
 800ab6c:	ec53 2b18 	vmov	r2, r3, d8
 800ab70:	f7f5 fba4 	bl	80002bc <__adddf3>
 800ab74:	4682      	mov	sl, r0
 800ab76:	468b      	mov	fp, r1
 800ab78:	e78d      	b.n	800aa96 <_strtod_l+0xab6>
 800ab7a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ab7e:	e7db      	b.n	800ab38 <_strtod_l+0xb58>
 800ab80:	a311      	add	r3, pc, #68	; (adr r3, 800abc8 <_strtod_l+0xbe8>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	f7f5 ffc1 	bl	8000b0c <__aeabi_dcmplt>
 800ab8a:	e7b2      	b.n	800aaf2 <_strtod_l+0xb12>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab94:	6013      	str	r3, [r2, #0]
 800ab96:	f7ff ba6b 	b.w	800a070 <_strtod_l+0x90>
 800ab9a:	2a65      	cmp	r2, #101	; 0x65
 800ab9c:	f43f ab5f 	beq.w	800a25e <_strtod_l+0x27e>
 800aba0:	2a45      	cmp	r2, #69	; 0x45
 800aba2:	f43f ab5c 	beq.w	800a25e <_strtod_l+0x27e>
 800aba6:	2301      	movs	r3, #1
 800aba8:	f7ff bb94 	b.w	800a2d4 <_strtod_l+0x2f4>
 800abac:	f3af 8000 	nop.w
 800abb0:	94a03595 	.word	0x94a03595
 800abb4:	3fdfffff 	.word	0x3fdfffff
 800abb8:	35afe535 	.word	0x35afe535
 800abbc:	3fe00000 	.word	0x3fe00000
 800abc0:	ffc00000 	.word	0xffc00000
 800abc4:	41dfffff 	.word	0x41dfffff
 800abc8:	94a03595 	.word	0x94a03595
 800abcc:	3fcfffff 	.word	0x3fcfffff
 800abd0:	3ff00000 	.word	0x3ff00000
 800abd4:	7ff00000 	.word	0x7ff00000
 800abd8:	7fe00000 	.word	0x7fe00000
 800abdc:	7c9fffff 	.word	0x7c9fffff
 800abe0:	3fe00000 	.word	0x3fe00000
 800abe4:	bff00000 	.word	0xbff00000
 800abe8:	7fefffff 	.word	0x7fefffff

0800abec <_strtod_r>:
 800abec:	4b01      	ldr	r3, [pc, #4]	; (800abf4 <_strtod_r+0x8>)
 800abee:	f7ff b9f7 	b.w	8009fe0 <_strtod_l>
 800abf2:	bf00      	nop
 800abf4:	20000084 	.word	0x20000084

0800abf8 <_strtol_l.constprop.0>:
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfe:	d001      	beq.n	800ac04 <_strtol_l.constprop.0+0xc>
 800ac00:	2b24      	cmp	r3, #36	; 0x24
 800ac02:	d906      	bls.n	800ac12 <_strtol_l.constprop.0+0x1a>
 800ac04:	f7fe f9b6 	bl	8008f74 <__errno>
 800ac08:	2316      	movs	r3, #22
 800ac0a:	6003      	str	r3, [r0, #0]
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac12:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800acf8 <_strtol_l.constprop.0+0x100>
 800ac16:	460d      	mov	r5, r1
 800ac18:	462e      	mov	r6, r5
 800ac1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac1e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ac22:	f017 0708 	ands.w	r7, r7, #8
 800ac26:	d1f7      	bne.n	800ac18 <_strtol_l.constprop.0+0x20>
 800ac28:	2c2d      	cmp	r4, #45	; 0x2d
 800ac2a:	d132      	bne.n	800ac92 <_strtol_l.constprop.0+0x9a>
 800ac2c:	782c      	ldrb	r4, [r5, #0]
 800ac2e:	2701      	movs	r7, #1
 800ac30:	1cb5      	adds	r5, r6, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d05b      	beq.n	800acee <_strtol_l.constprop.0+0xf6>
 800ac36:	2b10      	cmp	r3, #16
 800ac38:	d109      	bne.n	800ac4e <_strtol_l.constprop.0+0x56>
 800ac3a:	2c30      	cmp	r4, #48	; 0x30
 800ac3c:	d107      	bne.n	800ac4e <_strtol_l.constprop.0+0x56>
 800ac3e:	782c      	ldrb	r4, [r5, #0]
 800ac40:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac44:	2c58      	cmp	r4, #88	; 0x58
 800ac46:	d14d      	bne.n	800ace4 <_strtol_l.constprop.0+0xec>
 800ac48:	786c      	ldrb	r4, [r5, #1]
 800ac4a:	2310      	movs	r3, #16
 800ac4c:	3502      	adds	r5, #2
 800ac4e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ac52:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ac56:	f04f 0c00 	mov.w	ip, #0
 800ac5a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac5e:	4666      	mov	r6, ip
 800ac60:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac64:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac68:	f1be 0f09 	cmp.w	lr, #9
 800ac6c:	d816      	bhi.n	800ac9c <_strtol_l.constprop.0+0xa4>
 800ac6e:	4674      	mov	r4, lr
 800ac70:	42a3      	cmp	r3, r4
 800ac72:	dd24      	ble.n	800acbe <_strtol_l.constprop.0+0xc6>
 800ac74:	f1bc 0f00 	cmp.w	ip, #0
 800ac78:	db1e      	blt.n	800acb8 <_strtol_l.constprop.0+0xc0>
 800ac7a:	45b1      	cmp	r9, r6
 800ac7c:	d31c      	bcc.n	800acb8 <_strtol_l.constprop.0+0xc0>
 800ac7e:	d101      	bne.n	800ac84 <_strtol_l.constprop.0+0x8c>
 800ac80:	45a2      	cmp	sl, r4
 800ac82:	db19      	blt.n	800acb8 <_strtol_l.constprop.0+0xc0>
 800ac84:	fb06 4603 	mla	r6, r6, r3, r4
 800ac88:	f04f 0c01 	mov.w	ip, #1
 800ac8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac90:	e7e8      	b.n	800ac64 <_strtol_l.constprop.0+0x6c>
 800ac92:	2c2b      	cmp	r4, #43	; 0x2b
 800ac94:	bf04      	itt	eq
 800ac96:	782c      	ldrbeq	r4, [r5, #0]
 800ac98:	1cb5      	addeq	r5, r6, #2
 800ac9a:	e7ca      	b.n	800ac32 <_strtol_l.constprop.0+0x3a>
 800ac9c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aca0:	f1be 0f19 	cmp.w	lr, #25
 800aca4:	d801      	bhi.n	800acaa <_strtol_l.constprop.0+0xb2>
 800aca6:	3c37      	subs	r4, #55	; 0x37
 800aca8:	e7e2      	b.n	800ac70 <_strtol_l.constprop.0+0x78>
 800acaa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800acae:	f1be 0f19 	cmp.w	lr, #25
 800acb2:	d804      	bhi.n	800acbe <_strtol_l.constprop.0+0xc6>
 800acb4:	3c57      	subs	r4, #87	; 0x57
 800acb6:	e7db      	b.n	800ac70 <_strtol_l.constprop.0+0x78>
 800acb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800acbc:	e7e6      	b.n	800ac8c <_strtol_l.constprop.0+0x94>
 800acbe:	f1bc 0f00 	cmp.w	ip, #0
 800acc2:	da05      	bge.n	800acd0 <_strtol_l.constprop.0+0xd8>
 800acc4:	2322      	movs	r3, #34	; 0x22
 800acc6:	6003      	str	r3, [r0, #0]
 800acc8:	4646      	mov	r6, r8
 800acca:	b942      	cbnz	r2, 800acde <_strtol_l.constprop.0+0xe6>
 800accc:	4630      	mov	r0, r6
 800acce:	e79e      	b.n	800ac0e <_strtol_l.constprop.0+0x16>
 800acd0:	b107      	cbz	r7, 800acd4 <_strtol_l.constprop.0+0xdc>
 800acd2:	4276      	negs	r6, r6
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	d0f9      	beq.n	800accc <_strtol_l.constprop.0+0xd4>
 800acd8:	f1bc 0f00 	cmp.w	ip, #0
 800acdc:	d000      	beq.n	800ace0 <_strtol_l.constprop.0+0xe8>
 800acde:	1e69      	subs	r1, r5, #1
 800ace0:	6011      	str	r1, [r2, #0]
 800ace2:	e7f3      	b.n	800accc <_strtol_l.constprop.0+0xd4>
 800ace4:	2430      	movs	r4, #48	; 0x30
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d1b1      	bne.n	800ac4e <_strtol_l.constprop.0+0x56>
 800acea:	2308      	movs	r3, #8
 800acec:	e7af      	b.n	800ac4e <_strtol_l.constprop.0+0x56>
 800acee:	2c30      	cmp	r4, #48	; 0x30
 800acf0:	d0a5      	beq.n	800ac3e <_strtol_l.constprop.0+0x46>
 800acf2:	230a      	movs	r3, #10
 800acf4:	e7ab      	b.n	800ac4e <_strtol_l.constprop.0+0x56>
 800acf6:	bf00      	nop
 800acf8:	0800ee79 	.word	0x0800ee79

0800acfc <_strtol_r>:
 800acfc:	f7ff bf7c 	b.w	800abf8 <_strtol_l.constprop.0>

0800ad00 <_write_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d07      	ldr	r5, [pc, #28]	; (800ad20 <_write_r+0x20>)
 800ad04:	4604      	mov	r4, r0
 800ad06:	4608      	mov	r0, r1
 800ad08:	4611      	mov	r1, r2
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	602a      	str	r2, [r5, #0]
 800ad0e:	461a      	mov	r2, r3
 800ad10:	f7fe f827 	bl	8008d62 <_write>
 800ad14:	1c43      	adds	r3, r0, #1
 800ad16:	d102      	bne.n	800ad1e <_write_r+0x1e>
 800ad18:	682b      	ldr	r3, [r5, #0]
 800ad1a:	b103      	cbz	r3, 800ad1e <_write_r+0x1e>
 800ad1c:	6023      	str	r3, [r4, #0]
 800ad1e:	bd38      	pop	{r3, r4, r5, pc}
 800ad20:	2000147c 	.word	0x2000147c

0800ad24 <_close_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4d06      	ldr	r5, [pc, #24]	; (800ad40 <_close_r+0x1c>)
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7fe f833 	bl	8008d9a <_close>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_close_r+0x1a>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_close_r+0x1a>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	2000147c 	.word	0x2000147c

0800ad44 <quorem>:
 800ad44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	6903      	ldr	r3, [r0, #16]
 800ad4a:	690c      	ldr	r4, [r1, #16]
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	4607      	mov	r7, r0
 800ad50:	f2c0 8081 	blt.w	800ae56 <quorem+0x112>
 800ad54:	3c01      	subs	r4, #1
 800ad56:	f101 0814 	add.w	r8, r1, #20
 800ad5a:	f100 0514 	add.w	r5, r0, #20
 800ad5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad78:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad7c:	d331      	bcc.n	800ade2 <quorem+0x9e>
 800ad7e:	f04f 0e00 	mov.w	lr, #0
 800ad82:	4640      	mov	r0, r8
 800ad84:	46ac      	mov	ip, r5
 800ad86:	46f2      	mov	sl, lr
 800ad88:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad8c:	b293      	uxth	r3, r2
 800ad8e:	fb06 e303 	mla	r3, r6, r3, lr
 800ad92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	ebaa 0303 	sub.w	r3, sl, r3
 800ad9c:	f8dc a000 	ldr.w	sl, [ip]
 800ada0:	0c12      	lsrs	r2, r2, #16
 800ada2:	fa13 f38a 	uxtah	r3, r3, sl
 800ada6:	fb06 e202 	mla	r2, r6, r2, lr
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adb2:	b292      	uxth	r2, r2
 800adb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adbc:	f8bd 3000 	ldrh.w	r3, [sp]
 800adc0:	4581      	cmp	r9, r0
 800adc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adc6:	f84c 3b04 	str.w	r3, [ip], #4
 800adca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adce:	d2db      	bcs.n	800ad88 <quorem+0x44>
 800add0:	f855 300b 	ldr.w	r3, [r5, fp]
 800add4:	b92b      	cbnz	r3, 800ade2 <quorem+0x9e>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	3b04      	subs	r3, #4
 800adda:	429d      	cmp	r5, r3
 800addc:	461a      	mov	r2, r3
 800adde:	d32e      	bcc.n	800ae3e <quorem+0xfa>
 800ade0:	613c      	str	r4, [r7, #16]
 800ade2:	4638      	mov	r0, r7
 800ade4:	f001 feb6 	bl	800cb54 <__mcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	db24      	blt.n	800ae36 <quorem+0xf2>
 800adec:	3601      	adds	r6, #1
 800adee:	4628      	mov	r0, r5
 800adf0:	f04f 0c00 	mov.w	ip, #0
 800adf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800adf8:	f8d0 e000 	ldr.w	lr, [r0]
 800adfc:	b293      	uxth	r3, r2
 800adfe:	ebac 0303 	sub.w	r3, ip, r3
 800ae02:	0c12      	lsrs	r2, r2, #16
 800ae04:	fa13 f38e 	uxtah	r3, r3, lr
 800ae08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae16:	45c1      	cmp	r9, r8
 800ae18:	f840 3b04 	str.w	r3, [r0], #4
 800ae1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae20:	d2e8      	bcs.n	800adf4 <quorem+0xb0>
 800ae22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae2a:	b922      	cbnz	r2, 800ae36 <quorem+0xf2>
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	429d      	cmp	r5, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	d30a      	bcc.n	800ae4a <quorem+0x106>
 800ae34:	613c      	str	r4, [r7, #16]
 800ae36:	4630      	mov	r0, r6
 800ae38:	b003      	add	sp, #12
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d1cc      	bne.n	800ade0 <quorem+0x9c>
 800ae46:	3c01      	subs	r4, #1
 800ae48:	e7c7      	b.n	800adda <quorem+0x96>
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	d1f0      	bne.n	800ae34 <quorem+0xf0>
 800ae52:	3c01      	subs	r4, #1
 800ae54:	e7eb      	b.n	800ae2e <quorem+0xea>
 800ae56:	2000      	movs	r0, #0
 800ae58:	e7ee      	b.n	800ae38 <quorem+0xf4>
 800ae5a:	0000      	movs	r0, r0
 800ae5c:	0000      	movs	r0, r0
	...

0800ae60 <_dtoa_r>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	ed2d 8b04 	vpush	{d8-d9}
 800ae68:	ec57 6b10 	vmov	r6, r7, d0
 800ae6c:	b093      	sub	sp, #76	; 0x4c
 800ae6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae74:	9106      	str	r1, [sp, #24]
 800ae76:	ee10 aa10 	vmov	sl, s0
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae80:	46bb      	mov	fp, r7
 800ae82:	b975      	cbnz	r5, 800aea2 <_dtoa_r+0x42>
 800ae84:	2010      	movs	r0, #16
 800ae86:	f001 fb7f 	bl	800c588 <malloc>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	6260      	str	r0, [r4, #36]	; 0x24
 800ae8e:	b920      	cbnz	r0, 800ae9a <_dtoa_r+0x3a>
 800ae90:	4ba7      	ldr	r3, [pc, #668]	; (800b130 <_dtoa_r+0x2d0>)
 800ae92:	21ea      	movs	r1, #234	; 0xea
 800ae94:	48a7      	ldr	r0, [pc, #668]	; (800b134 <_dtoa_r+0x2d4>)
 800ae96:	f002 fefb 	bl	800dc90 <__assert_func>
 800ae9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae9e:	6005      	str	r5, [r0, #0]
 800aea0:	60c5      	str	r5, [r0, #12]
 800aea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aea4:	6819      	ldr	r1, [r3, #0]
 800aea6:	b151      	cbz	r1, 800aebe <_dtoa_r+0x5e>
 800aea8:	685a      	ldr	r2, [r3, #4]
 800aeaa:	604a      	str	r2, [r1, #4]
 800aeac:	2301      	movs	r3, #1
 800aeae:	4093      	lsls	r3, r2
 800aeb0:	608b      	str	r3, [r1, #8]
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f001 fbc2 	bl	800c63c <_Bfree>
 800aeb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	1e3b      	subs	r3, r7, #0
 800aec0:	bfaa      	itet	ge
 800aec2:	2300      	movge	r3, #0
 800aec4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aec8:	f8c8 3000 	strge.w	r3, [r8]
 800aecc:	4b9a      	ldr	r3, [pc, #616]	; (800b138 <_dtoa_r+0x2d8>)
 800aece:	bfbc      	itt	lt
 800aed0:	2201      	movlt	r2, #1
 800aed2:	f8c8 2000 	strlt.w	r2, [r8]
 800aed6:	ea33 030b 	bics.w	r3, r3, fp
 800aeda:	d11b      	bne.n	800af14 <_dtoa_r+0xb4>
 800aedc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aede:	f242 730f 	movw	r3, #9999	; 0x270f
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aee8:	4333      	orrs	r3, r6
 800aeea:	f000 8592 	beq.w	800ba12 <_dtoa_r+0xbb2>
 800aeee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aef0:	b963      	cbnz	r3, 800af0c <_dtoa_r+0xac>
 800aef2:	4b92      	ldr	r3, [pc, #584]	; (800b13c <_dtoa_r+0x2dc>)
 800aef4:	e022      	b.n	800af3c <_dtoa_r+0xdc>
 800aef6:	4b92      	ldr	r3, [pc, #584]	; (800b140 <_dtoa_r+0x2e0>)
 800aef8:	9301      	str	r3, [sp, #4]
 800aefa:	3308      	adds	r3, #8
 800aefc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	9801      	ldr	r0, [sp, #4]
 800af02:	b013      	add	sp, #76	; 0x4c
 800af04:	ecbd 8b04 	vpop	{d8-d9}
 800af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0c:	4b8b      	ldr	r3, [pc, #556]	; (800b13c <_dtoa_r+0x2dc>)
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	3303      	adds	r3, #3
 800af12:	e7f3      	b.n	800aefc <_dtoa_r+0x9c>
 800af14:	2200      	movs	r2, #0
 800af16:	2300      	movs	r3, #0
 800af18:	4650      	mov	r0, sl
 800af1a:	4659      	mov	r1, fp
 800af1c:	f7f5 fdec 	bl	8000af8 <__aeabi_dcmpeq>
 800af20:	ec4b ab19 	vmov	d9, sl, fp
 800af24:	4680      	mov	r8, r0
 800af26:	b158      	cbz	r0, 800af40 <_dtoa_r+0xe0>
 800af28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af2a:	2301      	movs	r3, #1
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 856b 	beq.w	800ba0c <_dtoa_r+0xbac>
 800af36:	4883      	ldr	r0, [pc, #524]	; (800b144 <_dtoa_r+0x2e4>)
 800af38:	6018      	str	r0, [r3, #0]
 800af3a:	1e43      	subs	r3, r0, #1
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	e7df      	b.n	800af00 <_dtoa_r+0xa0>
 800af40:	ec4b ab10 	vmov	d0, sl, fp
 800af44:	aa10      	add	r2, sp, #64	; 0x40
 800af46:	a911      	add	r1, sp, #68	; 0x44
 800af48:	4620      	mov	r0, r4
 800af4a:	f001 ff25 	bl	800cd98 <__d2b>
 800af4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800af52:	ee08 0a10 	vmov	s16, r0
 800af56:	2d00      	cmp	r5, #0
 800af58:	f000 8084 	beq.w	800b064 <_dtoa_r+0x204>
 800af5c:	ee19 3a90 	vmov	r3, s19
 800af60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af68:	4656      	mov	r6, sl
 800af6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800af76:	4b74      	ldr	r3, [pc, #464]	; (800b148 <_dtoa_r+0x2e8>)
 800af78:	2200      	movs	r2, #0
 800af7a:	4630      	mov	r0, r6
 800af7c:	4639      	mov	r1, r7
 800af7e:	f7f5 f99b 	bl	80002b8 <__aeabi_dsub>
 800af82:	a365      	add	r3, pc, #404	; (adr r3, 800b118 <_dtoa_r+0x2b8>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f7f5 fb4e 	bl	8000628 <__aeabi_dmul>
 800af8c:	a364      	add	r3, pc, #400	; (adr r3, 800b120 <_dtoa_r+0x2c0>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 f993 	bl	80002bc <__adddf3>
 800af96:	4606      	mov	r6, r0
 800af98:	4628      	mov	r0, r5
 800af9a:	460f      	mov	r7, r1
 800af9c:	f7f5 fada 	bl	8000554 <__aeabi_i2d>
 800afa0:	a361      	add	r3, pc, #388	; (adr r3, 800b128 <_dtoa_r+0x2c8>)
 800afa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa6:	f7f5 fb3f 	bl	8000628 <__aeabi_dmul>
 800afaa:	4602      	mov	r2, r0
 800afac:	460b      	mov	r3, r1
 800afae:	4630      	mov	r0, r6
 800afb0:	4639      	mov	r1, r7
 800afb2:	f7f5 f983 	bl	80002bc <__adddf3>
 800afb6:	4606      	mov	r6, r0
 800afb8:	460f      	mov	r7, r1
 800afba:	f7f5 fde5 	bl	8000b88 <__aeabi_d2iz>
 800afbe:	2200      	movs	r2, #0
 800afc0:	9000      	str	r0, [sp, #0]
 800afc2:	2300      	movs	r3, #0
 800afc4:	4630      	mov	r0, r6
 800afc6:	4639      	mov	r1, r7
 800afc8:	f7f5 fda0 	bl	8000b0c <__aeabi_dcmplt>
 800afcc:	b150      	cbz	r0, 800afe4 <_dtoa_r+0x184>
 800afce:	9800      	ldr	r0, [sp, #0]
 800afd0:	f7f5 fac0 	bl	8000554 <__aeabi_i2d>
 800afd4:	4632      	mov	r2, r6
 800afd6:	463b      	mov	r3, r7
 800afd8:	f7f5 fd8e 	bl	8000af8 <__aeabi_dcmpeq>
 800afdc:	b910      	cbnz	r0, 800afe4 <_dtoa_r+0x184>
 800afde:	9b00      	ldr	r3, [sp, #0]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	9b00      	ldr	r3, [sp, #0]
 800afe6:	2b16      	cmp	r3, #22
 800afe8:	d85a      	bhi.n	800b0a0 <_dtoa_r+0x240>
 800afea:	9a00      	ldr	r2, [sp, #0]
 800afec:	4b57      	ldr	r3, [pc, #348]	; (800b14c <_dtoa_r+0x2ec>)
 800afee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	ec51 0b19 	vmov	r0, r1, d9
 800affa:	f7f5 fd87 	bl	8000b0c <__aeabi_dcmplt>
 800affe:	2800      	cmp	r0, #0
 800b000:	d050      	beq.n	800b0a4 <_dtoa_r+0x244>
 800b002:	9b00      	ldr	r3, [sp, #0]
 800b004:	3b01      	subs	r3, #1
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	2300      	movs	r3, #0
 800b00a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b00c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b00e:	1b5d      	subs	r5, r3, r5
 800b010:	1e6b      	subs	r3, r5, #1
 800b012:	9305      	str	r3, [sp, #20]
 800b014:	bf45      	ittet	mi
 800b016:	f1c5 0301 	rsbmi	r3, r5, #1
 800b01a:	9304      	strmi	r3, [sp, #16]
 800b01c:	2300      	movpl	r3, #0
 800b01e:	2300      	movmi	r3, #0
 800b020:	bf4c      	ite	mi
 800b022:	9305      	strmi	r3, [sp, #20]
 800b024:	9304      	strpl	r3, [sp, #16]
 800b026:	9b00      	ldr	r3, [sp, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	db3d      	blt.n	800b0a8 <_dtoa_r+0x248>
 800b02c:	9b05      	ldr	r3, [sp, #20]
 800b02e:	9a00      	ldr	r2, [sp, #0]
 800b030:	920a      	str	r2, [sp, #40]	; 0x28
 800b032:	4413      	add	r3, r2
 800b034:	9305      	str	r3, [sp, #20]
 800b036:	2300      	movs	r3, #0
 800b038:	9307      	str	r3, [sp, #28]
 800b03a:	9b06      	ldr	r3, [sp, #24]
 800b03c:	2b09      	cmp	r3, #9
 800b03e:	f200 8089 	bhi.w	800b154 <_dtoa_r+0x2f4>
 800b042:	2b05      	cmp	r3, #5
 800b044:	bfc4      	itt	gt
 800b046:	3b04      	subgt	r3, #4
 800b048:	9306      	strgt	r3, [sp, #24]
 800b04a:	9b06      	ldr	r3, [sp, #24]
 800b04c:	f1a3 0302 	sub.w	r3, r3, #2
 800b050:	bfcc      	ite	gt
 800b052:	2500      	movgt	r5, #0
 800b054:	2501      	movle	r5, #1
 800b056:	2b03      	cmp	r3, #3
 800b058:	f200 8087 	bhi.w	800b16a <_dtoa_r+0x30a>
 800b05c:	e8df f003 	tbb	[pc, r3]
 800b060:	59383a2d 	.word	0x59383a2d
 800b064:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b068:	441d      	add	r5, r3
 800b06a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b06e:	2b20      	cmp	r3, #32
 800b070:	bfc1      	itttt	gt
 800b072:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b076:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b07a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b07e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b082:	bfda      	itte	le
 800b084:	f1c3 0320 	rsble	r3, r3, #32
 800b088:	fa06 f003 	lslle.w	r0, r6, r3
 800b08c:	4318      	orrgt	r0, r3
 800b08e:	f7f5 fa51 	bl	8000534 <__aeabi_ui2d>
 800b092:	2301      	movs	r3, #1
 800b094:	4606      	mov	r6, r0
 800b096:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b09a:	3d01      	subs	r5, #1
 800b09c:	930e      	str	r3, [sp, #56]	; 0x38
 800b09e:	e76a      	b.n	800af76 <_dtoa_r+0x116>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e7b2      	b.n	800b00a <_dtoa_r+0x1aa>
 800b0a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0a6:	e7b1      	b.n	800b00c <_dtoa_r+0x1ac>
 800b0a8:	9b04      	ldr	r3, [sp, #16]
 800b0aa:	9a00      	ldr	r2, [sp, #0]
 800b0ac:	1a9b      	subs	r3, r3, r2
 800b0ae:	9304      	str	r3, [sp, #16]
 800b0b0:	4253      	negs	r3, r2
 800b0b2:	9307      	str	r3, [sp, #28]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0b8:	e7bf      	b.n	800b03a <_dtoa_r+0x1da>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9308      	str	r3, [sp, #32]
 800b0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dc55      	bgt.n	800b170 <_dtoa_r+0x310>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ce:	e00c      	b.n	800b0ea <_dtoa_r+0x28a>
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e7f3      	b.n	800b0bc <_dtoa_r+0x25c>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0d8:	9308      	str	r3, [sp, #32]
 800b0da:	9b00      	ldr	r3, [sp, #0]
 800b0dc:	4413      	add	r3, r2
 800b0de:	9302      	str	r3, [sp, #8]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	9303      	str	r3, [sp, #12]
 800b0e6:	bfb8      	it	lt
 800b0e8:	2301      	movlt	r3, #1
 800b0ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	6042      	str	r2, [r0, #4]
 800b0f0:	2204      	movs	r2, #4
 800b0f2:	f102 0614 	add.w	r6, r2, #20
 800b0f6:	429e      	cmp	r6, r3
 800b0f8:	6841      	ldr	r1, [r0, #4]
 800b0fa:	d93d      	bls.n	800b178 <_dtoa_r+0x318>
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f001 fa5d 	bl	800c5bc <_Balloc>
 800b102:	9001      	str	r0, [sp, #4]
 800b104:	2800      	cmp	r0, #0
 800b106:	d13b      	bne.n	800b180 <_dtoa_r+0x320>
 800b108:	4b11      	ldr	r3, [pc, #68]	; (800b150 <_dtoa_r+0x2f0>)
 800b10a:	4602      	mov	r2, r0
 800b10c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b110:	e6c0      	b.n	800ae94 <_dtoa_r+0x34>
 800b112:	2301      	movs	r3, #1
 800b114:	e7df      	b.n	800b0d6 <_dtoa_r+0x276>
 800b116:	bf00      	nop
 800b118:	636f4361 	.word	0x636f4361
 800b11c:	3fd287a7 	.word	0x3fd287a7
 800b120:	8b60c8b3 	.word	0x8b60c8b3
 800b124:	3fc68a28 	.word	0x3fc68a28
 800b128:	509f79fb 	.word	0x509f79fb
 800b12c:	3fd34413 	.word	0x3fd34413
 800b130:	0800ef86 	.word	0x0800ef86
 800b134:	0800ef9d 	.word	0x0800ef9d
 800b138:	7ff00000 	.word	0x7ff00000
 800b13c:	0800ef82 	.word	0x0800ef82
 800b140:	0800ef79 	.word	0x0800ef79
 800b144:	0800f25a 	.word	0x0800f25a
 800b148:	3ff80000 	.word	0x3ff80000
 800b14c:	0800f170 	.word	0x0800f170
 800b150:	0800eff8 	.word	0x0800eff8
 800b154:	2501      	movs	r5, #1
 800b156:	2300      	movs	r3, #0
 800b158:	9306      	str	r3, [sp, #24]
 800b15a:	9508      	str	r5, [sp, #32]
 800b15c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b160:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b164:	2200      	movs	r2, #0
 800b166:	2312      	movs	r3, #18
 800b168:	e7b0      	b.n	800b0cc <_dtoa_r+0x26c>
 800b16a:	2301      	movs	r3, #1
 800b16c:	9308      	str	r3, [sp, #32]
 800b16e:	e7f5      	b.n	800b15c <_dtoa_r+0x2fc>
 800b170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b172:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b176:	e7b8      	b.n	800b0ea <_dtoa_r+0x28a>
 800b178:	3101      	adds	r1, #1
 800b17a:	6041      	str	r1, [r0, #4]
 800b17c:	0052      	lsls	r2, r2, #1
 800b17e:	e7b8      	b.n	800b0f2 <_dtoa_r+0x292>
 800b180:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b182:	9a01      	ldr	r2, [sp, #4]
 800b184:	601a      	str	r2, [r3, #0]
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	2b0e      	cmp	r3, #14
 800b18a:	f200 809d 	bhi.w	800b2c8 <_dtoa_r+0x468>
 800b18e:	2d00      	cmp	r5, #0
 800b190:	f000 809a 	beq.w	800b2c8 <_dtoa_r+0x468>
 800b194:	9b00      	ldr	r3, [sp, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	dd32      	ble.n	800b200 <_dtoa_r+0x3a0>
 800b19a:	4ab7      	ldr	r2, [pc, #732]	; (800b478 <_dtoa_r+0x618>)
 800b19c:	f003 030f 	and.w	r3, r3, #15
 800b1a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1a8:	9b00      	ldr	r3, [sp, #0]
 800b1aa:	05d8      	lsls	r0, r3, #23
 800b1ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b1b0:	d516      	bpl.n	800b1e0 <_dtoa_r+0x380>
 800b1b2:	4bb2      	ldr	r3, [pc, #712]	; (800b47c <_dtoa_r+0x61c>)
 800b1b4:	ec51 0b19 	vmov	r0, r1, d9
 800b1b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1bc:	f7f5 fb5e 	bl	800087c <__aeabi_ddiv>
 800b1c0:	f007 070f 	and.w	r7, r7, #15
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	468b      	mov	fp, r1
 800b1c8:	2503      	movs	r5, #3
 800b1ca:	4eac      	ldr	r6, [pc, #688]	; (800b47c <_dtoa_r+0x61c>)
 800b1cc:	b957      	cbnz	r7, 800b1e4 <_dtoa_r+0x384>
 800b1ce:	4642      	mov	r2, r8
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	4659      	mov	r1, fp
 800b1d6:	f7f5 fb51 	bl	800087c <__aeabi_ddiv>
 800b1da:	4682      	mov	sl, r0
 800b1dc:	468b      	mov	fp, r1
 800b1de:	e028      	b.n	800b232 <_dtoa_r+0x3d2>
 800b1e0:	2502      	movs	r5, #2
 800b1e2:	e7f2      	b.n	800b1ca <_dtoa_r+0x36a>
 800b1e4:	07f9      	lsls	r1, r7, #31
 800b1e6:	d508      	bpl.n	800b1fa <_dtoa_r+0x39a>
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1f0:	f7f5 fa1a 	bl	8000628 <__aeabi_dmul>
 800b1f4:	3501      	adds	r5, #1
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	4689      	mov	r9, r1
 800b1fa:	107f      	asrs	r7, r7, #1
 800b1fc:	3608      	adds	r6, #8
 800b1fe:	e7e5      	b.n	800b1cc <_dtoa_r+0x36c>
 800b200:	f000 809b 	beq.w	800b33a <_dtoa_r+0x4da>
 800b204:	9b00      	ldr	r3, [sp, #0]
 800b206:	4f9d      	ldr	r7, [pc, #628]	; (800b47c <_dtoa_r+0x61c>)
 800b208:	425e      	negs	r6, r3
 800b20a:	4b9b      	ldr	r3, [pc, #620]	; (800b478 <_dtoa_r+0x618>)
 800b20c:	f006 020f 	and.w	r2, r6, #15
 800b210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	ec51 0b19 	vmov	r0, r1, d9
 800b21c:	f7f5 fa04 	bl	8000628 <__aeabi_dmul>
 800b220:	1136      	asrs	r6, r6, #4
 800b222:	4682      	mov	sl, r0
 800b224:	468b      	mov	fp, r1
 800b226:	2300      	movs	r3, #0
 800b228:	2502      	movs	r5, #2
 800b22a:	2e00      	cmp	r6, #0
 800b22c:	d17a      	bne.n	800b324 <_dtoa_r+0x4c4>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1d3      	bne.n	800b1da <_dtoa_r+0x37a>
 800b232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b234:	2b00      	cmp	r3, #0
 800b236:	f000 8082 	beq.w	800b33e <_dtoa_r+0x4de>
 800b23a:	4b91      	ldr	r3, [pc, #580]	; (800b480 <_dtoa_r+0x620>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	4650      	mov	r0, sl
 800b240:	4659      	mov	r1, fp
 800b242:	f7f5 fc63 	bl	8000b0c <__aeabi_dcmplt>
 800b246:	2800      	cmp	r0, #0
 800b248:	d079      	beq.n	800b33e <_dtoa_r+0x4de>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d076      	beq.n	800b33e <_dtoa_r+0x4de>
 800b250:	9b02      	ldr	r3, [sp, #8]
 800b252:	2b00      	cmp	r3, #0
 800b254:	dd36      	ble.n	800b2c4 <_dtoa_r+0x464>
 800b256:	9b00      	ldr	r3, [sp, #0]
 800b258:	4650      	mov	r0, sl
 800b25a:	4659      	mov	r1, fp
 800b25c:	1e5f      	subs	r7, r3, #1
 800b25e:	2200      	movs	r2, #0
 800b260:	4b88      	ldr	r3, [pc, #544]	; (800b484 <_dtoa_r+0x624>)
 800b262:	f7f5 f9e1 	bl	8000628 <__aeabi_dmul>
 800b266:	9e02      	ldr	r6, [sp, #8]
 800b268:	4682      	mov	sl, r0
 800b26a:	468b      	mov	fp, r1
 800b26c:	3501      	adds	r5, #1
 800b26e:	4628      	mov	r0, r5
 800b270:	f7f5 f970 	bl	8000554 <__aeabi_i2d>
 800b274:	4652      	mov	r2, sl
 800b276:	465b      	mov	r3, fp
 800b278:	f7f5 f9d6 	bl	8000628 <__aeabi_dmul>
 800b27c:	4b82      	ldr	r3, [pc, #520]	; (800b488 <_dtoa_r+0x628>)
 800b27e:	2200      	movs	r2, #0
 800b280:	f7f5 f81c 	bl	80002bc <__adddf3>
 800b284:	46d0      	mov	r8, sl
 800b286:	46d9      	mov	r9, fp
 800b288:	4682      	mov	sl, r0
 800b28a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b28e:	2e00      	cmp	r6, #0
 800b290:	d158      	bne.n	800b344 <_dtoa_r+0x4e4>
 800b292:	4b7e      	ldr	r3, [pc, #504]	; (800b48c <_dtoa_r+0x62c>)
 800b294:	2200      	movs	r2, #0
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f5 f80d 	bl	80002b8 <__aeabi_dsub>
 800b29e:	4652      	mov	r2, sl
 800b2a0:	465b      	mov	r3, fp
 800b2a2:	4680      	mov	r8, r0
 800b2a4:	4689      	mov	r9, r1
 800b2a6:	f7f5 fc4f 	bl	8000b48 <__aeabi_dcmpgt>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	f040 8295 	bne.w	800b7da <_dtoa_r+0x97a>
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b2b6:	4640      	mov	r0, r8
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	f7f5 fc27 	bl	8000b0c <__aeabi_dcmplt>
 800b2be:	2800      	cmp	r0, #0
 800b2c0:	f040 8289 	bne.w	800b7d6 <_dtoa_r+0x976>
 800b2c4:	ec5b ab19 	vmov	sl, fp, d9
 800b2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f2c0 8148 	blt.w	800b560 <_dtoa_r+0x700>
 800b2d0:	9a00      	ldr	r2, [sp, #0]
 800b2d2:	2a0e      	cmp	r2, #14
 800b2d4:	f300 8144 	bgt.w	800b560 <_dtoa_r+0x700>
 800b2d8:	4b67      	ldr	r3, [pc, #412]	; (800b478 <_dtoa_r+0x618>)
 800b2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f280 80d5 	bge.w	800b494 <_dtoa_r+0x634>
 800b2ea:	9b03      	ldr	r3, [sp, #12]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f300 80d1 	bgt.w	800b494 <_dtoa_r+0x634>
 800b2f2:	f040 826f 	bne.w	800b7d4 <_dtoa_r+0x974>
 800b2f6:	4b65      	ldr	r3, [pc, #404]	; (800b48c <_dtoa_r+0x62c>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	4640      	mov	r0, r8
 800b2fc:	4649      	mov	r1, r9
 800b2fe:	f7f5 f993 	bl	8000628 <__aeabi_dmul>
 800b302:	4652      	mov	r2, sl
 800b304:	465b      	mov	r3, fp
 800b306:	f7f5 fc15 	bl	8000b34 <__aeabi_dcmpge>
 800b30a:	9e03      	ldr	r6, [sp, #12]
 800b30c:	4637      	mov	r7, r6
 800b30e:	2800      	cmp	r0, #0
 800b310:	f040 8245 	bne.w	800b79e <_dtoa_r+0x93e>
 800b314:	9d01      	ldr	r5, [sp, #4]
 800b316:	2331      	movs	r3, #49	; 0x31
 800b318:	f805 3b01 	strb.w	r3, [r5], #1
 800b31c:	9b00      	ldr	r3, [sp, #0]
 800b31e:	3301      	adds	r3, #1
 800b320:	9300      	str	r3, [sp, #0]
 800b322:	e240      	b.n	800b7a6 <_dtoa_r+0x946>
 800b324:	07f2      	lsls	r2, r6, #31
 800b326:	d505      	bpl.n	800b334 <_dtoa_r+0x4d4>
 800b328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b32c:	f7f5 f97c 	bl	8000628 <__aeabi_dmul>
 800b330:	3501      	adds	r5, #1
 800b332:	2301      	movs	r3, #1
 800b334:	1076      	asrs	r6, r6, #1
 800b336:	3708      	adds	r7, #8
 800b338:	e777      	b.n	800b22a <_dtoa_r+0x3ca>
 800b33a:	2502      	movs	r5, #2
 800b33c:	e779      	b.n	800b232 <_dtoa_r+0x3d2>
 800b33e:	9f00      	ldr	r7, [sp, #0]
 800b340:	9e03      	ldr	r6, [sp, #12]
 800b342:	e794      	b.n	800b26e <_dtoa_r+0x40e>
 800b344:	9901      	ldr	r1, [sp, #4]
 800b346:	4b4c      	ldr	r3, [pc, #304]	; (800b478 <_dtoa_r+0x618>)
 800b348:	4431      	add	r1, r6
 800b34a:	910d      	str	r1, [sp, #52]	; 0x34
 800b34c:	9908      	ldr	r1, [sp, #32]
 800b34e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b352:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b356:	2900      	cmp	r1, #0
 800b358:	d043      	beq.n	800b3e2 <_dtoa_r+0x582>
 800b35a:	494d      	ldr	r1, [pc, #308]	; (800b490 <_dtoa_r+0x630>)
 800b35c:	2000      	movs	r0, #0
 800b35e:	f7f5 fa8d 	bl	800087c <__aeabi_ddiv>
 800b362:	4652      	mov	r2, sl
 800b364:	465b      	mov	r3, fp
 800b366:	f7f4 ffa7 	bl	80002b8 <__aeabi_dsub>
 800b36a:	9d01      	ldr	r5, [sp, #4]
 800b36c:	4682      	mov	sl, r0
 800b36e:	468b      	mov	fp, r1
 800b370:	4649      	mov	r1, r9
 800b372:	4640      	mov	r0, r8
 800b374:	f7f5 fc08 	bl	8000b88 <__aeabi_d2iz>
 800b378:	4606      	mov	r6, r0
 800b37a:	f7f5 f8eb 	bl	8000554 <__aeabi_i2d>
 800b37e:	4602      	mov	r2, r0
 800b380:	460b      	mov	r3, r1
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f4 ff97 	bl	80002b8 <__aeabi_dsub>
 800b38a:	3630      	adds	r6, #48	; 0x30
 800b38c:	f805 6b01 	strb.w	r6, [r5], #1
 800b390:	4652      	mov	r2, sl
 800b392:	465b      	mov	r3, fp
 800b394:	4680      	mov	r8, r0
 800b396:	4689      	mov	r9, r1
 800b398:	f7f5 fbb8 	bl	8000b0c <__aeabi_dcmplt>
 800b39c:	2800      	cmp	r0, #0
 800b39e:	d163      	bne.n	800b468 <_dtoa_r+0x608>
 800b3a0:	4642      	mov	r2, r8
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	4936      	ldr	r1, [pc, #216]	; (800b480 <_dtoa_r+0x620>)
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	f7f4 ff86 	bl	80002b8 <__aeabi_dsub>
 800b3ac:	4652      	mov	r2, sl
 800b3ae:	465b      	mov	r3, fp
 800b3b0:	f7f5 fbac 	bl	8000b0c <__aeabi_dcmplt>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f040 80b5 	bne.w	800b524 <_dtoa_r+0x6c4>
 800b3ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	d081      	beq.n	800b2c4 <_dtoa_r+0x464>
 800b3c0:	4b30      	ldr	r3, [pc, #192]	; (800b484 <_dtoa_r+0x624>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	f7f5 f92e 	bl	8000628 <__aeabi_dmul>
 800b3cc:	4b2d      	ldr	r3, [pc, #180]	; (800b484 <_dtoa_r+0x624>)
 800b3ce:	4682      	mov	sl, r0
 800b3d0:	468b      	mov	fp, r1
 800b3d2:	4640      	mov	r0, r8
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f7f5 f926 	bl	8000628 <__aeabi_dmul>
 800b3dc:	4680      	mov	r8, r0
 800b3de:	4689      	mov	r9, r1
 800b3e0:	e7c6      	b.n	800b370 <_dtoa_r+0x510>
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	4659      	mov	r1, fp
 800b3e6:	f7f5 f91f 	bl	8000628 <__aeabi_dmul>
 800b3ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ec:	9d01      	ldr	r5, [sp, #4]
 800b3ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	468b      	mov	fp, r1
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	f7f5 fbc6 	bl	8000b88 <__aeabi_d2iz>
 800b3fc:	4606      	mov	r6, r0
 800b3fe:	f7f5 f8a9 	bl	8000554 <__aeabi_i2d>
 800b402:	3630      	adds	r6, #48	; 0x30
 800b404:	4602      	mov	r2, r0
 800b406:	460b      	mov	r3, r1
 800b408:	4640      	mov	r0, r8
 800b40a:	4649      	mov	r1, r9
 800b40c:	f7f4 ff54 	bl	80002b8 <__aeabi_dsub>
 800b410:	f805 6b01 	strb.w	r6, [r5], #1
 800b414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b416:	429d      	cmp	r5, r3
 800b418:	4680      	mov	r8, r0
 800b41a:	4689      	mov	r9, r1
 800b41c:	f04f 0200 	mov.w	r2, #0
 800b420:	d124      	bne.n	800b46c <_dtoa_r+0x60c>
 800b422:	4b1b      	ldr	r3, [pc, #108]	; (800b490 <_dtoa_r+0x630>)
 800b424:	4650      	mov	r0, sl
 800b426:	4659      	mov	r1, fp
 800b428:	f7f4 ff48 	bl	80002bc <__adddf3>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4640      	mov	r0, r8
 800b432:	4649      	mov	r1, r9
 800b434:	f7f5 fb88 	bl	8000b48 <__aeabi_dcmpgt>
 800b438:	2800      	cmp	r0, #0
 800b43a:	d173      	bne.n	800b524 <_dtoa_r+0x6c4>
 800b43c:	4652      	mov	r2, sl
 800b43e:	465b      	mov	r3, fp
 800b440:	4913      	ldr	r1, [pc, #76]	; (800b490 <_dtoa_r+0x630>)
 800b442:	2000      	movs	r0, #0
 800b444:	f7f4 ff38 	bl	80002b8 <__aeabi_dsub>
 800b448:	4602      	mov	r2, r0
 800b44a:	460b      	mov	r3, r1
 800b44c:	4640      	mov	r0, r8
 800b44e:	4649      	mov	r1, r9
 800b450:	f7f5 fb5c 	bl	8000b0c <__aeabi_dcmplt>
 800b454:	2800      	cmp	r0, #0
 800b456:	f43f af35 	beq.w	800b2c4 <_dtoa_r+0x464>
 800b45a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b45c:	1e6b      	subs	r3, r5, #1
 800b45e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b460:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b464:	2b30      	cmp	r3, #48	; 0x30
 800b466:	d0f8      	beq.n	800b45a <_dtoa_r+0x5fa>
 800b468:	9700      	str	r7, [sp, #0]
 800b46a:	e049      	b.n	800b500 <_dtoa_r+0x6a0>
 800b46c:	4b05      	ldr	r3, [pc, #20]	; (800b484 <_dtoa_r+0x624>)
 800b46e:	f7f5 f8db 	bl	8000628 <__aeabi_dmul>
 800b472:	4680      	mov	r8, r0
 800b474:	4689      	mov	r9, r1
 800b476:	e7bd      	b.n	800b3f4 <_dtoa_r+0x594>
 800b478:	0800f170 	.word	0x0800f170
 800b47c:	0800f148 	.word	0x0800f148
 800b480:	3ff00000 	.word	0x3ff00000
 800b484:	40240000 	.word	0x40240000
 800b488:	401c0000 	.word	0x401c0000
 800b48c:	40140000 	.word	0x40140000
 800b490:	3fe00000 	.word	0x3fe00000
 800b494:	9d01      	ldr	r5, [sp, #4]
 800b496:	4656      	mov	r6, sl
 800b498:	465f      	mov	r7, fp
 800b49a:	4642      	mov	r2, r8
 800b49c:	464b      	mov	r3, r9
 800b49e:	4630      	mov	r0, r6
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f5 f9eb 	bl	800087c <__aeabi_ddiv>
 800b4a6:	f7f5 fb6f 	bl	8000b88 <__aeabi_d2iz>
 800b4aa:	4682      	mov	sl, r0
 800b4ac:	f7f5 f852 	bl	8000554 <__aeabi_i2d>
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	464b      	mov	r3, r9
 800b4b4:	f7f5 f8b8 	bl	8000628 <__aeabi_dmul>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4630      	mov	r0, r6
 800b4be:	4639      	mov	r1, r7
 800b4c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b4c4:	f7f4 fef8 	bl	80002b8 <__aeabi_dsub>
 800b4c8:	f805 6b01 	strb.w	r6, [r5], #1
 800b4cc:	9e01      	ldr	r6, [sp, #4]
 800b4ce:	9f03      	ldr	r7, [sp, #12]
 800b4d0:	1bae      	subs	r6, r5, r6
 800b4d2:	42b7      	cmp	r7, r6
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	d135      	bne.n	800b546 <_dtoa_r+0x6e6>
 800b4da:	f7f4 feef 	bl	80002bc <__adddf3>
 800b4de:	4642      	mov	r2, r8
 800b4e0:	464b      	mov	r3, r9
 800b4e2:	4606      	mov	r6, r0
 800b4e4:	460f      	mov	r7, r1
 800b4e6:	f7f5 fb2f 	bl	8000b48 <__aeabi_dcmpgt>
 800b4ea:	b9d0      	cbnz	r0, 800b522 <_dtoa_r+0x6c2>
 800b4ec:	4642      	mov	r2, r8
 800b4ee:	464b      	mov	r3, r9
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	4639      	mov	r1, r7
 800b4f4:	f7f5 fb00 	bl	8000af8 <__aeabi_dcmpeq>
 800b4f8:	b110      	cbz	r0, 800b500 <_dtoa_r+0x6a0>
 800b4fa:	f01a 0f01 	tst.w	sl, #1
 800b4fe:	d110      	bne.n	800b522 <_dtoa_r+0x6c2>
 800b500:	4620      	mov	r0, r4
 800b502:	ee18 1a10 	vmov	r1, s16
 800b506:	f001 f899 	bl	800c63c <_Bfree>
 800b50a:	2300      	movs	r3, #0
 800b50c:	9800      	ldr	r0, [sp, #0]
 800b50e:	702b      	strb	r3, [r5, #0]
 800b510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b512:	3001      	adds	r0, #1
 800b514:	6018      	str	r0, [r3, #0]
 800b516:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f43f acf1 	beq.w	800af00 <_dtoa_r+0xa0>
 800b51e:	601d      	str	r5, [r3, #0]
 800b520:	e4ee      	b.n	800af00 <_dtoa_r+0xa0>
 800b522:	9f00      	ldr	r7, [sp, #0]
 800b524:	462b      	mov	r3, r5
 800b526:	461d      	mov	r5, r3
 800b528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b52c:	2a39      	cmp	r2, #57	; 0x39
 800b52e:	d106      	bne.n	800b53e <_dtoa_r+0x6de>
 800b530:	9a01      	ldr	r2, [sp, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d1f7      	bne.n	800b526 <_dtoa_r+0x6c6>
 800b536:	9901      	ldr	r1, [sp, #4]
 800b538:	2230      	movs	r2, #48	; 0x30
 800b53a:	3701      	adds	r7, #1
 800b53c:	700a      	strb	r2, [r1, #0]
 800b53e:	781a      	ldrb	r2, [r3, #0]
 800b540:	3201      	adds	r2, #1
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	e790      	b.n	800b468 <_dtoa_r+0x608>
 800b546:	4ba6      	ldr	r3, [pc, #664]	; (800b7e0 <_dtoa_r+0x980>)
 800b548:	2200      	movs	r2, #0
 800b54a:	f7f5 f86d 	bl	8000628 <__aeabi_dmul>
 800b54e:	2200      	movs	r2, #0
 800b550:	2300      	movs	r3, #0
 800b552:	4606      	mov	r6, r0
 800b554:	460f      	mov	r7, r1
 800b556:	f7f5 facf 	bl	8000af8 <__aeabi_dcmpeq>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d09d      	beq.n	800b49a <_dtoa_r+0x63a>
 800b55e:	e7cf      	b.n	800b500 <_dtoa_r+0x6a0>
 800b560:	9a08      	ldr	r2, [sp, #32]
 800b562:	2a00      	cmp	r2, #0
 800b564:	f000 80d7 	beq.w	800b716 <_dtoa_r+0x8b6>
 800b568:	9a06      	ldr	r2, [sp, #24]
 800b56a:	2a01      	cmp	r2, #1
 800b56c:	f300 80ba 	bgt.w	800b6e4 <_dtoa_r+0x884>
 800b570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b572:	2a00      	cmp	r2, #0
 800b574:	f000 80b2 	beq.w	800b6dc <_dtoa_r+0x87c>
 800b578:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b57c:	9e07      	ldr	r6, [sp, #28]
 800b57e:	9d04      	ldr	r5, [sp, #16]
 800b580:	9a04      	ldr	r2, [sp, #16]
 800b582:	441a      	add	r2, r3
 800b584:	9204      	str	r2, [sp, #16]
 800b586:	9a05      	ldr	r2, [sp, #20]
 800b588:	2101      	movs	r1, #1
 800b58a:	441a      	add	r2, r3
 800b58c:	4620      	mov	r0, r4
 800b58e:	9205      	str	r2, [sp, #20]
 800b590:	f001 f956 	bl	800c840 <__i2b>
 800b594:	4607      	mov	r7, r0
 800b596:	2d00      	cmp	r5, #0
 800b598:	dd0c      	ble.n	800b5b4 <_dtoa_r+0x754>
 800b59a:	9b05      	ldr	r3, [sp, #20]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dd09      	ble.n	800b5b4 <_dtoa_r+0x754>
 800b5a0:	42ab      	cmp	r3, r5
 800b5a2:	9a04      	ldr	r2, [sp, #16]
 800b5a4:	bfa8      	it	ge
 800b5a6:	462b      	movge	r3, r5
 800b5a8:	1ad2      	subs	r2, r2, r3
 800b5aa:	9204      	str	r2, [sp, #16]
 800b5ac:	9a05      	ldr	r2, [sp, #20]
 800b5ae:	1aed      	subs	r5, r5, r3
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	9305      	str	r3, [sp, #20]
 800b5b4:	9b07      	ldr	r3, [sp, #28]
 800b5b6:	b31b      	cbz	r3, 800b600 <_dtoa_r+0x7a0>
 800b5b8:	9b08      	ldr	r3, [sp, #32]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 80af 	beq.w	800b71e <_dtoa_r+0x8be>
 800b5c0:	2e00      	cmp	r6, #0
 800b5c2:	dd13      	ble.n	800b5ec <_dtoa_r+0x78c>
 800b5c4:	4639      	mov	r1, r7
 800b5c6:	4632      	mov	r2, r6
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f001 f9f9 	bl	800c9c0 <__pow5mult>
 800b5ce:	ee18 2a10 	vmov	r2, s16
 800b5d2:	4601      	mov	r1, r0
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f001 f948 	bl	800c86c <__multiply>
 800b5dc:	ee18 1a10 	vmov	r1, s16
 800b5e0:	4680      	mov	r8, r0
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f001 f82a 	bl	800c63c <_Bfree>
 800b5e8:	ee08 8a10 	vmov	s16, r8
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	1b9a      	subs	r2, r3, r6
 800b5f0:	d006      	beq.n	800b600 <_dtoa_r+0x7a0>
 800b5f2:	ee18 1a10 	vmov	r1, s16
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f001 f9e2 	bl	800c9c0 <__pow5mult>
 800b5fc:	ee08 0a10 	vmov	s16, r0
 800b600:	2101      	movs	r1, #1
 800b602:	4620      	mov	r0, r4
 800b604:	f001 f91c 	bl	800c840 <__i2b>
 800b608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	4606      	mov	r6, r0
 800b60e:	f340 8088 	ble.w	800b722 <_dtoa_r+0x8c2>
 800b612:	461a      	mov	r2, r3
 800b614:	4601      	mov	r1, r0
 800b616:	4620      	mov	r0, r4
 800b618:	f001 f9d2 	bl	800c9c0 <__pow5mult>
 800b61c:	9b06      	ldr	r3, [sp, #24]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	4606      	mov	r6, r0
 800b622:	f340 8081 	ble.w	800b728 <_dtoa_r+0x8c8>
 800b626:	f04f 0800 	mov.w	r8, #0
 800b62a:	6933      	ldr	r3, [r6, #16]
 800b62c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b630:	6918      	ldr	r0, [r3, #16]
 800b632:	f001 f8b5 	bl	800c7a0 <__hi0bits>
 800b636:	f1c0 0020 	rsb	r0, r0, #32
 800b63a:	9b05      	ldr	r3, [sp, #20]
 800b63c:	4418      	add	r0, r3
 800b63e:	f010 001f 	ands.w	r0, r0, #31
 800b642:	f000 8092 	beq.w	800b76a <_dtoa_r+0x90a>
 800b646:	f1c0 0320 	rsb	r3, r0, #32
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	f340 808a 	ble.w	800b764 <_dtoa_r+0x904>
 800b650:	f1c0 001c 	rsb	r0, r0, #28
 800b654:	9b04      	ldr	r3, [sp, #16]
 800b656:	4403      	add	r3, r0
 800b658:	9304      	str	r3, [sp, #16]
 800b65a:	9b05      	ldr	r3, [sp, #20]
 800b65c:	4403      	add	r3, r0
 800b65e:	4405      	add	r5, r0
 800b660:	9305      	str	r3, [sp, #20]
 800b662:	9b04      	ldr	r3, [sp, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd07      	ble.n	800b678 <_dtoa_r+0x818>
 800b668:	ee18 1a10 	vmov	r1, s16
 800b66c:	461a      	mov	r2, r3
 800b66e:	4620      	mov	r0, r4
 800b670:	f001 fa00 	bl	800ca74 <__lshift>
 800b674:	ee08 0a10 	vmov	s16, r0
 800b678:	9b05      	ldr	r3, [sp, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dd05      	ble.n	800b68a <_dtoa_r+0x82a>
 800b67e:	4631      	mov	r1, r6
 800b680:	461a      	mov	r2, r3
 800b682:	4620      	mov	r0, r4
 800b684:	f001 f9f6 	bl	800ca74 <__lshift>
 800b688:	4606      	mov	r6, r0
 800b68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d06e      	beq.n	800b76e <_dtoa_r+0x90e>
 800b690:	ee18 0a10 	vmov	r0, s16
 800b694:	4631      	mov	r1, r6
 800b696:	f001 fa5d 	bl	800cb54 <__mcmp>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	da67      	bge.n	800b76e <_dtoa_r+0x90e>
 800b69e:	9b00      	ldr	r3, [sp, #0]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	ee18 1a10 	vmov	r1, s16
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	220a      	movs	r2, #10
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f000 ffe7 	bl	800c680 <__multadd>
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	ee08 0a10 	vmov	s16, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 81b1 	beq.w	800ba20 <_dtoa_r+0xbc0>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	220a      	movs	r2, #10
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	f000 ffdb 	bl	800c680 <__multadd>
 800b6ca:	9b02      	ldr	r3, [sp, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	f300 808e 	bgt.w	800b7f0 <_dtoa_r+0x990>
 800b6d4:	9b06      	ldr	r3, [sp, #24]
 800b6d6:	2b02      	cmp	r3, #2
 800b6d8:	dc51      	bgt.n	800b77e <_dtoa_r+0x91e>
 800b6da:	e089      	b.n	800b7f0 <_dtoa_r+0x990>
 800b6dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b6e2:	e74b      	b.n	800b57c <_dtoa_r+0x71c>
 800b6e4:	9b03      	ldr	r3, [sp, #12]
 800b6e6:	1e5e      	subs	r6, r3, #1
 800b6e8:	9b07      	ldr	r3, [sp, #28]
 800b6ea:	42b3      	cmp	r3, r6
 800b6ec:	bfbf      	itttt	lt
 800b6ee:	9b07      	ldrlt	r3, [sp, #28]
 800b6f0:	9607      	strlt	r6, [sp, #28]
 800b6f2:	1af2      	sublt	r2, r6, r3
 800b6f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b6f6:	bfb6      	itet	lt
 800b6f8:	189b      	addlt	r3, r3, r2
 800b6fa:	1b9e      	subge	r6, r3, r6
 800b6fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b6fe:	9b03      	ldr	r3, [sp, #12]
 800b700:	bfb8      	it	lt
 800b702:	2600      	movlt	r6, #0
 800b704:	2b00      	cmp	r3, #0
 800b706:	bfb7      	itett	lt
 800b708:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b70c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b710:	1a9d      	sublt	r5, r3, r2
 800b712:	2300      	movlt	r3, #0
 800b714:	e734      	b.n	800b580 <_dtoa_r+0x720>
 800b716:	9e07      	ldr	r6, [sp, #28]
 800b718:	9d04      	ldr	r5, [sp, #16]
 800b71a:	9f08      	ldr	r7, [sp, #32]
 800b71c:	e73b      	b.n	800b596 <_dtoa_r+0x736>
 800b71e:	9a07      	ldr	r2, [sp, #28]
 800b720:	e767      	b.n	800b5f2 <_dtoa_r+0x792>
 800b722:	9b06      	ldr	r3, [sp, #24]
 800b724:	2b01      	cmp	r3, #1
 800b726:	dc18      	bgt.n	800b75a <_dtoa_r+0x8fa>
 800b728:	f1ba 0f00 	cmp.w	sl, #0
 800b72c:	d115      	bne.n	800b75a <_dtoa_r+0x8fa>
 800b72e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b732:	b993      	cbnz	r3, 800b75a <_dtoa_r+0x8fa>
 800b734:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b738:	0d1b      	lsrs	r3, r3, #20
 800b73a:	051b      	lsls	r3, r3, #20
 800b73c:	b183      	cbz	r3, 800b760 <_dtoa_r+0x900>
 800b73e:	9b04      	ldr	r3, [sp, #16]
 800b740:	3301      	adds	r3, #1
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	9b05      	ldr	r3, [sp, #20]
 800b746:	3301      	adds	r3, #1
 800b748:	9305      	str	r3, [sp, #20]
 800b74a:	f04f 0801 	mov.w	r8, #1
 800b74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b750:	2b00      	cmp	r3, #0
 800b752:	f47f af6a 	bne.w	800b62a <_dtoa_r+0x7ca>
 800b756:	2001      	movs	r0, #1
 800b758:	e76f      	b.n	800b63a <_dtoa_r+0x7da>
 800b75a:	f04f 0800 	mov.w	r8, #0
 800b75e:	e7f6      	b.n	800b74e <_dtoa_r+0x8ee>
 800b760:	4698      	mov	r8, r3
 800b762:	e7f4      	b.n	800b74e <_dtoa_r+0x8ee>
 800b764:	f43f af7d 	beq.w	800b662 <_dtoa_r+0x802>
 800b768:	4618      	mov	r0, r3
 800b76a:	301c      	adds	r0, #28
 800b76c:	e772      	b.n	800b654 <_dtoa_r+0x7f4>
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	2b00      	cmp	r3, #0
 800b772:	dc37      	bgt.n	800b7e4 <_dtoa_r+0x984>
 800b774:	9b06      	ldr	r3, [sp, #24]
 800b776:	2b02      	cmp	r3, #2
 800b778:	dd34      	ble.n	800b7e4 <_dtoa_r+0x984>
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	9b02      	ldr	r3, [sp, #8]
 800b780:	b96b      	cbnz	r3, 800b79e <_dtoa_r+0x93e>
 800b782:	4631      	mov	r1, r6
 800b784:	2205      	movs	r2, #5
 800b786:	4620      	mov	r0, r4
 800b788:	f000 ff7a 	bl	800c680 <__multadd>
 800b78c:	4601      	mov	r1, r0
 800b78e:	4606      	mov	r6, r0
 800b790:	ee18 0a10 	vmov	r0, s16
 800b794:	f001 f9de 	bl	800cb54 <__mcmp>
 800b798:	2800      	cmp	r0, #0
 800b79a:	f73f adbb 	bgt.w	800b314 <_dtoa_r+0x4b4>
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	9d01      	ldr	r5, [sp, #4]
 800b7a2:	43db      	mvns	r3, r3
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	f04f 0800 	mov.w	r8, #0
 800b7aa:	4631      	mov	r1, r6
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	f000 ff45 	bl	800c63c <_Bfree>
 800b7b2:	2f00      	cmp	r7, #0
 800b7b4:	f43f aea4 	beq.w	800b500 <_dtoa_r+0x6a0>
 800b7b8:	f1b8 0f00 	cmp.w	r8, #0
 800b7bc:	d005      	beq.n	800b7ca <_dtoa_r+0x96a>
 800b7be:	45b8      	cmp	r8, r7
 800b7c0:	d003      	beq.n	800b7ca <_dtoa_r+0x96a>
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f000 ff39 	bl	800c63c <_Bfree>
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 ff35 	bl	800c63c <_Bfree>
 800b7d2:	e695      	b.n	800b500 <_dtoa_r+0x6a0>
 800b7d4:	2600      	movs	r6, #0
 800b7d6:	4637      	mov	r7, r6
 800b7d8:	e7e1      	b.n	800b79e <_dtoa_r+0x93e>
 800b7da:	9700      	str	r7, [sp, #0]
 800b7dc:	4637      	mov	r7, r6
 800b7de:	e599      	b.n	800b314 <_dtoa_r+0x4b4>
 800b7e0:	40240000 	.word	0x40240000
 800b7e4:	9b08      	ldr	r3, [sp, #32]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	f000 80ca 	beq.w	800b980 <_dtoa_r+0xb20>
 800b7ec:	9b03      	ldr	r3, [sp, #12]
 800b7ee:	9302      	str	r3, [sp, #8]
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	dd05      	ble.n	800b800 <_dtoa_r+0x9a0>
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f001 f93b 	bl	800ca74 <__lshift>
 800b7fe:	4607      	mov	r7, r0
 800b800:	f1b8 0f00 	cmp.w	r8, #0
 800b804:	d05b      	beq.n	800b8be <_dtoa_r+0xa5e>
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fed7 	bl	800c5bc <_Balloc>
 800b80e:	4605      	mov	r5, r0
 800b810:	b928      	cbnz	r0, 800b81e <_dtoa_r+0x9be>
 800b812:	4b87      	ldr	r3, [pc, #540]	; (800ba30 <_dtoa_r+0xbd0>)
 800b814:	4602      	mov	r2, r0
 800b816:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b81a:	f7ff bb3b 	b.w	800ae94 <_dtoa_r+0x34>
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	3202      	adds	r2, #2
 800b822:	0092      	lsls	r2, r2, #2
 800b824:	f107 010c 	add.w	r1, r7, #12
 800b828:	300c      	adds	r0, #12
 800b82a:	f7fd fbcd 	bl	8008fc8 <memcpy>
 800b82e:	2201      	movs	r2, #1
 800b830:	4629      	mov	r1, r5
 800b832:	4620      	mov	r0, r4
 800b834:	f001 f91e 	bl	800ca74 <__lshift>
 800b838:	9b01      	ldr	r3, [sp, #4]
 800b83a:	f103 0901 	add.w	r9, r3, #1
 800b83e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b842:	4413      	add	r3, r2
 800b844:	9305      	str	r3, [sp, #20]
 800b846:	f00a 0301 	and.w	r3, sl, #1
 800b84a:	46b8      	mov	r8, r7
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	4607      	mov	r7, r0
 800b850:	4631      	mov	r1, r6
 800b852:	ee18 0a10 	vmov	r0, s16
 800b856:	f7ff fa75 	bl	800ad44 <quorem>
 800b85a:	4641      	mov	r1, r8
 800b85c:	9002      	str	r0, [sp, #8]
 800b85e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b862:	ee18 0a10 	vmov	r0, s16
 800b866:	f001 f975 	bl	800cb54 <__mcmp>
 800b86a:	463a      	mov	r2, r7
 800b86c:	9003      	str	r0, [sp, #12]
 800b86e:	4631      	mov	r1, r6
 800b870:	4620      	mov	r0, r4
 800b872:	f001 f98b 	bl	800cb8c <__mdiff>
 800b876:	68c2      	ldr	r2, [r0, #12]
 800b878:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b87c:	4605      	mov	r5, r0
 800b87e:	bb02      	cbnz	r2, 800b8c2 <_dtoa_r+0xa62>
 800b880:	4601      	mov	r1, r0
 800b882:	ee18 0a10 	vmov	r0, s16
 800b886:	f001 f965 	bl	800cb54 <__mcmp>
 800b88a:	4602      	mov	r2, r0
 800b88c:	4629      	mov	r1, r5
 800b88e:	4620      	mov	r0, r4
 800b890:	9207      	str	r2, [sp, #28]
 800b892:	f000 fed3 	bl	800c63c <_Bfree>
 800b896:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b89a:	ea43 0102 	orr.w	r1, r3, r2
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	464d      	mov	r5, r9
 800b8a4:	d10f      	bne.n	800b8c6 <_dtoa_r+0xa66>
 800b8a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b8aa:	d02a      	beq.n	800b902 <_dtoa_r+0xaa2>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	dd02      	ble.n	800b8b8 <_dtoa_r+0xa58>
 800b8b2:	9b02      	ldr	r3, [sp, #8]
 800b8b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b8b8:	f88b a000 	strb.w	sl, [fp]
 800b8bc:	e775      	b.n	800b7aa <_dtoa_r+0x94a>
 800b8be:	4638      	mov	r0, r7
 800b8c0:	e7ba      	b.n	800b838 <_dtoa_r+0x9d8>
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	e7e2      	b.n	800b88c <_dtoa_r+0xa2c>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	db04      	blt.n	800b8d6 <_dtoa_r+0xa76>
 800b8cc:	9906      	ldr	r1, [sp, #24]
 800b8ce:	430b      	orrs	r3, r1
 800b8d0:	9904      	ldr	r1, [sp, #16]
 800b8d2:	430b      	orrs	r3, r1
 800b8d4:	d122      	bne.n	800b91c <_dtoa_r+0xabc>
 800b8d6:	2a00      	cmp	r2, #0
 800b8d8:	ddee      	ble.n	800b8b8 <_dtoa_r+0xa58>
 800b8da:	ee18 1a10 	vmov	r1, s16
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4620      	mov	r0, r4
 800b8e2:	f001 f8c7 	bl	800ca74 <__lshift>
 800b8e6:	4631      	mov	r1, r6
 800b8e8:	ee08 0a10 	vmov	s16, r0
 800b8ec:	f001 f932 	bl	800cb54 <__mcmp>
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	dc03      	bgt.n	800b8fc <_dtoa_r+0xa9c>
 800b8f4:	d1e0      	bne.n	800b8b8 <_dtoa_r+0xa58>
 800b8f6:	f01a 0f01 	tst.w	sl, #1
 800b8fa:	d0dd      	beq.n	800b8b8 <_dtoa_r+0xa58>
 800b8fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b900:	d1d7      	bne.n	800b8b2 <_dtoa_r+0xa52>
 800b902:	2339      	movs	r3, #57	; 0x39
 800b904:	f88b 3000 	strb.w	r3, [fp]
 800b908:	462b      	mov	r3, r5
 800b90a:	461d      	mov	r5, r3
 800b90c:	3b01      	subs	r3, #1
 800b90e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b912:	2a39      	cmp	r2, #57	; 0x39
 800b914:	d071      	beq.n	800b9fa <_dtoa_r+0xb9a>
 800b916:	3201      	adds	r2, #1
 800b918:	701a      	strb	r2, [r3, #0]
 800b91a:	e746      	b.n	800b7aa <_dtoa_r+0x94a>
 800b91c:	2a00      	cmp	r2, #0
 800b91e:	dd07      	ble.n	800b930 <_dtoa_r+0xad0>
 800b920:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b924:	d0ed      	beq.n	800b902 <_dtoa_r+0xaa2>
 800b926:	f10a 0301 	add.w	r3, sl, #1
 800b92a:	f88b 3000 	strb.w	r3, [fp]
 800b92e:	e73c      	b.n	800b7aa <_dtoa_r+0x94a>
 800b930:	9b05      	ldr	r3, [sp, #20]
 800b932:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b936:	4599      	cmp	r9, r3
 800b938:	d047      	beq.n	800b9ca <_dtoa_r+0xb6a>
 800b93a:	ee18 1a10 	vmov	r1, s16
 800b93e:	2300      	movs	r3, #0
 800b940:	220a      	movs	r2, #10
 800b942:	4620      	mov	r0, r4
 800b944:	f000 fe9c 	bl	800c680 <__multadd>
 800b948:	45b8      	cmp	r8, r7
 800b94a:	ee08 0a10 	vmov	s16, r0
 800b94e:	f04f 0300 	mov.w	r3, #0
 800b952:	f04f 020a 	mov.w	r2, #10
 800b956:	4641      	mov	r1, r8
 800b958:	4620      	mov	r0, r4
 800b95a:	d106      	bne.n	800b96a <_dtoa_r+0xb0a>
 800b95c:	f000 fe90 	bl	800c680 <__multadd>
 800b960:	4680      	mov	r8, r0
 800b962:	4607      	mov	r7, r0
 800b964:	f109 0901 	add.w	r9, r9, #1
 800b968:	e772      	b.n	800b850 <_dtoa_r+0x9f0>
 800b96a:	f000 fe89 	bl	800c680 <__multadd>
 800b96e:	4639      	mov	r1, r7
 800b970:	4680      	mov	r8, r0
 800b972:	2300      	movs	r3, #0
 800b974:	220a      	movs	r2, #10
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fe82 	bl	800c680 <__multadd>
 800b97c:	4607      	mov	r7, r0
 800b97e:	e7f1      	b.n	800b964 <_dtoa_r+0xb04>
 800b980:	9b03      	ldr	r3, [sp, #12]
 800b982:	9302      	str	r3, [sp, #8]
 800b984:	9d01      	ldr	r5, [sp, #4]
 800b986:	ee18 0a10 	vmov	r0, s16
 800b98a:	4631      	mov	r1, r6
 800b98c:	f7ff f9da 	bl	800ad44 <quorem>
 800b990:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b994:	9b01      	ldr	r3, [sp, #4]
 800b996:	f805 ab01 	strb.w	sl, [r5], #1
 800b99a:	1aea      	subs	r2, r5, r3
 800b99c:	9b02      	ldr	r3, [sp, #8]
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	dd09      	ble.n	800b9b6 <_dtoa_r+0xb56>
 800b9a2:	ee18 1a10 	vmov	r1, s16
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	220a      	movs	r2, #10
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 fe68 	bl	800c680 <__multadd>
 800b9b0:	ee08 0a10 	vmov	s16, r0
 800b9b4:	e7e7      	b.n	800b986 <_dtoa_r+0xb26>
 800b9b6:	9b02      	ldr	r3, [sp, #8]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bfc8      	it	gt
 800b9bc:	461d      	movgt	r5, r3
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	bfd8      	it	le
 800b9c2:	2501      	movle	r5, #1
 800b9c4:	441d      	add	r5, r3
 800b9c6:	f04f 0800 	mov.w	r8, #0
 800b9ca:	ee18 1a10 	vmov	r1, s16
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f001 f84f 	bl	800ca74 <__lshift>
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	ee08 0a10 	vmov	s16, r0
 800b9dc:	f001 f8ba 	bl	800cb54 <__mcmp>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	dc91      	bgt.n	800b908 <_dtoa_r+0xaa8>
 800b9e4:	d102      	bne.n	800b9ec <_dtoa_r+0xb8c>
 800b9e6:	f01a 0f01 	tst.w	sl, #1
 800b9ea:	d18d      	bne.n	800b908 <_dtoa_r+0xaa8>
 800b9ec:	462b      	mov	r3, r5
 800b9ee:	461d      	mov	r5, r3
 800b9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9f4:	2a30      	cmp	r2, #48	; 0x30
 800b9f6:	d0fa      	beq.n	800b9ee <_dtoa_r+0xb8e>
 800b9f8:	e6d7      	b.n	800b7aa <_dtoa_r+0x94a>
 800b9fa:	9a01      	ldr	r2, [sp, #4]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d184      	bne.n	800b90a <_dtoa_r+0xaaa>
 800ba00:	9b00      	ldr	r3, [sp, #0]
 800ba02:	3301      	adds	r3, #1
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	2331      	movs	r3, #49	; 0x31
 800ba08:	7013      	strb	r3, [r2, #0]
 800ba0a:	e6ce      	b.n	800b7aa <_dtoa_r+0x94a>
 800ba0c:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <_dtoa_r+0xbd4>)
 800ba0e:	f7ff ba95 	b.w	800af3c <_dtoa_r+0xdc>
 800ba12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f47f aa6e 	bne.w	800aef6 <_dtoa_r+0x96>
 800ba1a:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <_dtoa_r+0xbd8>)
 800ba1c:	f7ff ba8e 	b.w	800af3c <_dtoa_r+0xdc>
 800ba20:	9b02      	ldr	r3, [sp, #8]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dcae      	bgt.n	800b984 <_dtoa_r+0xb24>
 800ba26:	9b06      	ldr	r3, [sp, #24]
 800ba28:	2b02      	cmp	r3, #2
 800ba2a:	f73f aea8 	bgt.w	800b77e <_dtoa_r+0x91e>
 800ba2e:	e7a9      	b.n	800b984 <_dtoa_r+0xb24>
 800ba30:	0800eff8 	.word	0x0800eff8
 800ba34:	0800f259 	.word	0x0800f259
 800ba38:	0800ef79 	.word	0x0800ef79

0800ba3c <__sflush_r>:
 800ba3c:	898a      	ldrh	r2, [r1, #12]
 800ba3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba42:	4605      	mov	r5, r0
 800ba44:	0710      	lsls	r0, r2, #28
 800ba46:	460c      	mov	r4, r1
 800ba48:	d458      	bmi.n	800bafc <__sflush_r+0xc0>
 800ba4a:	684b      	ldr	r3, [r1, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dc05      	bgt.n	800ba5c <__sflush_r+0x20>
 800ba50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	dc02      	bgt.n	800ba5c <__sflush_r+0x20>
 800ba56:	2000      	movs	r0, #0
 800ba58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba5e:	2e00      	cmp	r6, #0
 800ba60:	d0f9      	beq.n	800ba56 <__sflush_r+0x1a>
 800ba62:	2300      	movs	r3, #0
 800ba64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba68:	682f      	ldr	r7, [r5, #0]
 800ba6a:	602b      	str	r3, [r5, #0]
 800ba6c:	d032      	beq.n	800bad4 <__sflush_r+0x98>
 800ba6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	075a      	lsls	r2, r3, #29
 800ba74:	d505      	bpl.n	800ba82 <__sflush_r+0x46>
 800ba76:	6863      	ldr	r3, [r4, #4]
 800ba78:	1ac0      	subs	r0, r0, r3
 800ba7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba7c:	b10b      	cbz	r3, 800ba82 <__sflush_r+0x46>
 800ba7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba80:	1ac0      	subs	r0, r0, r3
 800ba82:	2300      	movs	r3, #0
 800ba84:	4602      	mov	r2, r0
 800ba86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba88:	6a21      	ldr	r1, [r4, #32]
 800ba8a:	4628      	mov	r0, r5
 800ba8c:	47b0      	blx	r6
 800ba8e:	1c43      	adds	r3, r0, #1
 800ba90:	89a3      	ldrh	r3, [r4, #12]
 800ba92:	d106      	bne.n	800baa2 <__sflush_r+0x66>
 800ba94:	6829      	ldr	r1, [r5, #0]
 800ba96:	291d      	cmp	r1, #29
 800ba98:	d82c      	bhi.n	800baf4 <__sflush_r+0xb8>
 800ba9a:	4a2a      	ldr	r2, [pc, #168]	; (800bb44 <__sflush_r+0x108>)
 800ba9c:	40ca      	lsrs	r2, r1
 800ba9e:	07d6      	lsls	r6, r2, #31
 800baa0:	d528      	bpl.n	800baf4 <__sflush_r+0xb8>
 800baa2:	2200      	movs	r2, #0
 800baa4:	6062      	str	r2, [r4, #4]
 800baa6:	04d9      	lsls	r1, r3, #19
 800baa8:	6922      	ldr	r2, [r4, #16]
 800baaa:	6022      	str	r2, [r4, #0]
 800baac:	d504      	bpl.n	800bab8 <__sflush_r+0x7c>
 800baae:	1c42      	adds	r2, r0, #1
 800bab0:	d101      	bne.n	800bab6 <__sflush_r+0x7a>
 800bab2:	682b      	ldr	r3, [r5, #0]
 800bab4:	b903      	cbnz	r3, 800bab8 <__sflush_r+0x7c>
 800bab6:	6560      	str	r0, [r4, #84]	; 0x54
 800bab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baba:	602f      	str	r7, [r5, #0]
 800babc:	2900      	cmp	r1, #0
 800babe:	d0ca      	beq.n	800ba56 <__sflush_r+0x1a>
 800bac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bac4:	4299      	cmp	r1, r3
 800bac6:	d002      	beq.n	800bace <__sflush_r+0x92>
 800bac8:	4628      	mov	r0, r5
 800baca:	f001 fa4f 	bl	800cf6c <_free_r>
 800bace:	2000      	movs	r0, #0
 800bad0:	6360      	str	r0, [r4, #52]	; 0x34
 800bad2:	e7c1      	b.n	800ba58 <__sflush_r+0x1c>
 800bad4:	6a21      	ldr	r1, [r4, #32]
 800bad6:	2301      	movs	r3, #1
 800bad8:	4628      	mov	r0, r5
 800bada:	47b0      	blx	r6
 800badc:	1c41      	adds	r1, r0, #1
 800bade:	d1c7      	bne.n	800ba70 <__sflush_r+0x34>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d0c4      	beq.n	800ba70 <__sflush_r+0x34>
 800bae6:	2b1d      	cmp	r3, #29
 800bae8:	d001      	beq.n	800baee <__sflush_r+0xb2>
 800baea:	2b16      	cmp	r3, #22
 800baec:	d101      	bne.n	800baf2 <__sflush_r+0xb6>
 800baee:	602f      	str	r7, [r5, #0]
 800baf0:	e7b1      	b.n	800ba56 <__sflush_r+0x1a>
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baf8:	81a3      	strh	r3, [r4, #12]
 800bafa:	e7ad      	b.n	800ba58 <__sflush_r+0x1c>
 800bafc:	690f      	ldr	r7, [r1, #16]
 800bafe:	2f00      	cmp	r7, #0
 800bb00:	d0a9      	beq.n	800ba56 <__sflush_r+0x1a>
 800bb02:	0793      	lsls	r3, r2, #30
 800bb04:	680e      	ldr	r6, [r1, #0]
 800bb06:	bf08      	it	eq
 800bb08:	694b      	ldreq	r3, [r1, #20]
 800bb0a:	600f      	str	r7, [r1, #0]
 800bb0c:	bf18      	it	ne
 800bb0e:	2300      	movne	r3, #0
 800bb10:	eba6 0807 	sub.w	r8, r6, r7
 800bb14:	608b      	str	r3, [r1, #8]
 800bb16:	f1b8 0f00 	cmp.w	r8, #0
 800bb1a:	dd9c      	ble.n	800ba56 <__sflush_r+0x1a>
 800bb1c:	6a21      	ldr	r1, [r4, #32]
 800bb1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb20:	4643      	mov	r3, r8
 800bb22:	463a      	mov	r2, r7
 800bb24:	4628      	mov	r0, r5
 800bb26:	47b0      	blx	r6
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	dc06      	bgt.n	800bb3a <__sflush_r+0xfe>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb38:	e78e      	b.n	800ba58 <__sflush_r+0x1c>
 800bb3a:	4407      	add	r7, r0
 800bb3c:	eba8 0800 	sub.w	r8, r8, r0
 800bb40:	e7e9      	b.n	800bb16 <__sflush_r+0xda>
 800bb42:	bf00      	nop
 800bb44:	20400001 	.word	0x20400001

0800bb48 <_fflush_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	690b      	ldr	r3, [r1, #16]
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	460c      	mov	r4, r1
 800bb50:	b913      	cbnz	r3, 800bb58 <_fflush_r+0x10>
 800bb52:	2500      	movs	r5, #0
 800bb54:	4628      	mov	r0, r5
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	b118      	cbz	r0, 800bb62 <_fflush_r+0x1a>
 800bb5a:	6983      	ldr	r3, [r0, #24]
 800bb5c:	b90b      	cbnz	r3, 800bb62 <_fflush_r+0x1a>
 800bb5e:	f000 f887 	bl	800bc70 <__sinit>
 800bb62:	4b14      	ldr	r3, [pc, #80]	; (800bbb4 <_fflush_r+0x6c>)
 800bb64:	429c      	cmp	r4, r3
 800bb66:	d11b      	bne.n	800bba0 <_fflush_r+0x58>
 800bb68:	686c      	ldr	r4, [r5, #4]
 800bb6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0ef      	beq.n	800bb52 <_fflush_r+0xa>
 800bb72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb74:	07d0      	lsls	r0, r2, #31
 800bb76:	d404      	bmi.n	800bb82 <_fflush_r+0x3a>
 800bb78:	0599      	lsls	r1, r3, #22
 800bb7a:	d402      	bmi.n	800bb82 <_fflush_r+0x3a>
 800bb7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb7e:	f000 fc88 	bl	800c492 <__retarget_lock_acquire_recursive>
 800bb82:	4628      	mov	r0, r5
 800bb84:	4621      	mov	r1, r4
 800bb86:	f7ff ff59 	bl	800ba3c <__sflush_r>
 800bb8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb8c:	07da      	lsls	r2, r3, #31
 800bb8e:	4605      	mov	r5, r0
 800bb90:	d4e0      	bmi.n	800bb54 <_fflush_r+0xc>
 800bb92:	89a3      	ldrh	r3, [r4, #12]
 800bb94:	059b      	lsls	r3, r3, #22
 800bb96:	d4dd      	bmi.n	800bb54 <_fflush_r+0xc>
 800bb98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb9a:	f000 fc7b 	bl	800c494 <__retarget_lock_release_recursive>
 800bb9e:	e7d9      	b.n	800bb54 <_fflush_r+0xc>
 800bba0:	4b05      	ldr	r3, [pc, #20]	; (800bbb8 <_fflush_r+0x70>)
 800bba2:	429c      	cmp	r4, r3
 800bba4:	d101      	bne.n	800bbaa <_fflush_r+0x62>
 800bba6:	68ac      	ldr	r4, [r5, #8]
 800bba8:	e7df      	b.n	800bb6a <_fflush_r+0x22>
 800bbaa:	4b04      	ldr	r3, [pc, #16]	; (800bbbc <_fflush_r+0x74>)
 800bbac:	429c      	cmp	r4, r3
 800bbae:	bf08      	it	eq
 800bbb0:	68ec      	ldreq	r4, [r5, #12]
 800bbb2:	e7da      	b.n	800bb6a <_fflush_r+0x22>
 800bbb4:	0800f02c 	.word	0x0800f02c
 800bbb8:	0800f04c 	.word	0x0800f04c
 800bbbc:	0800f00c 	.word	0x0800f00c

0800bbc0 <std>:
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	e9c0 3300 	strd	r3, r3, [r0]
 800bbca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bbce:	6083      	str	r3, [r0, #8]
 800bbd0:	8181      	strh	r1, [r0, #12]
 800bbd2:	6643      	str	r3, [r0, #100]	; 0x64
 800bbd4:	81c2      	strh	r2, [r0, #14]
 800bbd6:	6183      	str	r3, [r0, #24]
 800bbd8:	4619      	mov	r1, r3
 800bbda:	2208      	movs	r2, #8
 800bbdc:	305c      	adds	r0, #92	; 0x5c
 800bbde:	f7fd fa01 	bl	8008fe4 <memset>
 800bbe2:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <std+0x38>)
 800bbe4:	6263      	str	r3, [r4, #36]	; 0x24
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <std+0x3c>)
 800bbe8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbea:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <std+0x40>)
 800bbec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbee:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <std+0x44>)
 800bbf0:	6224      	str	r4, [r4, #32]
 800bbf2:	6323      	str	r3, [r4, #48]	; 0x30
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	bf00      	nop
 800bbf8:	08009f19 	.word	0x08009f19
 800bbfc:	08009f3f 	.word	0x08009f3f
 800bc00:	08009f77 	.word	0x08009f77
 800bc04:	08009f9b 	.word	0x08009f9b

0800bc08 <_cleanup_r>:
 800bc08:	4901      	ldr	r1, [pc, #4]	; (800bc10 <_cleanup_r+0x8>)
 800bc0a:	f000 b8af 	b.w	800bd6c <_fwalk_reent>
 800bc0e:	bf00      	nop
 800bc10:	0800bb49 	.word	0x0800bb49

0800bc14 <__sfmoreglue>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	2268      	movs	r2, #104	; 0x68
 800bc18:	1e4d      	subs	r5, r1, #1
 800bc1a:	4355      	muls	r5, r2
 800bc1c:	460e      	mov	r6, r1
 800bc1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc22:	f001 fa0f 	bl	800d044 <_malloc_r>
 800bc26:	4604      	mov	r4, r0
 800bc28:	b140      	cbz	r0, 800bc3c <__sfmoreglue+0x28>
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc30:	300c      	adds	r0, #12
 800bc32:	60a0      	str	r0, [r4, #8]
 800bc34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc38:	f7fd f9d4 	bl	8008fe4 <memset>
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	bd70      	pop	{r4, r5, r6, pc}

0800bc40 <__sfp_lock_acquire>:
 800bc40:	4801      	ldr	r0, [pc, #4]	; (800bc48 <__sfp_lock_acquire+0x8>)
 800bc42:	f000 bc26 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800bc46:	bf00      	nop
 800bc48:	20001471 	.word	0x20001471

0800bc4c <__sfp_lock_release>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	; (800bc54 <__sfp_lock_release+0x8>)
 800bc4e:	f000 bc21 	b.w	800c494 <__retarget_lock_release_recursive>
 800bc52:	bf00      	nop
 800bc54:	20001471 	.word	0x20001471

0800bc58 <__sinit_lock_acquire>:
 800bc58:	4801      	ldr	r0, [pc, #4]	; (800bc60 <__sinit_lock_acquire+0x8>)
 800bc5a:	f000 bc1a 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800bc5e:	bf00      	nop
 800bc60:	20001472 	.word	0x20001472

0800bc64 <__sinit_lock_release>:
 800bc64:	4801      	ldr	r0, [pc, #4]	; (800bc6c <__sinit_lock_release+0x8>)
 800bc66:	f000 bc15 	b.w	800c494 <__retarget_lock_release_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20001472 	.word	0x20001472

0800bc70 <__sinit>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	4604      	mov	r4, r0
 800bc74:	f7ff fff0 	bl	800bc58 <__sinit_lock_acquire>
 800bc78:	69a3      	ldr	r3, [r4, #24]
 800bc7a:	b11b      	cbz	r3, 800bc84 <__sinit+0x14>
 800bc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc80:	f7ff bff0 	b.w	800bc64 <__sinit_lock_release>
 800bc84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc88:	6523      	str	r3, [r4, #80]	; 0x50
 800bc8a:	4b13      	ldr	r3, [pc, #76]	; (800bcd8 <__sinit+0x68>)
 800bc8c:	4a13      	ldr	r2, [pc, #76]	; (800bcdc <__sinit+0x6c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc92:	42a3      	cmp	r3, r4
 800bc94:	bf04      	itt	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	61a3      	streq	r3, [r4, #24]
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 f820 	bl	800bce0 <__sfp>
 800bca0:	6060      	str	r0, [r4, #4]
 800bca2:	4620      	mov	r0, r4
 800bca4:	f000 f81c 	bl	800bce0 <__sfp>
 800bca8:	60a0      	str	r0, [r4, #8]
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 f818 	bl	800bce0 <__sfp>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	60e0      	str	r0, [r4, #12]
 800bcb4:	2104      	movs	r1, #4
 800bcb6:	6860      	ldr	r0, [r4, #4]
 800bcb8:	f7ff ff82 	bl	800bbc0 <std>
 800bcbc:	68a0      	ldr	r0, [r4, #8]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	2109      	movs	r1, #9
 800bcc2:	f7ff ff7d 	bl	800bbc0 <std>
 800bcc6:	68e0      	ldr	r0, [r4, #12]
 800bcc8:	2202      	movs	r2, #2
 800bcca:	2112      	movs	r1, #18
 800bccc:	f7ff ff78 	bl	800bbc0 <std>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	61a3      	str	r3, [r4, #24]
 800bcd4:	e7d2      	b.n	800bc7c <__sinit+0xc>
 800bcd6:	bf00      	nop
 800bcd8:	0800ede8 	.word	0x0800ede8
 800bcdc:	0800bc09 	.word	0x0800bc09

0800bce0 <__sfp>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	4607      	mov	r7, r0
 800bce4:	f7ff ffac 	bl	800bc40 <__sfp_lock_acquire>
 800bce8:	4b1e      	ldr	r3, [pc, #120]	; (800bd64 <__sfp+0x84>)
 800bcea:	681e      	ldr	r6, [r3, #0]
 800bcec:	69b3      	ldr	r3, [r6, #24]
 800bcee:	b913      	cbnz	r3, 800bcf6 <__sfp+0x16>
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7ff ffbd 	bl	800bc70 <__sinit>
 800bcf6:	3648      	adds	r6, #72	; 0x48
 800bcf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	d503      	bpl.n	800bd08 <__sfp+0x28>
 800bd00:	6833      	ldr	r3, [r6, #0]
 800bd02:	b30b      	cbz	r3, 800bd48 <__sfp+0x68>
 800bd04:	6836      	ldr	r6, [r6, #0]
 800bd06:	e7f7      	b.n	800bcf8 <__sfp+0x18>
 800bd08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd0c:	b9d5      	cbnz	r5, 800bd44 <__sfp+0x64>
 800bd0e:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <__sfp+0x88>)
 800bd10:	60e3      	str	r3, [r4, #12]
 800bd12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd16:	6665      	str	r5, [r4, #100]	; 0x64
 800bd18:	f000 fbba 	bl	800c490 <__retarget_lock_init_recursive>
 800bd1c:	f7ff ff96 	bl	800bc4c <__sfp_lock_release>
 800bd20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd28:	6025      	str	r5, [r4, #0]
 800bd2a:	61a5      	str	r5, [r4, #24]
 800bd2c:	2208      	movs	r2, #8
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd34:	f7fd f956 	bl	8008fe4 <memset>
 800bd38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd40:	4620      	mov	r0, r4
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd44:	3468      	adds	r4, #104	; 0x68
 800bd46:	e7d9      	b.n	800bcfc <__sfp+0x1c>
 800bd48:	2104      	movs	r1, #4
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	f7ff ff62 	bl	800bc14 <__sfmoreglue>
 800bd50:	4604      	mov	r4, r0
 800bd52:	6030      	str	r0, [r6, #0]
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d1d5      	bne.n	800bd04 <__sfp+0x24>
 800bd58:	f7ff ff78 	bl	800bc4c <__sfp_lock_release>
 800bd5c:	230c      	movs	r3, #12
 800bd5e:	603b      	str	r3, [r7, #0]
 800bd60:	e7ee      	b.n	800bd40 <__sfp+0x60>
 800bd62:	bf00      	nop
 800bd64:	0800ede8 	.word	0x0800ede8
 800bd68:	ffff0001 	.word	0xffff0001

0800bd6c <_fwalk_reent>:
 800bd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd70:	4606      	mov	r6, r0
 800bd72:	4688      	mov	r8, r1
 800bd74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd78:	2700      	movs	r7, #0
 800bd7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd7e:	f1b9 0901 	subs.w	r9, r9, #1
 800bd82:	d505      	bpl.n	800bd90 <_fwalk_reent+0x24>
 800bd84:	6824      	ldr	r4, [r4, #0]
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	d1f7      	bne.n	800bd7a <_fwalk_reent+0xe>
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd90:	89ab      	ldrh	r3, [r5, #12]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d907      	bls.n	800bda6 <_fwalk_reent+0x3a>
 800bd96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	d003      	beq.n	800bda6 <_fwalk_reent+0x3a>
 800bd9e:	4629      	mov	r1, r5
 800bda0:	4630      	mov	r0, r6
 800bda2:	47c0      	blx	r8
 800bda4:	4307      	orrs	r7, r0
 800bda6:	3568      	adds	r5, #104	; 0x68
 800bda8:	e7e9      	b.n	800bd7e <_fwalk_reent+0x12>

0800bdaa <rshift>:
 800bdaa:	6903      	ldr	r3, [r0, #16]
 800bdac:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bdb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bdb4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bdb8:	f100 0414 	add.w	r4, r0, #20
 800bdbc:	dd45      	ble.n	800be4a <rshift+0xa0>
 800bdbe:	f011 011f 	ands.w	r1, r1, #31
 800bdc2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bdc6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bdca:	d10c      	bne.n	800bde6 <rshift+0x3c>
 800bdcc:	f100 0710 	add.w	r7, r0, #16
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	42b1      	cmp	r1, r6
 800bdd4:	d334      	bcc.n	800be40 <rshift+0x96>
 800bdd6:	1a9b      	subs	r3, r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	1eea      	subs	r2, r5, #3
 800bddc:	4296      	cmp	r6, r2
 800bdde:	bf38      	it	cc
 800bde0:	2300      	movcc	r3, #0
 800bde2:	4423      	add	r3, r4
 800bde4:	e015      	b.n	800be12 <rshift+0x68>
 800bde6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bdea:	f1c1 0820 	rsb	r8, r1, #32
 800bdee:	40cf      	lsrs	r7, r1
 800bdf0:	f105 0e04 	add.w	lr, r5, #4
 800bdf4:	46a1      	mov	r9, r4
 800bdf6:	4576      	cmp	r6, lr
 800bdf8:	46f4      	mov	ip, lr
 800bdfa:	d815      	bhi.n	800be28 <rshift+0x7e>
 800bdfc:	1a9a      	subs	r2, r3, r2
 800bdfe:	0092      	lsls	r2, r2, #2
 800be00:	3a04      	subs	r2, #4
 800be02:	3501      	adds	r5, #1
 800be04:	42ae      	cmp	r6, r5
 800be06:	bf38      	it	cc
 800be08:	2200      	movcc	r2, #0
 800be0a:	18a3      	adds	r3, r4, r2
 800be0c:	50a7      	str	r7, [r4, r2]
 800be0e:	b107      	cbz	r7, 800be12 <rshift+0x68>
 800be10:	3304      	adds	r3, #4
 800be12:	1b1a      	subs	r2, r3, r4
 800be14:	42a3      	cmp	r3, r4
 800be16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800be1a:	bf08      	it	eq
 800be1c:	2300      	moveq	r3, #0
 800be1e:	6102      	str	r2, [r0, #16]
 800be20:	bf08      	it	eq
 800be22:	6143      	streq	r3, [r0, #20]
 800be24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be28:	f8dc c000 	ldr.w	ip, [ip]
 800be2c:	fa0c fc08 	lsl.w	ip, ip, r8
 800be30:	ea4c 0707 	orr.w	r7, ip, r7
 800be34:	f849 7b04 	str.w	r7, [r9], #4
 800be38:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be3c:	40cf      	lsrs	r7, r1
 800be3e:	e7da      	b.n	800bdf6 <rshift+0x4c>
 800be40:	f851 cb04 	ldr.w	ip, [r1], #4
 800be44:	f847 cf04 	str.w	ip, [r7, #4]!
 800be48:	e7c3      	b.n	800bdd2 <rshift+0x28>
 800be4a:	4623      	mov	r3, r4
 800be4c:	e7e1      	b.n	800be12 <rshift+0x68>

0800be4e <__hexdig_fun>:
 800be4e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800be52:	2b09      	cmp	r3, #9
 800be54:	d802      	bhi.n	800be5c <__hexdig_fun+0xe>
 800be56:	3820      	subs	r0, #32
 800be58:	b2c0      	uxtb	r0, r0
 800be5a:	4770      	bx	lr
 800be5c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be60:	2b05      	cmp	r3, #5
 800be62:	d801      	bhi.n	800be68 <__hexdig_fun+0x1a>
 800be64:	3847      	subs	r0, #71	; 0x47
 800be66:	e7f7      	b.n	800be58 <__hexdig_fun+0xa>
 800be68:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800be6c:	2b05      	cmp	r3, #5
 800be6e:	d801      	bhi.n	800be74 <__hexdig_fun+0x26>
 800be70:	3827      	subs	r0, #39	; 0x27
 800be72:	e7f1      	b.n	800be58 <__hexdig_fun+0xa>
 800be74:	2000      	movs	r0, #0
 800be76:	4770      	bx	lr

0800be78 <__gethex>:
 800be78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be7c:	ed2d 8b02 	vpush	{d8}
 800be80:	b089      	sub	sp, #36	; 0x24
 800be82:	ee08 0a10 	vmov	s16, r0
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	4bb4      	ldr	r3, [pc, #720]	; (800c15c <__gethex+0x2e4>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	4618      	mov	r0, r3
 800be90:	468b      	mov	fp, r1
 800be92:	4690      	mov	r8, r2
 800be94:	f7f4 f9b4 	bl	8000200 <strlen>
 800be98:	9b01      	ldr	r3, [sp, #4]
 800be9a:	f8db 2000 	ldr.w	r2, [fp]
 800be9e:	4403      	add	r3, r0
 800bea0:	4682      	mov	sl, r0
 800bea2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	1c93      	adds	r3, r2, #2
 800beaa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800beae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800beb2:	32fe      	adds	r2, #254	; 0xfe
 800beb4:	18d1      	adds	r1, r2, r3
 800beb6:	461f      	mov	r7, r3
 800beb8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bebc:	9100      	str	r1, [sp, #0]
 800bebe:	2830      	cmp	r0, #48	; 0x30
 800bec0:	d0f8      	beq.n	800beb4 <__gethex+0x3c>
 800bec2:	f7ff ffc4 	bl	800be4e <__hexdig_fun>
 800bec6:	4604      	mov	r4, r0
 800bec8:	2800      	cmp	r0, #0
 800beca:	d13a      	bne.n	800bf42 <__gethex+0xca>
 800becc:	9901      	ldr	r1, [sp, #4]
 800bece:	4652      	mov	r2, sl
 800bed0:	4638      	mov	r0, r7
 800bed2:	f001 fe0d 	bl	800daf0 <strncmp>
 800bed6:	4605      	mov	r5, r0
 800bed8:	2800      	cmp	r0, #0
 800beda:	d168      	bne.n	800bfae <__gethex+0x136>
 800bedc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bee0:	eb07 060a 	add.w	r6, r7, sl
 800bee4:	f7ff ffb3 	bl	800be4e <__hexdig_fun>
 800bee8:	2800      	cmp	r0, #0
 800beea:	d062      	beq.n	800bfb2 <__gethex+0x13a>
 800beec:	4633      	mov	r3, r6
 800beee:	7818      	ldrb	r0, [r3, #0]
 800bef0:	2830      	cmp	r0, #48	; 0x30
 800bef2:	461f      	mov	r7, r3
 800bef4:	f103 0301 	add.w	r3, r3, #1
 800bef8:	d0f9      	beq.n	800beee <__gethex+0x76>
 800befa:	f7ff ffa8 	bl	800be4e <__hexdig_fun>
 800befe:	2301      	movs	r3, #1
 800bf00:	fab0 f480 	clz	r4, r0
 800bf04:	0964      	lsrs	r4, r4, #5
 800bf06:	4635      	mov	r5, r6
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	463a      	mov	r2, r7
 800bf0c:	4616      	mov	r6, r2
 800bf0e:	3201      	adds	r2, #1
 800bf10:	7830      	ldrb	r0, [r6, #0]
 800bf12:	f7ff ff9c 	bl	800be4e <__hexdig_fun>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d1f8      	bne.n	800bf0c <__gethex+0x94>
 800bf1a:	9901      	ldr	r1, [sp, #4]
 800bf1c:	4652      	mov	r2, sl
 800bf1e:	4630      	mov	r0, r6
 800bf20:	f001 fde6 	bl	800daf0 <strncmp>
 800bf24:	b980      	cbnz	r0, 800bf48 <__gethex+0xd0>
 800bf26:	b94d      	cbnz	r5, 800bf3c <__gethex+0xc4>
 800bf28:	eb06 050a 	add.w	r5, r6, sl
 800bf2c:	462a      	mov	r2, r5
 800bf2e:	4616      	mov	r6, r2
 800bf30:	3201      	adds	r2, #1
 800bf32:	7830      	ldrb	r0, [r6, #0]
 800bf34:	f7ff ff8b 	bl	800be4e <__hexdig_fun>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d1f8      	bne.n	800bf2e <__gethex+0xb6>
 800bf3c:	1bad      	subs	r5, r5, r6
 800bf3e:	00ad      	lsls	r5, r5, #2
 800bf40:	e004      	b.n	800bf4c <__gethex+0xd4>
 800bf42:	2400      	movs	r4, #0
 800bf44:	4625      	mov	r5, r4
 800bf46:	e7e0      	b.n	800bf0a <__gethex+0x92>
 800bf48:	2d00      	cmp	r5, #0
 800bf4a:	d1f7      	bne.n	800bf3c <__gethex+0xc4>
 800bf4c:	7833      	ldrb	r3, [r6, #0]
 800bf4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf52:	2b50      	cmp	r3, #80	; 0x50
 800bf54:	d13b      	bne.n	800bfce <__gethex+0x156>
 800bf56:	7873      	ldrb	r3, [r6, #1]
 800bf58:	2b2b      	cmp	r3, #43	; 0x2b
 800bf5a:	d02c      	beq.n	800bfb6 <__gethex+0x13e>
 800bf5c:	2b2d      	cmp	r3, #45	; 0x2d
 800bf5e:	d02e      	beq.n	800bfbe <__gethex+0x146>
 800bf60:	1c71      	adds	r1, r6, #1
 800bf62:	f04f 0900 	mov.w	r9, #0
 800bf66:	7808      	ldrb	r0, [r1, #0]
 800bf68:	f7ff ff71 	bl	800be4e <__hexdig_fun>
 800bf6c:	1e43      	subs	r3, r0, #1
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b18      	cmp	r3, #24
 800bf72:	d82c      	bhi.n	800bfce <__gethex+0x156>
 800bf74:	f1a0 0210 	sub.w	r2, r0, #16
 800bf78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bf7c:	f7ff ff67 	bl	800be4e <__hexdig_fun>
 800bf80:	1e43      	subs	r3, r0, #1
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	2b18      	cmp	r3, #24
 800bf86:	d91d      	bls.n	800bfc4 <__gethex+0x14c>
 800bf88:	f1b9 0f00 	cmp.w	r9, #0
 800bf8c:	d000      	beq.n	800bf90 <__gethex+0x118>
 800bf8e:	4252      	negs	r2, r2
 800bf90:	4415      	add	r5, r2
 800bf92:	f8cb 1000 	str.w	r1, [fp]
 800bf96:	b1e4      	cbz	r4, 800bfd2 <__gethex+0x15a>
 800bf98:	9b00      	ldr	r3, [sp, #0]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	bf14      	ite	ne
 800bf9e:	2700      	movne	r7, #0
 800bfa0:	2706      	moveq	r7, #6
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	b009      	add	sp, #36	; 0x24
 800bfa6:	ecbd 8b02 	vpop	{d8}
 800bfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfae:	463e      	mov	r6, r7
 800bfb0:	4625      	mov	r5, r4
 800bfb2:	2401      	movs	r4, #1
 800bfb4:	e7ca      	b.n	800bf4c <__gethex+0xd4>
 800bfb6:	f04f 0900 	mov.w	r9, #0
 800bfba:	1cb1      	adds	r1, r6, #2
 800bfbc:	e7d3      	b.n	800bf66 <__gethex+0xee>
 800bfbe:	f04f 0901 	mov.w	r9, #1
 800bfc2:	e7fa      	b.n	800bfba <__gethex+0x142>
 800bfc4:	230a      	movs	r3, #10
 800bfc6:	fb03 0202 	mla	r2, r3, r2, r0
 800bfca:	3a10      	subs	r2, #16
 800bfcc:	e7d4      	b.n	800bf78 <__gethex+0x100>
 800bfce:	4631      	mov	r1, r6
 800bfd0:	e7df      	b.n	800bf92 <__gethex+0x11a>
 800bfd2:	1bf3      	subs	r3, r6, r7
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	4621      	mov	r1, r4
 800bfd8:	2b07      	cmp	r3, #7
 800bfda:	dc0b      	bgt.n	800bff4 <__gethex+0x17c>
 800bfdc:	ee18 0a10 	vmov	r0, s16
 800bfe0:	f000 faec 	bl	800c5bc <_Balloc>
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	b940      	cbnz	r0, 800bffa <__gethex+0x182>
 800bfe8:	4b5d      	ldr	r3, [pc, #372]	; (800c160 <__gethex+0x2e8>)
 800bfea:	4602      	mov	r2, r0
 800bfec:	21de      	movs	r1, #222	; 0xde
 800bfee:	485d      	ldr	r0, [pc, #372]	; (800c164 <__gethex+0x2ec>)
 800bff0:	f001 fe4e 	bl	800dc90 <__assert_func>
 800bff4:	3101      	adds	r1, #1
 800bff6:	105b      	asrs	r3, r3, #1
 800bff8:	e7ee      	b.n	800bfd8 <__gethex+0x160>
 800bffa:	f100 0914 	add.w	r9, r0, #20
 800bffe:	f04f 0b00 	mov.w	fp, #0
 800c002:	f1ca 0301 	rsb	r3, sl, #1
 800c006:	f8cd 9008 	str.w	r9, [sp, #8]
 800c00a:	f8cd b000 	str.w	fp, [sp]
 800c00e:	9306      	str	r3, [sp, #24]
 800c010:	42b7      	cmp	r7, r6
 800c012:	d340      	bcc.n	800c096 <__gethex+0x21e>
 800c014:	9802      	ldr	r0, [sp, #8]
 800c016:	9b00      	ldr	r3, [sp, #0]
 800c018:	f840 3b04 	str.w	r3, [r0], #4
 800c01c:	eba0 0009 	sub.w	r0, r0, r9
 800c020:	1080      	asrs	r0, r0, #2
 800c022:	0146      	lsls	r6, r0, #5
 800c024:	6120      	str	r0, [r4, #16]
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fbba 	bl	800c7a0 <__hi0bits>
 800c02c:	1a30      	subs	r0, r6, r0
 800c02e:	f8d8 6000 	ldr.w	r6, [r8]
 800c032:	42b0      	cmp	r0, r6
 800c034:	dd63      	ble.n	800c0fe <__gethex+0x286>
 800c036:	1b87      	subs	r7, r0, r6
 800c038:	4639      	mov	r1, r7
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 ff5e 	bl	800cefc <__any_on>
 800c040:	4682      	mov	sl, r0
 800c042:	b1a8      	cbz	r0, 800c070 <__gethex+0x1f8>
 800c044:	1e7b      	subs	r3, r7, #1
 800c046:	1159      	asrs	r1, r3, #5
 800c048:	f003 021f 	and.w	r2, r3, #31
 800c04c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c050:	f04f 0a01 	mov.w	sl, #1
 800c054:	fa0a f202 	lsl.w	r2, sl, r2
 800c058:	420a      	tst	r2, r1
 800c05a:	d009      	beq.n	800c070 <__gethex+0x1f8>
 800c05c:	4553      	cmp	r3, sl
 800c05e:	dd05      	ble.n	800c06c <__gethex+0x1f4>
 800c060:	1eb9      	subs	r1, r7, #2
 800c062:	4620      	mov	r0, r4
 800c064:	f000 ff4a 	bl	800cefc <__any_on>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d145      	bne.n	800c0f8 <__gethex+0x280>
 800c06c:	f04f 0a02 	mov.w	sl, #2
 800c070:	4639      	mov	r1, r7
 800c072:	4620      	mov	r0, r4
 800c074:	f7ff fe99 	bl	800bdaa <rshift>
 800c078:	443d      	add	r5, r7
 800c07a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c07e:	42ab      	cmp	r3, r5
 800c080:	da4c      	bge.n	800c11c <__gethex+0x2a4>
 800c082:	ee18 0a10 	vmov	r0, s16
 800c086:	4621      	mov	r1, r4
 800c088:	f000 fad8 	bl	800c63c <_Bfree>
 800c08c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c08e:	2300      	movs	r3, #0
 800c090:	6013      	str	r3, [r2, #0]
 800c092:	27a3      	movs	r7, #163	; 0xa3
 800c094:	e785      	b.n	800bfa2 <__gethex+0x12a>
 800c096:	1e73      	subs	r3, r6, #1
 800c098:	9a05      	ldr	r2, [sp, #20]
 800c09a:	9303      	str	r3, [sp, #12]
 800c09c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d019      	beq.n	800c0d8 <__gethex+0x260>
 800c0a4:	f1bb 0f20 	cmp.w	fp, #32
 800c0a8:	d107      	bne.n	800c0ba <__gethex+0x242>
 800c0aa:	9b02      	ldr	r3, [sp, #8]
 800c0ac:	9a00      	ldr	r2, [sp, #0]
 800c0ae:	f843 2b04 	str.w	r2, [r3], #4
 800c0b2:	9302      	str	r3, [sp, #8]
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	469b      	mov	fp, r3
 800c0ba:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c0be:	f7ff fec6 	bl	800be4e <__hexdig_fun>
 800c0c2:	9b00      	ldr	r3, [sp, #0]
 800c0c4:	f000 000f 	and.w	r0, r0, #15
 800c0c8:	fa00 f00b 	lsl.w	r0, r0, fp
 800c0cc:	4303      	orrs	r3, r0
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	f10b 0b04 	add.w	fp, fp, #4
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	e00d      	b.n	800c0f4 <__gethex+0x27c>
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	9a06      	ldr	r2, [sp, #24]
 800c0dc:	4413      	add	r3, r2
 800c0de:	42bb      	cmp	r3, r7
 800c0e0:	d3e0      	bcc.n	800c0a4 <__gethex+0x22c>
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	9901      	ldr	r1, [sp, #4]
 800c0e6:	9307      	str	r3, [sp, #28]
 800c0e8:	4652      	mov	r2, sl
 800c0ea:	f001 fd01 	bl	800daf0 <strncmp>
 800c0ee:	9b07      	ldr	r3, [sp, #28]
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d1d7      	bne.n	800c0a4 <__gethex+0x22c>
 800c0f4:	461e      	mov	r6, r3
 800c0f6:	e78b      	b.n	800c010 <__gethex+0x198>
 800c0f8:	f04f 0a03 	mov.w	sl, #3
 800c0fc:	e7b8      	b.n	800c070 <__gethex+0x1f8>
 800c0fe:	da0a      	bge.n	800c116 <__gethex+0x29e>
 800c100:	1a37      	subs	r7, r6, r0
 800c102:	4621      	mov	r1, r4
 800c104:	ee18 0a10 	vmov	r0, s16
 800c108:	463a      	mov	r2, r7
 800c10a:	f000 fcb3 	bl	800ca74 <__lshift>
 800c10e:	1bed      	subs	r5, r5, r7
 800c110:	4604      	mov	r4, r0
 800c112:	f100 0914 	add.w	r9, r0, #20
 800c116:	f04f 0a00 	mov.w	sl, #0
 800c11a:	e7ae      	b.n	800c07a <__gethex+0x202>
 800c11c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c120:	42a8      	cmp	r0, r5
 800c122:	dd72      	ble.n	800c20a <__gethex+0x392>
 800c124:	1b45      	subs	r5, r0, r5
 800c126:	42ae      	cmp	r6, r5
 800c128:	dc36      	bgt.n	800c198 <__gethex+0x320>
 800c12a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d02a      	beq.n	800c188 <__gethex+0x310>
 800c132:	2b03      	cmp	r3, #3
 800c134:	d02c      	beq.n	800c190 <__gethex+0x318>
 800c136:	2b01      	cmp	r3, #1
 800c138:	d11c      	bne.n	800c174 <__gethex+0x2fc>
 800c13a:	42ae      	cmp	r6, r5
 800c13c:	d11a      	bne.n	800c174 <__gethex+0x2fc>
 800c13e:	2e01      	cmp	r6, #1
 800c140:	d112      	bne.n	800c168 <__gethex+0x2f0>
 800c142:	9a04      	ldr	r2, [sp, #16]
 800c144:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	2301      	movs	r3, #1
 800c14c:	6123      	str	r3, [r4, #16]
 800c14e:	f8c9 3000 	str.w	r3, [r9]
 800c152:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c154:	2762      	movs	r7, #98	; 0x62
 800c156:	601c      	str	r4, [r3, #0]
 800c158:	e723      	b.n	800bfa2 <__gethex+0x12a>
 800c15a:	bf00      	nop
 800c15c:	0800f0d4 	.word	0x0800f0d4
 800c160:	0800eff8 	.word	0x0800eff8
 800c164:	0800f06c 	.word	0x0800f06c
 800c168:	1e71      	subs	r1, r6, #1
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 fec6 	bl	800cefc <__any_on>
 800c170:	2800      	cmp	r0, #0
 800c172:	d1e6      	bne.n	800c142 <__gethex+0x2ca>
 800c174:	ee18 0a10 	vmov	r0, s16
 800c178:	4621      	mov	r1, r4
 800c17a:	f000 fa5f 	bl	800c63c <_Bfree>
 800c17e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c180:	2300      	movs	r3, #0
 800c182:	6013      	str	r3, [r2, #0]
 800c184:	2750      	movs	r7, #80	; 0x50
 800c186:	e70c      	b.n	800bfa2 <__gethex+0x12a>
 800c188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1f2      	bne.n	800c174 <__gethex+0x2fc>
 800c18e:	e7d8      	b.n	800c142 <__gethex+0x2ca>
 800c190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1d5      	bne.n	800c142 <__gethex+0x2ca>
 800c196:	e7ed      	b.n	800c174 <__gethex+0x2fc>
 800c198:	1e6f      	subs	r7, r5, #1
 800c19a:	f1ba 0f00 	cmp.w	sl, #0
 800c19e:	d131      	bne.n	800c204 <__gethex+0x38c>
 800c1a0:	b127      	cbz	r7, 800c1ac <__gethex+0x334>
 800c1a2:	4639      	mov	r1, r7
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	f000 fea9 	bl	800cefc <__any_on>
 800c1aa:	4682      	mov	sl, r0
 800c1ac:	117b      	asrs	r3, r7, #5
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c1b4:	f007 071f 	and.w	r7, r7, #31
 800c1b8:	fa01 f707 	lsl.w	r7, r1, r7
 800c1bc:	421f      	tst	r7, r3
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	bf18      	it	ne
 800c1c4:	f04a 0a02 	orrne.w	sl, sl, #2
 800c1c8:	1b76      	subs	r6, r6, r5
 800c1ca:	f7ff fdee 	bl	800bdaa <rshift>
 800c1ce:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c1d2:	2702      	movs	r7, #2
 800c1d4:	f1ba 0f00 	cmp.w	sl, #0
 800c1d8:	d048      	beq.n	800c26c <__gethex+0x3f4>
 800c1da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d015      	beq.n	800c20e <__gethex+0x396>
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d017      	beq.n	800c216 <__gethex+0x39e>
 800c1e6:	2b01      	cmp	r3, #1
 800c1e8:	d109      	bne.n	800c1fe <__gethex+0x386>
 800c1ea:	f01a 0f02 	tst.w	sl, #2
 800c1ee:	d006      	beq.n	800c1fe <__gethex+0x386>
 800c1f0:	f8d9 0000 	ldr.w	r0, [r9]
 800c1f4:	ea4a 0a00 	orr.w	sl, sl, r0
 800c1f8:	f01a 0f01 	tst.w	sl, #1
 800c1fc:	d10e      	bne.n	800c21c <__gethex+0x3a4>
 800c1fe:	f047 0710 	orr.w	r7, r7, #16
 800c202:	e033      	b.n	800c26c <__gethex+0x3f4>
 800c204:	f04f 0a01 	mov.w	sl, #1
 800c208:	e7d0      	b.n	800c1ac <__gethex+0x334>
 800c20a:	2701      	movs	r7, #1
 800c20c:	e7e2      	b.n	800c1d4 <__gethex+0x35c>
 800c20e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c210:	f1c3 0301 	rsb	r3, r3, #1
 800c214:	9315      	str	r3, [sp, #84]	; 0x54
 800c216:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d0f0      	beq.n	800c1fe <__gethex+0x386>
 800c21c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c220:	f104 0314 	add.w	r3, r4, #20
 800c224:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c228:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c22c:	f04f 0c00 	mov.w	ip, #0
 800c230:	4618      	mov	r0, r3
 800c232:	f853 2b04 	ldr.w	r2, [r3], #4
 800c236:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c23a:	d01c      	beq.n	800c276 <__gethex+0x3fe>
 800c23c:	3201      	adds	r2, #1
 800c23e:	6002      	str	r2, [r0, #0]
 800c240:	2f02      	cmp	r7, #2
 800c242:	f104 0314 	add.w	r3, r4, #20
 800c246:	d13f      	bne.n	800c2c8 <__gethex+0x450>
 800c248:	f8d8 2000 	ldr.w	r2, [r8]
 800c24c:	3a01      	subs	r2, #1
 800c24e:	42b2      	cmp	r2, r6
 800c250:	d10a      	bne.n	800c268 <__gethex+0x3f0>
 800c252:	1171      	asrs	r1, r6, #5
 800c254:	2201      	movs	r2, #1
 800c256:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c25a:	f006 061f 	and.w	r6, r6, #31
 800c25e:	fa02 f606 	lsl.w	r6, r2, r6
 800c262:	421e      	tst	r6, r3
 800c264:	bf18      	it	ne
 800c266:	4617      	movne	r7, r2
 800c268:	f047 0720 	orr.w	r7, r7, #32
 800c26c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c26e:	601c      	str	r4, [r3, #0]
 800c270:	9b04      	ldr	r3, [sp, #16]
 800c272:	601d      	str	r5, [r3, #0]
 800c274:	e695      	b.n	800bfa2 <__gethex+0x12a>
 800c276:	4299      	cmp	r1, r3
 800c278:	f843 cc04 	str.w	ip, [r3, #-4]
 800c27c:	d8d8      	bhi.n	800c230 <__gethex+0x3b8>
 800c27e:	68a3      	ldr	r3, [r4, #8]
 800c280:	459b      	cmp	fp, r3
 800c282:	db19      	blt.n	800c2b8 <__gethex+0x440>
 800c284:	6861      	ldr	r1, [r4, #4]
 800c286:	ee18 0a10 	vmov	r0, s16
 800c28a:	3101      	adds	r1, #1
 800c28c:	f000 f996 	bl	800c5bc <_Balloc>
 800c290:	4681      	mov	r9, r0
 800c292:	b918      	cbnz	r0, 800c29c <__gethex+0x424>
 800c294:	4b1a      	ldr	r3, [pc, #104]	; (800c300 <__gethex+0x488>)
 800c296:	4602      	mov	r2, r0
 800c298:	2184      	movs	r1, #132	; 0x84
 800c29a:	e6a8      	b.n	800bfee <__gethex+0x176>
 800c29c:	6922      	ldr	r2, [r4, #16]
 800c29e:	3202      	adds	r2, #2
 800c2a0:	f104 010c 	add.w	r1, r4, #12
 800c2a4:	0092      	lsls	r2, r2, #2
 800c2a6:	300c      	adds	r0, #12
 800c2a8:	f7fc fe8e 	bl	8008fc8 <memcpy>
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	ee18 0a10 	vmov	r0, s16
 800c2b2:	f000 f9c3 	bl	800c63c <_Bfree>
 800c2b6:	464c      	mov	r4, r9
 800c2b8:	6923      	ldr	r3, [r4, #16]
 800c2ba:	1c5a      	adds	r2, r3, #1
 800c2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2c0:	6122      	str	r2, [r4, #16]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	615a      	str	r2, [r3, #20]
 800c2c6:	e7bb      	b.n	800c240 <__gethex+0x3c8>
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	455a      	cmp	r2, fp
 800c2cc:	dd0b      	ble.n	800c2e6 <__gethex+0x46e>
 800c2ce:	2101      	movs	r1, #1
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f7ff fd6a 	bl	800bdaa <rshift>
 800c2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2da:	3501      	adds	r5, #1
 800c2dc:	42ab      	cmp	r3, r5
 800c2de:	f6ff aed0 	blt.w	800c082 <__gethex+0x20a>
 800c2e2:	2701      	movs	r7, #1
 800c2e4:	e7c0      	b.n	800c268 <__gethex+0x3f0>
 800c2e6:	f016 061f 	ands.w	r6, r6, #31
 800c2ea:	d0fa      	beq.n	800c2e2 <__gethex+0x46a>
 800c2ec:	4453      	add	r3, sl
 800c2ee:	f1c6 0620 	rsb	r6, r6, #32
 800c2f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c2f6:	f000 fa53 	bl	800c7a0 <__hi0bits>
 800c2fa:	42b0      	cmp	r0, r6
 800c2fc:	dbe7      	blt.n	800c2ce <__gethex+0x456>
 800c2fe:	e7f0      	b.n	800c2e2 <__gethex+0x46a>
 800c300:	0800eff8 	.word	0x0800eff8

0800c304 <L_shift>:
 800c304:	f1c2 0208 	rsb	r2, r2, #8
 800c308:	0092      	lsls	r2, r2, #2
 800c30a:	b570      	push	{r4, r5, r6, lr}
 800c30c:	f1c2 0620 	rsb	r6, r2, #32
 800c310:	6843      	ldr	r3, [r0, #4]
 800c312:	6804      	ldr	r4, [r0, #0]
 800c314:	fa03 f506 	lsl.w	r5, r3, r6
 800c318:	432c      	orrs	r4, r5
 800c31a:	40d3      	lsrs	r3, r2
 800c31c:	6004      	str	r4, [r0, #0]
 800c31e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c322:	4288      	cmp	r0, r1
 800c324:	d3f4      	bcc.n	800c310 <L_shift+0xc>
 800c326:	bd70      	pop	{r4, r5, r6, pc}

0800c328 <__match>:
 800c328:	b530      	push	{r4, r5, lr}
 800c32a:	6803      	ldr	r3, [r0, #0]
 800c32c:	3301      	adds	r3, #1
 800c32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c332:	b914      	cbnz	r4, 800c33a <__match+0x12>
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	2001      	movs	r0, #1
 800c338:	bd30      	pop	{r4, r5, pc}
 800c33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c33e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c342:	2d19      	cmp	r5, #25
 800c344:	bf98      	it	ls
 800c346:	3220      	addls	r2, #32
 800c348:	42a2      	cmp	r2, r4
 800c34a:	d0f0      	beq.n	800c32e <__match+0x6>
 800c34c:	2000      	movs	r0, #0
 800c34e:	e7f3      	b.n	800c338 <__match+0x10>

0800c350 <__hexnan>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	680b      	ldr	r3, [r1, #0]
 800c356:	115e      	asrs	r6, r3, #5
 800c358:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c35c:	f013 031f 	ands.w	r3, r3, #31
 800c360:	b087      	sub	sp, #28
 800c362:	bf18      	it	ne
 800c364:	3604      	addne	r6, #4
 800c366:	2500      	movs	r5, #0
 800c368:	1f37      	subs	r7, r6, #4
 800c36a:	4690      	mov	r8, r2
 800c36c:	6802      	ldr	r2, [r0, #0]
 800c36e:	9301      	str	r3, [sp, #4]
 800c370:	4682      	mov	sl, r0
 800c372:	f846 5c04 	str.w	r5, [r6, #-4]
 800c376:	46b9      	mov	r9, r7
 800c378:	463c      	mov	r4, r7
 800c37a:	9502      	str	r5, [sp, #8]
 800c37c:	46ab      	mov	fp, r5
 800c37e:	7851      	ldrb	r1, [r2, #1]
 800c380:	1c53      	adds	r3, r2, #1
 800c382:	9303      	str	r3, [sp, #12]
 800c384:	b341      	cbz	r1, 800c3d8 <__hexnan+0x88>
 800c386:	4608      	mov	r0, r1
 800c388:	9205      	str	r2, [sp, #20]
 800c38a:	9104      	str	r1, [sp, #16]
 800c38c:	f7ff fd5f 	bl	800be4e <__hexdig_fun>
 800c390:	2800      	cmp	r0, #0
 800c392:	d14f      	bne.n	800c434 <__hexnan+0xe4>
 800c394:	9904      	ldr	r1, [sp, #16]
 800c396:	9a05      	ldr	r2, [sp, #20]
 800c398:	2920      	cmp	r1, #32
 800c39a:	d818      	bhi.n	800c3ce <__hexnan+0x7e>
 800c39c:	9b02      	ldr	r3, [sp, #8]
 800c39e:	459b      	cmp	fp, r3
 800c3a0:	dd13      	ble.n	800c3ca <__hexnan+0x7a>
 800c3a2:	454c      	cmp	r4, r9
 800c3a4:	d206      	bcs.n	800c3b4 <__hexnan+0x64>
 800c3a6:	2d07      	cmp	r5, #7
 800c3a8:	dc04      	bgt.n	800c3b4 <__hexnan+0x64>
 800c3aa:	462a      	mov	r2, r5
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f7ff ffa8 	bl	800c304 <L_shift>
 800c3b4:	4544      	cmp	r4, r8
 800c3b6:	d950      	bls.n	800c45a <__hexnan+0x10a>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f1a4 0904 	sub.w	r9, r4, #4
 800c3be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3c2:	f8cd b008 	str.w	fp, [sp, #8]
 800c3c6:	464c      	mov	r4, r9
 800c3c8:	461d      	mov	r5, r3
 800c3ca:	9a03      	ldr	r2, [sp, #12]
 800c3cc:	e7d7      	b.n	800c37e <__hexnan+0x2e>
 800c3ce:	2929      	cmp	r1, #41	; 0x29
 800c3d0:	d156      	bne.n	800c480 <__hexnan+0x130>
 800c3d2:	3202      	adds	r2, #2
 800c3d4:	f8ca 2000 	str.w	r2, [sl]
 800c3d8:	f1bb 0f00 	cmp.w	fp, #0
 800c3dc:	d050      	beq.n	800c480 <__hexnan+0x130>
 800c3de:	454c      	cmp	r4, r9
 800c3e0:	d206      	bcs.n	800c3f0 <__hexnan+0xa0>
 800c3e2:	2d07      	cmp	r5, #7
 800c3e4:	dc04      	bgt.n	800c3f0 <__hexnan+0xa0>
 800c3e6:	462a      	mov	r2, r5
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	f7ff ff8a 	bl	800c304 <L_shift>
 800c3f0:	4544      	cmp	r4, r8
 800c3f2:	d934      	bls.n	800c45e <__hexnan+0x10e>
 800c3f4:	f1a8 0204 	sub.w	r2, r8, #4
 800c3f8:	4623      	mov	r3, r4
 800c3fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c3fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800c402:	429f      	cmp	r7, r3
 800c404:	d2f9      	bcs.n	800c3fa <__hexnan+0xaa>
 800c406:	1b3b      	subs	r3, r7, r4
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	3304      	adds	r3, #4
 800c40e:	3401      	adds	r4, #1
 800c410:	3e03      	subs	r6, #3
 800c412:	42b4      	cmp	r4, r6
 800c414:	bf88      	it	hi
 800c416:	2304      	movhi	r3, #4
 800c418:	4443      	add	r3, r8
 800c41a:	2200      	movs	r2, #0
 800c41c:	f843 2b04 	str.w	r2, [r3], #4
 800c420:	429f      	cmp	r7, r3
 800c422:	d2fb      	bcs.n	800c41c <__hexnan+0xcc>
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	b91b      	cbnz	r3, 800c430 <__hexnan+0xe0>
 800c428:	4547      	cmp	r7, r8
 800c42a:	d127      	bne.n	800c47c <__hexnan+0x12c>
 800c42c:	2301      	movs	r3, #1
 800c42e:	603b      	str	r3, [r7, #0]
 800c430:	2005      	movs	r0, #5
 800c432:	e026      	b.n	800c482 <__hexnan+0x132>
 800c434:	3501      	adds	r5, #1
 800c436:	2d08      	cmp	r5, #8
 800c438:	f10b 0b01 	add.w	fp, fp, #1
 800c43c:	dd06      	ble.n	800c44c <__hexnan+0xfc>
 800c43e:	4544      	cmp	r4, r8
 800c440:	d9c3      	bls.n	800c3ca <__hexnan+0x7a>
 800c442:	2300      	movs	r3, #0
 800c444:	f844 3c04 	str.w	r3, [r4, #-4]
 800c448:	2501      	movs	r5, #1
 800c44a:	3c04      	subs	r4, #4
 800c44c:	6822      	ldr	r2, [r4, #0]
 800c44e:	f000 000f 	and.w	r0, r0, #15
 800c452:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c456:	6022      	str	r2, [r4, #0]
 800c458:	e7b7      	b.n	800c3ca <__hexnan+0x7a>
 800c45a:	2508      	movs	r5, #8
 800c45c:	e7b5      	b.n	800c3ca <__hexnan+0x7a>
 800c45e:	9b01      	ldr	r3, [sp, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d0df      	beq.n	800c424 <__hexnan+0xd4>
 800c464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c468:	f1c3 0320 	rsb	r3, r3, #32
 800c46c:	fa22 f303 	lsr.w	r3, r2, r3
 800c470:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c474:	401a      	ands	r2, r3
 800c476:	f846 2c04 	str.w	r2, [r6, #-4]
 800c47a:	e7d3      	b.n	800c424 <__hexnan+0xd4>
 800c47c:	3f04      	subs	r7, #4
 800c47e:	e7d1      	b.n	800c424 <__hexnan+0xd4>
 800c480:	2004      	movs	r0, #4
 800c482:	b007      	add	sp, #28
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c488 <_localeconv_r>:
 800c488:	4800      	ldr	r0, [pc, #0]	; (800c48c <_localeconv_r+0x4>)
 800c48a:	4770      	bx	lr
 800c48c:	20000174 	.word	0x20000174

0800c490 <__retarget_lock_init_recursive>:
 800c490:	4770      	bx	lr

0800c492 <__retarget_lock_acquire_recursive>:
 800c492:	4770      	bx	lr

0800c494 <__retarget_lock_release_recursive>:
 800c494:	4770      	bx	lr
	...

0800c498 <_lseek_r>:
 800c498:	b538      	push	{r3, r4, r5, lr}
 800c49a:	4d07      	ldr	r5, [pc, #28]	; (800c4b8 <_lseek_r+0x20>)
 800c49c:	4604      	mov	r4, r0
 800c49e:	4608      	mov	r0, r1
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	602a      	str	r2, [r5, #0]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	f7fc fc9e 	bl	8008de8 <_lseek>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_lseek_r+0x1e>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_lseek_r+0x1e>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	2000147c 	.word	0x2000147c

0800c4bc <__swhatbuf_r>:
 800c4bc:	b570      	push	{r4, r5, r6, lr}
 800c4be:	460e      	mov	r6, r1
 800c4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c4:	2900      	cmp	r1, #0
 800c4c6:	b096      	sub	sp, #88	; 0x58
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	461d      	mov	r5, r3
 800c4cc:	da08      	bge.n	800c4e0 <__swhatbuf_r+0x24>
 800c4ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	602a      	str	r2, [r5, #0]
 800c4d6:	061a      	lsls	r2, r3, #24
 800c4d8:	d410      	bmi.n	800c4fc <__swhatbuf_r+0x40>
 800c4da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4de:	e00e      	b.n	800c4fe <__swhatbuf_r+0x42>
 800c4e0:	466a      	mov	r2, sp
 800c4e2:	f001 fc05 	bl	800dcf0 <_fstat_r>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	dbf1      	blt.n	800c4ce <__swhatbuf_r+0x12>
 800c4ea:	9a01      	ldr	r2, [sp, #4]
 800c4ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4f4:	425a      	negs	r2, r3
 800c4f6:	415a      	adcs	r2, r3
 800c4f8:	602a      	str	r2, [r5, #0]
 800c4fa:	e7ee      	b.n	800c4da <__swhatbuf_r+0x1e>
 800c4fc:	2340      	movs	r3, #64	; 0x40
 800c4fe:	2000      	movs	r0, #0
 800c500:	6023      	str	r3, [r4, #0]
 800c502:	b016      	add	sp, #88	; 0x58
 800c504:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c508 <__smakebuf_r>:
 800c508:	898b      	ldrh	r3, [r1, #12]
 800c50a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c50c:	079d      	lsls	r5, r3, #30
 800c50e:	4606      	mov	r6, r0
 800c510:	460c      	mov	r4, r1
 800c512:	d507      	bpl.n	800c524 <__smakebuf_r+0x1c>
 800c514:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	6123      	str	r3, [r4, #16]
 800c51c:	2301      	movs	r3, #1
 800c51e:	6163      	str	r3, [r4, #20]
 800c520:	b002      	add	sp, #8
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	ab01      	add	r3, sp, #4
 800c526:	466a      	mov	r2, sp
 800c528:	f7ff ffc8 	bl	800c4bc <__swhatbuf_r>
 800c52c:	9900      	ldr	r1, [sp, #0]
 800c52e:	4605      	mov	r5, r0
 800c530:	4630      	mov	r0, r6
 800c532:	f000 fd87 	bl	800d044 <_malloc_r>
 800c536:	b948      	cbnz	r0, 800c54c <__smakebuf_r+0x44>
 800c538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c53c:	059a      	lsls	r2, r3, #22
 800c53e:	d4ef      	bmi.n	800c520 <__smakebuf_r+0x18>
 800c540:	f023 0303 	bic.w	r3, r3, #3
 800c544:	f043 0302 	orr.w	r3, r3, #2
 800c548:	81a3      	strh	r3, [r4, #12]
 800c54a:	e7e3      	b.n	800c514 <__smakebuf_r+0xc>
 800c54c:	4b0d      	ldr	r3, [pc, #52]	; (800c584 <__smakebuf_r+0x7c>)
 800c54e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	6020      	str	r0, [r4, #0]
 800c554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	9b00      	ldr	r3, [sp, #0]
 800c55c:	6163      	str	r3, [r4, #20]
 800c55e:	9b01      	ldr	r3, [sp, #4]
 800c560:	6120      	str	r0, [r4, #16]
 800c562:	b15b      	cbz	r3, 800c57c <__smakebuf_r+0x74>
 800c564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c568:	4630      	mov	r0, r6
 800c56a:	f001 fbd3 	bl	800dd14 <_isatty_r>
 800c56e:	b128      	cbz	r0, 800c57c <__smakebuf_r+0x74>
 800c570:	89a3      	ldrh	r3, [r4, #12]
 800c572:	f023 0303 	bic.w	r3, r3, #3
 800c576:	f043 0301 	orr.w	r3, r3, #1
 800c57a:	81a3      	strh	r3, [r4, #12]
 800c57c:	89a0      	ldrh	r0, [r4, #12]
 800c57e:	4305      	orrs	r5, r0
 800c580:	81a5      	strh	r5, [r4, #12]
 800c582:	e7cd      	b.n	800c520 <__smakebuf_r+0x18>
 800c584:	0800bc09 	.word	0x0800bc09

0800c588 <malloc>:
 800c588:	4b02      	ldr	r3, [pc, #8]	; (800c594 <malloc+0xc>)
 800c58a:	4601      	mov	r1, r0
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	f000 bd59 	b.w	800d044 <_malloc_r>
 800c592:	bf00      	nop
 800c594:	2000001c 	.word	0x2000001c

0800c598 <__ascii_mbtowc>:
 800c598:	b082      	sub	sp, #8
 800c59a:	b901      	cbnz	r1, 800c59e <__ascii_mbtowc+0x6>
 800c59c:	a901      	add	r1, sp, #4
 800c59e:	b142      	cbz	r2, 800c5b2 <__ascii_mbtowc+0x1a>
 800c5a0:	b14b      	cbz	r3, 800c5b6 <__ascii_mbtowc+0x1e>
 800c5a2:	7813      	ldrb	r3, [r2, #0]
 800c5a4:	600b      	str	r3, [r1, #0]
 800c5a6:	7812      	ldrb	r2, [r2, #0]
 800c5a8:	1e10      	subs	r0, r2, #0
 800c5aa:	bf18      	it	ne
 800c5ac:	2001      	movne	r0, #1
 800c5ae:	b002      	add	sp, #8
 800c5b0:	4770      	bx	lr
 800c5b2:	4610      	mov	r0, r2
 800c5b4:	e7fb      	b.n	800c5ae <__ascii_mbtowc+0x16>
 800c5b6:	f06f 0001 	mvn.w	r0, #1
 800c5ba:	e7f8      	b.n	800c5ae <__ascii_mbtowc+0x16>

0800c5bc <_Balloc>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	460d      	mov	r5, r1
 800c5c4:	b976      	cbnz	r6, 800c5e4 <_Balloc+0x28>
 800c5c6:	2010      	movs	r0, #16
 800c5c8:	f7ff ffde 	bl	800c588 <malloc>
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	6260      	str	r0, [r4, #36]	; 0x24
 800c5d0:	b920      	cbnz	r0, 800c5dc <_Balloc+0x20>
 800c5d2:	4b18      	ldr	r3, [pc, #96]	; (800c634 <_Balloc+0x78>)
 800c5d4:	4818      	ldr	r0, [pc, #96]	; (800c638 <_Balloc+0x7c>)
 800c5d6:	2166      	movs	r1, #102	; 0x66
 800c5d8:	f001 fb5a 	bl	800dc90 <__assert_func>
 800c5dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5e0:	6006      	str	r6, [r0, #0]
 800c5e2:	60c6      	str	r6, [r0, #12]
 800c5e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c5e6:	68f3      	ldr	r3, [r6, #12]
 800c5e8:	b183      	cbz	r3, 800c60c <_Balloc+0x50>
 800c5ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c5f2:	b9b8      	cbnz	r0, 800c624 <_Balloc+0x68>
 800c5f4:	2101      	movs	r1, #1
 800c5f6:	fa01 f605 	lsl.w	r6, r1, r5
 800c5fa:	1d72      	adds	r2, r6, #5
 800c5fc:	0092      	lsls	r2, r2, #2
 800c5fe:	4620      	mov	r0, r4
 800c600:	f000 fc9d 	bl	800cf3e <_calloc_r>
 800c604:	b160      	cbz	r0, 800c620 <_Balloc+0x64>
 800c606:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c60a:	e00e      	b.n	800c62a <_Balloc+0x6e>
 800c60c:	2221      	movs	r2, #33	; 0x21
 800c60e:	2104      	movs	r1, #4
 800c610:	4620      	mov	r0, r4
 800c612:	f000 fc94 	bl	800cf3e <_calloc_r>
 800c616:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c618:	60f0      	str	r0, [r6, #12]
 800c61a:	68db      	ldr	r3, [r3, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1e4      	bne.n	800c5ea <_Balloc+0x2e>
 800c620:	2000      	movs	r0, #0
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	6802      	ldr	r2, [r0, #0]
 800c626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c62a:	2300      	movs	r3, #0
 800c62c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c630:	e7f7      	b.n	800c622 <_Balloc+0x66>
 800c632:	bf00      	nop
 800c634:	0800ef86 	.word	0x0800ef86
 800c638:	0800f0e8 	.word	0x0800f0e8

0800c63c <_Bfree>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c640:	4605      	mov	r5, r0
 800c642:	460c      	mov	r4, r1
 800c644:	b976      	cbnz	r6, 800c664 <_Bfree+0x28>
 800c646:	2010      	movs	r0, #16
 800c648:	f7ff ff9e 	bl	800c588 <malloc>
 800c64c:	4602      	mov	r2, r0
 800c64e:	6268      	str	r0, [r5, #36]	; 0x24
 800c650:	b920      	cbnz	r0, 800c65c <_Bfree+0x20>
 800c652:	4b09      	ldr	r3, [pc, #36]	; (800c678 <_Bfree+0x3c>)
 800c654:	4809      	ldr	r0, [pc, #36]	; (800c67c <_Bfree+0x40>)
 800c656:	218a      	movs	r1, #138	; 0x8a
 800c658:	f001 fb1a 	bl	800dc90 <__assert_func>
 800c65c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c660:	6006      	str	r6, [r0, #0]
 800c662:	60c6      	str	r6, [r0, #12]
 800c664:	b13c      	cbz	r4, 800c676 <_Bfree+0x3a>
 800c666:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c668:	6862      	ldr	r2, [r4, #4]
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c670:	6021      	str	r1, [r4, #0]
 800c672:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c676:	bd70      	pop	{r4, r5, r6, pc}
 800c678:	0800ef86 	.word	0x0800ef86
 800c67c:	0800f0e8 	.word	0x0800f0e8

0800c680 <__multadd>:
 800c680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c684:	690d      	ldr	r5, [r1, #16]
 800c686:	4607      	mov	r7, r0
 800c688:	460c      	mov	r4, r1
 800c68a:	461e      	mov	r6, r3
 800c68c:	f101 0c14 	add.w	ip, r1, #20
 800c690:	2000      	movs	r0, #0
 800c692:	f8dc 3000 	ldr.w	r3, [ip]
 800c696:	b299      	uxth	r1, r3
 800c698:	fb02 6101 	mla	r1, r2, r1, r6
 800c69c:	0c1e      	lsrs	r6, r3, #16
 800c69e:	0c0b      	lsrs	r3, r1, #16
 800c6a0:	fb02 3306 	mla	r3, r2, r6, r3
 800c6a4:	b289      	uxth	r1, r1
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c6ac:	4285      	cmp	r5, r0
 800c6ae:	f84c 1b04 	str.w	r1, [ip], #4
 800c6b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c6b6:	dcec      	bgt.n	800c692 <__multadd+0x12>
 800c6b8:	b30e      	cbz	r6, 800c6fe <__multadd+0x7e>
 800c6ba:	68a3      	ldr	r3, [r4, #8]
 800c6bc:	42ab      	cmp	r3, r5
 800c6be:	dc19      	bgt.n	800c6f4 <__multadd+0x74>
 800c6c0:	6861      	ldr	r1, [r4, #4]
 800c6c2:	4638      	mov	r0, r7
 800c6c4:	3101      	adds	r1, #1
 800c6c6:	f7ff ff79 	bl	800c5bc <_Balloc>
 800c6ca:	4680      	mov	r8, r0
 800c6cc:	b928      	cbnz	r0, 800c6da <__multadd+0x5a>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	4b0c      	ldr	r3, [pc, #48]	; (800c704 <__multadd+0x84>)
 800c6d2:	480d      	ldr	r0, [pc, #52]	; (800c708 <__multadd+0x88>)
 800c6d4:	21b5      	movs	r1, #181	; 0xb5
 800c6d6:	f001 fadb 	bl	800dc90 <__assert_func>
 800c6da:	6922      	ldr	r2, [r4, #16]
 800c6dc:	3202      	adds	r2, #2
 800c6de:	f104 010c 	add.w	r1, r4, #12
 800c6e2:	0092      	lsls	r2, r2, #2
 800c6e4:	300c      	adds	r0, #12
 800c6e6:	f7fc fc6f 	bl	8008fc8 <memcpy>
 800c6ea:	4621      	mov	r1, r4
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f7ff ffa5 	bl	800c63c <_Bfree>
 800c6f2:	4644      	mov	r4, r8
 800c6f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c6f8:	3501      	adds	r5, #1
 800c6fa:	615e      	str	r6, [r3, #20]
 800c6fc:	6125      	str	r5, [r4, #16]
 800c6fe:	4620      	mov	r0, r4
 800c700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c704:	0800eff8 	.word	0x0800eff8
 800c708:	0800f0e8 	.word	0x0800f0e8

0800c70c <__s2b>:
 800c70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c710:	460c      	mov	r4, r1
 800c712:	4615      	mov	r5, r2
 800c714:	461f      	mov	r7, r3
 800c716:	2209      	movs	r2, #9
 800c718:	3308      	adds	r3, #8
 800c71a:	4606      	mov	r6, r0
 800c71c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c720:	2100      	movs	r1, #0
 800c722:	2201      	movs	r2, #1
 800c724:	429a      	cmp	r2, r3
 800c726:	db09      	blt.n	800c73c <__s2b+0x30>
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff ff47 	bl	800c5bc <_Balloc>
 800c72e:	b940      	cbnz	r0, 800c742 <__s2b+0x36>
 800c730:	4602      	mov	r2, r0
 800c732:	4b19      	ldr	r3, [pc, #100]	; (800c798 <__s2b+0x8c>)
 800c734:	4819      	ldr	r0, [pc, #100]	; (800c79c <__s2b+0x90>)
 800c736:	21ce      	movs	r1, #206	; 0xce
 800c738:	f001 faaa 	bl	800dc90 <__assert_func>
 800c73c:	0052      	lsls	r2, r2, #1
 800c73e:	3101      	adds	r1, #1
 800c740:	e7f0      	b.n	800c724 <__s2b+0x18>
 800c742:	9b08      	ldr	r3, [sp, #32]
 800c744:	6143      	str	r3, [r0, #20]
 800c746:	2d09      	cmp	r5, #9
 800c748:	f04f 0301 	mov.w	r3, #1
 800c74c:	6103      	str	r3, [r0, #16]
 800c74e:	dd16      	ble.n	800c77e <__s2b+0x72>
 800c750:	f104 0909 	add.w	r9, r4, #9
 800c754:	46c8      	mov	r8, r9
 800c756:	442c      	add	r4, r5
 800c758:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c75c:	4601      	mov	r1, r0
 800c75e:	3b30      	subs	r3, #48	; 0x30
 800c760:	220a      	movs	r2, #10
 800c762:	4630      	mov	r0, r6
 800c764:	f7ff ff8c 	bl	800c680 <__multadd>
 800c768:	45a0      	cmp	r8, r4
 800c76a:	d1f5      	bne.n	800c758 <__s2b+0x4c>
 800c76c:	f1a5 0408 	sub.w	r4, r5, #8
 800c770:	444c      	add	r4, r9
 800c772:	1b2d      	subs	r5, r5, r4
 800c774:	1963      	adds	r3, r4, r5
 800c776:	42bb      	cmp	r3, r7
 800c778:	db04      	blt.n	800c784 <__s2b+0x78>
 800c77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c77e:	340a      	adds	r4, #10
 800c780:	2509      	movs	r5, #9
 800c782:	e7f6      	b.n	800c772 <__s2b+0x66>
 800c784:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c788:	4601      	mov	r1, r0
 800c78a:	3b30      	subs	r3, #48	; 0x30
 800c78c:	220a      	movs	r2, #10
 800c78e:	4630      	mov	r0, r6
 800c790:	f7ff ff76 	bl	800c680 <__multadd>
 800c794:	e7ee      	b.n	800c774 <__s2b+0x68>
 800c796:	bf00      	nop
 800c798:	0800eff8 	.word	0x0800eff8
 800c79c:	0800f0e8 	.word	0x0800f0e8

0800c7a0 <__hi0bits>:
 800c7a0:	0c03      	lsrs	r3, r0, #16
 800c7a2:	041b      	lsls	r3, r3, #16
 800c7a4:	b9d3      	cbnz	r3, 800c7dc <__hi0bits+0x3c>
 800c7a6:	0400      	lsls	r0, r0, #16
 800c7a8:	2310      	movs	r3, #16
 800c7aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c7ae:	bf04      	itt	eq
 800c7b0:	0200      	lsleq	r0, r0, #8
 800c7b2:	3308      	addeq	r3, #8
 800c7b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7b8:	bf04      	itt	eq
 800c7ba:	0100      	lsleq	r0, r0, #4
 800c7bc:	3304      	addeq	r3, #4
 800c7be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7c2:	bf04      	itt	eq
 800c7c4:	0080      	lsleq	r0, r0, #2
 800c7c6:	3302      	addeq	r3, #2
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	db05      	blt.n	800c7d8 <__hi0bits+0x38>
 800c7cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7d0:	f103 0301 	add.w	r3, r3, #1
 800c7d4:	bf08      	it	eq
 800c7d6:	2320      	moveq	r3, #32
 800c7d8:	4618      	mov	r0, r3
 800c7da:	4770      	bx	lr
 800c7dc:	2300      	movs	r3, #0
 800c7de:	e7e4      	b.n	800c7aa <__hi0bits+0xa>

0800c7e0 <__lo0bits>:
 800c7e0:	6803      	ldr	r3, [r0, #0]
 800c7e2:	f013 0207 	ands.w	r2, r3, #7
 800c7e6:	4601      	mov	r1, r0
 800c7e8:	d00b      	beq.n	800c802 <__lo0bits+0x22>
 800c7ea:	07da      	lsls	r2, r3, #31
 800c7ec:	d423      	bmi.n	800c836 <__lo0bits+0x56>
 800c7ee:	0798      	lsls	r0, r3, #30
 800c7f0:	bf49      	itett	mi
 800c7f2:	085b      	lsrmi	r3, r3, #1
 800c7f4:	089b      	lsrpl	r3, r3, #2
 800c7f6:	2001      	movmi	r0, #1
 800c7f8:	600b      	strmi	r3, [r1, #0]
 800c7fa:	bf5c      	itt	pl
 800c7fc:	600b      	strpl	r3, [r1, #0]
 800c7fe:	2002      	movpl	r0, #2
 800c800:	4770      	bx	lr
 800c802:	b298      	uxth	r0, r3
 800c804:	b9a8      	cbnz	r0, 800c832 <__lo0bits+0x52>
 800c806:	0c1b      	lsrs	r3, r3, #16
 800c808:	2010      	movs	r0, #16
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	b90a      	cbnz	r2, 800c812 <__lo0bits+0x32>
 800c80e:	3008      	adds	r0, #8
 800c810:	0a1b      	lsrs	r3, r3, #8
 800c812:	071a      	lsls	r2, r3, #28
 800c814:	bf04      	itt	eq
 800c816:	091b      	lsreq	r3, r3, #4
 800c818:	3004      	addeq	r0, #4
 800c81a:	079a      	lsls	r2, r3, #30
 800c81c:	bf04      	itt	eq
 800c81e:	089b      	lsreq	r3, r3, #2
 800c820:	3002      	addeq	r0, #2
 800c822:	07da      	lsls	r2, r3, #31
 800c824:	d403      	bmi.n	800c82e <__lo0bits+0x4e>
 800c826:	085b      	lsrs	r3, r3, #1
 800c828:	f100 0001 	add.w	r0, r0, #1
 800c82c:	d005      	beq.n	800c83a <__lo0bits+0x5a>
 800c82e:	600b      	str	r3, [r1, #0]
 800c830:	4770      	bx	lr
 800c832:	4610      	mov	r0, r2
 800c834:	e7e9      	b.n	800c80a <__lo0bits+0x2a>
 800c836:	2000      	movs	r0, #0
 800c838:	4770      	bx	lr
 800c83a:	2020      	movs	r0, #32
 800c83c:	4770      	bx	lr
	...

0800c840 <__i2b>:
 800c840:	b510      	push	{r4, lr}
 800c842:	460c      	mov	r4, r1
 800c844:	2101      	movs	r1, #1
 800c846:	f7ff feb9 	bl	800c5bc <_Balloc>
 800c84a:	4602      	mov	r2, r0
 800c84c:	b928      	cbnz	r0, 800c85a <__i2b+0x1a>
 800c84e:	4b05      	ldr	r3, [pc, #20]	; (800c864 <__i2b+0x24>)
 800c850:	4805      	ldr	r0, [pc, #20]	; (800c868 <__i2b+0x28>)
 800c852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c856:	f001 fa1b 	bl	800dc90 <__assert_func>
 800c85a:	2301      	movs	r3, #1
 800c85c:	6144      	str	r4, [r0, #20]
 800c85e:	6103      	str	r3, [r0, #16]
 800c860:	bd10      	pop	{r4, pc}
 800c862:	bf00      	nop
 800c864:	0800eff8 	.word	0x0800eff8
 800c868:	0800f0e8 	.word	0x0800f0e8

0800c86c <__multiply>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	4691      	mov	r9, r2
 800c872:	690a      	ldr	r2, [r1, #16]
 800c874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c878:	429a      	cmp	r2, r3
 800c87a:	bfb8      	it	lt
 800c87c:	460b      	movlt	r3, r1
 800c87e:	460c      	mov	r4, r1
 800c880:	bfbc      	itt	lt
 800c882:	464c      	movlt	r4, r9
 800c884:	4699      	movlt	r9, r3
 800c886:	6927      	ldr	r7, [r4, #16]
 800c888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	6861      	ldr	r1, [r4, #4]
 800c890:	eb07 060a 	add.w	r6, r7, sl
 800c894:	42b3      	cmp	r3, r6
 800c896:	b085      	sub	sp, #20
 800c898:	bfb8      	it	lt
 800c89a:	3101      	addlt	r1, #1
 800c89c:	f7ff fe8e 	bl	800c5bc <_Balloc>
 800c8a0:	b930      	cbnz	r0, 800c8b0 <__multiply+0x44>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	4b44      	ldr	r3, [pc, #272]	; (800c9b8 <__multiply+0x14c>)
 800c8a6:	4845      	ldr	r0, [pc, #276]	; (800c9bc <__multiply+0x150>)
 800c8a8:	f240 115d 	movw	r1, #349	; 0x15d
 800c8ac:	f001 f9f0 	bl	800dc90 <__assert_func>
 800c8b0:	f100 0514 	add.w	r5, r0, #20
 800c8b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8b8:	462b      	mov	r3, r5
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	4543      	cmp	r3, r8
 800c8be:	d321      	bcc.n	800c904 <__multiply+0x98>
 800c8c0:	f104 0314 	add.w	r3, r4, #20
 800c8c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c8c8:	f109 0314 	add.w	r3, r9, #20
 800c8cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c8d0:	9202      	str	r2, [sp, #8]
 800c8d2:	1b3a      	subs	r2, r7, r4
 800c8d4:	3a15      	subs	r2, #21
 800c8d6:	f022 0203 	bic.w	r2, r2, #3
 800c8da:	3204      	adds	r2, #4
 800c8dc:	f104 0115 	add.w	r1, r4, #21
 800c8e0:	428f      	cmp	r7, r1
 800c8e2:	bf38      	it	cc
 800c8e4:	2204      	movcc	r2, #4
 800c8e6:	9201      	str	r2, [sp, #4]
 800c8e8:	9a02      	ldr	r2, [sp, #8]
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d80c      	bhi.n	800c90a <__multiply+0x9e>
 800c8f0:	2e00      	cmp	r6, #0
 800c8f2:	dd03      	ble.n	800c8fc <__multiply+0x90>
 800c8f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d05a      	beq.n	800c9b2 <__multiply+0x146>
 800c8fc:	6106      	str	r6, [r0, #16]
 800c8fe:	b005      	add	sp, #20
 800c900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c904:	f843 2b04 	str.w	r2, [r3], #4
 800c908:	e7d8      	b.n	800c8bc <__multiply+0x50>
 800c90a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c90e:	f1ba 0f00 	cmp.w	sl, #0
 800c912:	d024      	beq.n	800c95e <__multiply+0xf2>
 800c914:	f104 0e14 	add.w	lr, r4, #20
 800c918:	46a9      	mov	r9, r5
 800c91a:	f04f 0c00 	mov.w	ip, #0
 800c91e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c922:	f8d9 1000 	ldr.w	r1, [r9]
 800c926:	fa1f fb82 	uxth.w	fp, r2
 800c92a:	b289      	uxth	r1, r1
 800c92c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c934:	f8d9 2000 	ldr.w	r2, [r9]
 800c938:	4461      	add	r1, ip
 800c93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c93e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c946:	b289      	uxth	r1, r1
 800c948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c94c:	4577      	cmp	r7, lr
 800c94e:	f849 1b04 	str.w	r1, [r9], #4
 800c952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c956:	d8e2      	bhi.n	800c91e <__multiply+0xb2>
 800c958:	9a01      	ldr	r2, [sp, #4]
 800c95a:	f845 c002 	str.w	ip, [r5, r2]
 800c95e:	9a03      	ldr	r2, [sp, #12]
 800c960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c964:	3304      	adds	r3, #4
 800c966:	f1b9 0f00 	cmp.w	r9, #0
 800c96a:	d020      	beq.n	800c9ae <__multiply+0x142>
 800c96c:	6829      	ldr	r1, [r5, #0]
 800c96e:	f104 0c14 	add.w	ip, r4, #20
 800c972:	46ae      	mov	lr, r5
 800c974:	f04f 0a00 	mov.w	sl, #0
 800c978:	f8bc b000 	ldrh.w	fp, [ip]
 800c97c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c980:	fb09 220b 	mla	r2, r9, fp, r2
 800c984:	4492      	add	sl, r2
 800c986:	b289      	uxth	r1, r1
 800c988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c98c:	f84e 1b04 	str.w	r1, [lr], #4
 800c990:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c994:	f8be 1000 	ldrh.w	r1, [lr]
 800c998:	0c12      	lsrs	r2, r2, #16
 800c99a:	fb09 1102 	mla	r1, r9, r2, r1
 800c99e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c9a2:	4567      	cmp	r7, ip
 800c9a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c9a8:	d8e6      	bhi.n	800c978 <__multiply+0x10c>
 800c9aa:	9a01      	ldr	r2, [sp, #4]
 800c9ac:	50a9      	str	r1, [r5, r2]
 800c9ae:	3504      	adds	r5, #4
 800c9b0:	e79a      	b.n	800c8e8 <__multiply+0x7c>
 800c9b2:	3e01      	subs	r6, #1
 800c9b4:	e79c      	b.n	800c8f0 <__multiply+0x84>
 800c9b6:	bf00      	nop
 800c9b8:	0800eff8 	.word	0x0800eff8
 800c9bc:	0800f0e8 	.word	0x0800f0e8

0800c9c0 <__pow5mult>:
 800c9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9c4:	4615      	mov	r5, r2
 800c9c6:	f012 0203 	ands.w	r2, r2, #3
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460f      	mov	r7, r1
 800c9ce:	d007      	beq.n	800c9e0 <__pow5mult+0x20>
 800c9d0:	4c25      	ldr	r4, [pc, #148]	; (800ca68 <__pow5mult+0xa8>)
 800c9d2:	3a01      	subs	r2, #1
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9da:	f7ff fe51 	bl	800c680 <__multadd>
 800c9de:	4607      	mov	r7, r0
 800c9e0:	10ad      	asrs	r5, r5, #2
 800c9e2:	d03d      	beq.n	800ca60 <__pow5mult+0xa0>
 800c9e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9e6:	b97c      	cbnz	r4, 800ca08 <__pow5mult+0x48>
 800c9e8:	2010      	movs	r0, #16
 800c9ea:	f7ff fdcd 	bl	800c588 <malloc>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	6270      	str	r0, [r6, #36]	; 0x24
 800c9f2:	b928      	cbnz	r0, 800ca00 <__pow5mult+0x40>
 800c9f4:	4b1d      	ldr	r3, [pc, #116]	; (800ca6c <__pow5mult+0xac>)
 800c9f6:	481e      	ldr	r0, [pc, #120]	; (800ca70 <__pow5mult+0xb0>)
 800c9f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9fc:	f001 f948 	bl	800dc90 <__assert_func>
 800ca00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca04:	6004      	str	r4, [r0, #0]
 800ca06:	60c4      	str	r4, [r0, #12]
 800ca08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca10:	b94c      	cbnz	r4, 800ca26 <__pow5mult+0x66>
 800ca12:	f240 2171 	movw	r1, #625	; 0x271
 800ca16:	4630      	mov	r0, r6
 800ca18:	f7ff ff12 	bl	800c840 <__i2b>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca22:	4604      	mov	r4, r0
 800ca24:	6003      	str	r3, [r0, #0]
 800ca26:	f04f 0900 	mov.w	r9, #0
 800ca2a:	07eb      	lsls	r3, r5, #31
 800ca2c:	d50a      	bpl.n	800ca44 <__pow5mult+0x84>
 800ca2e:	4639      	mov	r1, r7
 800ca30:	4622      	mov	r2, r4
 800ca32:	4630      	mov	r0, r6
 800ca34:	f7ff ff1a 	bl	800c86c <__multiply>
 800ca38:	4639      	mov	r1, r7
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff fdfd 	bl	800c63c <_Bfree>
 800ca42:	4647      	mov	r7, r8
 800ca44:	106d      	asrs	r5, r5, #1
 800ca46:	d00b      	beq.n	800ca60 <__pow5mult+0xa0>
 800ca48:	6820      	ldr	r0, [r4, #0]
 800ca4a:	b938      	cbnz	r0, 800ca5c <__pow5mult+0x9c>
 800ca4c:	4622      	mov	r2, r4
 800ca4e:	4621      	mov	r1, r4
 800ca50:	4630      	mov	r0, r6
 800ca52:	f7ff ff0b 	bl	800c86c <__multiply>
 800ca56:	6020      	str	r0, [r4, #0]
 800ca58:	f8c0 9000 	str.w	r9, [r0]
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	e7e4      	b.n	800ca2a <__pow5mult+0x6a>
 800ca60:	4638      	mov	r0, r7
 800ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca66:	bf00      	nop
 800ca68:	0800f238 	.word	0x0800f238
 800ca6c:	0800ef86 	.word	0x0800ef86
 800ca70:	0800f0e8 	.word	0x0800f0e8

0800ca74 <__lshift>:
 800ca74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	6849      	ldr	r1, [r1, #4]
 800ca7c:	6923      	ldr	r3, [r4, #16]
 800ca7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	4607      	mov	r7, r0
 800ca86:	4691      	mov	r9, r2
 800ca88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca8c:	f108 0601 	add.w	r6, r8, #1
 800ca90:	42b3      	cmp	r3, r6
 800ca92:	db0b      	blt.n	800caac <__lshift+0x38>
 800ca94:	4638      	mov	r0, r7
 800ca96:	f7ff fd91 	bl	800c5bc <_Balloc>
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	b948      	cbnz	r0, 800cab2 <__lshift+0x3e>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	4b2a      	ldr	r3, [pc, #168]	; (800cb4c <__lshift+0xd8>)
 800caa2:	482b      	ldr	r0, [pc, #172]	; (800cb50 <__lshift+0xdc>)
 800caa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800caa8:	f001 f8f2 	bl	800dc90 <__assert_func>
 800caac:	3101      	adds	r1, #1
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	e7ee      	b.n	800ca90 <__lshift+0x1c>
 800cab2:	2300      	movs	r3, #0
 800cab4:	f100 0114 	add.w	r1, r0, #20
 800cab8:	f100 0210 	add.w	r2, r0, #16
 800cabc:	4618      	mov	r0, r3
 800cabe:	4553      	cmp	r3, sl
 800cac0:	db37      	blt.n	800cb32 <__lshift+0xbe>
 800cac2:	6920      	ldr	r0, [r4, #16]
 800cac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cac8:	f104 0314 	add.w	r3, r4, #20
 800cacc:	f019 091f 	ands.w	r9, r9, #31
 800cad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cad8:	d02f      	beq.n	800cb3a <__lshift+0xc6>
 800cada:	f1c9 0e20 	rsb	lr, r9, #32
 800cade:	468a      	mov	sl, r1
 800cae0:	f04f 0c00 	mov.w	ip, #0
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	fa02 f209 	lsl.w	r2, r2, r9
 800caea:	ea42 020c 	orr.w	r2, r2, ip
 800caee:	f84a 2b04 	str.w	r2, [sl], #4
 800caf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800caf6:	4298      	cmp	r0, r3
 800caf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cafc:	d8f2      	bhi.n	800cae4 <__lshift+0x70>
 800cafe:	1b03      	subs	r3, r0, r4
 800cb00:	3b15      	subs	r3, #21
 800cb02:	f023 0303 	bic.w	r3, r3, #3
 800cb06:	3304      	adds	r3, #4
 800cb08:	f104 0215 	add.w	r2, r4, #21
 800cb0c:	4290      	cmp	r0, r2
 800cb0e:	bf38      	it	cc
 800cb10:	2304      	movcc	r3, #4
 800cb12:	f841 c003 	str.w	ip, [r1, r3]
 800cb16:	f1bc 0f00 	cmp.w	ip, #0
 800cb1a:	d001      	beq.n	800cb20 <__lshift+0xac>
 800cb1c:	f108 0602 	add.w	r6, r8, #2
 800cb20:	3e01      	subs	r6, #1
 800cb22:	4638      	mov	r0, r7
 800cb24:	612e      	str	r6, [r5, #16]
 800cb26:	4621      	mov	r1, r4
 800cb28:	f7ff fd88 	bl	800c63c <_Bfree>
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb32:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb36:	3301      	adds	r3, #1
 800cb38:	e7c1      	b.n	800cabe <__lshift+0x4a>
 800cb3a:	3904      	subs	r1, #4
 800cb3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb40:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb44:	4298      	cmp	r0, r3
 800cb46:	d8f9      	bhi.n	800cb3c <__lshift+0xc8>
 800cb48:	e7ea      	b.n	800cb20 <__lshift+0xac>
 800cb4a:	bf00      	nop
 800cb4c:	0800eff8 	.word	0x0800eff8
 800cb50:	0800f0e8 	.word	0x0800f0e8

0800cb54 <__mcmp>:
 800cb54:	b530      	push	{r4, r5, lr}
 800cb56:	6902      	ldr	r2, [r0, #16]
 800cb58:	690c      	ldr	r4, [r1, #16]
 800cb5a:	1b12      	subs	r2, r2, r4
 800cb5c:	d10e      	bne.n	800cb7c <__mcmp+0x28>
 800cb5e:	f100 0314 	add.w	r3, r0, #20
 800cb62:	3114      	adds	r1, #20
 800cb64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb74:	42a5      	cmp	r5, r4
 800cb76:	d003      	beq.n	800cb80 <__mcmp+0x2c>
 800cb78:	d305      	bcc.n	800cb86 <__mcmp+0x32>
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	bd30      	pop	{r4, r5, pc}
 800cb80:	4283      	cmp	r3, r0
 800cb82:	d3f3      	bcc.n	800cb6c <__mcmp+0x18>
 800cb84:	e7fa      	b.n	800cb7c <__mcmp+0x28>
 800cb86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb8a:	e7f7      	b.n	800cb7c <__mcmp+0x28>

0800cb8c <__mdiff>:
 800cb8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb90:	460c      	mov	r4, r1
 800cb92:	4606      	mov	r6, r0
 800cb94:	4611      	mov	r1, r2
 800cb96:	4620      	mov	r0, r4
 800cb98:	4690      	mov	r8, r2
 800cb9a:	f7ff ffdb 	bl	800cb54 <__mcmp>
 800cb9e:	1e05      	subs	r5, r0, #0
 800cba0:	d110      	bne.n	800cbc4 <__mdiff+0x38>
 800cba2:	4629      	mov	r1, r5
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7ff fd09 	bl	800c5bc <_Balloc>
 800cbaa:	b930      	cbnz	r0, 800cbba <__mdiff+0x2e>
 800cbac:	4b3a      	ldr	r3, [pc, #232]	; (800cc98 <__mdiff+0x10c>)
 800cbae:	4602      	mov	r2, r0
 800cbb0:	f240 2132 	movw	r1, #562	; 0x232
 800cbb4:	4839      	ldr	r0, [pc, #228]	; (800cc9c <__mdiff+0x110>)
 800cbb6:	f001 f86b 	bl	800dc90 <__assert_func>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc4:	bfa4      	itt	ge
 800cbc6:	4643      	movge	r3, r8
 800cbc8:	46a0      	movge	r8, r4
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbd0:	bfa6      	itte	ge
 800cbd2:	461c      	movge	r4, r3
 800cbd4:	2500      	movge	r5, #0
 800cbd6:	2501      	movlt	r5, #1
 800cbd8:	f7ff fcf0 	bl	800c5bc <_Balloc>
 800cbdc:	b920      	cbnz	r0, 800cbe8 <__mdiff+0x5c>
 800cbde:	4b2e      	ldr	r3, [pc, #184]	; (800cc98 <__mdiff+0x10c>)
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbe6:	e7e5      	b.n	800cbb4 <__mdiff+0x28>
 800cbe8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cbec:	6926      	ldr	r6, [r4, #16]
 800cbee:	60c5      	str	r5, [r0, #12]
 800cbf0:	f104 0914 	add.w	r9, r4, #20
 800cbf4:	f108 0514 	add.w	r5, r8, #20
 800cbf8:	f100 0e14 	add.w	lr, r0, #20
 800cbfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc04:	f108 0210 	add.w	r2, r8, #16
 800cc08:	46f2      	mov	sl, lr
 800cc0a:	2100      	movs	r1, #0
 800cc0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc14:	fa1f f883 	uxth.w	r8, r3
 800cc18:	fa11 f18b 	uxtah	r1, r1, fp
 800cc1c:	0c1b      	lsrs	r3, r3, #16
 800cc1e:	eba1 0808 	sub.w	r8, r1, r8
 800cc22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc2a:	fa1f f888 	uxth.w	r8, r8
 800cc2e:	1419      	asrs	r1, r3, #16
 800cc30:	454e      	cmp	r6, r9
 800cc32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc36:	f84a 3b04 	str.w	r3, [sl], #4
 800cc3a:	d8e7      	bhi.n	800cc0c <__mdiff+0x80>
 800cc3c:	1b33      	subs	r3, r6, r4
 800cc3e:	3b15      	subs	r3, #21
 800cc40:	f023 0303 	bic.w	r3, r3, #3
 800cc44:	3304      	adds	r3, #4
 800cc46:	3415      	adds	r4, #21
 800cc48:	42a6      	cmp	r6, r4
 800cc4a:	bf38      	it	cc
 800cc4c:	2304      	movcc	r3, #4
 800cc4e:	441d      	add	r5, r3
 800cc50:	4473      	add	r3, lr
 800cc52:	469e      	mov	lr, r3
 800cc54:	462e      	mov	r6, r5
 800cc56:	4566      	cmp	r6, ip
 800cc58:	d30e      	bcc.n	800cc78 <__mdiff+0xec>
 800cc5a:	f10c 0203 	add.w	r2, ip, #3
 800cc5e:	1b52      	subs	r2, r2, r5
 800cc60:	f022 0203 	bic.w	r2, r2, #3
 800cc64:	3d03      	subs	r5, #3
 800cc66:	45ac      	cmp	ip, r5
 800cc68:	bf38      	it	cc
 800cc6a:	2200      	movcc	r2, #0
 800cc6c:	441a      	add	r2, r3
 800cc6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc72:	b17b      	cbz	r3, 800cc94 <__mdiff+0x108>
 800cc74:	6107      	str	r7, [r0, #16]
 800cc76:	e7a3      	b.n	800cbc0 <__mdiff+0x34>
 800cc78:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc7c:	fa11 f288 	uxtah	r2, r1, r8
 800cc80:	1414      	asrs	r4, r2, #16
 800cc82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc86:	b292      	uxth	r2, r2
 800cc88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cc8c:	f84e 2b04 	str.w	r2, [lr], #4
 800cc90:	1421      	asrs	r1, r4, #16
 800cc92:	e7e0      	b.n	800cc56 <__mdiff+0xca>
 800cc94:	3f01      	subs	r7, #1
 800cc96:	e7ea      	b.n	800cc6e <__mdiff+0xe2>
 800cc98:	0800eff8 	.word	0x0800eff8
 800cc9c:	0800f0e8 	.word	0x0800f0e8

0800cca0 <__ulp>:
 800cca0:	b082      	sub	sp, #8
 800cca2:	ed8d 0b00 	vstr	d0, [sp]
 800cca6:	9b01      	ldr	r3, [sp, #4]
 800cca8:	4912      	ldr	r1, [pc, #72]	; (800ccf4 <__ulp+0x54>)
 800ccaa:	4019      	ands	r1, r3
 800ccac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ccb0:	2900      	cmp	r1, #0
 800ccb2:	dd05      	ble.n	800ccc0 <__ulp+0x20>
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	ec43 2b10 	vmov	d0, r2, r3
 800ccbc:	b002      	add	sp, #8
 800ccbe:	4770      	bx	lr
 800ccc0:	4249      	negs	r1, r1
 800ccc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ccc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ccca:	f04f 0200 	mov.w	r2, #0
 800ccce:	f04f 0300 	mov.w	r3, #0
 800ccd2:	da04      	bge.n	800ccde <__ulp+0x3e>
 800ccd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ccd8:	fa41 f300 	asr.w	r3, r1, r0
 800ccdc:	e7ec      	b.n	800ccb8 <__ulp+0x18>
 800ccde:	f1a0 0114 	sub.w	r1, r0, #20
 800cce2:	291e      	cmp	r1, #30
 800cce4:	bfda      	itte	le
 800cce6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ccea:	fa20 f101 	lsrle.w	r1, r0, r1
 800ccee:	2101      	movgt	r1, #1
 800ccf0:	460a      	mov	r2, r1
 800ccf2:	e7e1      	b.n	800ccb8 <__ulp+0x18>
 800ccf4:	7ff00000 	.word	0x7ff00000

0800ccf8 <__b2d>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	6905      	ldr	r5, [r0, #16]
 800ccfc:	f100 0714 	add.w	r7, r0, #20
 800cd00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cd04:	1f2e      	subs	r6, r5, #4
 800cd06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	f7ff fd48 	bl	800c7a0 <__hi0bits>
 800cd10:	f1c0 0320 	rsb	r3, r0, #32
 800cd14:	280a      	cmp	r0, #10
 800cd16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cd94 <__b2d+0x9c>
 800cd1a:	600b      	str	r3, [r1, #0]
 800cd1c:	dc14      	bgt.n	800cd48 <__b2d+0x50>
 800cd1e:	f1c0 0e0b 	rsb	lr, r0, #11
 800cd22:	fa24 f10e 	lsr.w	r1, r4, lr
 800cd26:	42b7      	cmp	r7, r6
 800cd28:	ea41 030c 	orr.w	r3, r1, ip
 800cd2c:	bf34      	ite	cc
 800cd2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd32:	2100      	movcs	r1, #0
 800cd34:	3015      	adds	r0, #21
 800cd36:	fa04 f000 	lsl.w	r0, r4, r0
 800cd3a:	fa21 f10e 	lsr.w	r1, r1, lr
 800cd3e:	ea40 0201 	orr.w	r2, r0, r1
 800cd42:	ec43 2b10 	vmov	d0, r2, r3
 800cd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd48:	42b7      	cmp	r7, r6
 800cd4a:	bf3a      	itte	cc
 800cd4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cd50:	f1a5 0608 	subcc.w	r6, r5, #8
 800cd54:	2100      	movcs	r1, #0
 800cd56:	380b      	subs	r0, #11
 800cd58:	d017      	beq.n	800cd8a <__b2d+0x92>
 800cd5a:	f1c0 0c20 	rsb	ip, r0, #32
 800cd5e:	fa04 f500 	lsl.w	r5, r4, r0
 800cd62:	42be      	cmp	r6, r7
 800cd64:	fa21 f40c 	lsr.w	r4, r1, ip
 800cd68:	ea45 0504 	orr.w	r5, r5, r4
 800cd6c:	bf8c      	ite	hi
 800cd6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cd72:	2400      	movls	r4, #0
 800cd74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cd78:	fa01 f000 	lsl.w	r0, r1, r0
 800cd7c:	fa24 f40c 	lsr.w	r4, r4, ip
 800cd80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cd84:	ea40 0204 	orr.w	r2, r0, r4
 800cd88:	e7db      	b.n	800cd42 <__b2d+0x4a>
 800cd8a:	ea44 030c 	orr.w	r3, r4, ip
 800cd8e:	460a      	mov	r2, r1
 800cd90:	e7d7      	b.n	800cd42 <__b2d+0x4a>
 800cd92:	bf00      	nop
 800cd94:	3ff00000 	.word	0x3ff00000

0800cd98 <__d2b>:
 800cd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd9c:	4689      	mov	r9, r1
 800cd9e:	2101      	movs	r1, #1
 800cda0:	ec57 6b10 	vmov	r6, r7, d0
 800cda4:	4690      	mov	r8, r2
 800cda6:	f7ff fc09 	bl	800c5bc <_Balloc>
 800cdaa:	4604      	mov	r4, r0
 800cdac:	b930      	cbnz	r0, 800cdbc <__d2b+0x24>
 800cdae:	4602      	mov	r2, r0
 800cdb0:	4b25      	ldr	r3, [pc, #148]	; (800ce48 <__d2b+0xb0>)
 800cdb2:	4826      	ldr	r0, [pc, #152]	; (800ce4c <__d2b+0xb4>)
 800cdb4:	f240 310a 	movw	r1, #778	; 0x30a
 800cdb8:	f000 ff6a 	bl	800dc90 <__assert_func>
 800cdbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cdc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cdc4:	bb35      	cbnz	r5, 800ce14 <__d2b+0x7c>
 800cdc6:	2e00      	cmp	r6, #0
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	d028      	beq.n	800ce1e <__d2b+0x86>
 800cdcc:	4668      	mov	r0, sp
 800cdce:	9600      	str	r6, [sp, #0]
 800cdd0:	f7ff fd06 	bl	800c7e0 <__lo0bits>
 800cdd4:	9900      	ldr	r1, [sp, #0]
 800cdd6:	b300      	cbz	r0, 800ce1a <__d2b+0x82>
 800cdd8:	9a01      	ldr	r2, [sp, #4]
 800cdda:	f1c0 0320 	rsb	r3, r0, #32
 800cdde:	fa02 f303 	lsl.w	r3, r2, r3
 800cde2:	430b      	orrs	r3, r1
 800cde4:	40c2      	lsrs	r2, r0
 800cde6:	6163      	str	r3, [r4, #20]
 800cde8:	9201      	str	r2, [sp, #4]
 800cdea:	9b01      	ldr	r3, [sp, #4]
 800cdec:	61a3      	str	r3, [r4, #24]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	bf14      	ite	ne
 800cdf2:	2202      	movne	r2, #2
 800cdf4:	2201      	moveq	r2, #1
 800cdf6:	6122      	str	r2, [r4, #16]
 800cdf8:	b1d5      	cbz	r5, 800ce30 <__d2b+0x98>
 800cdfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cdfe:	4405      	add	r5, r0
 800ce00:	f8c9 5000 	str.w	r5, [r9]
 800ce04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce08:	f8c8 0000 	str.w	r0, [r8]
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	b003      	add	sp, #12
 800ce10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce18:	e7d5      	b.n	800cdc6 <__d2b+0x2e>
 800ce1a:	6161      	str	r1, [r4, #20]
 800ce1c:	e7e5      	b.n	800cdea <__d2b+0x52>
 800ce1e:	a801      	add	r0, sp, #4
 800ce20:	f7ff fcde 	bl	800c7e0 <__lo0bits>
 800ce24:	9b01      	ldr	r3, [sp, #4]
 800ce26:	6163      	str	r3, [r4, #20]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	6122      	str	r2, [r4, #16]
 800ce2c:	3020      	adds	r0, #32
 800ce2e:	e7e3      	b.n	800cdf8 <__d2b+0x60>
 800ce30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce38:	f8c9 0000 	str.w	r0, [r9]
 800ce3c:	6918      	ldr	r0, [r3, #16]
 800ce3e:	f7ff fcaf 	bl	800c7a0 <__hi0bits>
 800ce42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce46:	e7df      	b.n	800ce08 <__d2b+0x70>
 800ce48:	0800eff8 	.word	0x0800eff8
 800ce4c:	0800f0e8 	.word	0x0800f0e8

0800ce50 <__ratio>:
 800ce50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce54:	4688      	mov	r8, r1
 800ce56:	4669      	mov	r1, sp
 800ce58:	4681      	mov	r9, r0
 800ce5a:	f7ff ff4d 	bl	800ccf8 <__b2d>
 800ce5e:	a901      	add	r1, sp, #4
 800ce60:	4640      	mov	r0, r8
 800ce62:	ec55 4b10 	vmov	r4, r5, d0
 800ce66:	f7ff ff47 	bl	800ccf8 <__b2d>
 800ce6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ce72:	eba3 0c02 	sub.w	ip, r3, r2
 800ce76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ce7a:	1a9b      	subs	r3, r3, r2
 800ce7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ce80:	ec51 0b10 	vmov	r0, r1, d0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	bfd6      	itet	le
 800ce88:	460a      	movle	r2, r1
 800ce8a:	462a      	movgt	r2, r5
 800ce8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ce90:	468b      	mov	fp, r1
 800ce92:	462f      	mov	r7, r5
 800ce94:	bfd4      	ite	le
 800ce96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ce9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ce9e:	4620      	mov	r0, r4
 800cea0:	ee10 2a10 	vmov	r2, s0
 800cea4:	465b      	mov	r3, fp
 800cea6:	4639      	mov	r1, r7
 800cea8:	f7f3 fce8 	bl	800087c <__aeabi_ddiv>
 800ceac:	ec41 0b10 	vmov	d0, r0, r1
 800ceb0:	b003      	add	sp, #12
 800ceb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceb6 <__copybits>:
 800ceb6:	3901      	subs	r1, #1
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	1149      	asrs	r1, r1, #5
 800cebc:	6914      	ldr	r4, [r2, #16]
 800cebe:	3101      	adds	r1, #1
 800cec0:	f102 0314 	add.w	r3, r2, #20
 800cec4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cec8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cecc:	1f05      	subs	r5, r0, #4
 800cece:	42a3      	cmp	r3, r4
 800ced0:	d30c      	bcc.n	800ceec <__copybits+0x36>
 800ced2:	1aa3      	subs	r3, r4, r2
 800ced4:	3b11      	subs	r3, #17
 800ced6:	f023 0303 	bic.w	r3, r3, #3
 800ceda:	3211      	adds	r2, #17
 800cedc:	42a2      	cmp	r2, r4
 800cede:	bf88      	it	hi
 800cee0:	2300      	movhi	r3, #0
 800cee2:	4418      	add	r0, r3
 800cee4:	2300      	movs	r3, #0
 800cee6:	4288      	cmp	r0, r1
 800cee8:	d305      	bcc.n	800cef6 <__copybits+0x40>
 800ceea:	bd70      	pop	{r4, r5, r6, pc}
 800ceec:	f853 6b04 	ldr.w	r6, [r3], #4
 800cef0:	f845 6f04 	str.w	r6, [r5, #4]!
 800cef4:	e7eb      	b.n	800cece <__copybits+0x18>
 800cef6:	f840 3b04 	str.w	r3, [r0], #4
 800cefa:	e7f4      	b.n	800cee6 <__copybits+0x30>

0800cefc <__any_on>:
 800cefc:	f100 0214 	add.w	r2, r0, #20
 800cf00:	6900      	ldr	r0, [r0, #16]
 800cf02:	114b      	asrs	r3, r1, #5
 800cf04:	4298      	cmp	r0, r3
 800cf06:	b510      	push	{r4, lr}
 800cf08:	db11      	blt.n	800cf2e <__any_on+0x32>
 800cf0a:	dd0a      	ble.n	800cf22 <__any_on+0x26>
 800cf0c:	f011 011f 	ands.w	r1, r1, #31
 800cf10:	d007      	beq.n	800cf22 <__any_on+0x26>
 800cf12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cf16:	fa24 f001 	lsr.w	r0, r4, r1
 800cf1a:	fa00 f101 	lsl.w	r1, r0, r1
 800cf1e:	428c      	cmp	r4, r1
 800cf20:	d10b      	bne.n	800cf3a <__any_on+0x3e>
 800cf22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d803      	bhi.n	800cf32 <__any_on+0x36>
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	bd10      	pop	{r4, pc}
 800cf2e:	4603      	mov	r3, r0
 800cf30:	e7f7      	b.n	800cf22 <__any_on+0x26>
 800cf32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf36:	2900      	cmp	r1, #0
 800cf38:	d0f5      	beq.n	800cf26 <__any_on+0x2a>
 800cf3a:	2001      	movs	r0, #1
 800cf3c:	e7f6      	b.n	800cf2c <__any_on+0x30>

0800cf3e <_calloc_r>:
 800cf3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf40:	fba1 2402 	umull	r2, r4, r1, r2
 800cf44:	b94c      	cbnz	r4, 800cf5a <_calloc_r+0x1c>
 800cf46:	4611      	mov	r1, r2
 800cf48:	9201      	str	r2, [sp, #4]
 800cf4a:	f000 f87b 	bl	800d044 <_malloc_r>
 800cf4e:	9a01      	ldr	r2, [sp, #4]
 800cf50:	4605      	mov	r5, r0
 800cf52:	b930      	cbnz	r0, 800cf62 <_calloc_r+0x24>
 800cf54:	4628      	mov	r0, r5
 800cf56:	b003      	add	sp, #12
 800cf58:	bd30      	pop	{r4, r5, pc}
 800cf5a:	220c      	movs	r2, #12
 800cf5c:	6002      	str	r2, [r0, #0]
 800cf5e:	2500      	movs	r5, #0
 800cf60:	e7f8      	b.n	800cf54 <_calloc_r+0x16>
 800cf62:	4621      	mov	r1, r4
 800cf64:	f7fc f83e 	bl	8008fe4 <memset>
 800cf68:	e7f4      	b.n	800cf54 <_calloc_r+0x16>
	...

0800cf6c <_free_r>:
 800cf6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	d044      	beq.n	800cffc <_free_r+0x90>
 800cf72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf76:	9001      	str	r0, [sp, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f1a1 0404 	sub.w	r4, r1, #4
 800cf7e:	bfb8      	it	lt
 800cf80:	18e4      	addlt	r4, r4, r3
 800cf82:	f000 fef1 	bl	800dd68 <__malloc_lock>
 800cf86:	4a1e      	ldr	r2, [pc, #120]	; (800d000 <_free_r+0x94>)
 800cf88:	9801      	ldr	r0, [sp, #4]
 800cf8a:	6813      	ldr	r3, [r2, #0]
 800cf8c:	b933      	cbnz	r3, 800cf9c <_free_r+0x30>
 800cf8e:	6063      	str	r3, [r4, #4]
 800cf90:	6014      	str	r4, [r2, #0]
 800cf92:	b003      	add	sp, #12
 800cf94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf98:	f000 beec 	b.w	800dd74 <__malloc_unlock>
 800cf9c:	42a3      	cmp	r3, r4
 800cf9e:	d908      	bls.n	800cfb2 <_free_r+0x46>
 800cfa0:	6825      	ldr	r5, [r4, #0]
 800cfa2:	1961      	adds	r1, r4, r5
 800cfa4:	428b      	cmp	r3, r1
 800cfa6:	bf01      	itttt	eq
 800cfa8:	6819      	ldreq	r1, [r3, #0]
 800cfaa:	685b      	ldreq	r3, [r3, #4]
 800cfac:	1949      	addeq	r1, r1, r5
 800cfae:	6021      	streq	r1, [r4, #0]
 800cfb0:	e7ed      	b.n	800cf8e <_free_r+0x22>
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	b10b      	cbz	r3, 800cfbc <_free_r+0x50>
 800cfb8:	42a3      	cmp	r3, r4
 800cfba:	d9fa      	bls.n	800cfb2 <_free_r+0x46>
 800cfbc:	6811      	ldr	r1, [r2, #0]
 800cfbe:	1855      	adds	r5, r2, r1
 800cfc0:	42a5      	cmp	r5, r4
 800cfc2:	d10b      	bne.n	800cfdc <_free_r+0x70>
 800cfc4:	6824      	ldr	r4, [r4, #0]
 800cfc6:	4421      	add	r1, r4
 800cfc8:	1854      	adds	r4, r2, r1
 800cfca:	42a3      	cmp	r3, r4
 800cfcc:	6011      	str	r1, [r2, #0]
 800cfce:	d1e0      	bne.n	800cf92 <_free_r+0x26>
 800cfd0:	681c      	ldr	r4, [r3, #0]
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	6053      	str	r3, [r2, #4]
 800cfd6:	4421      	add	r1, r4
 800cfd8:	6011      	str	r1, [r2, #0]
 800cfda:	e7da      	b.n	800cf92 <_free_r+0x26>
 800cfdc:	d902      	bls.n	800cfe4 <_free_r+0x78>
 800cfde:	230c      	movs	r3, #12
 800cfe0:	6003      	str	r3, [r0, #0]
 800cfe2:	e7d6      	b.n	800cf92 <_free_r+0x26>
 800cfe4:	6825      	ldr	r5, [r4, #0]
 800cfe6:	1961      	adds	r1, r4, r5
 800cfe8:	428b      	cmp	r3, r1
 800cfea:	bf04      	itt	eq
 800cfec:	6819      	ldreq	r1, [r3, #0]
 800cfee:	685b      	ldreq	r3, [r3, #4]
 800cff0:	6063      	str	r3, [r4, #4]
 800cff2:	bf04      	itt	eq
 800cff4:	1949      	addeq	r1, r1, r5
 800cff6:	6021      	streq	r1, [r4, #0]
 800cff8:	6054      	str	r4, [r2, #4]
 800cffa:	e7ca      	b.n	800cf92 <_free_r+0x26>
 800cffc:	b003      	add	sp, #12
 800cffe:	bd30      	pop	{r4, r5, pc}
 800d000:	20001474 	.word	0x20001474

0800d004 <sbrk_aligned>:
 800d004:	b570      	push	{r4, r5, r6, lr}
 800d006:	4e0e      	ldr	r6, [pc, #56]	; (800d040 <sbrk_aligned+0x3c>)
 800d008:	460c      	mov	r4, r1
 800d00a:	6831      	ldr	r1, [r6, #0]
 800d00c:	4605      	mov	r5, r0
 800d00e:	b911      	cbnz	r1, 800d016 <sbrk_aligned+0x12>
 800d010:	f000 fd26 	bl	800da60 <_sbrk_r>
 800d014:	6030      	str	r0, [r6, #0]
 800d016:	4621      	mov	r1, r4
 800d018:	4628      	mov	r0, r5
 800d01a:	f000 fd21 	bl	800da60 <_sbrk_r>
 800d01e:	1c43      	adds	r3, r0, #1
 800d020:	d00a      	beq.n	800d038 <sbrk_aligned+0x34>
 800d022:	1cc4      	adds	r4, r0, #3
 800d024:	f024 0403 	bic.w	r4, r4, #3
 800d028:	42a0      	cmp	r0, r4
 800d02a:	d007      	beq.n	800d03c <sbrk_aligned+0x38>
 800d02c:	1a21      	subs	r1, r4, r0
 800d02e:	4628      	mov	r0, r5
 800d030:	f000 fd16 	bl	800da60 <_sbrk_r>
 800d034:	3001      	adds	r0, #1
 800d036:	d101      	bne.n	800d03c <sbrk_aligned+0x38>
 800d038:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d03c:	4620      	mov	r0, r4
 800d03e:	bd70      	pop	{r4, r5, r6, pc}
 800d040:	20001478 	.word	0x20001478

0800d044 <_malloc_r>:
 800d044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d048:	1ccd      	adds	r5, r1, #3
 800d04a:	f025 0503 	bic.w	r5, r5, #3
 800d04e:	3508      	adds	r5, #8
 800d050:	2d0c      	cmp	r5, #12
 800d052:	bf38      	it	cc
 800d054:	250c      	movcc	r5, #12
 800d056:	2d00      	cmp	r5, #0
 800d058:	4607      	mov	r7, r0
 800d05a:	db01      	blt.n	800d060 <_malloc_r+0x1c>
 800d05c:	42a9      	cmp	r1, r5
 800d05e:	d905      	bls.n	800d06c <_malloc_r+0x28>
 800d060:	230c      	movs	r3, #12
 800d062:	603b      	str	r3, [r7, #0]
 800d064:	2600      	movs	r6, #0
 800d066:	4630      	mov	r0, r6
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	4e2e      	ldr	r6, [pc, #184]	; (800d128 <_malloc_r+0xe4>)
 800d06e:	f000 fe7b 	bl	800dd68 <__malloc_lock>
 800d072:	6833      	ldr	r3, [r6, #0]
 800d074:	461c      	mov	r4, r3
 800d076:	bb34      	cbnz	r4, 800d0c6 <_malloc_r+0x82>
 800d078:	4629      	mov	r1, r5
 800d07a:	4638      	mov	r0, r7
 800d07c:	f7ff ffc2 	bl	800d004 <sbrk_aligned>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	4604      	mov	r4, r0
 800d084:	d14d      	bne.n	800d122 <_malloc_r+0xde>
 800d086:	6834      	ldr	r4, [r6, #0]
 800d088:	4626      	mov	r6, r4
 800d08a:	2e00      	cmp	r6, #0
 800d08c:	d140      	bne.n	800d110 <_malloc_r+0xcc>
 800d08e:	6823      	ldr	r3, [r4, #0]
 800d090:	4631      	mov	r1, r6
 800d092:	4638      	mov	r0, r7
 800d094:	eb04 0803 	add.w	r8, r4, r3
 800d098:	f000 fce2 	bl	800da60 <_sbrk_r>
 800d09c:	4580      	cmp	r8, r0
 800d09e:	d13a      	bne.n	800d116 <_malloc_r+0xd2>
 800d0a0:	6821      	ldr	r1, [r4, #0]
 800d0a2:	3503      	adds	r5, #3
 800d0a4:	1a6d      	subs	r5, r5, r1
 800d0a6:	f025 0503 	bic.w	r5, r5, #3
 800d0aa:	3508      	adds	r5, #8
 800d0ac:	2d0c      	cmp	r5, #12
 800d0ae:	bf38      	it	cc
 800d0b0:	250c      	movcc	r5, #12
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	4638      	mov	r0, r7
 800d0b6:	f7ff ffa5 	bl	800d004 <sbrk_aligned>
 800d0ba:	3001      	adds	r0, #1
 800d0bc:	d02b      	beq.n	800d116 <_malloc_r+0xd2>
 800d0be:	6823      	ldr	r3, [r4, #0]
 800d0c0:	442b      	add	r3, r5
 800d0c2:	6023      	str	r3, [r4, #0]
 800d0c4:	e00e      	b.n	800d0e4 <_malloc_r+0xa0>
 800d0c6:	6822      	ldr	r2, [r4, #0]
 800d0c8:	1b52      	subs	r2, r2, r5
 800d0ca:	d41e      	bmi.n	800d10a <_malloc_r+0xc6>
 800d0cc:	2a0b      	cmp	r2, #11
 800d0ce:	d916      	bls.n	800d0fe <_malloc_r+0xba>
 800d0d0:	1961      	adds	r1, r4, r5
 800d0d2:	42a3      	cmp	r3, r4
 800d0d4:	6025      	str	r5, [r4, #0]
 800d0d6:	bf18      	it	ne
 800d0d8:	6059      	strne	r1, [r3, #4]
 800d0da:	6863      	ldr	r3, [r4, #4]
 800d0dc:	bf08      	it	eq
 800d0de:	6031      	streq	r1, [r6, #0]
 800d0e0:	5162      	str	r2, [r4, r5]
 800d0e2:	604b      	str	r3, [r1, #4]
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f104 060b 	add.w	r6, r4, #11
 800d0ea:	f000 fe43 	bl	800dd74 <__malloc_unlock>
 800d0ee:	f026 0607 	bic.w	r6, r6, #7
 800d0f2:	1d23      	adds	r3, r4, #4
 800d0f4:	1af2      	subs	r2, r6, r3
 800d0f6:	d0b6      	beq.n	800d066 <_malloc_r+0x22>
 800d0f8:	1b9b      	subs	r3, r3, r6
 800d0fa:	50a3      	str	r3, [r4, r2]
 800d0fc:	e7b3      	b.n	800d066 <_malloc_r+0x22>
 800d0fe:	6862      	ldr	r2, [r4, #4]
 800d100:	42a3      	cmp	r3, r4
 800d102:	bf0c      	ite	eq
 800d104:	6032      	streq	r2, [r6, #0]
 800d106:	605a      	strne	r2, [r3, #4]
 800d108:	e7ec      	b.n	800d0e4 <_malloc_r+0xa0>
 800d10a:	4623      	mov	r3, r4
 800d10c:	6864      	ldr	r4, [r4, #4]
 800d10e:	e7b2      	b.n	800d076 <_malloc_r+0x32>
 800d110:	4634      	mov	r4, r6
 800d112:	6876      	ldr	r6, [r6, #4]
 800d114:	e7b9      	b.n	800d08a <_malloc_r+0x46>
 800d116:	230c      	movs	r3, #12
 800d118:	603b      	str	r3, [r7, #0]
 800d11a:	4638      	mov	r0, r7
 800d11c:	f000 fe2a 	bl	800dd74 <__malloc_unlock>
 800d120:	e7a1      	b.n	800d066 <_malloc_r+0x22>
 800d122:	6025      	str	r5, [r4, #0]
 800d124:	e7de      	b.n	800d0e4 <_malloc_r+0xa0>
 800d126:	bf00      	nop
 800d128:	20001474 	.word	0x20001474

0800d12c <__ssputs_r>:
 800d12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d130:	688e      	ldr	r6, [r1, #8]
 800d132:	429e      	cmp	r6, r3
 800d134:	4682      	mov	sl, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4690      	mov	r8, r2
 800d13a:	461f      	mov	r7, r3
 800d13c:	d838      	bhi.n	800d1b0 <__ssputs_r+0x84>
 800d13e:	898a      	ldrh	r2, [r1, #12]
 800d140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d144:	d032      	beq.n	800d1ac <__ssputs_r+0x80>
 800d146:	6825      	ldr	r5, [r4, #0]
 800d148:	6909      	ldr	r1, [r1, #16]
 800d14a:	eba5 0901 	sub.w	r9, r5, r1
 800d14e:	6965      	ldr	r5, [r4, #20]
 800d150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d158:	3301      	adds	r3, #1
 800d15a:	444b      	add	r3, r9
 800d15c:	106d      	asrs	r5, r5, #1
 800d15e:	429d      	cmp	r5, r3
 800d160:	bf38      	it	cc
 800d162:	461d      	movcc	r5, r3
 800d164:	0553      	lsls	r3, r2, #21
 800d166:	d531      	bpl.n	800d1cc <__ssputs_r+0xa0>
 800d168:	4629      	mov	r1, r5
 800d16a:	f7ff ff6b 	bl	800d044 <_malloc_r>
 800d16e:	4606      	mov	r6, r0
 800d170:	b950      	cbnz	r0, 800d188 <__ssputs_r+0x5c>
 800d172:	230c      	movs	r3, #12
 800d174:	f8ca 3000 	str.w	r3, [sl]
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d17e:	81a3      	strh	r3, [r4, #12]
 800d180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d188:	6921      	ldr	r1, [r4, #16]
 800d18a:	464a      	mov	r2, r9
 800d18c:	f7fb ff1c 	bl	8008fc8 <memcpy>
 800d190:	89a3      	ldrh	r3, [r4, #12]
 800d192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d19a:	81a3      	strh	r3, [r4, #12]
 800d19c:	6126      	str	r6, [r4, #16]
 800d19e:	6165      	str	r5, [r4, #20]
 800d1a0:	444e      	add	r6, r9
 800d1a2:	eba5 0509 	sub.w	r5, r5, r9
 800d1a6:	6026      	str	r6, [r4, #0]
 800d1a8:	60a5      	str	r5, [r4, #8]
 800d1aa:	463e      	mov	r6, r7
 800d1ac:	42be      	cmp	r6, r7
 800d1ae:	d900      	bls.n	800d1b2 <__ssputs_r+0x86>
 800d1b0:	463e      	mov	r6, r7
 800d1b2:	6820      	ldr	r0, [r4, #0]
 800d1b4:	4632      	mov	r2, r6
 800d1b6:	4641      	mov	r1, r8
 800d1b8:	f000 fdbc 	bl	800dd34 <memmove>
 800d1bc:	68a3      	ldr	r3, [r4, #8]
 800d1be:	1b9b      	subs	r3, r3, r6
 800d1c0:	60a3      	str	r3, [r4, #8]
 800d1c2:	6823      	ldr	r3, [r4, #0]
 800d1c4:	4433      	add	r3, r6
 800d1c6:	6023      	str	r3, [r4, #0]
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	e7db      	b.n	800d184 <__ssputs_r+0x58>
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	f000 fdd7 	bl	800dd80 <_realloc_r>
 800d1d2:	4606      	mov	r6, r0
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	d1e1      	bne.n	800d19c <__ssputs_r+0x70>
 800d1d8:	6921      	ldr	r1, [r4, #16]
 800d1da:	4650      	mov	r0, sl
 800d1dc:	f7ff fec6 	bl	800cf6c <_free_r>
 800d1e0:	e7c7      	b.n	800d172 <__ssputs_r+0x46>
	...

0800d1e4 <_svfiprintf_r>:
 800d1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1e8:	4698      	mov	r8, r3
 800d1ea:	898b      	ldrh	r3, [r1, #12]
 800d1ec:	061b      	lsls	r3, r3, #24
 800d1ee:	b09d      	sub	sp, #116	; 0x74
 800d1f0:	4607      	mov	r7, r0
 800d1f2:	460d      	mov	r5, r1
 800d1f4:	4614      	mov	r4, r2
 800d1f6:	d50e      	bpl.n	800d216 <_svfiprintf_r+0x32>
 800d1f8:	690b      	ldr	r3, [r1, #16]
 800d1fa:	b963      	cbnz	r3, 800d216 <_svfiprintf_r+0x32>
 800d1fc:	2140      	movs	r1, #64	; 0x40
 800d1fe:	f7ff ff21 	bl	800d044 <_malloc_r>
 800d202:	6028      	str	r0, [r5, #0]
 800d204:	6128      	str	r0, [r5, #16]
 800d206:	b920      	cbnz	r0, 800d212 <_svfiprintf_r+0x2e>
 800d208:	230c      	movs	r3, #12
 800d20a:	603b      	str	r3, [r7, #0]
 800d20c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d210:	e0d1      	b.n	800d3b6 <_svfiprintf_r+0x1d2>
 800d212:	2340      	movs	r3, #64	; 0x40
 800d214:	616b      	str	r3, [r5, #20]
 800d216:	2300      	movs	r3, #0
 800d218:	9309      	str	r3, [sp, #36]	; 0x24
 800d21a:	2320      	movs	r3, #32
 800d21c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d220:	f8cd 800c 	str.w	r8, [sp, #12]
 800d224:	2330      	movs	r3, #48	; 0x30
 800d226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d3d0 <_svfiprintf_r+0x1ec>
 800d22a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d22e:	f04f 0901 	mov.w	r9, #1
 800d232:	4623      	mov	r3, r4
 800d234:	469a      	mov	sl, r3
 800d236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d23a:	b10a      	cbz	r2, 800d240 <_svfiprintf_r+0x5c>
 800d23c:	2a25      	cmp	r2, #37	; 0x25
 800d23e:	d1f9      	bne.n	800d234 <_svfiprintf_r+0x50>
 800d240:	ebba 0b04 	subs.w	fp, sl, r4
 800d244:	d00b      	beq.n	800d25e <_svfiprintf_r+0x7a>
 800d246:	465b      	mov	r3, fp
 800d248:	4622      	mov	r2, r4
 800d24a:	4629      	mov	r1, r5
 800d24c:	4638      	mov	r0, r7
 800d24e:	f7ff ff6d 	bl	800d12c <__ssputs_r>
 800d252:	3001      	adds	r0, #1
 800d254:	f000 80aa 	beq.w	800d3ac <_svfiprintf_r+0x1c8>
 800d258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d25a:	445a      	add	r2, fp
 800d25c:	9209      	str	r2, [sp, #36]	; 0x24
 800d25e:	f89a 3000 	ldrb.w	r3, [sl]
 800d262:	2b00      	cmp	r3, #0
 800d264:	f000 80a2 	beq.w	800d3ac <_svfiprintf_r+0x1c8>
 800d268:	2300      	movs	r3, #0
 800d26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d26e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d272:	f10a 0a01 	add.w	sl, sl, #1
 800d276:	9304      	str	r3, [sp, #16]
 800d278:	9307      	str	r3, [sp, #28]
 800d27a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d27e:	931a      	str	r3, [sp, #104]	; 0x68
 800d280:	4654      	mov	r4, sl
 800d282:	2205      	movs	r2, #5
 800d284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d288:	4851      	ldr	r0, [pc, #324]	; (800d3d0 <_svfiprintf_r+0x1ec>)
 800d28a:	f7f2 ffc1 	bl	8000210 <memchr>
 800d28e:	9a04      	ldr	r2, [sp, #16]
 800d290:	b9d8      	cbnz	r0, 800d2ca <_svfiprintf_r+0xe6>
 800d292:	06d0      	lsls	r0, r2, #27
 800d294:	bf44      	itt	mi
 800d296:	2320      	movmi	r3, #32
 800d298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d29c:	0711      	lsls	r1, r2, #28
 800d29e:	bf44      	itt	mi
 800d2a0:	232b      	movmi	r3, #43	; 0x2b
 800d2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ac:	d015      	beq.n	800d2da <_svfiprintf_r+0xf6>
 800d2ae:	9a07      	ldr	r2, [sp, #28]
 800d2b0:	4654      	mov	r4, sl
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	f04f 0c0a 	mov.w	ip, #10
 800d2b8:	4621      	mov	r1, r4
 800d2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2be:	3b30      	subs	r3, #48	; 0x30
 800d2c0:	2b09      	cmp	r3, #9
 800d2c2:	d94e      	bls.n	800d362 <_svfiprintf_r+0x17e>
 800d2c4:	b1b0      	cbz	r0, 800d2f4 <_svfiprintf_r+0x110>
 800d2c6:	9207      	str	r2, [sp, #28]
 800d2c8:	e014      	b.n	800d2f4 <_svfiprintf_r+0x110>
 800d2ca:	eba0 0308 	sub.w	r3, r0, r8
 800d2ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	46a2      	mov	sl, r4
 800d2d8:	e7d2      	b.n	800d280 <_svfiprintf_r+0x9c>
 800d2da:	9b03      	ldr	r3, [sp, #12]
 800d2dc:	1d19      	adds	r1, r3, #4
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	9103      	str	r1, [sp, #12]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	bfbb      	ittet	lt
 800d2e6:	425b      	neglt	r3, r3
 800d2e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ec:	9307      	strge	r3, [sp, #28]
 800d2ee:	9307      	strlt	r3, [sp, #28]
 800d2f0:	bfb8      	it	lt
 800d2f2:	9204      	strlt	r2, [sp, #16]
 800d2f4:	7823      	ldrb	r3, [r4, #0]
 800d2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2f8:	d10c      	bne.n	800d314 <_svfiprintf_r+0x130>
 800d2fa:	7863      	ldrb	r3, [r4, #1]
 800d2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d2fe:	d135      	bne.n	800d36c <_svfiprintf_r+0x188>
 800d300:	9b03      	ldr	r3, [sp, #12]
 800d302:	1d1a      	adds	r2, r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	9203      	str	r2, [sp, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bfb8      	it	lt
 800d30c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d310:	3402      	adds	r4, #2
 800d312:	9305      	str	r3, [sp, #20]
 800d314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3e0 <_svfiprintf_r+0x1fc>
 800d318:	7821      	ldrb	r1, [r4, #0]
 800d31a:	2203      	movs	r2, #3
 800d31c:	4650      	mov	r0, sl
 800d31e:	f7f2 ff77 	bl	8000210 <memchr>
 800d322:	b140      	cbz	r0, 800d336 <_svfiprintf_r+0x152>
 800d324:	2340      	movs	r3, #64	; 0x40
 800d326:	eba0 000a 	sub.w	r0, r0, sl
 800d32a:	fa03 f000 	lsl.w	r0, r3, r0
 800d32e:	9b04      	ldr	r3, [sp, #16]
 800d330:	4303      	orrs	r3, r0
 800d332:	3401      	adds	r4, #1
 800d334:	9304      	str	r3, [sp, #16]
 800d336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33a:	4826      	ldr	r0, [pc, #152]	; (800d3d4 <_svfiprintf_r+0x1f0>)
 800d33c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d340:	2206      	movs	r2, #6
 800d342:	f7f2 ff65 	bl	8000210 <memchr>
 800d346:	2800      	cmp	r0, #0
 800d348:	d038      	beq.n	800d3bc <_svfiprintf_r+0x1d8>
 800d34a:	4b23      	ldr	r3, [pc, #140]	; (800d3d8 <_svfiprintf_r+0x1f4>)
 800d34c:	bb1b      	cbnz	r3, 800d396 <_svfiprintf_r+0x1b2>
 800d34e:	9b03      	ldr	r3, [sp, #12]
 800d350:	3307      	adds	r3, #7
 800d352:	f023 0307 	bic.w	r3, r3, #7
 800d356:	3308      	adds	r3, #8
 800d358:	9303      	str	r3, [sp, #12]
 800d35a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d35c:	4433      	add	r3, r6
 800d35e:	9309      	str	r3, [sp, #36]	; 0x24
 800d360:	e767      	b.n	800d232 <_svfiprintf_r+0x4e>
 800d362:	fb0c 3202 	mla	r2, ip, r2, r3
 800d366:	460c      	mov	r4, r1
 800d368:	2001      	movs	r0, #1
 800d36a:	e7a5      	b.n	800d2b8 <_svfiprintf_r+0xd4>
 800d36c:	2300      	movs	r3, #0
 800d36e:	3401      	adds	r4, #1
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	4619      	mov	r1, r3
 800d374:	f04f 0c0a 	mov.w	ip, #10
 800d378:	4620      	mov	r0, r4
 800d37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d37e:	3a30      	subs	r2, #48	; 0x30
 800d380:	2a09      	cmp	r2, #9
 800d382:	d903      	bls.n	800d38c <_svfiprintf_r+0x1a8>
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0c5      	beq.n	800d314 <_svfiprintf_r+0x130>
 800d388:	9105      	str	r1, [sp, #20]
 800d38a:	e7c3      	b.n	800d314 <_svfiprintf_r+0x130>
 800d38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d390:	4604      	mov	r4, r0
 800d392:	2301      	movs	r3, #1
 800d394:	e7f0      	b.n	800d378 <_svfiprintf_r+0x194>
 800d396:	ab03      	add	r3, sp, #12
 800d398:	9300      	str	r3, [sp, #0]
 800d39a:	462a      	mov	r2, r5
 800d39c:	4b0f      	ldr	r3, [pc, #60]	; (800d3dc <_svfiprintf_r+0x1f8>)
 800d39e:	a904      	add	r1, sp, #16
 800d3a0:	4638      	mov	r0, r7
 800d3a2:	f7fb fec7 	bl	8009134 <_printf_float>
 800d3a6:	1c42      	adds	r2, r0, #1
 800d3a8:	4606      	mov	r6, r0
 800d3aa:	d1d6      	bne.n	800d35a <_svfiprintf_r+0x176>
 800d3ac:	89ab      	ldrh	r3, [r5, #12]
 800d3ae:	065b      	lsls	r3, r3, #25
 800d3b0:	f53f af2c 	bmi.w	800d20c <_svfiprintf_r+0x28>
 800d3b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3b6:	b01d      	add	sp, #116	; 0x74
 800d3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3bc:	ab03      	add	r3, sp, #12
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	462a      	mov	r2, r5
 800d3c2:	4b06      	ldr	r3, [pc, #24]	; (800d3dc <_svfiprintf_r+0x1f8>)
 800d3c4:	a904      	add	r1, sp, #16
 800d3c6:	4638      	mov	r0, r7
 800d3c8:	f7fc f958 	bl	800967c <_printf_i>
 800d3cc:	e7eb      	b.n	800d3a6 <_svfiprintf_r+0x1c2>
 800d3ce:	bf00      	nop
 800d3d0:	0800f244 	.word	0x0800f244
 800d3d4:	0800f24e 	.word	0x0800f24e
 800d3d8:	08009135 	.word	0x08009135
 800d3dc:	0800d12d 	.word	0x0800d12d
 800d3e0:	0800f24a 	.word	0x0800f24a

0800d3e4 <_sungetc_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	1c4b      	adds	r3, r1, #1
 800d3e8:	4614      	mov	r4, r2
 800d3ea:	d103      	bne.n	800d3f4 <_sungetc_r+0x10>
 800d3ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	bd38      	pop	{r3, r4, r5, pc}
 800d3f4:	8993      	ldrh	r3, [r2, #12]
 800d3f6:	f023 0320 	bic.w	r3, r3, #32
 800d3fa:	8193      	strh	r3, [r2, #12]
 800d3fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3fe:	6852      	ldr	r2, [r2, #4]
 800d400:	b2cd      	uxtb	r5, r1
 800d402:	b18b      	cbz	r3, 800d428 <_sungetc_r+0x44>
 800d404:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d406:	4293      	cmp	r3, r2
 800d408:	dd08      	ble.n	800d41c <_sungetc_r+0x38>
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	1e5a      	subs	r2, r3, #1
 800d40e:	6022      	str	r2, [r4, #0]
 800d410:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d414:	6863      	ldr	r3, [r4, #4]
 800d416:	3301      	adds	r3, #1
 800d418:	6063      	str	r3, [r4, #4]
 800d41a:	e7e9      	b.n	800d3f0 <_sungetc_r+0xc>
 800d41c:	4621      	mov	r1, r4
 800d41e:	f000 fbef 	bl	800dc00 <__submore>
 800d422:	2800      	cmp	r0, #0
 800d424:	d0f1      	beq.n	800d40a <_sungetc_r+0x26>
 800d426:	e7e1      	b.n	800d3ec <_sungetc_r+0x8>
 800d428:	6921      	ldr	r1, [r4, #16]
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	b151      	cbz	r1, 800d444 <_sungetc_r+0x60>
 800d42e:	4299      	cmp	r1, r3
 800d430:	d208      	bcs.n	800d444 <_sungetc_r+0x60>
 800d432:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d436:	42a9      	cmp	r1, r5
 800d438:	d104      	bne.n	800d444 <_sungetc_r+0x60>
 800d43a:	3b01      	subs	r3, #1
 800d43c:	3201      	adds	r2, #1
 800d43e:	6023      	str	r3, [r4, #0]
 800d440:	6062      	str	r2, [r4, #4]
 800d442:	e7d5      	b.n	800d3f0 <_sungetc_r+0xc>
 800d444:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d448:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d44c:	6363      	str	r3, [r4, #52]	; 0x34
 800d44e:	2303      	movs	r3, #3
 800d450:	63a3      	str	r3, [r4, #56]	; 0x38
 800d452:	4623      	mov	r3, r4
 800d454:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	2301      	movs	r3, #1
 800d45c:	e7dc      	b.n	800d418 <_sungetc_r+0x34>

0800d45e <__ssrefill_r>:
 800d45e:	b510      	push	{r4, lr}
 800d460:	460c      	mov	r4, r1
 800d462:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d464:	b169      	cbz	r1, 800d482 <__ssrefill_r+0x24>
 800d466:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d46a:	4299      	cmp	r1, r3
 800d46c:	d001      	beq.n	800d472 <__ssrefill_r+0x14>
 800d46e:	f7ff fd7d 	bl	800cf6c <_free_r>
 800d472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d474:	6063      	str	r3, [r4, #4]
 800d476:	2000      	movs	r0, #0
 800d478:	6360      	str	r0, [r4, #52]	; 0x34
 800d47a:	b113      	cbz	r3, 800d482 <__ssrefill_r+0x24>
 800d47c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d47e:	6023      	str	r3, [r4, #0]
 800d480:	bd10      	pop	{r4, pc}
 800d482:	6923      	ldr	r3, [r4, #16]
 800d484:	6023      	str	r3, [r4, #0]
 800d486:	2300      	movs	r3, #0
 800d488:	6063      	str	r3, [r4, #4]
 800d48a:	89a3      	ldrh	r3, [r4, #12]
 800d48c:	f043 0320 	orr.w	r3, r3, #32
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d496:	e7f3      	b.n	800d480 <__ssrefill_r+0x22>

0800d498 <__ssvfiscanf_r>:
 800d498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d49c:	460c      	mov	r4, r1
 800d49e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d4a8:	49a6      	ldr	r1, [pc, #664]	; (800d744 <__ssvfiscanf_r+0x2ac>)
 800d4aa:	91a0      	str	r1, [sp, #640]	; 0x280
 800d4ac:	f10d 0804 	add.w	r8, sp, #4
 800d4b0:	49a5      	ldr	r1, [pc, #660]	; (800d748 <__ssvfiscanf_r+0x2b0>)
 800d4b2:	4fa6      	ldr	r7, [pc, #664]	; (800d74c <__ssvfiscanf_r+0x2b4>)
 800d4b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d750 <__ssvfiscanf_r+0x2b8>
 800d4b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d4bc:	4606      	mov	r6, r0
 800d4be:	91a1      	str	r1, [sp, #644]	; 0x284
 800d4c0:	9300      	str	r3, [sp, #0]
 800d4c2:	7813      	ldrb	r3, [r2, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	f000 815a 	beq.w	800d77e <__ssvfiscanf_r+0x2e6>
 800d4ca:	5dd9      	ldrb	r1, [r3, r7]
 800d4cc:	f011 0108 	ands.w	r1, r1, #8
 800d4d0:	f102 0501 	add.w	r5, r2, #1
 800d4d4:	d019      	beq.n	800d50a <__ssvfiscanf_r+0x72>
 800d4d6:	6863      	ldr	r3, [r4, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	dd0f      	ble.n	800d4fc <__ssvfiscanf_r+0x64>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	781a      	ldrb	r2, [r3, #0]
 800d4e0:	5cba      	ldrb	r2, [r7, r2]
 800d4e2:	0712      	lsls	r2, r2, #28
 800d4e4:	d401      	bmi.n	800d4ea <__ssvfiscanf_r+0x52>
 800d4e6:	462a      	mov	r2, r5
 800d4e8:	e7eb      	b.n	800d4c2 <__ssvfiscanf_r+0x2a>
 800d4ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d4ec:	3201      	adds	r2, #1
 800d4ee:	9245      	str	r2, [sp, #276]	; 0x114
 800d4f0:	6862      	ldr	r2, [r4, #4]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	3a01      	subs	r2, #1
 800d4f6:	6062      	str	r2, [r4, #4]
 800d4f8:	6023      	str	r3, [r4, #0]
 800d4fa:	e7ec      	b.n	800d4d6 <__ssvfiscanf_r+0x3e>
 800d4fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d4fe:	4621      	mov	r1, r4
 800d500:	4630      	mov	r0, r6
 800d502:	4798      	blx	r3
 800d504:	2800      	cmp	r0, #0
 800d506:	d0e9      	beq.n	800d4dc <__ssvfiscanf_r+0x44>
 800d508:	e7ed      	b.n	800d4e6 <__ssvfiscanf_r+0x4e>
 800d50a:	2b25      	cmp	r3, #37	; 0x25
 800d50c:	d012      	beq.n	800d534 <__ssvfiscanf_r+0x9c>
 800d50e:	469a      	mov	sl, r3
 800d510:	6863      	ldr	r3, [r4, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	f340 8091 	ble.w	800d63a <__ssvfiscanf_r+0x1a2>
 800d518:	6822      	ldr	r2, [r4, #0]
 800d51a:	7813      	ldrb	r3, [r2, #0]
 800d51c:	4553      	cmp	r3, sl
 800d51e:	f040 812e 	bne.w	800d77e <__ssvfiscanf_r+0x2e6>
 800d522:	6863      	ldr	r3, [r4, #4]
 800d524:	3b01      	subs	r3, #1
 800d526:	6063      	str	r3, [r4, #4]
 800d528:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d52a:	3201      	adds	r2, #1
 800d52c:	3301      	adds	r3, #1
 800d52e:	6022      	str	r2, [r4, #0]
 800d530:	9345      	str	r3, [sp, #276]	; 0x114
 800d532:	e7d8      	b.n	800d4e6 <__ssvfiscanf_r+0x4e>
 800d534:	9141      	str	r1, [sp, #260]	; 0x104
 800d536:	9143      	str	r1, [sp, #268]	; 0x10c
 800d538:	7853      	ldrb	r3, [r2, #1]
 800d53a:	2b2a      	cmp	r3, #42	; 0x2a
 800d53c:	bf02      	ittt	eq
 800d53e:	2310      	moveq	r3, #16
 800d540:	1c95      	addeq	r5, r2, #2
 800d542:	9341      	streq	r3, [sp, #260]	; 0x104
 800d544:	220a      	movs	r2, #10
 800d546:	46aa      	mov	sl, r5
 800d548:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d54c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d550:	2b09      	cmp	r3, #9
 800d552:	d91d      	bls.n	800d590 <__ssvfiscanf_r+0xf8>
 800d554:	487e      	ldr	r0, [pc, #504]	; (800d750 <__ssvfiscanf_r+0x2b8>)
 800d556:	2203      	movs	r2, #3
 800d558:	f7f2 fe5a 	bl	8000210 <memchr>
 800d55c:	b140      	cbz	r0, 800d570 <__ssvfiscanf_r+0xd8>
 800d55e:	2301      	movs	r3, #1
 800d560:	eba0 0009 	sub.w	r0, r0, r9
 800d564:	fa03 f000 	lsl.w	r0, r3, r0
 800d568:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d56a:	4318      	orrs	r0, r3
 800d56c:	9041      	str	r0, [sp, #260]	; 0x104
 800d56e:	4655      	mov	r5, sl
 800d570:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d574:	2b78      	cmp	r3, #120	; 0x78
 800d576:	d806      	bhi.n	800d586 <__ssvfiscanf_r+0xee>
 800d578:	2b57      	cmp	r3, #87	; 0x57
 800d57a:	d810      	bhi.n	800d59e <__ssvfiscanf_r+0x106>
 800d57c:	2b25      	cmp	r3, #37	; 0x25
 800d57e:	d0c6      	beq.n	800d50e <__ssvfiscanf_r+0x76>
 800d580:	d856      	bhi.n	800d630 <__ssvfiscanf_r+0x198>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d064      	beq.n	800d650 <__ssvfiscanf_r+0x1b8>
 800d586:	2303      	movs	r3, #3
 800d588:	9347      	str	r3, [sp, #284]	; 0x11c
 800d58a:	230a      	movs	r3, #10
 800d58c:	9342      	str	r3, [sp, #264]	; 0x108
 800d58e:	e071      	b.n	800d674 <__ssvfiscanf_r+0x1dc>
 800d590:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d592:	fb02 1103 	mla	r1, r2, r3, r1
 800d596:	3930      	subs	r1, #48	; 0x30
 800d598:	9143      	str	r1, [sp, #268]	; 0x10c
 800d59a:	4655      	mov	r5, sl
 800d59c:	e7d3      	b.n	800d546 <__ssvfiscanf_r+0xae>
 800d59e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d5a2:	2a20      	cmp	r2, #32
 800d5a4:	d8ef      	bhi.n	800d586 <__ssvfiscanf_r+0xee>
 800d5a6:	a101      	add	r1, pc, #4	; (adr r1, 800d5ac <__ssvfiscanf_r+0x114>)
 800d5a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5ac:	0800d65f 	.word	0x0800d65f
 800d5b0:	0800d587 	.word	0x0800d587
 800d5b4:	0800d587 	.word	0x0800d587
 800d5b8:	0800d6bd 	.word	0x0800d6bd
 800d5bc:	0800d587 	.word	0x0800d587
 800d5c0:	0800d587 	.word	0x0800d587
 800d5c4:	0800d587 	.word	0x0800d587
 800d5c8:	0800d587 	.word	0x0800d587
 800d5cc:	0800d587 	.word	0x0800d587
 800d5d0:	0800d587 	.word	0x0800d587
 800d5d4:	0800d587 	.word	0x0800d587
 800d5d8:	0800d6d3 	.word	0x0800d6d3
 800d5dc:	0800d6a9 	.word	0x0800d6a9
 800d5e0:	0800d637 	.word	0x0800d637
 800d5e4:	0800d637 	.word	0x0800d637
 800d5e8:	0800d637 	.word	0x0800d637
 800d5ec:	0800d587 	.word	0x0800d587
 800d5f0:	0800d6ad 	.word	0x0800d6ad
 800d5f4:	0800d587 	.word	0x0800d587
 800d5f8:	0800d587 	.word	0x0800d587
 800d5fc:	0800d587 	.word	0x0800d587
 800d600:	0800d587 	.word	0x0800d587
 800d604:	0800d6e3 	.word	0x0800d6e3
 800d608:	0800d6b5 	.word	0x0800d6b5
 800d60c:	0800d657 	.word	0x0800d657
 800d610:	0800d587 	.word	0x0800d587
 800d614:	0800d587 	.word	0x0800d587
 800d618:	0800d6df 	.word	0x0800d6df
 800d61c:	0800d587 	.word	0x0800d587
 800d620:	0800d6a9 	.word	0x0800d6a9
 800d624:	0800d587 	.word	0x0800d587
 800d628:	0800d587 	.word	0x0800d587
 800d62c:	0800d65f 	.word	0x0800d65f
 800d630:	3b45      	subs	r3, #69	; 0x45
 800d632:	2b02      	cmp	r3, #2
 800d634:	d8a7      	bhi.n	800d586 <__ssvfiscanf_r+0xee>
 800d636:	2305      	movs	r3, #5
 800d638:	e01b      	b.n	800d672 <__ssvfiscanf_r+0x1da>
 800d63a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d63c:	4621      	mov	r1, r4
 800d63e:	4630      	mov	r0, r6
 800d640:	4798      	blx	r3
 800d642:	2800      	cmp	r0, #0
 800d644:	f43f af68 	beq.w	800d518 <__ssvfiscanf_r+0x80>
 800d648:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d64a:	2800      	cmp	r0, #0
 800d64c:	f040 808d 	bne.w	800d76a <__ssvfiscanf_r+0x2d2>
 800d650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d654:	e08f      	b.n	800d776 <__ssvfiscanf_r+0x2de>
 800d656:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d658:	f042 0220 	orr.w	r2, r2, #32
 800d65c:	9241      	str	r2, [sp, #260]	; 0x104
 800d65e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d660:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d664:	9241      	str	r2, [sp, #260]	; 0x104
 800d666:	2210      	movs	r2, #16
 800d668:	2b6f      	cmp	r3, #111	; 0x6f
 800d66a:	9242      	str	r2, [sp, #264]	; 0x108
 800d66c:	bf34      	ite	cc
 800d66e:	2303      	movcc	r3, #3
 800d670:	2304      	movcs	r3, #4
 800d672:	9347      	str	r3, [sp, #284]	; 0x11c
 800d674:	6863      	ldr	r3, [r4, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	dd42      	ble.n	800d700 <__ssvfiscanf_r+0x268>
 800d67a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d67c:	0659      	lsls	r1, r3, #25
 800d67e:	d404      	bmi.n	800d68a <__ssvfiscanf_r+0x1f2>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	781a      	ldrb	r2, [r3, #0]
 800d684:	5cba      	ldrb	r2, [r7, r2]
 800d686:	0712      	lsls	r2, r2, #28
 800d688:	d441      	bmi.n	800d70e <__ssvfiscanf_r+0x276>
 800d68a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	dc50      	bgt.n	800d732 <__ssvfiscanf_r+0x29a>
 800d690:	466b      	mov	r3, sp
 800d692:	4622      	mov	r2, r4
 800d694:	a941      	add	r1, sp, #260	; 0x104
 800d696:	4630      	mov	r0, r6
 800d698:	f000 f876 	bl	800d788 <_scanf_chars>
 800d69c:	2801      	cmp	r0, #1
 800d69e:	d06e      	beq.n	800d77e <__ssvfiscanf_r+0x2e6>
 800d6a0:	2802      	cmp	r0, #2
 800d6a2:	f47f af20 	bne.w	800d4e6 <__ssvfiscanf_r+0x4e>
 800d6a6:	e7cf      	b.n	800d648 <__ssvfiscanf_r+0x1b0>
 800d6a8:	220a      	movs	r2, #10
 800d6aa:	e7dd      	b.n	800d668 <__ssvfiscanf_r+0x1d0>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	9342      	str	r3, [sp, #264]	; 0x108
 800d6b0:	2303      	movs	r3, #3
 800d6b2:	e7de      	b.n	800d672 <__ssvfiscanf_r+0x1da>
 800d6b4:	2308      	movs	r3, #8
 800d6b6:	9342      	str	r3, [sp, #264]	; 0x108
 800d6b8:	2304      	movs	r3, #4
 800d6ba:	e7da      	b.n	800d672 <__ssvfiscanf_r+0x1da>
 800d6bc:	4629      	mov	r1, r5
 800d6be:	4640      	mov	r0, r8
 800d6c0:	f000 f9de 	bl	800da80 <__sccl>
 800d6c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ca:	9341      	str	r3, [sp, #260]	; 0x104
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e7cf      	b.n	800d672 <__ssvfiscanf_r+0x1da>
 800d6d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6d8:	9341      	str	r3, [sp, #260]	; 0x104
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e7c9      	b.n	800d672 <__ssvfiscanf_r+0x1da>
 800d6de:	2302      	movs	r3, #2
 800d6e0:	e7c7      	b.n	800d672 <__ssvfiscanf_r+0x1da>
 800d6e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d6e4:	06c3      	lsls	r3, r0, #27
 800d6e6:	f53f aefe 	bmi.w	800d4e6 <__ssvfiscanf_r+0x4e>
 800d6ea:	9b00      	ldr	r3, [sp, #0]
 800d6ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d6ee:	1d19      	adds	r1, r3, #4
 800d6f0:	9100      	str	r1, [sp, #0]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f010 0f01 	tst.w	r0, #1
 800d6f8:	bf14      	ite	ne
 800d6fa:	801a      	strhne	r2, [r3, #0]
 800d6fc:	601a      	streq	r2, [r3, #0]
 800d6fe:	e6f2      	b.n	800d4e6 <__ssvfiscanf_r+0x4e>
 800d700:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d702:	4621      	mov	r1, r4
 800d704:	4630      	mov	r0, r6
 800d706:	4798      	blx	r3
 800d708:	2800      	cmp	r0, #0
 800d70a:	d0b6      	beq.n	800d67a <__ssvfiscanf_r+0x1e2>
 800d70c:	e79c      	b.n	800d648 <__ssvfiscanf_r+0x1b0>
 800d70e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d710:	3201      	adds	r2, #1
 800d712:	9245      	str	r2, [sp, #276]	; 0x114
 800d714:	6862      	ldr	r2, [r4, #4]
 800d716:	3a01      	subs	r2, #1
 800d718:	2a00      	cmp	r2, #0
 800d71a:	6062      	str	r2, [r4, #4]
 800d71c:	dd02      	ble.n	800d724 <__ssvfiscanf_r+0x28c>
 800d71e:	3301      	adds	r3, #1
 800d720:	6023      	str	r3, [r4, #0]
 800d722:	e7ad      	b.n	800d680 <__ssvfiscanf_r+0x1e8>
 800d724:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d726:	4621      	mov	r1, r4
 800d728:	4630      	mov	r0, r6
 800d72a:	4798      	blx	r3
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d0a7      	beq.n	800d680 <__ssvfiscanf_r+0x1e8>
 800d730:	e78a      	b.n	800d648 <__ssvfiscanf_r+0x1b0>
 800d732:	2b04      	cmp	r3, #4
 800d734:	dc0e      	bgt.n	800d754 <__ssvfiscanf_r+0x2bc>
 800d736:	466b      	mov	r3, sp
 800d738:	4622      	mov	r2, r4
 800d73a:	a941      	add	r1, sp, #260	; 0x104
 800d73c:	4630      	mov	r0, r6
 800d73e:	f000 f87d 	bl	800d83c <_scanf_i>
 800d742:	e7ab      	b.n	800d69c <__ssvfiscanf_r+0x204>
 800d744:	0800d3e5 	.word	0x0800d3e5
 800d748:	0800d45f 	.word	0x0800d45f
 800d74c:	0800ee79 	.word	0x0800ee79
 800d750:	0800f24a 	.word	0x0800f24a
 800d754:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <__ssvfiscanf_r+0x2ec>)
 800d756:	2b00      	cmp	r3, #0
 800d758:	f43f aec5 	beq.w	800d4e6 <__ssvfiscanf_r+0x4e>
 800d75c:	466b      	mov	r3, sp
 800d75e:	4622      	mov	r2, r4
 800d760:	a941      	add	r1, sp, #260	; 0x104
 800d762:	4630      	mov	r0, r6
 800d764:	f7fc f8b0 	bl	80098c8 <_scanf_float>
 800d768:	e798      	b.n	800d69c <__ssvfiscanf_r+0x204>
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d770:	bf18      	it	ne
 800d772:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800d776:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d77e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d780:	e7f9      	b.n	800d776 <__ssvfiscanf_r+0x2de>
 800d782:	bf00      	nop
 800d784:	080098c9 	.word	0x080098c9

0800d788 <_scanf_chars>:
 800d788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d78c:	4615      	mov	r5, r2
 800d78e:	688a      	ldr	r2, [r1, #8]
 800d790:	4680      	mov	r8, r0
 800d792:	460c      	mov	r4, r1
 800d794:	b932      	cbnz	r2, 800d7a4 <_scanf_chars+0x1c>
 800d796:	698a      	ldr	r2, [r1, #24]
 800d798:	2a00      	cmp	r2, #0
 800d79a:	bf0c      	ite	eq
 800d79c:	2201      	moveq	r2, #1
 800d79e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800d7a2:	608a      	str	r2, [r1, #8]
 800d7a4:	6822      	ldr	r2, [r4, #0]
 800d7a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d838 <_scanf_chars+0xb0>
 800d7aa:	06d1      	lsls	r1, r2, #27
 800d7ac:	bf5f      	itttt	pl
 800d7ae:	681a      	ldrpl	r2, [r3, #0]
 800d7b0:	1d11      	addpl	r1, r2, #4
 800d7b2:	6019      	strpl	r1, [r3, #0]
 800d7b4:	6816      	ldrpl	r6, [r2, #0]
 800d7b6:	2700      	movs	r7, #0
 800d7b8:	69a0      	ldr	r0, [r4, #24]
 800d7ba:	b188      	cbz	r0, 800d7e0 <_scanf_chars+0x58>
 800d7bc:	2801      	cmp	r0, #1
 800d7be:	d107      	bne.n	800d7d0 <_scanf_chars+0x48>
 800d7c0:	682a      	ldr	r2, [r5, #0]
 800d7c2:	7811      	ldrb	r1, [r2, #0]
 800d7c4:	6962      	ldr	r2, [r4, #20]
 800d7c6:	5c52      	ldrb	r2, [r2, r1]
 800d7c8:	b952      	cbnz	r2, 800d7e0 <_scanf_chars+0x58>
 800d7ca:	2f00      	cmp	r7, #0
 800d7cc:	d031      	beq.n	800d832 <_scanf_chars+0xaa>
 800d7ce:	e022      	b.n	800d816 <_scanf_chars+0x8e>
 800d7d0:	2802      	cmp	r0, #2
 800d7d2:	d120      	bne.n	800d816 <_scanf_chars+0x8e>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d7dc:	071b      	lsls	r3, r3, #28
 800d7de:	d41a      	bmi.n	800d816 <_scanf_chars+0x8e>
 800d7e0:	6823      	ldr	r3, [r4, #0]
 800d7e2:	06da      	lsls	r2, r3, #27
 800d7e4:	bf5e      	ittt	pl
 800d7e6:	682b      	ldrpl	r3, [r5, #0]
 800d7e8:	781b      	ldrbpl	r3, [r3, #0]
 800d7ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d7ee:	682a      	ldr	r2, [r5, #0]
 800d7f0:	686b      	ldr	r3, [r5, #4]
 800d7f2:	3201      	adds	r2, #1
 800d7f4:	602a      	str	r2, [r5, #0]
 800d7f6:	68a2      	ldr	r2, [r4, #8]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	3a01      	subs	r2, #1
 800d7fc:	606b      	str	r3, [r5, #4]
 800d7fe:	3701      	adds	r7, #1
 800d800:	60a2      	str	r2, [r4, #8]
 800d802:	b142      	cbz	r2, 800d816 <_scanf_chars+0x8e>
 800d804:	2b00      	cmp	r3, #0
 800d806:	dcd7      	bgt.n	800d7b8 <_scanf_chars+0x30>
 800d808:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d80c:	4629      	mov	r1, r5
 800d80e:	4640      	mov	r0, r8
 800d810:	4798      	blx	r3
 800d812:	2800      	cmp	r0, #0
 800d814:	d0d0      	beq.n	800d7b8 <_scanf_chars+0x30>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	f013 0310 	ands.w	r3, r3, #16
 800d81c:	d105      	bne.n	800d82a <_scanf_chars+0xa2>
 800d81e:	68e2      	ldr	r2, [r4, #12]
 800d820:	3201      	adds	r2, #1
 800d822:	60e2      	str	r2, [r4, #12]
 800d824:	69a2      	ldr	r2, [r4, #24]
 800d826:	b102      	cbz	r2, 800d82a <_scanf_chars+0xa2>
 800d828:	7033      	strb	r3, [r6, #0]
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	443b      	add	r3, r7
 800d82e:	6123      	str	r3, [r4, #16]
 800d830:	2000      	movs	r0, #0
 800d832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d836:	bf00      	nop
 800d838:	0800ee79 	.word	0x0800ee79

0800d83c <_scanf_i>:
 800d83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d840:	4698      	mov	r8, r3
 800d842:	4b76      	ldr	r3, [pc, #472]	; (800da1c <_scanf_i+0x1e0>)
 800d844:	460c      	mov	r4, r1
 800d846:	4682      	mov	sl, r0
 800d848:	4616      	mov	r6, r2
 800d84a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d84e:	b087      	sub	sp, #28
 800d850:	ab03      	add	r3, sp, #12
 800d852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d856:	4b72      	ldr	r3, [pc, #456]	; (800da20 <_scanf_i+0x1e4>)
 800d858:	69a1      	ldr	r1, [r4, #24]
 800d85a:	4a72      	ldr	r2, [pc, #456]	; (800da24 <_scanf_i+0x1e8>)
 800d85c:	2903      	cmp	r1, #3
 800d85e:	bf18      	it	ne
 800d860:	461a      	movne	r2, r3
 800d862:	68a3      	ldr	r3, [r4, #8]
 800d864:	9201      	str	r2, [sp, #4]
 800d866:	1e5a      	subs	r2, r3, #1
 800d868:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d86c:	bf88      	it	hi
 800d86e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d872:	4627      	mov	r7, r4
 800d874:	bf82      	ittt	hi
 800d876:	eb03 0905 	addhi.w	r9, r3, r5
 800d87a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d87e:	60a3      	strhi	r3, [r4, #8]
 800d880:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d884:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d888:	bf98      	it	ls
 800d88a:	f04f 0900 	movls.w	r9, #0
 800d88e:	6023      	str	r3, [r4, #0]
 800d890:	463d      	mov	r5, r7
 800d892:	f04f 0b00 	mov.w	fp, #0
 800d896:	6831      	ldr	r1, [r6, #0]
 800d898:	ab03      	add	r3, sp, #12
 800d89a:	7809      	ldrb	r1, [r1, #0]
 800d89c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d8a0:	2202      	movs	r2, #2
 800d8a2:	f7f2 fcb5 	bl	8000210 <memchr>
 800d8a6:	b328      	cbz	r0, 800d8f4 <_scanf_i+0xb8>
 800d8a8:	f1bb 0f01 	cmp.w	fp, #1
 800d8ac:	d159      	bne.n	800d962 <_scanf_i+0x126>
 800d8ae:	6862      	ldr	r2, [r4, #4]
 800d8b0:	b92a      	cbnz	r2, 800d8be <_scanf_i+0x82>
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	2308      	movs	r3, #8
 800d8b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8ba:	6063      	str	r3, [r4, #4]
 800d8bc:	6022      	str	r2, [r4, #0]
 800d8be:	6822      	ldr	r2, [r4, #0]
 800d8c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d8c4:	6022      	str	r2, [r4, #0]
 800d8c6:	68a2      	ldr	r2, [r4, #8]
 800d8c8:	1e51      	subs	r1, r2, #1
 800d8ca:	60a1      	str	r1, [r4, #8]
 800d8cc:	b192      	cbz	r2, 800d8f4 <_scanf_i+0xb8>
 800d8ce:	6832      	ldr	r2, [r6, #0]
 800d8d0:	1c51      	adds	r1, r2, #1
 800d8d2:	6031      	str	r1, [r6, #0]
 800d8d4:	7812      	ldrb	r2, [r2, #0]
 800d8d6:	f805 2b01 	strb.w	r2, [r5], #1
 800d8da:	6872      	ldr	r2, [r6, #4]
 800d8dc:	3a01      	subs	r2, #1
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	6072      	str	r2, [r6, #4]
 800d8e2:	dc07      	bgt.n	800d8f4 <_scanf_i+0xb8>
 800d8e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d8e8:	4631      	mov	r1, r6
 800d8ea:	4650      	mov	r0, sl
 800d8ec:	4790      	blx	r2
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f040 8085 	bne.w	800d9fe <_scanf_i+0x1c2>
 800d8f4:	f10b 0b01 	add.w	fp, fp, #1
 800d8f8:	f1bb 0f03 	cmp.w	fp, #3
 800d8fc:	d1cb      	bne.n	800d896 <_scanf_i+0x5a>
 800d8fe:	6863      	ldr	r3, [r4, #4]
 800d900:	b90b      	cbnz	r3, 800d906 <_scanf_i+0xca>
 800d902:	230a      	movs	r3, #10
 800d904:	6063      	str	r3, [r4, #4]
 800d906:	6863      	ldr	r3, [r4, #4]
 800d908:	4947      	ldr	r1, [pc, #284]	; (800da28 <_scanf_i+0x1ec>)
 800d90a:	6960      	ldr	r0, [r4, #20]
 800d90c:	1ac9      	subs	r1, r1, r3
 800d90e:	f000 f8b7 	bl	800da80 <__sccl>
 800d912:	f04f 0b00 	mov.w	fp, #0
 800d916:	68a3      	ldr	r3, [r4, #8]
 800d918:	6822      	ldr	r2, [r4, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d03d      	beq.n	800d99a <_scanf_i+0x15e>
 800d91e:	6831      	ldr	r1, [r6, #0]
 800d920:	6960      	ldr	r0, [r4, #20]
 800d922:	f891 c000 	ldrb.w	ip, [r1]
 800d926:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d035      	beq.n	800d99a <_scanf_i+0x15e>
 800d92e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d932:	d124      	bne.n	800d97e <_scanf_i+0x142>
 800d934:	0510      	lsls	r0, r2, #20
 800d936:	d522      	bpl.n	800d97e <_scanf_i+0x142>
 800d938:	f10b 0b01 	add.w	fp, fp, #1
 800d93c:	f1b9 0f00 	cmp.w	r9, #0
 800d940:	d003      	beq.n	800d94a <_scanf_i+0x10e>
 800d942:	3301      	adds	r3, #1
 800d944:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d948:	60a3      	str	r3, [r4, #8]
 800d94a:	6873      	ldr	r3, [r6, #4]
 800d94c:	3b01      	subs	r3, #1
 800d94e:	2b00      	cmp	r3, #0
 800d950:	6073      	str	r3, [r6, #4]
 800d952:	dd1b      	ble.n	800d98c <_scanf_i+0x150>
 800d954:	6833      	ldr	r3, [r6, #0]
 800d956:	3301      	adds	r3, #1
 800d958:	6033      	str	r3, [r6, #0]
 800d95a:	68a3      	ldr	r3, [r4, #8]
 800d95c:	3b01      	subs	r3, #1
 800d95e:	60a3      	str	r3, [r4, #8]
 800d960:	e7d9      	b.n	800d916 <_scanf_i+0xda>
 800d962:	f1bb 0f02 	cmp.w	fp, #2
 800d966:	d1ae      	bne.n	800d8c6 <_scanf_i+0x8a>
 800d968:	6822      	ldr	r2, [r4, #0]
 800d96a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d96e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d972:	d1bf      	bne.n	800d8f4 <_scanf_i+0xb8>
 800d974:	2310      	movs	r3, #16
 800d976:	6063      	str	r3, [r4, #4]
 800d978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d97c:	e7a2      	b.n	800d8c4 <_scanf_i+0x88>
 800d97e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d982:	6022      	str	r2, [r4, #0]
 800d984:	780b      	ldrb	r3, [r1, #0]
 800d986:	f805 3b01 	strb.w	r3, [r5], #1
 800d98a:	e7de      	b.n	800d94a <_scanf_i+0x10e>
 800d98c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d990:	4631      	mov	r1, r6
 800d992:	4650      	mov	r0, sl
 800d994:	4798      	blx	r3
 800d996:	2800      	cmp	r0, #0
 800d998:	d0df      	beq.n	800d95a <_scanf_i+0x11e>
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	05db      	lsls	r3, r3, #23
 800d99e:	d50d      	bpl.n	800d9bc <_scanf_i+0x180>
 800d9a0:	42bd      	cmp	r5, r7
 800d9a2:	d909      	bls.n	800d9b8 <_scanf_i+0x17c>
 800d9a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d9a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9ac:	4632      	mov	r2, r6
 800d9ae:	4650      	mov	r0, sl
 800d9b0:	4798      	blx	r3
 800d9b2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800d9b6:	464d      	mov	r5, r9
 800d9b8:	42bd      	cmp	r5, r7
 800d9ba:	d02d      	beq.n	800da18 <_scanf_i+0x1dc>
 800d9bc:	6822      	ldr	r2, [r4, #0]
 800d9be:	f012 0210 	ands.w	r2, r2, #16
 800d9c2:	d113      	bne.n	800d9ec <_scanf_i+0x1b0>
 800d9c4:	702a      	strb	r2, [r5, #0]
 800d9c6:	6863      	ldr	r3, [r4, #4]
 800d9c8:	9e01      	ldr	r6, [sp, #4]
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	4650      	mov	r0, sl
 800d9ce:	47b0      	blx	r6
 800d9d0:	6821      	ldr	r1, [r4, #0]
 800d9d2:	f8d8 3000 	ldr.w	r3, [r8]
 800d9d6:	f011 0f20 	tst.w	r1, #32
 800d9da:	d013      	beq.n	800da04 <_scanf_i+0x1c8>
 800d9dc:	1d1a      	adds	r2, r3, #4
 800d9de:	f8c8 2000 	str.w	r2, [r8]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	6018      	str	r0, [r3, #0]
 800d9e6:	68e3      	ldr	r3, [r4, #12]
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	60e3      	str	r3, [r4, #12]
 800d9ec:	1bed      	subs	r5, r5, r7
 800d9ee:	44ab      	add	fp, r5
 800d9f0:	6925      	ldr	r5, [r4, #16]
 800d9f2:	445d      	add	r5, fp
 800d9f4:	6125      	str	r5, [r4, #16]
 800d9f6:	2000      	movs	r0, #0
 800d9f8:	b007      	add	sp, #28
 800d9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fe:	f04f 0b00 	mov.w	fp, #0
 800da02:	e7ca      	b.n	800d99a <_scanf_i+0x15e>
 800da04:	1d1a      	adds	r2, r3, #4
 800da06:	f8c8 2000 	str.w	r2, [r8]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f011 0f01 	tst.w	r1, #1
 800da10:	bf14      	ite	ne
 800da12:	8018      	strhne	r0, [r3, #0]
 800da14:	6018      	streq	r0, [r3, #0]
 800da16:	e7e6      	b.n	800d9e6 <_scanf_i+0x1aa>
 800da18:	2001      	movs	r0, #1
 800da1a:	e7ed      	b.n	800d9f8 <_scanf_i+0x1bc>
 800da1c:	0800e568 	.word	0x0800e568
 800da20:	0800dbfd 	.word	0x0800dbfd
 800da24:	0800acfd 	.word	0x0800acfd
 800da28:	0800f26e 	.word	0x0800f26e

0800da2c <_read_r>:
 800da2c:	b538      	push	{r3, r4, r5, lr}
 800da2e:	4d07      	ldr	r5, [pc, #28]	; (800da4c <_read_r+0x20>)
 800da30:	4604      	mov	r4, r0
 800da32:	4608      	mov	r0, r1
 800da34:	4611      	mov	r1, r2
 800da36:	2200      	movs	r2, #0
 800da38:	602a      	str	r2, [r5, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	f7fb f974 	bl	8008d28 <_read>
 800da40:	1c43      	adds	r3, r0, #1
 800da42:	d102      	bne.n	800da4a <_read_r+0x1e>
 800da44:	682b      	ldr	r3, [r5, #0]
 800da46:	b103      	cbz	r3, 800da4a <_read_r+0x1e>
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	bd38      	pop	{r3, r4, r5, pc}
 800da4c:	2000147c 	.word	0x2000147c

0800da50 <nan>:
 800da50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800da58 <nan+0x8>
 800da54:	4770      	bx	lr
 800da56:	bf00      	nop
 800da58:	00000000 	.word	0x00000000
 800da5c:	7ff80000 	.word	0x7ff80000

0800da60 <_sbrk_r>:
 800da60:	b538      	push	{r3, r4, r5, lr}
 800da62:	4d06      	ldr	r5, [pc, #24]	; (800da7c <_sbrk_r+0x1c>)
 800da64:	2300      	movs	r3, #0
 800da66:	4604      	mov	r4, r0
 800da68:	4608      	mov	r0, r1
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	f7fb f9ca 	bl	8008e04 <_sbrk>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d102      	bne.n	800da7a <_sbrk_r+0x1a>
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	b103      	cbz	r3, 800da7a <_sbrk_r+0x1a>
 800da78:	6023      	str	r3, [r4, #0]
 800da7a:	bd38      	pop	{r3, r4, r5, pc}
 800da7c:	2000147c 	.word	0x2000147c

0800da80 <__sccl>:
 800da80:	b570      	push	{r4, r5, r6, lr}
 800da82:	780b      	ldrb	r3, [r1, #0]
 800da84:	4604      	mov	r4, r0
 800da86:	2b5e      	cmp	r3, #94	; 0x5e
 800da88:	bf0b      	itete	eq
 800da8a:	784b      	ldrbeq	r3, [r1, #1]
 800da8c:	1c48      	addne	r0, r1, #1
 800da8e:	1c88      	addeq	r0, r1, #2
 800da90:	2200      	movne	r2, #0
 800da92:	bf08      	it	eq
 800da94:	2201      	moveq	r2, #1
 800da96:	1e61      	subs	r1, r4, #1
 800da98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800da9c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800daa0:	42a9      	cmp	r1, r5
 800daa2:	d1fb      	bne.n	800da9c <__sccl+0x1c>
 800daa4:	b90b      	cbnz	r3, 800daaa <__sccl+0x2a>
 800daa6:	3801      	subs	r0, #1
 800daa8:	bd70      	pop	{r4, r5, r6, pc}
 800daaa:	f082 0201 	eor.w	r2, r2, #1
 800daae:	54e2      	strb	r2, [r4, r3]
 800dab0:	4605      	mov	r5, r0
 800dab2:	4628      	mov	r0, r5
 800dab4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800dab8:	292d      	cmp	r1, #45	; 0x2d
 800daba:	d006      	beq.n	800daca <__sccl+0x4a>
 800dabc:	295d      	cmp	r1, #93	; 0x5d
 800dabe:	d0f3      	beq.n	800daa8 <__sccl+0x28>
 800dac0:	b909      	cbnz	r1, 800dac6 <__sccl+0x46>
 800dac2:	4628      	mov	r0, r5
 800dac4:	e7f0      	b.n	800daa8 <__sccl+0x28>
 800dac6:	460b      	mov	r3, r1
 800dac8:	e7f1      	b.n	800daae <__sccl+0x2e>
 800daca:	786e      	ldrb	r6, [r5, #1]
 800dacc:	2e5d      	cmp	r6, #93	; 0x5d
 800dace:	d0fa      	beq.n	800dac6 <__sccl+0x46>
 800dad0:	42b3      	cmp	r3, r6
 800dad2:	dcf8      	bgt.n	800dac6 <__sccl+0x46>
 800dad4:	3502      	adds	r5, #2
 800dad6:	4619      	mov	r1, r3
 800dad8:	3101      	adds	r1, #1
 800dada:	428e      	cmp	r6, r1
 800dadc:	5462      	strb	r2, [r4, r1]
 800dade:	dcfb      	bgt.n	800dad8 <__sccl+0x58>
 800dae0:	1af1      	subs	r1, r6, r3
 800dae2:	3901      	subs	r1, #1
 800dae4:	1c58      	adds	r0, r3, #1
 800dae6:	42b3      	cmp	r3, r6
 800dae8:	bfa8      	it	ge
 800daea:	2100      	movge	r1, #0
 800daec:	1843      	adds	r3, r0, r1
 800daee:	e7e0      	b.n	800dab2 <__sccl+0x32>

0800daf0 <strncmp>:
 800daf0:	b510      	push	{r4, lr}
 800daf2:	b17a      	cbz	r2, 800db14 <strncmp+0x24>
 800daf4:	4603      	mov	r3, r0
 800daf6:	3901      	subs	r1, #1
 800daf8:	1884      	adds	r4, r0, r2
 800dafa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dafe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800db02:	4290      	cmp	r0, r2
 800db04:	d101      	bne.n	800db0a <strncmp+0x1a>
 800db06:	42a3      	cmp	r3, r4
 800db08:	d101      	bne.n	800db0e <strncmp+0x1e>
 800db0a:	1a80      	subs	r0, r0, r2
 800db0c:	bd10      	pop	{r4, pc}
 800db0e:	2800      	cmp	r0, #0
 800db10:	d1f3      	bne.n	800dafa <strncmp+0xa>
 800db12:	e7fa      	b.n	800db0a <strncmp+0x1a>
 800db14:	4610      	mov	r0, r2
 800db16:	e7f9      	b.n	800db0c <strncmp+0x1c>

0800db18 <_strtoul_l.constprop.0>:
 800db18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db1c:	4f36      	ldr	r7, [pc, #216]	; (800dbf8 <_strtoul_l.constprop.0+0xe0>)
 800db1e:	4686      	mov	lr, r0
 800db20:	460d      	mov	r5, r1
 800db22:	4628      	mov	r0, r5
 800db24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db28:	5de6      	ldrb	r6, [r4, r7]
 800db2a:	f016 0608 	ands.w	r6, r6, #8
 800db2e:	d1f8      	bne.n	800db22 <_strtoul_l.constprop.0+0xa>
 800db30:	2c2d      	cmp	r4, #45	; 0x2d
 800db32:	d12f      	bne.n	800db94 <_strtoul_l.constprop.0+0x7c>
 800db34:	782c      	ldrb	r4, [r5, #0]
 800db36:	2601      	movs	r6, #1
 800db38:	1c85      	adds	r5, r0, #2
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d057      	beq.n	800dbee <_strtoul_l.constprop.0+0xd6>
 800db3e:	2b10      	cmp	r3, #16
 800db40:	d109      	bne.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800db42:	2c30      	cmp	r4, #48	; 0x30
 800db44:	d107      	bne.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800db46:	7828      	ldrb	r0, [r5, #0]
 800db48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800db4c:	2858      	cmp	r0, #88	; 0x58
 800db4e:	d149      	bne.n	800dbe4 <_strtoul_l.constprop.0+0xcc>
 800db50:	786c      	ldrb	r4, [r5, #1]
 800db52:	2310      	movs	r3, #16
 800db54:	3502      	adds	r5, #2
 800db56:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800db5a:	2700      	movs	r7, #0
 800db5c:	fbb8 f8f3 	udiv	r8, r8, r3
 800db60:	fb03 f908 	mul.w	r9, r3, r8
 800db64:	ea6f 0909 	mvn.w	r9, r9
 800db68:	4638      	mov	r0, r7
 800db6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800db6e:	f1bc 0f09 	cmp.w	ip, #9
 800db72:	d814      	bhi.n	800db9e <_strtoul_l.constprop.0+0x86>
 800db74:	4664      	mov	r4, ip
 800db76:	42a3      	cmp	r3, r4
 800db78:	dd22      	ble.n	800dbc0 <_strtoul_l.constprop.0+0xa8>
 800db7a:	2f00      	cmp	r7, #0
 800db7c:	db1d      	blt.n	800dbba <_strtoul_l.constprop.0+0xa2>
 800db7e:	4580      	cmp	r8, r0
 800db80:	d31b      	bcc.n	800dbba <_strtoul_l.constprop.0+0xa2>
 800db82:	d101      	bne.n	800db88 <_strtoul_l.constprop.0+0x70>
 800db84:	45a1      	cmp	r9, r4
 800db86:	db18      	blt.n	800dbba <_strtoul_l.constprop.0+0xa2>
 800db88:	fb00 4003 	mla	r0, r0, r3, r4
 800db8c:	2701      	movs	r7, #1
 800db8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db92:	e7ea      	b.n	800db6a <_strtoul_l.constprop.0+0x52>
 800db94:	2c2b      	cmp	r4, #43	; 0x2b
 800db96:	bf04      	itt	eq
 800db98:	782c      	ldrbeq	r4, [r5, #0]
 800db9a:	1c85      	addeq	r5, r0, #2
 800db9c:	e7cd      	b.n	800db3a <_strtoul_l.constprop.0+0x22>
 800db9e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dba2:	f1bc 0f19 	cmp.w	ip, #25
 800dba6:	d801      	bhi.n	800dbac <_strtoul_l.constprop.0+0x94>
 800dba8:	3c37      	subs	r4, #55	; 0x37
 800dbaa:	e7e4      	b.n	800db76 <_strtoul_l.constprop.0+0x5e>
 800dbac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dbb0:	f1bc 0f19 	cmp.w	ip, #25
 800dbb4:	d804      	bhi.n	800dbc0 <_strtoul_l.constprop.0+0xa8>
 800dbb6:	3c57      	subs	r4, #87	; 0x57
 800dbb8:	e7dd      	b.n	800db76 <_strtoul_l.constprop.0+0x5e>
 800dbba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dbbe:	e7e6      	b.n	800db8e <_strtoul_l.constprop.0+0x76>
 800dbc0:	2f00      	cmp	r7, #0
 800dbc2:	da07      	bge.n	800dbd4 <_strtoul_l.constprop.0+0xbc>
 800dbc4:	2322      	movs	r3, #34	; 0x22
 800dbc6:	f8ce 3000 	str.w	r3, [lr]
 800dbca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dbce:	b932      	cbnz	r2, 800dbde <_strtoul_l.constprop.0+0xc6>
 800dbd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbd4:	b106      	cbz	r6, 800dbd8 <_strtoul_l.constprop.0+0xc0>
 800dbd6:	4240      	negs	r0, r0
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	d0f9      	beq.n	800dbd0 <_strtoul_l.constprop.0+0xb8>
 800dbdc:	b107      	cbz	r7, 800dbe0 <_strtoul_l.constprop.0+0xc8>
 800dbde:	1e69      	subs	r1, r5, #1
 800dbe0:	6011      	str	r1, [r2, #0]
 800dbe2:	e7f5      	b.n	800dbd0 <_strtoul_l.constprop.0+0xb8>
 800dbe4:	2430      	movs	r4, #48	; 0x30
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d1b5      	bne.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800dbea:	2308      	movs	r3, #8
 800dbec:	e7b3      	b.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800dbee:	2c30      	cmp	r4, #48	; 0x30
 800dbf0:	d0a9      	beq.n	800db46 <_strtoul_l.constprop.0+0x2e>
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e7af      	b.n	800db56 <_strtoul_l.constprop.0+0x3e>
 800dbf6:	bf00      	nop
 800dbf8:	0800ee79 	.word	0x0800ee79

0800dbfc <_strtoul_r>:
 800dbfc:	f7ff bf8c 	b.w	800db18 <_strtoul_l.constprop.0>

0800dc00 <__submore>:
 800dc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc04:	460c      	mov	r4, r1
 800dc06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dc08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc0c:	4299      	cmp	r1, r3
 800dc0e:	d11d      	bne.n	800dc4c <__submore+0x4c>
 800dc10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc14:	f7ff fa16 	bl	800d044 <_malloc_r>
 800dc18:	b918      	cbnz	r0, 800dc22 <__submore+0x22>
 800dc1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc26:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc2c:	6360      	str	r0, [r4, #52]	; 0x34
 800dc2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dc32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dc3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dc42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dc46:	6020      	str	r0, [r4, #0]
 800dc48:	2000      	movs	r0, #0
 800dc4a:	e7e8      	b.n	800dc1e <__submore+0x1e>
 800dc4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dc4e:	0077      	lsls	r7, r6, #1
 800dc50:	463a      	mov	r2, r7
 800dc52:	f000 f895 	bl	800dd80 <_realloc_r>
 800dc56:	4605      	mov	r5, r0
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d0de      	beq.n	800dc1a <__submore+0x1a>
 800dc5c:	eb00 0806 	add.w	r8, r0, r6
 800dc60:	4601      	mov	r1, r0
 800dc62:	4632      	mov	r2, r6
 800dc64:	4640      	mov	r0, r8
 800dc66:	f7fb f9af 	bl	8008fc8 <memcpy>
 800dc6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dc6e:	f8c4 8000 	str.w	r8, [r4]
 800dc72:	e7e9      	b.n	800dc48 <__submore+0x48>

0800dc74 <__ascii_wctomb>:
 800dc74:	b149      	cbz	r1, 800dc8a <__ascii_wctomb+0x16>
 800dc76:	2aff      	cmp	r2, #255	; 0xff
 800dc78:	bf85      	ittet	hi
 800dc7a:	238a      	movhi	r3, #138	; 0x8a
 800dc7c:	6003      	strhi	r3, [r0, #0]
 800dc7e:	700a      	strbls	r2, [r1, #0]
 800dc80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dc84:	bf98      	it	ls
 800dc86:	2001      	movls	r0, #1
 800dc88:	4770      	bx	lr
 800dc8a:	4608      	mov	r0, r1
 800dc8c:	4770      	bx	lr
	...

0800dc90 <__assert_func>:
 800dc90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc92:	4614      	mov	r4, r2
 800dc94:	461a      	mov	r2, r3
 800dc96:	4b09      	ldr	r3, [pc, #36]	; (800dcbc <__assert_func+0x2c>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	68d8      	ldr	r0, [r3, #12]
 800dc9e:	b14c      	cbz	r4, 800dcb4 <__assert_func+0x24>
 800dca0:	4b07      	ldr	r3, [pc, #28]	; (800dcc0 <__assert_func+0x30>)
 800dca2:	9100      	str	r1, [sp, #0]
 800dca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dca8:	4906      	ldr	r1, [pc, #24]	; (800dcc4 <__assert_func+0x34>)
 800dcaa:	462b      	mov	r3, r5
 800dcac:	f000 f80e 	bl	800dccc <fiprintf>
 800dcb0:	f000 faae 	bl	800e210 <abort>
 800dcb4:	4b04      	ldr	r3, [pc, #16]	; (800dcc8 <__assert_func+0x38>)
 800dcb6:	461c      	mov	r4, r3
 800dcb8:	e7f3      	b.n	800dca2 <__assert_func+0x12>
 800dcba:	bf00      	nop
 800dcbc:	2000001c 	.word	0x2000001c
 800dcc0:	0800f270 	.word	0x0800f270
 800dcc4:	0800f27d 	.word	0x0800f27d
 800dcc8:	0800f2ab 	.word	0x0800f2ab

0800dccc <fiprintf>:
 800dccc:	b40e      	push	{r1, r2, r3}
 800dcce:	b503      	push	{r0, r1, lr}
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	ab03      	add	r3, sp, #12
 800dcd4:	4805      	ldr	r0, [pc, #20]	; (800dcec <fiprintf+0x20>)
 800dcd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcda:	6800      	ldr	r0, [r0, #0]
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	f000 f8a7 	bl	800de30 <_vfiprintf_r>
 800dce2:	b002      	add	sp, #8
 800dce4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dce8:	b003      	add	sp, #12
 800dcea:	4770      	bx	lr
 800dcec:	2000001c 	.word	0x2000001c

0800dcf0 <_fstat_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	4d07      	ldr	r5, [pc, #28]	; (800dd10 <_fstat_r+0x20>)
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	4608      	mov	r0, r1
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	602b      	str	r3, [r5, #0]
 800dcfe:	f7fb f858 	bl	8008db2 <_fstat>
 800dd02:	1c43      	adds	r3, r0, #1
 800dd04:	d102      	bne.n	800dd0c <_fstat_r+0x1c>
 800dd06:	682b      	ldr	r3, [r5, #0]
 800dd08:	b103      	cbz	r3, 800dd0c <_fstat_r+0x1c>
 800dd0a:	6023      	str	r3, [r4, #0]
 800dd0c:	bd38      	pop	{r3, r4, r5, pc}
 800dd0e:	bf00      	nop
 800dd10:	2000147c 	.word	0x2000147c

0800dd14 <_isatty_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d06      	ldr	r5, [pc, #24]	; (800dd30 <_isatty_r+0x1c>)
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	602b      	str	r3, [r5, #0]
 800dd20:	f7fb f857 	bl	8008dd2 <_isatty>
 800dd24:	1c43      	adds	r3, r0, #1
 800dd26:	d102      	bne.n	800dd2e <_isatty_r+0x1a>
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	b103      	cbz	r3, 800dd2e <_isatty_r+0x1a>
 800dd2c:	6023      	str	r3, [r4, #0]
 800dd2e:	bd38      	pop	{r3, r4, r5, pc}
 800dd30:	2000147c 	.word	0x2000147c

0800dd34 <memmove>:
 800dd34:	4288      	cmp	r0, r1
 800dd36:	b510      	push	{r4, lr}
 800dd38:	eb01 0402 	add.w	r4, r1, r2
 800dd3c:	d902      	bls.n	800dd44 <memmove+0x10>
 800dd3e:	4284      	cmp	r4, r0
 800dd40:	4623      	mov	r3, r4
 800dd42:	d807      	bhi.n	800dd54 <memmove+0x20>
 800dd44:	1e43      	subs	r3, r0, #1
 800dd46:	42a1      	cmp	r1, r4
 800dd48:	d008      	beq.n	800dd5c <memmove+0x28>
 800dd4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd52:	e7f8      	b.n	800dd46 <memmove+0x12>
 800dd54:	4402      	add	r2, r0
 800dd56:	4601      	mov	r1, r0
 800dd58:	428a      	cmp	r2, r1
 800dd5a:	d100      	bne.n	800dd5e <memmove+0x2a>
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd66:	e7f7      	b.n	800dd58 <memmove+0x24>

0800dd68 <__malloc_lock>:
 800dd68:	4801      	ldr	r0, [pc, #4]	; (800dd70 <__malloc_lock+0x8>)
 800dd6a:	f7fe bb92 	b.w	800c492 <__retarget_lock_acquire_recursive>
 800dd6e:	bf00      	nop
 800dd70:	20001470 	.word	0x20001470

0800dd74 <__malloc_unlock>:
 800dd74:	4801      	ldr	r0, [pc, #4]	; (800dd7c <__malloc_unlock+0x8>)
 800dd76:	f7fe bb8d 	b.w	800c494 <__retarget_lock_release_recursive>
 800dd7a:	bf00      	nop
 800dd7c:	20001470 	.word	0x20001470

0800dd80 <_realloc_r>:
 800dd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd84:	4680      	mov	r8, r0
 800dd86:	4614      	mov	r4, r2
 800dd88:	460e      	mov	r6, r1
 800dd8a:	b921      	cbnz	r1, 800dd96 <_realloc_r+0x16>
 800dd8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd90:	4611      	mov	r1, r2
 800dd92:	f7ff b957 	b.w	800d044 <_malloc_r>
 800dd96:	b92a      	cbnz	r2, 800dda4 <_realloc_r+0x24>
 800dd98:	f7ff f8e8 	bl	800cf6c <_free_r>
 800dd9c:	4625      	mov	r5, r4
 800dd9e:	4628      	mov	r0, r5
 800dda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dda4:	f000 fa3b 	bl	800e21e <_malloc_usable_size_r>
 800dda8:	4284      	cmp	r4, r0
 800ddaa:	4607      	mov	r7, r0
 800ddac:	d802      	bhi.n	800ddb4 <_realloc_r+0x34>
 800ddae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ddb2:	d812      	bhi.n	800ddda <_realloc_r+0x5a>
 800ddb4:	4621      	mov	r1, r4
 800ddb6:	4640      	mov	r0, r8
 800ddb8:	f7ff f944 	bl	800d044 <_malloc_r>
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	2800      	cmp	r0, #0
 800ddc0:	d0ed      	beq.n	800dd9e <_realloc_r+0x1e>
 800ddc2:	42bc      	cmp	r4, r7
 800ddc4:	4622      	mov	r2, r4
 800ddc6:	4631      	mov	r1, r6
 800ddc8:	bf28      	it	cs
 800ddca:	463a      	movcs	r2, r7
 800ddcc:	f7fb f8fc 	bl	8008fc8 <memcpy>
 800ddd0:	4631      	mov	r1, r6
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	f7ff f8ca 	bl	800cf6c <_free_r>
 800ddd8:	e7e1      	b.n	800dd9e <_realloc_r+0x1e>
 800ddda:	4635      	mov	r5, r6
 800dddc:	e7df      	b.n	800dd9e <_realloc_r+0x1e>

0800ddde <__sfputc_r>:
 800ddde:	6893      	ldr	r3, [r2, #8]
 800dde0:	3b01      	subs	r3, #1
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	b410      	push	{r4}
 800dde6:	6093      	str	r3, [r2, #8]
 800dde8:	da08      	bge.n	800ddfc <__sfputc_r+0x1e>
 800ddea:	6994      	ldr	r4, [r2, #24]
 800ddec:	42a3      	cmp	r3, r4
 800ddee:	db01      	blt.n	800ddf4 <__sfputc_r+0x16>
 800ddf0:	290a      	cmp	r1, #10
 800ddf2:	d103      	bne.n	800ddfc <__sfputc_r+0x1e>
 800ddf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddf8:	f000 b94a 	b.w	800e090 <__swbuf_r>
 800ddfc:	6813      	ldr	r3, [r2, #0]
 800ddfe:	1c58      	adds	r0, r3, #1
 800de00:	6010      	str	r0, [r2, #0]
 800de02:	7019      	strb	r1, [r3, #0]
 800de04:	4608      	mov	r0, r1
 800de06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <__sfputs_r>:
 800de0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0e:	4606      	mov	r6, r0
 800de10:	460f      	mov	r7, r1
 800de12:	4614      	mov	r4, r2
 800de14:	18d5      	adds	r5, r2, r3
 800de16:	42ac      	cmp	r4, r5
 800de18:	d101      	bne.n	800de1e <__sfputs_r+0x12>
 800de1a:	2000      	movs	r0, #0
 800de1c:	e007      	b.n	800de2e <__sfputs_r+0x22>
 800de1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de22:	463a      	mov	r2, r7
 800de24:	4630      	mov	r0, r6
 800de26:	f7ff ffda 	bl	800ddde <__sfputc_r>
 800de2a:	1c43      	adds	r3, r0, #1
 800de2c:	d1f3      	bne.n	800de16 <__sfputs_r+0xa>
 800de2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de30 <_vfiprintf_r>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	460d      	mov	r5, r1
 800de36:	b09d      	sub	sp, #116	; 0x74
 800de38:	4614      	mov	r4, r2
 800de3a:	4698      	mov	r8, r3
 800de3c:	4606      	mov	r6, r0
 800de3e:	b118      	cbz	r0, 800de48 <_vfiprintf_r+0x18>
 800de40:	6983      	ldr	r3, [r0, #24]
 800de42:	b90b      	cbnz	r3, 800de48 <_vfiprintf_r+0x18>
 800de44:	f7fd ff14 	bl	800bc70 <__sinit>
 800de48:	4b89      	ldr	r3, [pc, #548]	; (800e070 <_vfiprintf_r+0x240>)
 800de4a:	429d      	cmp	r5, r3
 800de4c:	d11b      	bne.n	800de86 <_vfiprintf_r+0x56>
 800de4e:	6875      	ldr	r5, [r6, #4]
 800de50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de52:	07d9      	lsls	r1, r3, #31
 800de54:	d405      	bmi.n	800de62 <_vfiprintf_r+0x32>
 800de56:	89ab      	ldrh	r3, [r5, #12]
 800de58:	059a      	lsls	r2, r3, #22
 800de5a:	d402      	bmi.n	800de62 <_vfiprintf_r+0x32>
 800de5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de5e:	f7fe fb18 	bl	800c492 <__retarget_lock_acquire_recursive>
 800de62:	89ab      	ldrh	r3, [r5, #12]
 800de64:	071b      	lsls	r3, r3, #28
 800de66:	d501      	bpl.n	800de6c <_vfiprintf_r+0x3c>
 800de68:	692b      	ldr	r3, [r5, #16]
 800de6a:	b9eb      	cbnz	r3, 800dea8 <_vfiprintf_r+0x78>
 800de6c:	4629      	mov	r1, r5
 800de6e:	4630      	mov	r0, r6
 800de70:	f000 f960 	bl	800e134 <__swsetup_r>
 800de74:	b1c0      	cbz	r0, 800dea8 <_vfiprintf_r+0x78>
 800de76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de78:	07dc      	lsls	r4, r3, #31
 800de7a:	d50e      	bpl.n	800de9a <_vfiprintf_r+0x6a>
 800de7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de80:	b01d      	add	sp, #116	; 0x74
 800de82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de86:	4b7b      	ldr	r3, [pc, #492]	; (800e074 <_vfiprintf_r+0x244>)
 800de88:	429d      	cmp	r5, r3
 800de8a:	d101      	bne.n	800de90 <_vfiprintf_r+0x60>
 800de8c:	68b5      	ldr	r5, [r6, #8]
 800de8e:	e7df      	b.n	800de50 <_vfiprintf_r+0x20>
 800de90:	4b79      	ldr	r3, [pc, #484]	; (800e078 <_vfiprintf_r+0x248>)
 800de92:	429d      	cmp	r5, r3
 800de94:	bf08      	it	eq
 800de96:	68f5      	ldreq	r5, [r6, #12]
 800de98:	e7da      	b.n	800de50 <_vfiprintf_r+0x20>
 800de9a:	89ab      	ldrh	r3, [r5, #12]
 800de9c:	0598      	lsls	r0, r3, #22
 800de9e:	d4ed      	bmi.n	800de7c <_vfiprintf_r+0x4c>
 800dea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dea2:	f7fe faf7 	bl	800c494 <__retarget_lock_release_recursive>
 800dea6:	e7e9      	b.n	800de7c <_vfiprintf_r+0x4c>
 800dea8:	2300      	movs	r3, #0
 800deaa:	9309      	str	r3, [sp, #36]	; 0x24
 800deac:	2320      	movs	r3, #32
 800deae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800deb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800deb6:	2330      	movs	r3, #48	; 0x30
 800deb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e07c <_vfiprintf_r+0x24c>
 800debc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dec0:	f04f 0901 	mov.w	r9, #1
 800dec4:	4623      	mov	r3, r4
 800dec6:	469a      	mov	sl, r3
 800dec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800decc:	b10a      	cbz	r2, 800ded2 <_vfiprintf_r+0xa2>
 800dece:	2a25      	cmp	r2, #37	; 0x25
 800ded0:	d1f9      	bne.n	800dec6 <_vfiprintf_r+0x96>
 800ded2:	ebba 0b04 	subs.w	fp, sl, r4
 800ded6:	d00b      	beq.n	800def0 <_vfiprintf_r+0xc0>
 800ded8:	465b      	mov	r3, fp
 800deda:	4622      	mov	r2, r4
 800dedc:	4629      	mov	r1, r5
 800dede:	4630      	mov	r0, r6
 800dee0:	f7ff ff94 	bl	800de0c <__sfputs_r>
 800dee4:	3001      	adds	r0, #1
 800dee6:	f000 80aa 	beq.w	800e03e <_vfiprintf_r+0x20e>
 800deea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800deec:	445a      	add	r2, fp
 800deee:	9209      	str	r2, [sp, #36]	; 0x24
 800def0:	f89a 3000 	ldrb.w	r3, [sl]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 80a2 	beq.w	800e03e <_vfiprintf_r+0x20e>
 800defa:	2300      	movs	r3, #0
 800defc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df04:	f10a 0a01 	add.w	sl, sl, #1
 800df08:	9304      	str	r3, [sp, #16]
 800df0a:	9307      	str	r3, [sp, #28]
 800df0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df10:	931a      	str	r3, [sp, #104]	; 0x68
 800df12:	4654      	mov	r4, sl
 800df14:	2205      	movs	r2, #5
 800df16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df1a:	4858      	ldr	r0, [pc, #352]	; (800e07c <_vfiprintf_r+0x24c>)
 800df1c:	f7f2 f978 	bl	8000210 <memchr>
 800df20:	9a04      	ldr	r2, [sp, #16]
 800df22:	b9d8      	cbnz	r0, 800df5c <_vfiprintf_r+0x12c>
 800df24:	06d1      	lsls	r1, r2, #27
 800df26:	bf44      	itt	mi
 800df28:	2320      	movmi	r3, #32
 800df2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df2e:	0713      	lsls	r3, r2, #28
 800df30:	bf44      	itt	mi
 800df32:	232b      	movmi	r3, #43	; 0x2b
 800df34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df38:	f89a 3000 	ldrb.w	r3, [sl]
 800df3c:	2b2a      	cmp	r3, #42	; 0x2a
 800df3e:	d015      	beq.n	800df6c <_vfiprintf_r+0x13c>
 800df40:	9a07      	ldr	r2, [sp, #28]
 800df42:	4654      	mov	r4, sl
 800df44:	2000      	movs	r0, #0
 800df46:	f04f 0c0a 	mov.w	ip, #10
 800df4a:	4621      	mov	r1, r4
 800df4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df50:	3b30      	subs	r3, #48	; 0x30
 800df52:	2b09      	cmp	r3, #9
 800df54:	d94e      	bls.n	800dff4 <_vfiprintf_r+0x1c4>
 800df56:	b1b0      	cbz	r0, 800df86 <_vfiprintf_r+0x156>
 800df58:	9207      	str	r2, [sp, #28]
 800df5a:	e014      	b.n	800df86 <_vfiprintf_r+0x156>
 800df5c:	eba0 0308 	sub.w	r3, r0, r8
 800df60:	fa09 f303 	lsl.w	r3, r9, r3
 800df64:	4313      	orrs	r3, r2
 800df66:	9304      	str	r3, [sp, #16]
 800df68:	46a2      	mov	sl, r4
 800df6a:	e7d2      	b.n	800df12 <_vfiprintf_r+0xe2>
 800df6c:	9b03      	ldr	r3, [sp, #12]
 800df6e:	1d19      	adds	r1, r3, #4
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	9103      	str	r1, [sp, #12]
 800df74:	2b00      	cmp	r3, #0
 800df76:	bfbb      	ittet	lt
 800df78:	425b      	neglt	r3, r3
 800df7a:	f042 0202 	orrlt.w	r2, r2, #2
 800df7e:	9307      	strge	r3, [sp, #28]
 800df80:	9307      	strlt	r3, [sp, #28]
 800df82:	bfb8      	it	lt
 800df84:	9204      	strlt	r2, [sp, #16]
 800df86:	7823      	ldrb	r3, [r4, #0]
 800df88:	2b2e      	cmp	r3, #46	; 0x2e
 800df8a:	d10c      	bne.n	800dfa6 <_vfiprintf_r+0x176>
 800df8c:	7863      	ldrb	r3, [r4, #1]
 800df8e:	2b2a      	cmp	r3, #42	; 0x2a
 800df90:	d135      	bne.n	800dffe <_vfiprintf_r+0x1ce>
 800df92:	9b03      	ldr	r3, [sp, #12]
 800df94:	1d1a      	adds	r2, r3, #4
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	9203      	str	r2, [sp, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	bfb8      	it	lt
 800df9e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dfa2:	3402      	adds	r4, #2
 800dfa4:	9305      	str	r3, [sp, #20]
 800dfa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e08c <_vfiprintf_r+0x25c>
 800dfaa:	7821      	ldrb	r1, [r4, #0]
 800dfac:	2203      	movs	r2, #3
 800dfae:	4650      	mov	r0, sl
 800dfb0:	f7f2 f92e 	bl	8000210 <memchr>
 800dfb4:	b140      	cbz	r0, 800dfc8 <_vfiprintf_r+0x198>
 800dfb6:	2340      	movs	r3, #64	; 0x40
 800dfb8:	eba0 000a 	sub.w	r0, r0, sl
 800dfbc:	fa03 f000 	lsl.w	r0, r3, r0
 800dfc0:	9b04      	ldr	r3, [sp, #16]
 800dfc2:	4303      	orrs	r3, r0
 800dfc4:	3401      	adds	r4, #1
 800dfc6:	9304      	str	r3, [sp, #16]
 800dfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfcc:	482c      	ldr	r0, [pc, #176]	; (800e080 <_vfiprintf_r+0x250>)
 800dfce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfd2:	2206      	movs	r2, #6
 800dfd4:	f7f2 f91c 	bl	8000210 <memchr>
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d03f      	beq.n	800e05c <_vfiprintf_r+0x22c>
 800dfdc:	4b29      	ldr	r3, [pc, #164]	; (800e084 <_vfiprintf_r+0x254>)
 800dfde:	bb1b      	cbnz	r3, 800e028 <_vfiprintf_r+0x1f8>
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	3307      	adds	r3, #7
 800dfe4:	f023 0307 	bic.w	r3, r3, #7
 800dfe8:	3308      	adds	r3, #8
 800dfea:	9303      	str	r3, [sp, #12]
 800dfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfee:	443b      	add	r3, r7
 800dff0:	9309      	str	r3, [sp, #36]	; 0x24
 800dff2:	e767      	b.n	800dec4 <_vfiprintf_r+0x94>
 800dff4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dff8:	460c      	mov	r4, r1
 800dffa:	2001      	movs	r0, #1
 800dffc:	e7a5      	b.n	800df4a <_vfiprintf_r+0x11a>
 800dffe:	2300      	movs	r3, #0
 800e000:	3401      	adds	r4, #1
 800e002:	9305      	str	r3, [sp, #20]
 800e004:	4619      	mov	r1, r3
 800e006:	f04f 0c0a 	mov.w	ip, #10
 800e00a:	4620      	mov	r0, r4
 800e00c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e010:	3a30      	subs	r2, #48	; 0x30
 800e012:	2a09      	cmp	r2, #9
 800e014:	d903      	bls.n	800e01e <_vfiprintf_r+0x1ee>
 800e016:	2b00      	cmp	r3, #0
 800e018:	d0c5      	beq.n	800dfa6 <_vfiprintf_r+0x176>
 800e01a:	9105      	str	r1, [sp, #20]
 800e01c:	e7c3      	b.n	800dfa6 <_vfiprintf_r+0x176>
 800e01e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e022:	4604      	mov	r4, r0
 800e024:	2301      	movs	r3, #1
 800e026:	e7f0      	b.n	800e00a <_vfiprintf_r+0x1da>
 800e028:	ab03      	add	r3, sp, #12
 800e02a:	9300      	str	r3, [sp, #0]
 800e02c:	462a      	mov	r2, r5
 800e02e:	4b16      	ldr	r3, [pc, #88]	; (800e088 <_vfiprintf_r+0x258>)
 800e030:	a904      	add	r1, sp, #16
 800e032:	4630      	mov	r0, r6
 800e034:	f7fb f87e 	bl	8009134 <_printf_float>
 800e038:	4607      	mov	r7, r0
 800e03a:	1c78      	adds	r0, r7, #1
 800e03c:	d1d6      	bne.n	800dfec <_vfiprintf_r+0x1bc>
 800e03e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e040:	07d9      	lsls	r1, r3, #31
 800e042:	d405      	bmi.n	800e050 <_vfiprintf_r+0x220>
 800e044:	89ab      	ldrh	r3, [r5, #12]
 800e046:	059a      	lsls	r2, r3, #22
 800e048:	d402      	bmi.n	800e050 <_vfiprintf_r+0x220>
 800e04a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e04c:	f7fe fa22 	bl	800c494 <__retarget_lock_release_recursive>
 800e050:	89ab      	ldrh	r3, [r5, #12]
 800e052:	065b      	lsls	r3, r3, #25
 800e054:	f53f af12 	bmi.w	800de7c <_vfiprintf_r+0x4c>
 800e058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e05a:	e711      	b.n	800de80 <_vfiprintf_r+0x50>
 800e05c:	ab03      	add	r3, sp, #12
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	462a      	mov	r2, r5
 800e062:	4b09      	ldr	r3, [pc, #36]	; (800e088 <_vfiprintf_r+0x258>)
 800e064:	a904      	add	r1, sp, #16
 800e066:	4630      	mov	r0, r6
 800e068:	f7fb fb08 	bl	800967c <_printf_i>
 800e06c:	e7e4      	b.n	800e038 <_vfiprintf_r+0x208>
 800e06e:	bf00      	nop
 800e070:	0800f02c 	.word	0x0800f02c
 800e074:	0800f04c 	.word	0x0800f04c
 800e078:	0800f00c 	.word	0x0800f00c
 800e07c:	0800f244 	.word	0x0800f244
 800e080:	0800f24e 	.word	0x0800f24e
 800e084:	08009135 	.word	0x08009135
 800e088:	0800de0d 	.word	0x0800de0d
 800e08c:	0800f24a 	.word	0x0800f24a

0800e090 <__swbuf_r>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	460e      	mov	r6, r1
 800e094:	4614      	mov	r4, r2
 800e096:	4605      	mov	r5, r0
 800e098:	b118      	cbz	r0, 800e0a2 <__swbuf_r+0x12>
 800e09a:	6983      	ldr	r3, [r0, #24]
 800e09c:	b90b      	cbnz	r3, 800e0a2 <__swbuf_r+0x12>
 800e09e:	f7fd fde7 	bl	800bc70 <__sinit>
 800e0a2:	4b21      	ldr	r3, [pc, #132]	; (800e128 <__swbuf_r+0x98>)
 800e0a4:	429c      	cmp	r4, r3
 800e0a6:	d12b      	bne.n	800e100 <__swbuf_r+0x70>
 800e0a8:	686c      	ldr	r4, [r5, #4]
 800e0aa:	69a3      	ldr	r3, [r4, #24]
 800e0ac:	60a3      	str	r3, [r4, #8]
 800e0ae:	89a3      	ldrh	r3, [r4, #12]
 800e0b0:	071a      	lsls	r2, r3, #28
 800e0b2:	d52f      	bpl.n	800e114 <__swbuf_r+0x84>
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	b36b      	cbz	r3, 800e114 <__swbuf_r+0x84>
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	6820      	ldr	r0, [r4, #0]
 800e0bc:	1ac0      	subs	r0, r0, r3
 800e0be:	6963      	ldr	r3, [r4, #20]
 800e0c0:	b2f6      	uxtb	r6, r6
 800e0c2:	4283      	cmp	r3, r0
 800e0c4:	4637      	mov	r7, r6
 800e0c6:	dc04      	bgt.n	800e0d2 <__swbuf_r+0x42>
 800e0c8:	4621      	mov	r1, r4
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f7fd fd3c 	bl	800bb48 <_fflush_r>
 800e0d0:	bb30      	cbnz	r0, 800e120 <__swbuf_r+0x90>
 800e0d2:	68a3      	ldr	r3, [r4, #8]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	60a3      	str	r3, [r4, #8]
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	6022      	str	r2, [r4, #0]
 800e0de:	701e      	strb	r6, [r3, #0]
 800e0e0:	6963      	ldr	r3, [r4, #20]
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	4283      	cmp	r3, r0
 800e0e6:	d004      	beq.n	800e0f2 <__swbuf_r+0x62>
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	07db      	lsls	r3, r3, #31
 800e0ec:	d506      	bpl.n	800e0fc <__swbuf_r+0x6c>
 800e0ee:	2e0a      	cmp	r6, #10
 800e0f0:	d104      	bne.n	800e0fc <__swbuf_r+0x6c>
 800e0f2:	4621      	mov	r1, r4
 800e0f4:	4628      	mov	r0, r5
 800e0f6:	f7fd fd27 	bl	800bb48 <_fflush_r>
 800e0fa:	b988      	cbnz	r0, 800e120 <__swbuf_r+0x90>
 800e0fc:	4638      	mov	r0, r7
 800e0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e100:	4b0a      	ldr	r3, [pc, #40]	; (800e12c <__swbuf_r+0x9c>)
 800e102:	429c      	cmp	r4, r3
 800e104:	d101      	bne.n	800e10a <__swbuf_r+0x7a>
 800e106:	68ac      	ldr	r4, [r5, #8]
 800e108:	e7cf      	b.n	800e0aa <__swbuf_r+0x1a>
 800e10a:	4b09      	ldr	r3, [pc, #36]	; (800e130 <__swbuf_r+0xa0>)
 800e10c:	429c      	cmp	r4, r3
 800e10e:	bf08      	it	eq
 800e110:	68ec      	ldreq	r4, [r5, #12]
 800e112:	e7ca      	b.n	800e0aa <__swbuf_r+0x1a>
 800e114:	4621      	mov	r1, r4
 800e116:	4628      	mov	r0, r5
 800e118:	f000 f80c 	bl	800e134 <__swsetup_r>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d0cb      	beq.n	800e0b8 <__swbuf_r+0x28>
 800e120:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e124:	e7ea      	b.n	800e0fc <__swbuf_r+0x6c>
 800e126:	bf00      	nop
 800e128:	0800f02c 	.word	0x0800f02c
 800e12c:	0800f04c 	.word	0x0800f04c
 800e130:	0800f00c 	.word	0x0800f00c

0800e134 <__swsetup_r>:
 800e134:	4b32      	ldr	r3, [pc, #200]	; (800e200 <__swsetup_r+0xcc>)
 800e136:	b570      	push	{r4, r5, r6, lr}
 800e138:	681d      	ldr	r5, [r3, #0]
 800e13a:	4606      	mov	r6, r0
 800e13c:	460c      	mov	r4, r1
 800e13e:	b125      	cbz	r5, 800e14a <__swsetup_r+0x16>
 800e140:	69ab      	ldr	r3, [r5, #24]
 800e142:	b913      	cbnz	r3, 800e14a <__swsetup_r+0x16>
 800e144:	4628      	mov	r0, r5
 800e146:	f7fd fd93 	bl	800bc70 <__sinit>
 800e14a:	4b2e      	ldr	r3, [pc, #184]	; (800e204 <__swsetup_r+0xd0>)
 800e14c:	429c      	cmp	r4, r3
 800e14e:	d10f      	bne.n	800e170 <__swsetup_r+0x3c>
 800e150:	686c      	ldr	r4, [r5, #4]
 800e152:	89a3      	ldrh	r3, [r4, #12]
 800e154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e158:	0719      	lsls	r1, r3, #28
 800e15a:	d42c      	bmi.n	800e1b6 <__swsetup_r+0x82>
 800e15c:	06dd      	lsls	r5, r3, #27
 800e15e:	d411      	bmi.n	800e184 <__swsetup_r+0x50>
 800e160:	2309      	movs	r3, #9
 800e162:	6033      	str	r3, [r6, #0]
 800e164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e168:	81a3      	strh	r3, [r4, #12]
 800e16a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e16e:	e03e      	b.n	800e1ee <__swsetup_r+0xba>
 800e170:	4b25      	ldr	r3, [pc, #148]	; (800e208 <__swsetup_r+0xd4>)
 800e172:	429c      	cmp	r4, r3
 800e174:	d101      	bne.n	800e17a <__swsetup_r+0x46>
 800e176:	68ac      	ldr	r4, [r5, #8]
 800e178:	e7eb      	b.n	800e152 <__swsetup_r+0x1e>
 800e17a:	4b24      	ldr	r3, [pc, #144]	; (800e20c <__swsetup_r+0xd8>)
 800e17c:	429c      	cmp	r4, r3
 800e17e:	bf08      	it	eq
 800e180:	68ec      	ldreq	r4, [r5, #12]
 800e182:	e7e6      	b.n	800e152 <__swsetup_r+0x1e>
 800e184:	0758      	lsls	r0, r3, #29
 800e186:	d512      	bpl.n	800e1ae <__swsetup_r+0x7a>
 800e188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e18a:	b141      	cbz	r1, 800e19e <__swsetup_r+0x6a>
 800e18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e190:	4299      	cmp	r1, r3
 800e192:	d002      	beq.n	800e19a <__swsetup_r+0x66>
 800e194:	4630      	mov	r0, r6
 800e196:	f7fe fee9 	bl	800cf6c <_free_r>
 800e19a:	2300      	movs	r3, #0
 800e19c:	6363      	str	r3, [r4, #52]	; 0x34
 800e19e:	89a3      	ldrh	r3, [r4, #12]
 800e1a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1a4:	81a3      	strh	r3, [r4, #12]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	6063      	str	r3, [r4, #4]
 800e1aa:	6923      	ldr	r3, [r4, #16]
 800e1ac:	6023      	str	r3, [r4, #0]
 800e1ae:	89a3      	ldrh	r3, [r4, #12]
 800e1b0:	f043 0308 	orr.w	r3, r3, #8
 800e1b4:	81a3      	strh	r3, [r4, #12]
 800e1b6:	6923      	ldr	r3, [r4, #16]
 800e1b8:	b94b      	cbnz	r3, 800e1ce <__swsetup_r+0x9a>
 800e1ba:	89a3      	ldrh	r3, [r4, #12]
 800e1bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1c4:	d003      	beq.n	800e1ce <__swsetup_r+0x9a>
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7fe f99d 	bl	800c508 <__smakebuf_r>
 800e1ce:	89a0      	ldrh	r0, [r4, #12]
 800e1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1d4:	f010 0301 	ands.w	r3, r0, #1
 800e1d8:	d00a      	beq.n	800e1f0 <__swsetup_r+0xbc>
 800e1da:	2300      	movs	r3, #0
 800e1dc:	60a3      	str	r3, [r4, #8]
 800e1de:	6963      	ldr	r3, [r4, #20]
 800e1e0:	425b      	negs	r3, r3
 800e1e2:	61a3      	str	r3, [r4, #24]
 800e1e4:	6923      	ldr	r3, [r4, #16]
 800e1e6:	b943      	cbnz	r3, 800e1fa <__swsetup_r+0xc6>
 800e1e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1ec:	d1ba      	bne.n	800e164 <__swsetup_r+0x30>
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}
 800e1f0:	0781      	lsls	r1, r0, #30
 800e1f2:	bf58      	it	pl
 800e1f4:	6963      	ldrpl	r3, [r4, #20]
 800e1f6:	60a3      	str	r3, [r4, #8]
 800e1f8:	e7f4      	b.n	800e1e4 <__swsetup_r+0xb0>
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	e7f7      	b.n	800e1ee <__swsetup_r+0xba>
 800e1fe:	bf00      	nop
 800e200:	2000001c 	.word	0x2000001c
 800e204:	0800f02c 	.word	0x0800f02c
 800e208:	0800f04c 	.word	0x0800f04c
 800e20c:	0800f00c 	.word	0x0800f00c

0800e210 <abort>:
 800e210:	b508      	push	{r3, lr}
 800e212:	2006      	movs	r0, #6
 800e214:	f000 f834 	bl	800e280 <raise>
 800e218:	2001      	movs	r0, #1
 800e21a:	f7fa fd7b 	bl	8008d14 <_exit>

0800e21e <_malloc_usable_size_r>:
 800e21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e222:	1f18      	subs	r0, r3, #4
 800e224:	2b00      	cmp	r3, #0
 800e226:	bfbc      	itt	lt
 800e228:	580b      	ldrlt	r3, [r1, r0]
 800e22a:	18c0      	addlt	r0, r0, r3
 800e22c:	4770      	bx	lr

0800e22e <_raise_r>:
 800e22e:	291f      	cmp	r1, #31
 800e230:	b538      	push	{r3, r4, r5, lr}
 800e232:	4604      	mov	r4, r0
 800e234:	460d      	mov	r5, r1
 800e236:	d904      	bls.n	800e242 <_raise_r+0x14>
 800e238:	2316      	movs	r3, #22
 800e23a:	6003      	str	r3, [r0, #0]
 800e23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e240:	bd38      	pop	{r3, r4, r5, pc}
 800e242:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e244:	b112      	cbz	r2, 800e24c <_raise_r+0x1e>
 800e246:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e24a:	b94b      	cbnz	r3, 800e260 <_raise_r+0x32>
 800e24c:	4620      	mov	r0, r4
 800e24e:	f000 f831 	bl	800e2b4 <_getpid_r>
 800e252:	462a      	mov	r2, r5
 800e254:	4601      	mov	r1, r0
 800e256:	4620      	mov	r0, r4
 800e258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e25c:	f000 b818 	b.w	800e290 <_kill_r>
 800e260:	2b01      	cmp	r3, #1
 800e262:	d00a      	beq.n	800e27a <_raise_r+0x4c>
 800e264:	1c59      	adds	r1, r3, #1
 800e266:	d103      	bne.n	800e270 <_raise_r+0x42>
 800e268:	2316      	movs	r3, #22
 800e26a:	6003      	str	r3, [r0, #0]
 800e26c:	2001      	movs	r0, #1
 800e26e:	e7e7      	b.n	800e240 <_raise_r+0x12>
 800e270:	2400      	movs	r4, #0
 800e272:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e276:	4628      	mov	r0, r5
 800e278:	4798      	blx	r3
 800e27a:	2000      	movs	r0, #0
 800e27c:	e7e0      	b.n	800e240 <_raise_r+0x12>
	...

0800e280 <raise>:
 800e280:	4b02      	ldr	r3, [pc, #8]	; (800e28c <raise+0xc>)
 800e282:	4601      	mov	r1, r0
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	f7ff bfd2 	b.w	800e22e <_raise_r>
 800e28a:	bf00      	nop
 800e28c:	2000001c 	.word	0x2000001c

0800e290 <_kill_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	4d07      	ldr	r5, [pc, #28]	; (800e2b0 <_kill_r+0x20>)
 800e294:	2300      	movs	r3, #0
 800e296:	4604      	mov	r4, r0
 800e298:	4608      	mov	r0, r1
 800e29a:	4611      	mov	r1, r2
 800e29c:	602b      	str	r3, [r5, #0]
 800e29e:	f7fa fd29 	bl	8008cf4 <_kill>
 800e2a2:	1c43      	adds	r3, r0, #1
 800e2a4:	d102      	bne.n	800e2ac <_kill_r+0x1c>
 800e2a6:	682b      	ldr	r3, [r5, #0]
 800e2a8:	b103      	cbz	r3, 800e2ac <_kill_r+0x1c>
 800e2aa:	6023      	str	r3, [r4, #0]
 800e2ac:	bd38      	pop	{r3, r4, r5, pc}
 800e2ae:	bf00      	nop
 800e2b0:	2000147c 	.word	0x2000147c

0800e2b4 <_getpid_r>:
 800e2b4:	f7fa bd16 	b.w	8008ce4 <_getpid>

0800e2b8 <_init>:
 800e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ba:	bf00      	nop
 800e2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2be:	bc08      	pop	{r3}
 800e2c0:	469e      	mov	lr, r3
 800e2c2:	4770      	bx	lr

0800e2c4 <_fini>:
 800e2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2c6:	bf00      	nop
 800e2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ca:	bc08      	pop	{r3}
 800e2cc:	469e      	mov	lr, r3
 800e2ce:	4770      	bx	lr
