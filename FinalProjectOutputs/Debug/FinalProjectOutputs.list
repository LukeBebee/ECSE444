
FinalProjectOutputs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb5c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  0800ed20  0800ed20  0001ed20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcac  0800fcac  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800fcac  0800fcac  0001fcac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fcb4  0800fcb4  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcb4  0800fcb4  0001fcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fcb8  0800fcb8  0001fcb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800fcbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000220  0800fedc  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800fedc  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021b3c  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bbc  00000000  00000000  00041d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  00045948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  000472e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e773  00000000  00000000  00048b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed15  00000000  00000000  0007729b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00125e11  00000000  00000000  00095fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001bbdc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008634  00000000  00000000  001bbe88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001c44bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000220 	.word	0x20000220
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ed04 	.word	0x0800ed04

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000224 	.word	0x20000224
 80001fc:	0800ed04 	.word	0x0800ed04

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <I2Cx_MspInit+0xa8>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <I2Cx_MspInit+0xa8>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <I2Cx_MspInit+0xa8>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001048:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800104c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800104e:	2312      	movs	r3, #18
 8001050:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800105a:	2304      	movs	r3, #4
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	481b      	ldr	r0, [pc, #108]	; (80010d4 <I2Cx_MspInit+0xac>)
 8001066:	f002 fc75 	bl	8003954 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <I2Cx_MspInit+0xac>)
 8001072:	f002 fc6f 	bl	8003954 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001076:	4b16      	ldr	r3, [pc, #88]	; (80010d0 <I2Cx_MspInit+0xa8>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <I2Cx_MspInit+0xa8>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <I2Cx_MspInit+0xa8>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <I2Cx_MspInit+0xa8>)
 8001090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001092:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <I2Cx_MspInit+0xa8>)
 8001094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <I2Cx_MspInit+0xa8>)
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	4a0c      	ldr	r2, [pc, #48]	; (80010d0 <I2Cx_MspInit+0xa8>)
 80010a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80010a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210f      	movs	r1, #15
 80010aa:	2021      	movs	r0, #33	; 0x21
 80010ac:	f001 fe31 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80010b0:	2021      	movs	r0, #33	; 0x21
 80010b2:	f001 fe4a 	bl	8002d4a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	210f      	movs	r1, #15
 80010ba:	2022      	movs	r0, #34	; 0x22
 80010bc:	f001 fe29 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80010c0:	2022      	movs	r0, #34	; 0x22
 80010c2:	f001 fe42 	bl	8002d4a <HAL_NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <I2Cx_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a11      	ldr	r2, [pc, #68]	; (8001130 <I2Cx_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2201      	movs	r2, #1
 80010f6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff89 	bl	8001028 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f002 feea 	bl	8003ef0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f003 fc78 	bl	8004a14 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40005800 	.word	0x40005800
 8001130:	00702681 	.word	0x00702681

08001134 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af04      	add	r7, sp, #16
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	72fb      	strb	r3, [r7, #11]
 8001146:	460b      	mov	r3, r1
 8001148:	813b      	strh	r3, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	b299      	uxth	r1, r3
 8001156:	88f8      	ldrh	r0, [r7, #6]
 8001158:	893a      	ldrh	r2, [r7, #8]
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4603      	mov	r3, r0
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f003 f892 	bl	8004294 <HAL_I2C_Mem_Read>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800117a:	7afb      	ldrb	r3, [r7, #11]
 800117c:	4619      	mov	r1, r3
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 f832 	bl	80011e8 <I2Cx_Error>
  }
  return status;
 8001184:	7dfb      	ldrb	r3, [r7, #23]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b08a      	sub	sp, #40	; 0x28
 8001192:	af04      	add	r7, sp, #16
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	4608      	mov	r0, r1
 8001198:	4611      	mov	r1, r2
 800119a:	461a      	mov	r2, r3
 800119c:	4603      	mov	r3, r0
 800119e:	72fb      	strb	r3, [r7, #11]
 80011a0:	460b      	mov	r3, r1
 80011a2:	813b      	strh	r3, [r7, #8]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80011ac:	7afb      	ldrb	r3, [r7, #11]
 80011ae:	b299      	uxth	r1, r3
 80011b0:	88f8      	ldrh	r0, [r7, #6]
 80011b2:	893a      	ldrh	r2, [r7, #8]
 80011b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b8:	9302      	str	r3, [sp, #8]
 80011ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	4603      	mov	r3, r0
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f002 ff51 	bl	800406c <HAL_I2C_Mem_Write>
 80011ca:	4603      	mov	r3, r0
 80011cc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80011d4:	7afb      	ldrb	r3, [r7, #11]
 80011d6:	4619      	mov	r1, r3
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f805 	bl	80011e8 <I2Cx_Error>
  }
  return status;
 80011de:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f002 ff0a 	bl	800400e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff6c 	bl	80010d8 <I2Cx_Init>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <SENSOR_IO_Init+0x10>)
 800120e:	f7ff ff63 	bl	80010d8 <I2Cx_Init>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	2000023c 	.word	0x2000023c

0800121c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af02      	add	r7, sp, #8
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	460b      	mov	r3, r1
 8001228:	71bb      	strb	r3, [r7, #6]
 800122a:	4613      	mov	r3, r2
 800122c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	b29a      	uxth	r2, r3
 8001232:	79f9      	ldrb	r1, [r7, #7]
 8001234:	2301      	movs	r3, #1
 8001236:	9301      	str	r3, [sp, #4]
 8001238:	1d7b      	adds	r3, r7, #5
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	4803      	ldr	r0, [pc, #12]	; (800124c <SENSOR_IO_Write+0x30>)
 8001240:	f7ff ffa5 	bl	800118e <I2Cx_WriteMultiple>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000023c 	.word	0x2000023c

08001250 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	b29a      	uxth	r2, r3
 8001268:	79f9      	ldrb	r1, [r7, #7]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	f107 030f 	add.w	r3, r7, #15
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <SENSOR_IO_Read+0x38>)
 8001278:	f7ff ff5c 	bl	8001134 <I2Cx_ReadMultiple>

  return read_value;
 800127c:	7bfb      	ldrb	r3, [r7, #15]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000023c 	.word	0x2000023c

0800128c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af02      	add	r7, sp, #8
 8001292:	603a      	str	r2, [r7, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	460b      	mov	r3, r1
 800129c:	71bb      	strb	r3, [r7, #6]
 800129e:	4613      	mov	r3, r2
 80012a0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	79f9      	ldrb	r1, [r7, #7]
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2301      	movs	r3, #1
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <SENSOR_IO_ReadMultiple+0x38>)
 80012b4:	f7ff ff3e 	bl	8001134 <I2Cx_ReadMultiple>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29b      	uxth	r3, r3
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000023c 	.word	0x2000023c

080012c8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80012d2:	2300      	movs	r3, #0
 80012d4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <BSP_GYRO_Init+0x7c>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4798      	blx	r3
 80012dc:	4603      	mov	r3, r0
 80012de:	2b6a      	cmp	r3, #106	; 0x6a
 80012e0:	d002      	beq.n	80012e8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e028      	b.n	800133a <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <BSP_GYRO_Init+0x80>)
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <BSP_GYRO_Init+0x7c>)
 80012ec:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80012f2:	2330      	movs	r3, #48	; 0x30
 80012f4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8001306:	230c      	movs	r3, #12
 8001308:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800130a:	7aba      	ldrb	r2, [r7, #10]
 800130c:	797b      	ldrb	r3, [r7, #5]
 800130e:	4313      	orrs	r3, r2
 8001310:	b2db      	uxtb	r3, r3
 8001312:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001314:	7a3b      	ldrb	r3, [r7, #8]
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	b2db      	uxtb	r3, r3
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	b21b      	sxth	r3, r3
 8001328:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <BSP_GYRO_Init+0x80>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	89ba      	ldrh	r2, [r7, #12]
 8001332:	4610      	mov	r0, r2
 8001334:	4798      	blx	r3
    
    ret = GYRO_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000000 	.word	0x20000000
 8001348:	20000290 	.word	0x20000290

0800134c <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <BSP_GYRO_GetXYZ+0x2c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d009      	beq.n	8001370 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <BSP_GYRO_GetXYZ+0x2c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <BSP_GYRO_GetXYZ+0x2c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	4798      	blx	r3
    }
  }
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000290 	.word	0x20000290

0800137c <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800138a:	2111      	movs	r1, #17
 800138c:	20d4      	movs	r0, #212	; 0xd4
 800138e:	f7ff ff5f 	bl	8001250 <SENSOR_IO_Read>
 8001392:	4603      	mov	r3, r0
 8001394:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001396:	88fb      	ldrh	r3, [r7, #6]
 8001398:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80013a2:	7bba      	ldrb	r2, [r7, #14]
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	461a      	mov	r2, r3
 80013ae:	2111      	movs	r1, #17
 80013b0:	20d4      	movs	r0, #212	; 0xd4
 80013b2:	f7ff ff33 	bl	800121c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80013b6:	2112      	movs	r1, #18
 80013b8:	20d4      	movs	r0, #212	; 0xd4
 80013ba:	f7ff ff49 	bl	8001250 <SENSOR_IO_Read>
 80013be:	4603      	mov	r3, r0
 80013c0:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80013c2:	88fb      	ldrh	r3, [r7, #6]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80013ca:	7bbb      	ldrb	r3, [r7, #14]
 80013cc:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80013d0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80013d2:	7bba      	ldrb	r2, [r7, #14]
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	461a      	mov	r2, r3
 80013de:	2112      	movs	r1, #18
 80013e0:	20d4      	movs	r0, #212	; 0xd4
 80013e2:	f7ff ff1b 	bl	800121c <SENSOR_IO_Write>
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80013f8:	2111      	movs	r1, #17
 80013fa:	20d4      	movs	r0, #212	; 0xd4
 80013fc:	f7ff ff28 	bl	8001250 <SENSOR_IO_Read>
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	461a      	mov	r2, r3
 8001410:	2111      	movs	r1, #17
 8001412:	20d4      	movs	r0, #212	; 0xd4
 8001414:	f7ff ff02 	bl	800121c <SENSOR_IO_Write>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001424:	f7ff fef0 	bl	8001208 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8001428:	210f      	movs	r1, #15
 800142a:	20d4      	movs	r0, #212	; 0xd4
 800142c:	f7ff ff10 	bl	8001250 <SENSOR_IO_Read>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	bd80      	pop	{r7, pc}

08001436 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001440:	2300      	movs	r3, #0
 8001442:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8001444:	2116      	movs	r1, #22
 8001446:	20d4      	movs	r0, #212	; 0xd4
 8001448:	f7ff ff02 	bl	8001250 <SENSOR_IO_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001458:	88fb      	ldrh	r3, [r7, #6]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001464:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	461a      	mov	r2, r3
 800146a:	2116      	movs	r1, #22
 800146c:	20d4      	movs	r0, #212	; 0xd4
 800146e:	f7ff fed5 	bl	800121c <SENSOR_IO_Write>
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001484:	2300      	movs	r3, #0
 8001486:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001492:	2111      	movs	r1, #17
 8001494:	20d4      	movs	r0, #212	; 0xd4
 8001496:	f7ff fedb 	bl	8001250 <SENSOR_IO_Read>
 800149a:	4603      	mov	r3, r0
 800149c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800149e:	f107 0208 	add.w	r2, r7, #8
 80014a2:	2306      	movs	r3, #6
 80014a4:	2122      	movs	r1, #34	; 0x22
 80014a6:	20d4      	movs	r0, #212	; 0xd4
 80014a8:	f7ff fef0 	bl	800128c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	77fb      	strb	r3, [r7, #31]
 80014b0:	e01c      	b.n	80014ec <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80014b2:	7ffb      	ldrb	r3, [r7, #31]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	3301      	adds	r3, #1
 80014b8:	3320      	adds	r3, #32
 80014ba:	443b      	add	r3, r7
 80014bc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	7ffb      	ldrb	r3, [r7, #31]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	3320      	adds	r3, #32
 80014cc:	443b      	add	r3, r7
 80014ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	b212      	sxth	r2, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3320      	adds	r3, #32
 80014e0:	443b      	add	r3, r7
 80014e2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
 80014e8:	3301      	adds	r3, #1
 80014ea:	77fb      	strb	r3, [r7, #31]
 80014ec:	7ffb      	ldrb	r3, [r7, #31]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d9df      	bls.n	80014b2 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	f003 030c 	and.w	r3, r3, #12
 80014f8:	2b0c      	cmp	r3, #12
 80014fa:	d829      	bhi.n	8001550 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80014fc:	a201      	add	r2, pc, #4	; (adr r2, 8001504 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80014fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001502:	bf00      	nop
 8001504:	08001539 	.word	0x08001539
 8001508:	08001551 	.word	0x08001551
 800150c:	08001551 	.word	0x08001551
 8001510:	08001551 	.word	0x08001551
 8001514:	0800153f 	.word	0x0800153f
 8001518:	08001551 	.word	0x08001551
 800151c:	08001551 	.word	0x08001551
 8001520:	08001551 	.word	0x08001551
 8001524:	08001545 	.word	0x08001545
 8001528:	08001551 	.word	0x08001551
 800152c:	08001551 	.word	0x08001551
 8001530:	08001551 	.word	0x08001551
 8001534:	0800154b 	.word	0x0800154b
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8001538:	4b16      	ldr	r3, [pc, #88]	; (8001594 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 800153a:	61bb      	str	r3, [r7, #24]
    break;
 800153c:	e008      	b.n	8001550 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001540:	61bb      	str	r3, [r7, #24]
    break;
 8001542:	e005      	b.n	8001550 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001544:	4b15      	ldr	r3, [pc, #84]	; (800159c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001546:	61bb      	str	r3, [r7, #24]
    break;
 8001548:	e002      	b.n	8001550 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800154c:	61bb      	str	r3, [r7, #24]
    break;    
 800154e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001550:	2300      	movs	r3, #0
 8001552:	77fb      	strb	r3, [r7, #31]
 8001554:	e016      	b.n	8001584 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001556:	7ffb      	ldrb	r3, [r7, #31]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	3320      	adds	r3, #32
 800155c:	443b      	add	r3, r7
 800155e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001562:	ee07 3a90 	vmov	s15, r3
 8001566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800156a:	7ffb      	ldrb	r3, [r7, #31]
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	edd7 7a06 	vldr	s15, [r7, #24]
 8001576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800157a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	3301      	adds	r3, #1
 8001582:	77fb      	strb	r3, [r7, #31]
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d9e5      	bls.n	8001556 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800158a:	bf00      	nop
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	410c0000 	.word	0x410c0000
 8001598:	418c0000 	.word	0x418c0000
 800159c:	420c0000 	.word	0x420c0000
 80015a0:	428c0000 	.word	0x428c0000

080015a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ae:	2003      	movs	r0, #3
 80015b0:	f001 fba4 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f80d 	bl	80015d4 <HAL_InitTick>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d002      	beq.n	80015c6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	e001      	b.n	80015ca <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015c6:	f007 fca3 	bl	8008f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ca:	79fb      	ldrb	r3, [r7, #7]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_InitTick+0x6c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_InitTick+0x70>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_InitTick+0x6c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fbb1 	bl	8002d66 <HAL_SYSTICK_Config>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10f      	bne.n	800162a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b0f      	cmp	r3, #15
 800160e:	d809      	bhi.n	8001624 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001618:	f001 fb7b 	bl	8002d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_InitTick+0x74>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e007      	b.n	8001634 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
 8001628:	e004      	b.n	8001634 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e001      	b.n	8001634 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001634:	7bfb      	ldrb	r3, [r7, #15]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000038 	.word	0x20000038
 8001644:	20000048 	.word	0x20000048
 8001648:	20000034 	.word	0x20000034

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000038 	.word	0x20000038
 8001670:	20000294 	.word	0x20000294

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000294 	.word	0x20000294

0800168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001694:	f7ff ffee 	bl	8001674 <HAL_GetTick>
 8001698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a4:	d005      	beq.n	80016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_Delay+0x44>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016b2:	bf00      	nop
 80016b4:	f7ff ffde 	bl	8001674 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d8f7      	bhi.n	80016b4 <HAL_Delay+0x28>
  {
  }
}
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000038 	.word	0x20000038

080016d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3360      	adds	r3, #96	; 0x60
 800174e:	461a      	mov	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <LL_ADC_SetOffset+0x44>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	4313      	orrs	r3, r2
 800176c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001774:	bf00      	nop
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	03fff000 	.word	0x03fff000

08001784 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3360      	adds	r3, #96	; 0x60
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3360      	adds	r3, #96	; 0x60
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017da:	bf00      	nop
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	615a      	str	r2, [r3, #20]
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001832:	b480      	push	{r7}
 8001834:	b087      	sub	sp, #28
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3330      	adds	r3, #48	; 0x30
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	4413      	add	r3, r2
 8001850:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	211f      	movs	r1, #31
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0e9b      	lsrs	r3, r3, #26
 800186a:	f003 011f 	and.w	r1, r3, #31
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	431a      	orrs	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800188a:	b480      	push	{r7}
 800188c:	b087      	sub	sp, #28
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3314      	adds	r3, #20
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	0e5b      	lsrs	r3, r3, #25
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	4413      	add	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	0d1b      	lsrs	r3, r3, #20
 80018b2:	f003 031f 	and.w	r3, r3, #31
 80018b6:	2107      	movs	r1, #7
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	0d1b      	lsrs	r3, r3, #20
 80018c4:	f003 031f 	and.w	r3, r3, #31
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	431a      	orrs	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0318 	and.w	r3, r3, #24
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001904:	40d9      	lsrs	r1, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	400b      	ands	r3, r1
 800190a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800190e:	431a      	orrs	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001916:	bf00      	nop
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	0007ffff 	.word	0x0007ffff

08001928 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001938:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6093      	str	r3, [r2, #8]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800195c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001960:	d101      	bne.n	8001966 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001984:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001988:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019b0:	d101      	bne.n	80019b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a00:	f043 0202 	orr.w	r2, r3, #2
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <LL_ADC_IsEnabled+0x18>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_ADC_IsEnabled+0x1a>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d101      	bne.n	8001a52 <LL_ADC_IsDisableOngoing+0x18>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_ADC_IsDisableOngoing+0x1a>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a74:	f043 0204 	orr.w	r2, r3, #4
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a9c:	f043 0210 	orr.w	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d101      	bne.n	8001ac8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e000      	b.n	8001aca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ae6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d101      	bne.n	8001b16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e12f      	b.n	8001d9e <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f007 fa03 	bl	8008f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fef1 	bl	800194c <LL_ADC_IsDeepPowerDownEnabled>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fed7 	bl	8001928 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff0c 	bl	800199c <LL_ADC_IsInternalRegulatorEnabled>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fef0 	bl	8001974 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b94:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_ADC_Init+0x284>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	099b      	lsrs	r3, r3, #6
 8001b9a:	4a84      	ldr	r2, [pc, #528]	; (8001dac <HAL_ADC_Init+0x288>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	099b      	lsrs	r3, r3, #6
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ba8:	e002      	b.n	8001bb0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f9      	bne.n	8001baa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff feee 	bl	800199c <LL_ADC_IsInternalRegulatorEnabled>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10d      	bne.n	8001be2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	f043 0210 	orr.w	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd6:	f043 0201 	orr.w	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff62 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 8001bec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 80c8 	bne.w	8001d8c <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 80c4 	bne.w	8001d8c <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c08:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c0c:	f043 0202 	orr.w	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fefb 	bl	8001a14 <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10b      	bne.n	8001c3c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c24:	4862      	ldr	r0, [pc, #392]	; (8001db0 <HAL_ADC_Init+0x28c>)
 8001c26:	f7ff fef5 	bl	8001a14 <LL_ADC_IsEnabled>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4619      	mov	r1, r3
 8001c36:	485f      	ldr	r0, [pc, #380]	; (8001db4 <HAL_ADC_Init+0x290>)
 8001c38:	f7ff fd4c 	bl	80016d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e5b      	ldrb	r3, [r3, #25]
 8001c40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	045b      	lsls	r3, r3, #17
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c84:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_ADC_Init+0x294>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff feff 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 8001cb2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ff20 	bl	8001afe <LL_ADC_INJ_IsConversionOngoing>
 8001cbe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d140      	bne.n	8001d48 <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d13d      	bne.n	8001d48 <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7e1b      	ldrb	r3, [r3, #24]
 8001cd4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cd6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cde:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cee:	f023 0306 	bic.w	r3, r3, #6
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d118      	bne.n	8001d38 <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d10:	f023 0304 	bic.w	r3, r3, #4
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1c:	4311      	orrs	r1, r2
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d22:	4311      	orrs	r1, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
 8001d36:	e007      	b.n	8001d48 <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d10c      	bne.n	8001d6a <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f023 010f 	bic.w	r1, r3, #15
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	1e5a      	subs	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	e007      	b.n	8001d7a <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 020f 	bic.w	r2, r2, #15
 8001d78:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f023 0303 	bic.w	r3, r3, #3
 8001d82:	f043 0201 	orr.w	r2, r3, #1
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
 8001d8a:	e007      	b.n	8001d9c <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	f043 0210 	orr.w	r2, r3, #16
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000048 	.word	0x20000048
 8001dac:	053e2d63 	.word	0x053e2d63
 8001db0:	50040000 	.word	0x50040000
 8001db4:	50040300 	.word	0x50040300
 8001db8:	fff0c007 	.word	0xfff0c007

08001dbc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe71 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d14f      	bne.n	8001e74 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Start+0x26>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e04b      	b.n	8001e7a <HAL_ADC_Start+0xbe>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fdd0 	bl	8002990 <ADC_Enable>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d137      	bne.n	8001e6a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e02:	f023 0301 	bic.w	r3, r3, #1
 8001e06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1a:	d106      	bne.n	8001e2a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e20:	f023 0206 	bic.w	r2, r3, #6
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e28:	e002      	b.n	8001e30 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	221c      	movs	r2, #28
 8001e36:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d007      	beq.n	8001e5e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fdfc 	bl	8001a60 <LL_ADC_REG_StartConversion>
 8001e68:	e006      	b.n	8001e78 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001e72:	e001      	b.n	8001e78 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
 8001e76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_Stop+0x16>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e023      	b.n	8001ee0 <HAL_ADC_Stop+0x5e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fcb8 	bl	8002818 <ADC_ConversionStop>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d111      	bne.n	8001ed6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fdf2 	bl	8002a9c <ADC_Disable>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d109      	bne.n	8001ed6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f043 0201 	orr.w	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d102      	bne.n	8001f00 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001efa:	2308      	movs	r3, #8
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e010      	b.n	8001f22 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	f043 0220 	orr.w	r2, r3, #32
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06f      	b.n	8001ffe <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001f1e:	2304      	movs	r3, #4
 8001f20:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f22:	f7ff fba7 	bl	8001674 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f28:	e021      	b.n	8001f6e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f30:	d01d      	beq.n	8001f6e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001f32:	f7ff fb9f 	bl	8001674 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d302      	bcc.n	8001f48 <HAL_ADC_PollForConversion+0x60>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d112      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10b      	bne.n	8001f6e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f043 0204 	orr.w	r2, r3, #4
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e047      	b.n	8001ffe <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0d6      	beq.n	8001f2a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fc3d 	bl	800180c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01c      	beq.n	8001fd2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e5b      	ldrb	r3, [r3, #25]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d118      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d105      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f043 0201 	orr.w	r2, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d104      	bne.n	8001fea <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e008      	b.n	8001ffc <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	220c      	movs	r2, #12
 8001ffa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0b6      	sub	sp, #216	; 0xd8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x22>
 800203e:	2302      	movs	r3, #2
 8002040:	e3d5      	b.n	80027ee <HAL_ADC_ConfigChannel+0x7ce>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd2e 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	f040 83ba 	bne.w	80027d0 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d824      	bhi.n	80020ae <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	3b02      	subs	r3, #2
 800206a:	2b03      	cmp	r3, #3
 800206c:	d81b      	bhi.n	80020a6 <HAL_ADC_ConfigChannel+0x86>
 800206e:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <HAL_ADC_ConfigChannel+0x54>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	08002085 	.word	0x08002085
 8002078:	0800208d 	.word	0x0800208d
 800207c:	08002095 	.word	0x08002095
 8002080:	0800209d 	.word	0x0800209d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	220c      	movs	r2, #12
 8002088:	605a      	str	r2, [r3, #4]
          break;
 800208a:	e011      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	2212      	movs	r2, #18
 8002090:	605a      	str	r2, [r3, #4]
          break;
 8002092:	e00d      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2218      	movs	r2, #24
 8002098:	605a      	str	r2, [r3, #4]
          break;
 800209a:	e009      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	605a      	str	r2, [r3, #4]
          break;
 80020a4:	e004      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2206      	movs	r2, #6
 80020aa:	605a      	str	r2, [r3, #4]
          break;
 80020ac:	e000      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80020ae:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	6859      	ldr	r1, [r3, #4]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	f7ff fbb8 	bl	8001832 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fcf2 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 80020cc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fd12 	bl	8001afe <LL_ADC_INJ_IsConversionOngoing>
 80020da:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f040 81c1 	bne.w	800246a <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 81bc 	bne.w	800246a <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020fa:	d10f      	bne.n	800211c <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2200      	movs	r2, #0
 8002106:	4619      	mov	r1, r3
 8002108:	f7ff fbbf 	bl	800188a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fb66 	bl	80017e6 <LL_ADC_SetSamplingTimeCommonConfig>
 800211a:	e00e      	b.n	800213a <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	461a      	mov	r2, r3
 800212a:	f7ff fbae 	bl	800188a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fb56 	bl	80017e6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	08db      	lsrs	r3, r3, #3
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d00a      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800216c:	f7ff fae6 	bl	800173c <LL_ADC_SetOffset>
 8002170:	e17b      	b.n	800246a <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fb03 	bl	8001784 <LL_ADC_GetOffsetChannel>
 800217e:	4603      	mov	r3, r0
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <HAL_ADC_ConfigChannel+0x17e>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2100      	movs	r1, #0
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff faf8 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002194:	4603      	mov	r3, r0
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	f003 021f 	and.w	r2, r3, #31
 800219c:	e01e      	b.n	80021dc <HAL_ADC_ConfigChannel+0x1bc>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff faed 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80021aa:	4603      	mov	r3, r0
 80021ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e004      	b.n	80021da <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80021d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x1d4>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0e9b      	lsrs	r3, r3, #26
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	e018      	b.n	8002226 <HAL_ADC_ConfigChannel+0x206>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002208:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800220c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002210:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800221c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002226:	429a      	cmp	r2, r3
 8002228:	d106      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fabc 	bl	80017b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff faa0 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002244:	4603      	mov	r3, r0
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x244>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2101      	movs	r1, #1
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fa95 	bl	8001784 <LL_ADC_GetOffsetChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	f003 021f 	and.w	r2, r3, #31
 8002262:	e01e      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x282>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fa8a 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002286:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800228a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002292:	2320      	movs	r3, #32
 8002294:	e004      	b.n	80022a0 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x29a>
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e9b      	lsrs	r3, r3, #26
 80022b4:	f003 031f 	and.w	r3, r3, #31
 80022b8:	e018      	b.n	80022ec <HAL_ADC_ConfigChannel+0x2cc>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e004      	b.n	80022ec <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 80022e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d106      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2200      	movs	r2, #0
 80022f6:	2101      	movs	r1, #1
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fa59 	bl	80017b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa3d 	bl	8001784 <LL_ADC_GetOffsetChannel>
 800230a:	4603      	mov	r3, r0
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10a      	bne.n	800232a <HAL_ADC_ConfigChannel+0x30a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2102      	movs	r1, #2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fa32 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002320:	4603      	mov	r3, r0
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	e01e      	b.n	8002368 <HAL_ADC_ConfigChannel+0x348>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2102      	movs	r1, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fa27 	bl	8001784 <LL_ADC_GetOffsetChannel>
 8002336:	4603      	mov	r3, r0
 8002338:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002348:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800234c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002350:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e004      	b.n	8002366 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800235c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x360>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0e9b      	lsrs	r3, r3, #26
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	e016      	b.n	80023ae <HAL_ADC_ConfigChannel+0x38e>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002392:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e004      	b.n	80023ae <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80023a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023a8:	fab3 f383 	clz	r3, r3
 80023ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d106      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2200      	movs	r2, #0
 80023b8:	2102      	movs	r1, #2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f9f8 	bl	80017b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2103      	movs	r1, #3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f9dc 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x3cc>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2103      	movs	r1, #3
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff f9d1 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	0e9b      	lsrs	r3, r3, #26
 80023e6:	f003 021f 	and.w	r2, r3, #31
 80023ea:	e017      	b.n	800241c <HAL_ADC_ConfigChannel+0x3fc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2103      	movs	r1, #3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff f9c6 	bl	8001784 <LL_ADC_GetOffsetChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002404:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002406:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800240e:	2320      	movs	r3, #32
 8002410:	e003      	b.n	800241a <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x414>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0e9b      	lsrs	r3, r3, #26
 800242e:	f003 031f 	and.w	r3, r3, #31
 8002432:	e011      	b.n	8002458 <HAL_ADC_ConfigChannel+0x438>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002444:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002458:	429a      	cmp	r2, r3
 800245a:	d106      	bne.n	800246a <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2200      	movs	r2, #0
 8002462:	2103      	movs	r1, #3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff f9a3 	bl	80017b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fad0 	bl	8001a14 <LL_ADC_IsEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 8140 	bne.w	80026fc <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6819      	ldr	r1, [r3, #0]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	461a      	mov	r2, r3
 800248a:	f7ff fa29 	bl	80018e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	4a8f      	ldr	r2, [pc, #572]	; (80026d0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	f040 8131 	bne.w	80026fc <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10b      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x4a2>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2b09      	cmp	r3, #9
 80024b8:	bf94      	ite	ls
 80024ba:	2301      	movls	r3, #1
 80024bc:	2300      	movhi	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	e019      	b.n	80024f6 <HAL_ADC_ConfigChannel+0x4d6>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024d2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80024de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2b09      	cmp	r3, #9
 80024ee:	bf94      	ite	ls
 80024f0:	2301      	movls	r3, #1
 80024f2:	2300      	movhi	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d079      	beq.n	80025ee <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002502:	2b00      	cmp	r3, #0
 8002504:	d107      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x4f6>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	0e9b      	lsrs	r3, r3, #26
 800250c:	3301      	adds	r3, #1
 800250e:	069b      	lsls	r3, r3, #26
 8002510:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002514:	e015      	b.n	8002542 <HAL_ADC_ConfigChannel+0x522>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002526:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800252e:	2320      	movs	r3, #32
 8002530:	e003      	b.n	800253a <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3301      	adds	r3, #1
 800253c:	069b      	lsls	r3, r3, #26
 800253e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x542>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	3301      	adds	r3, #1
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	2101      	movs	r1, #1
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	e017      	b.n	8002592 <HAL_ADC_ConfigChannel+0x572>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002572:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800257a:	2320      	movs	r3, #32
 800257c:	e003      	b.n	8002586 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800257e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002580:	fab3 f383 	clz	r3, r3
 8002584:	b2db      	uxtb	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2101      	movs	r1, #1
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	ea42 0103 	orr.w	r1, r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x598>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	3301      	adds	r3, #1
 80025aa:	f003 021f 	and.w	r2, r3, #31
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	051b      	lsls	r3, r3, #20
 80025b6:	e018      	b.n	80025ea <HAL_ADC_ConfigChannel+0x5ca>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80025d0:	2320      	movs	r3, #32
 80025d2:	e003      	b.n	80025dc <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80025d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3301      	adds	r3, #1
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	4613      	mov	r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4413      	add	r3, r2
 80025e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ea:	430b      	orrs	r3, r1
 80025ec:	e081      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d107      	bne.n	800260a <HAL_ADC_ConfigChannel+0x5ea>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	3301      	adds	r3, #1
 8002602:	069b      	lsls	r3, r3, #26
 8002604:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002608:	e015      	b.n	8002636 <HAL_ADC_ConfigChannel+0x616>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e003      	b.n	800262e <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	3301      	adds	r3, #1
 8002630:	069b      	lsls	r3, r3, #26
 8002632:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	2b00      	cmp	r3, #0
 8002640:	d109      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x636>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	3301      	adds	r3, #1
 800264a:	f003 031f 	and.w	r3, r3, #31
 800264e:	2101      	movs	r1, #1
 8002650:	fa01 f303 	lsl.w	r3, r1, r3
 8002654:	e017      	b.n	8002686 <HAL_ADC_ConfigChannel+0x666>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	61fb      	str	r3, [r7, #28]
  return result;
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e003      	b.n	800267a <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	3301      	adds	r3, #1
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2101      	movs	r1, #1
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	ea42 0103 	orr.w	r1, r2, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10d      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x692>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0e9b      	lsrs	r3, r3, #26
 800269c:	3301      	adds	r3, #1
 800269e:	f003 021f 	and.w	r2, r3, #31
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	3b1e      	subs	r3, #30
 80026aa:	051b      	lsls	r3, r3, #20
 80026ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026b0:	e01e      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x6d0>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	fa93 f3a3 	rbit	r3, r3
 80026be:	613b      	str	r3, [r7, #16]
  return result;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80026ca:	2320      	movs	r3, #32
 80026cc:	e006      	b.n	80026dc <HAL_ADC_ConfigChannel+0x6bc>
 80026ce:	bf00      	nop
 80026d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1e      	subs	r3, #30
 80026ea:	051b      	lsls	r3, r3, #20
 80026ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026f0:	430b      	orrs	r3, r1
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	4619      	mov	r1, r3
 80026f8:	f7ff f8c7 	bl	800188a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d06c      	beq.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002708:	483c      	ldr	r0, [pc, #240]	; (80027fc <HAL_ADC_ConfigChannel+0x7dc>)
 800270a:	f7ff f809 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 800270e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <HAL_ADC_ConfigChannel+0x7e0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d127      	bne.n	800276c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800271c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002720:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d121      	bne.n	800276c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a35      	ldr	r2, [pc, #212]	; (8002804 <HAL_ADC_ConfigChannel+0x7e4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d157      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002732:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002736:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800273a:	4619      	mov	r1, r3
 800273c:	482f      	ldr	r0, [pc, #188]	; (80027fc <HAL_ADC_ConfigChannel+0x7dc>)
 800273e:	f7fe ffdc 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002742:	4b31      	ldr	r3, [pc, #196]	; (8002808 <HAL_ADC_ConfigChannel+0x7e8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	099b      	lsrs	r3, r3, #6
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_ADC_ConfigChannel+0x7ec>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800275c:	e002      	b.n	8002764 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3b01      	subs	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800276a:	e03a      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_ADC_ConfigChannel+0x7f0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d113      	bne.n	800279e <HAL_ADC_ConfigChannel+0x77e>
 8002776:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800277a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10d      	bne.n	800279e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_ADC_ConfigChannel+0x7e4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d12a      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800278c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002794:	4619      	mov	r1, r3
 8002796:	4819      	ldr	r0, [pc, #100]	; (80027fc <HAL_ADC_ConfigChannel+0x7dc>)
 8002798:	f7fe ffaf 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279c:	e021      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1c      	ldr	r2, [pc, #112]	; (8002814 <HAL_ADC_ConfigChannel+0x7f4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d11c      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d116      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_ADC_ConfigChannel+0x7e4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d111      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <HAL_ADC_ConfigChannel+0x7dc>)
 80027ca:	f7fe ff96 	bl	80016fa <LL_ADC_SetCommonPathInternalCh>
 80027ce:	e008      	b.n	80027e2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80027ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	37d8      	adds	r7, #216	; 0xd8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	80080000 	.word	0x80080000
 80027fc:	50040300 	.word	0x50040300
 8002800:	c7520000 	.word	0xc7520000
 8002804:	50040000 	.word	0x50040000
 8002808:	20000048 	.word	0x20000048
 800280c:	053e2d63 	.word	0x053e2d63
 8002810:	cb840000 	.word	0xcb840000
 8002814:	80000001 	.word	0x80000001

08002818 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff f93e 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 8002834:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f95f 	bl	8001afe <LL_ADC_INJ_IsConversionOngoing>
 8002840:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8098 	beq.w	8002980 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02a      	beq.n	80028b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7e5b      	ldrb	r3, [r3, #25]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d126      	bne.n	80028b4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7e1b      	ldrb	r3, [r3, #24]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d122      	bne.n	80028b4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800286e:	2301      	movs	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002872:	e014      	b.n	800289e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4a45      	ldr	r2, [pc, #276]	; (800298c <ADC_ConversionStop+0x174>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d90d      	bls.n	8002898 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	f043 0210 	orr.w	r2, r3, #16
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e074      	b.n	8002982 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	3301      	adds	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b40      	cmp	r3, #64	; 0x40
 80028aa:	d1e3      	bne.n	8002874 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2240      	movs	r2, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d014      	beq.n	80028e4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff f8f6 	bl	8001ab0 <LL_ADC_REG_IsConversionOngoing>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f8b3 	bl	8001a3a <LL_ADC_IsDisableOngoing>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f8d2 	bl	8001a88 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d014      	beq.n	8002914 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f905 	bl	8001afe <LL_ADC_INJ_IsConversionOngoing>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f89b 	bl	8001a3a <LL_ADC_IsDisableOngoing>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d104      	bne.n	8002914 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff f8e1 	bl	8001ad6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d005      	beq.n	8002926 <ADC_ConversionStop+0x10e>
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d105      	bne.n	800292c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002920:	230c      	movs	r3, #12
 8002922:	617b      	str	r3, [r7, #20]
        break;
 8002924:	e005      	b.n	8002932 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002926:	2308      	movs	r3, #8
 8002928:	617b      	str	r3, [r7, #20]
        break;
 800292a:	e002      	b.n	8002932 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800292c:	2304      	movs	r3, #4
 800292e:	617b      	str	r3, [r7, #20]
        break;
 8002930:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002932:	f7fe fe9f 	bl	8001674 <HAL_GetTick>
 8002936:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002938:	e01b      	b.n	8002972 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800293a:	f7fe fe9b 	bl	8001674 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b05      	cmp	r3, #5
 8002946:	d914      	bls.n	8002972 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	f043 0210 	orr.w	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e007      	b.n	8002982 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1dc      	bne.n	800293a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	a33fffff 	.word	0xa33fffff

08002990 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff f837 	bl	8001a14 <LL_ADC_IsEnabled>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d169      	bne.n	8002a80 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <ADC_Enable+0xfc>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	f043 0210 	orr.w	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	f043 0201 	orr.w	r2, r3, #1
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e055      	b.n	8002a82 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe fff2 	bl	80019c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80029e0:	482b      	ldr	r0, [pc, #172]	; (8002a90 <ADC_Enable+0x100>)
 80029e2:	f7fe fe9d 	bl	8001720 <LL_ADC_GetCommonPathInternalCh>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <ADC_Enable+0x104>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <ADC_Enable+0x108>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a0a:	e002      	b.n	8002a12 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fe2c 	bl	8001674 <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a1e:	e028      	b.n	8002a72 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fe fff5 	bl	8001a14 <LL_ADC_IsEnabled>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d104      	bne.n	8002a3a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe ffc5 	bl	80019c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a3a:	f7fe fe1b 	bl	8001674 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d914      	bls.n	8002a72 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d00d      	beq.n	8002a72 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	f043 0210 	orr.w	r2, r3, #16
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e007      	b.n	8002a82 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d1cf      	bne.n	8002a20 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	8000003f 	.word	0x8000003f
 8002a90:	50040300 	.word	0x50040300
 8002a94:	20000048 	.word	0x20000048
 8002a98:	053e2d63 	.word	0x053e2d63

08002a9c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe ffc6 	bl	8001a3a <LL_ADC_IsDisableOngoing>
 8002aae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe ffad 	bl	8001a14 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d047      	beq.n	8002b50 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d144      	bne.n	8002b50 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030d 	and.w	r3, r3, #13
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10c      	bne.n	8002aee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe ff87 	bl	80019ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe fdc5 	bl	8001674 <HAL_GetTick>
 8002aea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aec:	e029      	b.n	8002b42 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af2:	f043 0210 	orr.w	r2, r3, #16
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e023      	b.n	8002b52 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b0a:	f7fe fdb3 	bl	8001674 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d914      	bls.n	8002b42 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	f043 0210 	orr.w	r2, r3, #16
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e007      	b.n	8002b52 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1dc      	bne.n	8002b0a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0b      	blt.n	8002bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <__NVIC_EnableIRQ+0x38>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff29 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d24:	f7ff ff3e 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	6978      	ldr	r0, [r7, #20]
 8002d30:	f7ff ff8e 	bl	8002c50 <NVIC_EncodePriority>
 8002d34:	4602      	mov	r2, r0
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff ff5d 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d42:	bf00      	nop
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff31 	bl	8002bc0 <__NVIC_EnableIRQ>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ffa2 	bl	8002cb8 <SysTick_Config>
 8002d74:	4603      	mov	r3, r0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e014      	b.n	8002dba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	791b      	ldrb	r3, [r3, #4]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f006 f943 	bl	800902c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2202      	movs	r2, #2
 8002daa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	795b      	ldrb	r3, [r3, #5]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_DAC_Start_DMA+0x1e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0ab      	b.n	8002f3a <HAL_DAC_Start_DMA+0x176>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2202      	movs	r2, #2
 8002dec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d12f      	bne.n	8002e54 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_DAC_Start_DMA+0x180>)
 8002dfa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a51      	ldr	r2, [pc, #324]	; (8002f48 <HAL_DAC_Start_DMA+0x184>)
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_DAC_Start_DMA+0x188>)
 8002e0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d013      	beq.n	8002e4a <HAL_DAC_Start_DMA+0x86>
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d845      	bhi.n	8002eb4 <HAL_DAC_Start_DMA+0xf0>
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_DAC_Start_DMA+0x72>
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d005      	beq.n	8002e40 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002e34:	e03e      	b.n	8002eb4 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	613b      	str	r3, [r7, #16]
        break;
 8002e3e:	e03c      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	330c      	adds	r3, #12
 8002e46:	613b      	str	r3, [r7, #16]
        break;
 8002e48:	e037      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3310      	adds	r3, #16
 8002e50:	613b      	str	r3, [r7, #16]
        break;
 8002e52:	e032      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a3d      	ldr	r2, [pc, #244]	; (8002f50 <HAL_DAC_Start_DMA+0x18c>)
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a3c      	ldr	r2, [pc, #240]	; (8002f54 <HAL_DAC_Start_DMA+0x190>)
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a3b      	ldr	r2, [pc, #236]	; (8002f58 <HAL_DAC_Start_DMA+0x194>)
 8002e6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e7a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d013      	beq.n	8002eaa <HAL_DAC_Start_DMA+0xe6>
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b08      	cmp	r3, #8
 8002e86:	d817      	bhi.n	8002eb8 <HAL_DAC_Start_DMA+0xf4>
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_DAC_Start_DMA+0xd2>
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d005      	beq.n	8002ea0 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002e94:	e010      	b.n	8002eb8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	3314      	adds	r3, #20
 8002e9c:	613b      	str	r3, [r7, #16]
        break;
 8002e9e:	e00c      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	613b      	str	r3, [r7, #16]
        break;
 8002ea8:	e007      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	331c      	adds	r3, #28
 8002eb0:	613b      	str	r3, [r7, #16]
        break;
 8002eb2:	e002      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
        break;
 8002eb4:	bf00      	nop
 8002eb6:	e000      	b.n	8002eba <HAL_DAC_Start_DMA+0xf6>
        break;
 8002eb8:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ece:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6898      	ldr	r0, [r3, #8]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	f000 fb15 	bl	8003508 <HAL_DMA_Start_IT>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	75fb      	strb	r3, [r7, #23]
 8002ee2:	e010      	b.n	8002f06 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002ef2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68d8      	ldr	r0, [r3, #12]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	f000 fb03 	bl	8003508 <HAL_DMA_Start_IT>
 8002f02:	4603      	mov	r3, r0
 8002f04:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6819      	ldr	r1, [r3, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2201      	movs	r2, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	e005      	b.n	8002f38 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f043 0204 	orr.w	r2, r3, #4
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	080032a5 	.word	0x080032a5
 8002f48:	080032c7 	.word	0x080032c7
 8002f4c:	080032e3 	.word	0x080032e3
 8002f50:	0800334d 	.word	0x0800334d
 8002f54:	0800336f 	.word	0x0800336f
 8002f58:	0800338b 	.word	0x0800338b

08002f5c <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6819      	ldr	r1, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	400a      	ands	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2201      	movs	r2, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10d      	bne.n	8002fc2 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb27 	bl	80035fe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e00c      	b.n	8002fdc <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fb19 	bl	80035fe <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002fda:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	795b      	ldrb	r3, [r3, #5]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_DAC_ConfigChannel+0x1c>
 800303c:	2302      	movs	r3, #2
 800303e:	e12a      	b.n	8003296 <HAL_DAC_ConfigChannel+0x272>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2202      	movs	r2, #2
 800304a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d174      	bne.n	800313e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003054:	f7fe fb0e 	bl	8001674 <HAL_GetTick>
 8003058:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d134      	bne.n	80030ca <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003060:	e011      	b.n	8003086 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003062:	f7fe fb07 	bl	8001674 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	d90a      	bls.n	8003086 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f043 0208 	orr.w	r2, r3, #8
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2203      	movs	r2, #3
 8003080:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e107      	b.n	8003296 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1e6      	bne.n	8003062 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003094:	2001      	movs	r0, #1
 8003096:	f7fe faf9 	bl	800168c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	69d2      	ldr	r2, [r2, #28]
 80030a2:	641a      	str	r2, [r3, #64]	; 0x40
 80030a4:	e01e      	b.n	80030e4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030a6:	f7fe fae5 	bl	8001674 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d90a      	bls.n	80030ca <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	f043 0208 	orr.w	r2, r3, #8
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2203      	movs	r2, #3
 80030c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e0e5      	b.n	8003296 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	dbe8      	blt.n	80030a6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f7fe fad9 	bl	800168c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	69d2      	ldr	r2, [r2, #28]
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	ea02 0103 	and.w	r1, r2, r3
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	6a1a      	ldr	r2, [r3, #32]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	409a      	lsls	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	21ff      	movs	r1, #255	; 0xff
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	ea02 0103 	and.w	r1, r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	409a      	lsls	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d11d      	bne.n	8003182 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	221f      	movs	r2, #31
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	4013      	ands	r3, r2
 8003160:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0310 	and.w	r3, r3, #16
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	4313      	orrs	r3, r2
 8003178:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2207      	movs	r2, #7
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	4013      	ands	r3, r2
 800319c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6819      	ldr	r1, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43da      	mvns	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	400a      	ands	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	43db      	mvns	r3, r3
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	4013      	ands	r3, r2
 8003204:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	4313      	orrs	r3, r2
 800321c:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003226:	d104      	bne.n	8003232 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e018      	b.n	8003264 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d104      	bne.n	8003244 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e00f      	b.n	8003264 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003244:	f002 fb22 	bl	800588c <HAL_RCC_GetHCLKFreq>
 8003248:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <HAL_DAC_ConfigChannel+0x27c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d904      	bls.n	800325c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e003      	b.n	8003264 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003262:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	22c0      	movs	r2, #192	; 0xc0
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	400a      	ands	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	04c4b400 	.word	0x04c4b400

080032a4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff fe97 	bl	8002fe6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	711a      	strb	r2, [r3, #4]
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b084      	sub	sp, #16
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f7ff fe90 	bl	8002ffa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f043 0204 	orr.w	r2, r3, #4
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff fe86 	bl	800300e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	711a      	strb	r2, [r3, #4]
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ffd8 	bl	8003310 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	711a      	strb	r2, [r3, #4]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff ffd1 	bl	8003324 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f043 0204 	orr.w	r2, r3, #4
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7ff ffc7 	bl	8003338 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	711a      	strb	r2, [r3, #4]
}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e08d      	b.n	80034e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4b47      	ldr	r3, [pc, #284]	; (80034f0 <HAL_DMA_Init+0x138>)
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d80f      	bhi.n	80033f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <HAL_DMA_Init+0x13c>)
 80033de:	4413      	add	r3, r2
 80033e0:	4a45      	ldr	r2, [pc, #276]	; (80034f8 <HAL_DMA_Init+0x140>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	009a      	lsls	r2, r3, #2
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a42      	ldr	r2, [pc, #264]	; (80034fc <HAL_DMA_Init+0x144>)
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
 80033f4:	e00e      	b.n	8003414 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_DMA_Init+0x148>)
 80033fe:	4413      	add	r3, r2
 8003400:	4a3d      	ldr	r2, [pc, #244]	; (80034f8 <HAL_DMA_Init+0x140>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	091b      	lsrs	r3, r3, #4
 8003408:	009a      	lsls	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a3c      	ldr	r2, [pc, #240]	; (8003504 <HAL_DMA_Init+0x14c>)
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800342a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800342e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	4313      	orrs	r3, r2
 800345c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fa12 	bl	8003890 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003474:	d102      	bne.n	800347c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003490:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d010      	beq.n	80034bc <HAL_DMA_Init+0x104>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	d80c      	bhi.n	80034bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa32 	bl	800390c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	e008      	b.n	80034ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020407 	.word	0x40020407
 80034f4:	bffdfff8 	.word	0xbffdfff8
 80034f8:	cccccccd 	.word	0xcccccccd
 80034fc:	40020000 	.word	0x40020000
 8003500:	bffdfbf8 	.word	0xbffdfbf8
 8003504:	40020400 	.word	0x40020400

08003508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_DMA_Start_IT+0x20>
 8003524:	2302      	movs	r3, #2
 8003526:	e066      	b.n	80035f6 <HAL_DMA_Start_IT+0xee>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b01      	cmp	r3, #1
 800353a:	d155      	bne.n	80035e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f957 	bl	8003814 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	2b00      	cmp	r3, #0
 800356c:	d008      	beq.n	8003580 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 020e 	orr.w	r2, r2, #14
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e00f      	b.n	80035a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0204 	bic.w	r2, r2, #4
 800358e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 020a 	orr.w	r2, r2, #10
 800359e:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	e005      	b.n	80035f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035f0:	2302      	movs	r3, #2
 80035f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d008      	beq.n	8003628 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2204      	movs	r2, #4
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e040      	b.n	80036aa <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 020e 	bic.w	r2, r2, #14
 8003636:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003646:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	f003 021c 	and.w	r2, r3, #28
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f202 	lsl.w	r2, r1, r2
 800366a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003674:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00c      	beq.n	8003698 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800368c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003696:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b084      	sub	sp, #16
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d2:	f003 031c 	and.w	r3, r3, #28
 80036d6:	2204      	movs	r2, #4
 80036d8:	409a      	lsls	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d026      	beq.n	8003730 <HAL_DMA_IRQHandler+0x7a>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d021      	beq.n	8003730 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0204 	bic.w	r2, r2, #4
 8003708:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f003 021c 	and.w	r2, r3, #28
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2104      	movs	r1, #4
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	2b00      	cmp	r3, #0
 8003724:	d071      	beq.n	800380a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800372e:	e06c      	b.n	800380a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	f003 031c 	and.w	r3, r3, #28
 8003738:	2202      	movs	r2, #2
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d02e      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xec>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d029      	beq.n	80037a2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10b      	bne.n	8003774 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 020a 	bic.w	r2, r2, #10
 800376a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003778:	f003 021c 	and.w	r2, r3, #28
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2102      	movs	r1, #2
 8003782:	fa01 f202 	lsl.w	r2, r1, r2
 8003786:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	2b00      	cmp	r3, #0
 8003796:	d038      	beq.n	800380a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037a0:	e033      	b.n	800380a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f003 031c 	and.w	r3, r3, #28
 80037aa:	2208      	movs	r2, #8
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d02a      	beq.n	800380c <HAL_DMA_IRQHandler+0x156>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d025      	beq.n	800380c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 020e 	bic.w	r2, r2, #14
 80037ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d4:	f003 021c 	and.w	r2, r3, #28
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800380a:	bf00      	nop
 800380c:	bf00      	nop
}
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800382a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003830:	2b00      	cmp	r3, #0
 8003832:	d004      	beq.n	800383e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800383c:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 021c 	and.w	r2, r3, #28
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	2101      	movs	r1, #1
 800384c:	fa01 f202 	lsl.w	r2, r1, r2
 8003850:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b10      	cmp	r3, #16
 8003860:	d108      	bne.n	8003874 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003872:	e007      	b.n	8003884 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	60da      	str	r2, [r3, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	461a      	mov	r2, r3
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d80a      	bhi.n	80038ba <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038b0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6493      	str	r3, [r2, #72]	; 0x48
 80038b8:	e007      	b.n	80038ca <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	009a      	lsls	r2, r3, #2
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80038c4:	4413      	add	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3b08      	subs	r3, #8
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80038d4:	fba2 2303 	umull	r2, r3, r2, r3
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80038e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f003 031f 	and.w	r3, r3, #31
 80038e8:	2201      	movs	r2, #1
 80038ea:	409a      	lsls	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	40020407 	.word	0x40020407
 8003900:	4002081c 	.word	0x4002081c
 8003904:	cccccccd 	.word	0xcccccccd
 8003908:	40020880 	.word	0x40020880

0800390c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	b2db      	uxtb	r3, r3
 800391a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003920:	4413      	add	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	461a      	mov	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a08      	ldr	r2, [pc, #32]	; (8003950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800392e:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b01      	subs	r3, #1
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2201      	movs	r2, #1
 800393a:	409a      	lsls	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	1000823f 	.word	0x1000823f
 8003950:	40020940 	.word	0x40020940

08003954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800395e:	2300      	movs	r3, #0
 8003960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003962:	e166      	b.n	8003c32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	2101      	movs	r1, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	4013      	ands	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8158 	beq.w	8003c2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d005      	beq.n	8003994 <HAL_GPIO_Init+0x40>
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d130      	bne.n	80039f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039ca:	2201      	movs	r2, #1
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	091b      	lsrs	r3, r3, #4
 80039e0:	f003 0201 	and.w	r2, r3, #1
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d017      	beq.n	8003a32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d123      	bne.n	8003a86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	08da      	lsrs	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3208      	adds	r2, #8
 8003a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	220f      	movs	r2, #15
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	08da      	lsrs	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3208      	adds	r2, #8
 8003a80:	6939      	ldr	r1, [r7, #16]
 8003a82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	2203      	movs	r2, #3
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0203 	and.w	r2, r3, #3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f000 80b2 	beq.w	8003c2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac8:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <HAL_GPIO_Init+0x2fc>)
 8003aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <HAL_GPIO_Init+0x2fc>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ad4:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <HAL_GPIO_Init+0x2fc>)
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ae0:	4a5c      	ldr	r2, [pc, #368]	; (8003c54 <HAL_GPIO_Init+0x300>)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	089b      	lsrs	r3, r3, #2
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	220f      	movs	r2, #15
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	43db      	mvns	r3, r3
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	4013      	ands	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b0a:	d02b      	beq.n	8003b64 <HAL_GPIO_Init+0x210>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_GPIO_Init+0x304>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d025      	beq.n	8003b60 <HAL_GPIO_Init+0x20c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a51      	ldr	r2, [pc, #324]	; (8003c5c <HAL_GPIO_Init+0x308>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d01f      	beq.n	8003b5c <HAL_GPIO_Init+0x208>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a50      	ldr	r2, [pc, #320]	; (8003c60 <HAL_GPIO_Init+0x30c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d019      	beq.n	8003b58 <HAL_GPIO_Init+0x204>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a4f      	ldr	r2, [pc, #316]	; (8003c64 <HAL_GPIO_Init+0x310>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_GPIO_Init+0x200>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a4e      	ldr	r2, [pc, #312]	; (8003c68 <HAL_GPIO_Init+0x314>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00d      	beq.n	8003b50 <HAL_GPIO_Init+0x1fc>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a4d      	ldr	r2, [pc, #308]	; (8003c6c <HAL_GPIO_Init+0x318>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d007      	beq.n	8003b4c <HAL_GPIO_Init+0x1f8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a4c      	ldr	r2, [pc, #304]	; (8003c70 <HAL_GPIO_Init+0x31c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_GPIO_Init+0x1f4>
 8003b44:	2307      	movs	r3, #7
 8003b46:	e00e      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	e00c      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b4c:	2306      	movs	r3, #6
 8003b4e:	e00a      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b50:	2305      	movs	r3, #5
 8003b52:	e008      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e006      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e004      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e002      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_GPIO_Init+0x212>
 8003b64:	2300      	movs	r3, #0
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	f002 0203 	and.w	r2, r2, #3
 8003b6c:	0092      	lsls	r2, r2, #2
 8003b6e:	4093      	lsls	r3, r2
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b76:	4937      	ldr	r1, [pc, #220]	; (8003c54 <HAL_GPIO_Init+0x300>)
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	089b      	lsrs	r3, r3, #2
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b84:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ba8:	4a32      	ldr	r2, [pc, #200]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bfc:	4a1d      	ldr	r2, [pc, #116]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <HAL_GPIO_Init+0x320>)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f47f ae91 	bne.w	8003964 <HAL_GPIO_Init+0x10>
  }
}
 8003c42:	bf00      	nop
 8003c44:	bf00      	nop
 8003c46:	371c      	adds	r7, #28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40010000 	.word	0x40010000
 8003c58:	48000400 	.word	0x48000400
 8003c5c:	48000800 	.word	0x48000800
 8003c60:	48000c00 	.word	0x48000c00
 8003c64:	48001000 	.word	0x48001000
 8003c68:	48001400 	.word	0x48001400
 8003c6c:	48001800 	.word	0x48001800
 8003c70:	48001c00 	.word	0x48001c00
 8003c74:	40010400 	.word	0x40010400

08003c78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c86:	e0c9      	b.n	8003e1c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c88:	2201      	movs	r2, #1
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80bc 	beq.w	8003e16 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c9e:	4a66      	ldr	r2, [pc, #408]	; (8003e38 <HAL_GPIO_DeInit+0x1c0>)
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003caa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	220f      	movs	r2, #15
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cc6:	d02b      	beq.n	8003d20 <HAL_GPIO_DeInit+0xa8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a5c      	ldr	r2, [pc, #368]	; (8003e3c <HAL_GPIO_DeInit+0x1c4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d025      	beq.n	8003d1c <HAL_GPIO_DeInit+0xa4>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a5b      	ldr	r2, [pc, #364]	; (8003e40 <HAL_GPIO_DeInit+0x1c8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d01f      	beq.n	8003d18 <HAL_GPIO_DeInit+0xa0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a5a      	ldr	r2, [pc, #360]	; (8003e44 <HAL_GPIO_DeInit+0x1cc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d019      	beq.n	8003d14 <HAL_GPIO_DeInit+0x9c>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a59      	ldr	r2, [pc, #356]	; (8003e48 <HAL_GPIO_DeInit+0x1d0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d013      	beq.n	8003d10 <HAL_GPIO_DeInit+0x98>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <HAL_GPIO_DeInit+0x1d4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d00d      	beq.n	8003d0c <HAL_GPIO_DeInit+0x94>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_GPIO_DeInit+0x1d8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <HAL_GPIO_DeInit+0x90>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a56      	ldr	r2, [pc, #344]	; (8003e54 <HAL_GPIO_DeInit+0x1dc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_GPIO_DeInit+0x8c>
 8003d00:	2307      	movs	r3, #7
 8003d02:	e00e      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d04:	2308      	movs	r3, #8
 8003d06:	e00c      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d08:	2306      	movs	r3, #6
 8003d0a:	e00a      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	e008      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d10:	2304      	movs	r3, #4
 8003d12:	e006      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d14:	2303      	movs	r3, #3
 8003d16:	e004      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e002      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_GPIO_DeInit+0xaa>
 8003d20:	2300      	movs	r3, #0
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	f002 0203 	and.w	r2, r2, #3
 8003d28:	0092      	lsls	r2, r2, #2
 8003d2a:	4093      	lsls	r3, r2
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d132      	bne.n	8003d98 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003d32:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	4947      	ldr	r1, [pc, #284]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	43db      	mvns	r3, r3
 8003d48:	4943      	ldr	r1, [pc, #268]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d4e:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	4940      	ldr	r1, [pc, #256]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d5c:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	43db      	mvns	r3, r3
 8003d64:	493c      	ldr	r1, [pc, #240]	; (8003e58 <HAL_GPIO_DeInit+0x1e0>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	220f      	movs	r2, #15
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <HAL_GPIO_DeInit+0x1c0>)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	482b      	ldr	r0, [pc, #172]	; (8003e38 <HAL_GPIO_DeInit+0x1c0>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	400a      	ands	r2, r1
 8003d92:	3302      	adds	r3, #2
 8003d94:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	2103      	movs	r1, #3
 8003da2:	fa01 f303 	lsl.w	r3, r1, r3
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	220f      	movs	r2, #15
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	08d2      	lsrs	r2, r2, #3
 8003dcc:	4019      	ands	r1, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3208      	adds	r2, #8
 8003dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2103      	movs	r1, #3
 8003de0:	fa01 f303 	lsl.w	r3, r1, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	2101      	movs	r1, #1
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2103      	movs	r1, #3
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	401a      	ands	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f47f af2f 	bne.w	8003c88 <HAL_GPIO_DeInit+0x10>
  }
}
 8003e2a:	bf00      	nop
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40010000 	.word	0x40010000
 8003e3c:	48000400 	.word	0x48000400
 8003e40:	48000800 	.word	0x48000800
 8003e44:	48000c00 	.word	0x48000c00
 8003e48:	48001000 	.word	0x48001000
 8003e4c:	48001400 	.word	0x48001400
 8003e50:	48001800 	.word	0x48001800
 8003e54:	48001c00 	.word	0x48001c00
 8003e58:	40010400 	.word	0x40010400

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	807b      	strh	r3, [r7, #2]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e6c:	787b      	ldrb	r3, [r7, #1]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e78:	e002      	b.n	8003e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e9e:	887a      	ldrh	r2, [r7, #2]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	041a      	lsls	r2, r3, #16
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	43d9      	mvns	r1, r3
 8003eaa:	887b      	ldrh	r3, [r7, #2]
 8003eac:	400b      	ands	r3, r1
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eca:	4b08      	ldr	r3, [pc, #32]	; (8003eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d006      	beq.n	8003ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed8:	88fb      	ldrh	r3, [r7, #6]
 8003eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f003 ff36 	bl	8007d50 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40010400 	.word	0x40010400

08003ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b082      	sub	sp, #8
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e081      	b.n	8004006 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d106      	bne.n	8003f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f005 f8f6 	bl	8009108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2224      	movs	r2, #36	; 0x24
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	e006      	b.n	8003f78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d104      	bne.n	8003f8a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69d9      	ldr	r1, [r3, #28]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1a      	ldr	r2, [r3, #32]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e021      	b.n	8004064 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f005 f8c3 	bl	80091c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	4608      	mov	r0, r1
 8004076:	4611      	mov	r1, r2
 8004078:	461a      	mov	r2, r3
 800407a:	4603      	mov	r3, r0
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	460b      	mov	r3, r1
 8004080:	813b      	strh	r3, [r7, #8]
 8004082:	4613      	mov	r3, r2
 8004084:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	f040 80f9 	bne.w	8004286 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x34>
 800409a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0ed      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_I2C_Mem_Write+0x4e>
 80040b6:	2302      	movs	r3, #2
 80040b8:	e0e6      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040c2:	f7fd fad7 	bl	8001674 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	2319      	movs	r3, #25
 80040ce:	2201      	movs	r2, #1
 80040d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fac3 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d1      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2221      	movs	r2, #33	; 0x21
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a3a      	ldr	r2, [r7, #32]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800410c:	88f8      	ldrh	r0, [r7, #6]
 800410e:	893a      	ldrh	r2, [r7, #8]
 8004110:	8979      	ldrh	r1, [r7, #10]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	9301      	str	r3, [sp, #4]
 8004116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	4603      	mov	r3, r0
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f9d3 	bl	80044c8 <I2C_RequestMemoryWrite>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0a9      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2bff      	cmp	r3, #255	; 0xff
 800413c:	d90e      	bls.n	800415c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22ff      	movs	r2, #255	; 0xff
 8004142:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	b2da      	uxtb	r2, r3
 800414a:	8979      	ldrh	r1, [r7, #10]
 800414c:	2300      	movs	r3, #0
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fc2b 	bl	80049b0 <I2C_TransferConfig>
 800415a:	e00f      	b.n	800417c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	b2da      	uxtb	r2, r3
 800416c:	8979      	ldrh	r1, [r7, #10]
 800416e:	2300      	movs	r3, #0
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fc1a 	bl	80049b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 faad 	bl	80046e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e07b      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d034      	beq.n	8004234 <HAL_I2C_Mem_Write+0x1c8>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d130      	bne.n	8004234 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fa3f 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04d      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2bff      	cmp	r3, #255	; 0xff
 80041f4:	d90e      	bls.n	8004214 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004200:	b2da      	uxtb	r2, r3
 8004202:	8979      	ldrh	r1, [r7, #10]
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fbcf 	bl	80049b0 <I2C_TransferConfig>
 8004212:	e00f      	b.n	8004234 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	b2da      	uxtb	r2, r3
 8004224:	8979      	ldrh	r1, [r7, #10]
 8004226:	2300      	movs	r3, #0
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fbbe 	bl	80049b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d19e      	bne.n	800417c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa8c 	bl	8004760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e01a      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6859      	ldr	r1, [r3, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_I2C_Mem_Write+0x224>)
 8004266:	400b      	ands	r3, r1
 8004268:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	e000      	b.n	8004288 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004286:	2302      	movs	r3, #2
  }
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	fe00e800 	.word	0xfe00e800

08004294 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	f040 80fd 	bne.w	80044b6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_I2C_Mem_Read+0x34>
 80042c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0f1      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Mem_Read+0x4e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0ea      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ea:	f7fd f9c3 	bl	8001674 <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f9af 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d5      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2222      	movs	r2, #34	; 0x22
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004334:	88f8      	ldrh	r0, [r7, #6]
 8004336:	893a      	ldrh	r2, [r7, #8]
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4603      	mov	r3, r0
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f913 	bl	8004570 <I2C_RequestMemoryRead>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0ad      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2bff      	cmp	r3, #255	; 0xff
 8004364:	d90e      	bls.n	8004384 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	4b52      	ldr	r3, [pc, #328]	; (80044c0 <HAL_I2C_Mem_Read+0x22c>)
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb17 	bl	80049b0 <I2C_TransferConfig>
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	4b4a      	ldr	r3, [pc, #296]	; (80044c0 <HAL_I2C_Mem_Read+0x22c>)
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fb06 	bl	80049b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	2200      	movs	r2, #0
 80043ac:	2104      	movs	r1, #4
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f956 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e07c      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d034      	beq.n	8004464 <HAL_I2C_Mem_Read+0x1d0>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d130      	bne.n	8004464 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	2200      	movs	r2, #0
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f927 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e04d      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2bff      	cmp	r3, #255	; 0xff
 8004424:	d90e      	bls.n	8004444 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	22ff      	movs	r2, #255	; 0xff
 800442a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004430:	b2da      	uxtb	r2, r3
 8004432:	8979      	ldrh	r1, [r7, #10]
 8004434:	2300      	movs	r3, #0
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 fab7 	bl	80049b0 <I2C_TransferConfig>
 8004442:	e00f      	b.n	8004464 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	b2da      	uxtb	r2, r3
 8004454:	8979      	ldrh	r1, [r7, #10]
 8004456:	2300      	movs	r3, #0
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 faa6 	bl	80049b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d19a      	bne.n	80043a4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f974 	bl	8004760 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e01a      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2220      	movs	r2, #32
 8004488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_I2C_Mem_Read+0x230>)
 8004496:	400b      	ands	r3, r1
 8004498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	e000      	b.n	80044b8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044b6:	2302      	movs	r3, #2
  }
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	80002400 	.word	0x80002400
 80044c4:	fe00e800 	.word	0xfe00e800

080044c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	817b      	strh	r3, [r7, #10]
 80044da:	460b      	mov	r3, r1
 80044dc:	813b      	strh	r3, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	8979      	ldrh	r1, [r7, #10]
 80044e8:	4b20      	ldr	r3, [pc, #128]	; (800456c <I2C_RequestMemoryWrite+0xa4>)
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044f0:	68f8      	ldr	r0, [r7, #12]
 80044f2:	f000 fa5d 	bl	80049b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f8f0 	bl	80046e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e02c      	b.n	8004564 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800450a:	88fb      	ldrh	r3, [r7, #6]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d105      	bne.n	800451c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004510:	893b      	ldrh	r3, [r7, #8]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
 800451a:	e015      	b.n	8004548 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800451c:	893b      	ldrh	r3, [r7, #8]
 800451e:	0a1b      	lsrs	r3, r3, #8
 8004520:	b29b      	uxth	r3, r3
 8004522:	b2da      	uxtb	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	69b9      	ldr	r1, [r7, #24]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f8d6 	bl	80046e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e012      	b.n	8004564 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2200      	movs	r2, #0
 8004550:	2180      	movs	r1, #128	; 0x80
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f000 f884 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3710      	adds	r7, #16
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	80002000 	.word	0x80002000

08004570 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	817b      	strh	r3, [r7, #10]
 8004582:	460b      	mov	r3, r1
 8004584:	813b      	strh	r3, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	b2da      	uxtb	r2, r3
 800458e:	8979      	ldrh	r1, [r7, #10]
 8004590:	4b20      	ldr	r3, [pc, #128]	; (8004614 <I2C_RequestMemoryRead+0xa4>)
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fa0a 	bl	80049b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	69b9      	ldr	r1, [r7, #24]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f000 f89d 	bl	80046e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e02c      	b.n	800460a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d105      	bne.n	80045c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045b6:	893b      	ldrh	r3, [r7, #8]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
 80045c0:	e015      	b.n	80045ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045c2:	893b      	ldrh	r3, [r7, #8]
 80045c4:	0a1b      	lsrs	r3, r3, #8
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	69b9      	ldr	r1, [r7, #24]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 f883 	bl	80046e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e012      	b.n	800460a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045e4:	893b      	ldrh	r3, [r7, #8]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2200      	movs	r2, #0
 80045f6:	2140      	movs	r1, #64	; 0x40
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f831 	bl	8004660 <I2C_WaitOnFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	80002000 	.word	0x80002000

08004618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d103      	bne.n	8004636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d007      	beq.n	8004654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	619a      	str	r2, [r3, #24]
  }
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	603b      	str	r3, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004670:	e022      	b.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004678:	d01e      	beq.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467a:	f7fc fffb 	bl	8001674 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d302      	bcc.n	8004690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d113      	bne.n	80046b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004694:	f043 0220 	orr.w	r2, r3, #32
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e00f      	b.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4013      	ands	r3, r2
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d0cd      	beq.n	8004672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ec:	e02c      	b.n	8004748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f870 	bl	80047d8 <I2C_IsErrorOccurred>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e02a      	b.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004708:	d01e      	beq.n	8004748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fc ffb3 	bl	8001674 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d113      	bne.n	8004748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e007      	b.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	d1cb      	bne.n	80046ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800476c:	e028      	b.n	80047c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68b9      	ldr	r1, [r7, #8]
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f830 	bl	80047d8 <I2C_IsErrorOccurred>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e026      	b.n	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fc ff77 	bl	8001674 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d113      	bne.n	80047c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479c:	f043 0220 	orr.w	r2, r3, #32
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e007      	b.n	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d1cf      	bne.n	800476e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	d075      	beq.n	80048f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2210      	movs	r2, #16
 800480a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800480c:	e056      	b.n	80048bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004814:	d052      	beq.n	80048bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fc ff2d 	bl	8001674 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <I2C_IsErrorOccurred+0x54>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d147      	bne.n	80048bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004836:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800483e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800484a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484e:	d12e      	bne.n	80048ae <I2C_IsErrorOccurred+0xd6>
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004856:	d02a      	beq.n	80048ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b20      	cmp	r3, #32
 800485c:	d027      	beq.n	80048ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800486e:	f7fc ff01 	bl	8001674 <HAL_GetTick>
 8004872:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004874:	e01b      	b.n	80048ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004876:	f7fc fefd 	bl	8001674 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b19      	cmp	r3, #25
 8004882:	d914      	bls.n	80048ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	f003 0320 	and.w	r3, r3, #32
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	d1dc      	bne.n	8004876 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	d003      	beq.n	80048d2 <I2C_IsErrorOccurred+0xfa>
 80048ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d09d      	beq.n	800480e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d103      	bne.n	80048e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2220      	movs	r2, #32
 80048e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00b      	beq.n	800491a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f043 0301 	orr.w	r3, r3, #1
 8004908:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004912:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	f043 0308 	orr.w	r3, r3, #8
 800492a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00b      	beq.n	800495e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	f043 0302 	orr.w	r3, r3, #2
 800494c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004956:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800495e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01c      	beq.n	80049a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f7ff fe56 	bl	8004618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <I2C_IsErrorOccurred+0x1d4>)
 8004978:	400b      	ands	r3, r1
 800497a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	431a      	orrs	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	fe00e800 	.word	0xfe00e800

080049b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	4613      	mov	r3, r2
 80049c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049c2:	897b      	ldrh	r3, [r7, #10]
 80049c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049c8:	7a7b      	ldrb	r3, [r7, #9]
 80049ca:	041b      	lsls	r3, r3, #16
 80049cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	4313      	orrs	r3, r2
 80049da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	0d5b      	lsrs	r3, r3, #21
 80049ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <I2C_TransferConfig+0x60>)
 80049f0:	430b      	orrs	r3, r1
 80049f2:	43db      	mvns	r3, r3
 80049f4:	ea02 0103 	and.w	r1, r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	03ff63ff 	.word	0x03ff63ff

08004a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d138      	bne.n	8004a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e032      	b.n	8004a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2224      	movs	r2, #36	; 0x24
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0201 	orr.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e000      	b.n	8004a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004a9c:	2302      	movs	r3, #2
  }
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	d139      	bne.n	8004b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e033      	b.n	8004b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2224      	movs	r2, #36	; 0x24
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b54:	d102      	bne.n	8004b5c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b5a:	e00b      	b.n	8004b74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6a:	d102      	bne.n	8004b72 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004b6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b70:	e000      	b.n	8004b74 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004b72:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40007000 	.word	0x40007000

08004b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d141      	bne.n	8004c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b92:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d131      	bne.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ba0:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ba6:	4a46      	ldr	r2, [pc, #280]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bb0:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bb8:	4a41      	ldr	r2, [pc, #260]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004bc0:	4b40      	ldr	r3, [pc, #256]	; (8004cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2232      	movs	r2, #50	; 0x32
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a3f      	ldr	r2, [pc, #252]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	0c9b      	lsrs	r3, r3, #18
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bd6:	e002      	b.n	8004bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bde:	4b38      	ldr	r3, [pc, #224]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bea:	d102      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f2      	bne.n	8004bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bf2:	4b33      	ldr	r3, [pc, #204]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfe:	d158      	bne.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e057      	b.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c04:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c14:	e04d      	b.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1c:	d141      	bne.n	8004ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c1e:	4b28      	ldr	r3, [pc, #160]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2a:	d131      	bne.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c32:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c3c:	4b20      	ldr	r3, [pc, #128]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c44:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004c4c:	4b1d      	ldr	r3, [pc, #116]	; (8004cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2232      	movs	r2, #50	; 0x32
 8004c52:	fb02 f303 	mul.w	r3, r2, r3
 8004c56:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c58:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5c:	0c9b      	lsrs	r3, r3, #18
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c62:	e002      	b.n	8004c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c6a:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c76:	d102      	bne.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d1f2      	bne.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8a:	d112      	bne.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e011      	b.n	8004cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c96:	4a0a      	ldr	r2, [pc, #40]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ca0:	e007      	b.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ca2:	4b07      	ldr	r3, [pc, #28]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004caa:	4a05      	ldr	r2, [pc, #20]	; (8004cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cb0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	40007000 	.word	0x40007000
 8004cc4:	20000048 	.word	0x20000048
 8004cc8:	431bde83 	.word	0x431bde83

08004ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f000 bc08 	b.w	80054f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce0:	4b96      	ldr	r3, [pc, #600]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cea:	4b94      	ldr	r3, [pc, #592]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80e4 	beq.w	8004eca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4c>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	f040 808b 	bne.w	8004e26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	f040 8087 	bne.w	8004e26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d18:	4b88      	ldr	r3, [pc, #544]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_OscConfig+0x64>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e3df      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1a      	ldr	r2, [r3, #32]
 8004d34:	4b81      	ldr	r3, [pc, #516]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <HAL_RCC_OscConfig+0x7e>
 8004d40:	4b7e      	ldr	r3, [pc, #504]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d48:	e005      	b.n	8004d56 <HAL_RCC_OscConfig+0x8a>
 8004d4a:	4b7c      	ldr	r3, [pc, #496]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d50:	091b      	lsrs	r3, r3, #4
 8004d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d223      	bcs.n	8004da2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fdcc 	bl	80058fc <RCC_SetFlashLatencyFromMSIRange>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e3c0      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d6e:	4b73      	ldr	r3, [pc, #460]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a72      	ldr	r2, [pc, #456]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d74:	f043 0308 	orr.w	r3, r3, #8
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	4b70      	ldr	r3, [pc, #448]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	496d      	ldr	r1, [pc, #436]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d8c:	4b6b      	ldr	r3, [pc, #428]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	021b      	lsls	r3, r3, #8
 8004d9a:	4968      	ldr	r1, [pc, #416]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	604b      	str	r3, [r1, #4]
 8004da0:	e025      	b.n	8004dee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004da2:	4b66      	ldr	r3, [pc, #408]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a65      	ldr	r2, [pc, #404]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004da8:	f043 0308 	orr.w	r3, r3, #8
 8004dac:	6013      	str	r3, [r2, #0]
 8004dae:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	4960      	ldr	r1, [pc, #384]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dc0:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	021b      	lsls	r3, r3, #8
 8004dce:	495b      	ldr	r1, [pc, #364]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fd8c 	bl	80058fc <RCC_SetFlashLatencyFromMSIRange>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e380      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004dee:	f000 fcc1 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 8004df2:	4602      	mov	r2, r0
 8004df4:	4b51      	ldr	r3, [pc, #324]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	4950      	ldr	r1, [pc, #320]	; (8004f40 <HAL_RCC_OscConfig+0x274>)
 8004e00:	5ccb      	ldrb	r3, [r1, r3]
 8004e02:	f003 031f 	and.w	r3, r3, #31
 8004e06:	fa22 f303 	lsr.w	r3, r2, r3
 8004e0a:	4a4e      	ldr	r2, [pc, #312]	; (8004f44 <HAL_RCC_OscConfig+0x278>)
 8004e0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e0e:	4b4e      	ldr	r3, [pc, #312]	; (8004f48 <HAL_RCC_OscConfig+0x27c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fc fbde 	bl	80015d4 <HAL_InitTick>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d052      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	e364      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d032      	beq.n	8004e94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e2e:	4b43      	ldr	r3, [pc, #268]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a42      	ldr	r2, [pc, #264]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e34:	f043 0301 	orr.w	r3, r3, #1
 8004e38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e3a:	f7fc fc1b 	bl	8001674 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e42:	f7fc fc17 	bl	8001674 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e34d      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e54:	4b39      	ldr	r3, [pc, #228]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0f0      	beq.n	8004e42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e60:	4b36      	ldr	r3, [pc, #216]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a35      	ldr	r2, [pc, #212]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e66:	f043 0308 	orr.w	r3, r3, #8
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	4930      	ldr	r1, [pc, #192]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e7e:	4b2f      	ldr	r3, [pc, #188]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	492b      	ldr	r1, [pc, #172]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
 8004e92:	e01a      	b.n	8004eca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e94:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a28      	ldr	r2, [pc, #160]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ea0:	f7fc fbe8 	bl	8001674 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ea8:	f7fc fbe4 	bl	8001674 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e31a      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x1dc>
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d073      	beq.n	8004fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d005      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x21c>
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b0c      	cmp	r3, #12
 8004ee0:	d10e      	bne.n	8004f00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d063      	beq.n	8004fbc <HAL_RCC_OscConfig+0x2f0>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d15f      	bne.n	8004fbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e2f7      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x24c>
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a0b      	ldr	r2, [pc, #44]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e025      	b.n	8004f64 <HAL_RCC_OscConfig+0x298>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f20:	d114      	bne.n	8004f4c <HAL_RCC_OscConfig+0x280>
 8004f22:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a05      	ldr	r2, [pc, #20]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a02      	ldr	r2, [pc, #8]	; (8004f3c <HAL_RCC_OscConfig+0x270>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e013      	b.n	8004f64 <HAL_RCC_OscConfig+0x298>
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	0800ef9c 	.word	0x0800ef9c
 8004f44:	20000048 	.word	0x20000048
 8004f48:	20000034 	.word	0x20000034
 8004f4c:	4ba0      	ldr	r3, [pc, #640]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a9f      	ldr	r2, [pc, #636]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	4b9d      	ldr	r3, [pc, #628]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a9c      	ldr	r2, [pc, #624]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d013      	beq.n	8004f94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6c:	f7fc fb82 	bl	8001674 <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f74:	f7fc fb7e 	bl	8001674 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e2b4      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f86:	4b92      	ldr	r3, [pc, #584]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x2a8>
 8004f92:	e014      	b.n	8004fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fc fb6e 	bl	8001674 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f9c:	f7fc fb6a 	bl	8001674 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b64      	cmp	r3, #100	; 0x64
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e2a0      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fae:	4b88      	ldr	r3, [pc, #544]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x2d0>
 8004fba:	e000      	b.n	8004fbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d060      	beq.n	800508c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_OscConfig+0x310>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b0c      	cmp	r3, #12
 8004fd4:	d119      	bne.n	800500a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d116      	bne.n	800500a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fdc:	4b7c      	ldr	r3, [pc, #496]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x328>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e27d      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff4:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	061b      	lsls	r3, r3, #24
 8005002:	4973      	ldr	r1, [pc, #460]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005008:	e040      	b.n	800508c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d023      	beq.n	800505a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005012:	4b6f      	ldr	r3, [pc, #444]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a6e      	ldr	r2, [pc, #440]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc fb29 	bl	8001674 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005026:	f7fc fb25 	bl	8001674 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e25b      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005038:	4b65      	ldr	r3, [pc, #404]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b62      	ldr	r3, [pc, #392]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	495f      	ldr	r1, [pc, #380]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]
 8005058:	e018      	b.n	800508c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b5d      	ldr	r3, [pc, #372]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a5c      	ldr	r2, [pc, #368]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005066:	f7fc fb05 	bl	8001674 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800506e:	f7fc fb01 	bl	8001674 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e237      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005080:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1f0      	bne.n	800506e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d03c      	beq.n	8005112 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01c      	beq.n	80050da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050a0:	4b4b      	ldr	r3, [pc, #300]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80050a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a6:	4a4a      	ldr	r2, [pc, #296]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fc fae0 	bl	8001674 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fc fadc 	bl	8001674 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e212      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ca:	4b41      	ldr	r3, [pc, #260]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80050cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d0ef      	beq.n	80050b8 <HAL_RCC_OscConfig+0x3ec>
 80050d8:	e01b      	b.n	8005112 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050da:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80050dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e0:	4a3b      	ldr	r2, [pc, #236]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ea:	f7fc fac3 	bl	8001674 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f2:	f7fc fabf 	bl	8001674 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e1f5      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005104:	4b32      	ldr	r3, [pc, #200]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1ef      	bne.n	80050f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80a6 	beq.w	800526c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005124:	4b2a      	ldr	r3, [pc, #168]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005130:	4b27      	ldr	r3, [pc, #156]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	4a26      	ldr	r2, [pc, #152]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513a:	6593      	str	r3, [r2, #88]	; 0x58
 800513c:	4b24      	ldr	r3, [pc, #144]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005148:	2301      	movs	r3, #1
 800514a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800514c:	4b21      	ldr	r3, [pc, #132]	; (80051d4 <HAL_RCC_OscConfig+0x508>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d118      	bne.n	800518a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005158:	4b1e      	ldr	r3, [pc, #120]	; (80051d4 <HAL_RCC_OscConfig+0x508>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1d      	ldr	r2, [pc, #116]	; (80051d4 <HAL_RCC_OscConfig+0x508>)
 800515e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005164:	f7fc fa86 	bl	8001674 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800516c:	f7fc fa82 	bl	8001674 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e1b8      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800517e:	4b15      	ldr	r3, [pc, #84]	; (80051d4 <HAL_RCC_OscConfig+0x508>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005186:	2b00      	cmp	r3, #0
 8005188:	d0f0      	beq.n	800516c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d108      	bne.n	80051a4 <HAL_RCC_OscConfig+0x4d8>
 8005192:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	4a0d      	ldr	r2, [pc, #52]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051a2:	e029      	b.n	80051f8 <HAL_RCC_OscConfig+0x52c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d115      	bne.n	80051d8 <HAL_RCC_OscConfig+0x50c>
 80051ac:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80051ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80051b4:	f043 0304 	orr.w	r3, r3, #4
 80051b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051bc:	4b04      	ldr	r3, [pc, #16]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80051be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c2:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <HAL_RCC_OscConfig+0x504>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051cc:	e014      	b.n	80051f8 <HAL_RCC_OscConfig+0x52c>
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40007000 	.word	0x40007000
 80051d8:	4b9d      	ldr	r3, [pc, #628]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80051da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051de:	4a9c      	ldr	r2, [pc, #624]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051e8:	4b99      	ldr	r3, [pc, #612]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	4a98      	ldr	r2, [pc, #608]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80051f0:	f023 0304 	bic.w	r3, r3, #4
 80051f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d016      	beq.n	800522e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fc fa38 	bl	8001674 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fc fa34 	bl	8001674 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e168      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521e:	4b8c      	ldr	r3, [pc, #560]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d0ed      	beq.n	8005208 <HAL_RCC_OscConfig+0x53c>
 800522c:	e015      	b.n	800525a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522e:	f7fc fa21 	bl	8001674 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005234:	e00a      	b.n	800524c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005236:	f7fc fa1d 	bl	8001674 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	f241 3288 	movw	r2, #5000	; 0x1388
 8005244:	4293      	cmp	r3, r2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e151      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800524c:	4b80      	ldr	r3, [pc, #512]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ed      	bne.n	8005236 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800525a:	7ffb      	ldrb	r3, [r7, #31]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d105      	bne.n	800526c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005260:	4b7b      	ldr	r3, [pc, #492]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005264:	4a7a      	ldr	r2, [pc, #488]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d03c      	beq.n	80052f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01c      	beq.n	80052ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005280:	4b73      	ldr	r3, [pc, #460]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005286:	4a72      	ldr	r2, [pc, #456]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005288:	f043 0301 	orr.w	r3, r3, #1
 800528c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc f9f0 	bl	8001674 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005298:	f7fc f9ec 	bl	8001674 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e122      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052aa:	4b69      	ldr	r3, [pc, #420]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80052ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <HAL_RCC_OscConfig+0x5cc>
 80052b8:	e01b      	b.n	80052f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052ba:	4b65      	ldr	r3, [pc, #404]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80052bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c0:	4a63      	ldr	r2, [pc, #396]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80052c2:	f023 0301 	bic.w	r3, r3, #1
 80052c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ca:	f7fc f9d3 	bl	8001674 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052d2:	f7fc f9cf 	bl	8001674 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e105      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052e4:	4b5a      	ldr	r3, [pc, #360]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80052e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ef      	bne.n	80052d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	f000 80f9 	beq.w	80054ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	2b02      	cmp	r3, #2
 8005302:	f040 80cf 	bne.w	80054a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005306:	4b52      	ldr	r3, [pc, #328]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0203 	and.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	429a      	cmp	r2, r3
 8005318:	d12c      	bne.n	8005374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	3b01      	subs	r3, #1
 8005326:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d123      	bne.n	8005374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d11b      	bne.n	8005374 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d113      	bne.n	8005374 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	3b01      	subs	r3, #1
 800535a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d109      	bne.n	8005374 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	3b01      	subs	r3, #1
 800536e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d071      	beq.n	8005458 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d068      	beq.n	800544c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800537a:	4b35      	ldr	r3, [pc, #212]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005386:	4b32      	ldr	r3, [pc, #200]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e0ac      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005396:	4b2e      	ldr	r3, [pc, #184]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2d      	ldr	r2, [pc, #180]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 800539c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053a2:	f7fc f967 	bl	8001674 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053aa:	f7fc f963 	bl	8001674 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e099      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053bc:	4b24      	ldr	r3, [pc, #144]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f0      	bne.n	80053aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053c8:	4b21      	ldr	r3, [pc, #132]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	4b21      	ldr	r3, [pc, #132]	; (8005454 <HAL_RCC_OscConfig+0x788>)
 80053ce:	4013      	ands	r3, r2
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053d8:	3a01      	subs	r2, #1
 80053da:	0112      	lsls	r2, r2, #4
 80053dc:	4311      	orrs	r1, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053e2:	0212      	lsls	r2, r2, #8
 80053e4:	4311      	orrs	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053ea:	0852      	lsrs	r2, r2, #1
 80053ec:	3a01      	subs	r2, #1
 80053ee:	0552      	lsls	r2, r2, #21
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053f6:	0852      	lsrs	r2, r2, #1
 80053f8:	3a01      	subs	r2, #1
 80053fa:	0652      	lsls	r2, r2, #25
 80053fc:	4311      	orrs	r1, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005402:	06d2      	lsls	r2, r2, #27
 8005404:	430a      	orrs	r2, r1
 8005406:	4912      	ldr	r1, [pc, #72]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005408:	4313      	orrs	r3, r2
 800540a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800540c:	4b10      	ldr	r3, [pc, #64]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0f      	ldr	r2, [pc, #60]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005416:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005418:	4b0d      	ldr	r3, [pc, #52]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 800541e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005422:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005424:	f7fc f926 	bl	8001674 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800542c:	f7fc f922 	bl	8001674 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e058      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800543e:	4b04      	ldr	r3, [pc, #16]	; (8005450 <HAL_RCC_OscConfig+0x784>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800544a:	e050      	b.n	80054ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e04f      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
 8005450:	40021000 	.word	0x40021000
 8005454:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005458:	4b27      	ldr	r3, [pc, #156]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d144      	bne.n	80054ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005464:	4b24      	ldr	r3, [pc, #144]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a23      	ldr	r2, [pc, #140]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 800546a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800546e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005470:	4b21      	ldr	r3, [pc, #132]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 8005476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800547a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800547c:	f7fc f8fa 	bl	8001674 <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005484:	f7fc f8f6 	bl	8001674 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b02      	cmp	r3, #2
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e02c      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005496:	4b18      	ldr	r3, [pc, #96]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0x7b8>
 80054a2:	e024      	b.n	80054ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	2b0c      	cmp	r3, #12
 80054a8:	d01f      	beq.n	80054ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054aa:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 80054b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b6:	f7fc f8dd 	bl	8001674 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054be:	f7fc f8d9 	bl	8001674 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e00f      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054dc:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 80054de:	68da      	ldr	r2, [r3, #12]
 80054e0:	4905      	ldr	r1, [pc, #20]	; (80054f8 <HAL_RCC_OscConfig+0x82c>)
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <HAL_RCC_OscConfig+0x830>)
 80054e4:	4013      	ands	r3, r2
 80054e6:	60cb      	str	r3, [r1, #12]
 80054e8:	e001      	b.n	80054ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40021000 	.word	0x40021000
 80054fc:	feeefffc 	.word	0xfeeefffc

08005500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e11d      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005518:	4b90      	ldr	r3, [pc, #576]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	429a      	cmp	r2, r3
 8005524:	d910      	bls.n	8005548 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005526:	4b8d      	ldr	r3, [pc, #564]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f023 020f 	bic.w	r2, r3, #15
 800552e:	498b      	ldr	r1, [pc, #556]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	4313      	orrs	r3, r2
 8005534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b89      	ldr	r3, [pc, #548]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e105      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	4b81      	ldr	r3, [pc, #516]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005560:	429a      	cmp	r2, r3
 8005562:	d908      	bls.n	8005576 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005564:	4b7e      	ldr	r3, [pc, #504]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	497b      	ldr	r1, [pc, #492]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005572:	4313      	orrs	r3, r2
 8005574:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d079      	beq.n	8005676 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d11e      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558a:	4b75      	ldr	r3, [pc, #468]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e0dc      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800559a:	f000 fa09 	bl	80059b0 <RCC_GetSysClockFreqFromPLLSource>
 800559e:	4603      	mov	r3, r0
 80055a0:	4a70      	ldr	r2, [pc, #448]	; (8005764 <HAL_RCC_ClockConfig+0x264>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d946      	bls.n	8005634 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80055a6:	4b6e      	ldr	r3, [pc, #440]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d140      	bne.n	8005634 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055b2:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ba:	4a69      	ldr	r2, [pc, #420]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80055bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e035      	b.n	8005634 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055d0:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d115      	bne.n	8005608 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0b9      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d107      	bne.n	80055f8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055e8:	4b5d      	ldr	r3, [pc, #372]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d109      	bne.n	8005608 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0ad      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055f8:	4b59      	ldr	r3, [pc, #356]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0a5      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005608:	f000 f8b4 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 800560c:	4603      	mov	r3, r0
 800560e:	4a55      	ldr	r2, [pc, #340]	; (8005764 <HAL_RCC_ClockConfig+0x264>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d90f      	bls.n	8005634 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005614:	4b52      	ldr	r3, [pc, #328]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005620:	4b4f      	ldr	r3, [pc, #316]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005628:	4a4d      	ldr	r2, [pc, #308]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005630:	2380      	movs	r3, #128	; 0x80
 8005632:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005634:	4b4a      	ldr	r3, [pc, #296]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f023 0203 	bic.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4947      	ldr	r1, [pc, #284]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005642:	4313      	orrs	r3, r2
 8005644:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005646:	f7fc f815 	bl	8001674 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564c:	e00a      	b.n	8005664 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800564e:	f7fc f811 	bl	8001674 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	f241 3288 	movw	r2, #5000	; 0x1388
 800565c:	4293      	cmp	r3, r2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e077      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005664:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 020c 	and.w	r2, r3, #12
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	429a      	cmp	r2, r3
 8005674:	d1eb      	bne.n	800564e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b80      	cmp	r3, #128	; 0x80
 800567a:	d105      	bne.n	8005688 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800567c:	4b38      	ldr	r3, [pc, #224]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4a37      	ldr	r2, [pc, #220]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005686:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	4b31      	ldr	r3, [pc, #196]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d208      	bcs.n	80056b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056a4:	4b2e      	ldr	r3, [pc, #184]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	492b      	ldr	r1, [pc, #172]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056b6:	4b29      	ldr	r3, [pc, #164]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d210      	bcs.n	80056e6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c4:	4b25      	ldr	r3, [pc, #148]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 020f 	bic.w	r2, r3, #15
 80056cc:	4923      	ldr	r1, [pc, #140]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d4:	4b21      	ldr	r3, [pc, #132]	; (800575c <HAL_RCC_ClockConfig+0x25c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e036      	b.n	8005754 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0304 	and.w	r3, r3, #4
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f2:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	4918      	ldr	r1, [pc, #96]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005700:	4313      	orrs	r3, r2
 8005702:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005710:	4b13      	ldr	r3, [pc, #76]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4910      	ldr	r1, [pc, #64]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 8005720:	4313      	orrs	r3, r2
 8005722:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005724:	f000 f826 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b0d      	ldr	r3, [pc, #52]	; (8005760 <HAL_RCC_ClockConfig+0x260>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	490c      	ldr	r1, [pc, #48]	; (8005768 <HAL_RCC_ClockConfig+0x268>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	4a0a      	ldr	r2, [pc, #40]	; (800576c <HAL_RCC_ClockConfig+0x26c>)
 8005742:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005744:	4b0a      	ldr	r3, [pc, #40]	; (8005770 <HAL_RCC_ClockConfig+0x270>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7fb ff43 	bl	80015d4 <HAL_InitTick>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]

  return status;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40022000 	.word	0x40022000
 8005760:	40021000 	.word	0x40021000
 8005764:	04c4b400 	.word	0x04c4b400
 8005768:	0800ef9c 	.word	0x0800ef9c
 800576c:	20000048 	.word	0x20000048
 8005770:	20000034 	.word	0x20000034

08005774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	2300      	movs	r3, #0
 8005780:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005782:	4b3e      	ldr	r3, [pc, #248]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 030c 	and.w	r3, r3, #12
 800578a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800578c:	4b3b      	ldr	r3, [pc, #236]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <HAL_RCC_GetSysClockFreq+0x34>
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	d121      	bne.n	80057e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d11e      	bne.n	80057e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80057a8:	4b34      	ldr	r3, [pc, #208]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d107      	bne.n	80057c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80057b4:	4b31      	ldr	r3, [pc, #196]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 80057b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	61fb      	str	r3, [r7, #28]
 80057c2:	e005      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80057c4:	4b2d      	ldr	r3, [pc, #180]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	091b      	lsrs	r3, r3, #4
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80057d0:	4a2b      	ldr	r2, [pc, #172]	; (8005880 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10d      	bne.n	80057fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d102      	bne.n	80057f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80057ec:	4b25      	ldr	r3, [pc, #148]	; (8005884 <HAL_RCC_GetSysClockFreq+0x110>)
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e004      	b.n	80057fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057f8:	4b23      	ldr	r3, [pc, #140]	; (8005888 <HAL_RCC_GetSysClockFreq+0x114>)
 80057fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b0c      	cmp	r3, #12
 8005800:	d134      	bne.n	800586c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005802:	4b1e      	ldr	r3, [pc, #120]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d003      	beq.n	800581a <HAL_RCC_GetSysClockFreq+0xa6>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d003      	beq.n	8005820 <HAL_RCC_GetSysClockFreq+0xac>
 8005818:	e005      	b.n	8005826 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <HAL_RCC_GetSysClockFreq+0x110>)
 800581c:	617b      	str	r3, [r7, #20]
      break;
 800581e:	e005      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005820:	4b19      	ldr	r3, [pc, #100]	; (8005888 <HAL_RCC_GetSysClockFreq+0x114>)
 8005822:	617b      	str	r3, [r7, #20]
      break;
 8005824:	e002      	b.n	800582c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	617b      	str	r3, [r7, #20]
      break;
 800582a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800582c:	4b13      	ldr	r3, [pc, #76]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	091b      	lsrs	r3, r3, #4
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	3301      	adds	r3, #1
 8005838:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800583a:	4b10      	ldr	r3, [pc, #64]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	0a1b      	lsrs	r3, r3, #8
 8005840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	fb03 f202 	mul.w	r2, r3, r2
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_RCC_GetSysClockFreq+0x108>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	0e5b      	lsrs	r3, r3, #25
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	3301      	adds	r3, #1
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	fbb2 f3f3 	udiv	r3, r2, r3
 800586a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800586c:	69bb      	ldr	r3, [r7, #24]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3724      	adds	r7, #36	; 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	0800efb4 	.word	0x0800efb4
 8005884:	00f42400 	.word	0x00f42400
 8005888:	007a1200 	.word	0x007a1200

0800588c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005890:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	20000048 	.word	0x20000048

080058a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80058a8:	f7ff fff0 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058ac:	4602      	mov	r2, r0
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	4904      	ldr	r1, [pc, #16]	; (80058cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ba:	5ccb      	ldrb	r3, [r1, r3]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000
 80058cc:	0800efac 	.word	0x0800efac

080058d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058d4:	f7ff ffda 	bl	800588c <HAL_RCC_GetHCLKFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	0adb      	lsrs	r3, r3, #11
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	4904      	ldr	r1, [pc, #16]	; (80058f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058e6:	5ccb      	ldrb	r3, [r1, r3]
 80058e8:	f003 031f 	and.w	r3, r3, #31
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40021000 	.word	0x40021000
 80058f8:	0800efac 	.word	0x0800efac

080058fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005908:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800590a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005914:	f7ff f916 	bl	8004b44 <HAL_PWREx_GetVoltageRange>
 8005918:	6178      	str	r0, [r7, #20]
 800591a:	e014      	b.n	8005946 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800591c:	4b22      	ldr	r3, [pc, #136]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	6593      	str	r3, [r2, #88]	; 0x58
 8005928:	4b1f      	ldr	r3, [pc, #124]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005934:	f7ff f906 	bl	8004b44 <HAL_PWREx_GetVoltageRange>
 8005938:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800593a:	4b1b      	ldr	r3, [pc, #108]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	4a1a      	ldr	r2, [pc, #104]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005944:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594c:	d10b      	bne.n	8005966 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2b80      	cmp	r3, #128	; 0x80
 8005952:	d913      	bls.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2ba0      	cmp	r3, #160	; 0xa0
 8005958:	d902      	bls.n	8005960 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800595a:	2302      	movs	r3, #2
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e00d      	b.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005960:	2301      	movs	r3, #1
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	e00a      	b.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b7f      	cmp	r3, #127	; 0x7f
 800596a:	d902      	bls.n	8005972 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800596c:	2302      	movs	r3, #2
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	e004      	b.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d101      	bne.n	800597c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005978:	2301      	movs	r3, #1
 800597a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f023 020f 	bic.w	r2, r3, #15
 8005984:	4909      	ldr	r1, [pc, #36]	; (80059ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800598c:	4b07      	ldr	r3, [pc, #28]	; (80059ac <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	d001      	beq.n	800599e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40022000 	.word	0x40022000

080059b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059b6:	4b2d      	ldr	r3, [pc, #180]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d00b      	beq.n	80059de <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d825      	bhi.n	8005a18 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d008      	beq.n	80059e4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d11f      	bne.n	8005a18 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80059da:	613b      	str	r3, [r7, #16]
    break;
 80059dc:	e01f      	b.n	8005a1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80059de:	4b25      	ldr	r3, [pc, #148]	; (8005a74 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80059e0:	613b      	str	r3, [r7, #16]
    break;
 80059e2:	e01c      	b.n	8005a1e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059e4:	4b21      	ldr	r3, [pc, #132]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0308 	and.w	r3, r3, #8
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d107      	bne.n	8005a00 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059f0:	4b1e      	ldr	r3, [pc, #120]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e005      	b.n	8005a0c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	091b      	lsrs	r3, r3, #4
 8005a06:	f003 030f 	and.w	r3, r3, #15
 8005a0a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005a0c:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a14:	613b      	str	r3, [r7, #16]
    break;
 8005a16:	e002      	b.n	8005a1e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	613b      	str	r3, [r7, #16]
    break;
 8005a1c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	091b      	lsrs	r3, r3, #4
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	0a1b      	lsrs	r3, r3, #8
 8005a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	fb03 f202 	mul.w	r2, r3, r2
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a42:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	0e5b      	lsrs	r3, r3, #25
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	3301      	adds	r3, #1
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005a5e:	683b      	ldr	r3, [r7, #0]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	00f42400 	.word	0x00f42400
 8005a74:	007a1200 	.word	0x007a1200
 8005a78:	0800efb4 	.word	0x0800efb4

08005a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a84:	2300      	movs	r3, #0
 8005a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a88:	2300      	movs	r3, #0
 8005a8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d040      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d02a      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005aa0:	2b80      	cmp	r3, #128	; 0x80
 8005aa2:	d825      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005aa4:	2b60      	cmp	r3, #96	; 0x60
 8005aa6:	d026      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005aa8:	2b60      	cmp	r3, #96	; 0x60
 8005aaa:	d821      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d006      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ab0:	2b40      	cmp	r3, #64	; 0x40
 8005ab2:	d81d      	bhi.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d010      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005abc:	e018      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005abe:	4b89      	ldr	r3, [pc, #548]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	4a88      	ldr	r2, [pc, #544]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aca:	e015      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fb02 	bl	80060dc <RCCEx_PLLSAI1_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005adc:	e00c      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3320      	adds	r3, #32
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fbed 	bl	80062c4 <RCCEx_PLLSAI2_Config>
 8005aea:	4603      	mov	r3, r0
 8005aec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005aee:	e003      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	74fb      	strb	r3, [r7, #19]
      break;
 8005af4:	e000      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005afe:	4b79      	ldr	r3, [pc, #484]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b04:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b0c:	4975      	ldr	r1, [pc, #468]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005b14:	e001      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b16:	7cfb      	ldrb	r3, [r7, #19]
 8005b18:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d047      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2e:	d030      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b34:	d82a      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3a:	d02a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005b3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b40:	d824      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b46:	d008      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4c:	d81e      	bhi.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b56:	d010      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005b58:	e018      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b5a:	4b62      	ldr	r3, [pc, #392]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	4a61      	ldr	r2, [pc, #388]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b64:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b66:	e015      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fab4 	bl	80060dc <RCCEx_PLLSAI1_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b78:	e00c      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	3320      	adds	r3, #32
 8005b7e:	2100      	movs	r1, #0
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 fb9f 	bl	80062c4 <RCCEx_PLLSAI2_Config>
 8005b86:	4603      	mov	r3, r0
 8005b88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b8a:	e003      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	74fb      	strb	r3, [r7, #19]
      break;
 8005b90:	e000      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005b92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b9a:	4b52      	ldr	r3, [pc, #328]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	494e      	ldr	r1, [pc, #312]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005bb0:	e001      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 809f 	beq.w	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bc8:	4b46      	ldr	r3, [pc, #280]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00d      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bde:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	4a40      	ldr	r2, [pc, #256]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bea:	4b3e      	ldr	r3, [pc, #248]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	60bb      	str	r3, [r7, #8]
 8005bf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c06:	f7fb fd35 	bl	8001674 <HAL_GetTick>
 8005c0a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c0c:	e009      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c0e:	f7fb fd31 	bl	8001674 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d902      	bls.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	74fb      	strb	r3, [r7, #19]
        break;
 8005c20:	e005      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c22:	4b31      	ldr	r3, [pc, #196]	; (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0ef      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005c2e:	7cfb      	ldrb	r3, [r7, #19]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d15b      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c34:	4b2b      	ldr	r3, [pc, #172]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01f      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d019      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c52:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	4a1f      	ldr	r2, [pc, #124]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c7e:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fb fcf0 	bl	8001674 <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	e00b      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f7fb fcec 	bl	8001674 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d902      	bls.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	74fb      	strb	r3, [r7, #19]
            break;
 8005cae:	e006      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0ec      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10c      	bne.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc4:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	4903      	ldr	r1, [pc, #12]	; (8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005cdc:	e008      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005cde:	7cfb      	ldrb	r3, [r7, #19]
 8005ce0:	74bb      	strb	r3, [r7, #18]
 8005ce2:	e005      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	7cfb      	ldrb	r3, [r7, #19]
 8005cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cf0:	7c7b      	ldrb	r3, [r7, #17]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d105      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf6:	4ba0      	ldr	r3, [pc, #640]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cfa:	4a9f      	ldr	r2, [pc, #636]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d0e:	4b9a      	ldr	r3, [pc, #616]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f023 0203 	bic.w	r2, r3, #3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1c:	4996      	ldr	r1, [pc, #600]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d30:	4b91      	ldr	r3, [pc, #580]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f023 020c 	bic.w	r2, r3, #12
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	498e      	ldr	r1, [pc, #568]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d52:	4b89      	ldr	r3, [pc, #548]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d60:	4985      	ldr	r1, [pc, #532]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d74:	4b80      	ldr	r3, [pc, #512]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d82:	497d      	ldr	r1, [pc, #500]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d96:	4b78      	ldr	r3, [pc, #480]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da4:	4974      	ldr	r1, [pc, #464]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005db8:	4b6f      	ldr	r3, [pc, #444]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dc6:	496c      	ldr	r1, [pc, #432]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dda:	4b67      	ldr	r3, [pc, #412]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005de8:	4963      	ldr	r1, [pc, #396]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dfc:	4b5e      	ldr	r3, [pc, #376]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e0a:	495b      	ldr	r1, [pc, #364]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e1e:	4b56      	ldr	r3, [pc, #344]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	4952      	ldr	r1, [pc, #328]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e40:	4b4d      	ldr	r3, [pc, #308]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	494a      	ldr	r1, [pc, #296]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e62:	4b45      	ldr	r3, [pc, #276]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e70:	4941      	ldr	r1, [pc, #260]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e84:	4b3c      	ldr	r3, [pc, #240]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e8a:	f023 0203 	bic.w	r2, r3, #3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e92:	4939      	ldr	r1, [pc, #228]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d028      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ea6:	4b34      	ldr	r3, [pc, #208]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb4:	4930      	ldr	r1, [pc, #192]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec6:	4b2c      	ldr	r3, [pc, #176]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	4a2b      	ldr	r2, [pc, #172]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ecc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed0:	60d3      	str	r3, [r2, #12]
 8005ed2:	e011      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005edc:	d10c      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	2101      	movs	r1, #1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 f8f9 	bl	80060dc <RCCEx_PLLSAI1_Config>
 8005eea:	4603      	mov	r3, r0
 8005eec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005eee:	7cfb      	ldrb	r3, [r7, #19]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d04d      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f0c:	d108      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f14:	4a18      	ldr	r2, [pc, #96]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f1a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f1e:	e012      	b.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005f20:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f3e:	490e      	ldr	r1, [pc, #56]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f4e:	d106      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f50:	4b09      	ldr	r3, [pc, #36]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	4a08      	ldr	r2, [pc, #32]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f5a:	60d3      	str	r3, [r2, #12]
 8005f5c:	e020      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f66:	d109      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f68:	4b03      	ldr	r3, [pc, #12]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	4a02      	ldr	r2, [pc, #8]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f72:	60d3      	str	r3, [r2, #12]
 8005f74:	e014      	b.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005f76:	bf00      	nop
 8005f78:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f84:	d10c      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3304      	adds	r3, #4
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 f8a5 	bl	80060dc <RCCEx_PLLSAI1_Config>
 8005f92:	4603      	mov	r3, r0
 8005f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005f9c:	7cfb      	ldrb	r3, [r7, #19]
 8005f9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d028      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fac:	4b4a      	ldr	r3, [pc, #296]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fba:	4947      	ldr	r1, [pc, #284]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fca:	d106      	bne.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fcc:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	4a41      	ldr	r2, [pc, #260]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd6:	60d3      	str	r3, [r2, #12]
 8005fd8:	e011      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fe2:	d10c      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 f876 	bl	80060dc <RCCEx_PLLSAI1_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ff4:	7cfb      	ldrb	r3, [r7, #19]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005ffa:	7cfb      	ldrb	r3, [r7, #19]
 8005ffc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01e      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800600a:	4b33      	ldr	r3, [pc, #204]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800601a:	492f      	ldr	r1, [pc, #188]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800601c:	4313      	orrs	r3, r2
 800601e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800602c:	d10c      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3304      	adds	r3, #4
 8006032:	2102      	movs	r1, #2
 8006034:	4618      	mov	r0, r3
 8006036:	f000 f851 	bl	80060dc <RCCEx_PLLSAI1_Config>
 800603a:	4603      	mov	r3, r0
 800603c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800603e:	7cfb      	ldrb	r3, [r7, #19]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006044:	7cfb      	ldrb	r3, [r7, #19]
 8006046:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006054:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800605a:	f023 0204 	bic.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006064:	491c      	ldr	r1, [pc, #112]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006066:	4313      	orrs	r3, r2
 8006068:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00b      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006078:	4b17      	ldr	r3, [pc, #92]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800607a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800607e:	f023 0218 	bic.w	r2, r3, #24
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	4913      	ldr	r1, [pc, #76]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d017      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800609c:	4b0e      	ldr	r3, [pc, #56]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800609e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ac:	490a      	ldr	r1, [pc, #40]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060be:	d105      	bne.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060c0:	4b05      	ldr	r3, [pc, #20]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a04      	ldr	r2, [pc, #16]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80060c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80060cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3718      	adds	r7, #24
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	40021000 	.word	0x40021000

080060dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060ea:	4b72      	ldr	r3, [pc, #456]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060f6:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0203 	and.w	r2, r3, #3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d103      	bne.n	800610e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
       ||
 800610a:	2b00      	cmp	r3, #0
 800610c:	d142      	bne.n	8006194 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	73fb      	strb	r3, [r7, #15]
 8006112:	e03f      	b.n	8006194 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b03      	cmp	r3, #3
 800611a:	d018      	beq.n	800614e <RCCEx_PLLSAI1_Config+0x72>
 800611c:	2b03      	cmp	r3, #3
 800611e:	d825      	bhi.n	800616c <RCCEx_PLLSAI1_Config+0x90>
 8006120:	2b01      	cmp	r3, #1
 8006122:	d002      	beq.n	800612a <RCCEx_PLLSAI1_Config+0x4e>
 8006124:	2b02      	cmp	r3, #2
 8006126:	d009      	beq.n	800613c <RCCEx_PLLSAI1_Config+0x60>
 8006128:	e020      	b.n	800616c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800612a:	4b62      	ldr	r3, [pc, #392]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 0302 	and.w	r3, r3, #2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d11d      	bne.n	8006172 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800613a:	e01a      	b.n	8006172 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800613c:	4b5d      	ldr	r3, [pc, #372]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006144:	2b00      	cmp	r3, #0
 8006146:	d116      	bne.n	8006176 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800614c:	e013      	b.n	8006176 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800614e:	4b59      	ldr	r3, [pc, #356]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10f      	bne.n	800617a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800615a:	4b56      	ldr	r3, [pc, #344]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800616a:	e006      	b.n	800617a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e004      	b.n	800617c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006172:	bf00      	nop
 8006174:	e002      	b.n	800617c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8006176:	bf00      	nop
 8006178:	e000      	b.n	800617c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800617a:	bf00      	nop
    }

    if(status == HAL_OK)
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d108      	bne.n	8006194 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8006182:	4b4c      	ldr	r3, [pc, #304]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	f023 0203 	bic.w	r2, r3, #3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4949      	ldr	r1, [pc, #292]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f040 8086 	bne.w	80062a8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800619c:	4b45      	ldr	r3, [pc, #276]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a44      	ldr	r2, [pc, #272]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a8:	f7fb fa64 	bl	8001674 <HAL_GetTick>
 80061ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061ae:	e009      	b.n	80061c4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061b0:	f7fb fa60 	bl	8001674 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d902      	bls.n	80061c4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	73fb      	strb	r3, [r7, #15]
        break;
 80061c2:	e005      	b.n	80061d0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061c4:	4b3b      	ldr	r3, [pc, #236]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1ef      	bne.n	80061b0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d168      	bne.n	80062a8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d113      	bne.n	8006204 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061dc:	4b35      	ldr	r3, [pc, #212]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061de:	691a      	ldr	r2, [r3, #16]
 80061e0:	4b35      	ldr	r3, [pc, #212]	; (80062b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6892      	ldr	r2, [r2, #8]
 80061e8:	0211      	lsls	r1, r2, #8
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68d2      	ldr	r2, [r2, #12]
 80061ee:	06d2      	lsls	r2, r2, #27
 80061f0:	4311      	orrs	r1, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6852      	ldr	r2, [r2, #4]
 80061f6:	3a01      	subs	r2, #1
 80061f8:	0112      	lsls	r2, r2, #4
 80061fa:	430a      	orrs	r2, r1
 80061fc:	492d      	ldr	r1, [pc, #180]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	610b      	str	r3, [r1, #16]
 8006202:	e02d      	b.n	8006260 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d115      	bne.n	8006236 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800620a:	4b2a      	ldr	r3, [pc, #168]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	4b2b      	ldr	r3, [pc, #172]	; (80062bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8006210:	4013      	ands	r3, r2
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6892      	ldr	r2, [r2, #8]
 8006216:	0211      	lsls	r1, r2, #8
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6912      	ldr	r2, [r2, #16]
 800621c:	0852      	lsrs	r2, r2, #1
 800621e:	3a01      	subs	r2, #1
 8006220:	0552      	lsls	r2, r2, #21
 8006222:	4311      	orrs	r1, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6852      	ldr	r2, [r2, #4]
 8006228:	3a01      	subs	r2, #1
 800622a:	0112      	lsls	r2, r2, #4
 800622c:	430a      	orrs	r2, r1
 800622e:	4921      	ldr	r1, [pc, #132]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006230:	4313      	orrs	r3, r2
 8006232:	610b      	str	r3, [r1, #16]
 8006234:	e014      	b.n	8006260 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006236:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	4b21      	ldr	r3, [pc, #132]	; (80062c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800623c:	4013      	ands	r3, r2
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6892      	ldr	r2, [r2, #8]
 8006242:	0211      	lsls	r1, r2, #8
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6952      	ldr	r2, [r2, #20]
 8006248:	0852      	lsrs	r2, r2, #1
 800624a:	3a01      	subs	r2, #1
 800624c:	0652      	lsls	r2, r2, #25
 800624e:	4311      	orrs	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6852      	ldr	r2, [r2, #4]
 8006254:	3a01      	subs	r2, #1
 8006256:	0112      	lsls	r2, r2, #4
 8006258:	430a      	orrs	r2, r1
 800625a:	4916      	ldr	r1, [pc, #88]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800625c:	4313      	orrs	r3, r2
 800625e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006260:	4b14      	ldr	r3, [pc, #80]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006266:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800626a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800626c:	f7fb fa02 	bl	8001674 <HAL_GetTick>
 8006270:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006272:	e009      	b.n	8006288 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006274:	f7fb f9fe 	bl	8001674 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d902      	bls.n	8006288 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	73fb      	strb	r3, [r7, #15]
          break;
 8006286:	e005      	b.n	8006294 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006288:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0ef      	beq.n	8006274 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d106      	bne.n	80062a8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800629a:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	4904      	ldr	r1, [pc, #16]	; (80062b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	40021000 	.word	0x40021000
 80062b8:	07ff800f 	.word	0x07ff800f
 80062bc:	ff9f800f 	.word	0xff9f800f
 80062c0:	f9ff800f 	.word	0xf9ff800f

080062c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062d2:	4b72      	ldr	r3, [pc, #456]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00e      	beq.n	80062fc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80062de:	4b6f      	ldr	r3, [pc, #444]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f003 0203 	and.w	r2, r3, #3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d103      	bne.n	80062f6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
       ||
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d142      	bne.n	800637c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	73fb      	strb	r3, [r7, #15]
 80062fa:	e03f      	b.n	800637c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b03      	cmp	r3, #3
 8006302:	d018      	beq.n	8006336 <RCCEx_PLLSAI2_Config+0x72>
 8006304:	2b03      	cmp	r3, #3
 8006306:	d825      	bhi.n	8006354 <RCCEx_PLLSAI2_Config+0x90>
 8006308:	2b01      	cmp	r3, #1
 800630a:	d002      	beq.n	8006312 <RCCEx_PLLSAI2_Config+0x4e>
 800630c:	2b02      	cmp	r3, #2
 800630e:	d009      	beq.n	8006324 <RCCEx_PLLSAI2_Config+0x60>
 8006310:	e020      	b.n	8006354 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006312:	4b62      	ldr	r3, [pc, #392]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d11d      	bne.n	800635a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006322:	e01a      	b.n	800635a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006324:	4b5d      	ldr	r3, [pc, #372]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632c:	2b00      	cmp	r3, #0
 800632e:	d116      	bne.n	800635e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006334:	e013      	b.n	800635e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006336:	4b59      	ldr	r3, [pc, #356]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006342:	4b56      	ldr	r3, [pc, #344]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d109      	bne.n	8006362 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006352:	e006      	b.n	8006362 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
      break;
 8006358:	e004      	b.n	8006364 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800635a:	bf00      	nop
 800635c:	e002      	b.n	8006364 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800635e:	bf00      	nop
 8006360:	e000      	b.n	8006364 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8006362:	bf00      	nop
    }

    if(status == HAL_OK)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d108      	bne.n	800637c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800636a:	4b4c      	ldr	r3, [pc, #304]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f023 0203 	bic.w	r2, r3, #3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4949      	ldr	r1, [pc, #292]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006378:	4313      	orrs	r3, r2
 800637a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 8086 	bne.w	8006490 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006384:	4b45      	ldr	r3, [pc, #276]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a44      	ldr	r2, [pc, #272]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 800638a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800638e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006390:	f7fb f970 	bl	8001674 <HAL_GetTick>
 8006394:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006396:	e009      	b.n	80063ac <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006398:	f7fb f96c 	bl	8001674 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d902      	bls.n	80063ac <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	73fb      	strb	r3, [r7, #15]
        break;
 80063aa:	e005      	b.n	80063b8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80063ac:	4b3b      	ldr	r3, [pc, #236]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1ef      	bne.n	8006398 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80063b8:	7bfb      	ldrb	r3, [r7, #15]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d168      	bne.n	8006490 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d113      	bne.n	80063ec <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063c4:	4b35      	ldr	r3, [pc, #212]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 80063c6:	695a      	ldr	r2, [r3, #20]
 80063c8:	4b35      	ldr	r3, [pc, #212]	; (80064a0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6892      	ldr	r2, [r2, #8]
 80063d0:	0211      	lsls	r1, r2, #8
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	68d2      	ldr	r2, [r2, #12]
 80063d6:	06d2      	lsls	r2, r2, #27
 80063d8:	4311      	orrs	r1, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6852      	ldr	r2, [r2, #4]
 80063de:	3a01      	subs	r2, #1
 80063e0:	0112      	lsls	r2, r2, #4
 80063e2:	430a      	orrs	r2, r1
 80063e4:	492d      	ldr	r1, [pc, #180]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	614b      	str	r3, [r1, #20]
 80063ea:	e02d      	b.n	8006448 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d115      	bne.n	800641e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063f2:	4b2a      	ldr	r3, [pc, #168]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 80063f4:	695a      	ldr	r2, [r3, #20]
 80063f6:	4b2b      	ldr	r3, [pc, #172]	; (80064a4 <RCCEx_PLLSAI2_Config+0x1e0>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6892      	ldr	r2, [r2, #8]
 80063fe:	0211      	lsls	r1, r2, #8
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	6912      	ldr	r2, [r2, #16]
 8006404:	0852      	lsrs	r2, r2, #1
 8006406:	3a01      	subs	r2, #1
 8006408:	0552      	lsls	r2, r2, #21
 800640a:	4311      	orrs	r1, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6852      	ldr	r2, [r2, #4]
 8006410:	3a01      	subs	r2, #1
 8006412:	0112      	lsls	r2, r2, #4
 8006414:	430a      	orrs	r2, r1
 8006416:	4921      	ldr	r1, [pc, #132]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006418:	4313      	orrs	r3, r2
 800641a:	614b      	str	r3, [r1, #20]
 800641c:	e014      	b.n	8006448 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800641e:	4b1f      	ldr	r3, [pc, #124]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	4b21      	ldr	r3, [pc, #132]	; (80064a8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6892      	ldr	r2, [r2, #8]
 800642a:	0211      	lsls	r1, r2, #8
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6952      	ldr	r2, [r2, #20]
 8006430:	0852      	lsrs	r2, r2, #1
 8006432:	3a01      	subs	r2, #1
 8006434:	0652      	lsls	r2, r2, #25
 8006436:	4311      	orrs	r1, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6852      	ldr	r2, [r2, #4]
 800643c:	3a01      	subs	r2, #1
 800643e:	0112      	lsls	r2, r2, #4
 8006440:	430a      	orrs	r2, r1
 8006442:	4916      	ldr	r1, [pc, #88]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006444:	4313      	orrs	r3, r2
 8006446:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006448:	4b14      	ldr	r3, [pc, #80]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a13      	ldr	r2, [pc, #76]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 800644e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006452:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006454:	f7fb f90e 	bl	8001674 <HAL_GetTick>
 8006458:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800645a:	e009      	b.n	8006470 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800645c:	f7fb f90a 	bl	8001674 <HAL_GetTick>
 8006460:	4602      	mov	r2, r0
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	2b02      	cmp	r3, #2
 8006468:	d902      	bls.n	8006470 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	73fb      	strb	r3, [r7, #15]
          break;
 800646e:	e005      	b.n	800647c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006470:	4b0a      	ldr	r3, [pc, #40]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0ef      	beq.n	800645c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006482:	4b06      	ldr	r3, [pc, #24]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	4904      	ldr	r1, [pc, #16]	; (800649c <RCCEx_PLLSAI2_Config+0x1d8>)
 800648c:	4313      	orrs	r3, r2
 800648e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40021000 	.word	0x40021000
 80064a0:	07ff800f 	.word	0x07ff800f
 80064a4:	ff9f800f 	.word	0xff9f800f
 80064a8:	f9ff800f 	.word	0xf9ff800f

080064ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e049      	b.n	8006552 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f002 fe9a 	bl	800920c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	3304      	adds	r3, #4
 80064e8:	4619      	mov	r1, r3
 80064ea:	4610      	mov	r0, r2
 80064ec:	f000 fab6 	bl	8006a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b01      	cmp	r3, #1
 800656e:	d001      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e04f      	b.n	8006614 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a23      	ldr	r2, [pc, #140]	; (8006620 <HAL_TIM_Base_Start_IT+0xc4>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_TIM_Base_Start_IT+0x76>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800659e:	d018      	beq.n	80065d2 <HAL_TIM_Base_Start_IT+0x76>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <HAL_TIM_Base_Start_IT+0xc8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d013      	beq.n	80065d2 <HAL_TIM_Base_Start_IT+0x76>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <HAL_TIM_Base_Start_IT+0xcc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_TIM_Base_Start_IT+0x76>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1c      	ldr	r2, [pc, #112]	; (800662c <HAL_TIM_Base_Start_IT+0xd0>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_TIM_Base_Start_IT+0x76>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_TIM_Base_Start_IT+0xd4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIM_Base_Start_IT+0x76>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a19      	ldr	r2, [pc, #100]	; (8006634 <HAL_TIM_Base_Start_IT+0xd8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d115      	bne.n	80065fe <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	689a      	ldr	r2, [r3, #8]
 80065d8:	4b17      	ldr	r3, [pc, #92]	; (8006638 <HAL_TIM_Base_Start_IT+0xdc>)
 80065da:	4013      	ands	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	d015      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ea:	d011      	beq.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fc:	e008      	b.n	8006610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0201 	orr.w	r2, r2, #1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e000      	b.n	8006612 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	40012c00 	.word	0x40012c00
 8006624:	40000400 	.word	0x40000400
 8006628:	40000800 	.word	0x40000800
 800662c:	40000c00 	.word	0x40000c00
 8006630:	40013400 	.word	0x40013400
 8006634:	40014000 	.word	0x40014000
 8006638:	00010007 	.word	0x00010007

0800663c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b02      	cmp	r3, #2
 8006650:	d122      	bne.n	8006698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b02      	cmp	r3, #2
 800665e:	d11b      	bne.n	8006698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0202 	mvn.w	r2, #2
 8006668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2201      	movs	r2, #1
 800666e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 0303 	and.w	r3, r3, #3
 800667a:	2b00      	cmp	r3, #0
 800667c:	d003      	beq.n	8006686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9ce 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006684:	e005      	b.n	8006692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f9c0 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f9d1 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b04      	cmp	r3, #4
 80066a4:	d122      	bne.n	80066ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d11b      	bne.n	80066ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f06f 0204 	mvn.w	r2, #4
 80066bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f9a4 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 80066d8:	e005      	b.n	80066e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f996 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f9a7 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b08      	cmp	r3, #8
 80066f8:	d122      	bne.n	8006740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d11b      	bne.n	8006740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f06f 0208 	mvn.w	r2, #8
 8006710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2204      	movs	r2, #4
 8006716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d003      	beq.n	800672e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f97a 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 800672c:	e005      	b.n	800673a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f96c 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f97d 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b10      	cmp	r3, #16
 800674c:	d122      	bne.n	8006794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d11b      	bne.n	8006794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0210 	mvn.w	r2, #16
 8006764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2208      	movs	r2, #8
 800676a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69db      	ldr	r3, [r3, #28]
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	2b00      	cmp	r3, #0
 8006778:	d003      	beq.n	8006782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f950 	bl	8006a20 <HAL_TIM_IC_CaptureCallback>
 8006780:	e005      	b.n	800678e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f942 	bl	8006a0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f953 	bl	8006a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10e      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d107      	bne.n	80067c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f06f 0201 	mvn.w	r2, #1
 80067b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fae0 	bl	8007d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d10e      	bne.n	80067ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d8:	2b80      	cmp	r3, #128	; 0x80
 80067da:	d107      	bne.n	80067ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fafe 	bl	8006de8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fa:	d10e      	bne.n	800681a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006806:	2b80      	cmp	r3, #128	; 0x80
 8006808:	d107      	bne.n	800681a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 faf1 	bl	8006dfc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d10e      	bne.n	8006846 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	d107      	bne.n	8006846 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800683e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f901 	bl	8006a48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b20      	cmp	r3, #32
 8006852:	d10e      	bne.n	8006872 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b20      	cmp	r3, #32
 8006860:	d107      	bne.n	8006872 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f06f 0220 	mvn.w	r2, #32
 800686a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fab1 	bl	8006dd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006872:	bf00      	nop
 8006874:	3708      	adds	r7, #8
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
 8006882:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688e:	2b01      	cmp	r3, #1
 8006890:	d101      	bne.n	8006896 <HAL_TIM_ConfigClockSource+0x1c>
 8006892:	2302      	movs	r3, #2
 8006894:	e0b6      	b.n	8006a04 <HAL_TIM_ConfigClockSource+0x18a>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d2:	d03e      	beq.n	8006952 <HAL_TIM_ConfigClockSource+0xd8>
 80068d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068d8:	f200 8087 	bhi.w	80069ea <HAL_TIM_ConfigClockSource+0x170>
 80068dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e0:	f000 8086 	beq.w	80069f0 <HAL_TIM_ConfigClockSource+0x176>
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d87f      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 80068ea:	2b70      	cmp	r3, #112	; 0x70
 80068ec:	d01a      	beq.n	8006924 <HAL_TIM_ConfigClockSource+0xaa>
 80068ee:	2b70      	cmp	r3, #112	; 0x70
 80068f0:	d87b      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 80068f2:	2b60      	cmp	r3, #96	; 0x60
 80068f4:	d050      	beq.n	8006998 <HAL_TIM_ConfigClockSource+0x11e>
 80068f6:	2b60      	cmp	r3, #96	; 0x60
 80068f8:	d877      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 80068fa:	2b50      	cmp	r3, #80	; 0x50
 80068fc:	d03c      	beq.n	8006978 <HAL_TIM_ConfigClockSource+0xfe>
 80068fe:	2b50      	cmp	r3, #80	; 0x50
 8006900:	d873      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 8006902:	2b40      	cmp	r3, #64	; 0x40
 8006904:	d058      	beq.n	80069b8 <HAL_TIM_ConfigClockSource+0x13e>
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d86f      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 800690a:	2b30      	cmp	r3, #48	; 0x30
 800690c:	d064      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x15e>
 800690e:	2b30      	cmp	r3, #48	; 0x30
 8006910:	d86b      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 8006912:	2b20      	cmp	r3, #32
 8006914:	d060      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006916:	2b20      	cmp	r3, #32
 8006918:	d867      	bhi.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d05c      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x15e>
 800691e:	2b10      	cmp	r3, #16
 8006920:	d05a      	beq.n	80069d8 <HAL_TIM_ConfigClockSource+0x15e>
 8006922:	e062      	b.n	80069ea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	6899      	ldr	r1, [r3, #8]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f000 f9a6 	bl	8006c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006946:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	609a      	str	r2, [r3, #8]
      break;
 8006950:	e04f      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	6899      	ldr	r1, [r3, #8]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685a      	ldr	r2, [r3, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f000 f98f 	bl	8006c84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006974:	609a      	str	r2, [r3, #8]
      break;
 8006976:	e03c      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	6859      	ldr	r1, [r3, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	461a      	mov	r2, r3
 8006986:	f000 f903 	bl	8006b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2150      	movs	r1, #80	; 0x50
 8006990:	4618      	mov	r0, r3
 8006992:	f000 f95c 	bl	8006c4e <TIM_ITRx_SetConfig>
      break;
 8006996:	e02c      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	6859      	ldr	r1, [r3, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	461a      	mov	r2, r3
 80069a6:	f000 f922 	bl	8006bee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2160      	movs	r1, #96	; 0x60
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 f94c 	bl	8006c4e <TIM_ITRx_SetConfig>
      break;
 80069b6:	e01c      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	6859      	ldr	r1, [r3, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	461a      	mov	r2, r3
 80069c6:	f000 f8e3 	bl	8006b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2140      	movs	r1, #64	; 0x40
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f93c 	bl	8006c4e <TIM_ITRx_SetConfig>
      break;
 80069d6:	e00c      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f000 f933 	bl	8006c4e <TIM_ITRx_SetConfig>
      break;
 80069e8:	e003      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	73fb      	strb	r3, [r7, #15]
      break;
 80069ee:	e000      	b.n	80069f2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80069f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a40      	ldr	r2, [pc, #256]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d013      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d00f      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a3d      	ldr	r2, [pc, #244]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00b      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3c      	ldr	r2, [pc, #240]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d007      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a3b      	ldr	r2, [pc, #236]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0x40>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a3a      	ldr	r2, [pc, #232]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a2f      	ldr	r2, [pc, #188]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01f      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006abc:	d01b      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2c      	ldr	r2, [pc, #176]	; (8006b74 <TIM_Base_SetConfig+0x118>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d017      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <TIM_Base_SetConfig+0x11c>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <TIM_Base_SetConfig+0x120>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00f      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a29      	ldr	r2, [pc, #164]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00b      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a28      	ldr	r2, [pc, #160]	; (8006b84 <TIM_Base_SetConfig+0x128>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d007      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a27      	ldr	r2, [pc, #156]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d003      	beq.n	8006af6 <TIM_Base_SetConfig+0x9a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a26      	ldr	r2, [pc, #152]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d108      	bne.n	8006b08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <TIM_Base_SetConfig+0x114>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d00f      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <TIM_Base_SetConfig+0x124>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00b      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a11      	ldr	r2, [pc, #68]	; (8006b84 <TIM_Base_SetConfig+0x128>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d007      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a10      	ldr	r2, [pc, #64]	; (8006b88 <TIM_Base_SetConfig+0x12c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_Base_SetConfig+0xf8>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a0f      	ldr	r2, [pc, #60]	; (8006b8c <TIM_Base_SetConfig+0x130>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d103      	bne.n	8006b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	615a      	str	r2, [r3, #20]
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40014000 	.word	0x40014000
 8006b88:	40014400 	.word	0x40014400
 8006b8c:	40014800 	.word	0x40014800

08006b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b087      	sub	sp, #28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	011b      	lsls	r3, r3, #4
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f023 030a 	bic.w	r3, r3, #10
 8006bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	621a      	str	r2, [r3, #32]
}
 8006be2:	bf00      	nop
 8006be4:	371c      	adds	r7, #28
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b087      	sub	sp, #28
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	f023 0210 	bic.w	r2, r3, #16
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	031b      	lsls	r3, r3, #12
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	621a      	str	r2, [r3, #32]
}
 8006c42:	bf00      	nop
 8006c44:	371c      	adds	r7, #28
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b085      	sub	sp, #20
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c66:	683a      	ldr	r2, [r7, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f043 0307 	orr.w	r3, r3, #7
 8006c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	609a      	str	r2, [r3, #8]
}
 8006c78:	bf00      	nop
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
 8006c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	021a      	lsls	r2, r3, #8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	609a      	str	r2, [r3, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e068      	b.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a2e      	ldr	r2, [pc, #184]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d004      	beq.n	8006d10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a2d      	ldr	r2, [pc, #180]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d108      	bne.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006d16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1e      	ldr	r2, [pc, #120]	; (8006dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01d      	beq.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d018      	beq.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d013      	beq.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1a      	ldr	r2, [pc, #104]	; (8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00e      	beq.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d009      	beq.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d004      	beq.n	8006d82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a14      	ldr	r2, [pc, #80]	; (8006dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d10c      	bne.n	8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40013400 	.word	0x40013400
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800
 8006dcc:	40000c00 	.word	0x40000c00
 8006dd0:	40014000 	.word	0x40014000

08006dd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e042      	b.n	8006ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f002 fa21 	bl	800927c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2224      	movs	r2, #36	; 0x24
 8006e3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 0201 	bic.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f998 	bl	8007188 <UART_SetConfig>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e022      	b.n	8006ea8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d002      	beq.n	8006e70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc88 	bl	8007780 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 fd0f 	bl	80078c4 <UART_CheckIdleState>
 8006ea6:	4603      	mov	r3, r0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af02      	add	r7, sp, #8
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	f040 8084 	bne.w	8006fd4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <HAL_UART_Transmit+0x28>
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e07c      	b.n	8006fd6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d101      	bne.n	8006eea <HAL_UART_Transmit+0x3a>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e075      	b.n	8006fd6 <HAL_UART_Transmit+0x126>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2221      	movs	r2, #33	; 0x21
 8006efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f02:	f7fa fbb7 	bl	8001674 <HAL_GetTick>
 8006f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	88fa      	ldrh	r2, [r7, #6]
 8006f0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	88fa      	ldrh	r2, [r7, #6]
 8006f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f20:	d108      	bne.n	8006f34 <HAL_UART_Transmit+0x84>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d104      	bne.n	8006f34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	e003      	b.n	8006f3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006f44:	e02d      	b.n	8006fa2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	9300      	str	r3, [sp, #0]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2180      	movs	r1, #128	; 0x80
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fd02 	bl	800795a <UART_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e03a      	b.n	8006fd6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	881a      	ldrh	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f72:	b292      	uxth	r2, r2
 8006f74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	3302      	adds	r3, #2
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e008      	b.n	8006f90 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	781a      	ldrb	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	b292      	uxth	r2, r2
 8006f88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1cb      	bne.n	8006f46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2140      	movs	r1, #64	; 0x40
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 fcce 	bl	800795a <UART_WaitOnFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e006      	b.n	8006fd6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e000      	b.n	8006fd6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006fd4:	2302      	movs	r3, #2
  }
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08a      	sub	sp, #40	; 0x28
 8006fe2:	af02      	add	r7, sp, #8
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	f040 80c1 	bne.w	800717c <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_UART_Receive+0x28>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e0b9      	b.n	800717e <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007010:	2b01      	cmp	r3, #1
 8007012:	d101      	bne.n	8007018 <HAL_UART_Receive+0x3a>
 8007014:	2302      	movs	r3, #2
 8007016:	e0b2      	b.n	800717e <HAL_UART_Receive+0x1a0>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2222      	movs	r2, #34	; 0x22
 800702c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007036:	f7fa fb1d 	bl	8001674 <HAL_GetTick>
 800703a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	88fa      	ldrh	r2, [r7, #6]
 8007040:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	88fa      	ldrh	r2, [r7, #6]
 8007048:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007054:	d10e      	bne.n	8007074 <HAL_UART_Receive+0x96>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d105      	bne.n	800706a <HAL_UART_Receive+0x8c>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007064:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007068:	e02d      	b.n	80070c6 <HAL_UART_Receive+0xe8>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	22ff      	movs	r2, #255	; 0xff
 800706e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007072:	e028      	b.n	80070c6 <HAL_UART_Receive+0xe8>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10d      	bne.n	8007098 <HAL_UART_Receive+0xba>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_UART_Receive+0xb0>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	22ff      	movs	r2, #255	; 0xff
 8007088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800708c:	e01b      	b.n	80070c6 <HAL_UART_Receive+0xe8>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	227f      	movs	r2, #127	; 0x7f
 8007092:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007096:	e016      	b.n	80070c6 <HAL_UART_Receive+0xe8>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070a0:	d10d      	bne.n	80070be <HAL_UART_Receive+0xe0>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d104      	bne.n	80070b4 <HAL_UART_Receive+0xd6>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	227f      	movs	r2, #127	; 0x7f
 80070ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070b2:	e008      	b.n	80070c6 <HAL_UART_Receive+0xe8>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	223f      	movs	r2, #63	; 0x3f
 80070b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070bc:	e003      	b.n	80070c6 <HAL_UART_Receive+0xe8>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d6:	d108      	bne.n	80070ea <HAL_UART_Receive+0x10c>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	e003      	b.n	80070f2 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80070fa:	e033      	b.n	8007164 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	2200      	movs	r2, #0
 8007104:	2120      	movs	r1, #32
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fc27 	bl	800795a <UART_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e033      	b.n	800717e <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10c      	bne.n	8007136 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007122:	b29a      	uxth	r2, r3
 8007124:	8a7b      	ldrh	r3, [r7, #18]
 8007126:	4013      	ands	r3, r2
 8007128:	b29a      	uxth	r2, r3
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	3302      	adds	r3, #2
 8007132:	61bb      	str	r3, [r7, #24]
 8007134:	e00d      	b.n	8007152 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800713c:	b29b      	uxth	r3, r3
 800713e:	b2da      	uxtb	r2, r3
 8007140:	8a7b      	ldrh	r3, [r7, #18]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	4013      	ands	r3, r2
 8007146:	b2da      	uxtb	r2, r3
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	3301      	adds	r3, #1
 8007150:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1c5      	bne.n	80070fc <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	e000      	b.n	800717e <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 800717c:	2302      	movs	r3, #2
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	3720      	adds	r7, #32
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800718c:	b08c      	sub	sp, #48	; 0x30
 800718e:	af00      	add	r7, sp, #0
 8007190:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	431a      	orrs	r2, r3
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4baa      	ldr	r3, [pc, #680]	; (8007460 <UART_SetConfig+0x2d8>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071c0:	430b      	orrs	r3, r1
 80071c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a9f      	ldr	r2, [pc, #636]	; (8007464 <UART_SetConfig+0x2dc>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071f0:	4313      	orrs	r3, r2
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80071fe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007208:	430b      	orrs	r3, r1
 800720a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	f023 010f 	bic.w	r1, r3, #15
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	430a      	orrs	r2, r1
 8007220:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a90      	ldr	r2, [pc, #576]	; (8007468 <UART_SetConfig+0x2e0>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d125      	bne.n	8007278 <UART_SetConfig+0xf0>
 800722c:	4b8f      	ldr	r3, [pc, #572]	; (800746c <UART_SetConfig+0x2e4>)
 800722e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	2b03      	cmp	r3, #3
 8007238:	d81a      	bhi.n	8007270 <UART_SetConfig+0xe8>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <UART_SetConfig+0xb8>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007251 	.word	0x08007251
 8007244:	08007261 	.word	0x08007261
 8007248:	08007259 	.word	0x08007259
 800724c:	08007269 	.word	0x08007269
 8007250:	2301      	movs	r3, #1
 8007252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007256:	e116      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007258:	2302      	movs	r3, #2
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725e:	e112      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007260:	2304      	movs	r3, #4
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007266:	e10e      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007268:	2308      	movs	r3, #8
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726e:	e10a      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007270:	2310      	movs	r3, #16
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007276:	e106      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a7c      	ldr	r2, [pc, #496]	; (8007470 <UART_SetConfig+0x2e8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d138      	bne.n	80072f4 <UART_SetConfig+0x16c>
 8007282:	4b7a      	ldr	r3, [pc, #488]	; (800746c <UART_SetConfig+0x2e4>)
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007288:	f003 030c 	and.w	r3, r3, #12
 800728c:	2b0c      	cmp	r3, #12
 800728e:	d82d      	bhi.n	80072ec <UART_SetConfig+0x164>
 8007290:	a201      	add	r2, pc, #4	; (adr r2, 8007298 <UART_SetConfig+0x110>)
 8007292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007296:	bf00      	nop
 8007298:	080072cd 	.word	0x080072cd
 800729c:	080072ed 	.word	0x080072ed
 80072a0:	080072ed 	.word	0x080072ed
 80072a4:	080072ed 	.word	0x080072ed
 80072a8:	080072dd 	.word	0x080072dd
 80072ac:	080072ed 	.word	0x080072ed
 80072b0:	080072ed 	.word	0x080072ed
 80072b4:	080072ed 	.word	0x080072ed
 80072b8:	080072d5 	.word	0x080072d5
 80072bc:	080072ed 	.word	0x080072ed
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072e5 	.word	0x080072e5
 80072cc:	2300      	movs	r3, #0
 80072ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072d2:	e0d8      	b.n	8007486 <UART_SetConfig+0x2fe>
 80072d4:	2302      	movs	r3, #2
 80072d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072da:	e0d4      	b.n	8007486 <UART_SetConfig+0x2fe>
 80072dc:	2304      	movs	r3, #4
 80072de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072e2:	e0d0      	b.n	8007486 <UART_SetConfig+0x2fe>
 80072e4:	2308      	movs	r3, #8
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ea:	e0cc      	b.n	8007486 <UART_SetConfig+0x2fe>
 80072ec:	2310      	movs	r3, #16
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072f2:	e0c8      	b.n	8007486 <UART_SetConfig+0x2fe>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a5e      	ldr	r2, [pc, #376]	; (8007474 <UART_SetConfig+0x2ec>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d125      	bne.n	800734a <UART_SetConfig+0x1c2>
 80072fe:	4b5b      	ldr	r3, [pc, #364]	; (800746c <UART_SetConfig+0x2e4>)
 8007300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007304:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007308:	2b30      	cmp	r3, #48	; 0x30
 800730a:	d016      	beq.n	800733a <UART_SetConfig+0x1b2>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d818      	bhi.n	8007342 <UART_SetConfig+0x1ba>
 8007310:	2b20      	cmp	r3, #32
 8007312:	d00a      	beq.n	800732a <UART_SetConfig+0x1a2>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d814      	bhi.n	8007342 <UART_SetConfig+0x1ba>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <UART_SetConfig+0x19a>
 800731c:	2b10      	cmp	r3, #16
 800731e:	d008      	beq.n	8007332 <UART_SetConfig+0x1aa>
 8007320:	e00f      	b.n	8007342 <UART_SetConfig+0x1ba>
 8007322:	2300      	movs	r3, #0
 8007324:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007328:	e0ad      	b.n	8007486 <UART_SetConfig+0x2fe>
 800732a:	2302      	movs	r3, #2
 800732c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007330:	e0a9      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007332:	2304      	movs	r3, #4
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007338:	e0a5      	b.n	8007486 <UART_SetConfig+0x2fe>
 800733a:	2308      	movs	r3, #8
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007340:	e0a1      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007342:	2310      	movs	r3, #16
 8007344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007348:	e09d      	b.n	8007486 <UART_SetConfig+0x2fe>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a4a      	ldr	r2, [pc, #296]	; (8007478 <UART_SetConfig+0x2f0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d125      	bne.n	80073a0 <UART_SetConfig+0x218>
 8007354:	4b45      	ldr	r3, [pc, #276]	; (800746c <UART_SetConfig+0x2e4>)
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800735e:	2bc0      	cmp	r3, #192	; 0xc0
 8007360:	d016      	beq.n	8007390 <UART_SetConfig+0x208>
 8007362:	2bc0      	cmp	r3, #192	; 0xc0
 8007364:	d818      	bhi.n	8007398 <UART_SetConfig+0x210>
 8007366:	2b80      	cmp	r3, #128	; 0x80
 8007368:	d00a      	beq.n	8007380 <UART_SetConfig+0x1f8>
 800736a:	2b80      	cmp	r3, #128	; 0x80
 800736c:	d814      	bhi.n	8007398 <UART_SetConfig+0x210>
 800736e:	2b00      	cmp	r3, #0
 8007370:	d002      	beq.n	8007378 <UART_SetConfig+0x1f0>
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d008      	beq.n	8007388 <UART_SetConfig+0x200>
 8007376:	e00f      	b.n	8007398 <UART_SetConfig+0x210>
 8007378:	2300      	movs	r3, #0
 800737a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800737e:	e082      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007380:	2302      	movs	r3, #2
 8007382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007386:	e07e      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007388:	2304      	movs	r3, #4
 800738a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800738e:	e07a      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007390:	2308      	movs	r3, #8
 8007392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007396:	e076      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007398:	2310      	movs	r3, #16
 800739a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739e:	e072      	b.n	8007486 <UART_SetConfig+0x2fe>
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a35      	ldr	r2, [pc, #212]	; (800747c <UART_SetConfig+0x2f4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d12a      	bne.n	8007400 <UART_SetConfig+0x278>
 80073aa:	4b30      	ldr	r3, [pc, #192]	; (800746c <UART_SetConfig+0x2e4>)
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b8:	d01a      	beq.n	80073f0 <UART_SetConfig+0x268>
 80073ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073be:	d81b      	bhi.n	80073f8 <UART_SetConfig+0x270>
 80073c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c4:	d00c      	beq.n	80073e0 <UART_SetConfig+0x258>
 80073c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ca:	d815      	bhi.n	80073f8 <UART_SetConfig+0x270>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <UART_SetConfig+0x250>
 80073d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073d4:	d008      	beq.n	80073e8 <UART_SetConfig+0x260>
 80073d6:	e00f      	b.n	80073f8 <UART_SetConfig+0x270>
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073de:	e052      	b.n	8007486 <UART_SetConfig+0x2fe>
 80073e0:	2302      	movs	r3, #2
 80073e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073e6:	e04e      	b.n	8007486 <UART_SetConfig+0x2fe>
 80073e8:	2304      	movs	r3, #4
 80073ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ee:	e04a      	b.n	8007486 <UART_SetConfig+0x2fe>
 80073f0:	2308      	movs	r3, #8
 80073f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073f6:	e046      	b.n	8007486 <UART_SetConfig+0x2fe>
 80073f8:	2310      	movs	r3, #16
 80073fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073fe:	e042      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a17      	ldr	r2, [pc, #92]	; (8007464 <UART_SetConfig+0x2dc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d13a      	bne.n	8007480 <UART_SetConfig+0x2f8>
 800740a:	4b18      	ldr	r3, [pc, #96]	; (800746c <UART_SetConfig+0x2e4>)
 800740c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007410:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007414:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007418:	d01a      	beq.n	8007450 <UART_SetConfig+0x2c8>
 800741a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800741e:	d81b      	bhi.n	8007458 <UART_SetConfig+0x2d0>
 8007420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007424:	d00c      	beq.n	8007440 <UART_SetConfig+0x2b8>
 8007426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800742a:	d815      	bhi.n	8007458 <UART_SetConfig+0x2d0>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <UART_SetConfig+0x2b0>
 8007430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007434:	d008      	beq.n	8007448 <UART_SetConfig+0x2c0>
 8007436:	e00f      	b.n	8007458 <UART_SetConfig+0x2d0>
 8007438:	2300      	movs	r3, #0
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800743e:	e022      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007440:	2302      	movs	r3, #2
 8007442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007446:	e01e      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007448:	2304      	movs	r3, #4
 800744a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800744e:	e01a      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007450:	2308      	movs	r3, #8
 8007452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007456:	e016      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007458:	2310      	movs	r3, #16
 800745a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800745e:	e012      	b.n	8007486 <UART_SetConfig+0x2fe>
 8007460:	cfff69f3 	.word	0xcfff69f3
 8007464:	40008000 	.word	0x40008000
 8007468:	40013800 	.word	0x40013800
 800746c:	40021000 	.word	0x40021000
 8007470:	40004400 	.word	0x40004400
 8007474:	40004800 	.word	0x40004800
 8007478:	40004c00 	.word	0x40004c00
 800747c:	40005000 	.word	0x40005000
 8007480:	2310      	movs	r3, #16
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4aae      	ldr	r2, [pc, #696]	; (8007744 <UART_SetConfig+0x5bc>)
 800748c:	4293      	cmp	r3, r2
 800748e:	f040 8097 	bne.w	80075c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007492:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007496:	2b08      	cmp	r3, #8
 8007498:	d823      	bhi.n	80074e2 <UART_SetConfig+0x35a>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <UART_SetConfig+0x318>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074c5 	.word	0x080074c5
 80074a4:	080074e3 	.word	0x080074e3
 80074a8:	080074cd 	.word	0x080074cd
 80074ac:	080074e3 	.word	0x080074e3
 80074b0:	080074d3 	.word	0x080074d3
 80074b4:	080074e3 	.word	0x080074e3
 80074b8:	080074e3 	.word	0x080074e3
 80074bc:	080074e3 	.word	0x080074e3
 80074c0:	080074db 	.word	0x080074db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c4:	f7fe f9ee 	bl	80058a4 <HAL_RCC_GetPCLK1Freq>
 80074c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074ca:	e010      	b.n	80074ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074cc:	4b9e      	ldr	r3, [pc, #632]	; (8007748 <UART_SetConfig+0x5c0>)
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074d0:	e00d      	b.n	80074ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074d2:	f7fe f94f 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 80074d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80074d8:	e009      	b.n	80074ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80074e0:	e005      	b.n	80074ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80074ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 8130 	beq.w	8007756 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	4a94      	ldr	r2, [pc, #592]	; (800774c <UART_SetConfig+0x5c4>)
 80074fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007500:	461a      	mov	r2, r3
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	fbb3 f3f2 	udiv	r3, r3, r2
 8007508:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	685a      	ldr	r2, [r3, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	429a      	cmp	r2, r3
 8007518:	d305      	bcc.n	8007526 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007520:	69ba      	ldr	r2, [r7, #24]
 8007522:	429a      	cmp	r2, r3
 8007524:	d903      	bls.n	800752e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800752c:	e113      	b.n	8007756 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	2200      	movs	r2, #0
 8007532:	60bb      	str	r3, [r7, #8]
 8007534:	60fa      	str	r2, [r7, #12]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	4a84      	ldr	r2, [pc, #528]	; (800774c <UART_SetConfig+0x5c4>)
 800753c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007540:	b29b      	uxth	r3, r3
 8007542:	2200      	movs	r2, #0
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800754c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007550:	f7f9 fbb2 	bl	8000cb8 <__aeabi_uldivmod>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4610      	mov	r0, r2
 800755a:	4619      	mov	r1, r3
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	020b      	lsls	r3, r1, #8
 8007566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800756a:	0202      	lsls	r2, r0, #8
 800756c:	6979      	ldr	r1, [r7, #20]
 800756e:	6849      	ldr	r1, [r1, #4]
 8007570:	0849      	lsrs	r1, r1, #1
 8007572:	2000      	movs	r0, #0
 8007574:	460c      	mov	r4, r1
 8007576:	4605      	mov	r5, r0
 8007578:	eb12 0804 	adds.w	r8, r2, r4
 800757c:	eb43 0905 	adc.w	r9, r3, r5
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	469a      	mov	sl, r3
 8007588:	4693      	mov	fp, r2
 800758a:	4652      	mov	r2, sl
 800758c:	465b      	mov	r3, fp
 800758e:	4640      	mov	r0, r8
 8007590:	4649      	mov	r1, r9
 8007592:	f7f9 fb91 	bl	8000cb8 <__aeabi_uldivmod>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4613      	mov	r3, r2
 800759c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075a4:	d308      	bcc.n	80075b8 <UART_SetConfig+0x430>
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ac:	d204      	bcs.n	80075b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	60da      	str	r2, [r3, #12]
 80075b6:	e0ce      	b.n	8007756 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075be:	e0ca      	b.n	8007756 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c8:	d166      	bne.n	8007698 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80075ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075ce:	2b08      	cmp	r3, #8
 80075d0:	d827      	bhi.n	8007622 <UART_SetConfig+0x49a>
 80075d2:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <UART_SetConfig+0x450>)
 80075d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d8:	080075fd 	.word	0x080075fd
 80075dc:	08007605 	.word	0x08007605
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	08007623 	.word	0x08007623
 80075e8:	08007613 	.word	0x08007613
 80075ec:	08007623 	.word	0x08007623
 80075f0:	08007623 	.word	0x08007623
 80075f4:	08007623 	.word	0x08007623
 80075f8:	0800761b 	.word	0x0800761b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075fc:	f7fe f952 	bl	80058a4 <HAL_RCC_GetPCLK1Freq>
 8007600:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007602:	e014      	b.n	800762e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007604:	f7fe f964 	bl	80058d0 <HAL_RCC_GetPCLK2Freq>
 8007608:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800760a:	e010      	b.n	800762e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800760c:	4b4e      	ldr	r3, [pc, #312]	; (8007748 <UART_SetConfig+0x5c0>)
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007610:	e00d      	b.n	800762e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007612:	f7fe f8af 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 8007616:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007618:	e009      	b.n	800762e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007620:	e005      	b.n	800762e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800762c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8090 	beq.w	8007756 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	4a44      	ldr	r2, [pc, #272]	; (800774c <UART_SetConfig+0x5c4>)
 800763c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007640:	461a      	mov	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	fbb3 f3f2 	udiv	r3, r3, r2
 8007648:	005a      	lsls	r2, r3, #1
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	085b      	lsrs	r3, r3, #1
 8007650:	441a      	add	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	fbb2 f3f3 	udiv	r3, r2, r3
 800765a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800765c:	6a3b      	ldr	r3, [r7, #32]
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d916      	bls.n	8007690 <UART_SetConfig+0x508>
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007668:	d212      	bcs.n	8007690 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	b29b      	uxth	r3, r3
 800766e:	f023 030f 	bic.w	r3, r3, #15
 8007672:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	b29b      	uxth	r3, r3
 800767a:	f003 0307 	and.w	r3, r3, #7
 800767e:	b29a      	uxth	r2, r3
 8007680:	8bfb      	ldrh	r3, [r7, #30]
 8007682:	4313      	orrs	r3, r2
 8007684:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	8bfa      	ldrh	r2, [r7, #30]
 800768c:	60da      	str	r2, [r3, #12]
 800768e:	e062      	b.n	8007756 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007696:	e05e      	b.n	8007756 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007698:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800769c:	2b08      	cmp	r3, #8
 800769e:	d828      	bhi.n	80076f2 <UART_SetConfig+0x56a>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <UART_SetConfig+0x520>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076cd 	.word	0x080076cd
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076dd 	.word	0x080076dd
 80076b4:	080076f3 	.word	0x080076f3
 80076b8:	080076e3 	.word	0x080076e3
 80076bc:	080076f3 	.word	0x080076f3
 80076c0:	080076f3 	.word	0x080076f3
 80076c4:	080076f3 	.word	0x080076f3
 80076c8:	080076eb 	.word	0x080076eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076cc:	f7fe f8ea 	bl	80058a4 <HAL_RCC_GetPCLK1Freq>
 80076d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076d2:	e014      	b.n	80076fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076d4:	f7fe f8fc 	bl	80058d0 <HAL_RCC_GetPCLK2Freq>
 80076d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076da:	e010      	b.n	80076fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076dc:	4b1a      	ldr	r3, [pc, #104]	; (8007748 <UART_SetConfig+0x5c0>)
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076e0:	e00d      	b.n	80076fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076e2:	f7fe f847 	bl	8005774 <HAL_RCC_GetSysClockFreq>
 80076e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80076e8:	e009      	b.n	80076fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076f0:	e005      	b.n	80076fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80076f2:	2300      	movs	r3, #0
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80076fc:	bf00      	nop
    }

    if (pclk != 0U)
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d028      	beq.n	8007756 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	4a10      	ldr	r2, [pc, #64]	; (800774c <UART_SetConfig+0x5c4>)
 800770a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800770e:	461a      	mov	r2, r3
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	fbb3 f2f2 	udiv	r2, r3, r2
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	441a      	add	r2, r3
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	fbb2 f3f3 	udiv	r3, r2, r3
 8007726:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007728:	6a3b      	ldr	r3, [r7, #32]
 800772a:	2b0f      	cmp	r3, #15
 800772c:	d910      	bls.n	8007750 <UART_SetConfig+0x5c8>
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d20c      	bcs.n	8007750 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	b29a      	uxth	r2, r3
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60da      	str	r2, [r3, #12]
 8007740:	e009      	b.n	8007756 <UART_SetConfig+0x5ce>
 8007742:	bf00      	nop
 8007744:	40008000 	.word	0x40008000
 8007748:	00f42400 	.word	0x00f42400
 800774c:	0800ef74 	.word	0x0800ef74
      }
      else
      {
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	2201      	movs	r2, #1
 800775a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2201      	movs	r2, #1
 8007762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2200      	movs	r2, #0
 800776a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2200      	movs	r2, #0
 8007770:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007772:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007776:	4618      	mov	r0, r3
 8007778:	3730      	adds	r7, #48	; 0x30
 800777a:	46bd      	mov	sp, r7
 800777c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	f003 0304 	and.w	r3, r3, #4
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01a      	beq.n	8007896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800787e:	d10a      	bne.n	8007896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	430a      	orrs	r2, r1
 8007894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	605a      	str	r2, [r3, #4]
  }
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af02      	add	r7, sp, #8
 80078ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078d4:	f7f9 fece 	bl	8001674 <HAL_GetTick>
 80078d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d10e      	bne.n	8007906 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f82f 	bl	800795a <UART_WaitOnFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e025      	b.n	8007952 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b04      	cmp	r3, #4
 8007912:	d10e      	bne.n	8007932 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007914:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f819 	bl	800795a <UART_WaitOnFlagUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e00f      	b.n	8007952 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2220      	movs	r2, #32
 800793e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b09c      	sub	sp, #112	; 0x70
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	603b      	str	r3, [r7, #0]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800796a:	e0a9      	b.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800796c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007972:	f000 80a5 	beq.w	8007ac0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007976:	f7f9 fe7d 	bl	8001674 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007982:	429a      	cmp	r2, r3
 8007984:	d302      	bcc.n	800798c <UART_WaitOnFlagUntilTimeout+0x32>
 8007986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007988:	2b00      	cmp	r3, #0
 800798a:	d140      	bne.n	8007a0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800799a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800799c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079a0:	667b      	str	r3, [r7, #100]	; 0x64
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80079b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e6      	bne.n	800798c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3308      	adds	r3, #8
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	663b      	str	r3, [r7, #96]	; 0x60
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3308      	adds	r3, #8
 80079dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079de:	64ba      	str	r2, [r7, #72]	; 0x48
 80079e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1e5      	bne.n	80079be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2220      	movs	r2, #32
 80079f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2220      	movs	r2, #32
 80079fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e069      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d051      	beq.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2a:	d149      	bne.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	e853 3f00 	ldrex	r3, [r3]
 8007a42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
 8007a56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a5c:	e841 2300 	strex	r3, r2, [r1]
 8007a60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d1e6      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	e853 3f00 	ldrex	r3, [r3]
 8007a76:	613b      	str	r3, [r7, #16]
   return(result);
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f023 0301 	bic.w	r3, r3, #1
 8007a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	3308      	adds	r3, #8
 8007a86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a88:	623a      	str	r2, [r7, #32]
 8007a8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	6a3a      	ldr	r2, [r7, #32]
 8007a90:	e841 2300 	strex	r3, r2, [r1]
 8007a94:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d1e5      	bne.n	8007a68 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e010      	b.n	8007ae2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	bf0c      	ite	eq
 8007ad0:	2301      	moveq	r3, #1
 8007ad2:	2300      	movne	r3, #0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	f43f af46 	beq.w	800796c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3770      	adds	r7, #112	; 0x70
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d101      	bne.n	8007b00 <HAL_UARTEx_DisableFifoMode+0x16>
 8007afc:	2302      	movs	r3, #2
 8007afe:	e027      	b.n	8007b50 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2224      	movs	r2, #36	; 0x24
 8007b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f022 0201 	bic.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b2e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e02d      	b.n	8007bd0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2224      	movs	r2, #36	; 0x24
 8007b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0201 	bic.w	r2, r2, #1
 8007b9a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f84f 	bl	8007c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2220      	movs	r2, #32
 8007bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d101      	bne.n	8007bf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bec:	2302      	movs	r3, #2
 8007bee:	e02d      	b.n	8007c4c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2224      	movs	r2, #36	; 0x24
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0201 	bic.w	r2, r2, #1
 8007c16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f811 	bl	8007c54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2220      	movs	r2, #32
 8007c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d108      	bne.n	8007c76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c74:	e031      	b.n	8007cda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c76:	2308      	movs	r3, #8
 8007c78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	0e5b      	lsrs	r3, r3, #25
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	0f5b      	lsrs	r3, r3, #29
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ca0:	7b3a      	ldrb	r2, [r7, #12]
 8007ca2:	4911      	ldr	r1, [pc, #68]	; (8007ce8 <UARTEx_SetNbDataToProcess+0x94>)
 8007ca4:	5c8a      	ldrb	r2, [r1, r2]
 8007ca6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007caa:	7b3a      	ldrb	r2, [r7, #12]
 8007cac:	490f      	ldr	r1, [pc, #60]	; (8007cec <UARTEx_SetNbDataToProcess+0x98>)
 8007cae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	7b7a      	ldrb	r2, [r7, #13]
 8007cc0:	4909      	ldr	r1, [pc, #36]	; (8007ce8 <UARTEx_SetNbDataToProcess+0x94>)
 8007cc2:	5c8a      	ldrb	r2, [r1, r2]
 8007cc4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cc8:	7b7a      	ldrb	r2, [r7, #13]
 8007cca:	4908      	ldr	r1, [pc, #32]	; (8007cec <UARTEx_SetNbDataToProcess+0x98>)
 8007ccc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cce:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cda:	bf00      	nop
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	0800ef8c 	.word	0x0800ef8c
 8007cec:	0800ef94 	.word	0x0800ef94

08007cf0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8007cf8:	1d39      	adds	r1, r7, #4
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4803      	ldr	r0, [pc, #12]	; (8007d10 <__io_putchar+0x20>)
 8007d02:	f7ff f8d5 	bl	8006eb0 <HAL_UART_Transmit>
  return ch;
 8007d06:	687b      	ldr	r3, [r7, #4]
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	20000460 	.word	0x20000460

08007d14 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 8007d1e:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <__io_getchar+0x38>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2208      	movs	r2, #8
 8007d24:	621a      	str	r2, [r3, #32]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8007d26:	1df9      	adds	r1, r7, #7
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4807      	ldr	r0, [pc, #28]	; (8007d4c <__io_getchar+0x38>)
 8007d30:	f7ff f955 	bl	8006fde <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8007d34:	1df9      	adds	r1, r7, #7
 8007d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	4803      	ldr	r0, [pc, #12]	; (8007d4c <__io_getchar+0x38>)
 8007d3e:	f7ff f8b7 	bl	8006eb0 <HAL_UART_Transmit>
  return ch;
 8007d42:	79fb      	ldrb	r3, [r7, #7]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	20000460 	.word	0x20000460

08007d50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	80fb      	strh	r3, [r7, #6]
	printf("Interrupt \n\r");
 8007d5a:	4807      	ldr	r0, [pc, #28]	; (8007d78 <HAL_GPIO_EXTI_Callback+0x28>)
 8007d5c:	f002 fb34 	bl	800a3c8 <iprintf>
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d66:	d102      	bne.n	8007d6e <HAL_GPIO_EXTI_Callback+0x1e>
		printf("Button Pressed. \n\r");
 8007d68:	4804      	ldr	r0, [pc, #16]	; (8007d7c <HAL_GPIO_EXTI_Callback+0x2c>)
 8007d6a:	f002 fb2d 	bl	800a3c8 <iprintf>
//		} else {
//			printf("Taking letter input from terminal, outputting Morse. \n\r");
//			printf("Press the spacebar to end current translation. \n\r");
//		}
	}
}
 8007d6e:	bf00      	nop
 8007d70:	3708      	adds	r7, #8
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	0800ed20 	.word	0x0800ed20
 8007d7c:	0800ed30 	.word	0x0800ed30

08007d80 <HAL_TIM_PeriodElapsedCallback>:

/**
 * Interrupt method to increment the counter at every millisecond
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
	if (htim == &htim5) {
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a07      	ldr	r2, [pc, #28]	; (8007da8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_PeriodElapsedCallback+0x1a>
		millis++;
 8007d90:	4b06      	ldr	r3, [pc, #24]	; (8007dac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3301      	adds	r3, #1
 8007d96:	4a05      	ldr	r2, [pc, #20]	; (8007dac <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007d98:	6013      	str	r3, [r2, #0]
	}
}
 8007d9a:	bf00      	nop
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	20000414 	.word	0x20000414
 8007dac:	20000500 	.word	0x20000500

08007db0 <updateMorseLetter>:

/**
 * Update global variables for the Morse array based on the inputted letter
 */
void updateMorseLetter(char letter){
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]

	// \0s for space
	morseLetterSize = 4;
 8007dba:	4bb6      	ldr	r3, [pc, #728]	; (8008094 <updateMorseLetter+0x2e4>)
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	601a      	str	r2, [r3, #0]
	morseLetter[0] = '\0'; morseLetter[1] = '\0'; morseLetter[2] = '\0'; morseLetter[3] = '\0';
 8007dc0:	4bb5      	ldr	r3, [pc, #724]	; (8008098 <updateMorseLetter+0x2e8>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	701a      	strb	r2, [r3, #0]
 8007dc6:	4bb4      	ldr	r3, [pc, #720]	; (8008098 <updateMorseLetter+0x2e8>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	705a      	strb	r2, [r3, #1]
 8007dcc:	4bb2      	ldr	r3, [pc, #712]	; (8008098 <updateMorseLetter+0x2e8>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	709a      	strb	r2, [r3, #2]
 8007dd2:	4bb1      	ldr	r3, [pc, #708]	; (8008098 <updateMorseLetter+0x2e8>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	70da      	strb	r2, [r3, #3]
	switch (letter)
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	3b61      	subs	r3, #97	; 0x61
 8007ddc:	2b19      	cmp	r3, #25
 8007dde:	f200 819a 	bhi.w	8008116 <updateMorseLetter+0x366>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <updateMorseLetter+0x38>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e51 	.word	0x08007e51
 8007dec:	08007e65 	.word	0x08007e65
 8007df0:	08007e85 	.word	0x08007e85
 8007df4:	08007ea5 	.word	0x08007ea5
 8007df8:	08007ebf 	.word	0x08007ebf
 8007dfc:	08007ecd 	.word	0x08007ecd
 8007e00:	08007eed 	.word	0x08007eed
 8007e04:	08007f07 	.word	0x08007f07
 8007e08:	08007f27 	.word	0x08007f27
 8007e0c:	08007f3b 	.word	0x08007f3b
 8007e10:	08007f5b 	.word	0x08007f5b
 8007e14:	08007f75 	.word	0x08007f75
 8007e18:	08007f95 	.word	0x08007f95
 8007e1c:	08007fa9 	.word	0x08007fa9
 8007e20:	08007fbd 	.word	0x08007fbd
 8007e24:	08007fd7 	.word	0x08007fd7
 8007e28:	08007ff7 	.word	0x08007ff7
 8007e2c:	08008017 	.word	0x08008017
 8007e30:	08008031 	.word	0x08008031
 8007e34:	0800804b 	.word	0x0800804b
 8007e38:	08008059 	.word	0x08008059
 8007e3c:	08008073 	.word	0x08008073
 8007e40:	0800809d 	.word	0x0800809d
 8007e44:	080080b7 	.word	0x080080b7
 8007e48:	080080d7 	.word	0x080080d7
 8007e4c:	080080f7 	.word	0x080080f7
	{
		case 'a':
			morseLetter[0] = '.'; morseLetter[1] = '-';
 8007e50:	4b91      	ldr	r3, [pc, #580]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e52:	222e      	movs	r2, #46	; 0x2e
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	4b90      	ldr	r3, [pc, #576]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e58:	222d      	movs	r2, #45	; 0x2d
 8007e5a:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007e5c:	4b8d      	ldr	r3, [pc, #564]	; (8008094 <updateMorseLetter+0x2e4>)
 8007e5e:	2202      	movs	r2, #2
 8007e60:	601a      	str	r2, [r3, #0]
			break;
 8007e62:	e158      	b.n	8008116 <updateMorseLetter+0x366>
		case 'b':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8007e64:	4b8c      	ldr	r3, [pc, #560]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e66:	222d      	movs	r2, #45	; 0x2d
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	4b8b      	ldr	r3, [pc, #556]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e6c:	222e      	movs	r2, #46	; 0x2e
 8007e6e:	705a      	strb	r2, [r3, #1]
 8007e70:	4b89      	ldr	r3, [pc, #548]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e72:	222e      	movs	r2, #46	; 0x2e
 8007e74:	709a      	strb	r2, [r3, #2]
 8007e76:	4b88      	ldr	r3, [pc, #544]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e78:	222e      	movs	r2, #46	; 0x2e
 8007e7a:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007e7c:	4b85      	ldr	r3, [pc, #532]	; (8008094 <updateMorseLetter+0x2e4>)
 8007e7e:	2204      	movs	r2, #4
 8007e80:	601a      	str	r2, [r3, #0]
			break;
 8007e82:	e148      	b.n	8008116 <updateMorseLetter+0x366>
		case 'c':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8007e84:	4b84      	ldr	r3, [pc, #528]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e86:	222d      	movs	r2, #45	; 0x2d
 8007e88:	701a      	strb	r2, [r3, #0]
 8007e8a:	4b83      	ldr	r3, [pc, #524]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e8c:	222e      	movs	r2, #46	; 0x2e
 8007e8e:	705a      	strb	r2, [r3, #1]
 8007e90:	4b81      	ldr	r3, [pc, #516]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e92:	222d      	movs	r2, #45	; 0x2d
 8007e94:	709a      	strb	r2, [r3, #2]
 8007e96:	4b80      	ldr	r3, [pc, #512]	; (8008098 <updateMorseLetter+0x2e8>)
 8007e98:	222e      	movs	r2, #46	; 0x2e
 8007e9a:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007e9c:	4b7d      	ldr	r3, [pc, #500]	; (8008094 <updateMorseLetter+0x2e4>)
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	601a      	str	r2, [r3, #0]
			break;
 8007ea2:	e138      	b.n	8008116 <updateMorseLetter+0x366>
		case 'd':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.';
 8007ea4:	4b7c      	ldr	r3, [pc, #496]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ea6:	222d      	movs	r2, #45	; 0x2d
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	4b7b      	ldr	r3, [pc, #492]	; (8008098 <updateMorseLetter+0x2e8>)
 8007eac:	222e      	movs	r2, #46	; 0x2e
 8007eae:	705a      	strb	r2, [r3, #1]
 8007eb0:	4b79      	ldr	r3, [pc, #484]	; (8008098 <updateMorseLetter+0x2e8>)
 8007eb2:	222e      	movs	r2, #46	; 0x2e
 8007eb4:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007eb6:	4b77      	ldr	r3, [pc, #476]	; (8008094 <updateMorseLetter+0x2e4>)
 8007eb8:	2203      	movs	r2, #3
 8007eba:	601a      	str	r2, [r3, #0]
			break;
 8007ebc:	e12b      	b.n	8008116 <updateMorseLetter+0x366>
		case 'e':
			morseLetter[0] = '.';
 8007ebe:	4b76      	ldr	r3, [pc, #472]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ec0:	222e      	movs	r2, #46	; 0x2e
 8007ec2:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 8007ec4:	4b73      	ldr	r3, [pc, #460]	; (8008094 <updateMorseLetter+0x2e4>)
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	601a      	str	r2, [r3, #0]
			break;
 8007eca:	e124      	b.n	8008116 <updateMorseLetter+0x366>
		case 'f':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8007ecc:	4b72      	ldr	r3, [pc, #456]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ece:	222e      	movs	r2, #46	; 0x2e
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	4b71      	ldr	r3, [pc, #452]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ed4:	222e      	movs	r2, #46	; 0x2e
 8007ed6:	705a      	strb	r2, [r3, #1]
 8007ed8:	4b6f      	ldr	r3, [pc, #444]	; (8008098 <updateMorseLetter+0x2e8>)
 8007eda:	222d      	movs	r2, #45	; 0x2d
 8007edc:	709a      	strb	r2, [r3, #2]
 8007ede:	4b6e      	ldr	r3, [pc, #440]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ee0:	222e      	movs	r2, #46	; 0x2e
 8007ee2:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007ee4:	4b6b      	ldr	r3, [pc, #428]	; (8008094 <updateMorseLetter+0x2e4>)
 8007ee6:	2204      	movs	r2, #4
 8007ee8:	601a      	str	r2, [r3, #0]
			break;
 8007eea:	e114      	b.n	8008116 <updateMorseLetter+0x366>
		case 'g':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8007eec:	4b6a      	ldr	r3, [pc, #424]	; (8008098 <updateMorseLetter+0x2e8>)
 8007eee:	222d      	movs	r2, #45	; 0x2d
 8007ef0:	701a      	strb	r2, [r3, #0]
 8007ef2:	4b69      	ldr	r3, [pc, #420]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ef4:	222d      	movs	r2, #45	; 0x2d
 8007ef6:	705a      	strb	r2, [r3, #1]
 8007ef8:	4b67      	ldr	r3, [pc, #412]	; (8008098 <updateMorseLetter+0x2e8>)
 8007efa:	222e      	movs	r2, #46	; 0x2e
 8007efc:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007efe:	4b65      	ldr	r3, [pc, #404]	; (8008094 <updateMorseLetter+0x2e4>)
 8007f00:	2203      	movs	r2, #3
 8007f02:	601a      	str	r2, [r3, #0]
			break;
 8007f04:	e107      	b.n	8008116 <updateMorseLetter+0x366>
		case 'h':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8007f06:	4b64      	ldr	r3, [pc, #400]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f08:	222e      	movs	r2, #46	; 0x2e
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	4b62      	ldr	r3, [pc, #392]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f0e:	222e      	movs	r2, #46	; 0x2e
 8007f10:	705a      	strb	r2, [r3, #1]
 8007f12:	4b61      	ldr	r3, [pc, #388]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f14:	222e      	movs	r2, #46	; 0x2e
 8007f16:	709a      	strb	r2, [r3, #2]
 8007f18:	4b5f      	ldr	r3, [pc, #380]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f1a:	222e      	movs	r2, #46	; 0x2e
 8007f1c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007f1e:	4b5d      	ldr	r3, [pc, #372]	; (8008094 <updateMorseLetter+0x2e4>)
 8007f20:	2204      	movs	r2, #4
 8007f22:	601a      	str	r2, [r3, #0]
			break;
 8007f24:	e0f7      	b.n	8008116 <updateMorseLetter+0x366>
		case 'i':
			morseLetter[0] = '.'; morseLetter[1] = '.';
 8007f26:	4b5c      	ldr	r3, [pc, #368]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f28:	222e      	movs	r2, #46	; 0x2e
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	4b5a      	ldr	r3, [pc, #360]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f2e:	222e      	movs	r2, #46	; 0x2e
 8007f30:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007f32:	4b58      	ldr	r3, [pc, #352]	; (8008094 <updateMorseLetter+0x2e4>)
 8007f34:	2202      	movs	r2, #2
 8007f36:	601a      	str	r2, [r3, #0]
			break;
 8007f38:	e0ed      	b.n	8008116 <updateMorseLetter+0x366>
		case 'j':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '-';
 8007f3a:	4b57      	ldr	r3, [pc, #348]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f3c:	222e      	movs	r2, #46	; 0x2e
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	4b55      	ldr	r3, [pc, #340]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f42:	222d      	movs	r2, #45	; 0x2d
 8007f44:	705a      	strb	r2, [r3, #1]
 8007f46:	4b54      	ldr	r3, [pc, #336]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f48:	222d      	movs	r2, #45	; 0x2d
 8007f4a:	709a      	strb	r2, [r3, #2]
 8007f4c:	4b52      	ldr	r3, [pc, #328]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f4e:	222d      	movs	r2, #45	; 0x2d
 8007f50:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007f52:	4b50      	ldr	r3, [pc, #320]	; (8008094 <updateMorseLetter+0x2e4>)
 8007f54:	2204      	movs	r2, #4
 8007f56:	601a      	str	r2, [r3, #0]
			break;
 8007f58:	e0dd      	b.n	8008116 <updateMorseLetter+0x366>
		case 'k':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8007f5a:	4b4f      	ldr	r3, [pc, #316]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f5c:	222d      	movs	r2, #45	; 0x2d
 8007f5e:	701a      	strb	r2, [r3, #0]
 8007f60:	4b4d      	ldr	r3, [pc, #308]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f62:	222e      	movs	r2, #46	; 0x2e
 8007f64:	705a      	strb	r2, [r3, #1]
 8007f66:	4b4c      	ldr	r3, [pc, #304]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f68:	222d      	movs	r2, #45	; 0x2d
 8007f6a:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007f6c:	4b49      	ldr	r3, [pc, #292]	; (8008094 <updateMorseLetter+0x2e4>)
 8007f6e:	2203      	movs	r2, #3
 8007f70:	601a      	str	r2, [r3, #0]
			break;
 8007f72:	e0d0      	b.n	8008116 <updateMorseLetter+0x366>
		case 'l':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 8007f74:	4b48      	ldr	r3, [pc, #288]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f76:	222e      	movs	r2, #46	; 0x2e
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	4b47      	ldr	r3, [pc, #284]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f7c:	222d      	movs	r2, #45	; 0x2d
 8007f7e:	705a      	strb	r2, [r3, #1]
 8007f80:	4b45      	ldr	r3, [pc, #276]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f82:	222e      	movs	r2, #46	; 0x2e
 8007f84:	709a      	strb	r2, [r3, #2]
 8007f86:	4b44      	ldr	r3, [pc, #272]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f88:	222e      	movs	r2, #46	; 0x2e
 8007f8a:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007f8c:	4b41      	ldr	r3, [pc, #260]	; (8008094 <updateMorseLetter+0x2e4>)
 8007f8e:	2204      	movs	r2, #4
 8007f90:	601a      	str	r2, [r3, #0]
			break;
 8007f92:	e0c0      	b.n	8008116 <updateMorseLetter+0x366>
		case 'm':
			morseLetter[0] = '-'; morseLetter[1] = '-';
 8007f94:	4b40      	ldr	r3, [pc, #256]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f96:	222d      	movs	r2, #45	; 0x2d
 8007f98:	701a      	strb	r2, [r3, #0]
 8007f9a:	4b3f      	ldr	r3, [pc, #252]	; (8008098 <updateMorseLetter+0x2e8>)
 8007f9c:	222d      	movs	r2, #45	; 0x2d
 8007f9e:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007fa0:	4b3c      	ldr	r3, [pc, #240]	; (8008094 <updateMorseLetter+0x2e4>)
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	601a      	str	r2, [r3, #0]
			break;
 8007fa6:	e0b6      	b.n	8008116 <updateMorseLetter+0x366>
		case 'n':
			morseLetter[0] = '-'; morseLetter[1] = '.';
 8007fa8:	4b3b      	ldr	r3, [pc, #236]	; (8008098 <updateMorseLetter+0x2e8>)
 8007faa:	222d      	movs	r2, #45	; 0x2d
 8007fac:	701a      	strb	r2, [r3, #0]
 8007fae:	4b3a      	ldr	r3, [pc, #232]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fb0:	222e      	movs	r2, #46	; 0x2e
 8007fb2:	705a      	strb	r2, [r3, #1]
			morseLetterSize = 2;
 8007fb4:	4b37      	ldr	r3, [pc, #220]	; (8008094 <updateMorseLetter+0x2e4>)
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	601a      	str	r2, [r3, #0]
			break;
 8007fba:	e0ac      	b.n	8008116 <updateMorseLetter+0x366>
		case 'o':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '-';
 8007fbc:	4b36      	ldr	r3, [pc, #216]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fbe:	222d      	movs	r2, #45	; 0x2d
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	4b35      	ldr	r3, [pc, #212]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fc4:	222d      	movs	r2, #45	; 0x2d
 8007fc6:	705a      	strb	r2, [r3, #1]
 8007fc8:	4b33      	ldr	r3, [pc, #204]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fca:	222d      	movs	r2, #45	; 0x2d
 8007fcc:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8007fce:	4b31      	ldr	r3, [pc, #196]	; (8008094 <updateMorseLetter+0x2e4>)
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	601a      	str	r2, [r3, #0]
			break;
 8007fd4:	e09f      	b.n	8008116 <updateMorseLetter+0x366>
		case 'p':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-'; morseLetter[3] = '.';
 8007fd6:	4b30      	ldr	r3, [pc, #192]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fd8:	222e      	movs	r2, #46	; 0x2e
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fde:	222d      	movs	r2, #45	; 0x2d
 8007fe0:	705a      	strb	r2, [r3, #1]
 8007fe2:	4b2d      	ldr	r3, [pc, #180]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fe4:	222d      	movs	r2, #45	; 0x2d
 8007fe6:	709a      	strb	r2, [r3, #2]
 8007fe8:	4b2b      	ldr	r3, [pc, #172]	; (8008098 <updateMorseLetter+0x2e8>)
 8007fea:	222e      	movs	r2, #46	; 0x2e
 8007fec:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 8007fee:	4b29      	ldr	r3, [pc, #164]	; (8008094 <updateMorseLetter+0x2e4>)
 8007ff0:	2204      	movs	r2, #4
 8007ff2:	601a      	str	r2, [r3, #0]
			break;
 8007ff4:	e08f      	b.n	8008116 <updateMorseLetter+0x366>
		case 'q':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8007ff6:	4b28      	ldr	r3, [pc, #160]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ff8:	222d      	movs	r2, #45	; 0x2d
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	4b26      	ldr	r3, [pc, #152]	; (8008098 <updateMorseLetter+0x2e8>)
 8007ffe:	222d      	movs	r2, #45	; 0x2d
 8008000:	705a      	strb	r2, [r3, #1]
 8008002:	4b25      	ldr	r3, [pc, #148]	; (8008098 <updateMorseLetter+0x2e8>)
 8008004:	222e      	movs	r2, #46	; 0x2e
 8008006:	709a      	strb	r2, [r3, #2]
 8008008:	4b23      	ldr	r3, [pc, #140]	; (8008098 <updateMorseLetter+0x2e8>)
 800800a:	222d      	movs	r2, #45	; 0x2d
 800800c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800800e:	4b21      	ldr	r3, [pc, #132]	; (8008094 <updateMorseLetter+0x2e4>)
 8008010:	2204      	movs	r2, #4
 8008012:	601a      	str	r2, [r3, #0]
			break;
 8008014:	e07f      	b.n	8008116 <updateMorseLetter+0x366>
		case 'r':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '.';
 8008016:	4b20      	ldr	r3, [pc, #128]	; (8008098 <updateMorseLetter+0x2e8>)
 8008018:	222e      	movs	r2, #46	; 0x2e
 800801a:	701a      	strb	r2, [r3, #0]
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <updateMorseLetter+0x2e8>)
 800801e:	222d      	movs	r2, #45	; 0x2d
 8008020:	705a      	strb	r2, [r3, #1]
 8008022:	4b1d      	ldr	r3, [pc, #116]	; (8008098 <updateMorseLetter+0x2e8>)
 8008024:	222e      	movs	r2, #46	; 0x2e
 8008026:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8008028:	4b1a      	ldr	r3, [pc, #104]	; (8008094 <updateMorseLetter+0x2e4>)
 800802a:	2203      	movs	r2, #3
 800802c:	601a      	str	r2, [r3, #0]
			break;
 800802e:	e072      	b.n	8008116 <updateMorseLetter+0x366>
		case 's':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.';
 8008030:	4b19      	ldr	r3, [pc, #100]	; (8008098 <updateMorseLetter+0x2e8>)
 8008032:	222e      	movs	r2, #46	; 0x2e
 8008034:	701a      	strb	r2, [r3, #0]
 8008036:	4b18      	ldr	r3, [pc, #96]	; (8008098 <updateMorseLetter+0x2e8>)
 8008038:	222e      	movs	r2, #46	; 0x2e
 800803a:	705a      	strb	r2, [r3, #1]
 800803c:	4b16      	ldr	r3, [pc, #88]	; (8008098 <updateMorseLetter+0x2e8>)
 800803e:	222e      	movs	r2, #46	; 0x2e
 8008040:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <updateMorseLetter+0x2e4>)
 8008044:	2203      	movs	r2, #3
 8008046:	601a      	str	r2, [r3, #0]
			break;
 8008048:	e065      	b.n	8008116 <updateMorseLetter+0x366>
		case 't':
			morseLetter[0] = '-';
 800804a:	4b13      	ldr	r3, [pc, #76]	; (8008098 <updateMorseLetter+0x2e8>)
 800804c:	222d      	movs	r2, #45	; 0x2d
 800804e:	701a      	strb	r2, [r3, #0]
			morseLetterSize = 1;
 8008050:	4b10      	ldr	r3, [pc, #64]	; (8008094 <updateMorseLetter+0x2e4>)
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
			break;
 8008056:	e05e      	b.n	8008116 <updateMorseLetter+0x366>
		case 'u':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '-';
 8008058:	4b0f      	ldr	r3, [pc, #60]	; (8008098 <updateMorseLetter+0x2e8>)
 800805a:	222e      	movs	r2, #46	; 0x2e
 800805c:	701a      	strb	r2, [r3, #0]
 800805e:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <updateMorseLetter+0x2e8>)
 8008060:	222e      	movs	r2, #46	; 0x2e
 8008062:	705a      	strb	r2, [r3, #1]
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <updateMorseLetter+0x2e8>)
 8008066:	222d      	movs	r2, #45	; 0x2d
 8008068:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 800806a:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <updateMorseLetter+0x2e4>)
 800806c:	2203      	movs	r2, #3
 800806e:	601a      	str	r2, [r3, #0]
			break;
 8008070:	e051      	b.n	8008116 <updateMorseLetter+0x366>
		case 'v':
			morseLetter[0] = '.'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <updateMorseLetter+0x2e8>)
 8008074:	222e      	movs	r2, #46	; 0x2e
 8008076:	701a      	strb	r2, [r3, #0]
 8008078:	4b07      	ldr	r3, [pc, #28]	; (8008098 <updateMorseLetter+0x2e8>)
 800807a:	222e      	movs	r2, #46	; 0x2e
 800807c:	705a      	strb	r2, [r3, #1]
 800807e:	4b06      	ldr	r3, [pc, #24]	; (8008098 <updateMorseLetter+0x2e8>)
 8008080:	222e      	movs	r2, #46	; 0x2e
 8008082:	709a      	strb	r2, [r3, #2]
 8008084:	4b04      	ldr	r3, [pc, #16]	; (8008098 <updateMorseLetter+0x2e8>)
 8008086:	222d      	movs	r2, #45	; 0x2d
 8008088:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800808a:	4b02      	ldr	r3, [pc, #8]	; (8008094 <updateMorseLetter+0x2e4>)
 800808c:	2204      	movs	r2, #4
 800808e:	601a      	str	r2, [r3, #0]
			break;
 8008090:	e041      	b.n	8008116 <updateMorseLetter+0x366>
 8008092:	bf00      	nop
 8008094:	200004f4 	.word	0x200004f4
 8008098:	200004f8 	.word	0x200004f8
		case 'w':
			morseLetter[0] = '.'; morseLetter[1] = '-'; morseLetter[2] = '-';
 800809c:	4b21      	ldr	r3, [pc, #132]	; (8008124 <updateMorseLetter+0x374>)
 800809e:	222e      	movs	r2, #46	; 0x2e
 80080a0:	701a      	strb	r2, [r3, #0]
 80080a2:	4b20      	ldr	r3, [pc, #128]	; (8008124 <updateMorseLetter+0x374>)
 80080a4:	222d      	movs	r2, #45	; 0x2d
 80080a6:	705a      	strb	r2, [r3, #1]
 80080a8:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <updateMorseLetter+0x374>)
 80080aa:	222d      	movs	r2, #45	; 0x2d
 80080ac:	709a      	strb	r2, [r3, #2]
			morseLetterSize = 3;
 80080ae:	4b1e      	ldr	r3, [pc, #120]	; (8008128 <updateMorseLetter+0x378>)
 80080b0:	2203      	movs	r2, #3
 80080b2:	601a      	str	r2, [r3, #0]
			break;
 80080b4:	e02f      	b.n	8008116 <updateMorseLetter+0x366>
		case 'x':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '.'; morseLetter[3] = '-';
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <updateMorseLetter+0x374>)
 80080b8:	222d      	movs	r2, #45	; 0x2d
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <updateMorseLetter+0x374>)
 80080be:	222e      	movs	r2, #46	; 0x2e
 80080c0:	705a      	strb	r2, [r3, #1]
 80080c2:	4b18      	ldr	r3, [pc, #96]	; (8008124 <updateMorseLetter+0x374>)
 80080c4:	222e      	movs	r2, #46	; 0x2e
 80080c6:	709a      	strb	r2, [r3, #2]
 80080c8:	4b16      	ldr	r3, [pc, #88]	; (8008124 <updateMorseLetter+0x374>)
 80080ca:	222d      	movs	r2, #45	; 0x2d
 80080cc:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80080ce:	4b16      	ldr	r3, [pc, #88]	; (8008128 <updateMorseLetter+0x378>)
 80080d0:	2204      	movs	r2, #4
 80080d2:	601a      	str	r2, [r3, #0]
			break;
 80080d4:	e01f      	b.n	8008116 <updateMorseLetter+0x366>
		case 'y':
			morseLetter[0] = '-'; morseLetter[1] = '.'; morseLetter[2] = '-'; morseLetter[3] = '-';
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <updateMorseLetter+0x374>)
 80080d8:	222d      	movs	r2, #45	; 0x2d
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	4b11      	ldr	r3, [pc, #68]	; (8008124 <updateMorseLetter+0x374>)
 80080de:	222e      	movs	r2, #46	; 0x2e
 80080e0:	705a      	strb	r2, [r3, #1]
 80080e2:	4b10      	ldr	r3, [pc, #64]	; (8008124 <updateMorseLetter+0x374>)
 80080e4:	222d      	movs	r2, #45	; 0x2d
 80080e6:	709a      	strb	r2, [r3, #2]
 80080e8:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <updateMorseLetter+0x374>)
 80080ea:	222d      	movs	r2, #45	; 0x2d
 80080ec:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 80080ee:	4b0e      	ldr	r3, [pc, #56]	; (8008128 <updateMorseLetter+0x378>)
 80080f0:	2204      	movs	r2, #4
 80080f2:	601a      	str	r2, [r3, #0]
			break;
 80080f4:	e00f      	b.n	8008116 <updateMorseLetter+0x366>
		case 'z':
			morseLetter[0] = '-'; morseLetter[1] = '-'; morseLetter[2] = '.'; morseLetter[3] = '.';
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <updateMorseLetter+0x374>)
 80080f8:	222d      	movs	r2, #45	; 0x2d
 80080fa:	701a      	strb	r2, [r3, #0]
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <updateMorseLetter+0x374>)
 80080fe:	222d      	movs	r2, #45	; 0x2d
 8008100:	705a      	strb	r2, [r3, #1]
 8008102:	4b08      	ldr	r3, [pc, #32]	; (8008124 <updateMorseLetter+0x374>)
 8008104:	222e      	movs	r2, #46	; 0x2e
 8008106:	709a      	strb	r2, [r3, #2]
 8008108:	4b06      	ldr	r3, [pc, #24]	; (8008124 <updateMorseLetter+0x374>)
 800810a:	222e      	movs	r2, #46	; 0x2e
 800810c:	70da      	strb	r2, [r3, #3]
			morseLetterSize = 4;
 800810e:	4b06      	ldr	r3, [pc, #24]	; (8008128 <updateMorseLetter+0x378>)
 8008110:	2204      	movs	r2, #4
 8008112:	601a      	str	r2, [r3, #0]
	}
}
 8008114:	e7ff      	b.n	8008116 <updateMorseLetter+0x366>
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	200004f8 	.word	0x200004f8
 8008128:	200004f4 	.word	0x200004f4

0800812c <printMorseLetter>:

/**
 * print the current Morse array to the serial terminal
 */
void printMorseLetter() {
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
	if (morseLetter[0] == '\0') {
 8008132:	4b0f      	ldr	r3, [pc, #60]	; (8008170 <printMorseLetter+0x44>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d103      	bne.n	8008142 <printMorseLetter+0x16>
		printf(" *space* ");
 800813a:	480e      	ldr	r0, [pc, #56]	; (8008174 <printMorseLetter+0x48>)
 800813c:	f002 f944 	bl	800a3c8 <iprintf>
	} else {
		for (int i = 0; i < morseLetterSize; i++){
			printf("%c", morseLetter[i]);
		}
	}
}
 8008140:	e011      	b.n	8008166 <printMorseLetter+0x3a>
		for (int i = 0; i < morseLetterSize; i++){
 8008142:	2300      	movs	r3, #0
 8008144:	607b      	str	r3, [r7, #4]
 8008146:	e009      	b.n	800815c <printMorseLetter+0x30>
			printf("%c", morseLetter[i]);
 8008148:	4a09      	ldr	r2, [pc, #36]	; (8008170 <printMorseLetter+0x44>)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	4618      	mov	r0, r3
 8008152:	f002 f951 	bl	800a3f8 <putchar>
		for (int i = 0; i < morseLetterSize; i++){
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3301      	adds	r3, #1
 800815a:	607b      	str	r3, [r7, #4]
 800815c:	4b06      	ldr	r3, [pc, #24]	; (8008178 <printMorseLetter+0x4c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	dbf0      	blt.n	8008148 <printMorseLetter+0x1c>
}
 8008166:	bf00      	nop
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	200004f8 	.word	0x200004f8
 8008174:	0800ed44 	.word	0x0800ed44
 8008178:	200004f4 	.word	0x200004f4

0800817c <playMorseToSpeaker>:

/**
 * Play the current Morse array to the DAC speaker (and display on LED)
 */
void playMorseToSpeaker(char *morseArray, int morseArraySize) {
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af02      	add	r7, sp, #8
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < morseArraySize; i++) {
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	e055      	b.n	8008238 <playMorseToSpeaker+0xbc>
		if (morseArray[i] == '.') {
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	2b2e      	cmp	r3, #46	; 0x2e
 8008196:	d123      	bne.n	80081e0 <playMorseToSpeaker+0x64>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *beepArray, (uint32_t) beepArraySize, DAC_ALIGN_12B_R);
 8008198:	4b2d      	ldr	r3, [pc, #180]	; (8008250 <playMorseToSpeaker+0xd4>)
 800819a:	881b      	ldrh	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	4b2d      	ldr	r3, [pc, #180]	; (8008254 <playMorseToSpeaker+0xd8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4619      	mov	r1, r3
 80081a4:	2300      	movs	r3, #0
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	460b      	mov	r3, r1
 80081aa:	2100      	movs	r1, #0
 80081ac:	482a      	ldr	r0, [pc, #168]	; (8008258 <playMorseToSpeaker+0xdc>)
 80081ae:	f7fa fe09 	bl	8002dc4 <HAL_DAC_Start_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80081b2:	2120      	movs	r1, #32
 80081b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081b8:	f7fb fe68 	bl	8003e8c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80081bc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081c0:	f7f9 fa64 	bl	800168c <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80081c4:	2100      	movs	r1, #0
 80081c6:	4824      	ldr	r0, [pc, #144]	; (8008258 <playMorseToSpeaker+0xdc>)
 80081c8:	f7fa fec8 	bl	8002f5c <HAL_DAC_Stop_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80081cc:	2120      	movs	r1, #32
 80081ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081d2:	f7fb fe5b 	bl	8003e8c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 80081d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081da:	f7f9 fa57 	bl	800168c <HAL_Delay>
 80081de:	e028      	b.n	8008232 <playMorseToSpeaker+0xb6>
		} else if (morseArray[i] == '-') {
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	4413      	add	r3, r2
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b2d      	cmp	r3, #45	; 0x2d
 80081ea:	d12d      	bne.n	8008248 <playMorseToSpeaker+0xcc>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) *beepArray, (uint32_t) beepArraySize, DAC_ALIGN_12B_R);
 80081ec:	4b18      	ldr	r3, [pc, #96]	; (8008250 <playMorseToSpeaker+0xd4>)
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	4b18      	ldr	r3, [pc, #96]	; (8008254 <playMorseToSpeaker+0xd8>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4619      	mov	r1, r3
 80081f8:	2300      	movs	r3, #0
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	460b      	mov	r3, r1
 80081fe:	2100      	movs	r1, #0
 8008200:	4815      	ldr	r0, [pc, #84]	; (8008258 <playMorseToSpeaker+0xdc>)
 8008202:	f7fa fddf 	bl	8002dc4 <HAL_DAC_Start_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8008206:	2120      	movs	r1, #32
 8008208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800820c:	f7fb fe3e 	bl	8003e8c <HAL_GPIO_TogglePin>
			HAL_Delay(600);
 8008210:	f44f 7016 	mov.w	r0, #600	; 0x258
 8008214:	f7f9 fa3a 	bl	800168c <HAL_Delay>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8008218:	2100      	movs	r1, #0
 800821a:	480f      	ldr	r0, [pc, #60]	; (8008258 <playMorseToSpeaker+0xdc>)
 800821c:	f7fa fe9e 	bl	8002f5c <HAL_DAC_Stop_DMA>
			HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 8008220:	2120      	movs	r1, #32
 8008222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008226:	f7fb fe31 	bl	8003e8c <HAL_GPIO_TogglePin>
			HAL_Delay(300);
 800822a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800822e:	f7f9 fa2d 	bl	800168c <HAL_Delay>
	for (int i = 0; i < morseArraySize; i++) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	dba5      	blt.n	800818c <playMorseToSpeaker+0x10>
		} else {
			return;
		}
	}
	printf("\n\r");
 8008240:	4806      	ldr	r0, [pc, #24]	; (800825c <playMorseToSpeaker+0xe0>)
 8008242:	f002 f8c1 	bl	800a3c8 <iprintf>
 8008246:	e000      	b.n	800824a <playMorseToSpeaker+0xce>
			return;
 8008248:	bf00      	nop
}
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20000524 	.word	0x20000524
 8008254:	20000044 	.word	0x20000044
 8008258:	20000300 	.word	0x20000300
 800825c:	0800ed50 	.word	0x0800ed50

08008260 <getLetterFromMorse>:

/**
 * Get a letter from the inputted Morse array
 */
char getLetterFromMorse(char *morseArray, int morseArraySize) {
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
	char nullChar = '\0';
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]
	if (morseArraySize == 0) {return nullChar;}
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d101      	bne.n	8008278 <getLetterFromMorse+0x18>
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	e0bc      	b.n	80083f2 <getLetterFromMorse+0x192>
	switch (morseArray[0]) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b2d      	cmp	r3, #45	; 0x2d
 800827e:	d05e      	beq.n	800833e <getLetterFromMorse+0xde>
 8008280:	2b2e      	cmp	r3, #46	; 0x2e
 8008282:	f040 80b5 	bne.w	80083f0 <getLetterFromMorse+0x190>
	case '.':
		if (morseArraySize == 1) {return 'E';}
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d101      	bne.n	8008290 <getLetterFromMorse+0x30>
 800828c:	2345      	movs	r3, #69	; 0x45
 800828e:	e0b0      	b.n	80083f2 <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3301      	adds	r3, #1
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b2d      	cmp	r3, #45	; 0x2d
 8008298:	d029      	beq.n	80082ee <getLetterFromMorse+0x8e>
 800829a:	2b2e      	cmp	r3, #46	; 0x2e
 800829c:	d14f      	bne.n	800833e <getLetterFromMorse+0xde>
		case '.':
			if (morseArraySize == 2) {return 'I';}
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d101      	bne.n	80082a8 <getLetterFromMorse+0x48>
 80082a4:	2349      	movs	r3, #73	; 0x49
 80082a6:	e0a4      	b.n	80083f2 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	3302      	adds	r3, #2
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b2d      	cmp	r3, #45	; 0x2d
 80082b0:	d011      	beq.n	80082d6 <getLetterFromMorse+0x76>
 80082b2:	2b2e      	cmp	r3, #46	; 0x2e
 80082b4:	d11b      	bne.n	80082ee <getLetterFromMorse+0x8e>
			case '.':
				if (morseArraySize == 3) {return 'S';}
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d101      	bne.n	80082c0 <getLetterFromMorse+0x60>
 80082bc:	2353      	movs	r3, #83	; 0x53
 80082be:	e098      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3303      	adds	r3, #3
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	2b2d      	cmp	r3, #45	; 0x2d
 80082c8:	d003      	beq.n	80082d2 <getLetterFromMorse+0x72>
 80082ca:	2b2e      	cmp	r3, #46	; 0x2e
 80082cc:	d103      	bne.n	80082d6 <getLetterFromMorse+0x76>
				case '.':
					return 'H';
 80082ce:	2348      	movs	r3, #72	; 0x48
 80082d0:	e08f      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					return 'V';
 80082d2:	2356      	movs	r3, #86	; 0x56
 80082d4:	e08d      	b.n	80083f2 <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'U';}
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d101      	bne.n	80082e0 <getLetterFromMorse+0x80>
 80082dc:	2355      	movs	r3, #85	; 0x55
 80082de:	e088      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3303      	adds	r3, #3
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b2e      	cmp	r3, #46	; 0x2e
 80082e8:	d101      	bne.n	80082ee <getLetterFromMorse+0x8e>
				case '.':
					return 'F';
 80082ea:	2346      	movs	r3, #70	; 0x46
 80082ec:	e081      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					;
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'A';}
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d101      	bne.n	80082f8 <getLetterFromMorse+0x98>
 80082f4:	2341      	movs	r3, #65	; 0x41
 80082f6:	e07c      	b.n	80083f2 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	3302      	adds	r3, #2
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	2b2d      	cmp	r3, #45	; 0x2d
 8008300:	d00d      	beq.n	800831e <getLetterFromMorse+0xbe>
 8008302:	2b2e      	cmp	r3, #46	; 0x2e
 8008304:	d11b      	bne.n	800833e <getLetterFromMorse+0xde>
			case '.':
				if (morseArraySize == 3) {return 'R';}
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b03      	cmp	r3, #3
 800830a:	d101      	bne.n	8008310 <getLetterFromMorse+0xb0>
 800830c:	2352      	movs	r3, #82	; 0x52
 800830e:	e070      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3303      	adds	r3, #3
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b2e      	cmp	r3, #46	; 0x2e
 8008318:	d101      	bne.n	800831e <getLetterFromMorse+0xbe>
				case '.':
					return 'L';
 800831a:	234c      	movs	r3, #76	; 0x4c
 800831c:	e069      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					;
				}
			case '-':
				if (morseArraySize == 3) {return 'W';}
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d101      	bne.n	8008328 <getLetterFromMorse+0xc8>
 8008324:	2357      	movs	r3, #87	; 0x57
 8008326:	e064      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3303      	adds	r3, #3
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b2d      	cmp	r3, #45	; 0x2d
 8008330:	d003      	beq.n	800833a <getLetterFromMorse+0xda>
 8008332:	2b2e      	cmp	r3, #46	; 0x2e
 8008334:	d103      	bne.n	800833e <getLetterFromMorse+0xde>
				case '.':
					return 'P';
 8008336:	2350      	movs	r3, #80	; 0x50
 8008338:	e05b      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					return 'J';
 800833a:	234a      	movs	r3, #74	; 0x4a
 800833c:	e059      	b.n	80083f2 <getLetterFromMorse+0x192>
				}
			}
		}
	case '-':
		if (morseArraySize == 1) {return 'T';}
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <getLetterFromMorse+0xe8>
 8008344:	2354      	movs	r3, #84	; 0x54
 8008346:	e054      	b.n	80083f2 <getLetterFromMorse+0x192>
		switch (morseArray[1]) {
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	3301      	adds	r3, #1
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b2d      	cmp	r3, #45	; 0x2d
 8008350:	d02d      	beq.n	80083ae <getLetterFromMorse+0x14e>
 8008352:	2b2e      	cmp	r3, #46	; 0x2e
 8008354:	d14c      	bne.n	80083f0 <getLetterFromMorse+0x190>
		case '.':
			if (morseArraySize == 2) {return 'N';}
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d101      	bne.n	8008360 <getLetterFromMorse+0x100>
 800835c:	234e      	movs	r3, #78	; 0x4e
 800835e:	e048      	b.n	80083f2 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3302      	adds	r3, #2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b2d      	cmp	r3, #45	; 0x2d
 8008368:	d011      	beq.n	800838e <getLetterFromMorse+0x12e>
 800836a:	2b2e      	cmp	r3, #46	; 0x2e
 800836c:	d11f      	bne.n	80083ae <getLetterFromMorse+0x14e>
			case '.':
				if (morseArraySize == 3) {return 'D';}
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b03      	cmp	r3, #3
 8008372:	d101      	bne.n	8008378 <getLetterFromMorse+0x118>
 8008374:	2344      	movs	r3, #68	; 0x44
 8008376:	e03c      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3303      	adds	r3, #3
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b2d      	cmp	r3, #45	; 0x2d
 8008380:	d003      	beq.n	800838a <getLetterFromMorse+0x12a>
 8008382:	2b2e      	cmp	r3, #46	; 0x2e
 8008384:	d103      	bne.n	800838e <getLetterFromMorse+0x12e>
				case '.':
					return 'B';
 8008386:	2342      	movs	r3, #66	; 0x42
 8008388:	e033      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					return 'X';
 800838a:	2358      	movs	r3, #88	; 0x58
 800838c:	e031      	b.n	80083f2 <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'K';}
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b03      	cmp	r3, #3
 8008392:	d101      	bne.n	8008398 <getLetterFromMorse+0x138>
 8008394:	234b      	movs	r3, #75	; 0x4b
 8008396:	e02c      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	3303      	adds	r3, #3
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b2d      	cmp	r3, #45	; 0x2d
 80083a0:	d003      	beq.n	80083aa <getLetterFromMorse+0x14a>
 80083a2:	2b2e      	cmp	r3, #46	; 0x2e
 80083a4:	d103      	bne.n	80083ae <getLetterFromMorse+0x14e>
				case '.':
					return 'C';
 80083a6:	2343      	movs	r3, #67	; 0x43
 80083a8:	e023      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					return 'Y';
 80083aa:	2359      	movs	r3, #89	; 0x59
 80083ac:	e021      	b.n	80083f2 <getLetterFromMorse+0x192>
				}
			}
		case '-':
			if (morseArraySize == 2) {return 'M';}
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d101      	bne.n	80083b8 <getLetterFromMorse+0x158>
 80083b4:	234d      	movs	r3, #77	; 0x4d
 80083b6:	e01c      	b.n	80083f2 <getLetterFromMorse+0x192>
			switch (morseArray[2]) {
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3302      	adds	r3, #2
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b2d      	cmp	r3, #45	; 0x2d
 80083c0:	d011      	beq.n	80083e6 <getLetterFromMorse+0x186>
 80083c2:	2b2e      	cmp	r3, #46	; 0x2e
 80083c4:	d114      	bne.n	80083f0 <getLetterFromMorse+0x190>
			case '.':
				if (morseArraySize == 3) {return 'G';}
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d101      	bne.n	80083d0 <getLetterFromMorse+0x170>
 80083cc:	2347      	movs	r3, #71	; 0x47
 80083ce:	e010      	b.n	80083f2 <getLetterFromMorse+0x192>
				switch(morseArray[3]) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3303      	adds	r3, #3
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b2d      	cmp	r3, #45	; 0x2d
 80083d8:	d003      	beq.n	80083e2 <getLetterFromMorse+0x182>
 80083da:	2b2e      	cmp	r3, #46	; 0x2e
 80083dc:	d103      	bne.n	80083e6 <getLetterFromMorse+0x186>
				case '.':
					return 'Z';
 80083de:	235a      	movs	r3, #90	; 0x5a
 80083e0:	e007      	b.n	80083f2 <getLetterFromMorse+0x192>
				case '-':
					return 'Q';
 80083e2:	2351      	movs	r3, #81	; 0x51
 80083e4:	e005      	b.n	80083f2 <getLetterFromMorse+0x192>
				}
			case '-':
				if (morseArraySize == 3) {return 'O';}
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d101      	bne.n	80083f0 <getLetterFromMorse+0x190>
 80083ec:	234f      	movs	r3, #79	; 0x4f
 80083ee:	e000      	b.n	80083f2 <getLetterFromMorse+0x192>
					;
				}
			}
		}
	}
	return nullChar;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <calcMorseArray>:

/**
 * Calculate the corresponding letter associated with the code
 */
void calcMorseArray() {
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
	// Clear the code array
	for (int i = 0; i < 5; i++) code[i] = '\000';
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	e007      	b.n	800841c <calcMorseArray+0x1c>
 800840c:	4a1c      	ldr	r2, [pc, #112]	; (8008480 <calcMorseArray+0x80>)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4413      	add	r3, r2
 8008412:	2200      	movs	r2, #0
 8008414:	701a      	strb	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3301      	adds	r3, #1
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b04      	cmp	r3, #4
 8008420:	ddf4      	ble.n	800840c <calcMorseArray+0xc>

	// Translate the delays into the appropriate symbols (i.e. '.', '-')
	for (int i = 0; i < 5; i++) {
 8008422:	2300      	movs	r3, #0
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	e020      	b.n	800846a <calcMorseArray+0x6a>
		if (delays[i] == 0) break;
 8008428:	4a16      	ldr	r2, [pc, #88]	; (8008484 <calcMorseArray+0x84>)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01e      	beq.n	8008472 <calcMorseArray+0x72>

		if (delays[i] >= 300) code[i] = '-';
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <calcMorseArray+0x84>)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800843c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008440:	db04      	blt.n	800844c <calcMorseArray+0x4c>
 8008442:	4a0f      	ldr	r2, [pc, #60]	; (8008480 <calcMorseArray+0x80>)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	4413      	add	r3, r2
 8008448:	222d      	movs	r2, #45	; 0x2d
 800844a:	701a      	strb	r2, [r3, #0]
		if (delays[i] < 300) code[i] = '.';
 800844c:	4a0d      	ldr	r2, [pc, #52]	; (8008484 <calcMorseArray+0x84>)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008454:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8008458:	da04      	bge.n	8008464 <calcMorseArray+0x64>
 800845a:	4a09      	ldr	r2, [pc, #36]	; (8008480 <calcMorseArray+0x80>)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	4413      	add	r3, r2
 8008460:	222e      	movs	r2, #46	; 0x2e
 8008462:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	3301      	adds	r3, #1
 8008468:	603b      	str	r3, [r7, #0]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b04      	cmp	r3, #4
 800846e:	dddb      	ble.n	8008428 <calcMorseArray+0x28>
	}
}
 8008470:	e000      	b.n	8008474 <calcMorseArray+0x74>
		if (delays[i] == 0) break;
 8008472:	bf00      	nop
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	2000051c 	.word	0x2000051c
 8008484:	20000508 	.word	0x20000508

08008488 <waitForADCPress>:

/**
 * Wait for the ADC input to be pressed returns 0 when pressed or 1 when timeouts
 */
int waitForADCPress(int i) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_ADC_Start(&hadc1);
 8008490:	481a      	ldr	r0, [pc, #104]	; (80084fc <waitForADCPress+0x74>)
 8008492:	f7f9 fc93 	bl	8001dbc <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8008496:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800849a:	4818      	ldr	r0, [pc, #96]	; (80084fc <waitForADCPress+0x74>)
 800849c:	f7f9 fd24 	bl	8001ee8 <HAL_ADC_PollForConversion>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d121      	bne.n	80084ea <waitForADCPress+0x62>
			if (HAL_ADC_GetValue(&hadc1) <= 1000) {
 80084a6:	4815      	ldr	r0, [pc, #84]	; (80084fc <waitForADCPress+0x74>)
 80084a8:	f7f9 fdad 	bl	8002006 <HAL_ADC_GetValue>
 80084ac:	4603      	mov	r3, r0
 80084ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084b2:	d804      	bhi.n	80084be <waitForADCPress+0x36>
				HAL_ADC_Stop(&hadc1);
 80084b4:	4811      	ldr	r0, [pc, #68]	; (80084fc <waitForADCPress+0x74>)
 80084b6:	f7f9 fce4 	bl	8001e82 <HAL_ADC_Stop>
				return 0;
 80084ba:	2300      	movs	r3, #0
 80084bc:	e019      	b.n	80084f2 <waitForADCPress+0x6a>
			}
			if (i > 0 && millis - (start + delays[i - 1]) >= 2000) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	dd12      	ble.n	80084ea <waitForADCPress+0x62>
 80084c4:	4b0e      	ldr	r3, [pc, #56]	; (8008500 <waitForADCPress+0x78>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	490d      	ldr	r1, [pc, #52]	; (8008504 <waitForADCPress+0x7c>)
 80084ce:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80084d2:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <waitForADCPress+0x80>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	440b      	add	r3, r1
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80084de:	db04      	blt.n	80084ea <waitForADCPress+0x62>
				HAL_ADC_Stop(&hadc1);
 80084e0:	4806      	ldr	r0, [pc, #24]	; (80084fc <waitForADCPress+0x74>)
 80084e2:	f7f9 fcce 	bl	8001e82 <HAL_ADC_Stop>
				return 1;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e003      	b.n	80084f2 <waitForADCPress+0x6a>
			}
		}
		HAL_ADC_Stop(&hadc1);
 80084ea:	4804      	ldr	r0, [pc, #16]	; (80084fc <waitForADCPress+0x74>)
 80084ec:	f7f9 fcc9 	bl	8001e82 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 80084f0:	e7ce      	b.n	8008490 <waitForADCPress+0x8>
	}
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000298 	.word	0x20000298
 8008500:	20000500 	.word	0x20000500
 8008504:	20000508 	.word	0x20000508
 8008508:	20000504 	.word	0x20000504

0800850c <waitForADCRelease>:

/**
 * Wait for the ADC input to be released
 */
void waitForADCRelease() {
 800850c:	b580      	push	{r7, lr}
 800850e:	af00      	add	r7, sp, #0
	while (1) {
		HAL_ADC_Start(&hadc1);
 8008510:	480d      	ldr	r0, [pc, #52]	; (8008548 <waitForADCRelease+0x3c>)
 8008512:	f7f9 fc53 	bl	8001dbc <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8008516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800851a:	480b      	ldr	r0, [pc, #44]	; (8008548 <waitForADCRelease+0x3c>)
 800851c:	f7f9 fce4 	bl	8001ee8 <HAL_ADC_PollForConversion>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d10a      	bne.n	800853c <waitForADCRelease+0x30>
			if (HAL_ADC_GetValue(&hadc1) > 1000) {
 8008526:	4808      	ldr	r0, [pc, #32]	; (8008548 <waitForADCRelease+0x3c>)
 8008528:	f7f9 fd6d 	bl	8002006 <HAL_ADC_GetValue>
 800852c:	4603      	mov	r3, r0
 800852e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008532:	d903      	bls.n	800853c <waitForADCRelease+0x30>
				HAL_ADC_Stop(&hadc1);
 8008534:	4804      	ldr	r0, [pc, #16]	; (8008548 <waitForADCRelease+0x3c>)
 8008536:	f7f9 fca4 	bl	8001e82 <HAL_ADC_Stop>
				return;
 800853a:	e003      	b.n	8008544 <waitForADCRelease+0x38>
			}
		}
		HAL_ADC_Stop(&hadc1);
 800853c:	4802      	ldr	r0, [pc, #8]	; (8008548 <waitForADCRelease+0x3c>)
 800853e:	f7f9 fca0 	bl	8001e82 <HAL_ADC_Stop>
		HAL_ADC_Start(&hadc1);
 8008542:	e7e5      	b.n	8008510 <waitForADCRelease+0x4>
	}
}
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000298 	.word	0x20000298

0800854c <getMorseInput>:

/**
 * Wait for the user to input up to 5 signals
 * returns the size of the input Morse
 */
int getMorseInput() {
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
	// Start the timer at 0 ms
	millis = 0;
 8008552:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <getMorseInput+0x88>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim5);
 8008558:	481f      	ldr	r0, [pc, #124]	; (80085d8 <getMorseInput+0x8c>)
 800855a:	f7fd ffff 	bl	800655c <HAL_TIM_Base_Start_IT>

	// Clear the delay array
	for (int i = 0; i < 5; i++) delays[i] = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	e007      	b.n	8008574 <getMorseInput+0x28>
 8008564:	4a1d      	ldr	r2, [pc, #116]	; (80085dc <getMorseInput+0x90>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2100      	movs	r1, #0
 800856a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3301      	adds	r3, #1
 8008572:	607b      	str	r3, [r7, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b04      	cmp	r3, #4
 8008578:	ddf4      	ble.n	8008564 <getMorseInput+0x18>

	// Ask for up to 5 signals (i < 6 because return is in the next iteration)
	for (int i = 0; i < 6; i++) {
 800857a:	2300      	movs	r3, #0
 800857c:	603b      	str	r3, [r7, #0]
 800857e:	e021      	b.n	80085c4 <getMorseInput+0x78>
		// Wait while the button is not pressed
		if (waitForADCPress(i) == 1) {
 8008580:	6838      	ldr	r0, [r7, #0]
 8008582:	f7ff ff81 	bl	8008488 <waitForADCPress>
 8008586:	4603      	mov	r3, r0
 8008588:	2b01      	cmp	r3, #1
 800858a:	d103      	bne.n	8008594 <getMorseInput+0x48>
			calcMorseArray();
 800858c:	f7ff ff38 	bl	8008400 <calcMorseArray>
			return i;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	e01a      	b.n	80085ca <getMorseInput+0x7e>
		}
		HAL_Delay(10);
 8008594:	200a      	movs	r0, #10
 8008596:	f7f9 f879 	bl	800168c <HAL_Delay>
		start = millis;
 800859a:	4b0e      	ldr	r3, [pc, #56]	; (80085d4 <getMorseInput+0x88>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a10      	ldr	r2, [pc, #64]	; (80085e0 <getMorseInput+0x94>)
 80085a0:	6013      	str	r3, [r2, #0]

		// Wait until the button is released
		waitForADCRelease();
 80085a2:	f7ff ffb3 	bl	800850c <waitForADCRelease>
		HAL_Delay(10);
 80085a6:	200a      	movs	r0, #10
 80085a8:	f7f9 f870 	bl	800168c <HAL_Delay>
		delays[i] = millis - start;
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <getMorseInput+0x88>)
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <getMorseInput+0x94>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	1ad2      	subs	r2, r2, r3
 80085b6:	4909      	ldr	r1, [pc, #36]	; (80085dc <getMorseInput+0x90>)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 6; i++) {
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	3301      	adds	r3, #1
 80085c2:	603b      	str	r3, [r7, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	ddda      	ble.n	8008580 <getMorseInput+0x34>
	}
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	20000500 	.word	0x20000500
 80085d8:	20000414 	.word	0x20000414
 80085dc:	20000508 	.word	0x20000508
 80085e0:	20000504 	.word	0x20000504

080085e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085e4:	b590      	push	{r4, r7, lr}
 80085e6:	b089      	sub	sp, #36	; 0x24
 80085e8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	/*
	 * mode 0 for taking input from terminal, outputting Morse code
	 * mode 1 for taking input of array for Morse letter, displaying letter to terminal
	 */
mode = 0; // no longer used
 80085ea:	4b94      	ldr	r3, [pc, #592]	; (800883c <main+0x258>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	701a      	strb	r2, [r3, #0]
char ADC = 1; // 0 if no ADC connected, 1 if ADC connected
 80085f0:	2301      	movs	r3, #1
 80085f2:	74fb      	strb	r3, [r7, #19]
 * Wiring instructions
 * D7 -> speaker -> resistor -> GND
 * *Insert ADC wiring*
 */

morseInputArray[0] = '\0';
 80085f4:	4b92      	ldr	r3, [pc, #584]	; (8008840 <main+0x25c>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	701a      	strb	r2, [r3, #0]
morseInputArray[1] = '\0';
 80085fa:	4b91      	ldr	r3, [pc, #580]	; (8008840 <main+0x25c>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	705a      	strb	r2, [r3, #1]
morseInputArray[2] = '\0';
 8008600:	4b8f      	ldr	r3, [pc, #572]	; (8008840 <main+0x25c>)
 8008602:	2200      	movs	r2, #0
 8008604:	709a      	strb	r2, [r3, #2]
morseInputArray[3] = '\0';
 8008606:	4b8e      	ldr	r3, [pc, #568]	; (8008840 <main+0x25c>)
 8008608:	2200      	movs	r2, #0
 800860a:	70da      	strb	r2, [r3, #3]
morseInputArraySize = 0;
 800860c:	4b8d      	ldr	r3, [pc, #564]	; (8008844 <main+0x260>)
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]


notSpace = 1; // 1 is true
 8008612:	4b8d      	ldr	r3, [pc, #564]	; (8008848 <main+0x264>)
 8008614:	2201      	movs	r2, #1
 8008616:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008618:	f7f8 ffc4 	bl	80015a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  // for scanf
  setvbuf(stdin, NULL, _IONBF, 0);
 800861c:	4b8b      	ldr	r3, [pc, #556]	; (800884c <main+0x268>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6858      	ldr	r0, [r3, #4]
 8008622:	2300      	movs	r3, #0
 8008624:	2202      	movs	r2, #2
 8008626:	2100      	movs	r1, #0
 8008628:	f001 ff14 	bl	800a454 <setvbuf>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800862c:	f000 f9b0 	bl	8008990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008630:	f000 fbee 	bl	8008e10 <MX_GPIO_Init>
  MX_DMA_Init();
 8008634:	f000 fbc2 	bl	8008dbc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8008638:	f000 fb74 	bl	8008d24 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 800863c:	f000 fa60 	bl	8008b00 <MX_DAC1_Init>
  MX_TIM2_Init();
 8008640:	f000 fad2 	bl	8008be8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8008644:	f000 f9f6 	bl	8008a34 <MX_ADC1_Init>
  MX_TIM5_Init();
 8008648:	f000 fb1c 	bl	8008c84 <MX_TIM5_Init>
  MX_I2C2_Init();
 800864c:	f000 fa8c 	bl	8008b68 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();		// Gyroscope
 8008650:	f7f8 fe3a 	bl	80012c8 <BSP_GYRO_Init>
  //HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 8008654:	487e      	ldr	r0, [pc, #504]	; (8008850 <main+0x26c>)
 8008656:	f7fd ff81 	bl	800655c <HAL_TIM_Base_Start_IT>

  /*
   * Initialize beeps
   */
  for (int i = 0; i < beepArraySize; i++) {
 800865a:	2300      	movs	r3, #0
 800865c:	617b      	str	r3, [r7, #20]
 800865e:	e02a      	b.n	80086b6 <main+0xd2>
	  beepArray[i] = (arm_sin_f32(2*PI*i/beepArraySize)+1)*(1365); // 1365 multiplier as 4095 max output, max sine output of 2, scale down to 2/3 to reduce distortion (4095/2)*(2/3)
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800866a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8008854 <main+0x270>
 800866e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008672:	4b79      	ldr	r3, [pc, #484]	; (8008858 <main+0x274>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	ee07 3a90 	vmov	s15, r3
 800867a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800867e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008682:	eeb0 0a66 	vmov.f32	s0, s13
 8008686:	f000 ff9f 	bl	80095c8 <arm_sin_f32>
 800868a:	eef0 7a40 	vmov.f32	s15, s0
 800868e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008696:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800885c <main+0x278>
 800869a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800869e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a2:	ee17 3a90 	vmov	r3, s15
 80086a6:	b299      	uxth	r1, r3
 80086a8:	4a6d      	ldr	r2, [pc, #436]	; (8008860 <main+0x27c>)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < beepArraySize; i++) {
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	3301      	adds	r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	4b68      	ldr	r3, [pc, #416]	; (8008858 <main+0x274>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	697a      	ldr	r2, [r7, #20]
 80086bc:	429a      	cmp	r2, r3
 80086be:	dbcf      	blt.n	8008660 <main+0x7c>
  }

  // calibrate gyro
  float gyroCalibration[3];
  BSP_GYRO_GetXYZ(&gyroCalibration);
 80086c0:	463b      	mov	r3, r7
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f8 fe42 	bl	800134c <BSP_GYRO_GetXYZ>
  int shakeValue = 4000;
 80086c8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80086cc:	60fb      	str	r3, [r7, #12]

  printf("Welcome to the Morse code translator!\n\r");
 80086ce:	4865      	ldr	r0, [pc, #404]	; (8008864 <main+0x280>)
 80086d0:	f001 fe7a 	bl	800a3c8 <iprintf>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // mode selection
	  printf("Shake for a new mode!\n\r");
 80086d4:	4864      	ldr	r0, [pc, #400]	; (8008868 <main+0x284>)
 80086d6:	f001 fe77 	bl	800a3c8 <iprintf>
	  HAL_Delay(1750);
 80086da:	f240 60d6 	movw	r0, #1750	; 0x6d6
 80086de:	f7f8 ffd5 	bl	800168c <HAL_Delay>
	  BSP_GYRO_GetXYZ(&gyro_read);
 80086e2:	4862      	ldr	r0, [pc, #392]	; (800886c <main+0x288>)
 80086e4:	f7f8 fe32 	bl	800134c <BSP_GYRO_GetXYZ>
	  if (gyro_read[0]-gyroCalibration[0] > shakeValue || gyro_read[1]-gyroCalibration[1] > shakeValue || gyro_read[2]-gyroCalibration[2] > shakeValue) {
 80086e8:	4b60      	ldr	r3, [pc, #384]	; (800886c <main+0x288>)
 80086ea:	ed93 7a00 	vldr	s14, [r3]
 80086ee:	edd7 7a00 	vldr	s15, [r7]
 80086f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008708:	dc21      	bgt.n	800874e <main+0x16a>
 800870a:	4b58      	ldr	r3, [pc, #352]	; (800886c <main+0x288>)
 800870c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008710:	edd7 7a01 	vldr	s15, [r7, #4]
 8008714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800872a:	dc10      	bgt.n	800874e <main+0x16a>
 800872c:	4b4f      	ldr	r3, [pc, #316]	; (800886c <main+0x288>)
 800872e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008732:	edd7 7a02 	vldr	s15, [r7, #8]
 8008736:	ee37 7a67 	vsub.f32	s14, s14, s15
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	ee07 3a90 	vmov	s15, r3
 8008740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800874c:	dd0e      	ble.n	800876c <main+0x188>
		  printf("Shake detected! New mode.\n\r");
 800874e:	4848      	ldr	r0, [pc, #288]	; (8008870 <main+0x28c>)
 8008750:	f001 fe3a 	bl	800a3c8 <iprintf>
		  mode = (mode+1)%2;
 8008754:	4b39      	ldr	r3, [pc, #228]	; (800883c <main+0x258>)
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	3301      	adds	r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	bfb8      	it	lt
 8008762:	425b      	neglt	r3, r3
 8008764:	b2da      	uxtb	r2, r3
 8008766:	4b35      	ldr	r3, [pc, #212]	; (800883c <main+0x258>)
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e002      	b.n	8008772 <main+0x18e>
	  } else {
		  printf("No shake detected, same mode.\n\r");
 800876c:	4841      	ldr	r0, [pc, #260]	; (8008874 <main+0x290>)
 800876e:	f001 fe2b 	bl	800a3c8 <iprintf>
	  }

	  if (mode == 1) {
 8008772:	4b32      	ldr	r3, [pc, #200]	; (800883c <main+0x258>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d103      	bne.n	8008782 <main+0x19e>
	  			printf("Taking input Morse input (array), displaying letter to terminal. \n\r");
 800877a:	483f      	ldr	r0, [pc, #252]	; (8008878 <main+0x294>)
 800877c:	f001 fe24 	bl	800a3c8 <iprintf>
 8008780:	e002      	b.n	8008788 <main+0x1a4>
	  		} else {
	  			printf("Taking letter input from terminal, outputting Morse. \n\r");
 8008782:	483e      	ldr	r0, [pc, #248]	; (800887c <main+0x298>)
 8008784:	f001 fe20 	bl	800a3c8 <iprintf>
	  		}

	  HAL_Delay(1000);
 8008788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800878c:	f7f8 ff7e 	bl	800168c <HAL_Delay>

	  if (mode == 0) { // taking input from terminal, outputting Morse code
 8008790:	4b2a      	ldr	r3, [pc, #168]	; (800883c <main+0x258>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d123      	bne.n	80087e0 <main+0x1fc>
		  // get character from user
		  printf("Input a character: ");
 8008798:	4839      	ldr	r0, [pc, #228]	; (8008880 <main+0x29c>)
 800879a:	f001 fe15 	bl	800a3c8 <iprintf>
		  scanf("%c", &inputChar);
 800879e:	4939      	ldr	r1, [pc, #228]	; (8008884 <main+0x2a0>)
 80087a0:	4839      	ldr	r0, [pc, #228]	; (8008888 <main+0x2a4>)
 80087a2:	f001 fe3f 	bl	800a424 <iscanf>
		  printf("\n\rYou entered: %c \n\r", inputChar); // print character
 80087a6:	4b37      	ldr	r3, [pc, #220]	; (8008884 <main+0x2a0>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	4619      	mov	r1, r3
 80087ac:	4837      	ldr	r0, [pc, #220]	; (800888c <main+0x2a8>)
 80087ae:	f001 fe0b 	bl	800a3c8 <iprintf>
		  //printf("ASCII Character: %d \n\r", inputChar); // print ASCII value

		  // Update, display, and play the Morse letter
		  updateMorseLetter(inputChar);
 80087b2:	4b34      	ldr	r3, [pc, #208]	; (8008884 <main+0x2a0>)
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fafa 	bl	8007db0 <updateMorseLetter>
		  printf("Morse Translation: ");
 80087bc:	4834      	ldr	r0, [pc, #208]	; (8008890 <main+0x2ac>)
 80087be:	f001 fe03 	bl	800a3c8 <iprintf>
		  printMorseLetter();
 80087c2:	f7ff fcb3 	bl	800812c <printMorseLetter>
		  printf("\n\r");
 80087c6:	4833      	ldr	r0, [pc, #204]	; (8008894 <main+0x2b0>)
 80087c8:	f001 fdfe 	bl	800a3c8 <iprintf>
		  playMorseToSpeaker(morseLetter, morseLetterSize);
 80087cc:	4b32      	ldr	r3, [pc, #200]	; (8008898 <main+0x2b4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4619      	mov	r1, r3
 80087d2:	4832      	ldr	r0, [pc, #200]	; (800889c <main+0x2b8>)
 80087d4:	f7ff fcd2 	bl	800817c <playMorseToSpeaker>
		  HAL_Delay(1000);
 80087d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087dc:	f7f8 ff56 	bl	800168c <HAL_Delay>

	  }

	  if (mode == 1) { // taking input of array for Morse letter, displaying letter to terminal
 80087e0:	4b16      	ldr	r3, [pc, #88]	; (800883c <main+0x258>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	f47f af75 	bne.w	80086d4 <main+0xf0>
		  if (ADC == 0) {
 80087ea:	7cfb      	ldrb	r3, [r7, #19]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 8084 	bne.w	80088fa <main+0x316>
		  	  // reset input stuff
			  notSpace = 1;
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <main+0x264>)
 80087f4:	2201      	movs	r2, #1
 80087f6:	701a      	strb	r2, [r3, #0]
			  morseInputArraySize = 0;
 80087f8:	4b12      	ldr	r3, [pc, #72]	; (8008844 <main+0x260>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
			  morseInputArray[0] = '\0'; morseInputArray[1] = '\0'; morseInputArray[2] = '\0'; morseInputArray[3] = '\0';
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <main+0x25c>)
 8008800:	2200      	movs	r2, #0
 8008802:	701a      	strb	r2, [r3, #0]
 8008804:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <main+0x25c>)
 8008806:	2200      	movs	r2, #0
 8008808:	705a      	strb	r2, [r3, #1]
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <main+0x25c>)
 800880c:	2200      	movs	r2, #0
 800880e:	709a      	strb	r2, [r3, #2]
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <main+0x25c>)
 8008812:	2200      	movs	r2, #0
 8008814:	70da      	strb	r2, [r3, #3]
			  // get user input until space input
			  printf("\n\rInput Morse (. and - with a space at the end)\n\r");
 8008816:	4822      	ldr	r0, [pc, #136]	; (80088a0 <main+0x2bc>)
 8008818:	f001 fdd6 	bl	800a3c8 <iprintf>
			  while (notSpace == 1) {
 800881c:	e055      	b.n	80088ca <main+0x2e6>
				  scanf("%c", &inputChar);
 800881e:	4919      	ldr	r1, [pc, #100]	; (8008884 <main+0x2a0>)
 8008820:	4819      	ldr	r0, [pc, #100]	; (8008888 <main+0x2a4>)
 8008822:	f001 fdff 	bl	800a424 <iscanf>
				  if (inputChar == 32) {
 8008826:	4b17      	ldr	r3, [pc, #92]	; (8008884 <main+0x2a0>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	2b20      	cmp	r3, #32
 800882c:	d13c      	bne.n	80088a8 <main+0x2c4>
					  printf("\n\rSpace Inputed\n\r");
 800882e:	481d      	ldr	r0, [pc, #116]	; (80088a4 <main+0x2c0>)
 8008830:	f001 fdca 	bl	800a3c8 <iprintf>
					  notSpace = 0;
 8008834:	4b04      	ldr	r3, [pc, #16]	; (8008848 <main+0x264>)
 8008836:	2200      	movs	r2, #0
 8008838:	701a      	strb	r2, [r3, #0]
					  break;
 800883a:	e04a      	b.n	80088d2 <main+0x2ee>
 800883c:	200004fc 	.word	0x200004fc
 8008840:	2000003c 	.word	0x2000003c
 8008844:	20000040 	.word	0x20000040
 8008848:	2000057d 	.word	0x2000057d
 800884c:	2000004c 	.word	0x2000004c
 8008850:	200003c8 	.word	0x200003c8
 8008854:	40c90fdb 	.word	0x40c90fdb
 8008858:	20000044 	.word	0x20000044
 800885c:	44aaa000 	.word	0x44aaa000
 8008860:	20000524 	.word	0x20000524
 8008864:	0800ed54 	.word	0x0800ed54
 8008868:	0800ed7c 	.word	0x0800ed7c
 800886c:	20000580 	.word	0x20000580
 8008870:	0800ed94 	.word	0x0800ed94
 8008874:	0800edb0 	.word	0x0800edb0
 8008878:	0800edd0 	.word	0x0800edd0
 800887c:	0800ee14 	.word	0x0800ee14
 8008880:	0800ee4c 	.word	0x0800ee4c
 8008884:	200004f0 	.word	0x200004f0
 8008888:	0800ee60 	.word	0x0800ee60
 800888c:	0800ee64 	.word	0x0800ee64
 8008890:	0800ee7c 	.word	0x0800ee7c
 8008894:	0800ed50 	.word	0x0800ed50
 8008898:	200004f4 	.word	0x200004f4
 800889c:	200004f8 	.word	0x200004f8
 80088a0:	0800ee90 	.word	0x0800ee90
 80088a4:	0800eec4 	.word	0x0800eec4
				  }
				  printf(" You entered: %c\n\r", inputChar);
 80088a8:	4b2f      	ldr	r3, [pc, #188]	; (8008968 <main+0x384>)
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	4619      	mov	r1, r3
 80088ae:	482f      	ldr	r0, [pc, #188]	; (800896c <main+0x388>)
 80088b0:	f001 fd8a 	bl	800a3c8 <iprintf>
				  morseInputArray[morseInputArraySize] = inputChar;
 80088b4:	4b2e      	ldr	r3, [pc, #184]	; (8008970 <main+0x38c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a2b      	ldr	r2, [pc, #172]	; (8008968 <main+0x384>)
 80088ba:	7811      	ldrb	r1, [r2, #0]
 80088bc:	4a2d      	ldr	r2, [pc, #180]	; (8008974 <main+0x390>)
 80088be:	54d1      	strb	r1, [r2, r3]
				  morseInputArraySize = morseInputArraySize+1;
 80088c0:	4b2b      	ldr	r3, [pc, #172]	; (8008970 <main+0x38c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	3301      	adds	r3, #1
 80088c6:	4a2a      	ldr	r2, [pc, #168]	; (8008970 <main+0x38c>)
 80088c8:	6013      	str	r3, [r2, #0]
			  while (notSpace == 1) {
 80088ca:	4b2b      	ldr	r3, [pc, #172]	; (8008978 <main+0x394>)
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d0a5      	beq.n	800881e <main+0x23a>
			  }
			  // get morse input from ADC
			  letterToPrint = getLetterFromMorse(morseInputArray, morseInputArraySize);
 80088d2:	4b27      	ldr	r3, [pc, #156]	; (8008970 <main+0x38c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4619      	mov	r1, r3
 80088d8:	4826      	ldr	r0, [pc, #152]	; (8008974 <main+0x390>)
 80088da:	f7ff fcc1 	bl	8008260 <getLetterFromMorse>
 80088de:	4603      	mov	r3, r0
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b26      	ldr	r3, [pc, #152]	; (800897c <main+0x398>)
 80088e4:	701a      	strb	r2, [r3, #0]
			  printf("Letter from  input: %c \n\r", letterToPrint);
 80088e6:	4b25      	ldr	r3, [pc, #148]	; (800897c <main+0x398>)
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	4619      	mov	r1, r3
 80088ec:	4824      	ldr	r0, [pc, #144]	; (8008980 <main+0x39c>)
 80088ee:	f001 fd6b 	bl	800a3c8 <iprintf>
			  HAL_Delay(500);
 80088f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80088f6:	f7f8 fec9 	bl	800168c <HAL_Delay>

		  }
		  if (ADC == 1)  {
 80088fa:	7cfb      	ldrb	r3, [r7, #19]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	f47f aee9 	bne.w	80086d4 <main+0xf0>
			  printf("\n\rInput Morse using the analog stick (wait 2 seconds when done)\n\r");
 8008902:	4820      	ldr	r0, [pc, #128]	; (8008984 <main+0x3a0>)
 8008904:	f001 fd60 	bl	800a3c8 <iprintf>
			  morseInputArraySize = getMorseInput();
 8008908:	f7ff fe20 	bl	800854c <getMorseInput>
 800890c:	4603      	mov	r3, r0
 800890e:	4a18      	ldr	r2, [pc, #96]	; (8008970 <main+0x38c>)
 8008910:	6013      	str	r3, [r2, #0]
			  printf("\n\rYou entered: %c%c%c%c%c\n\r", code[0], code[1], code[2], code[3], code[4]);
 8008912:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <main+0x3a4>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	4b1b      	ldr	r3, [pc, #108]	; (8008988 <main+0x3a4>)
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	4618      	mov	r0, r3
 800891e:	4b1a      	ldr	r3, [pc, #104]	; (8008988 <main+0x3a4>)
 8008920:	789b      	ldrb	r3, [r3, #2]
 8008922:	461c      	mov	r4, r3
 8008924:	4b18      	ldr	r3, [pc, #96]	; (8008988 <main+0x3a4>)
 8008926:	78db      	ldrb	r3, [r3, #3]
 8008928:	461a      	mov	r2, r3
 800892a:	4b17      	ldr	r3, [pc, #92]	; (8008988 <main+0x3a4>)
 800892c:	791b      	ldrb	r3, [r3, #4]
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	9200      	str	r2, [sp, #0]
 8008932:	4623      	mov	r3, r4
 8008934:	4602      	mov	r2, r0
 8008936:	4815      	ldr	r0, [pc, #84]	; (800898c <main+0x3a8>)
 8008938:	f001 fd46 	bl	800a3c8 <iprintf>

			  // display letter corresponding to input
			  letterToPrint = getLetterFromMorse(code, morseInputArraySize);
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <main+0x38c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	4811      	ldr	r0, [pc, #68]	; (8008988 <main+0x3a4>)
 8008944:	f7ff fc8c 	bl	8008260 <getLetterFromMorse>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	4b0b      	ldr	r3, [pc, #44]	; (800897c <main+0x398>)
 800894e:	701a      	strb	r2, [r3, #0]
			  printf("Letter from  input: %c \n\r", letterToPrint);
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <main+0x398>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4619      	mov	r1, r3
 8008956:	480a      	ldr	r0, [pc, #40]	; (8008980 <main+0x39c>)
 8008958:	f001 fd36 	bl	800a3c8 <iprintf>
			  HAL_Delay(500);
 800895c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008960:	f7f8 fe94 	bl	800168c <HAL_Delay>
	  printf("Shake for a new mode!\n\r");
 8008964:	e6b6      	b.n	80086d4 <main+0xf0>
 8008966:	bf00      	nop
 8008968:	200004f0 	.word	0x200004f0
 800896c:	0800eed8 	.word	0x0800eed8
 8008970:	20000040 	.word	0x20000040
 8008974:	2000003c 	.word	0x2000003c
 8008978:	2000057d 	.word	0x2000057d
 800897c:	2000057c 	.word	0x2000057c
 8008980:	0800eeec 	.word	0x0800eeec
 8008984:	0800ef08 	.word	0x0800ef08
 8008988:	2000051c 	.word	0x2000051c
 800898c:	0800ef4c 	.word	0x0800ef4c

08008990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b096      	sub	sp, #88	; 0x58
 8008994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008996:	f107 0314 	add.w	r3, r7, #20
 800899a:	2244      	movs	r2, #68	; 0x44
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fe90 	bl	80096c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089a4:	463b      	mov	r3, r7
 80089a6:	2200      	movs	r2, #0
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	605a      	str	r2, [r3, #4]
 80089ac:	609a      	str	r2, [r3, #8]
 80089ae:	60da      	str	r2, [r3, #12]
 80089b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80089b2:	2000      	movs	r0, #0
 80089b4:	f7fc f8e6 	bl	8004b84 <HAL_PWREx_ControlVoltageScaling>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80089be:	f000 faa1 	bl	8008f04 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80089c2:	2310      	movs	r3, #16
 80089c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80089c6:	2301      	movs	r3, #1
 80089c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80089ce:	2360      	movs	r3, #96	; 0x60
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80089d2:	2302      	movs	r3, #2
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80089d6:	2301      	movs	r3, #1
 80089d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80089da:	2301      	movs	r3, #1
 80089dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80089de:	233c      	movs	r3, #60	; 0x3c
 80089e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80089e2:	2302      	movs	r3, #2
 80089e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80089e6:	2302      	movs	r3, #2
 80089e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80089ea:	2302      	movs	r3, #2
 80089ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80089ee:	f107 0314 	add.w	r3, r7, #20
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fc f96a 	bl	8004ccc <HAL_RCC_OscConfig>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80089fe:	f000 fa81 	bl	8008f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a02:	230f      	movs	r3, #15
 8008a04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a06:	2303      	movs	r3, #3
 8008a08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008a16:	463b      	mov	r3, r7
 8008a18:	2105      	movs	r1, #5
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fc fd70 	bl	8005500 <HAL_RCC_ClockConfig>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008a26:	f000 fa6d 	bl	8008f04 <Error_Handler>
  }
}
 8008a2a:	bf00      	nop
 8008a2c:	3758      	adds	r7, #88	; 0x58
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	609a      	str	r2, [r3, #8]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	611a      	str	r2, [r3, #16]
 8008a48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008a4a:	4b2a      	ldr	r3, [pc, #168]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a4c:	4a2a      	ldr	r2, [pc, #168]	; (8008af8 <MX_ADC1_Init+0xc4>)
 8008a4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8008a50:	4b28      	ldr	r3, [pc, #160]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008a56:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008a5c:	4b25      	ldr	r3, [pc, #148]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008a62:	4b24      	ldr	r3, [pc, #144]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008a68:	4b22      	ldr	r3, [pc, #136]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a6a:	2204      	movs	r2, #4
 8008a6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008a6e:	4b21      	ldr	r3, [pc, #132]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008a74:	4b1f      	ldr	r3, [pc, #124]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8008a7a:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008a80:	4b1c      	ldr	r3, [pc, #112]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008a88:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008a8e:	4b19      	ldr	r3, [pc, #100]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008a94:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008a9c:	4b15      	ldr	r3, [pc, #84]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8008aa2:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8008aaa:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008aac:	2204      	movs	r2, #4
 8008aae:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008ab0:	4810      	ldr	r0, [pc, #64]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008ab2:	f7f9 f837 	bl	8001b24 <HAL_ADC_Init>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8008abc:	f000 fa22 	bl	8008f04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008ac0:	4b0e      	ldr	r3, [pc, #56]	; (8008afc <MX_ADC1_Init+0xc8>)
 8008ac2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008ac4:	2306      	movs	r3, #6
 8008ac6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008acc:	237f      	movs	r3, #127	; 0x7f
 8008ace:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008ad8:	463b      	mov	r3, r7
 8008ada:	4619      	mov	r1, r3
 8008adc:	4805      	ldr	r0, [pc, #20]	; (8008af4 <MX_ADC1_Init+0xc0>)
 8008ade:	f7f9 fa9f 	bl	8002020 <HAL_ADC_ConfigChannel>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d001      	beq.n	8008aec <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8008ae8:	f000 fa0c 	bl	8008f04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008aec:	bf00      	nop
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20000298 	.word	0x20000298
 8008af8:	50040000 	.word	0x50040000
 8008afc:	04300002 	.word	0x04300002

08008b00 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08a      	sub	sp, #40	; 0x28
 8008b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008b06:	463b      	mov	r3, r7
 8008b08:	2228      	movs	r2, #40	; 0x28
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 fdd9 	bl	80096c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008b12:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <MX_DAC1_Init+0x60>)
 8008b14:	4a13      	ldr	r2, [pc, #76]	; (8008b64 <MX_DAC1_Init+0x64>)
 8008b16:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008b18:	4811      	ldr	r0, [pc, #68]	; (8008b60 <MX_DAC1_Init+0x60>)
 8008b1a:	f7fa f930 	bl	8002d7e <HAL_DAC_Init>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d001      	beq.n	8008b28 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008b24:	f000 f9ee 	bl	8008f04 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8008b2c:	230a      	movs	r3, #10
 8008b2e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008b30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b34:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008b42:	463b      	mov	r3, r7
 8008b44:	2200      	movs	r2, #0
 8008b46:	4619      	mov	r1, r3
 8008b48:	4805      	ldr	r0, [pc, #20]	; (8008b60 <MX_DAC1_Init+0x60>)
 8008b4a:	f7fa fa6b 	bl	8003024 <HAL_DAC_ConfigChannel>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8008b54:	f000 f9d6 	bl	8008f04 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008b58:	bf00      	nop
 8008b5a:	3728      	adds	r7, #40	; 0x28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000300 	.word	0x20000300
 8008b64:	40007400 	.word	0x40007400

08008b68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008b6c:	4b1b      	ldr	r3, [pc, #108]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b6e:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <MX_I2C2_Init+0x78>)
 8008b70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8008b72:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b74:	4a1b      	ldr	r2, [pc, #108]	; (8008be4 <MX_I2C2_Init+0x7c>)
 8008b76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008b78:	4b18      	ldr	r3, [pc, #96]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b84:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008b8a:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008b90:	4b12      	ldr	r3, [pc, #72]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b96:	4b11      	ldr	r3, [pc, #68]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b9c:	4b0f      	ldr	r3, [pc, #60]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008ba2:	480e      	ldr	r0, [pc, #56]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008ba4:	f7fb f9a4 	bl	8003ef0 <HAL_I2C_Init>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d001      	beq.n	8008bb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008bae:	f000 f9a9 	bl	8008f04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	4809      	ldr	r0, [pc, #36]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008bb6:	f7fb ff2d 	bl	8004a14 <HAL_I2CEx_ConfigAnalogFilter>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008bc0:	f000 f9a0 	bl	8008f04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4805      	ldr	r0, [pc, #20]	; (8008bdc <MX_I2C2_Init+0x74>)
 8008bc8:	f7fb ff6f 	bl	8004aaa <HAL_I2CEx_ConfigDigitalFilter>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008bd2:	f000 f997 	bl	8008f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000374 	.word	0x20000374
 8008be0:	40005800 	.word	0x40005800
 8008be4:	307075b1 	.word	0x307075b1

08008be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b088      	sub	sp, #32
 8008bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bee:	f107 0310 	add.w	r3, r7, #16
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
 8008bf6:	605a      	str	r2, [r3, #4]
 8008bf8:	609a      	str	r2, [r3, #8]
 8008bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bfc:	1d3b      	adds	r3, r7, #4
 8008bfe:	2200      	movs	r2, #0
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	605a      	str	r2, [r3, #4]
 8008c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008c06:	4b1e      	ldr	r3, [pc, #120]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008c0e:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c10:	2200      	movs	r2, #0
 8008c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c14:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2721;
 8008c1a:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c1c:	f640 22a1 	movw	r2, #2721	; 0xaa1
 8008c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c22:	4b17      	ldr	r3, [pc, #92]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c28:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008c2e:	4814      	ldr	r0, [pc, #80]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c30:	f7fd fc3c 	bl	80064ac <HAL_TIM_Base_Init>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008c3a:	f000 f963 	bl	8008f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008c44:	f107 0310 	add.w	r3, r7, #16
 8008c48:	4619      	mov	r1, r3
 8008c4a:	480d      	ldr	r0, [pc, #52]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c4c:	f7fd fe15 	bl	800687a <HAL_TIM_ConfigClockSource>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008c56:	f000 f955 	bl	8008f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008c5a:	2320      	movs	r3, #32
 8008c5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008c62:	1d3b      	adds	r3, r7, #4
 8008c64:	4619      	mov	r1, r3
 8008c66:	4806      	ldr	r0, [pc, #24]	; (8008c80 <MX_TIM2_Init+0x98>)
 8008c68:	f7fe f82c 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008c72:	f000 f947 	bl	8008f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008c76:	bf00      	nop
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	200003c8 	.word	0x200003c8

08008c84 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c8a:	f107 0310 	add.w	r3, r7, #16
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	605a      	str	r2, [r3, #4]
 8008c94:	609a      	str	r2, [r3, #8]
 8008c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	605a      	str	r2, [r3, #4]
 8008ca0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008ca2:	4b1d      	ldr	r3, [pc, #116]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <MX_TIM5_Init+0x98>)
 8008ca6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008ca8:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cae:	4b1a      	ldr	r3, [pc, #104]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 120000;
 8008cb4:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	; (8008d20 <MX_TIM5_Init+0x9c>)
 8008cb8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cba:	4b17      	ldr	r3, [pc, #92]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008cc6:	4814      	ldr	r0, [pc, #80]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008cc8:	f7fd fbf0 	bl	80064ac <HAL_TIM_Base_Init>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8008cd2:	f000 f917 	bl	8008f04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008cdc:	f107 0310 	add.w	r3, r7, #16
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	480d      	ldr	r0, [pc, #52]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008ce4:	f7fd fdc9 	bl	800687a <HAL_TIM_ConfigClockSource>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8008cee:	f000 f909 	bl	8008f04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008cfa:	1d3b      	adds	r3, r7, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4806      	ldr	r0, [pc, #24]	; (8008d18 <MX_TIM5_Init+0x94>)
 8008d00:	f7fd ffe0 	bl	8006cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8008d0a:	f000 f8fb 	bl	8008f04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008d0e:	bf00      	nop
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000414 	.word	0x20000414
 8008d1c:	40000c00 	.word	0x40000c00
 8008d20:	0001d4c0 	.word	0x0001d4c0

08008d24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008d28:	4b22      	ldr	r3, [pc, #136]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d2a:	4a23      	ldr	r2, [pc, #140]	; (8008db8 <MX_USART1_UART_Init+0x94>)
 8008d2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d2e:	4b21      	ldr	r3, [pc, #132]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d36:	4b1f      	ldr	r3, [pc, #124]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d3c:	4b1d      	ldr	r3, [pc, #116]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d42:	4b1c      	ldr	r3, [pc, #112]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d48:	4b1a      	ldr	r3, [pc, #104]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d4a:	220c      	movs	r2, #12
 8008d4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d4e:	4b19      	ldr	r3, [pc, #100]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d50:	2200      	movs	r2, #0
 8008d52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d54:	4b17      	ldr	r3, [pc, #92]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d5a:	4b16      	ldr	r3, [pc, #88]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008d60:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d6c:	4811      	ldr	r0, [pc, #68]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d6e:	f7fe f84f 	bl	8006e10 <HAL_UART_Init>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008d78:	f000 f8c4 	bl	8008f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	480d      	ldr	r0, [pc, #52]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d80:	f7fe feec 	bl	8007b5c <HAL_UARTEx_SetTxFifoThreshold>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008d8a:	f000 f8bb 	bl	8008f04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d8e:	2100      	movs	r1, #0
 8008d90:	4808      	ldr	r0, [pc, #32]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008d92:	f7fe ff21 	bl	8007bd8 <HAL_UARTEx_SetRxFifoThreshold>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008d9c:	f000 f8b2 	bl	8008f04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008da0:	4804      	ldr	r0, [pc, #16]	; (8008db4 <MX_USART1_UART_Init+0x90>)
 8008da2:	f7fe fea2 	bl	8007aea <HAL_UARTEx_DisableFifoMode>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008dac:	f000 f8aa 	bl	8008f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008db0:	bf00      	nop
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000460 	.word	0x20000460
 8008db8:	40013800 	.word	0x40013800

08008dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008dc2:	4b12      	ldr	r3, [pc, #72]	; (8008e0c <MX_DMA_Init+0x50>)
 8008dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc6:	4a11      	ldr	r2, [pc, #68]	; (8008e0c <MX_DMA_Init+0x50>)
 8008dc8:	f043 0304 	orr.w	r3, r3, #4
 8008dcc:	6493      	str	r3, [r2, #72]	; 0x48
 8008dce:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <MX_DMA_Init+0x50>)
 8008dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd2:	f003 0304 	and.w	r3, r3, #4
 8008dd6:	607b      	str	r3, [r7, #4]
 8008dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008dda:	4b0c      	ldr	r3, [pc, #48]	; (8008e0c <MX_DMA_Init+0x50>)
 8008ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dde:	4a0b      	ldr	r2, [pc, #44]	; (8008e0c <MX_DMA_Init+0x50>)
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	6493      	str	r3, [r2, #72]	; 0x48
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <MX_DMA_Init+0x50>)
 8008de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	603b      	str	r3, [r7, #0]
 8008df0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008df2:	2200      	movs	r2, #0
 8008df4:	2100      	movs	r1, #0
 8008df6:	200b      	movs	r0, #11
 8008df8:	f7f9 ff8b 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008dfc:	200b      	movs	r0, #11
 8008dfe:	f7f9 ffa4 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40021000 	.word	0x40021000

08008e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e16:	f107 030c 	add.w	r3, r7, #12
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	605a      	str	r2, [r3, #4]
 8008e20:	609a      	str	r2, [r3, #8]
 8008e22:	60da      	str	r2, [r3, #12]
 8008e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e26:	4b34      	ldr	r3, [pc, #208]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2a:	4a33      	ldr	r2, [pc, #204]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e2c:	f043 0304 	orr.w	r3, r3, #4
 8008e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e32:	4b31      	ldr	r3, [pc, #196]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e36:	f003 0304 	and.w	r3, r3, #4
 8008e3a:	60bb      	str	r3, [r7, #8]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3e:	4b2e      	ldr	r3, [pc, #184]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e42:	4a2d      	ldr	r2, [pc, #180]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e4a:	4b2b      	ldr	r3, [pc, #172]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e56:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	4a27      	ldr	r2, [pc, #156]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e5c:	f043 0302 	orr.w	r3, r3, #2
 8008e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e62:	4b25      	ldr	r3, [pc, #148]	; (8008ef8 <MX_GPIO_Init+0xe8>)
 8008e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2120      	movs	r1, #32
 8008e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e76:	f7fa fff1 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008e80:	481e      	ldr	r0, [pc, #120]	; (8008efc <MX_GPIO_Init+0xec>)
 8008e82:	f7fa ffeb 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8008e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008e8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008e90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8008e96:	f107 030c 	add.w	r3, r7, #12
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4818      	ldr	r0, [pc, #96]	; (8008f00 <MX_GPIO_Init+0xf0>)
 8008e9e:	f7fa fd59 	bl	8003954 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 8008ea2:	2320      	movs	r3, #32
 8008ea4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 8008eb2:	f107 030c 	add.w	r3, r7, #12
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ebc:	f7fa fd4a 	bl	8003954 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8008ec0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8008ed2:	f107 030c 	add.w	r3, r7, #12
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <MX_GPIO_Init+0xec>)
 8008eda:	f7fa fd3b 	bl	8003954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008ede:	2200      	movs	r2, #0
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	2028      	movs	r0, #40	; 0x28
 8008ee4:	f7f9 ff15 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008ee8:	2028      	movs	r0, #40	; 0x28
 8008eea:	f7f9 ff2e 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 8008eee:	bf00      	nop
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	48000400 	.word	0x48000400
 8008f00:	48000800 	.word	0x48000800

08008f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008f08:	b672      	cpsid	i
}
 8008f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008f0c:	e7fe      	b.n	8008f0c <Error_Handler+0x8>
	...

08008f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <HAL_MspInit+0x44>)
 8008f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f1a:	4a0e      	ldr	r2, [pc, #56]	; (8008f54 <HAL_MspInit+0x44>)
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	6613      	str	r3, [r2, #96]	; 0x60
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <HAL_MspInit+0x44>)
 8008f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f26:	f003 0301 	and.w	r3, r3, #1
 8008f2a:	607b      	str	r3, [r7, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f2e:	4b09      	ldr	r3, [pc, #36]	; (8008f54 <HAL_MspInit+0x44>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	4a08      	ldr	r2, [pc, #32]	; (8008f54 <HAL_MspInit+0x44>)
 8008f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f38:	6593      	str	r3, [r2, #88]	; 0x58
 8008f3a:	4b06      	ldr	r3, [pc, #24]	; (8008f54 <HAL_MspInit+0x44>)
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40021000 	.word	0x40021000

08008f58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0ae      	sub	sp, #184	; 0xb8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
 8008f6c:	60da      	str	r2, [r3, #12]
 8008f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f70:	f107 0310 	add.w	r3, r7, #16
 8008f74:	2294      	movs	r2, #148	; 0x94
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f000 fba3 	bl	80096c4 <memset>
  if(hadc->Instance==ADC1)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a27      	ldr	r2, [pc, #156]	; (8009020 <HAL_ADC_MspInit+0xc8>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d146      	bne.n	8009016 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008f88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8008f8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008f96:	2301      	movs	r3, #1
 8008f98:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008f9e:	2318      	movs	r3, #24
 8008fa0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008faa:	2302      	movs	r3, #2
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8008fae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fc fd5f 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8008fc4:	f7ff ff9e 	bl	8008f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8008fc8:	4b16      	ldr	r3, [pc, #88]	; (8009024 <HAL_ADC_MspInit+0xcc>)
 8008fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fcc:	4a15      	ldr	r2, [pc, #84]	; (8009024 <HAL_ADC_MspInit+0xcc>)
 8008fce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fd4:	4b13      	ldr	r3, [pc, #76]	; (8009024 <HAL_ADC_MspInit+0xcc>)
 8008fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008fdc:	60fb      	str	r3, [r7, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fe0:	4b10      	ldr	r3, [pc, #64]	; (8009024 <HAL_ADC_MspInit+0xcc>)
 8008fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe4:	4a0f      	ldr	r2, [pc, #60]	; (8009024 <HAL_ADC_MspInit+0xcc>)
 8008fe6:	f043 0304 	orr.w	r3, r3, #4
 8008fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <HAL_ADC_MspInit+0xcc>)
 8008fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	60bb      	str	r3, [r7, #8]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008ffe:	230b      	movs	r3, #11
 8009000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800900a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800900e:	4619      	mov	r1, r3
 8009010:	4805      	ldr	r0, [pc, #20]	; (8009028 <HAL_ADC_MspInit+0xd0>)
 8009012:	f7fa fc9f 	bl	8003954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8009016:	bf00      	nop
 8009018:	37b8      	adds	r7, #184	; 0xb8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	50040000 	.word	0x50040000
 8009024:	40021000 	.word	0x40021000
 8009028:	48000800 	.word	0x48000800

0800902c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	2200      	movs	r2, #0
 800903a:	601a      	str	r2, [r3, #0]
 800903c:	605a      	str	r2, [r3, #4]
 800903e:	609a      	str	r2, [r3, #8]
 8009040:	60da      	str	r2, [r3, #12]
 8009042:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a2b      	ldr	r2, [pc, #172]	; (80090f8 <HAL_DAC_MspInit+0xcc>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d14f      	bne.n	80090ee <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800904e:	4b2b      	ldr	r3, [pc, #172]	; (80090fc <HAL_DAC_MspInit+0xd0>)
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	4a2a      	ldr	r2, [pc, #168]	; (80090fc <HAL_DAC_MspInit+0xd0>)
 8009054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009058:	6593      	str	r3, [r2, #88]	; 0x58
 800905a:	4b28      	ldr	r3, [pc, #160]	; (80090fc <HAL_DAC_MspInit+0xd0>)
 800905c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009066:	4b25      	ldr	r3, [pc, #148]	; (80090fc <HAL_DAC_MspInit+0xd0>)
 8009068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800906a:	4a24      	ldr	r2, [pc, #144]	; (80090fc <HAL_DAC_MspInit+0xd0>)
 800906c:	f043 0301 	orr.w	r3, r3, #1
 8009070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009072:	4b22      	ldr	r3, [pc, #136]	; (80090fc <HAL_DAC_MspInit+0xd0>)
 8009074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800907e:	2310      	movs	r3, #16
 8009080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009082:	2303      	movs	r3, #3
 8009084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009086:	2300      	movs	r3, #0
 8009088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800908a:	f107 0314 	add.w	r3, r7, #20
 800908e:	4619      	mov	r1, r3
 8009090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009094:	f7fa fc5e 	bl	8003954 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8009098:	4b19      	ldr	r3, [pc, #100]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 800909a:	4a1a      	ldr	r2, [pc, #104]	; (8009104 <HAL_DAC_MspInit+0xd8>)
 800909c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800909e:	4b18      	ldr	r3, [pc, #96]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090a0:	2206      	movs	r2, #6
 80090a2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80090a4:	4b16      	ldr	r3, [pc, #88]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090a6:	2210      	movs	r2, #16
 80090a8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80090aa:	4b15      	ldr	r3, [pc, #84]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80090b0:	4b13      	ldr	r3, [pc, #76]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090b2:	2280      	movs	r2, #128	; 0x80
 80090b4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80090b6:	4b12      	ldr	r3, [pc, #72]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090bc:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80090be:	4b10      	ldr	r3, [pc, #64]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090c4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80090c6:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090c8:	2220      	movs	r2, #32
 80090ca:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80090cc:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80090d2:	480b      	ldr	r0, [pc, #44]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090d4:	f7fa f970 	bl	80033b8 <HAL_DMA_Init>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80090de:	f7ff ff11 	bl	8008f04 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a06      	ldr	r2, [pc, #24]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090e6:	609a      	str	r2, [r3, #8]
 80090e8:	4a05      	ldr	r2, [pc, #20]	; (8009100 <HAL_DAC_MspInit+0xd4>)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80090ee:	bf00      	nop
 80090f0:	3728      	adds	r7, #40	; 0x28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40007400 	.word	0x40007400
 80090fc:	40021000 	.word	0x40021000
 8009100:	20000314 	.word	0x20000314
 8009104:	40020008 	.word	0x40020008

08009108 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b0ae      	sub	sp, #184	; 0xb8
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009110:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009120:	f107 0310 	add.w	r3, r7, #16
 8009124:	2294      	movs	r2, #148	; 0x94
 8009126:	2100      	movs	r1, #0
 8009128:	4618      	mov	r0, r3
 800912a:	f000 facb 	bl	80096c4 <memset>
  if(hi2c->Instance==I2C2)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a21      	ldr	r2, [pc, #132]	; (80091b8 <HAL_I2C_MspInit+0xb0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d13b      	bne.n	80091b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009138:	2380      	movs	r3, #128	; 0x80
 800913a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800913c:	2300      	movs	r3, #0
 800913e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009140:	f107 0310 	add.w	r3, r7, #16
 8009144:	4618      	mov	r0, r3
 8009146:	f7fc fc99 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009150:	f7ff fed8 	bl	8008f04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009154:	4b19      	ldr	r3, [pc, #100]	; (80091bc <HAL_I2C_MspInit+0xb4>)
 8009156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009158:	4a18      	ldr	r2, [pc, #96]	; (80091bc <HAL_I2C_MspInit+0xb4>)
 800915a:	f043 0302 	orr.w	r3, r3, #2
 800915e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009160:	4b16      	ldr	r3, [pc, #88]	; (80091bc <HAL_I2C_MspInit+0xb4>)
 8009162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800916c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009170:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009174:	2312      	movs	r3, #18
 8009176:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917a:	2300      	movs	r3, #0
 800917c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009180:	2303      	movs	r3, #3
 8009182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009186:	2304      	movs	r3, #4
 8009188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800918c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009190:	4619      	mov	r1, r3
 8009192:	480b      	ldr	r0, [pc, #44]	; (80091c0 <HAL_I2C_MspInit+0xb8>)
 8009194:	f7fa fbde 	bl	8003954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009198:	4b08      	ldr	r3, [pc, #32]	; (80091bc <HAL_I2C_MspInit+0xb4>)
 800919a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919c:	4a07      	ldr	r2, [pc, #28]	; (80091bc <HAL_I2C_MspInit+0xb4>)
 800919e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80091a2:	6593      	str	r3, [r2, #88]	; 0x58
 80091a4:	4b05      	ldr	r3, [pc, #20]	; (80091bc <HAL_I2C_MspInit+0xb4>)
 80091a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ac:	60bb      	str	r3, [r7, #8]
 80091ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80091b0:	bf00      	nop
 80091b2:	37b8      	adds	r7, #184	; 0xb8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	40005800 	.word	0x40005800
 80091bc:	40021000 	.word	0x40021000
 80091c0:	48000400 	.word	0x48000400

080091c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a0b      	ldr	r2, [pc, #44]	; (8009200 <HAL_I2C_MspDeInit+0x3c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d10f      	bne.n	80091f6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <HAL_I2C_MspDeInit+0x40>)
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	4a0a      	ldr	r2, [pc, #40]	; (8009204 <HAL_I2C_MspDeInit+0x40>)
 80091dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80091e0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80091e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091e6:	4808      	ldr	r0, [pc, #32]	; (8009208 <HAL_I2C_MspDeInit+0x44>)
 80091e8:	f7fa fd46 	bl	8003c78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80091ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091f0:	4805      	ldr	r0, [pc, #20]	; (8009208 <HAL_I2C_MspDeInit+0x44>)
 80091f2:	f7fa fd41 	bl	8003c78 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80091f6:	bf00      	nop
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	40005800 	.word	0x40005800
 8009204:	40021000 	.word	0x40021000
 8009208:	48000400 	.word	0x48000400

0800920c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800921c:	d10c      	bne.n	8009238 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800921e:	4b15      	ldr	r3, [pc, #84]	; (8009274 <HAL_TIM_Base_MspInit+0x68>)
 8009220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009222:	4a14      	ldr	r2, [pc, #80]	; (8009274 <HAL_TIM_Base_MspInit+0x68>)
 8009224:	f043 0301 	orr.w	r3, r3, #1
 8009228:	6593      	str	r3, [r2, #88]	; 0x58
 800922a:	4b12      	ldr	r3, [pc, #72]	; (8009274 <HAL_TIM_Base_MspInit+0x68>)
 800922c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800922e:	f003 0301 	and.w	r3, r3, #1
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8009236:	e018      	b.n	800926a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a0e      	ldr	r2, [pc, #56]	; (8009278 <HAL_TIM_Base_MspInit+0x6c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d113      	bne.n	800926a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <HAL_TIM_Base_MspInit+0x68>)
 8009244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009246:	4a0b      	ldr	r2, [pc, #44]	; (8009274 <HAL_TIM_Base_MspInit+0x68>)
 8009248:	f043 0308 	orr.w	r3, r3, #8
 800924c:	6593      	str	r3, [r2, #88]	; 0x58
 800924e:	4b09      	ldr	r3, [pc, #36]	; (8009274 <HAL_TIM_Base_MspInit+0x68>)
 8009250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009252:	f003 0308 	and.w	r3, r3, #8
 8009256:	60bb      	str	r3, [r7, #8]
 8009258:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800925a:	2200      	movs	r2, #0
 800925c:	2100      	movs	r1, #0
 800925e:	2032      	movs	r0, #50	; 0x32
 8009260:	f7f9 fd57 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009264:	2032      	movs	r0, #50	; 0x32
 8009266:	f7f9 fd70 	bl	8002d4a <HAL_NVIC_EnableIRQ>
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40021000 	.word	0x40021000
 8009278:	40000c00 	.word	0x40000c00

0800927c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b0ae      	sub	sp, #184	; 0xb8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009284:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	605a      	str	r2, [r3, #4]
 800928e:	609a      	str	r2, [r3, #8]
 8009290:	60da      	str	r2, [r3, #12]
 8009292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009294:	f107 0310 	add.w	r3, r7, #16
 8009298:	2294      	movs	r2, #148	; 0x94
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f000 fa11 	bl	80096c4 <memset>
  if(huart->Instance==USART1)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a21      	ldr	r2, [pc, #132]	; (800932c <HAL_UART_MspInit+0xb0>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d13a      	bne.n	8009322 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80092ac:	2301      	movs	r3, #1
 80092ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80092b0:	2300      	movs	r3, #0
 80092b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80092b4:	f107 0310 	add.w	r3, r7, #16
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fc fbdf 	bl	8005a7c <HAL_RCCEx_PeriphCLKConfig>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80092c4:	f7ff fe1e 	bl	8008f04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80092c8:	4b19      	ldr	r3, [pc, #100]	; (8009330 <HAL_UART_MspInit+0xb4>)
 80092ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092cc:	4a18      	ldr	r2, [pc, #96]	; (8009330 <HAL_UART_MspInit+0xb4>)
 80092ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092d2:	6613      	str	r3, [r2, #96]	; 0x60
 80092d4:	4b16      	ldr	r3, [pc, #88]	; (8009330 <HAL_UART_MspInit+0xb4>)
 80092d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092dc:	60fb      	str	r3, [r7, #12]
 80092de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80092e0:	4b13      	ldr	r3, [pc, #76]	; (8009330 <HAL_UART_MspInit+0xb4>)
 80092e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e4:	4a12      	ldr	r2, [pc, #72]	; (8009330 <HAL_UART_MspInit+0xb4>)
 80092e6:	f043 0302 	orr.w	r3, r3, #2
 80092ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092ec:	4b10      	ldr	r3, [pc, #64]	; (8009330 <HAL_UART_MspInit+0xb4>)
 80092ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	60bb      	str	r3, [r7, #8]
 80092f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80092f8:	23c0      	movs	r3, #192	; 0xc0
 80092fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092fe:	2302      	movs	r3, #2
 8009300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009304:	2300      	movs	r3, #0
 8009306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800930a:	2303      	movs	r3, #3
 800930c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009310:	2307      	movs	r3, #7
 8009312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009316:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800931a:	4619      	mov	r1, r3
 800931c:	4805      	ldr	r0, [pc, #20]	; (8009334 <HAL_UART_MspInit+0xb8>)
 800931e:	f7fa fb19 	bl	8003954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009322:	bf00      	nop
 8009324:	37b8      	adds	r7, #184	; 0xb8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	40013800 	.word	0x40013800
 8009330:	40021000 	.word	0x40021000
 8009334:	48000400 	.word	0x48000400

08009338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800933c:	e7fe      	b.n	800933c <NMI_Handler+0x4>

0800933e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800933e:	b480      	push	{r7}
 8009340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009342:	e7fe      	b.n	8009342 <HardFault_Handler+0x4>

08009344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009344:	b480      	push	{r7}
 8009346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009348:	e7fe      	b.n	8009348 <MemManage_Handler+0x4>

0800934a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800934a:	b480      	push	{r7}
 800934c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800934e:	e7fe      	b.n	800934e <BusFault_Handler+0x4>

08009350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009354:	e7fe      	b.n	8009354 <UsageFault_Handler+0x4>

08009356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009356:	b480      	push	{r7}
 8009358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800935a:	bf00      	nop
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009368:	bf00      	nop
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009372:	b480      	push	{r7}
 8009374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009376:	bf00      	nop
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009384:	f7f8 f962 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009388:	bf00      	nop
 800938a:	bd80      	pop	{r7, pc}

0800938c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8009390:	4802      	ldr	r0, [pc, #8]	; (800939c <DMA1_Channel1_IRQHandler+0x10>)
 8009392:	f7fa f990 	bl	80036b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009396:	bf00      	nop
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	20000314 	.word	0x20000314

080093a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 80093a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80093a8:	f7fa fd8a 	bl	8003ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80093ac:	bf00      	nop
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80093b4:	4802      	ldr	r0, [pc, #8]	; (80093c0 <TIM5_IRQHandler+0x10>)
 80093b6:	f7fd f941 	bl	800663c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80093ba:	bf00      	nop
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	20000414 	.word	0x20000414

080093c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
  return 1;
 80093c8:	2301      	movs	r3, #1
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <_kill>:

int _kill(int pid, int sig)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80093de:	f000 f939 	bl	8009654 <__errno>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2216      	movs	r2, #22
 80093e6:	601a      	str	r2, [r3, #0]
  return -1;
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <_exit>:

void _exit (int status)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80093fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff ffe7 	bl	80093d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009406:	e7fe      	b.n	8009406 <_exit+0x12>

08009408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
 8009418:	e00a      	b.n	8009430 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800941a:	f7fe fc7b 	bl	8007d14 <__io_getchar>
 800941e:	4601      	mov	r1, r0
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	60ba      	str	r2, [r7, #8]
 8009426:	b2ca      	uxtb	r2, r1
 8009428:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	3301      	adds	r3, #1
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	dbf0      	blt.n	800941a <_read+0x12>
  }

  return len;
 8009438:	687b      	ldr	r3, [r7, #4]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b086      	sub	sp, #24
 8009446:	af00      	add	r7, sp, #0
 8009448:	60f8      	str	r0, [r7, #12]
 800944a:	60b9      	str	r1, [r7, #8]
 800944c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
 8009452:	e009      	b.n	8009468 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	60ba      	str	r2, [r7, #8]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fc47 	bl	8007cf0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	3301      	adds	r3, #1
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	429a      	cmp	r2, r3
 800946e:	dbf1      	blt.n	8009454 <_write+0x12>
  }
  return len;
 8009470:	687b      	ldr	r3, [r7, #4]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3718      	adds	r7, #24
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <_close>:

int _close(int file)
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009492:	b480      	push	{r7}
 8009494:	b083      	sub	sp, #12
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094a2:	605a      	str	r2, [r3, #4]
  return 0;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <_isatty>:

int _isatty(int file)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80094ba:	2301      	movs	r3, #1
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
	...

080094e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80094ec:	4a14      	ldr	r2, [pc, #80]	; (8009540 <_sbrk+0x5c>)
 80094ee:	4b15      	ldr	r3, [pc, #84]	; (8009544 <_sbrk+0x60>)
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80094f8:	4b13      	ldr	r3, [pc, #76]	; (8009548 <_sbrk+0x64>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009500:	4b11      	ldr	r3, [pc, #68]	; (8009548 <_sbrk+0x64>)
 8009502:	4a12      	ldr	r2, [pc, #72]	; (800954c <_sbrk+0x68>)
 8009504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009506:	4b10      	ldr	r3, [pc, #64]	; (8009548 <_sbrk+0x64>)
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4413      	add	r3, r2
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	429a      	cmp	r2, r3
 8009512:	d207      	bcs.n	8009524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009514:	f000 f89e 	bl	8009654 <__errno>
 8009518:	4603      	mov	r3, r0
 800951a:	220c      	movs	r2, #12
 800951c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800951e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009522:	e009      	b.n	8009538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009524:	4b08      	ldr	r3, [pc, #32]	; (8009548 <_sbrk+0x64>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <_sbrk+0x64>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4413      	add	r3, r2
 8009532:	4a05      	ldr	r2, [pc, #20]	; (8009548 <_sbrk+0x64>)
 8009534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009536:	68fb      	ldr	r3, [r7, #12]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3718      	adds	r7, #24
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	200a0000 	.word	0x200a0000
 8009544:	00000400 	.word	0x00000400
 8009548:	2000058c 	.word	0x2000058c
 800954c:	200005a0 	.word	0x200005a0

08009550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8009550:	b480      	push	{r7}
 8009552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009554:	4b06      	ldr	r3, [pc, #24]	; (8009570 <SystemInit+0x20>)
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800955a:	4a05      	ldr	r2, [pc, #20]	; (8009570 <SystemInit+0x20>)
 800955c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009564:	bf00      	nop
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	e000ed00 	.word	0xe000ed00

08009574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80095ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8009578:	f7ff ffea 	bl	8009550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800957c:	480c      	ldr	r0, [pc, #48]	; (80095b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800957e:	490d      	ldr	r1, [pc, #52]	; (80095b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009580:	4a0d      	ldr	r2, [pc, #52]	; (80095b8 <LoopForever+0xe>)
  movs r3, #0
 8009582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009584:	e002      	b.n	800958c <LoopCopyDataInit>

08009586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800958a:	3304      	adds	r3, #4

0800958c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800958c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800958e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009590:	d3f9      	bcc.n	8009586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009592:	4a0a      	ldr	r2, [pc, #40]	; (80095bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8009594:	4c0a      	ldr	r4, [pc, #40]	; (80095c0 <LoopForever+0x16>)
  movs r3, #0
 8009596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009598:	e001      	b.n	800959e <LoopFillZerobss>

0800959a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800959a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800959c:	3204      	adds	r2, #4

0800959e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800959e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80095a0:	d3fb      	bcc.n	800959a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80095a2:	f000 f85d 	bl	8009660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80095a6:	f7ff f81d 	bl	80085e4 <main>

080095aa <LoopForever>:

LoopForever:
    b LoopForever
 80095aa:	e7fe      	b.n	80095aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80095ac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80095b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80095b4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80095b8:	0800fcbc 	.word	0x0800fcbc
  ldr r2, =_sbss
 80095bc:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80095c0:	200005a0 	.word	0x200005a0

080095c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80095c4:	e7fe      	b.n	80095c4 <ADC1_IRQHandler>
	...

080095c8 <arm_sin_f32>:
 80095c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009648 <arm_sin_f32+0x80>
 80095cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80095d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80095d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80095dc:	d504      	bpl.n	80095e8 <arm_sin_f32+0x20>
 80095de:	ee17 3a90 	vmov	r3, s15
 80095e2:	3b01      	subs	r3, #1
 80095e4:	ee07 3a90 	vmov	s15, r3
 80095e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095ec:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800964c <arm_sin_f32+0x84>
 80095f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80095f4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80095f8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80095fc:	ee17 3a90 	vmov	r3, s15
 8009600:	b29b      	uxth	r3, r3
 8009602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009606:	d21a      	bcs.n	800963e <arm_sin_f32+0x76>
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009610:	1c59      	adds	r1, r3, #1
 8009612:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009616:	4a0e      	ldr	r2, [pc, #56]	; (8009650 <arm_sin_f32+0x88>)
 8009618:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800961c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009620:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009624:	ed93 7a00 	vldr	s14, [r3]
 8009628:	edd2 6a00 	vldr	s13, [r2]
 800962c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009630:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009638:	ee37 0a80 	vadd.f32	s0, s15, s0
 800963c:	4770      	bx	lr
 800963e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009642:	2101      	movs	r1, #1
 8009644:	2300      	movs	r3, #0
 8009646:	e7e6      	b.n	8009616 <arm_sin_f32+0x4e>
 8009648:	3e22f983 	.word	0x3e22f983
 800964c:	44000000 	.word	0x44000000
 8009650:	0800efe4 	.word	0x0800efe4

08009654 <__errno>:
 8009654:	4b01      	ldr	r3, [pc, #4]	; (800965c <__errno+0x8>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	2000004c 	.word	0x2000004c

08009660 <__libc_init_array>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	4d0d      	ldr	r5, [pc, #52]	; (8009698 <__libc_init_array+0x38>)
 8009664:	4c0d      	ldr	r4, [pc, #52]	; (800969c <__libc_init_array+0x3c>)
 8009666:	1b64      	subs	r4, r4, r5
 8009668:	10a4      	asrs	r4, r4, #2
 800966a:	2600      	movs	r6, #0
 800966c:	42a6      	cmp	r6, r4
 800966e:	d109      	bne.n	8009684 <__libc_init_array+0x24>
 8009670:	4d0b      	ldr	r5, [pc, #44]	; (80096a0 <__libc_init_array+0x40>)
 8009672:	4c0c      	ldr	r4, [pc, #48]	; (80096a4 <__libc_init_array+0x44>)
 8009674:	f005 fb46 	bl	800ed04 <_init>
 8009678:	1b64      	subs	r4, r4, r5
 800967a:	10a4      	asrs	r4, r4, #2
 800967c:	2600      	movs	r6, #0
 800967e:	42a6      	cmp	r6, r4
 8009680:	d105      	bne.n	800968e <__libc_init_array+0x2e>
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	f855 3b04 	ldr.w	r3, [r5], #4
 8009688:	4798      	blx	r3
 800968a:	3601      	adds	r6, #1
 800968c:	e7ee      	b.n	800966c <__libc_init_array+0xc>
 800968e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009692:	4798      	blx	r3
 8009694:	3601      	adds	r6, #1
 8009696:	e7f2      	b.n	800967e <__libc_init_array+0x1e>
 8009698:	0800fcb4 	.word	0x0800fcb4
 800969c:	0800fcb4 	.word	0x0800fcb4
 80096a0:	0800fcb4 	.word	0x0800fcb4
 80096a4:	0800fcb8 	.word	0x0800fcb8

080096a8 <memcpy>:
 80096a8:	440a      	add	r2, r1
 80096aa:	4291      	cmp	r1, r2
 80096ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096b0:	d100      	bne.n	80096b4 <memcpy+0xc>
 80096b2:	4770      	bx	lr
 80096b4:	b510      	push	{r4, lr}
 80096b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096be:	4291      	cmp	r1, r2
 80096c0:	d1f9      	bne.n	80096b6 <memcpy+0xe>
 80096c2:	bd10      	pop	{r4, pc}

080096c4 <memset>:
 80096c4:	4402      	add	r2, r0
 80096c6:	4603      	mov	r3, r0
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d100      	bne.n	80096ce <memset+0xa>
 80096cc:	4770      	bx	lr
 80096ce:	f803 1b01 	strb.w	r1, [r3], #1
 80096d2:	e7f9      	b.n	80096c8 <memset+0x4>

080096d4 <__cvt>:
 80096d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096d8:	ec55 4b10 	vmov	r4, r5, d0
 80096dc:	2d00      	cmp	r5, #0
 80096de:	460e      	mov	r6, r1
 80096e0:	4619      	mov	r1, r3
 80096e2:	462b      	mov	r3, r5
 80096e4:	bfbb      	ittet	lt
 80096e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096ea:	461d      	movlt	r5, r3
 80096ec:	2300      	movge	r3, #0
 80096ee:	232d      	movlt	r3, #45	; 0x2d
 80096f0:	700b      	strb	r3, [r1, #0]
 80096f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096f8:	4691      	mov	r9, r2
 80096fa:	f023 0820 	bic.w	r8, r3, #32
 80096fe:	bfbc      	itt	lt
 8009700:	4622      	movlt	r2, r4
 8009702:	4614      	movlt	r4, r2
 8009704:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009708:	d005      	beq.n	8009716 <__cvt+0x42>
 800970a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800970e:	d100      	bne.n	8009712 <__cvt+0x3e>
 8009710:	3601      	adds	r6, #1
 8009712:	2102      	movs	r1, #2
 8009714:	e000      	b.n	8009718 <__cvt+0x44>
 8009716:	2103      	movs	r1, #3
 8009718:	ab03      	add	r3, sp, #12
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	ab02      	add	r3, sp, #8
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	ec45 4b10 	vmov	d0, r4, r5
 8009724:	4653      	mov	r3, sl
 8009726:	4632      	mov	r2, r6
 8009728:	f001 feba 	bl	800b4a0 <_dtoa_r>
 800972c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009730:	4607      	mov	r7, r0
 8009732:	d102      	bne.n	800973a <__cvt+0x66>
 8009734:	f019 0f01 	tst.w	r9, #1
 8009738:	d022      	beq.n	8009780 <__cvt+0xac>
 800973a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800973e:	eb07 0906 	add.w	r9, r7, r6
 8009742:	d110      	bne.n	8009766 <__cvt+0x92>
 8009744:	783b      	ldrb	r3, [r7, #0]
 8009746:	2b30      	cmp	r3, #48	; 0x30
 8009748:	d10a      	bne.n	8009760 <__cvt+0x8c>
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f7 f9d1 	bl	8000af8 <__aeabi_dcmpeq>
 8009756:	b918      	cbnz	r0, 8009760 <__cvt+0x8c>
 8009758:	f1c6 0601 	rsb	r6, r6, #1
 800975c:	f8ca 6000 	str.w	r6, [sl]
 8009760:	f8da 3000 	ldr.w	r3, [sl]
 8009764:	4499      	add	r9, r3
 8009766:	2200      	movs	r2, #0
 8009768:	2300      	movs	r3, #0
 800976a:	4620      	mov	r0, r4
 800976c:	4629      	mov	r1, r5
 800976e:	f7f7 f9c3 	bl	8000af8 <__aeabi_dcmpeq>
 8009772:	b108      	cbz	r0, 8009778 <__cvt+0xa4>
 8009774:	f8cd 900c 	str.w	r9, [sp, #12]
 8009778:	2230      	movs	r2, #48	; 0x30
 800977a:	9b03      	ldr	r3, [sp, #12]
 800977c:	454b      	cmp	r3, r9
 800977e:	d307      	bcc.n	8009790 <__cvt+0xbc>
 8009780:	9b03      	ldr	r3, [sp, #12]
 8009782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009784:	1bdb      	subs	r3, r3, r7
 8009786:	4638      	mov	r0, r7
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	b004      	add	sp, #16
 800978c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009790:	1c59      	adds	r1, r3, #1
 8009792:	9103      	str	r1, [sp, #12]
 8009794:	701a      	strb	r2, [r3, #0]
 8009796:	e7f0      	b.n	800977a <__cvt+0xa6>

08009798 <__exponent>:
 8009798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800979a:	4603      	mov	r3, r0
 800979c:	2900      	cmp	r1, #0
 800979e:	bfb8      	it	lt
 80097a0:	4249      	neglt	r1, r1
 80097a2:	f803 2b02 	strb.w	r2, [r3], #2
 80097a6:	bfb4      	ite	lt
 80097a8:	222d      	movlt	r2, #45	; 0x2d
 80097aa:	222b      	movge	r2, #43	; 0x2b
 80097ac:	2909      	cmp	r1, #9
 80097ae:	7042      	strb	r2, [r0, #1]
 80097b0:	dd2a      	ble.n	8009808 <__exponent+0x70>
 80097b2:	f10d 0407 	add.w	r4, sp, #7
 80097b6:	46a4      	mov	ip, r4
 80097b8:	270a      	movs	r7, #10
 80097ba:	46a6      	mov	lr, r4
 80097bc:	460a      	mov	r2, r1
 80097be:	fb91 f6f7 	sdiv	r6, r1, r7
 80097c2:	fb07 1516 	mls	r5, r7, r6, r1
 80097c6:	3530      	adds	r5, #48	; 0x30
 80097c8:	2a63      	cmp	r2, #99	; 0x63
 80097ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80097ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80097d2:	4631      	mov	r1, r6
 80097d4:	dcf1      	bgt.n	80097ba <__exponent+0x22>
 80097d6:	3130      	adds	r1, #48	; 0x30
 80097d8:	f1ae 0502 	sub.w	r5, lr, #2
 80097dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097e0:	1c44      	adds	r4, r0, #1
 80097e2:	4629      	mov	r1, r5
 80097e4:	4561      	cmp	r1, ip
 80097e6:	d30a      	bcc.n	80097fe <__exponent+0x66>
 80097e8:	f10d 0209 	add.w	r2, sp, #9
 80097ec:	eba2 020e 	sub.w	r2, r2, lr
 80097f0:	4565      	cmp	r5, ip
 80097f2:	bf88      	it	hi
 80097f4:	2200      	movhi	r2, #0
 80097f6:	4413      	add	r3, r2
 80097f8:	1a18      	subs	r0, r3, r0
 80097fa:	b003      	add	sp, #12
 80097fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009802:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009806:	e7ed      	b.n	80097e4 <__exponent+0x4c>
 8009808:	2330      	movs	r3, #48	; 0x30
 800980a:	3130      	adds	r1, #48	; 0x30
 800980c:	7083      	strb	r3, [r0, #2]
 800980e:	70c1      	strb	r1, [r0, #3]
 8009810:	1d03      	adds	r3, r0, #4
 8009812:	e7f1      	b.n	80097f8 <__exponent+0x60>

08009814 <_printf_float>:
 8009814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	ed2d 8b02 	vpush	{d8}
 800981c:	b08d      	sub	sp, #52	; 0x34
 800981e:	460c      	mov	r4, r1
 8009820:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009824:	4616      	mov	r6, r2
 8009826:	461f      	mov	r7, r3
 8009828:	4605      	mov	r5, r0
 800982a:	f003 f97d 	bl	800cb28 <_localeconv_r>
 800982e:	f8d0 a000 	ldr.w	sl, [r0]
 8009832:	4650      	mov	r0, sl
 8009834:	f7f6 fce4 	bl	8000200 <strlen>
 8009838:	2300      	movs	r3, #0
 800983a:	930a      	str	r3, [sp, #40]	; 0x28
 800983c:	6823      	ldr	r3, [r4, #0]
 800983e:	9305      	str	r3, [sp, #20]
 8009840:	f8d8 3000 	ldr.w	r3, [r8]
 8009844:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009848:	3307      	adds	r3, #7
 800984a:	f023 0307 	bic.w	r3, r3, #7
 800984e:	f103 0208 	add.w	r2, r3, #8
 8009852:	f8c8 2000 	str.w	r2, [r8]
 8009856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800985e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009862:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009866:	9307      	str	r3, [sp, #28]
 8009868:	f8cd 8018 	str.w	r8, [sp, #24]
 800986c:	ee08 0a10 	vmov	s16, r0
 8009870:	4b9f      	ldr	r3, [pc, #636]	; (8009af0 <_printf_float+0x2dc>)
 8009872:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800987a:	f7f7 f96f 	bl	8000b5c <__aeabi_dcmpun>
 800987e:	bb88      	cbnz	r0, 80098e4 <_printf_float+0xd0>
 8009880:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009884:	4b9a      	ldr	r3, [pc, #616]	; (8009af0 <_printf_float+0x2dc>)
 8009886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988a:	f7f7 f949 	bl	8000b20 <__aeabi_dcmple>
 800988e:	bb48      	cbnz	r0, 80098e4 <_printf_float+0xd0>
 8009890:	2200      	movs	r2, #0
 8009892:	2300      	movs	r3, #0
 8009894:	4640      	mov	r0, r8
 8009896:	4649      	mov	r1, r9
 8009898:	f7f7 f938 	bl	8000b0c <__aeabi_dcmplt>
 800989c:	b110      	cbz	r0, 80098a4 <_printf_float+0x90>
 800989e:	232d      	movs	r3, #45	; 0x2d
 80098a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098a4:	4b93      	ldr	r3, [pc, #588]	; (8009af4 <_printf_float+0x2e0>)
 80098a6:	4894      	ldr	r0, [pc, #592]	; (8009af8 <_printf_float+0x2e4>)
 80098a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80098ac:	bf94      	ite	ls
 80098ae:	4698      	movls	r8, r3
 80098b0:	4680      	movhi	r8, r0
 80098b2:	2303      	movs	r3, #3
 80098b4:	6123      	str	r3, [r4, #16]
 80098b6:	9b05      	ldr	r3, [sp, #20]
 80098b8:	f023 0204 	bic.w	r2, r3, #4
 80098bc:	6022      	str	r2, [r4, #0]
 80098be:	f04f 0900 	mov.w	r9, #0
 80098c2:	9700      	str	r7, [sp, #0]
 80098c4:	4633      	mov	r3, r6
 80098c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80098c8:	4621      	mov	r1, r4
 80098ca:	4628      	mov	r0, r5
 80098cc:	f000 f9d8 	bl	8009c80 <_printf_common>
 80098d0:	3001      	adds	r0, #1
 80098d2:	f040 8090 	bne.w	80099f6 <_printf_float+0x1e2>
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098da:	b00d      	add	sp, #52	; 0x34
 80098dc:	ecbd 8b02 	vpop	{d8}
 80098e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e4:	4642      	mov	r2, r8
 80098e6:	464b      	mov	r3, r9
 80098e8:	4640      	mov	r0, r8
 80098ea:	4649      	mov	r1, r9
 80098ec:	f7f7 f936 	bl	8000b5c <__aeabi_dcmpun>
 80098f0:	b140      	cbz	r0, 8009904 <_printf_float+0xf0>
 80098f2:	464b      	mov	r3, r9
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfbc      	itt	lt
 80098f8:	232d      	movlt	r3, #45	; 0x2d
 80098fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098fe:	487f      	ldr	r0, [pc, #508]	; (8009afc <_printf_float+0x2e8>)
 8009900:	4b7f      	ldr	r3, [pc, #508]	; (8009b00 <_printf_float+0x2ec>)
 8009902:	e7d1      	b.n	80098a8 <_printf_float+0x94>
 8009904:	6863      	ldr	r3, [r4, #4]
 8009906:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800990a:	9206      	str	r2, [sp, #24]
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	d13f      	bne.n	8009990 <_printf_float+0x17c>
 8009910:	2306      	movs	r3, #6
 8009912:	6063      	str	r3, [r4, #4]
 8009914:	9b05      	ldr	r3, [sp, #20]
 8009916:	6861      	ldr	r1, [r4, #4]
 8009918:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800991c:	2300      	movs	r3, #0
 800991e:	9303      	str	r3, [sp, #12]
 8009920:	ab0a      	add	r3, sp, #40	; 0x28
 8009922:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009926:	ab09      	add	r3, sp, #36	; 0x24
 8009928:	ec49 8b10 	vmov	d0, r8, r9
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	6022      	str	r2, [r4, #0]
 8009930:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009934:	4628      	mov	r0, r5
 8009936:	f7ff fecd 	bl	80096d4 <__cvt>
 800993a:	9b06      	ldr	r3, [sp, #24]
 800993c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800993e:	2b47      	cmp	r3, #71	; 0x47
 8009940:	4680      	mov	r8, r0
 8009942:	d108      	bne.n	8009956 <_printf_float+0x142>
 8009944:	1cc8      	adds	r0, r1, #3
 8009946:	db02      	blt.n	800994e <_printf_float+0x13a>
 8009948:	6863      	ldr	r3, [r4, #4]
 800994a:	4299      	cmp	r1, r3
 800994c:	dd41      	ble.n	80099d2 <_printf_float+0x1be>
 800994e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009952:	fa5f fb8b 	uxtb.w	fp, fp
 8009956:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800995a:	d820      	bhi.n	800999e <_printf_float+0x18a>
 800995c:	3901      	subs	r1, #1
 800995e:	465a      	mov	r2, fp
 8009960:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009964:	9109      	str	r1, [sp, #36]	; 0x24
 8009966:	f7ff ff17 	bl	8009798 <__exponent>
 800996a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800996c:	1813      	adds	r3, r2, r0
 800996e:	2a01      	cmp	r2, #1
 8009970:	4681      	mov	r9, r0
 8009972:	6123      	str	r3, [r4, #16]
 8009974:	dc02      	bgt.n	800997c <_printf_float+0x168>
 8009976:	6822      	ldr	r2, [r4, #0]
 8009978:	07d2      	lsls	r2, r2, #31
 800997a:	d501      	bpl.n	8009980 <_printf_float+0x16c>
 800997c:	3301      	adds	r3, #1
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009984:	2b00      	cmp	r3, #0
 8009986:	d09c      	beq.n	80098c2 <_printf_float+0xae>
 8009988:	232d      	movs	r3, #45	; 0x2d
 800998a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800998e:	e798      	b.n	80098c2 <_printf_float+0xae>
 8009990:	9a06      	ldr	r2, [sp, #24]
 8009992:	2a47      	cmp	r2, #71	; 0x47
 8009994:	d1be      	bne.n	8009914 <_printf_float+0x100>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1bc      	bne.n	8009914 <_printf_float+0x100>
 800999a:	2301      	movs	r3, #1
 800999c:	e7b9      	b.n	8009912 <_printf_float+0xfe>
 800999e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80099a2:	d118      	bne.n	80099d6 <_printf_float+0x1c2>
 80099a4:	2900      	cmp	r1, #0
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	dd0b      	ble.n	80099c2 <_printf_float+0x1ae>
 80099aa:	6121      	str	r1, [r4, #16]
 80099ac:	b913      	cbnz	r3, 80099b4 <_printf_float+0x1a0>
 80099ae:	6822      	ldr	r2, [r4, #0]
 80099b0:	07d0      	lsls	r0, r2, #31
 80099b2:	d502      	bpl.n	80099ba <_printf_float+0x1a6>
 80099b4:	3301      	adds	r3, #1
 80099b6:	440b      	add	r3, r1
 80099b8:	6123      	str	r3, [r4, #16]
 80099ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80099bc:	f04f 0900 	mov.w	r9, #0
 80099c0:	e7de      	b.n	8009980 <_printf_float+0x16c>
 80099c2:	b913      	cbnz	r3, 80099ca <_printf_float+0x1b6>
 80099c4:	6822      	ldr	r2, [r4, #0]
 80099c6:	07d2      	lsls	r2, r2, #31
 80099c8:	d501      	bpl.n	80099ce <_printf_float+0x1ba>
 80099ca:	3302      	adds	r3, #2
 80099cc:	e7f4      	b.n	80099b8 <_printf_float+0x1a4>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e7f2      	b.n	80099b8 <_printf_float+0x1a4>
 80099d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d8:	4299      	cmp	r1, r3
 80099da:	db05      	blt.n	80099e8 <_printf_float+0x1d4>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	6121      	str	r1, [r4, #16]
 80099e0:	07d8      	lsls	r0, r3, #31
 80099e2:	d5ea      	bpl.n	80099ba <_printf_float+0x1a6>
 80099e4:	1c4b      	adds	r3, r1, #1
 80099e6:	e7e7      	b.n	80099b8 <_printf_float+0x1a4>
 80099e8:	2900      	cmp	r1, #0
 80099ea:	bfd4      	ite	le
 80099ec:	f1c1 0202 	rsble	r2, r1, #2
 80099f0:	2201      	movgt	r2, #1
 80099f2:	4413      	add	r3, r2
 80099f4:	e7e0      	b.n	80099b8 <_printf_float+0x1a4>
 80099f6:	6823      	ldr	r3, [r4, #0]
 80099f8:	055a      	lsls	r2, r3, #21
 80099fa:	d407      	bmi.n	8009a0c <_printf_float+0x1f8>
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	4642      	mov	r2, r8
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	d12c      	bne.n	8009a64 <_printf_float+0x250>
 8009a0a:	e764      	b.n	80098d6 <_printf_float+0xc2>
 8009a0c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a10:	f240 80e0 	bls.w	8009bd4 <_printf_float+0x3c0>
 8009a14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a18:	2200      	movs	r2, #0
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f7f7 f86c 	bl	8000af8 <__aeabi_dcmpeq>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d034      	beq.n	8009a8e <_printf_float+0x27a>
 8009a24:	4a37      	ldr	r2, [pc, #220]	; (8009b04 <_printf_float+0x2f0>)
 8009a26:	2301      	movs	r3, #1
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	f43f af51 	beq.w	80098d6 <_printf_float+0xc2>
 8009a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	db02      	blt.n	8009a42 <_printf_float+0x22e>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	07d8      	lsls	r0, r3, #31
 8009a40:	d510      	bpl.n	8009a64 <_printf_float+0x250>
 8009a42:	ee18 3a10 	vmov	r3, s16
 8009a46:	4652      	mov	r2, sl
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b8      	blx	r7
 8009a4e:	3001      	adds	r0, #1
 8009a50:	f43f af41 	beq.w	80098d6 <_printf_float+0xc2>
 8009a54:	f04f 0800 	mov.w	r8, #0
 8009a58:	f104 091a 	add.w	r9, r4, #26
 8009a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	4543      	cmp	r3, r8
 8009a62:	dc09      	bgt.n	8009a78 <_printf_float+0x264>
 8009a64:	6823      	ldr	r3, [r4, #0]
 8009a66:	079b      	lsls	r3, r3, #30
 8009a68:	f100 8105 	bmi.w	8009c76 <_printf_float+0x462>
 8009a6c:	68e0      	ldr	r0, [r4, #12]
 8009a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a70:	4298      	cmp	r0, r3
 8009a72:	bfb8      	it	lt
 8009a74:	4618      	movlt	r0, r3
 8009a76:	e730      	b.n	80098da <_printf_float+0xc6>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	464a      	mov	r2, r9
 8009a7c:	4631      	mov	r1, r6
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47b8      	blx	r7
 8009a82:	3001      	adds	r0, #1
 8009a84:	f43f af27 	beq.w	80098d6 <_printf_float+0xc2>
 8009a88:	f108 0801 	add.w	r8, r8, #1
 8009a8c:	e7e6      	b.n	8009a5c <_printf_float+0x248>
 8009a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	dc39      	bgt.n	8009b08 <_printf_float+0x2f4>
 8009a94:	4a1b      	ldr	r2, [pc, #108]	; (8009b04 <_printf_float+0x2f0>)
 8009a96:	2301      	movs	r3, #1
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	47b8      	blx	r7
 8009a9e:	3001      	adds	r0, #1
 8009aa0:	f43f af19 	beq.w	80098d6 <_printf_float+0xc2>
 8009aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	d102      	bne.n	8009ab2 <_printf_float+0x29e>
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	07d9      	lsls	r1, r3, #31
 8009ab0:	d5d8      	bpl.n	8009a64 <_printf_float+0x250>
 8009ab2:	ee18 3a10 	vmov	r3, s16
 8009ab6:	4652      	mov	r2, sl
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4628      	mov	r0, r5
 8009abc:	47b8      	blx	r7
 8009abe:	3001      	adds	r0, #1
 8009ac0:	f43f af09 	beq.w	80098d6 <_printf_float+0xc2>
 8009ac4:	f04f 0900 	mov.w	r9, #0
 8009ac8:	f104 0a1a 	add.w	sl, r4, #26
 8009acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ace:	425b      	negs	r3, r3
 8009ad0:	454b      	cmp	r3, r9
 8009ad2:	dc01      	bgt.n	8009ad8 <_printf_float+0x2c4>
 8009ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad6:	e792      	b.n	80099fe <_printf_float+0x1ea>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4652      	mov	r2, sl
 8009adc:	4631      	mov	r1, r6
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f43f aef7 	beq.w	80098d6 <_printf_float+0xc2>
 8009ae8:	f109 0901 	add.w	r9, r9, #1
 8009aec:	e7ee      	b.n	8009acc <_printf_float+0x2b8>
 8009aee:	bf00      	nop
 8009af0:	7fefffff 	.word	0x7fefffff
 8009af4:	0800f7ec 	.word	0x0800f7ec
 8009af8:	0800f7f0 	.word	0x0800f7f0
 8009afc:	0800f7f8 	.word	0x0800f7f8
 8009b00:	0800f7f4 	.word	0x0800f7f4
 8009b04:	0800fc59 	.word	0x0800fc59
 8009b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	bfa8      	it	ge
 8009b10:	461a      	movge	r2, r3
 8009b12:	2a00      	cmp	r2, #0
 8009b14:	4691      	mov	r9, r2
 8009b16:	dc37      	bgt.n	8009b88 <_printf_float+0x374>
 8009b18:	f04f 0b00 	mov.w	fp, #0
 8009b1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b20:	f104 021a 	add.w	r2, r4, #26
 8009b24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b26:	9305      	str	r3, [sp, #20]
 8009b28:	eba3 0309 	sub.w	r3, r3, r9
 8009b2c:	455b      	cmp	r3, fp
 8009b2e:	dc33      	bgt.n	8009b98 <_printf_float+0x384>
 8009b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b34:	429a      	cmp	r2, r3
 8009b36:	db3b      	blt.n	8009bb0 <_printf_float+0x39c>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	07da      	lsls	r2, r3, #31
 8009b3c:	d438      	bmi.n	8009bb0 <_printf_float+0x39c>
 8009b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b40:	9a05      	ldr	r2, [sp, #20]
 8009b42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b44:	1a9a      	subs	r2, r3, r2
 8009b46:	eba3 0901 	sub.w	r9, r3, r1
 8009b4a:	4591      	cmp	r9, r2
 8009b4c:	bfa8      	it	ge
 8009b4e:	4691      	movge	r9, r2
 8009b50:	f1b9 0f00 	cmp.w	r9, #0
 8009b54:	dc35      	bgt.n	8009bc2 <_printf_float+0x3ae>
 8009b56:	f04f 0800 	mov.w	r8, #0
 8009b5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b5e:	f104 0a1a 	add.w	sl, r4, #26
 8009b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b66:	1a9b      	subs	r3, r3, r2
 8009b68:	eba3 0309 	sub.w	r3, r3, r9
 8009b6c:	4543      	cmp	r3, r8
 8009b6e:	f77f af79 	ble.w	8009a64 <_printf_float+0x250>
 8009b72:	2301      	movs	r3, #1
 8009b74:	4652      	mov	r2, sl
 8009b76:	4631      	mov	r1, r6
 8009b78:	4628      	mov	r0, r5
 8009b7a:	47b8      	blx	r7
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	f43f aeaa 	beq.w	80098d6 <_printf_float+0xc2>
 8009b82:	f108 0801 	add.w	r8, r8, #1
 8009b86:	e7ec      	b.n	8009b62 <_printf_float+0x34e>
 8009b88:	4613      	mov	r3, r2
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4642      	mov	r2, r8
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	d1c0      	bne.n	8009b18 <_printf_float+0x304>
 8009b96:	e69e      	b.n	80098d6 <_printf_float+0xc2>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	9205      	str	r2, [sp, #20]
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f ae97 	beq.w	80098d6 <_printf_float+0xc2>
 8009ba8:	9a05      	ldr	r2, [sp, #20]
 8009baa:	f10b 0b01 	add.w	fp, fp, #1
 8009bae:	e7b9      	b.n	8009b24 <_printf_float+0x310>
 8009bb0:	ee18 3a10 	vmov	r3, s16
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	4631      	mov	r1, r6
 8009bb8:	4628      	mov	r0, r5
 8009bba:	47b8      	blx	r7
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d1be      	bne.n	8009b3e <_printf_float+0x32a>
 8009bc0:	e689      	b.n	80098d6 <_printf_float+0xc2>
 8009bc2:	9a05      	ldr	r2, [sp, #20]
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	4442      	add	r2, r8
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	d1c1      	bne.n	8009b56 <_printf_float+0x342>
 8009bd2:	e680      	b.n	80098d6 <_printf_float+0xc2>
 8009bd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bd6:	2a01      	cmp	r2, #1
 8009bd8:	dc01      	bgt.n	8009bde <_printf_float+0x3ca>
 8009bda:	07db      	lsls	r3, r3, #31
 8009bdc:	d538      	bpl.n	8009c50 <_printf_float+0x43c>
 8009bde:	2301      	movs	r3, #1
 8009be0:	4642      	mov	r2, r8
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	f43f ae74 	beq.w	80098d6 <_printf_float+0xc2>
 8009bee:	ee18 3a10 	vmov	r3, s16
 8009bf2:	4652      	mov	r2, sl
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f ae6b 	beq.w	80098d6 <_printf_float+0xc2>
 8009c00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	f7f6 ff76 	bl	8000af8 <__aeabi_dcmpeq>
 8009c0c:	b9d8      	cbnz	r0, 8009c46 <_printf_float+0x432>
 8009c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c10:	f108 0201 	add.w	r2, r8, #1
 8009c14:	3b01      	subs	r3, #1
 8009c16:	4631      	mov	r1, r6
 8009c18:	4628      	mov	r0, r5
 8009c1a:	47b8      	blx	r7
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d10e      	bne.n	8009c3e <_printf_float+0x42a>
 8009c20:	e659      	b.n	80098d6 <_printf_float+0xc2>
 8009c22:	2301      	movs	r3, #1
 8009c24:	4652      	mov	r2, sl
 8009c26:	4631      	mov	r1, r6
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b8      	blx	r7
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	f43f ae52 	beq.w	80098d6 <_printf_float+0xc2>
 8009c32:	f108 0801 	add.w	r8, r8, #1
 8009c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	4543      	cmp	r3, r8
 8009c3c:	dcf1      	bgt.n	8009c22 <_printf_float+0x40e>
 8009c3e:	464b      	mov	r3, r9
 8009c40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c44:	e6dc      	b.n	8009a00 <_printf_float+0x1ec>
 8009c46:	f04f 0800 	mov.w	r8, #0
 8009c4a:	f104 0a1a 	add.w	sl, r4, #26
 8009c4e:	e7f2      	b.n	8009c36 <_printf_float+0x422>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4642      	mov	r2, r8
 8009c54:	e7df      	b.n	8009c16 <_printf_float+0x402>
 8009c56:	2301      	movs	r3, #1
 8009c58:	464a      	mov	r2, r9
 8009c5a:	4631      	mov	r1, r6
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	f43f ae38 	beq.w	80098d6 <_printf_float+0xc2>
 8009c66:	f108 0801 	add.w	r8, r8, #1
 8009c6a:	68e3      	ldr	r3, [r4, #12]
 8009c6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c6e:	1a5b      	subs	r3, r3, r1
 8009c70:	4543      	cmp	r3, r8
 8009c72:	dcf0      	bgt.n	8009c56 <_printf_float+0x442>
 8009c74:	e6fa      	b.n	8009a6c <_printf_float+0x258>
 8009c76:	f04f 0800 	mov.w	r8, #0
 8009c7a:	f104 0919 	add.w	r9, r4, #25
 8009c7e:	e7f4      	b.n	8009c6a <_printf_float+0x456>

08009c80 <_printf_common>:
 8009c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	4616      	mov	r6, r2
 8009c86:	4699      	mov	r9, r3
 8009c88:	688a      	ldr	r2, [r1, #8]
 8009c8a:	690b      	ldr	r3, [r1, #16]
 8009c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c90:	4293      	cmp	r3, r2
 8009c92:	bfb8      	it	lt
 8009c94:	4613      	movlt	r3, r2
 8009c96:	6033      	str	r3, [r6, #0]
 8009c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	b10a      	cbz	r2, 8009ca6 <_printf_common+0x26>
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	6033      	str	r3, [r6, #0]
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	0699      	lsls	r1, r3, #26
 8009caa:	bf42      	ittt	mi
 8009cac:	6833      	ldrmi	r3, [r6, #0]
 8009cae:	3302      	addmi	r3, #2
 8009cb0:	6033      	strmi	r3, [r6, #0]
 8009cb2:	6825      	ldr	r5, [r4, #0]
 8009cb4:	f015 0506 	ands.w	r5, r5, #6
 8009cb8:	d106      	bne.n	8009cc8 <_printf_common+0x48>
 8009cba:	f104 0a19 	add.w	sl, r4, #25
 8009cbe:	68e3      	ldr	r3, [r4, #12]
 8009cc0:	6832      	ldr	r2, [r6, #0]
 8009cc2:	1a9b      	subs	r3, r3, r2
 8009cc4:	42ab      	cmp	r3, r5
 8009cc6:	dc26      	bgt.n	8009d16 <_printf_common+0x96>
 8009cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ccc:	1e13      	subs	r3, r2, #0
 8009cce:	6822      	ldr	r2, [r4, #0]
 8009cd0:	bf18      	it	ne
 8009cd2:	2301      	movne	r3, #1
 8009cd4:	0692      	lsls	r2, r2, #26
 8009cd6:	d42b      	bmi.n	8009d30 <_printf_common+0xb0>
 8009cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4638      	mov	r0, r7
 8009ce0:	47c0      	blx	r8
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d01e      	beq.n	8009d24 <_printf_common+0xa4>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	68e5      	ldr	r5, [r4, #12]
 8009cea:	6832      	ldr	r2, [r6, #0]
 8009cec:	f003 0306 	and.w	r3, r3, #6
 8009cf0:	2b04      	cmp	r3, #4
 8009cf2:	bf08      	it	eq
 8009cf4:	1aad      	subeq	r5, r5, r2
 8009cf6:	68a3      	ldr	r3, [r4, #8]
 8009cf8:	6922      	ldr	r2, [r4, #16]
 8009cfa:	bf0c      	ite	eq
 8009cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d00:	2500      	movne	r5, #0
 8009d02:	4293      	cmp	r3, r2
 8009d04:	bfc4      	itt	gt
 8009d06:	1a9b      	subgt	r3, r3, r2
 8009d08:	18ed      	addgt	r5, r5, r3
 8009d0a:	2600      	movs	r6, #0
 8009d0c:	341a      	adds	r4, #26
 8009d0e:	42b5      	cmp	r5, r6
 8009d10:	d11a      	bne.n	8009d48 <_printf_common+0xc8>
 8009d12:	2000      	movs	r0, #0
 8009d14:	e008      	b.n	8009d28 <_printf_common+0xa8>
 8009d16:	2301      	movs	r3, #1
 8009d18:	4652      	mov	r2, sl
 8009d1a:	4649      	mov	r1, r9
 8009d1c:	4638      	mov	r0, r7
 8009d1e:	47c0      	blx	r8
 8009d20:	3001      	adds	r0, #1
 8009d22:	d103      	bne.n	8009d2c <_printf_common+0xac>
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2c:	3501      	adds	r5, #1
 8009d2e:	e7c6      	b.n	8009cbe <_printf_common+0x3e>
 8009d30:	18e1      	adds	r1, r4, r3
 8009d32:	1c5a      	adds	r2, r3, #1
 8009d34:	2030      	movs	r0, #48	; 0x30
 8009d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d3a:	4422      	add	r2, r4
 8009d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d44:	3302      	adds	r3, #2
 8009d46:	e7c7      	b.n	8009cd8 <_printf_common+0x58>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	4622      	mov	r2, r4
 8009d4c:	4649      	mov	r1, r9
 8009d4e:	4638      	mov	r0, r7
 8009d50:	47c0      	blx	r8
 8009d52:	3001      	adds	r0, #1
 8009d54:	d0e6      	beq.n	8009d24 <_printf_common+0xa4>
 8009d56:	3601      	adds	r6, #1
 8009d58:	e7d9      	b.n	8009d0e <_printf_common+0x8e>
	...

08009d5c <_printf_i>:
 8009d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d60:	7e0f      	ldrb	r7, [r1, #24]
 8009d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d64:	2f78      	cmp	r7, #120	; 0x78
 8009d66:	4691      	mov	r9, r2
 8009d68:	4680      	mov	r8, r0
 8009d6a:	460c      	mov	r4, r1
 8009d6c:	469a      	mov	sl, r3
 8009d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d72:	d807      	bhi.n	8009d84 <_printf_i+0x28>
 8009d74:	2f62      	cmp	r7, #98	; 0x62
 8009d76:	d80a      	bhi.n	8009d8e <_printf_i+0x32>
 8009d78:	2f00      	cmp	r7, #0
 8009d7a:	f000 80d8 	beq.w	8009f2e <_printf_i+0x1d2>
 8009d7e:	2f58      	cmp	r7, #88	; 0x58
 8009d80:	f000 80a3 	beq.w	8009eca <_printf_i+0x16e>
 8009d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d8c:	e03a      	b.n	8009e04 <_printf_i+0xa8>
 8009d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d92:	2b15      	cmp	r3, #21
 8009d94:	d8f6      	bhi.n	8009d84 <_printf_i+0x28>
 8009d96:	a101      	add	r1, pc, #4	; (adr r1, 8009d9c <_printf_i+0x40>)
 8009d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d9c:	08009df5 	.word	0x08009df5
 8009da0:	08009e09 	.word	0x08009e09
 8009da4:	08009d85 	.word	0x08009d85
 8009da8:	08009d85 	.word	0x08009d85
 8009dac:	08009d85 	.word	0x08009d85
 8009db0:	08009d85 	.word	0x08009d85
 8009db4:	08009e09 	.word	0x08009e09
 8009db8:	08009d85 	.word	0x08009d85
 8009dbc:	08009d85 	.word	0x08009d85
 8009dc0:	08009d85 	.word	0x08009d85
 8009dc4:	08009d85 	.word	0x08009d85
 8009dc8:	08009f15 	.word	0x08009f15
 8009dcc:	08009e39 	.word	0x08009e39
 8009dd0:	08009ef7 	.word	0x08009ef7
 8009dd4:	08009d85 	.word	0x08009d85
 8009dd8:	08009d85 	.word	0x08009d85
 8009ddc:	08009f37 	.word	0x08009f37
 8009de0:	08009d85 	.word	0x08009d85
 8009de4:	08009e39 	.word	0x08009e39
 8009de8:	08009d85 	.word	0x08009d85
 8009dec:	08009d85 	.word	0x08009d85
 8009df0:	08009eff 	.word	0x08009eff
 8009df4:	682b      	ldr	r3, [r5, #0]
 8009df6:	1d1a      	adds	r2, r3, #4
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	602a      	str	r2, [r5, #0]
 8009dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e04:	2301      	movs	r3, #1
 8009e06:	e0a3      	b.n	8009f50 <_printf_i+0x1f4>
 8009e08:	6820      	ldr	r0, [r4, #0]
 8009e0a:	6829      	ldr	r1, [r5, #0]
 8009e0c:	0606      	lsls	r6, r0, #24
 8009e0e:	f101 0304 	add.w	r3, r1, #4
 8009e12:	d50a      	bpl.n	8009e2a <_printf_i+0xce>
 8009e14:	680e      	ldr	r6, [r1, #0]
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	2e00      	cmp	r6, #0
 8009e1a:	da03      	bge.n	8009e24 <_printf_i+0xc8>
 8009e1c:	232d      	movs	r3, #45	; 0x2d
 8009e1e:	4276      	negs	r6, r6
 8009e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e24:	485e      	ldr	r0, [pc, #376]	; (8009fa0 <_printf_i+0x244>)
 8009e26:	230a      	movs	r3, #10
 8009e28:	e019      	b.n	8009e5e <_printf_i+0x102>
 8009e2a:	680e      	ldr	r6, [r1, #0]
 8009e2c:	602b      	str	r3, [r5, #0]
 8009e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e32:	bf18      	it	ne
 8009e34:	b236      	sxthne	r6, r6
 8009e36:	e7ef      	b.n	8009e18 <_printf_i+0xbc>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	6820      	ldr	r0, [r4, #0]
 8009e3c:	1d19      	adds	r1, r3, #4
 8009e3e:	6029      	str	r1, [r5, #0]
 8009e40:	0601      	lsls	r1, r0, #24
 8009e42:	d501      	bpl.n	8009e48 <_printf_i+0xec>
 8009e44:	681e      	ldr	r6, [r3, #0]
 8009e46:	e002      	b.n	8009e4e <_printf_i+0xf2>
 8009e48:	0646      	lsls	r6, r0, #25
 8009e4a:	d5fb      	bpl.n	8009e44 <_printf_i+0xe8>
 8009e4c:	881e      	ldrh	r6, [r3, #0]
 8009e4e:	4854      	ldr	r0, [pc, #336]	; (8009fa0 <_printf_i+0x244>)
 8009e50:	2f6f      	cmp	r7, #111	; 0x6f
 8009e52:	bf0c      	ite	eq
 8009e54:	2308      	moveq	r3, #8
 8009e56:	230a      	movne	r3, #10
 8009e58:	2100      	movs	r1, #0
 8009e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e5e:	6865      	ldr	r5, [r4, #4]
 8009e60:	60a5      	str	r5, [r4, #8]
 8009e62:	2d00      	cmp	r5, #0
 8009e64:	bfa2      	ittt	ge
 8009e66:	6821      	ldrge	r1, [r4, #0]
 8009e68:	f021 0104 	bicge.w	r1, r1, #4
 8009e6c:	6021      	strge	r1, [r4, #0]
 8009e6e:	b90e      	cbnz	r6, 8009e74 <_printf_i+0x118>
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	d04d      	beq.n	8009f10 <_printf_i+0x1b4>
 8009e74:	4615      	mov	r5, r2
 8009e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8009e7e:	5dc7      	ldrb	r7, [r0, r7]
 8009e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e84:	4637      	mov	r7, r6
 8009e86:	42bb      	cmp	r3, r7
 8009e88:	460e      	mov	r6, r1
 8009e8a:	d9f4      	bls.n	8009e76 <_printf_i+0x11a>
 8009e8c:	2b08      	cmp	r3, #8
 8009e8e:	d10b      	bne.n	8009ea8 <_printf_i+0x14c>
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	07de      	lsls	r6, r3, #31
 8009e94:	d508      	bpl.n	8009ea8 <_printf_i+0x14c>
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	6861      	ldr	r1, [r4, #4]
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	bfde      	ittt	le
 8009e9e:	2330      	movle	r3, #48	; 0x30
 8009ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ea4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ea8:	1b52      	subs	r2, r2, r5
 8009eaa:	6122      	str	r2, [r4, #16]
 8009eac:	f8cd a000 	str.w	sl, [sp]
 8009eb0:	464b      	mov	r3, r9
 8009eb2:	aa03      	add	r2, sp, #12
 8009eb4:	4621      	mov	r1, r4
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	f7ff fee2 	bl	8009c80 <_printf_common>
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d14c      	bne.n	8009f5a <_printf_i+0x1fe>
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ec4:	b004      	add	sp, #16
 8009ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eca:	4835      	ldr	r0, [pc, #212]	; (8009fa0 <_printf_i+0x244>)
 8009ecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ed0:	6829      	ldr	r1, [r5, #0]
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ed8:	6029      	str	r1, [r5, #0]
 8009eda:	061d      	lsls	r5, r3, #24
 8009edc:	d514      	bpl.n	8009f08 <_printf_i+0x1ac>
 8009ede:	07df      	lsls	r7, r3, #31
 8009ee0:	bf44      	itt	mi
 8009ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8009ee6:	6023      	strmi	r3, [r4, #0]
 8009ee8:	b91e      	cbnz	r6, 8009ef2 <_printf_i+0x196>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	f023 0320 	bic.w	r3, r3, #32
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	2310      	movs	r3, #16
 8009ef4:	e7b0      	b.n	8009e58 <_printf_i+0xfc>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	f043 0320 	orr.w	r3, r3, #32
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	2378      	movs	r3, #120	; 0x78
 8009f00:	4828      	ldr	r0, [pc, #160]	; (8009fa4 <_printf_i+0x248>)
 8009f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f06:	e7e3      	b.n	8009ed0 <_printf_i+0x174>
 8009f08:	0659      	lsls	r1, r3, #25
 8009f0a:	bf48      	it	mi
 8009f0c:	b2b6      	uxthmi	r6, r6
 8009f0e:	e7e6      	b.n	8009ede <_printf_i+0x182>
 8009f10:	4615      	mov	r5, r2
 8009f12:	e7bb      	b.n	8009e8c <_printf_i+0x130>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	6826      	ldr	r6, [r4, #0]
 8009f18:	6961      	ldr	r1, [r4, #20]
 8009f1a:	1d18      	adds	r0, r3, #4
 8009f1c:	6028      	str	r0, [r5, #0]
 8009f1e:	0635      	lsls	r5, r6, #24
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	d501      	bpl.n	8009f28 <_printf_i+0x1cc>
 8009f24:	6019      	str	r1, [r3, #0]
 8009f26:	e002      	b.n	8009f2e <_printf_i+0x1d2>
 8009f28:	0670      	lsls	r0, r6, #25
 8009f2a:	d5fb      	bpl.n	8009f24 <_printf_i+0x1c8>
 8009f2c:	8019      	strh	r1, [r3, #0]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	6123      	str	r3, [r4, #16]
 8009f32:	4615      	mov	r5, r2
 8009f34:	e7ba      	b.n	8009eac <_printf_i+0x150>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	1d1a      	adds	r2, r3, #4
 8009f3a:	602a      	str	r2, [r5, #0]
 8009f3c:	681d      	ldr	r5, [r3, #0]
 8009f3e:	6862      	ldr	r2, [r4, #4]
 8009f40:	2100      	movs	r1, #0
 8009f42:	4628      	mov	r0, r5
 8009f44:	f7f6 f964 	bl	8000210 <memchr>
 8009f48:	b108      	cbz	r0, 8009f4e <_printf_i+0x1f2>
 8009f4a:	1b40      	subs	r0, r0, r5
 8009f4c:	6060      	str	r0, [r4, #4]
 8009f4e:	6863      	ldr	r3, [r4, #4]
 8009f50:	6123      	str	r3, [r4, #16]
 8009f52:	2300      	movs	r3, #0
 8009f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f58:	e7a8      	b.n	8009eac <_printf_i+0x150>
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	462a      	mov	r2, r5
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4640      	mov	r0, r8
 8009f62:	47d0      	blx	sl
 8009f64:	3001      	adds	r0, #1
 8009f66:	d0ab      	beq.n	8009ec0 <_printf_i+0x164>
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	079b      	lsls	r3, r3, #30
 8009f6c:	d413      	bmi.n	8009f96 <_printf_i+0x23a>
 8009f6e:	68e0      	ldr	r0, [r4, #12]
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	4298      	cmp	r0, r3
 8009f74:	bfb8      	it	lt
 8009f76:	4618      	movlt	r0, r3
 8009f78:	e7a4      	b.n	8009ec4 <_printf_i+0x168>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4640      	mov	r0, r8
 8009f82:	47d0      	blx	sl
 8009f84:	3001      	adds	r0, #1
 8009f86:	d09b      	beq.n	8009ec0 <_printf_i+0x164>
 8009f88:	3501      	adds	r5, #1
 8009f8a:	68e3      	ldr	r3, [r4, #12]
 8009f8c:	9903      	ldr	r1, [sp, #12]
 8009f8e:	1a5b      	subs	r3, r3, r1
 8009f90:	42ab      	cmp	r3, r5
 8009f92:	dcf2      	bgt.n	8009f7a <_printf_i+0x21e>
 8009f94:	e7eb      	b.n	8009f6e <_printf_i+0x212>
 8009f96:	2500      	movs	r5, #0
 8009f98:	f104 0619 	add.w	r6, r4, #25
 8009f9c:	e7f5      	b.n	8009f8a <_printf_i+0x22e>
 8009f9e:	bf00      	nop
 8009fa0:	0800f7fc 	.word	0x0800f7fc
 8009fa4:	0800f80d 	.word	0x0800f80d

08009fa8 <_scanf_float>:
 8009fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fac:	b087      	sub	sp, #28
 8009fae:	4617      	mov	r7, r2
 8009fb0:	9303      	str	r3, [sp, #12]
 8009fb2:	688b      	ldr	r3, [r1, #8]
 8009fb4:	1e5a      	subs	r2, r3, #1
 8009fb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009fba:	bf83      	ittte	hi
 8009fbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009fc0:	195b      	addhi	r3, r3, r5
 8009fc2:	9302      	strhi	r3, [sp, #8]
 8009fc4:	2300      	movls	r3, #0
 8009fc6:	bf86      	itte	hi
 8009fc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009fcc:	608b      	strhi	r3, [r1, #8]
 8009fce:	9302      	strls	r3, [sp, #8]
 8009fd0:	680b      	ldr	r3, [r1, #0]
 8009fd2:	468b      	mov	fp, r1
 8009fd4:	2500      	movs	r5, #0
 8009fd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009fda:	f84b 3b1c 	str.w	r3, [fp], #28
 8009fde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	465e      	mov	r6, fp
 8009fe8:	46aa      	mov	sl, r5
 8009fea:	46a9      	mov	r9, r5
 8009fec:	9501      	str	r5, [sp, #4]
 8009fee:	68a2      	ldr	r2, [r4, #8]
 8009ff0:	b152      	cbz	r2, 800a008 <_scanf_float+0x60>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b4e      	cmp	r3, #78	; 0x4e
 8009ff8:	d864      	bhi.n	800a0c4 <_scanf_float+0x11c>
 8009ffa:	2b40      	cmp	r3, #64	; 0x40
 8009ffc:	d83c      	bhi.n	800a078 <_scanf_float+0xd0>
 8009ffe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a002:	b2c8      	uxtb	r0, r1
 800a004:	280e      	cmp	r0, #14
 800a006:	d93a      	bls.n	800a07e <_scanf_float+0xd6>
 800a008:	f1b9 0f00 	cmp.w	r9, #0
 800a00c:	d003      	beq.n	800a016 <_scanf_float+0x6e>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a01a:	f1ba 0f01 	cmp.w	sl, #1
 800a01e:	f200 8113 	bhi.w	800a248 <_scanf_float+0x2a0>
 800a022:	455e      	cmp	r6, fp
 800a024:	f200 8105 	bhi.w	800a232 <_scanf_float+0x28a>
 800a028:	2501      	movs	r5, #1
 800a02a:	4628      	mov	r0, r5
 800a02c:	b007      	add	sp, #28
 800a02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a032:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a036:	2a0d      	cmp	r2, #13
 800a038:	d8e6      	bhi.n	800a008 <_scanf_float+0x60>
 800a03a:	a101      	add	r1, pc, #4	; (adr r1, 800a040 <_scanf_float+0x98>)
 800a03c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a040:	0800a17f 	.word	0x0800a17f
 800a044:	0800a009 	.word	0x0800a009
 800a048:	0800a009 	.word	0x0800a009
 800a04c:	0800a009 	.word	0x0800a009
 800a050:	0800a1df 	.word	0x0800a1df
 800a054:	0800a1b7 	.word	0x0800a1b7
 800a058:	0800a009 	.word	0x0800a009
 800a05c:	0800a009 	.word	0x0800a009
 800a060:	0800a18d 	.word	0x0800a18d
 800a064:	0800a009 	.word	0x0800a009
 800a068:	0800a009 	.word	0x0800a009
 800a06c:	0800a009 	.word	0x0800a009
 800a070:	0800a009 	.word	0x0800a009
 800a074:	0800a145 	.word	0x0800a145
 800a078:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a07c:	e7db      	b.n	800a036 <_scanf_float+0x8e>
 800a07e:	290e      	cmp	r1, #14
 800a080:	d8c2      	bhi.n	800a008 <_scanf_float+0x60>
 800a082:	a001      	add	r0, pc, #4	; (adr r0, 800a088 <_scanf_float+0xe0>)
 800a084:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a088:	0800a137 	.word	0x0800a137
 800a08c:	0800a009 	.word	0x0800a009
 800a090:	0800a137 	.word	0x0800a137
 800a094:	0800a1cb 	.word	0x0800a1cb
 800a098:	0800a009 	.word	0x0800a009
 800a09c:	0800a0e5 	.word	0x0800a0e5
 800a0a0:	0800a121 	.word	0x0800a121
 800a0a4:	0800a121 	.word	0x0800a121
 800a0a8:	0800a121 	.word	0x0800a121
 800a0ac:	0800a121 	.word	0x0800a121
 800a0b0:	0800a121 	.word	0x0800a121
 800a0b4:	0800a121 	.word	0x0800a121
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a121 	.word	0x0800a121
 800a0c0:	0800a121 	.word	0x0800a121
 800a0c4:	2b6e      	cmp	r3, #110	; 0x6e
 800a0c6:	d809      	bhi.n	800a0dc <_scanf_float+0x134>
 800a0c8:	2b60      	cmp	r3, #96	; 0x60
 800a0ca:	d8b2      	bhi.n	800a032 <_scanf_float+0x8a>
 800a0cc:	2b54      	cmp	r3, #84	; 0x54
 800a0ce:	d077      	beq.n	800a1c0 <_scanf_float+0x218>
 800a0d0:	2b59      	cmp	r3, #89	; 0x59
 800a0d2:	d199      	bne.n	800a008 <_scanf_float+0x60>
 800a0d4:	2d07      	cmp	r5, #7
 800a0d6:	d197      	bne.n	800a008 <_scanf_float+0x60>
 800a0d8:	2508      	movs	r5, #8
 800a0da:	e029      	b.n	800a130 <_scanf_float+0x188>
 800a0dc:	2b74      	cmp	r3, #116	; 0x74
 800a0de:	d06f      	beq.n	800a1c0 <_scanf_float+0x218>
 800a0e0:	2b79      	cmp	r3, #121	; 0x79
 800a0e2:	e7f6      	b.n	800a0d2 <_scanf_float+0x12a>
 800a0e4:	6821      	ldr	r1, [r4, #0]
 800a0e6:	05c8      	lsls	r0, r1, #23
 800a0e8:	d51a      	bpl.n	800a120 <_scanf_float+0x178>
 800a0ea:	9b02      	ldr	r3, [sp, #8]
 800a0ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0f0:	6021      	str	r1, [r4, #0]
 800a0f2:	f109 0901 	add.w	r9, r9, #1
 800a0f6:	b11b      	cbz	r3, 800a100 <_scanf_float+0x158>
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	9302      	str	r3, [sp, #8]
 800a0fe:	60a2      	str	r2, [r4, #8]
 800a100:	68a3      	ldr	r3, [r4, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	60a3      	str	r3, [r4, #8]
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	3301      	adds	r3, #1
 800a10a:	6123      	str	r3, [r4, #16]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	3b01      	subs	r3, #1
 800a110:	2b00      	cmp	r3, #0
 800a112:	607b      	str	r3, [r7, #4]
 800a114:	f340 8084 	ble.w	800a220 <_scanf_float+0x278>
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	603b      	str	r3, [r7, #0]
 800a11e:	e766      	b.n	8009fee <_scanf_float+0x46>
 800a120:	eb1a 0f05 	cmn.w	sl, r5
 800a124:	f47f af70 	bne.w	800a008 <_scanf_float+0x60>
 800a128:	6822      	ldr	r2, [r4, #0]
 800a12a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a12e:	6022      	str	r2, [r4, #0]
 800a130:	f806 3b01 	strb.w	r3, [r6], #1
 800a134:	e7e4      	b.n	800a100 <_scanf_float+0x158>
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	0610      	lsls	r0, r2, #24
 800a13a:	f57f af65 	bpl.w	800a008 <_scanf_float+0x60>
 800a13e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a142:	e7f4      	b.n	800a12e <_scanf_float+0x186>
 800a144:	f1ba 0f00 	cmp.w	sl, #0
 800a148:	d10e      	bne.n	800a168 <_scanf_float+0x1c0>
 800a14a:	f1b9 0f00 	cmp.w	r9, #0
 800a14e:	d10e      	bne.n	800a16e <_scanf_float+0x1c6>
 800a150:	6822      	ldr	r2, [r4, #0]
 800a152:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a15a:	d108      	bne.n	800a16e <_scanf_float+0x1c6>
 800a15c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a160:	6022      	str	r2, [r4, #0]
 800a162:	f04f 0a01 	mov.w	sl, #1
 800a166:	e7e3      	b.n	800a130 <_scanf_float+0x188>
 800a168:	f1ba 0f02 	cmp.w	sl, #2
 800a16c:	d055      	beq.n	800a21a <_scanf_float+0x272>
 800a16e:	2d01      	cmp	r5, #1
 800a170:	d002      	beq.n	800a178 <_scanf_float+0x1d0>
 800a172:	2d04      	cmp	r5, #4
 800a174:	f47f af48 	bne.w	800a008 <_scanf_float+0x60>
 800a178:	3501      	adds	r5, #1
 800a17a:	b2ed      	uxtb	r5, r5
 800a17c:	e7d8      	b.n	800a130 <_scanf_float+0x188>
 800a17e:	f1ba 0f01 	cmp.w	sl, #1
 800a182:	f47f af41 	bne.w	800a008 <_scanf_float+0x60>
 800a186:	f04f 0a02 	mov.w	sl, #2
 800a18a:	e7d1      	b.n	800a130 <_scanf_float+0x188>
 800a18c:	b97d      	cbnz	r5, 800a1ae <_scanf_float+0x206>
 800a18e:	f1b9 0f00 	cmp.w	r9, #0
 800a192:	f47f af3c 	bne.w	800a00e <_scanf_float+0x66>
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a19c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1a0:	f47f af39 	bne.w	800a016 <_scanf_float+0x6e>
 800a1a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1a8:	6022      	str	r2, [r4, #0]
 800a1aa:	2501      	movs	r5, #1
 800a1ac:	e7c0      	b.n	800a130 <_scanf_float+0x188>
 800a1ae:	2d03      	cmp	r5, #3
 800a1b0:	d0e2      	beq.n	800a178 <_scanf_float+0x1d0>
 800a1b2:	2d05      	cmp	r5, #5
 800a1b4:	e7de      	b.n	800a174 <_scanf_float+0x1cc>
 800a1b6:	2d02      	cmp	r5, #2
 800a1b8:	f47f af26 	bne.w	800a008 <_scanf_float+0x60>
 800a1bc:	2503      	movs	r5, #3
 800a1be:	e7b7      	b.n	800a130 <_scanf_float+0x188>
 800a1c0:	2d06      	cmp	r5, #6
 800a1c2:	f47f af21 	bne.w	800a008 <_scanf_float+0x60>
 800a1c6:	2507      	movs	r5, #7
 800a1c8:	e7b2      	b.n	800a130 <_scanf_float+0x188>
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	0591      	lsls	r1, r2, #22
 800a1ce:	f57f af1b 	bpl.w	800a008 <_scanf_float+0x60>
 800a1d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a1d6:	6022      	str	r2, [r4, #0]
 800a1d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1dc:	e7a8      	b.n	800a130 <_scanf_float+0x188>
 800a1de:	6822      	ldr	r2, [r4, #0]
 800a1e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a1e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a1e8:	d006      	beq.n	800a1f8 <_scanf_float+0x250>
 800a1ea:	0550      	lsls	r0, r2, #21
 800a1ec:	f57f af0c 	bpl.w	800a008 <_scanf_float+0x60>
 800a1f0:	f1b9 0f00 	cmp.w	r9, #0
 800a1f4:	f43f af0f 	beq.w	800a016 <_scanf_float+0x6e>
 800a1f8:	0591      	lsls	r1, r2, #22
 800a1fa:	bf58      	it	pl
 800a1fc:	9901      	ldrpl	r1, [sp, #4]
 800a1fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a202:	bf58      	it	pl
 800a204:	eba9 0101 	subpl.w	r1, r9, r1
 800a208:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a20c:	bf58      	it	pl
 800a20e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a212:	6022      	str	r2, [r4, #0]
 800a214:	f04f 0900 	mov.w	r9, #0
 800a218:	e78a      	b.n	800a130 <_scanf_float+0x188>
 800a21a:	f04f 0a03 	mov.w	sl, #3
 800a21e:	e787      	b.n	800a130 <_scanf_float+0x188>
 800a220:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a224:	4639      	mov	r1, r7
 800a226:	4640      	mov	r0, r8
 800a228:	4798      	blx	r3
 800a22a:	2800      	cmp	r0, #0
 800a22c:	f43f aedf 	beq.w	8009fee <_scanf_float+0x46>
 800a230:	e6ea      	b.n	800a008 <_scanf_float+0x60>
 800a232:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a236:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a23a:	463a      	mov	r2, r7
 800a23c:	4640      	mov	r0, r8
 800a23e:	4798      	blx	r3
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	3b01      	subs	r3, #1
 800a244:	6123      	str	r3, [r4, #16]
 800a246:	e6ec      	b.n	800a022 <_scanf_float+0x7a>
 800a248:	1e6b      	subs	r3, r5, #1
 800a24a:	2b06      	cmp	r3, #6
 800a24c:	d825      	bhi.n	800a29a <_scanf_float+0x2f2>
 800a24e:	2d02      	cmp	r5, #2
 800a250:	d836      	bhi.n	800a2c0 <_scanf_float+0x318>
 800a252:	455e      	cmp	r6, fp
 800a254:	f67f aee8 	bls.w	800a028 <_scanf_float+0x80>
 800a258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a25c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a260:	463a      	mov	r2, r7
 800a262:	4640      	mov	r0, r8
 800a264:	4798      	blx	r3
 800a266:	6923      	ldr	r3, [r4, #16]
 800a268:	3b01      	subs	r3, #1
 800a26a:	6123      	str	r3, [r4, #16]
 800a26c:	e7f1      	b.n	800a252 <_scanf_float+0x2aa>
 800a26e:	9802      	ldr	r0, [sp, #8]
 800a270:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a274:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a278:	9002      	str	r0, [sp, #8]
 800a27a:	463a      	mov	r2, r7
 800a27c:	4640      	mov	r0, r8
 800a27e:	4798      	blx	r3
 800a280:	6923      	ldr	r3, [r4, #16]
 800a282:	3b01      	subs	r3, #1
 800a284:	6123      	str	r3, [r4, #16]
 800a286:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a28a:	fa5f fa8a 	uxtb.w	sl, sl
 800a28e:	f1ba 0f02 	cmp.w	sl, #2
 800a292:	d1ec      	bne.n	800a26e <_scanf_float+0x2c6>
 800a294:	3d03      	subs	r5, #3
 800a296:	b2ed      	uxtb	r5, r5
 800a298:	1b76      	subs	r6, r6, r5
 800a29a:	6823      	ldr	r3, [r4, #0]
 800a29c:	05da      	lsls	r2, r3, #23
 800a29e:	d52f      	bpl.n	800a300 <_scanf_float+0x358>
 800a2a0:	055b      	lsls	r3, r3, #21
 800a2a2:	d510      	bpl.n	800a2c6 <_scanf_float+0x31e>
 800a2a4:	455e      	cmp	r6, fp
 800a2a6:	f67f aebf 	bls.w	800a028 <_scanf_float+0x80>
 800a2aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2b2:	463a      	mov	r2, r7
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	4798      	blx	r3
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	e7f1      	b.n	800a2a4 <_scanf_float+0x2fc>
 800a2c0:	46aa      	mov	sl, r5
 800a2c2:	9602      	str	r6, [sp, #8]
 800a2c4:	e7df      	b.n	800a286 <_scanf_float+0x2de>
 800a2c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a2ca:	6923      	ldr	r3, [r4, #16]
 800a2cc:	2965      	cmp	r1, #101	; 0x65
 800a2ce:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a2d2:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	d00c      	beq.n	800a2f4 <_scanf_float+0x34c>
 800a2da:	2945      	cmp	r1, #69	; 0x45
 800a2dc:	d00a      	beq.n	800a2f4 <_scanf_float+0x34c>
 800a2de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2e2:	463a      	mov	r2, r7
 800a2e4:	4640      	mov	r0, r8
 800a2e6:	4798      	blx	r3
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	1eb5      	subs	r5, r6, #2
 800a2f2:	6123      	str	r3, [r4, #16]
 800a2f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2f8:	463a      	mov	r2, r7
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	4798      	blx	r3
 800a2fe:	462e      	mov	r6, r5
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	f015 0510 	ands.w	r5, r5, #16
 800a306:	d159      	bne.n	800a3bc <_scanf_float+0x414>
 800a308:	7035      	strb	r5, [r6, #0]
 800a30a:	6823      	ldr	r3, [r4, #0]
 800a30c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a310:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a314:	d11b      	bne.n	800a34e <_scanf_float+0x3a6>
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	454b      	cmp	r3, r9
 800a31a:	eba3 0209 	sub.w	r2, r3, r9
 800a31e:	d123      	bne.n	800a368 <_scanf_float+0x3c0>
 800a320:	2200      	movs	r2, #0
 800a322:	4659      	mov	r1, fp
 800a324:	4640      	mov	r0, r8
 800a326:	f000 ffa5 	bl	800b274 <_strtod_r>
 800a32a:	6822      	ldr	r2, [r4, #0]
 800a32c:	9b03      	ldr	r3, [sp, #12]
 800a32e:	f012 0f02 	tst.w	r2, #2
 800a332:	ec57 6b10 	vmov	r6, r7, d0
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	d021      	beq.n	800a37e <_scanf_float+0x3d6>
 800a33a:	9903      	ldr	r1, [sp, #12]
 800a33c:	1d1a      	adds	r2, r3, #4
 800a33e:	600a      	str	r2, [r1, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	e9c3 6700 	strd	r6, r7, [r3]
 800a346:	68e3      	ldr	r3, [r4, #12]
 800a348:	3301      	adds	r3, #1
 800a34a:	60e3      	str	r3, [r4, #12]
 800a34c:	e66d      	b.n	800a02a <_scanf_float+0x82>
 800a34e:	9b04      	ldr	r3, [sp, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d0e5      	beq.n	800a320 <_scanf_float+0x378>
 800a354:	9905      	ldr	r1, [sp, #20]
 800a356:	230a      	movs	r3, #10
 800a358:	462a      	mov	r2, r5
 800a35a:	3101      	adds	r1, #1
 800a35c:	4640      	mov	r0, r8
 800a35e:	f001 f811 	bl	800b384 <_strtol_r>
 800a362:	9b04      	ldr	r3, [sp, #16]
 800a364:	9e05      	ldr	r6, [sp, #20]
 800a366:	1ac2      	subs	r2, r0, r3
 800a368:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a36c:	429e      	cmp	r6, r3
 800a36e:	bf28      	it	cs
 800a370:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a374:	4912      	ldr	r1, [pc, #72]	; (800a3c0 <_scanf_float+0x418>)
 800a376:	4630      	mov	r0, r6
 800a378:	f000 f938 	bl	800a5ec <siprintf>
 800a37c:	e7d0      	b.n	800a320 <_scanf_float+0x378>
 800a37e:	9903      	ldr	r1, [sp, #12]
 800a380:	f012 0f04 	tst.w	r2, #4
 800a384:	f103 0204 	add.w	r2, r3, #4
 800a388:	600a      	str	r2, [r1, #0]
 800a38a:	d1d9      	bne.n	800a340 <_scanf_float+0x398>
 800a38c:	f8d3 8000 	ldr.w	r8, [r3]
 800a390:	ee10 2a10 	vmov	r2, s0
 800a394:	ee10 0a10 	vmov	r0, s0
 800a398:	463b      	mov	r3, r7
 800a39a:	4639      	mov	r1, r7
 800a39c:	f7f6 fbde 	bl	8000b5c <__aeabi_dcmpun>
 800a3a0:	b128      	cbz	r0, 800a3ae <_scanf_float+0x406>
 800a3a2:	4808      	ldr	r0, [pc, #32]	; (800a3c4 <_scanf_float+0x41c>)
 800a3a4:	f000 f91c 	bl	800a5e0 <nanf>
 800a3a8:	ed88 0a00 	vstr	s0, [r8]
 800a3ac:	e7cb      	b.n	800a346 <_scanf_float+0x39e>
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	4639      	mov	r1, r7
 800a3b2:	f7f6 fc31 	bl	8000c18 <__aeabi_d2f>
 800a3b6:	f8c8 0000 	str.w	r0, [r8]
 800a3ba:	e7c4      	b.n	800a346 <_scanf_float+0x39e>
 800a3bc:	2500      	movs	r5, #0
 800a3be:	e634      	b.n	800a02a <_scanf_float+0x82>
 800a3c0:	0800f81e 	.word	0x0800f81e
 800a3c4:	0800fcab 	.word	0x0800fcab

0800a3c8 <iprintf>:
 800a3c8:	b40f      	push	{r0, r1, r2, r3}
 800a3ca:	4b0a      	ldr	r3, [pc, #40]	; (800a3f4 <iprintf+0x2c>)
 800a3cc:	b513      	push	{r0, r1, r4, lr}
 800a3ce:	681c      	ldr	r4, [r3, #0]
 800a3d0:	b124      	cbz	r4, 800a3dc <iprintf+0x14>
 800a3d2:	69a3      	ldr	r3, [r4, #24]
 800a3d4:	b913      	cbnz	r3, 800a3dc <iprintf+0x14>
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f001 ff7c 	bl	800c2d4 <__sinit>
 800a3dc:	ab05      	add	r3, sp, #20
 800a3de:	9a04      	ldr	r2, [sp, #16]
 800a3e0:	68a1      	ldr	r1, [r4, #8]
 800a3e2:	9301      	str	r3, [sp, #4]
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f003 fb63 	bl	800dab0 <_vfiprintf_r>
 800a3ea:	b002      	add	sp, #8
 800a3ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f0:	b004      	add	sp, #16
 800a3f2:	4770      	bx	lr
 800a3f4:	2000004c 	.word	0x2000004c

0800a3f8 <putchar>:
 800a3f8:	4b09      	ldr	r3, [pc, #36]	; (800a420 <putchar+0x28>)
 800a3fa:	b513      	push	{r0, r1, r4, lr}
 800a3fc:	681c      	ldr	r4, [r3, #0]
 800a3fe:	4601      	mov	r1, r0
 800a400:	b134      	cbz	r4, 800a410 <putchar+0x18>
 800a402:	69a3      	ldr	r3, [r4, #24]
 800a404:	b923      	cbnz	r3, 800a410 <putchar+0x18>
 800a406:	9001      	str	r0, [sp, #4]
 800a408:	4620      	mov	r0, r4
 800a40a:	f001 ff63 	bl	800c2d4 <__sinit>
 800a40e:	9901      	ldr	r1, [sp, #4]
 800a410:	68a2      	ldr	r2, [r4, #8]
 800a412:	4620      	mov	r0, r4
 800a414:	b002      	add	sp, #8
 800a416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41a:	f003 bf99 	b.w	800e350 <_putc_r>
 800a41e:	bf00      	nop
 800a420:	2000004c 	.word	0x2000004c

0800a424 <iscanf>:
 800a424:	b40f      	push	{r0, r1, r2, r3}
 800a426:	4b0a      	ldr	r3, [pc, #40]	; (800a450 <iscanf+0x2c>)
 800a428:	b513      	push	{r0, r1, r4, lr}
 800a42a:	681c      	ldr	r4, [r3, #0]
 800a42c:	b124      	cbz	r4, 800a438 <iscanf+0x14>
 800a42e:	69a3      	ldr	r3, [r4, #24]
 800a430:	b913      	cbnz	r3, 800a438 <iscanf+0x14>
 800a432:	4620      	mov	r0, r4
 800a434:	f001 ff4e 	bl	800c2d4 <__sinit>
 800a438:	ab05      	add	r3, sp, #20
 800a43a:	9a04      	ldr	r2, [sp, #16]
 800a43c:	6861      	ldr	r1, [r4, #4]
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	4620      	mov	r0, r4
 800a442:	f003 fe0b 	bl	800e05c <_vfiscanf_r>
 800a446:	b002      	add	sp, #8
 800a448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a44c:	b004      	add	sp, #16
 800a44e:	4770      	bx	lr
 800a450:	2000004c 	.word	0x2000004c

0800a454 <setvbuf>:
 800a454:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a458:	461d      	mov	r5, r3
 800a45a:	4b5d      	ldr	r3, [pc, #372]	; (800a5d0 <setvbuf+0x17c>)
 800a45c:	681f      	ldr	r7, [r3, #0]
 800a45e:	4604      	mov	r4, r0
 800a460:	460e      	mov	r6, r1
 800a462:	4690      	mov	r8, r2
 800a464:	b127      	cbz	r7, 800a470 <setvbuf+0x1c>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	b913      	cbnz	r3, 800a470 <setvbuf+0x1c>
 800a46a:	4638      	mov	r0, r7
 800a46c:	f001 ff32 	bl	800c2d4 <__sinit>
 800a470:	4b58      	ldr	r3, [pc, #352]	; (800a5d4 <setvbuf+0x180>)
 800a472:	429c      	cmp	r4, r3
 800a474:	d167      	bne.n	800a546 <setvbuf+0xf2>
 800a476:	687c      	ldr	r4, [r7, #4]
 800a478:	f1b8 0f02 	cmp.w	r8, #2
 800a47c:	d006      	beq.n	800a48c <setvbuf+0x38>
 800a47e:	f1b8 0f01 	cmp.w	r8, #1
 800a482:	f200 809f 	bhi.w	800a5c4 <setvbuf+0x170>
 800a486:	2d00      	cmp	r5, #0
 800a488:	f2c0 809c 	blt.w	800a5c4 <setvbuf+0x170>
 800a48c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a48e:	07db      	lsls	r3, r3, #31
 800a490:	d405      	bmi.n	800a49e <setvbuf+0x4a>
 800a492:	89a3      	ldrh	r3, [r4, #12]
 800a494:	0598      	lsls	r0, r3, #22
 800a496:	d402      	bmi.n	800a49e <setvbuf+0x4a>
 800a498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a49a:	f002 fb4a 	bl	800cb32 <__retarget_lock_acquire_recursive>
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	f001 fe71 	bl	800c188 <_fflush_r>
 800a4a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4a8:	b141      	cbz	r1, 800a4bc <setvbuf+0x68>
 800a4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ae:	4299      	cmp	r1, r3
 800a4b0:	d002      	beq.n	800a4b8 <setvbuf+0x64>
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f003 f896 	bl	800d5e4 <_free_r>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	6363      	str	r3, [r4, #52]	; 0x34
 800a4bc:	2300      	movs	r3, #0
 800a4be:	61a3      	str	r3, [r4, #24]
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	0619      	lsls	r1, r3, #24
 800a4c6:	d503      	bpl.n	800a4d0 <setvbuf+0x7c>
 800a4c8:	6921      	ldr	r1, [r4, #16]
 800a4ca:	4638      	mov	r0, r7
 800a4cc:	f003 f88a 	bl	800d5e4 <_free_r>
 800a4d0:	89a3      	ldrh	r3, [r4, #12]
 800a4d2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800a4d6:	f023 0303 	bic.w	r3, r3, #3
 800a4da:	f1b8 0f02 	cmp.w	r8, #2
 800a4de:	81a3      	strh	r3, [r4, #12]
 800a4e0:	d06c      	beq.n	800a5bc <setvbuf+0x168>
 800a4e2:	ab01      	add	r3, sp, #4
 800a4e4:	466a      	mov	r2, sp
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f002 fb24 	bl	800cb36 <__swhatbuf_r>
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	4318      	orrs	r0, r3
 800a4f2:	81a0      	strh	r0, [r4, #12]
 800a4f4:	2d00      	cmp	r5, #0
 800a4f6:	d130      	bne.n	800a55a <setvbuf+0x106>
 800a4f8:	9d00      	ldr	r5, [sp, #0]
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	f002 fb80 	bl	800cc00 <malloc>
 800a500:	4606      	mov	r6, r0
 800a502:	2800      	cmp	r0, #0
 800a504:	d155      	bne.n	800a5b2 <setvbuf+0x15e>
 800a506:	f8dd 9000 	ldr.w	r9, [sp]
 800a50a:	45a9      	cmp	r9, r5
 800a50c:	d14a      	bne.n	800a5a4 <setvbuf+0x150>
 800a50e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a512:	2200      	movs	r2, #0
 800a514:	60a2      	str	r2, [r4, #8]
 800a516:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	6122      	str	r2, [r4, #16]
 800a51e:	2201      	movs	r2, #1
 800a520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a524:	6162      	str	r2, [r4, #20]
 800a526:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a528:	f043 0302 	orr.w	r3, r3, #2
 800a52c:	07d2      	lsls	r2, r2, #31
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	d405      	bmi.n	800a53e <setvbuf+0xea>
 800a532:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a536:	d102      	bne.n	800a53e <setvbuf+0xea>
 800a538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a53a:	f002 fafb 	bl	800cb34 <__retarget_lock_release_recursive>
 800a53e:	4628      	mov	r0, r5
 800a540:	b003      	add	sp, #12
 800a542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a546:	4b24      	ldr	r3, [pc, #144]	; (800a5d8 <setvbuf+0x184>)
 800a548:	429c      	cmp	r4, r3
 800a54a:	d101      	bne.n	800a550 <setvbuf+0xfc>
 800a54c:	68bc      	ldr	r4, [r7, #8]
 800a54e:	e793      	b.n	800a478 <setvbuf+0x24>
 800a550:	4b22      	ldr	r3, [pc, #136]	; (800a5dc <setvbuf+0x188>)
 800a552:	429c      	cmp	r4, r3
 800a554:	bf08      	it	eq
 800a556:	68fc      	ldreq	r4, [r7, #12]
 800a558:	e78e      	b.n	800a478 <setvbuf+0x24>
 800a55a:	2e00      	cmp	r6, #0
 800a55c:	d0cd      	beq.n	800a4fa <setvbuf+0xa6>
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	b913      	cbnz	r3, 800a568 <setvbuf+0x114>
 800a562:	4638      	mov	r0, r7
 800a564:	f001 feb6 	bl	800c2d4 <__sinit>
 800a568:	f1b8 0f01 	cmp.w	r8, #1
 800a56c:	bf08      	it	eq
 800a56e:	89a3      	ldrheq	r3, [r4, #12]
 800a570:	6026      	str	r6, [r4, #0]
 800a572:	bf04      	itt	eq
 800a574:	f043 0301 	orreq.w	r3, r3, #1
 800a578:	81a3      	strheq	r3, [r4, #12]
 800a57a:	89a2      	ldrh	r2, [r4, #12]
 800a57c:	f012 0308 	ands.w	r3, r2, #8
 800a580:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a584:	d01c      	beq.n	800a5c0 <setvbuf+0x16c>
 800a586:	07d3      	lsls	r3, r2, #31
 800a588:	bf41      	itttt	mi
 800a58a:	2300      	movmi	r3, #0
 800a58c:	426d      	negmi	r5, r5
 800a58e:	60a3      	strmi	r3, [r4, #8]
 800a590:	61a5      	strmi	r5, [r4, #24]
 800a592:	bf58      	it	pl
 800a594:	60a5      	strpl	r5, [r4, #8]
 800a596:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a598:	f015 0501 	ands.w	r5, r5, #1
 800a59c:	d115      	bne.n	800a5ca <setvbuf+0x176>
 800a59e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a5a2:	e7c8      	b.n	800a536 <setvbuf+0xe2>
 800a5a4:	4648      	mov	r0, r9
 800a5a6:	f002 fb2b 	bl	800cc00 <malloc>
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d0ae      	beq.n	800a50e <setvbuf+0xba>
 800a5b0:	464d      	mov	r5, r9
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5b8:	81a3      	strh	r3, [r4, #12]
 800a5ba:	e7d0      	b.n	800a55e <setvbuf+0x10a>
 800a5bc:	2500      	movs	r5, #0
 800a5be:	e7a8      	b.n	800a512 <setvbuf+0xbe>
 800a5c0:	60a3      	str	r3, [r4, #8]
 800a5c2:	e7e8      	b.n	800a596 <setvbuf+0x142>
 800a5c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a5c8:	e7b9      	b.n	800a53e <setvbuf+0xea>
 800a5ca:	2500      	movs	r5, #0
 800a5cc:	e7b7      	b.n	800a53e <setvbuf+0xea>
 800a5ce:	bf00      	nop
 800a5d0:	2000004c 	.word	0x2000004c
 800a5d4:	0800fa2c 	.word	0x0800fa2c
 800a5d8:	0800fa4c 	.word	0x0800fa4c
 800a5dc:	0800fa0c 	.word	0x0800fa0c

0800a5e0 <nanf>:
 800a5e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a5e8 <nanf+0x8>
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	7fc00000 	.word	0x7fc00000

0800a5ec <siprintf>:
 800a5ec:	b40e      	push	{r1, r2, r3}
 800a5ee:	b500      	push	{lr}
 800a5f0:	b09c      	sub	sp, #112	; 0x70
 800a5f2:	ab1d      	add	r3, sp, #116	; 0x74
 800a5f4:	9002      	str	r0, [sp, #8]
 800a5f6:	9006      	str	r0, [sp, #24]
 800a5f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a5fc:	4809      	ldr	r0, [pc, #36]	; (800a624 <siprintf+0x38>)
 800a5fe:	9107      	str	r1, [sp, #28]
 800a600:	9104      	str	r1, [sp, #16]
 800a602:	4909      	ldr	r1, [pc, #36]	; (800a628 <siprintf+0x3c>)
 800a604:	f853 2b04 	ldr.w	r2, [r3], #4
 800a608:	9105      	str	r1, [sp, #20]
 800a60a:	6800      	ldr	r0, [r0, #0]
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	a902      	add	r1, sp, #8
 800a610:	f003 f924 	bl	800d85c <_svfiprintf_r>
 800a614:	9b02      	ldr	r3, [sp, #8]
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
 800a61a:	b01c      	add	sp, #112	; 0x70
 800a61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a620:	b003      	add	sp, #12
 800a622:	4770      	bx	lr
 800a624:	2000004c 	.word	0x2000004c
 800a628:	ffff0208 	.word	0xffff0208

0800a62c <sulp>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	4604      	mov	r4, r0
 800a630:	460d      	mov	r5, r1
 800a632:	ec45 4b10 	vmov	d0, r4, r5
 800a636:	4616      	mov	r6, r2
 800a638:	f002 fe6e 	bl	800d318 <__ulp>
 800a63c:	ec51 0b10 	vmov	r0, r1, d0
 800a640:	b17e      	cbz	r6, 800a662 <sulp+0x36>
 800a642:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a646:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	dd09      	ble.n	800a662 <sulp+0x36>
 800a64e:	051b      	lsls	r3, r3, #20
 800a650:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a654:	2400      	movs	r4, #0
 800a656:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a65a:	4622      	mov	r2, r4
 800a65c:	462b      	mov	r3, r5
 800a65e:	f7f5 ffe3 	bl	8000628 <__aeabi_dmul>
 800a662:	bd70      	pop	{r4, r5, r6, pc}
 800a664:	0000      	movs	r0, r0
	...

0800a668 <_strtod_l>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	ed2d 8b02 	vpush	{d8}
 800a670:	b09d      	sub	sp, #116	; 0x74
 800a672:	461f      	mov	r7, r3
 800a674:	2300      	movs	r3, #0
 800a676:	9318      	str	r3, [sp, #96]	; 0x60
 800a678:	4ba2      	ldr	r3, [pc, #648]	; (800a904 <_strtod_l+0x29c>)
 800a67a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	9305      	str	r3, [sp, #20]
 800a680:	4604      	mov	r4, r0
 800a682:	4618      	mov	r0, r3
 800a684:	4688      	mov	r8, r1
 800a686:	f7f5 fdbb 	bl	8000200 <strlen>
 800a68a:	f04f 0a00 	mov.w	sl, #0
 800a68e:	4605      	mov	r5, r0
 800a690:	f04f 0b00 	mov.w	fp, #0
 800a694:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a698:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a69a:	781a      	ldrb	r2, [r3, #0]
 800a69c:	2a2b      	cmp	r2, #43	; 0x2b
 800a69e:	d04e      	beq.n	800a73e <_strtod_l+0xd6>
 800a6a0:	d83b      	bhi.n	800a71a <_strtod_l+0xb2>
 800a6a2:	2a0d      	cmp	r2, #13
 800a6a4:	d834      	bhi.n	800a710 <_strtod_l+0xa8>
 800a6a6:	2a08      	cmp	r2, #8
 800a6a8:	d834      	bhi.n	800a714 <_strtod_l+0xac>
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	d03e      	beq.n	800a72c <_strtod_l+0xc4>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	930a      	str	r3, [sp, #40]	; 0x28
 800a6b2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a6b4:	7833      	ldrb	r3, [r6, #0]
 800a6b6:	2b30      	cmp	r3, #48	; 0x30
 800a6b8:	f040 80b0 	bne.w	800a81c <_strtod_l+0x1b4>
 800a6bc:	7873      	ldrb	r3, [r6, #1]
 800a6be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6c2:	2b58      	cmp	r3, #88	; 0x58
 800a6c4:	d168      	bne.n	800a798 <_strtod_l+0x130>
 800a6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	ab18      	add	r3, sp, #96	; 0x60
 800a6cc:	9702      	str	r7, [sp, #8]
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	4a8d      	ldr	r2, [pc, #564]	; (800a908 <_strtod_l+0x2a0>)
 800a6d2:	ab19      	add	r3, sp, #100	; 0x64
 800a6d4:	a917      	add	r1, sp, #92	; 0x5c
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f001 ff1e 	bl	800c518 <__gethex>
 800a6dc:	f010 0707 	ands.w	r7, r0, #7
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	d005      	beq.n	800a6f0 <_strtod_l+0x88>
 800a6e4:	2f06      	cmp	r7, #6
 800a6e6:	d12c      	bne.n	800a742 <_strtod_l+0xda>
 800a6e8:	3601      	adds	r6, #1
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9617      	str	r6, [sp, #92]	; 0x5c
 800a6ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a6f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f040 8590 	bne.w	800b218 <_strtod_l+0xbb0>
 800a6f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6fa:	b1eb      	cbz	r3, 800a738 <_strtod_l+0xd0>
 800a6fc:	4652      	mov	r2, sl
 800a6fe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a702:	ec43 2b10 	vmov	d0, r2, r3
 800a706:	b01d      	add	sp, #116	; 0x74
 800a708:	ecbd 8b02 	vpop	{d8}
 800a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a710:	2a20      	cmp	r2, #32
 800a712:	d1cc      	bne.n	800a6ae <_strtod_l+0x46>
 800a714:	3301      	adds	r3, #1
 800a716:	9317      	str	r3, [sp, #92]	; 0x5c
 800a718:	e7be      	b.n	800a698 <_strtod_l+0x30>
 800a71a:	2a2d      	cmp	r2, #45	; 0x2d
 800a71c:	d1c7      	bne.n	800a6ae <_strtod_l+0x46>
 800a71e:	2201      	movs	r2, #1
 800a720:	920a      	str	r2, [sp, #40]	; 0x28
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	9217      	str	r2, [sp, #92]	; 0x5c
 800a726:	785b      	ldrb	r3, [r3, #1]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d1c2      	bne.n	800a6b2 <_strtod_l+0x4a>
 800a72c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a72e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a732:	2b00      	cmp	r3, #0
 800a734:	f040 856e 	bne.w	800b214 <_strtod_l+0xbac>
 800a738:	4652      	mov	r2, sl
 800a73a:	465b      	mov	r3, fp
 800a73c:	e7e1      	b.n	800a702 <_strtod_l+0x9a>
 800a73e:	2200      	movs	r2, #0
 800a740:	e7ee      	b.n	800a720 <_strtod_l+0xb8>
 800a742:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a744:	b13a      	cbz	r2, 800a756 <_strtod_l+0xee>
 800a746:	2135      	movs	r1, #53	; 0x35
 800a748:	a81a      	add	r0, sp, #104	; 0x68
 800a74a:	f002 fef0 	bl	800d52e <__copybits>
 800a74e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a750:	4620      	mov	r0, r4
 800a752:	f002 faaf 	bl	800ccb4 <_Bfree>
 800a756:	3f01      	subs	r7, #1
 800a758:	2f04      	cmp	r7, #4
 800a75a:	d806      	bhi.n	800a76a <_strtod_l+0x102>
 800a75c:	e8df f007 	tbb	[pc, r7]
 800a760:	1714030a 	.word	0x1714030a
 800a764:	0a          	.byte	0x0a
 800a765:	00          	.byte	0x00
 800a766:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a76a:	0728      	lsls	r0, r5, #28
 800a76c:	d5c0      	bpl.n	800a6f0 <_strtod_l+0x88>
 800a76e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a772:	e7bd      	b.n	800a6f0 <_strtod_l+0x88>
 800a774:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a778:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a77a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a77e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a782:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a786:	e7f0      	b.n	800a76a <_strtod_l+0x102>
 800a788:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a90c <_strtod_l+0x2a4>
 800a78c:	e7ed      	b.n	800a76a <_strtod_l+0x102>
 800a78e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a792:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a796:	e7e8      	b.n	800a76a <_strtod_l+0x102>
 800a798:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b30      	cmp	r3, #48	; 0x30
 800a7a2:	d0f9      	beq.n	800a798 <_strtod_l+0x130>
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0a3      	beq.n	800a6f0 <_strtod_l+0x88>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f04f 0900 	mov.w	r9, #0
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7b2:	9308      	str	r3, [sp, #32]
 800a7b4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a7b8:	464f      	mov	r7, r9
 800a7ba:	220a      	movs	r2, #10
 800a7bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a7be:	7806      	ldrb	r6, [r0, #0]
 800a7c0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a7c4:	b2d9      	uxtb	r1, r3
 800a7c6:	2909      	cmp	r1, #9
 800a7c8:	d92a      	bls.n	800a820 <_strtod_l+0x1b8>
 800a7ca:	9905      	ldr	r1, [sp, #20]
 800a7cc:	462a      	mov	r2, r5
 800a7ce:	f003 ff2e 	bl	800e62e <strncmp>
 800a7d2:	b398      	cbz	r0, 800a83c <_strtod_l+0x1d4>
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463d      	mov	r5, r7
 800a7da:	9005      	str	r0, [sp, #20]
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2a65      	cmp	r2, #101	; 0x65
 800a7e0:	d001      	beq.n	800a7e6 <_strtod_l+0x17e>
 800a7e2:	2a45      	cmp	r2, #69	; 0x45
 800a7e4:	d118      	bne.n	800a818 <_strtod_l+0x1b0>
 800a7e6:	b91d      	cbnz	r5, 800a7f0 <_strtod_l+0x188>
 800a7e8:	9a04      	ldr	r2, [sp, #16]
 800a7ea:	4302      	orrs	r2, r0
 800a7ec:	d09e      	beq.n	800a72c <_strtod_l+0xc4>
 800a7ee:	2500      	movs	r5, #0
 800a7f0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a7f4:	f108 0201 	add.w	r2, r8, #1
 800a7f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7fa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a7fe:	2a2b      	cmp	r2, #43	; 0x2b
 800a800:	d075      	beq.n	800a8ee <_strtod_l+0x286>
 800a802:	2a2d      	cmp	r2, #45	; 0x2d
 800a804:	d07b      	beq.n	800a8fe <_strtod_l+0x296>
 800a806:	f04f 0c00 	mov.w	ip, #0
 800a80a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a80e:	2909      	cmp	r1, #9
 800a810:	f240 8082 	bls.w	800a918 <_strtod_l+0x2b0>
 800a814:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a818:	2600      	movs	r6, #0
 800a81a:	e09d      	b.n	800a958 <_strtod_l+0x2f0>
 800a81c:	2300      	movs	r3, #0
 800a81e:	e7c4      	b.n	800a7aa <_strtod_l+0x142>
 800a820:	2f08      	cmp	r7, #8
 800a822:	bfd8      	it	le
 800a824:	9907      	ldrle	r1, [sp, #28]
 800a826:	f100 0001 	add.w	r0, r0, #1
 800a82a:	bfda      	itte	le
 800a82c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a830:	9307      	strle	r3, [sp, #28]
 800a832:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a836:	3701      	adds	r7, #1
 800a838:	9017      	str	r0, [sp, #92]	; 0x5c
 800a83a:	e7bf      	b.n	800a7bc <_strtod_l+0x154>
 800a83c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a83e:	195a      	adds	r2, r3, r5
 800a840:	9217      	str	r2, [sp, #92]	; 0x5c
 800a842:	5d5a      	ldrb	r2, [r3, r5]
 800a844:	2f00      	cmp	r7, #0
 800a846:	d037      	beq.n	800a8b8 <_strtod_l+0x250>
 800a848:	9005      	str	r0, [sp, #20]
 800a84a:	463d      	mov	r5, r7
 800a84c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a850:	2b09      	cmp	r3, #9
 800a852:	d912      	bls.n	800a87a <_strtod_l+0x212>
 800a854:	2301      	movs	r3, #1
 800a856:	e7c2      	b.n	800a7de <_strtod_l+0x176>
 800a858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a85e:	785a      	ldrb	r2, [r3, #1]
 800a860:	3001      	adds	r0, #1
 800a862:	2a30      	cmp	r2, #48	; 0x30
 800a864:	d0f8      	beq.n	800a858 <_strtod_l+0x1f0>
 800a866:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a86a:	2b08      	cmp	r3, #8
 800a86c:	f200 84d9 	bhi.w	800b222 <_strtod_l+0xbba>
 800a870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a872:	9005      	str	r0, [sp, #20]
 800a874:	2000      	movs	r0, #0
 800a876:	9308      	str	r3, [sp, #32]
 800a878:	4605      	mov	r5, r0
 800a87a:	3a30      	subs	r2, #48	; 0x30
 800a87c:	f100 0301 	add.w	r3, r0, #1
 800a880:	d014      	beq.n	800a8ac <_strtod_l+0x244>
 800a882:	9905      	ldr	r1, [sp, #20]
 800a884:	4419      	add	r1, r3
 800a886:	9105      	str	r1, [sp, #20]
 800a888:	462b      	mov	r3, r5
 800a88a:	eb00 0e05 	add.w	lr, r0, r5
 800a88e:	210a      	movs	r1, #10
 800a890:	4573      	cmp	r3, lr
 800a892:	d113      	bne.n	800a8bc <_strtod_l+0x254>
 800a894:	182b      	adds	r3, r5, r0
 800a896:	2b08      	cmp	r3, #8
 800a898:	f105 0501 	add.w	r5, r5, #1
 800a89c:	4405      	add	r5, r0
 800a89e:	dc1c      	bgt.n	800a8da <_strtod_l+0x272>
 800a8a0:	9907      	ldr	r1, [sp, #28]
 800a8a2:	230a      	movs	r3, #10
 800a8a4:	fb03 2301 	mla	r3, r3, r1, r2
 800a8a8:	9307      	str	r3, [sp, #28]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a8ae:	1c51      	adds	r1, r2, #1
 800a8b0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a8b2:	7852      	ldrb	r2, [r2, #1]
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	e7c9      	b.n	800a84c <_strtod_l+0x1e4>
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	e7d2      	b.n	800a862 <_strtod_l+0x1fa>
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	dc04      	bgt.n	800a8ca <_strtod_l+0x262>
 800a8c0:	9e07      	ldr	r6, [sp, #28]
 800a8c2:	434e      	muls	r6, r1
 800a8c4:	9607      	str	r6, [sp, #28]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	e7e2      	b.n	800a890 <_strtod_l+0x228>
 800a8ca:	f103 0c01 	add.w	ip, r3, #1
 800a8ce:	f1bc 0f10 	cmp.w	ip, #16
 800a8d2:	bfd8      	it	le
 800a8d4:	fb01 f909 	mulle.w	r9, r1, r9
 800a8d8:	e7f5      	b.n	800a8c6 <_strtod_l+0x25e>
 800a8da:	2d10      	cmp	r5, #16
 800a8dc:	bfdc      	itt	le
 800a8de:	230a      	movle	r3, #10
 800a8e0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a8e4:	e7e1      	b.n	800a8aa <_strtod_l+0x242>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e77c      	b.n	800a7e8 <_strtod_l+0x180>
 800a8ee:	f04f 0c00 	mov.w	ip, #0
 800a8f2:	f108 0202 	add.w	r2, r8, #2
 800a8f6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8f8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a8fc:	e785      	b.n	800a80a <_strtod_l+0x1a2>
 800a8fe:	f04f 0c01 	mov.w	ip, #1
 800a902:	e7f6      	b.n	800a8f2 <_strtod_l+0x28a>
 800a904:	0800fad4 	.word	0x0800fad4
 800a908:	0800f824 	.word	0x0800f824
 800a90c:	7ff00000 	.word	0x7ff00000
 800a910:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a912:	1c51      	adds	r1, r2, #1
 800a914:	9117      	str	r1, [sp, #92]	; 0x5c
 800a916:	7852      	ldrb	r2, [r2, #1]
 800a918:	2a30      	cmp	r2, #48	; 0x30
 800a91a:	d0f9      	beq.n	800a910 <_strtod_l+0x2a8>
 800a91c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a920:	2908      	cmp	r1, #8
 800a922:	f63f af79 	bhi.w	800a818 <_strtod_l+0x1b0>
 800a926:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a92a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a92c:	9206      	str	r2, [sp, #24]
 800a92e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a930:	1c51      	adds	r1, r2, #1
 800a932:	9117      	str	r1, [sp, #92]	; 0x5c
 800a934:	7852      	ldrb	r2, [r2, #1]
 800a936:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a93a:	2e09      	cmp	r6, #9
 800a93c:	d937      	bls.n	800a9ae <_strtod_l+0x346>
 800a93e:	9e06      	ldr	r6, [sp, #24]
 800a940:	1b89      	subs	r1, r1, r6
 800a942:	2908      	cmp	r1, #8
 800a944:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a948:	dc02      	bgt.n	800a950 <_strtod_l+0x2e8>
 800a94a:	4576      	cmp	r6, lr
 800a94c:	bfa8      	it	ge
 800a94e:	4676      	movge	r6, lr
 800a950:	f1bc 0f00 	cmp.w	ip, #0
 800a954:	d000      	beq.n	800a958 <_strtod_l+0x2f0>
 800a956:	4276      	negs	r6, r6
 800a958:	2d00      	cmp	r5, #0
 800a95a:	d14d      	bne.n	800a9f8 <_strtod_l+0x390>
 800a95c:	9904      	ldr	r1, [sp, #16]
 800a95e:	4301      	orrs	r1, r0
 800a960:	f47f aec6 	bne.w	800a6f0 <_strtod_l+0x88>
 800a964:	2b00      	cmp	r3, #0
 800a966:	f47f aee1 	bne.w	800a72c <_strtod_l+0xc4>
 800a96a:	2a69      	cmp	r2, #105	; 0x69
 800a96c:	d027      	beq.n	800a9be <_strtod_l+0x356>
 800a96e:	dc24      	bgt.n	800a9ba <_strtod_l+0x352>
 800a970:	2a49      	cmp	r2, #73	; 0x49
 800a972:	d024      	beq.n	800a9be <_strtod_l+0x356>
 800a974:	2a4e      	cmp	r2, #78	; 0x4e
 800a976:	f47f aed9 	bne.w	800a72c <_strtod_l+0xc4>
 800a97a:	499f      	ldr	r1, [pc, #636]	; (800abf8 <_strtod_l+0x590>)
 800a97c:	a817      	add	r0, sp, #92	; 0x5c
 800a97e:	f002 f823 	bl	800c9c8 <__match>
 800a982:	2800      	cmp	r0, #0
 800a984:	f43f aed2 	beq.w	800a72c <_strtod_l+0xc4>
 800a988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	2b28      	cmp	r3, #40	; 0x28
 800a98e:	d12d      	bne.n	800a9ec <_strtod_l+0x384>
 800a990:	499a      	ldr	r1, [pc, #616]	; (800abfc <_strtod_l+0x594>)
 800a992:	aa1a      	add	r2, sp, #104	; 0x68
 800a994:	a817      	add	r0, sp, #92	; 0x5c
 800a996:	f002 f82b 	bl	800c9f0 <__hexnan>
 800a99a:	2805      	cmp	r0, #5
 800a99c:	d126      	bne.n	800a9ec <_strtod_l+0x384>
 800a99e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a9a0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a9a4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a9a8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a9ac:	e6a0      	b.n	800a6f0 <_strtod_l+0x88>
 800a9ae:	210a      	movs	r1, #10
 800a9b0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a9b4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a9b8:	e7b9      	b.n	800a92e <_strtod_l+0x2c6>
 800a9ba:	2a6e      	cmp	r2, #110	; 0x6e
 800a9bc:	e7db      	b.n	800a976 <_strtod_l+0x30e>
 800a9be:	4990      	ldr	r1, [pc, #576]	; (800ac00 <_strtod_l+0x598>)
 800a9c0:	a817      	add	r0, sp, #92	; 0x5c
 800a9c2:	f002 f801 	bl	800c9c8 <__match>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	f43f aeb0 	beq.w	800a72c <_strtod_l+0xc4>
 800a9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9ce:	498d      	ldr	r1, [pc, #564]	; (800ac04 <_strtod_l+0x59c>)
 800a9d0:	3b01      	subs	r3, #1
 800a9d2:	a817      	add	r0, sp, #92	; 0x5c
 800a9d4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9d6:	f001 fff7 	bl	800c9c8 <__match>
 800a9da:	b910      	cbnz	r0, 800a9e2 <_strtod_l+0x37a>
 800a9dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9de:	3301      	adds	r3, #1
 800a9e0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9e2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ac14 <_strtod_l+0x5ac>
 800a9e6:	f04f 0a00 	mov.w	sl, #0
 800a9ea:	e681      	b.n	800a6f0 <_strtod_l+0x88>
 800a9ec:	4886      	ldr	r0, [pc, #536]	; (800ac08 <_strtod_l+0x5a0>)
 800a9ee:	f003 fd8b 	bl	800e508 <nan>
 800a9f2:	ec5b ab10 	vmov	sl, fp, d0
 800a9f6:	e67b      	b.n	800a6f0 <_strtod_l+0x88>
 800a9f8:	9b05      	ldr	r3, [sp, #20]
 800a9fa:	9807      	ldr	r0, [sp, #28]
 800a9fc:	1af3      	subs	r3, r6, r3
 800a9fe:	2f00      	cmp	r7, #0
 800aa00:	bf08      	it	eq
 800aa02:	462f      	moveq	r7, r5
 800aa04:	2d10      	cmp	r5, #16
 800aa06:	9306      	str	r3, [sp, #24]
 800aa08:	46a8      	mov	r8, r5
 800aa0a:	bfa8      	it	ge
 800aa0c:	f04f 0810 	movge.w	r8, #16
 800aa10:	f7f5 fd90 	bl	8000534 <__aeabi_ui2d>
 800aa14:	2d09      	cmp	r5, #9
 800aa16:	4682      	mov	sl, r0
 800aa18:	468b      	mov	fp, r1
 800aa1a:	dd13      	ble.n	800aa44 <_strtod_l+0x3dc>
 800aa1c:	4b7b      	ldr	r3, [pc, #492]	; (800ac0c <_strtod_l+0x5a4>)
 800aa1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa26:	f7f5 fdff 	bl	8000628 <__aeabi_dmul>
 800aa2a:	4682      	mov	sl, r0
 800aa2c:	4648      	mov	r0, r9
 800aa2e:	468b      	mov	fp, r1
 800aa30:	f7f5 fd80 	bl	8000534 <__aeabi_ui2d>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4650      	mov	r0, sl
 800aa3a:	4659      	mov	r1, fp
 800aa3c:	f7f5 fc3e 	bl	80002bc <__adddf3>
 800aa40:	4682      	mov	sl, r0
 800aa42:	468b      	mov	fp, r1
 800aa44:	2d0f      	cmp	r5, #15
 800aa46:	dc38      	bgt.n	800aaba <_strtod_l+0x452>
 800aa48:	9b06      	ldr	r3, [sp, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f43f ae50 	beq.w	800a6f0 <_strtod_l+0x88>
 800aa50:	dd24      	ble.n	800aa9c <_strtod_l+0x434>
 800aa52:	2b16      	cmp	r3, #22
 800aa54:	dc0b      	bgt.n	800aa6e <_strtod_l+0x406>
 800aa56:	496d      	ldr	r1, [pc, #436]	; (800ac0c <_strtod_l+0x5a4>)
 800aa58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa60:	4652      	mov	r2, sl
 800aa62:	465b      	mov	r3, fp
 800aa64:	f7f5 fde0 	bl	8000628 <__aeabi_dmul>
 800aa68:	4682      	mov	sl, r0
 800aa6a:	468b      	mov	fp, r1
 800aa6c:	e640      	b.n	800a6f0 <_strtod_l+0x88>
 800aa6e:	9a06      	ldr	r2, [sp, #24]
 800aa70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aa74:	4293      	cmp	r3, r2
 800aa76:	db20      	blt.n	800aaba <_strtod_l+0x452>
 800aa78:	4c64      	ldr	r4, [pc, #400]	; (800ac0c <_strtod_l+0x5a4>)
 800aa7a:	f1c5 050f 	rsb	r5, r5, #15
 800aa7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa82:	4652      	mov	r2, sl
 800aa84:	465b      	mov	r3, fp
 800aa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa8a:	f7f5 fdcd 	bl	8000628 <__aeabi_dmul>
 800aa8e:	9b06      	ldr	r3, [sp, #24]
 800aa90:	1b5d      	subs	r5, r3, r5
 800aa92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aa96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa9a:	e7e3      	b.n	800aa64 <_strtod_l+0x3fc>
 800aa9c:	9b06      	ldr	r3, [sp, #24]
 800aa9e:	3316      	adds	r3, #22
 800aaa0:	db0b      	blt.n	800aaba <_strtod_l+0x452>
 800aaa2:	9b05      	ldr	r3, [sp, #20]
 800aaa4:	1b9e      	subs	r6, r3, r6
 800aaa6:	4b59      	ldr	r3, [pc, #356]	; (800ac0c <_strtod_l+0x5a4>)
 800aaa8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aaac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aab0:	4650      	mov	r0, sl
 800aab2:	4659      	mov	r1, fp
 800aab4:	f7f5 fee2 	bl	800087c <__aeabi_ddiv>
 800aab8:	e7d6      	b.n	800aa68 <_strtod_l+0x400>
 800aaba:	9b06      	ldr	r3, [sp, #24]
 800aabc:	eba5 0808 	sub.w	r8, r5, r8
 800aac0:	4498      	add	r8, r3
 800aac2:	f1b8 0f00 	cmp.w	r8, #0
 800aac6:	dd74      	ble.n	800abb2 <_strtod_l+0x54a>
 800aac8:	f018 030f 	ands.w	r3, r8, #15
 800aacc:	d00a      	beq.n	800aae4 <_strtod_l+0x47c>
 800aace:	494f      	ldr	r1, [pc, #316]	; (800ac0c <_strtod_l+0x5a4>)
 800aad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aad4:	4652      	mov	r2, sl
 800aad6:	465b      	mov	r3, fp
 800aad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aadc:	f7f5 fda4 	bl	8000628 <__aeabi_dmul>
 800aae0:	4682      	mov	sl, r0
 800aae2:	468b      	mov	fp, r1
 800aae4:	f038 080f 	bics.w	r8, r8, #15
 800aae8:	d04f      	beq.n	800ab8a <_strtod_l+0x522>
 800aaea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aaee:	dd22      	ble.n	800ab36 <_strtod_l+0x4ce>
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	462e      	mov	r6, r5
 800aaf4:	9507      	str	r5, [sp, #28]
 800aaf6:	9505      	str	r5, [sp, #20]
 800aaf8:	2322      	movs	r3, #34	; 0x22
 800aafa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ac14 <_strtod_l+0x5ac>
 800aafe:	6023      	str	r3, [r4, #0]
 800ab00:	f04f 0a00 	mov.w	sl, #0
 800ab04:	9b07      	ldr	r3, [sp, #28]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f43f adf2 	beq.w	800a6f0 <_strtod_l+0x88>
 800ab0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f002 f8d0 	bl	800ccb4 <_Bfree>
 800ab14:	9905      	ldr	r1, [sp, #20]
 800ab16:	4620      	mov	r0, r4
 800ab18:	f002 f8cc 	bl	800ccb4 <_Bfree>
 800ab1c:	4631      	mov	r1, r6
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f002 f8c8 	bl	800ccb4 <_Bfree>
 800ab24:	9907      	ldr	r1, [sp, #28]
 800ab26:	4620      	mov	r0, r4
 800ab28:	f002 f8c4 	bl	800ccb4 <_Bfree>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f002 f8c0 	bl	800ccb4 <_Bfree>
 800ab34:	e5dc      	b.n	800a6f0 <_strtod_l+0x88>
 800ab36:	4b36      	ldr	r3, [pc, #216]	; (800ac10 <_strtod_l+0x5a8>)
 800ab38:	9304      	str	r3, [sp, #16]
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ab40:	4650      	mov	r0, sl
 800ab42:	4659      	mov	r1, fp
 800ab44:	4699      	mov	r9, r3
 800ab46:	f1b8 0f01 	cmp.w	r8, #1
 800ab4a:	dc21      	bgt.n	800ab90 <_strtod_l+0x528>
 800ab4c:	b10b      	cbz	r3, 800ab52 <_strtod_l+0x4ea>
 800ab4e:	4682      	mov	sl, r0
 800ab50:	468b      	mov	fp, r1
 800ab52:	4b2f      	ldr	r3, [pc, #188]	; (800ac10 <_strtod_l+0x5a8>)
 800ab54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ab58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	465b      	mov	r3, fp
 800ab60:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ab64:	f7f5 fd60 	bl	8000628 <__aeabi_dmul>
 800ab68:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <_strtod_l+0x5ac>)
 800ab6a:	460a      	mov	r2, r1
 800ab6c:	400b      	ands	r3, r1
 800ab6e:	492a      	ldr	r1, [pc, #168]	; (800ac18 <_strtod_l+0x5b0>)
 800ab70:	428b      	cmp	r3, r1
 800ab72:	4682      	mov	sl, r0
 800ab74:	d8bc      	bhi.n	800aaf0 <_strtod_l+0x488>
 800ab76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab7a:	428b      	cmp	r3, r1
 800ab7c:	bf86      	itte	hi
 800ab7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ac1c <_strtod_l+0x5b4>
 800ab82:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ab86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	e084      	b.n	800ac9a <_strtod_l+0x632>
 800ab90:	f018 0f01 	tst.w	r8, #1
 800ab94:	d005      	beq.n	800aba2 <_strtod_l+0x53a>
 800ab96:	9b04      	ldr	r3, [sp, #16]
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fd44 	bl	8000628 <__aeabi_dmul>
 800aba0:	2301      	movs	r3, #1
 800aba2:	9a04      	ldr	r2, [sp, #16]
 800aba4:	3208      	adds	r2, #8
 800aba6:	f109 0901 	add.w	r9, r9, #1
 800abaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800abae:	9204      	str	r2, [sp, #16]
 800abb0:	e7c9      	b.n	800ab46 <_strtod_l+0x4de>
 800abb2:	d0ea      	beq.n	800ab8a <_strtod_l+0x522>
 800abb4:	f1c8 0800 	rsb	r8, r8, #0
 800abb8:	f018 020f 	ands.w	r2, r8, #15
 800abbc:	d00a      	beq.n	800abd4 <_strtod_l+0x56c>
 800abbe:	4b13      	ldr	r3, [pc, #76]	; (800ac0c <_strtod_l+0x5a4>)
 800abc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abc4:	4650      	mov	r0, sl
 800abc6:	4659      	mov	r1, fp
 800abc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abcc:	f7f5 fe56 	bl	800087c <__aeabi_ddiv>
 800abd0:	4682      	mov	sl, r0
 800abd2:	468b      	mov	fp, r1
 800abd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800abd8:	d0d7      	beq.n	800ab8a <_strtod_l+0x522>
 800abda:	f1b8 0f1f 	cmp.w	r8, #31
 800abde:	dd1f      	ble.n	800ac20 <_strtod_l+0x5b8>
 800abe0:	2500      	movs	r5, #0
 800abe2:	462e      	mov	r6, r5
 800abe4:	9507      	str	r5, [sp, #28]
 800abe6:	9505      	str	r5, [sp, #20]
 800abe8:	2322      	movs	r3, #34	; 0x22
 800abea:	f04f 0a00 	mov.w	sl, #0
 800abee:	f04f 0b00 	mov.w	fp, #0
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	e786      	b.n	800ab04 <_strtod_l+0x49c>
 800abf6:	bf00      	nop
 800abf8:	0800f7f9 	.word	0x0800f7f9
 800abfc:	0800f838 	.word	0x0800f838
 800ac00:	0800f7f1 	.word	0x0800f7f1
 800ac04:	0800f97c 	.word	0x0800f97c
 800ac08:	0800fcab 	.word	0x0800fcab
 800ac0c:	0800fb70 	.word	0x0800fb70
 800ac10:	0800fb48 	.word	0x0800fb48
 800ac14:	7ff00000 	.word	0x7ff00000
 800ac18:	7ca00000 	.word	0x7ca00000
 800ac1c:	7fefffff 	.word	0x7fefffff
 800ac20:	f018 0310 	ands.w	r3, r8, #16
 800ac24:	bf18      	it	ne
 800ac26:	236a      	movne	r3, #106	; 0x6a
 800ac28:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800afd8 <_strtod_l+0x970>
 800ac2c:	9304      	str	r3, [sp, #16]
 800ac2e:	4650      	mov	r0, sl
 800ac30:	4659      	mov	r1, fp
 800ac32:	2300      	movs	r3, #0
 800ac34:	f018 0f01 	tst.w	r8, #1
 800ac38:	d004      	beq.n	800ac44 <_strtod_l+0x5dc>
 800ac3a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac3e:	f7f5 fcf3 	bl	8000628 <__aeabi_dmul>
 800ac42:	2301      	movs	r3, #1
 800ac44:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ac48:	f109 0908 	add.w	r9, r9, #8
 800ac4c:	d1f2      	bne.n	800ac34 <_strtod_l+0x5cc>
 800ac4e:	b10b      	cbz	r3, 800ac54 <_strtod_l+0x5ec>
 800ac50:	4682      	mov	sl, r0
 800ac52:	468b      	mov	fp, r1
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	b1c3      	cbz	r3, 800ac8a <_strtod_l+0x622>
 800ac58:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac5c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	4659      	mov	r1, fp
 800ac64:	dd11      	ble.n	800ac8a <_strtod_l+0x622>
 800ac66:	2b1f      	cmp	r3, #31
 800ac68:	f340 8124 	ble.w	800aeb4 <_strtod_l+0x84c>
 800ac6c:	2b34      	cmp	r3, #52	; 0x34
 800ac6e:	bfde      	ittt	le
 800ac70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ac74:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ac78:	fa03 f202 	lslle.w	r2, r3, r2
 800ac7c:	f04f 0a00 	mov.w	sl, #0
 800ac80:	bfcc      	ite	gt
 800ac82:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ac86:	ea02 0b01 	andle.w	fp, r2, r1
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4650      	mov	r0, sl
 800ac90:	4659      	mov	r1, fp
 800ac92:	f7f5 ff31 	bl	8000af8 <__aeabi_dcmpeq>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d1a2      	bne.n	800abe0 <_strtod_l+0x578>
 800ac9a:	9b07      	ldr	r3, [sp, #28]
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	9908      	ldr	r1, [sp, #32]
 800aca0:	462b      	mov	r3, r5
 800aca2:	463a      	mov	r2, r7
 800aca4:	4620      	mov	r0, r4
 800aca6:	f002 f86d 	bl	800cd84 <__s2b>
 800acaa:	9007      	str	r0, [sp, #28]
 800acac:	2800      	cmp	r0, #0
 800acae:	f43f af1f 	beq.w	800aaf0 <_strtod_l+0x488>
 800acb2:	9b05      	ldr	r3, [sp, #20]
 800acb4:	1b9e      	subs	r6, r3, r6
 800acb6:	9b06      	ldr	r3, [sp, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bfb4      	ite	lt
 800acbc:	4633      	movlt	r3, r6
 800acbe:	2300      	movge	r3, #0
 800acc0:	930c      	str	r3, [sp, #48]	; 0x30
 800acc2:	9b06      	ldr	r3, [sp, #24]
 800acc4:	2500      	movs	r5, #0
 800acc6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800acca:	9312      	str	r3, [sp, #72]	; 0x48
 800accc:	462e      	mov	r6, r5
 800acce:	9b07      	ldr	r3, [sp, #28]
 800acd0:	4620      	mov	r0, r4
 800acd2:	6859      	ldr	r1, [r3, #4]
 800acd4:	f001 ffae 	bl	800cc34 <_Balloc>
 800acd8:	9005      	str	r0, [sp, #20]
 800acda:	2800      	cmp	r0, #0
 800acdc:	f43f af0c 	beq.w	800aaf8 <_strtod_l+0x490>
 800ace0:	9b07      	ldr	r3, [sp, #28]
 800ace2:	691a      	ldr	r2, [r3, #16]
 800ace4:	3202      	adds	r2, #2
 800ace6:	f103 010c 	add.w	r1, r3, #12
 800acea:	0092      	lsls	r2, r2, #2
 800acec:	300c      	adds	r0, #12
 800acee:	f7fe fcdb 	bl	80096a8 <memcpy>
 800acf2:	ec4b ab10 	vmov	d0, sl, fp
 800acf6:	aa1a      	add	r2, sp, #104	; 0x68
 800acf8:	a919      	add	r1, sp, #100	; 0x64
 800acfa:	4620      	mov	r0, r4
 800acfc:	f002 fb88 	bl	800d410 <__d2b>
 800ad00:	ec4b ab18 	vmov	d8, sl, fp
 800ad04:	9018      	str	r0, [sp, #96]	; 0x60
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f aef6 	beq.w	800aaf8 <_strtod_l+0x490>
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f002 f8d2 	bl	800ceb8 <__i2b>
 800ad14:	4606      	mov	r6, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	f43f aeee 	beq.w	800aaf8 <_strtod_l+0x490>
 800ad1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad1e:	9904      	ldr	r1, [sp, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bfab      	itete	ge
 800ad24:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ad26:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ad28:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ad2a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ad2e:	bfac      	ite	ge
 800ad30:	eb03 0902 	addge.w	r9, r3, r2
 800ad34:	1ad7      	sublt	r7, r2, r3
 800ad36:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad38:	eba3 0801 	sub.w	r8, r3, r1
 800ad3c:	4490      	add	r8, r2
 800ad3e:	4ba1      	ldr	r3, [pc, #644]	; (800afc4 <_strtod_l+0x95c>)
 800ad40:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ad44:	4598      	cmp	r8, r3
 800ad46:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad4a:	f280 80c7 	bge.w	800aedc <_strtod_l+0x874>
 800ad4e:	eba3 0308 	sub.w	r3, r3, r8
 800ad52:	2b1f      	cmp	r3, #31
 800ad54:	eba2 0203 	sub.w	r2, r2, r3
 800ad58:	f04f 0101 	mov.w	r1, #1
 800ad5c:	f300 80b1 	bgt.w	800aec2 <_strtod_l+0x85a>
 800ad60:	fa01 f303 	lsl.w	r3, r1, r3
 800ad64:	930d      	str	r3, [sp, #52]	; 0x34
 800ad66:	2300      	movs	r3, #0
 800ad68:	9308      	str	r3, [sp, #32]
 800ad6a:	eb09 0802 	add.w	r8, r9, r2
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	45c1      	cmp	r9, r8
 800ad72:	4417      	add	r7, r2
 800ad74:	441f      	add	r7, r3
 800ad76:	464b      	mov	r3, r9
 800ad78:	bfa8      	it	ge
 800ad7a:	4643      	movge	r3, r8
 800ad7c:	42bb      	cmp	r3, r7
 800ad7e:	bfa8      	it	ge
 800ad80:	463b      	movge	r3, r7
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	bfc2      	ittt	gt
 800ad86:	eba8 0803 	subgt.w	r8, r8, r3
 800ad8a:	1aff      	subgt	r7, r7, r3
 800ad8c:	eba9 0903 	subgt.w	r9, r9, r3
 800ad90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dd17      	ble.n	800adc6 <_strtod_l+0x75e>
 800ad96:	4631      	mov	r1, r6
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f002 f94c 	bl	800d038 <__pow5mult>
 800ada0:	4606      	mov	r6, r0
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f43f aea8 	beq.w	800aaf8 <_strtod_l+0x490>
 800ada8:	4601      	mov	r1, r0
 800adaa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adac:	4620      	mov	r0, r4
 800adae:	f002 f899 	bl	800cee4 <__multiply>
 800adb2:	900b      	str	r0, [sp, #44]	; 0x2c
 800adb4:	2800      	cmp	r0, #0
 800adb6:	f43f ae9f 	beq.w	800aaf8 <_strtod_l+0x490>
 800adba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adbc:	4620      	mov	r0, r4
 800adbe:	f001 ff79 	bl	800ccb4 <_Bfree>
 800adc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adc4:	9318      	str	r3, [sp, #96]	; 0x60
 800adc6:	f1b8 0f00 	cmp.w	r8, #0
 800adca:	f300 808c 	bgt.w	800aee6 <_strtod_l+0x87e>
 800adce:	9b06      	ldr	r3, [sp, #24]
 800add0:	2b00      	cmp	r3, #0
 800add2:	dd08      	ble.n	800ade6 <_strtod_l+0x77e>
 800add4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800add6:	9905      	ldr	r1, [sp, #20]
 800add8:	4620      	mov	r0, r4
 800adda:	f002 f92d 	bl	800d038 <__pow5mult>
 800adde:	9005      	str	r0, [sp, #20]
 800ade0:	2800      	cmp	r0, #0
 800ade2:	f43f ae89 	beq.w	800aaf8 <_strtod_l+0x490>
 800ade6:	2f00      	cmp	r7, #0
 800ade8:	dd08      	ble.n	800adfc <_strtod_l+0x794>
 800adea:	9905      	ldr	r1, [sp, #20]
 800adec:	463a      	mov	r2, r7
 800adee:	4620      	mov	r0, r4
 800adf0:	f002 f97c 	bl	800d0ec <__lshift>
 800adf4:	9005      	str	r0, [sp, #20]
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f43f ae7e 	beq.w	800aaf8 <_strtod_l+0x490>
 800adfc:	f1b9 0f00 	cmp.w	r9, #0
 800ae00:	dd08      	ble.n	800ae14 <_strtod_l+0x7ac>
 800ae02:	4631      	mov	r1, r6
 800ae04:	464a      	mov	r2, r9
 800ae06:	4620      	mov	r0, r4
 800ae08:	f002 f970 	bl	800d0ec <__lshift>
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f ae72 	beq.w	800aaf8 <_strtod_l+0x490>
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f002 f9f3 	bl	800d204 <__mdiff>
 800ae1e:	4605      	mov	r5, r0
 800ae20:	2800      	cmp	r0, #0
 800ae22:	f43f ae69 	beq.w	800aaf8 <_strtod_l+0x490>
 800ae26:	68c3      	ldr	r3, [r0, #12]
 800ae28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60c3      	str	r3, [r0, #12]
 800ae2e:	4631      	mov	r1, r6
 800ae30:	f002 f9cc 	bl	800d1cc <__mcmp>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	da60      	bge.n	800aefa <_strtod_l+0x892>
 800ae38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae3a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae3e:	f040 8082 	bne.w	800af46 <_strtod_l+0x8de>
 800ae42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d17d      	bne.n	800af46 <_strtod_l+0x8de>
 800ae4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae4e:	0d1b      	lsrs	r3, r3, #20
 800ae50:	051b      	lsls	r3, r3, #20
 800ae52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae56:	d976      	bls.n	800af46 <_strtod_l+0x8de>
 800ae58:	696b      	ldr	r3, [r5, #20]
 800ae5a:	b913      	cbnz	r3, 800ae62 <_strtod_l+0x7fa>
 800ae5c:	692b      	ldr	r3, [r5, #16]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	dd71      	ble.n	800af46 <_strtod_l+0x8de>
 800ae62:	4629      	mov	r1, r5
 800ae64:	2201      	movs	r2, #1
 800ae66:	4620      	mov	r0, r4
 800ae68:	f002 f940 	bl	800d0ec <__lshift>
 800ae6c:	4631      	mov	r1, r6
 800ae6e:	4605      	mov	r5, r0
 800ae70:	f002 f9ac 	bl	800d1cc <__mcmp>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	dd66      	ble.n	800af46 <_strtod_l+0x8de>
 800ae78:	9904      	ldr	r1, [sp, #16]
 800ae7a:	4a53      	ldr	r2, [pc, #332]	; (800afc8 <_strtod_l+0x960>)
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	f000 8081 	beq.w	800af86 <_strtod_l+0x91e>
 800ae84:	ea02 010b 	and.w	r1, r2, fp
 800ae88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae8c:	dc7b      	bgt.n	800af86 <_strtod_l+0x91e>
 800ae8e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae92:	f77f aea9 	ble.w	800abe8 <_strtod_l+0x580>
 800ae96:	4b4d      	ldr	r3, [pc, #308]	; (800afcc <_strtod_l+0x964>)
 800ae98:	4650      	mov	r0, sl
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f7f5 fbc3 	bl	8000628 <__aeabi_dmul>
 800aea2:	460b      	mov	r3, r1
 800aea4:	4303      	orrs	r3, r0
 800aea6:	bf08      	it	eq
 800aea8:	2322      	moveq	r3, #34	; 0x22
 800aeaa:	4682      	mov	sl, r0
 800aeac:	468b      	mov	fp, r1
 800aeae:	bf08      	it	eq
 800aeb0:	6023      	streq	r3, [r4, #0]
 800aeb2:	e62b      	b.n	800ab0c <_strtod_l+0x4a4>
 800aeb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aeb8:	fa02 f303 	lsl.w	r3, r2, r3
 800aebc:	ea03 0a0a 	and.w	sl, r3, sl
 800aec0:	e6e3      	b.n	800ac8a <_strtod_l+0x622>
 800aec2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aec6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aeca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aece:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aed2:	fa01 f308 	lsl.w	r3, r1, r8
 800aed6:	9308      	str	r3, [sp, #32]
 800aed8:	910d      	str	r1, [sp, #52]	; 0x34
 800aeda:	e746      	b.n	800ad6a <_strtod_l+0x702>
 800aedc:	2300      	movs	r3, #0
 800aede:	9308      	str	r3, [sp, #32]
 800aee0:	2301      	movs	r3, #1
 800aee2:	930d      	str	r3, [sp, #52]	; 0x34
 800aee4:	e741      	b.n	800ad6a <_strtod_l+0x702>
 800aee6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aee8:	4642      	mov	r2, r8
 800aeea:	4620      	mov	r0, r4
 800aeec:	f002 f8fe 	bl	800d0ec <__lshift>
 800aef0:	9018      	str	r0, [sp, #96]	; 0x60
 800aef2:	2800      	cmp	r0, #0
 800aef4:	f47f af6b 	bne.w	800adce <_strtod_l+0x766>
 800aef8:	e5fe      	b.n	800aaf8 <_strtod_l+0x490>
 800aefa:	465f      	mov	r7, fp
 800aefc:	d16e      	bne.n	800afdc <_strtod_l+0x974>
 800aefe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af04:	b342      	cbz	r2, 800af58 <_strtod_l+0x8f0>
 800af06:	4a32      	ldr	r2, [pc, #200]	; (800afd0 <_strtod_l+0x968>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d128      	bne.n	800af5e <_strtod_l+0x8f6>
 800af0c:	9b04      	ldr	r3, [sp, #16]
 800af0e:	4651      	mov	r1, sl
 800af10:	b1eb      	cbz	r3, 800af4e <_strtod_l+0x8e6>
 800af12:	4b2d      	ldr	r3, [pc, #180]	; (800afc8 <_strtod_l+0x960>)
 800af14:	403b      	ands	r3, r7
 800af16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af1e:	d819      	bhi.n	800af54 <_strtod_l+0x8ec>
 800af20:	0d1b      	lsrs	r3, r3, #20
 800af22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af26:	fa02 f303 	lsl.w	r3, r2, r3
 800af2a:	4299      	cmp	r1, r3
 800af2c:	d117      	bne.n	800af5e <_strtod_l+0x8f6>
 800af2e:	4b29      	ldr	r3, [pc, #164]	; (800afd4 <_strtod_l+0x96c>)
 800af30:	429f      	cmp	r7, r3
 800af32:	d102      	bne.n	800af3a <_strtod_l+0x8d2>
 800af34:	3101      	adds	r1, #1
 800af36:	f43f addf 	beq.w	800aaf8 <_strtod_l+0x490>
 800af3a:	4b23      	ldr	r3, [pc, #140]	; (800afc8 <_strtod_l+0x960>)
 800af3c:	403b      	ands	r3, r7
 800af3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800af42:	f04f 0a00 	mov.w	sl, #0
 800af46:	9b04      	ldr	r3, [sp, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1a4      	bne.n	800ae96 <_strtod_l+0x82e>
 800af4c:	e5de      	b.n	800ab0c <_strtod_l+0x4a4>
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af52:	e7ea      	b.n	800af2a <_strtod_l+0x8c2>
 800af54:	4613      	mov	r3, r2
 800af56:	e7e8      	b.n	800af2a <_strtod_l+0x8c2>
 800af58:	ea53 030a 	orrs.w	r3, r3, sl
 800af5c:	d08c      	beq.n	800ae78 <_strtod_l+0x810>
 800af5e:	9b08      	ldr	r3, [sp, #32]
 800af60:	b1db      	cbz	r3, 800af9a <_strtod_l+0x932>
 800af62:	423b      	tst	r3, r7
 800af64:	d0ef      	beq.n	800af46 <_strtod_l+0x8de>
 800af66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af68:	9a04      	ldr	r2, [sp, #16]
 800af6a:	4650      	mov	r0, sl
 800af6c:	4659      	mov	r1, fp
 800af6e:	b1c3      	cbz	r3, 800afa2 <_strtod_l+0x93a>
 800af70:	f7ff fb5c 	bl	800a62c <sulp>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	ec51 0b18 	vmov	r0, r1, d8
 800af7c:	f7f5 f99e 	bl	80002bc <__adddf3>
 800af80:	4682      	mov	sl, r0
 800af82:	468b      	mov	fp, r1
 800af84:	e7df      	b.n	800af46 <_strtod_l+0x8de>
 800af86:	4013      	ands	r3, r2
 800af88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800af98:	e7d5      	b.n	800af46 <_strtod_l+0x8de>
 800af9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af9c:	ea13 0f0a 	tst.w	r3, sl
 800afa0:	e7e0      	b.n	800af64 <_strtod_l+0x8fc>
 800afa2:	f7ff fb43 	bl	800a62c <sulp>
 800afa6:	4602      	mov	r2, r0
 800afa8:	460b      	mov	r3, r1
 800afaa:	ec51 0b18 	vmov	r0, r1, d8
 800afae:	f7f5 f983 	bl	80002b8 <__aeabi_dsub>
 800afb2:	2200      	movs	r2, #0
 800afb4:	2300      	movs	r3, #0
 800afb6:	4682      	mov	sl, r0
 800afb8:	468b      	mov	fp, r1
 800afba:	f7f5 fd9d 	bl	8000af8 <__aeabi_dcmpeq>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0c1      	beq.n	800af46 <_strtod_l+0x8de>
 800afc2:	e611      	b.n	800abe8 <_strtod_l+0x580>
 800afc4:	fffffc02 	.word	0xfffffc02
 800afc8:	7ff00000 	.word	0x7ff00000
 800afcc:	39500000 	.word	0x39500000
 800afd0:	000fffff 	.word	0x000fffff
 800afd4:	7fefffff 	.word	0x7fefffff
 800afd8:	0800f850 	.word	0x0800f850
 800afdc:	4631      	mov	r1, r6
 800afde:	4628      	mov	r0, r5
 800afe0:	f002 fa72 	bl	800d4c8 <__ratio>
 800afe4:	ec59 8b10 	vmov	r8, r9, d0
 800afe8:	ee10 0a10 	vmov	r0, s0
 800afec:	2200      	movs	r2, #0
 800afee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aff2:	4649      	mov	r1, r9
 800aff4:	f7f5 fd94 	bl	8000b20 <__aeabi_dcmple>
 800aff8:	2800      	cmp	r0, #0
 800affa:	d07a      	beq.n	800b0f2 <_strtod_l+0xa8a>
 800affc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800affe:	2b00      	cmp	r3, #0
 800b000:	d04a      	beq.n	800b098 <_strtod_l+0xa30>
 800b002:	4b95      	ldr	r3, [pc, #596]	; (800b258 <_strtod_l+0xbf0>)
 800b004:	2200      	movs	r2, #0
 800b006:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b00a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b258 <_strtod_l+0xbf0>
 800b00e:	f04f 0800 	mov.w	r8, #0
 800b012:	4b92      	ldr	r3, [pc, #584]	; (800b25c <_strtod_l+0xbf4>)
 800b014:	403b      	ands	r3, r7
 800b016:	930d      	str	r3, [sp, #52]	; 0x34
 800b018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b01a:	4b91      	ldr	r3, [pc, #580]	; (800b260 <_strtod_l+0xbf8>)
 800b01c:	429a      	cmp	r2, r3
 800b01e:	f040 80b0 	bne.w	800b182 <_strtod_l+0xb1a>
 800b022:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b026:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b02a:	ec4b ab10 	vmov	d0, sl, fp
 800b02e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b032:	f002 f971 	bl	800d318 <__ulp>
 800b036:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b03a:	ec53 2b10 	vmov	r2, r3, d0
 800b03e:	f7f5 faf3 	bl	8000628 <__aeabi_dmul>
 800b042:	4652      	mov	r2, sl
 800b044:	465b      	mov	r3, fp
 800b046:	f7f5 f939 	bl	80002bc <__adddf3>
 800b04a:	460b      	mov	r3, r1
 800b04c:	4983      	ldr	r1, [pc, #524]	; (800b25c <_strtod_l+0xbf4>)
 800b04e:	4a85      	ldr	r2, [pc, #532]	; (800b264 <_strtod_l+0xbfc>)
 800b050:	4019      	ands	r1, r3
 800b052:	4291      	cmp	r1, r2
 800b054:	4682      	mov	sl, r0
 800b056:	d960      	bls.n	800b11a <_strtod_l+0xab2>
 800b058:	ee18 3a90 	vmov	r3, s17
 800b05c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b060:	4293      	cmp	r3, r2
 800b062:	d104      	bne.n	800b06e <_strtod_l+0xa06>
 800b064:	ee18 3a10 	vmov	r3, s16
 800b068:	3301      	adds	r3, #1
 800b06a:	f43f ad45 	beq.w	800aaf8 <_strtod_l+0x490>
 800b06e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b270 <_strtod_l+0xc08>
 800b072:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b076:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b078:	4620      	mov	r0, r4
 800b07a:	f001 fe1b 	bl	800ccb4 <_Bfree>
 800b07e:	9905      	ldr	r1, [sp, #20]
 800b080:	4620      	mov	r0, r4
 800b082:	f001 fe17 	bl	800ccb4 <_Bfree>
 800b086:	4631      	mov	r1, r6
 800b088:	4620      	mov	r0, r4
 800b08a:	f001 fe13 	bl	800ccb4 <_Bfree>
 800b08e:	4629      	mov	r1, r5
 800b090:	4620      	mov	r0, r4
 800b092:	f001 fe0f 	bl	800ccb4 <_Bfree>
 800b096:	e61a      	b.n	800acce <_strtod_l+0x666>
 800b098:	f1ba 0f00 	cmp.w	sl, #0
 800b09c:	d11b      	bne.n	800b0d6 <_strtod_l+0xa6e>
 800b09e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0a2:	b9f3      	cbnz	r3, 800b0e2 <_strtod_l+0xa7a>
 800b0a4:	4b6c      	ldr	r3, [pc, #432]	; (800b258 <_strtod_l+0xbf0>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 fd2e 	bl	8000b0c <__aeabi_dcmplt>
 800b0b0:	b9d0      	cbnz	r0, 800b0e8 <_strtod_l+0xa80>
 800b0b2:	4640      	mov	r0, r8
 800b0b4:	4649      	mov	r1, r9
 800b0b6:	4b6c      	ldr	r3, [pc, #432]	; (800b268 <_strtod_l+0xc00>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	f7f5 fab5 	bl	8000628 <__aeabi_dmul>
 800b0be:	4680      	mov	r8, r0
 800b0c0:	4689      	mov	r9, r1
 800b0c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b0ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b0cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b0d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0d4:	e79d      	b.n	800b012 <_strtod_l+0x9aa>
 800b0d6:	f1ba 0f01 	cmp.w	sl, #1
 800b0da:	d102      	bne.n	800b0e2 <_strtod_l+0xa7a>
 800b0dc:	2f00      	cmp	r7, #0
 800b0de:	f43f ad83 	beq.w	800abe8 <_strtod_l+0x580>
 800b0e2:	4b62      	ldr	r3, [pc, #392]	; (800b26c <_strtod_l+0xc04>)
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	e78e      	b.n	800b006 <_strtod_l+0x99e>
 800b0e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b268 <_strtod_l+0xc00>
 800b0ec:	f04f 0800 	mov.w	r8, #0
 800b0f0:	e7e7      	b.n	800b0c2 <_strtod_l+0xa5a>
 800b0f2:	4b5d      	ldr	r3, [pc, #372]	; (800b268 <_strtod_l+0xc00>)
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	4649      	mov	r1, r9
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f7f5 fa95 	bl	8000628 <__aeabi_dmul>
 800b0fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b100:	4680      	mov	r8, r0
 800b102:	4689      	mov	r9, r1
 800b104:	b933      	cbnz	r3, 800b114 <_strtod_l+0xaac>
 800b106:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b10a:	900e      	str	r0, [sp, #56]	; 0x38
 800b10c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b10e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b112:	e7dd      	b.n	800b0d0 <_strtod_l+0xa68>
 800b114:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b118:	e7f9      	b.n	800b10e <_strtod_l+0xaa6>
 800b11a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b11e:	9b04      	ldr	r3, [sp, #16]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d1a8      	bne.n	800b076 <_strtod_l+0xa0e>
 800b124:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b128:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b12a:	0d1b      	lsrs	r3, r3, #20
 800b12c:	051b      	lsls	r3, r3, #20
 800b12e:	429a      	cmp	r2, r3
 800b130:	d1a1      	bne.n	800b076 <_strtod_l+0xa0e>
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 fdd7 	bl	8000ce8 <__aeabi_d2lz>
 800b13a:	f7f5 fa47 	bl	80005cc <__aeabi_l2d>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4640      	mov	r0, r8
 800b144:	4649      	mov	r1, r9
 800b146:	f7f5 f8b7 	bl	80002b8 <__aeabi_dsub>
 800b14a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b150:	ea43 030a 	orr.w	r3, r3, sl
 800b154:	4313      	orrs	r3, r2
 800b156:	4680      	mov	r8, r0
 800b158:	4689      	mov	r9, r1
 800b15a:	d055      	beq.n	800b208 <_strtod_l+0xba0>
 800b15c:	a336      	add	r3, pc, #216	; (adr r3, 800b238 <_strtod_l+0xbd0>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f7f5 fcd3 	bl	8000b0c <__aeabi_dcmplt>
 800b166:	2800      	cmp	r0, #0
 800b168:	f47f acd0 	bne.w	800ab0c <_strtod_l+0x4a4>
 800b16c:	a334      	add	r3, pc, #208	; (adr r3, 800b240 <_strtod_l+0xbd8>)
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	4640      	mov	r0, r8
 800b174:	4649      	mov	r1, r9
 800b176:	f7f5 fce7 	bl	8000b48 <__aeabi_dcmpgt>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	f43f af7b 	beq.w	800b076 <_strtod_l+0xa0e>
 800b180:	e4c4      	b.n	800ab0c <_strtod_l+0x4a4>
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	b333      	cbz	r3, 800b1d4 <_strtod_l+0xb6c>
 800b186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b188:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b18c:	d822      	bhi.n	800b1d4 <_strtod_l+0xb6c>
 800b18e:	a32e      	add	r3, pc, #184	; (adr r3, 800b248 <_strtod_l+0xbe0>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	4640      	mov	r0, r8
 800b196:	4649      	mov	r1, r9
 800b198:	f7f5 fcc2 	bl	8000b20 <__aeabi_dcmple>
 800b19c:	b1a0      	cbz	r0, 800b1c8 <_strtod_l+0xb60>
 800b19e:	4649      	mov	r1, r9
 800b1a0:	4640      	mov	r0, r8
 800b1a2:	f7f5 fd19 	bl	8000bd8 <__aeabi_d2uiz>
 800b1a6:	2801      	cmp	r0, #1
 800b1a8:	bf38      	it	cc
 800b1aa:	2001      	movcc	r0, #1
 800b1ac:	f7f5 f9c2 	bl	8000534 <__aeabi_ui2d>
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b2:	4680      	mov	r8, r0
 800b1b4:	4689      	mov	r9, r1
 800b1b6:	bb23      	cbnz	r3, 800b202 <_strtod_l+0xb9a>
 800b1b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1bc:	9010      	str	r0, [sp, #64]	; 0x40
 800b1be:	9311      	str	r3, [sp, #68]	; 0x44
 800b1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1d0:	1a9b      	subs	r3, r3, r2
 800b1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1dc:	eef0 0a68 	vmov.f32	s1, s17
 800b1e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1e4:	f002 f898 	bl	800d318 <__ulp>
 800b1e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1ec:	ec53 2b10 	vmov	r2, r3, d0
 800b1f0:	f7f5 fa1a 	bl	8000628 <__aeabi_dmul>
 800b1f4:	ec53 2b18 	vmov	r2, r3, d8
 800b1f8:	f7f5 f860 	bl	80002bc <__adddf3>
 800b1fc:	4682      	mov	sl, r0
 800b1fe:	468b      	mov	fp, r1
 800b200:	e78d      	b.n	800b11e <_strtod_l+0xab6>
 800b202:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b206:	e7db      	b.n	800b1c0 <_strtod_l+0xb58>
 800b208:	a311      	add	r3, pc, #68	; (adr r3, 800b250 <_strtod_l+0xbe8>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 fc7d 	bl	8000b0c <__aeabi_dcmplt>
 800b212:	e7b2      	b.n	800b17a <_strtod_l+0xb12>
 800b214:	2300      	movs	r3, #0
 800b216:	930a      	str	r3, [sp, #40]	; 0x28
 800b218:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b21a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	f7ff ba6b 	b.w	800a6f8 <_strtod_l+0x90>
 800b222:	2a65      	cmp	r2, #101	; 0x65
 800b224:	f43f ab5f 	beq.w	800a8e6 <_strtod_l+0x27e>
 800b228:	2a45      	cmp	r2, #69	; 0x45
 800b22a:	f43f ab5c 	beq.w	800a8e6 <_strtod_l+0x27e>
 800b22e:	2301      	movs	r3, #1
 800b230:	f7ff bb94 	b.w	800a95c <_strtod_l+0x2f4>
 800b234:	f3af 8000 	nop.w
 800b238:	94a03595 	.word	0x94a03595
 800b23c:	3fdfffff 	.word	0x3fdfffff
 800b240:	35afe535 	.word	0x35afe535
 800b244:	3fe00000 	.word	0x3fe00000
 800b248:	ffc00000 	.word	0xffc00000
 800b24c:	41dfffff 	.word	0x41dfffff
 800b250:	94a03595 	.word	0x94a03595
 800b254:	3fcfffff 	.word	0x3fcfffff
 800b258:	3ff00000 	.word	0x3ff00000
 800b25c:	7ff00000 	.word	0x7ff00000
 800b260:	7fe00000 	.word	0x7fe00000
 800b264:	7c9fffff 	.word	0x7c9fffff
 800b268:	3fe00000 	.word	0x3fe00000
 800b26c:	bff00000 	.word	0xbff00000
 800b270:	7fefffff 	.word	0x7fefffff

0800b274 <_strtod_r>:
 800b274:	4b01      	ldr	r3, [pc, #4]	; (800b27c <_strtod_r+0x8>)
 800b276:	f7ff b9f7 	b.w	800a668 <_strtod_l>
 800b27a:	bf00      	nop
 800b27c:	200000b4 	.word	0x200000b4

0800b280 <_strtol_l.constprop.0>:
 800b280:	2b01      	cmp	r3, #1
 800b282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b286:	d001      	beq.n	800b28c <_strtol_l.constprop.0+0xc>
 800b288:	2b24      	cmp	r3, #36	; 0x24
 800b28a:	d906      	bls.n	800b29a <_strtol_l.constprop.0+0x1a>
 800b28c:	f7fe f9e2 	bl	8009654 <__errno>
 800b290:	2316      	movs	r3, #22
 800b292:	6003      	str	r3, [r0, #0]
 800b294:	2000      	movs	r0, #0
 800b296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b380 <_strtol_l.constprop.0+0x100>
 800b29e:	460d      	mov	r5, r1
 800b2a0:	462e      	mov	r6, r5
 800b2a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b2aa:	f017 0708 	ands.w	r7, r7, #8
 800b2ae:	d1f7      	bne.n	800b2a0 <_strtol_l.constprop.0+0x20>
 800b2b0:	2c2d      	cmp	r4, #45	; 0x2d
 800b2b2:	d132      	bne.n	800b31a <_strtol_l.constprop.0+0x9a>
 800b2b4:	782c      	ldrb	r4, [r5, #0]
 800b2b6:	2701      	movs	r7, #1
 800b2b8:	1cb5      	adds	r5, r6, #2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d05b      	beq.n	800b376 <_strtol_l.constprop.0+0xf6>
 800b2be:	2b10      	cmp	r3, #16
 800b2c0:	d109      	bne.n	800b2d6 <_strtol_l.constprop.0+0x56>
 800b2c2:	2c30      	cmp	r4, #48	; 0x30
 800b2c4:	d107      	bne.n	800b2d6 <_strtol_l.constprop.0+0x56>
 800b2c6:	782c      	ldrb	r4, [r5, #0]
 800b2c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2cc:	2c58      	cmp	r4, #88	; 0x58
 800b2ce:	d14d      	bne.n	800b36c <_strtol_l.constprop.0+0xec>
 800b2d0:	786c      	ldrb	r4, [r5, #1]
 800b2d2:	2310      	movs	r3, #16
 800b2d4:	3502      	adds	r5, #2
 800b2d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b2de:	f04f 0c00 	mov.w	ip, #0
 800b2e2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2e6:	4666      	mov	r6, ip
 800b2e8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b2ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b2f0:	f1be 0f09 	cmp.w	lr, #9
 800b2f4:	d816      	bhi.n	800b324 <_strtol_l.constprop.0+0xa4>
 800b2f6:	4674      	mov	r4, lr
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	dd24      	ble.n	800b346 <_strtol_l.constprop.0+0xc6>
 800b2fc:	f1bc 0f00 	cmp.w	ip, #0
 800b300:	db1e      	blt.n	800b340 <_strtol_l.constprop.0+0xc0>
 800b302:	45b1      	cmp	r9, r6
 800b304:	d31c      	bcc.n	800b340 <_strtol_l.constprop.0+0xc0>
 800b306:	d101      	bne.n	800b30c <_strtol_l.constprop.0+0x8c>
 800b308:	45a2      	cmp	sl, r4
 800b30a:	db19      	blt.n	800b340 <_strtol_l.constprop.0+0xc0>
 800b30c:	fb06 4603 	mla	r6, r6, r3, r4
 800b310:	f04f 0c01 	mov.w	ip, #1
 800b314:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b318:	e7e8      	b.n	800b2ec <_strtol_l.constprop.0+0x6c>
 800b31a:	2c2b      	cmp	r4, #43	; 0x2b
 800b31c:	bf04      	itt	eq
 800b31e:	782c      	ldrbeq	r4, [r5, #0]
 800b320:	1cb5      	addeq	r5, r6, #2
 800b322:	e7ca      	b.n	800b2ba <_strtol_l.constprop.0+0x3a>
 800b324:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b328:	f1be 0f19 	cmp.w	lr, #25
 800b32c:	d801      	bhi.n	800b332 <_strtol_l.constprop.0+0xb2>
 800b32e:	3c37      	subs	r4, #55	; 0x37
 800b330:	e7e2      	b.n	800b2f8 <_strtol_l.constprop.0+0x78>
 800b332:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b336:	f1be 0f19 	cmp.w	lr, #25
 800b33a:	d804      	bhi.n	800b346 <_strtol_l.constprop.0+0xc6>
 800b33c:	3c57      	subs	r4, #87	; 0x57
 800b33e:	e7db      	b.n	800b2f8 <_strtol_l.constprop.0+0x78>
 800b340:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b344:	e7e6      	b.n	800b314 <_strtol_l.constprop.0+0x94>
 800b346:	f1bc 0f00 	cmp.w	ip, #0
 800b34a:	da05      	bge.n	800b358 <_strtol_l.constprop.0+0xd8>
 800b34c:	2322      	movs	r3, #34	; 0x22
 800b34e:	6003      	str	r3, [r0, #0]
 800b350:	4646      	mov	r6, r8
 800b352:	b942      	cbnz	r2, 800b366 <_strtol_l.constprop.0+0xe6>
 800b354:	4630      	mov	r0, r6
 800b356:	e79e      	b.n	800b296 <_strtol_l.constprop.0+0x16>
 800b358:	b107      	cbz	r7, 800b35c <_strtol_l.constprop.0+0xdc>
 800b35a:	4276      	negs	r6, r6
 800b35c:	2a00      	cmp	r2, #0
 800b35e:	d0f9      	beq.n	800b354 <_strtol_l.constprop.0+0xd4>
 800b360:	f1bc 0f00 	cmp.w	ip, #0
 800b364:	d000      	beq.n	800b368 <_strtol_l.constprop.0+0xe8>
 800b366:	1e69      	subs	r1, r5, #1
 800b368:	6011      	str	r1, [r2, #0]
 800b36a:	e7f3      	b.n	800b354 <_strtol_l.constprop.0+0xd4>
 800b36c:	2430      	movs	r4, #48	; 0x30
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1b1      	bne.n	800b2d6 <_strtol_l.constprop.0+0x56>
 800b372:	2308      	movs	r3, #8
 800b374:	e7af      	b.n	800b2d6 <_strtol_l.constprop.0+0x56>
 800b376:	2c30      	cmp	r4, #48	; 0x30
 800b378:	d0a5      	beq.n	800b2c6 <_strtol_l.constprop.0+0x46>
 800b37a:	230a      	movs	r3, #10
 800b37c:	e7ab      	b.n	800b2d6 <_strtol_l.constprop.0+0x56>
 800b37e:	bf00      	nop
 800b380:	0800f879 	.word	0x0800f879

0800b384 <_strtol_r>:
 800b384:	f7ff bf7c 	b.w	800b280 <_strtol_l.constprop.0>

0800b388 <quorem>:
 800b388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b38c:	6903      	ldr	r3, [r0, #16]
 800b38e:	690c      	ldr	r4, [r1, #16]
 800b390:	42a3      	cmp	r3, r4
 800b392:	4607      	mov	r7, r0
 800b394:	f2c0 8081 	blt.w	800b49a <quorem+0x112>
 800b398:	3c01      	subs	r4, #1
 800b39a:	f101 0814 	add.w	r8, r1, #20
 800b39e:	f100 0514 	add.w	r5, r0, #20
 800b3a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3c0:	d331      	bcc.n	800b426 <quorem+0x9e>
 800b3c2:	f04f 0e00 	mov.w	lr, #0
 800b3c6:	4640      	mov	r0, r8
 800b3c8:	46ac      	mov	ip, r5
 800b3ca:	46f2      	mov	sl, lr
 800b3cc:	f850 2b04 	ldr.w	r2, [r0], #4
 800b3d0:	b293      	uxth	r3, r2
 800b3d2:	fb06 e303 	mla	r3, r6, r3, lr
 800b3d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	ebaa 0303 	sub.w	r3, sl, r3
 800b3e0:	f8dc a000 	ldr.w	sl, [ip]
 800b3e4:	0c12      	lsrs	r2, r2, #16
 800b3e6:	fa13 f38a 	uxtah	r3, r3, sl
 800b3ea:	fb06 e202 	mla	r2, r6, r2, lr
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	9b00      	ldr	r3, [sp, #0]
 800b3f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b3f6:	b292      	uxth	r2, r2
 800b3f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b3fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b400:	f8bd 3000 	ldrh.w	r3, [sp]
 800b404:	4581      	cmp	r9, r0
 800b406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b40a:	f84c 3b04 	str.w	r3, [ip], #4
 800b40e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b412:	d2db      	bcs.n	800b3cc <quorem+0x44>
 800b414:	f855 300b 	ldr.w	r3, [r5, fp]
 800b418:	b92b      	cbnz	r3, 800b426 <quorem+0x9e>
 800b41a:	9b01      	ldr	r3, [sp, #4]
 800b41c:	3b04      	subs	r3, #4
 800b41e:	429d      	cmp	r5, r3
 800b420:	461a      	mov	r2, r3
 800b422:	d32e      	bcc.n	800b482 <quorem+0xfa>
 800b424:	613c      	str	r4, [r7, #16]
 800b426:	4638      	mov	r0, r7
 800b428:	f001 fed0 	bl	800d1cc <__mcmp>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	db24      	blt.n	800b47a <quorem+0xf2>
 800b430:	3601      	adds	r6, #1
 800b432:	4628      	mov	r0, r5
 800b434:	f04f 0c00 	mov.w	ip, #0
 800b438:	f858 2b04 	ldr.w	r2, [r8], #4
 800b43c:	f8d0 e000 	ldr.w	lr, [r0]
 800b440:	b293      	uxth	r3, r2
 800b442:	ebac 0303 	sub.w	r3, ip, r3
 800b446:	0c12      	lsrs	r2, r2, #16
 800b448:	fa13 f38e 	uxtah	r3, r3, lr
 800b44c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b454:	b29b      	uxth	r3, r3
 800b456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b45a:	45c1      	cmp	r9, r8
 800b45c:	f840 3b04 	str.w	r3, [r0], #4
 800b460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b464:	d2e8      	bcs.n	800b438 <quorem+0xb0>
 800b466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b46a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b46e:	b922      	cbnz	r2, 800b47a <quorem+0xf2>
 800b470:	3b04      	subs	r3, #4
 800b472:	429d      	cmp	r5, r3
 800b474:	461a      	mov	r2, r3
 800b476:	d30a      	bcc.n	800b48e <quorem+0x106>
 800b478:	613c      	str	r4, [r7, #16]
 800b47a:	4630      	mov	r0, r6
 800b47c:	b003      	add	sp, #12
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	6812      	ldr	r2, [r2, #0]
 800b484:	3b04      	subs	r3, #4
 800b486:	2a00      	cmp	r2, #0
 800b488:	d1cc      	bne.n	800b424 <quorem+0x9c>
 800b48a:	3c01      	subs	r4, #1
 800b48c:	e7c7      	b.n	800b41e <quorem+0x96>
 800b48e:	6812      	ldr	r2, [r2, #0]
 800b490:	3b04      	subs	r3, #4
 800b492:	2a00      	cmp	r2, #0
 800b494:	d1f0      	bne.n	800b478 <quorem+0xf0>
 800b496:	3c01      	subs	r4, #1
 800b498:	e7eb      	b.n	800b472 <quorem+0xea>
 800b49a:	2000      	movs	r0, #0
 800b49c:	e7ee      	b.n	800b47c <quorem+0xf4>
	...

0800b4a0 <_dtoa_r>:
 800b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	ed2d 8b04 	vpush	{d8-d9}
 800b4a8:	ec57 6b10 	vmov	r6, r7, d0
 800b4ac:	b093      	sub	sp, #76	; 0x4c
 800b4ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4b4:	9106      	str	r1, [sp, #24]
 800b4b6:	ee10 aa10 	vmov	sl, s0
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800b4be:	930c      	str	r3, [sp, #48]	; 0x30
 800b4c0:	46bb      	mov	fp, r7
 800b4c2:	b975      	cbnz	r5, 800b4e2 <_dtoa_r+0x42>
 800b4c4:	2010      	movs	r0, #16
 800b4c6:	f001 fb9b 	bl	800cc00 <malloc>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	6260      	str	r0, [r4, #36]	; 0x24
 800b4ce:	b920      	cbnz	r0, 800b4da <_dtoa_r+0x3a>
 800b4d0:	4ba7      	ldr	r3, [pc, #668]	; (800b770 <_dtoa_r+0x2d0>)
 800b4d2:	21ea      	movs	r1, #234	; 0xea
 800b4d4:	48a7      	ldr	r0, [pc, #668]	; (800b774 <_dtoa_r+0x2d4>)
 800b4d6:	f003 fae5 	bl	800eaa4 <__assert_func>
 800b4da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b4de:	6005      	str	r5, [r0, #0]
 800b4e0:	60c5      	str	r5, [r0, #12]
 800b4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e4:	6819      	ldr	r1, [r3, #0]
 800b4e6:	b151      	cbz	r1, 800b4fe <_dtoa_r+0x5e>
 800b4e8:	685a      	ldr	r2, [r3, #4]
 800b4ea:	604a      	str	r2, [r1, #4]
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	4093      	lsls	r3, r2
 800b4f0:	608b      	str	r3, [r1, #8]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f001 fbde 	bl	800ccb4 <_Bfree>
 800b4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
 800b4fe:	1e3b      	subs	r3, r7, #0
 800b500:	bfaa      	itet	ge
 800b502:	2300      	movge	r3, #0
 800b504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b508:	f8c8 3000 	strge.w	r3, [r8]
 800b50c:	4b9a      	ldr	r3, [pc, #616]	; (800b778 <_dtoa_r+0x2d8>)
 800b50e:	bfbc      	itt	lt
 800b510:	2201      	movlt	r2, #1
 800b512:	f8c8 2000 	strlt.w	r2, [r8]
 800b516:	ea33 030b 	bics.w	r3, r3, fp
 800b51a:	d11b      	bne.n	800b554 <_dtoa_r+0xb4>
 800b51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b51e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b528:	4333      	orrs	r3, r6
 800b52a:	f000 8592 	beq.w	800c052 <_dtoa_r+0xbb2>
 800b52e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b530:	b963      	cbnz	r3, 800b54c <_dtoa_r+0xac>
 800b532:	4b92      	ldr	r3, [pc, #584]	; (800b77c <_dtoa_r+0x2dc>)
 800b534:	e022      	b.n	800b57c <_dtoa_r+0xdc>
 800b536:	4b92      	ldr	r3, [pc, #584]	; (800b780 <_dtoa_r+0x2e0>)
 800b538:	9301      	str	r3, [sp, #4]
 800b53a:	3308      	adds	r3, #8
 800b53c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	9801      	ldr	r0, [sp, #4]
 800b542:	b013      	add	sp, #76	; 0x4c
 800b544:	ecbd 8b04 	vpop	{d8-d9}
 800b548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b54c:	4b8b      	ldr	r3, [pc, #556]	; (800b77c <_dtoa_r+0x2dc>)
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	3303      	adds	r3, #3
 800b552:	e7f3      	b.n	800b53c <_dtoa_r+0x9c>
 800b554:	2200      	movs	r2, #0
 800b556:	2300      	movs	r3, #0
 800b558:	4650      	mov	r0, sl
 800b55a:	4659      	mov	r1, fp
 800b55c:	f7f5 facc 	bl	8000af8 <__aeabi_dcmpeq>
 800b560:	ec4b ab19 	vmov	d9, sl, fp
 800b564:	4680      	mov	r8, r0
 800b566:	b158      	cbz	r0, 800b580 <_dtoa_r+0xe0>
 800b568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b56a:	2301      	movs	r3, #1
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 856b 	beq.w	800c04c <_dtoa_r+0xbac>
 800b576:	4883      	ldr	r0, [pc, #524]	; (800b784 <_dtoa_r+0x2e4>)
 800b578:	6018      	str	r0, [r3, #0]
 800b57a:	1e43      	subs	r3, r0, #1
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	e7df      	b.n	800b540 <_dtoa_r+0xa0>
 800b580:	ec4b ab10 	vmov	d0, sl, fp
 800b584:	aa10      	add	r2, sp, #64	; 0x40
 800b586:	a911      	add	r1, sp, #68	; 0x44
 800b588:	4620      	mov	r0, r4
 800b58a:	f001 ff41 	bl	800d410 <__d2b>
 800b58e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b592:	ee08 0a10 	vmov	s16, r0
 800b596:	2d00      	cmp	r5, #0
 800b598:	f000 8084 	beq.w	800b6a4 <_dtoa_r+0x204>
 800b59c:	ee19 3a90 	vmov	r3, s19
 800b5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5a8:	4656      	mov	r6, sl
 800b5aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b5b6:	4b74      	ldr	r3, [pc, #464]	; (800b788 <_dtoa_r+0x2e8>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	4639      	mov	r1, r7
 800b5be:	f7f4 fe7b 	bl	80002b8 <__aeabi_dsub>
 800b5c2:	a365      	add	r3, pc, #404	; (adr r3, 800b758 <_dtoa_r+0x2b8>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	f7f5 f82e 	bl	8000628 <__aeabi_dmul>
 800b5cc:	a364      	add	r3, pc, #400	; (adr r3, 800b760 <_dtoa_r+0x2c0>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	f7f4 fe73 	bl	80002bc <__adddf3>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	4628      	mov	r0, r5
 800b5da:	460f      	mov	r7, r1
 800b5dc:	f7f4 ffba 	bl	8000554 <__aeabi_i2d>
 800b5e0:	a361      	add	r3, pc, #388	; (adr r3, 800b768 <_dtoa_r+0x2c8>)
 800b5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e6:	f7f5 f81f 	bl	8000628 <__aeabi_dmul>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	4639      	mov	r1, r7
 800b5f2:	f7f4 fe63 	bl	80002bc <__adddf3>
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	f7f5 fac5 	bl	8000b88 <__aeabi_d2iz>
 800b5fe:	2200      	movs	r2, #0
 800b600:	9000      	str	r0, [sp, #0]
 800b602:	2300      	movs	r3, #0
 800b604:	4630      	mov	r0, r6
 800b606:	4639      	mov	r1, r7
 800b608:	f7f5 fa80 	bl	8000b0c <__aeabi_dcmplt>
 800b60c:	b150      	cbz	r0, 800b624 <_dtoa_r+0x184>
 800b60e:	9800      	ldr	r0, [sp, #0]
 800b610:	f7f4 ffa0 	bl	8000554 <__aeabi_i2d>
 800b614:	4632      	mov	r2, r6
 800b616:	463b      	mov	r3, r7
 800b618:	f7f5 fa6e 	bl	8000af8 <__aeabi_dcmpeq>
 800b61c:	b910      	cbnz	r0, 800b624 <_dtoa_r+0x184>
 800b61e:	9b00      	ldr	r3, [sp, #0]
 800b620:	3b01      	subs	r3, #1
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	9b00      	ldr	r3, [sp, #0]
 800b626:	2b16      	cmp	r3, #22
 800b628:	d85a      	bhi.n	800b6e0 <_dtoa_r+0x240>
 800b62a:	9a00      	ldr	r2, [sp, #0]
 800b62c:	4b57      	ldr	r3, [pc, #348]	; (800b78c <_dtoa_r+0x2ec>)
 800b62e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	ec51 0b19 	vmov	r0, r1, d9
 800b63a:	f7f5 fa67 	bl	8000b0c <__aeabi_dcmplt>
 800b63e:	2800      	cmp	r0, #0
 800b640:	d050      	beq.n	800b6e4 <_dtoa_r+0x244>
 800b642:	9b00      	ldr	r3, [sp, #0]
 800b644:	3b01      	subs	r3, #1
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	2300      	movs	r3, #0
 800b64a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b64e:	1b5d      	subs	r5, r3, r5
 800b650:	1e6b      	subs	r3, r5, #1
 800b652:	9305      	str	r3, [sp, #20]
 800b654:	bf45      	ittet	mi
 800b656:	f1c5 0301 	rsbmi	r3, r5, #1
 800b65a:	9304      	strmi	r3, [sp, #16]
 800b65c:	2300      	movpl	r3, #0
 800b65e:	2300      	movmi	r3, #0
 800b660:	bf4c      	ite	mi
 800b662:	9305      	strmi	r3, [sp, #20]
 800b664:	9304      	strpl	r3, [sp, #16]
 800b666:	9b00      	ldr	r3, [sp, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	db3d      	blt.n	800b6e8 <_dtoa_r+0x248>
 800b66c:	9b05      	ldr	r3, [sp, #20]
 800b66e:	9a00      	ldr	r2, [sp, #0]
 800b670:	920a      	str	r2, [sp, #40]	; 0x28
 800b672:	4413      	add	r3, r2
 800b674:	9305      	str	r3, [sp, #20]
 800b676:	2300      	movs	r3, #0
 800b678:	9307      	str	r3, [sp, #28]
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	2b09      	cmp	r3, #9
 800b67e:	f200 8089 	bhi.w	800b794 <_dtoa_r+0x2f4>
 800b682:	2b05      	cmp	r3, #5
 800b684:	bfc4      	itt	gt
 800b686:	3b04      	subgt	r3, #4
 800b688:	9306      	strgt	r3, [sp, #24]
 800b68a:	9b06      	ldr	r3, [sp, #24]
 800b68c:	f1a3 0302 	sub.w	r3, r3, #2
 800b690:	bfcc      	ite	gt
 800b692:	2500      	movgt	r5, #0
 800b694:	2501      	movle	r5, #1
 800b696:	2b03      	cmp	r3, #3
 800b698:	f200 8087 	bhi.w	800b7aa <_dtoa_r+0x30a>
 800b69c:	e8df f003 	tbb	[pc, r3]
 800b6a0:	59383a2d 	.word	0x59383a2d
 800b6a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b6a8:	441d      	add	r5, r3
 800b6aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6ae:	2b20      	cmp	r3, #32
 800b6b0:	bfc1      	itttt	gt
 800b6b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800b6be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6c2:	bfda      	itte	le
 800b6c4:	f1c3 0320 	rsble	r3, r3, #32
 800b6c8:	fa06 f003 	lslle.w	r0, r6, r3
 800b6cc:	4318      	orrgt	r0, r3
 800b6ce:	f7f4 ff31 	bl	8000534 <__aeabi_ui2d>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b6da:	3d01      	subs	r5, #1
 800b6dc:	930e      	str	r3, [sp, #56]	; 0x38
 800b6de:	e76a      	b.n	800b5b6 <_dtoa_r+0x116>
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e7b2      	b.n	800b64a <_dtoa_r+0x1aa>
 800b6e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b6e6:	e7b1      	b.n	800b64c <_dtoa_r+0x1ac>
 800b6e8:	9b04      	ldr	r3, [sp, #16]
 800b6ea:	9a00      	ldr	r2, [sp, #0]
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	9304      	str	r3, [sp, #16]
 800b6f0:	4253      	negs	r3, r2
 800b6f2:	9307      	str	r3, [sp, #28]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6f8:	e7bf      	b.n	800b67a <_dtoa_r+0x1da>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	9308      	str	r3, [sp, #32]
 800b6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b700:	2b00      	cmp	r3, #0
 800b702:	dc55      	bgt.n	800b7b0 <_dtoa_r+0x310>
 800b704:	2301      	movs	r3, #1
 800b706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b70a:	461a      	mov	r2, r3
 800b70c:	9209      	str	r2, [sp, #36]	; 0x24
 800b70e:	e00c      	b.n	800b72a <_dtoa_r+0x28a>
 800b710:	2301      	movs	r3, #1
 800b712:	e7f3      	b.n	800b6fc <_dtoa_r+0x25c>
 800b714:	2300      	movs	r3, #0
 800b716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b718:	9308      	str	r3, [sp, #32]
 800b71a:	9b00      	ldr	r3, [sp, #0]
 800b71c:	4413      	add	r3, r2
 800b71e:	9302      	str	r3, [sp, #8]
 800b720:	3301      	adds	r3, #1
 800b722:	2b01      	cmp	r3, #1
 800b724:	9303      	str	r3, [sp, #12]
 800b726:	bfb8      	it	lt
 800b728:	2301      	movlt	r3, #1
 800b72a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b72c:	2200      	movs	r2, #0
 800b72e:	6042      	str	r2, [r0, #4]
 800b730:	2204      	movs	r2, #4
 800b732:	f102 0614 	add.w	r6, r2, #20
 800b736:	429e      	cmp	r6, r3
 800b738:	6841      	ldr	r1, [r0, #4]
 800b73a:	d93d      	bls.n	800b7b8 <_dtoa_r+0x318>
 800b73c:	4620      	mov	r0, r4
 800b73e:	f001 fa79 	bl	800cc34 <_Balloc>
 800b742:	9001      	str	r0, [sp, #4]
 800b744:	2800      	cmp	r0, #0
 800b746:	d13b      	bne.n	800b7c0 <_dtoa_r+0x320>
 800b748:	4b11      	ldr	r3, [pc, #68]	; (800b790 <_dtoa_r+0x2f0>)
 800b74a:	4602      	mov	r2, r0
 800b74c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b750:	e6c0      	b.n	800b4d4 <_dtoa_r+0x34>
 800b752:	2301      	movs	r3, #1
 800b754:	e7df      	b.n	800b716 <_dtoa_r+0x276>
 800b756:	bf00      	nop
 800b758:	636f4361 	.word	0x636f4361
 800b75c:	3fd287a7 	.word	0x3fd287a7
 800b760:	8b60c8b3 	.word	0x8b60c8b3
 800b764:	3fc68a28 	.word	0x3fc68a28
 800b768:	509f79fb 	.word	0x509f79fb
 800b76c:	3fd34413 	.word	0x3fd34413
 800b770:	0800f986 	.word	0x0800f986
 800b774:	0800f99d 	.word	0x0800f99d
 800b778:	7ff00000 	.word	0x7ff00000
 800b77c:	0800f982 	.word	0x0800f982
 800b780:	0800f979 	.word	0x0800f979
 800b784:	0800fc5a 	.word	0x0800fc5a
 800b788:	3ff80000 	.word	0x3ff80000
 800b78c:	0800fb70 	.word	0x0800fb70
 800b790:	0800f9f8 	.word	0x0800f9f8
 800b794:	2501      	movs	r5, #1
 800b796:	2300      	movs	r3, #0
 800b798:	9306      	str	r3, [sp, #24]
 800b79a:	9508      	str	r5, [sp, #32]
 800b79c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	2312      	movs	r3, #18
 800b7a8:	e7b0      	b.n	800b70c <_dtoa_r+0x26c>
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	9308      	str	r3, [sp, #32]
 800b7ae:	e7f5      	b.n	800b79c <_dtoa_r+0x2fc>
 800b7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7b6:	e7b8      	b.n	800b72a <_dtoa_r+0x28a>
 800b7b8:	3101      	adds	r1, #1
 800b7ba:	6041      	str	r1, [r0, #4]
 800b7bc:	0052      	lsls	r2, r2, #1
 800b7be:	e7b8      	b.n	800b732 <_dtoa_r+0x292>
 800b7c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7c2:	9a01      	ldr	r2, [sp, #4]
 800b7c4:	601a      	str	r2, [r3, #0]
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	2b0e      	cmp	r3, #14
 800b7ca:	f200 809d 	bhi.w	800b908 <_dtoa_r+0x468>
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	f000 809a 	beq.w	800b908 <_dtoa_r+0x468>
 800b7d4:	9b00      	ldr	r3, [sp, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	dd32      	ble.n	800b840 <_dtoa_r+0x3a0>
 800b7da:	4ab7      	ldr	r2, [pc, #732]	; (800bab8 <_dtoa_r+0x618>)
 800b7dc:	f003 030f 	and.w	r3, r3, #15
 800b7e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b7e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b7e8:	9b00      	ldr	r3, [sp, #0]
 800b7ea:	05d8      	lsls	r0, r3, #23
 800b7ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b7f0:	d516      	bpl.n	800b820 <_dtoa_r+0x380>
 800b7f2:	4bb2      	ldr	r3, [pc, #712]	; (800babc <_dtoa_r+0x61c>)
 800b7f4:	ec51 0b19 	vmov	r0, r1, d9
 800b7f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b7fc:	f7f5 f83e 	bl	800087c <__aeabi_ddiv>
 800b800:	f007 070f 	and.w	r7, r7, #15
 800b804:	4682      	mov	sl, r0
 800b806:	468b      	mov	fp, r1
 800b808:	2503      	movs	r5, #3
 800b80a:	4eac      	ldr	r6, [pc, #688]	; (800babc <_dtoa_r+0x61c>)
 800b80c:	b957      	cbnz	r7, 800b824 <_dtoa_r+0x384>
 800b80e:	4642      	mov	r2, r8
 800b810:	464b      	mov	r3, r9
 800b812:	4650      	mov	r0, sl
 800b814:	4659      	mov	r1, fp
 800b816:	f7f5 f831 	bl	800087c <__aeabi_ddiv>
 800b81a:	4682      	mov	sl, r0
 800b81c:	468b      	mov	fp, r1
 800b81e:	e028      	b.n	800b872 <_dtoa_r+0x3d2>
 800b820:	2502      	movs	r5, #2
 800b822:	e7f2      	b.n	800b80a <_dtoa_r+0x36a>
 800b824:	07f9      	lsls	r1, r7, #31
 800b826:	d508      	bpl.n	800b83a <_dtoa_r+0x39a>
 800b828:	4640      	mov	r0, r8
 800b82a:	4649      	mov	r1, r9
 800b82c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b830:	f7f4 fefa 	bl	8000628 <__aeabi_dmul>
 800b834:	3501      	adds	r5, #1
 800b836:	4680      	mov	r8, r0
 800b838:	4689      	mov	r9, r1
 800b83a:	107f      	asrs	r7, r7, #1
 800b83c:	3608      	adds	r6, #8
 800b83e:	e7e5      	b.n	800b80c <_dtoa_r+0x36c>
 800b840:	f000 809b 	beq.w	800b97a <_dtoa_r+0x4da>
 800b844:	9b00      	ldr	r3, [sp, #0]
 800b846:	4f9d      	ldr	r7, [pc, #628]	; (800babc <_dtoa_r+0x61c>)
 800b848:	425e      	negs	r6, r3
 800b84a:	4b9b      	ldr	r3, [pc, #620]	; (800bab8 <_dtoa_r+0x618>)
 800b84c:	f006 020f 	and.w	r2, r6, #15
 800b850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	ec51 0b19 	vmov	r0, r1, d9
 800b85c:	f7f4 fee4 	bl	8000628 <__aeabi_dmul>
 800b860:	1136      	asrs	r6, r6, #4
 800b862:	4682      	mov	sl, r0
 800b864:	468b      	mov	fp, r1
 800b866:	2300      	movs	r3, #0
 800b868:	2502      	movs	r5, #2
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	d17a      	bne.n	800b964 <_dtoa_r+0x4c4>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1d3      	bne.n	800b81a <_dtoa_r+0x37a>
 800b872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 8082 	beq.w	800b97e <_dtoa_r+0x4de>
 800b87a:	4b91      	ldr	r3, [pc, #580]	; (800bac0 <_dtoa_r+0x620>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	4650      	mov	r0, sl
 800b880:	4659      	mov	r1, fp
 800b882:	f7f5 f943 	bl	8000b0c <__aeabi_dcmplt>
 800b886:	2800      	cmp	r0, #0
 800b888:	d079      	beq.n	800b97e <_dtoa_r+0x4de>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d076      	beq.n	800b97e <_dtoa_r+0x4de>
 800b890:	9b02      	ldr	r3, [sp, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	dd36      	ble.n	800b904 <_dtoa_r+0x464>
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	4650      	mov	r0, sl
 800b89a:	4659      	mov	r1, fp
 800b89c:	1e5f      	subs	r7, r3, #1
 800b89e:	2200      	movs	r2, #0
 800b8a0:	4b88      	ldr	r3, [pc, #544]	; (800bac4 <_dtoa_r+0x624>)
 800b8a2:	f7f4 fec1 	bl	8000628 <__aeabi_dmul>
 800b8a6:	9e02      	ldr	r6, [sp, #8]
 800b8a8:	4682      	mov	sl, r0
 800b8aa:	468b      	mov	fp, r1
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7f4 fe50 	bl	8000554 <__aeabi_i2d>
 800b8b4:	4652      	mov	r2, sl
 800b8b6:	465b      	mov	r3, fp
 800b8b8:	f7f4 feb6 	bl	8000628 <__aeabi_dmul>
 800b8bc:	4b82      	ldr	r3, [pc, #520]	; (800bac8 <_dtoa_r+0x628>)
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f7f4 fcfc 	bl	80002bc <__adddf3>
 800b8c4:	46d0      	mov	r8, sl
 800b8c6:	46d9      	mov	r9, fp
 800b8c8:	4682      	mov	sl, r0
 800b8ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b8ce:	2e00      	cmp	r6, #0
 800b8d0:	d158      	bne.n	800b984 <_dtoa_r+0x4e4>
 800b8d2:	4b7e      	ldr	r3, [pc, #504]	; (800bacc <_dtoa_r+0x62c>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	4649      	mov	r1, r9
 800b8da:	f7f4 fced 	bl	80002b8 <__aeabi_dsub>
 800b8de:	4652      	mov	r2, sl
 800b8e0:	465b      	mov	r3, fp
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	4689      	mov	r9, r1
 800b8e6:	f7f5 f92f 	bl	8000b48 <__aeabi_dcmpgt>
 800b8ea:	2800      	cmp	r0, #0
 800b8ec:	f040 8295 	bne.w	800be1a <_dtoa_r+0x97a>
 800b8f0:	4652      	mov	r2, sl
 800b8f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	f7f5 f907 	bl	8000b0c <__aeabi_dcmplt>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	f040 8289 	bne.w	800be16 <_dtoa_r+0x976>
 800b904:	ec5b ab19 	vmov	sl, fp, d9
 800b908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f2c0 8148 	blt.w	800bba0 <_dtoa_r+0x700>
 800b910:	9a00      	ldr	r2, [sp, #0]
 800b912:	2a0e      	cmp	r2, #14
 800b914:	f300 8144 	bgt.w	800bba0 <_dtoa_r+0x700>
 800b918:	4b67      	ldr	r3, [pc, #412]	; (800bab8 <_dtoa_r+0x618>)
 800b91a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b91e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b924:	2b00      	cmp	r3, #0
 800b926:	f280 80d5 	bge.w	800bad4 <_dtoa_r+0x634>
 800b92a:	9b03      	ldr	r3, [sp, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f300 80d1 	bgt.w	800bad4 <_dtoa_r+0x634>
 800b932:	f040 826f 	bne.w	800be14 <_dtoa_r+0x974>
 800b936:	4b65      	ldr	r3, [pc, #404]	; (800bacc <_dtoa_r+0x62c>)
 800b938:	2200      	movs	r2, #0
 800b93a:	4640      	mov	r0, r8
 800b93c:	4649      	mov	r1, r9
 800b93e:	f7f4 fe73 	bl	8000628 <__aeabi_dmul>
 800b942:	4652      	mov	r2, sl
 800b944:	465b      	mov	r3, fp
 800b946:	f7f5 f8f5 	bl	8000b34 <__aeabi_dcmpge>
 800b94a:	9e03      	ldr	r6, [sp, #12]
 800b94c:	4637      	mov	r7, r6
 800b94e:	2800      	cmp	r0, #0
 800b950:	f040 8245 	bne.w	800bdde <_dtoa_r+0x93e>
 800b954:	9d01      	ldr	r5, [sp, #4]
 800b956:	2331      	movs	r3, #49	; 0x31
 800b958:	f805 3b01 	strb.w	r3, [r5], #1
 800b95c:	9b00      	ldr	r3, [sp, #0]
 800b95e:	3301      	adds	r3, #1
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	e240      	b.n	800bde6 <_dtoa_r+0x946>
 800b964:	07f2      	lsls	r2, r6, #31
 800b966:	d505      	bpl.n	800b974 <_dtoa_r+0x4d4>
 800b968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96c:	f7f4 fe5c 	bl	8000628 <__aeabi_dmul>
 800b970:	3501      	adds	r5, #1
 800b972:	2301      	movs	r3, #1
 800b974:	1076      	asrs	r6, r6, #1
 800b976:	3708      	adds	r7, #8
 800b978:	e777      	b.n	800b86a <_dtoa_r+0x3ca>
 800b97a:	2502      	movs	r5, #2
 800b97c:	e779      	b.n	800b872 <_dtoa_r+0x3d2>
 800b97e:	9f00      	ldr	r7, [sp, #0]
 800b980:	9e03      	ldr	r6, [sp, #12]
 800b982:	e794      	b.n	800b8ae <_dtoa_r+0x40e>
 800b984:	9901      	ldr	r1, [sp, #4]
 800b986:	4b4c      	ldr	r3, [pc, #304]	; (800bab8 <_dtoa_r+0x618>)
 800b988:	4431      	add	r1, r6
 800b98a:	910d      	str	r1, [sp, #52]	; 0x34
 800b98c:	9908      	ldr	r1, [sp, #32]
 800b98e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b996:	2900      	cmp	r1, #0
 800b998:	d043      	beq.n	800ba22 <_dtoa_r+0x582>
 800b99a:	494d      	ldr	r1, [pc, #308]	; (800bad0 <_dtoa_r+0x630>)
 800b99c:	2000      	movs	r0, #0
 800b99e:	f7f4 ff6d 	bl	800087c <__aeabi_ddiv>
 800b9a2:	4652      	mov	r2, sl
 800b9a4:	465b      	mov	r3, fp
 800b9a6:	f7f4 fc87 	bl	80002b8 <__aeabi_dsub>
 800b9aa:	9d01      	ldr	r5, [sp, #4]
 800b9ac:	4682      	mov	sl, r0
 800b9ae:	468b      	mov	fp, r1
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f7f5 f8e8 	bl	8000b88 <__aeabi_d2iz>
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	f7f4 fdcb 	bl	8000554 <__aeabi_i2d>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f4 fc77 	bl	80002b8 <__aeabi_dsub>
 800b9ca:	3630      	adds	r6, #48	; 0x30
 800b9cc:	f805 6b01 	strb.w	r6, [r5], #1
 800b9d0:	4652      	mov	r2, sl
 800b9d2:	465b      	mov	r3, fp
 800b9d4:	4680      	mov	r8, r0
 800b9d6:	4689      	mov	r9, r1
 800b9d8:	f7f5 f898 	bl	8000b0c <__aeabi_dcmplt>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d163      	bne.n	800baa8 <_dtoa_r+0x608>
 800b9e0:	4642      	mov	r2, r8
 800b9e2:	464b      	mov	r3, r9
 800b9e4:	4936      	ldr	r1, [pc, #216]	; (800bac0 <_dtoa_r+0x620>)
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	f7f4 fc66 	bl	80002b8 <__aeabi_dsub>
 800b9ec:	4652      	mov	r2, sl
 800b9ee:	465b      	mov	r3, fp
 800b9f0:	f7f5 f88c 	bl	8000b0c <__aeabi_dcmplt>
 800b9f4:	2800      	cmp	r0, #0
 800b9f6:	f040 80b5 	bne.w	800bb64 <_dtoa_r+0x6c4>
 800b9fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9fc:	429d      	cmp	r5, r3
 800b9fe:	d081      	beq.n	800b904 <_dtoa_r+0x464>
 800ba00:	4b30      	ldr	r3, [pc, #192]	; (800bac4 <_dtoa_r+0x624>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	4650      	mov	r0, sl
 800ba06:	4659      	mov	r1, fp
 800ba08:	f7f4 fe0e 	bl	8000628 <__aeabi_dmul>
 800ba0c:	4b2d      	ldr	r3, [pc, #180]	; (800bac4 <_dtoa_r+0x624>)
 800ba0e:	4682      	mov	sl, r0
 800ba10:	468b      	mov	fp, r1
 800ba12:	4640      	mov	r0, r8
 800ba14:	4649      	mov	r1, r9
 800ba16:	2200      	movs	r2, #0
 800ba18:	f7f4 fe06 	bl	8000628 <__aeabi_dmul>
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	4689      	mov	r9, r1
 800ba20:	e7c6      	b.n	800b9b0 <_dtoa_r+0x510>
 800ba22:	4650      	mov	r0, sl
 800ba24:	4659      	mov	r1, fp
 800ba26:	f7f4 fdff 	bl	8000628 <__aeabi_dmul>
 800ba2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba2c:	9d01      	ldr	r5, [sp, #4]
 800ba2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba30:	4682      	mov	sl, r0
 800ba32:	468b      	mov	fp, r1
 800ba34:	4649      	mov	r1, r9
 800ba36:	4640      	mov	r0, r8
 800ba38:	f7f5 f8a6 	bl	8000b88 <__aeabi_d2iz>
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	f7f4 fd89 	bl	8000554 <__aeabi_i2d>
 800ba42:	3630      	adds	r6, #48	; 0x30
 800ba44:	4602      	mov	r2, r0
 800ba46:	460b      	mov	r3, r1
 800ba48:	4640      	mov	r0, r8
 800ba4a:	4649      	mov	r1, r9
 800ba4c:	f7f4 fc34 	bl	80002b8 <__aeabi_dsub>
 800ba50:	f805 6b01 	strb.w	r6, [r5], #1
 800ba54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba56:	429d      	cmp	r5, r3
 800ba58:	4680      	mov	r8, r0
 800ba5a:	4689      	mov	r9, r1
 800ba5c:	f04f 0200 	mov.w	r2, #0
 800ba60:	d124      	bne.n	800baac <_dtoa_r+0x60c>
 800ba62:	4b1b      	ldr	r3, [pc, #108]	; (800bad0 <_dtoa_r+0x630>)
 800ba64:	4650      	mov	r0, sl
 800ba66:	4659      	mov	r1, fp
 800ba68:	f7f4 fc28 	bl	80002bc <__adddf3>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4640      	mov	r0, r8
 800ba72:	4649      	mov	r1, r9
 800ba74:	f7f5 f868 	bl	8000b48 <__aeabi_dcmpgt>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d173      	bne.n	800bb64 <_dtoa_r+0x6c4>
 800ba7c:	4652      	mov	r2, sl
 800ba7e:	465b      	mov	r3, fp
 800ba80:	4913      	ldr	r1, [pc, #76]	; (800bad0 <_dtoa_r+0x630>)
 800ba82:	2000      	movs	r0, #0
 800ba84:	f7f4 fc18 	bl	80002b8 <__aeabi_dsub>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4640      	mov	r0, r8
 800ba8e:	4649      	mov	r1, r9
 800ba90:	f7f5 f83c 	bl	8000b0c <__aeabi_dcmplt>
 800ba94:	2800      	cmp	r0, #0
 800ba96:	f43f af35 	beq.w	800b904 <_dtoa_r+0x464>
 800ba9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ba9c:	1e6b      	subs	r3, r5, #1
 800ba9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800baa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800baa4:	2b30      	cmp	r3, #48	; 0x30
 800baa6:	d0f8      	beq.n	800ba9a <_dtoa_r+0x5fa>
 800baa8:	9700      	str	r7, [sp, #0]
 800baaa:	e049      	b.n	800bb40 <_dtoa_r+0x6a0>
 800baac:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <_dtoa_r+0x624>)
 800baae:	f7f4 fdbb 	bl	8000628 <__aeabi_dmul>
 800bab2:	4680      	mov	r8, r0
 800bab4:	4689      	mov	r9, r1
 800bab6:	e7bd      	b.n	800ba34 <_dtoa_r+0x594>
 800bab8:	0800fb70 	.word	0x0800fb70
 800babc:	0800fb48 	.word	0x0800fb48
 800bac0:	3ff00000 	.word	0x3ff00000
 800bac4:	40240000 	.word	0x40240000
 800bac8:	401c0000 	.word	0x401c0000
 800bacc:	40140000 	.word	0x40140000
 800bad0:	3fe00000 	.word	0x3fe00000
 800bad4:	9d01      	ldr	r5, [sp, #4]
 800bad6:	4656      	mov	r6, sl
 800bad8:	465f      	mov	r7, fp
 800bada:	4642      	mov	r2, r8
 800badc:	464b      	mov	r3, r9
 800bade:	4630      	mov	r0, r6
 800bae0:	4639      	mov	r1, r7
 800bae2:	f7f4 fecb 	bl	800087c <__aeabi_ddiv>
 800bae6:	f7f5 f84f 	bl	8000b88 <__aeabi_d2iz>
 800baea:	4682      	mov	sl, r0
 800baec:	f7f4 fd32 	bl	8000554 <__aeabi_i2d>
 800baf0:	4642      	mov	r2, r8
 800baf2:	464b      	mov	r3, r9
 800baf4:	f7f4 fd98 	bl	8000628 <__aeabi_dmul>
 800baf8:	4602      	mov	r2, r0
 800bafa:	460b      	mov	r3, r1
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb04:	f7f4 fbd8 	bl	80002b8 <__aeabi_dsub>
 800bb08:	f805 6b01 	strb.w	r6, [r5], #1
 800bb0c:	9e01      	ldr	r6, [sp, #4]
 800bb0e:	9f03      	ldr	r7, [sp, #12]
 800bb10:	1bae      	subs	r6, r5, r6
 800bb12:	42b7      	cmp	r7, r6
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	d135      	bne.n	800bb86 <_dtoa_r+0x6e6>
 800bb1a:	f7f4 fbcf 	bl	80002bc <__adddf3>
 800bb1e:	4642      	mov	r2, r8
 800bb20:	464b      	mov	r3, r9
 800bb22:	4606      	mov	r6, r0
 800bb24:	460f      	mov	r7, r1
 800bb26:	f7f5 f80f 	bl	8000b48 <__aeabi_dcmpgt>
 800bb2a:	b9d0      	cbnz	r0, 800bb62 <_dtoa_r+0x6c2>
 800bb2c:	4642      	mov	r2, r8
 800bb2e:	464b      	mov	r3, r9
 800bb30:	4630      	mov	r0, r6
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f4 ffe0 	bl	8000af8 <__aeabi_dcmpeq>
 800bb38:	b110      	cbz	r0, 800bb40 <_dtoa_r+0x6a0>
 800bb3a:	f01a 0f01 	tst.w	sl, #1
 800bb3e:	d110      	bne.n	800bb62 <_dtoa_r+0x6c2>
 800bb40:	4620      	mov	r0, r4
 800bb42:	ee18 1a10 	vmov	r1, s16
 800bb46:	f001 f8b5 	bl	800ccb4 <_Bfree>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	9800      	ldr	r0, [sp, #0]
 800bb4e:	702b      	strb	r3, [r5, #0]
 800bb50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb52:	3001      	adds	r0, #1
 800bb54:	6018      	str	r0, [r3, #0]
 800bb56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f43f acf1 	beq.w	800b540 <_dtoa_r+0xa0>
 800bb5e:	601d      	str	r5, [r3, #0]
 800bb60:	e4ee      	b.n	800b540 <_dtoa_r+0xa0>
 800bb62:	9f00      	ldr	r7, [sp, #0]
 800bb64:	462b      	mov	r3, r5
 800bb66:	461d      	mov	r5, r3
 800bb68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb6c:	2a39      	cmp	r2, #57	; 0x39
 800bb6e:	d106      	bne.n	800bb7e <_dtoa_r+0x6de>
 800bb70:	9a01      	ldr	r2, [sp, #4]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d1f7      	bne.n	800bb66 <_dtoa_r+0x6c6>
 800bb76:	9901      	ldr	r1, [sp, #4]
 800bb78:	2230      	movs	r2, #48	; 0x30
 800bb7a:	3701      	adds	r7, #1
 800bb7c:	700a      	strb	r2, [r1, #0]
 800bb7e:	781a      	ldrb	r2, [r3, #0]
 800bb80:	3201      	adds	r2, #1
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	e790      	b.n	800baa8 <_dtoa_r+0x608>
 800bb86:	4ba6      	ldr	r3, [pc, #664]	; (800be20 <_dtoa_r+0x980>)
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f7f4 fd4d 	bl	8000628 <__aeabi_dmul>
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2300      	movs	r3, #0
 800bb92:	4606      	mov	r6, r0
 800bb94:	460f      	mov	r7, r1
 800bb96:	f7f4 ffaf 	bl	8000af8 <__aeabi_dcmpeq>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d09d      	beq.n	800bada <_dtoa_r+0x63a>
 800bb9e:	e7cf      	b.n	800bb40 <_dtoa_r+0x6a0>
 800bba0:	9a08      	ldr	r2, [sp, #32]
 800bba2:	2a00      	cmp	r2, #0
 800bba4:	f000 80d7 	beq.w	800bd56 <_dtoa_r+0x8b6>
 800bba8:	9a06      	ldr	r2, [sp, #24]
 800bbaa:	2a01      	cmp	r2, #1
 800bbac:	f300 80ba 	bgt.w	800bd24 <_dtoa_r+0x884>
 800bbb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	f000 80b2 	beq.w	800bd1c <_dtoa_r+0x87c>
 800bbb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbbc:	9e07      	ldr	r6, [sp, #28]
 800bbbe:	9d04      	ldr	r5, [sp, #16]
 800bbc0:	9a04      	ldr	r2, [sp, #16]
 800bbc2:	441a      	add	r2, r3
 800bbc4:	9204      	str	r2, [sp, #16]
 800bbc6:	9a05      	ldr	r2, [sp, #20]
 800bbc8:	2101      	movs	r1, #1
 800bbca:	441a      	add	r2, r3
 800bbcc:	4620      	mov	r0, r4
 800bbce:	9205      	str	r2, [sp, #20]
 800bbd0:	f001 f972 	bl	800ceb8 <__i2b>
 800bbd4:	4607      	mov	r7, r0
 800bbd6:	2d00      	cmp	r5, #0
 800bbd8:	dd0c      	ble.n	800bbf4 <_dtoa_r+0x754>
 800bbda:	9b05      	ldr	r3, [sp, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	dd09      	ble.n	800bbf4 <_dtoa_r+0x754>
 800bbe0:	42ab      	cmp	r3, r5
 800bbe2:	9a04      	ldr	r2, [sp, #16]
 800bbe4:	bfa8      	it	ge
 800bbe6:	462b      	movge	r3, r5
 800bbe8:	1ad2      	subs	r2, r2, r3
 800bbea:	9204      	str	r2, [sp, #16]
 800bbec:	9a05      	ldr	r2, [sp, #20]
 800bbee:	1aed      	subs	r5, r5, r3
 800bbf0:	1ad3      	subs	r3, r2, r3
 800bbf2:	9305      	str	r3, [sp, #20]
 800bbf4:	9b07      	ldr	r3, [sp, #28]
 800bbf6:	b31b      	cbz	r3, 800bc40 <_dtoa_r+0x7a0>
 800bbf8:	9b08      	ldr	r3, [sp, #32]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f000 80af 	beq.w	800bd5e <_dtoa_r+0x8be>
 800bc00:	2e00      	cmp	r6, #0
 800bc02:	dd13      	ble.n	800bc2c <_dtoa_r+0x78c>
 800bc04:	4639      	mov	r1, r7
 800bc06:	4632      	mov	r2, r6
 800bc08:	4620      	mov	r0, r4
 800bc0a:	f001 fa15 	bl	800d038 <__pow5mult>
 800bc0e:	ee18 2a10 	vmov	r2, s16
 800bc12:	4601      	mov	r1, r0
 800bc14:	4607      	mov	r7, r0
 800bc16:	4620      	mov	r0, r4
 800bc18:	f001 f964 	bl	800cee4 <__multiply>
 800bc1c:	ee18 1a10 	vmov	r1, s16
 800bc20:	4680      	mov	r8, r0
 800bc22:	4620      	mov	r0, r4
 800bc24:	f001 f846 	bl	800ccb4 <_Bfree>
 800bc28:	ee08 8a10 	vmov	s16, r8
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	1b9a      	subs	r2, r3, r6
 800bc30:	d006      	beq.n	800bc40 <_dtoa_r+0x7a0>
 800bc32:	ee18 1a10 	vmov	r1, s16
 800bc36:	4620      	mov	r0, r4
 800bc38:	f001 f9fe 	bl	800d038 <__pow5mult>
 800bc3c:	ee08 0a10 	vmov	s16, r0
 800bc40:	2101      	movs	r1, #1
 800bc42:	4620      	mov	r0, r4
 800bc44:	f001 f938 	bl	800ceb8 <__i2b>
 800bc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	4606      	mov	r6, r0
 800bc4e:	f340 8088 	ble.w	800bd62 <_dtoa_r+0x8c2>
 800bc52:	461a      	mov	r2, r3
 800bc54:	4601      	mov	r1, r0
 800bc56:	4620      	mov	r0, r4
 800bc58:	f001 f9ee 	bl	800d038 <__pow5mult>
 800bc5c:	9b06      	ldr	r3, [sp, #24]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	4606      	mov	r6, r0
 800bc62:	f340 8081 	ble.w	800bd68 <_dtoa_r+0x8c8>
 800bc66:	f04f 0800 	mov.w	r8, #0
 800bc6a:	6933      	ldr	r3, [r6, #16]
 800bc6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bc70:	6918      	ldr	r0, [r3, #16]
 800bc72:	f001 f8d1 	bl	800ce18 <__hi0bits>
 800bc76:	f1c0 0020 	rsb	r0, r0, #32
 800bc7a:	9b05      	ldr	r3, [sp, #20]
 800bc7c:	4418      	add	r0, r3
 800bc7e:	f010 001f 	ands.w	r0, r0, #31
 800bc82:	f000 8092 	beq.w	800bdaa <_dtoa_r+0x90a>
 800bc86:	f1c0 0320 	rsb	r3, r0, #32
 800bc8a:	2b04      	cmp	r3, #4
 800bc8c:	f340 808a 	ble.w	800bda4 <_dtoa_r+0x904>
 800bc90:	f1c0 001c 	rsb	r0, r0, #28
 800bc94:	9b04      	ldr	r3, [sp, #16]
 800bc96:	4403      	add	r3, r0
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	9b05      	ldr	r3, [sp, #20]
 800bc9c:	4403      	add	r3, r0
 800bc9e:	4405      	add	r5, r0
 800bca0:	9305      	str	r3, [sp, #20]
 800bca2:	9b04      	ldr	r3, [sp, #16]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dd07      	ble.n	800bcb8 <_dtoa_r+0x818>
 800bca8:	ee18 1a10 	vmov	r1, s16
 800bcac:	461a      	mov	r2, r3
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f001 fa1c 	bl	800d0ec <__lshift>
 800bcb4:	ee08 0a10 	vmov	s16, r0
 800bcb8:	9b05      	ldr	r3, [sp, #20]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dd05      	ble.n	800bcca <_dtoa_r+0x82a>
 800bcbe:	4631      	mov	r1, r6
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4620      	mov	r0, r4
 800bcc4:	f001 fa12 	bl	800d0ec <__lshift>
 800bcc8:	4606      	mov	r6, r0
 800bcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d06e      	beq.n	800bdae <_dtoa_r+0x90e>
 800bcd0:	ee18 0a10 	vmov	r0, s16
 800bcd4:	4631      	mov	r1, r6
 800bcd6:	f001 fa79 	bl	800d1cc <__mcmp>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	da67      	bge.n	800bdae <_dtoa_r+0x90e>
 800bcde:	9b00      	ldr	r3, [sp, #0]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	ee18 1a10 	vmov	r1, s16
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	220a      	movs	r2, #10
 800bcea:	2300      	movs	r3, #0
 800bcec:	4620      	mov	r0, r4
 800bcee:	f001 f803 	bl	800ccf8 <__multadd>
 800bcf2:	9b08      	ldr	r3, [sp, #32]
 800bcf4:	ee08 0a10 	vmov	s16, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 81b1 	beq.w	800c060 <_dtoa_r+0xbc0>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	4639      	mov	r1, r7
 800bd02:	220a      	movs	r2, #10
 800bd04:	4620      	mov	r0, r4
 800bd06:	f000 fff7 	bl	800ccf8 <__multadd>
 800bd0a:	9b02      	ldr	r3, [sp, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	4607      	mov	r7, r0
 800bd10:	f300 808e 	bgt.w	800be30 <_dtoa_r+0x990>
 800bd14:	9b06      	ldr	r3, [sp, #24]
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	dc51      	bgt.n	800bdbe <_dtoa_r+0x91e>
 800bd1a:	e089      	b.n	800be30 <_dtoa_r+0x990>
 800bd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd22:	e74b      	b.n	800bbbc <_dtoa_r+0x71c>
 800bd24:	9b03      	ldr	r3, [sp, #12]
 800bd26:	1e5e      	subs	r6, r3, #1
 800bd28:	9b07      	ldr	r3, [sp, #28]
 800bd2a:	42b3      	cmp	r3, r6
 800bd2c:	bfbf      	itttt	lt
 800bd2e:	9b07      	ldrlt	r3, [sp, #28]
 800bd30:	9607      	strlt	r6, [sp, #28]
 800bd32:	1af2      	sublt	r2, r6, r3
 800bd34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd36:	bfb6      	itet	lt
 800bd38:	189b      	addlt	r3, r3, r2
 800bd3a:	1b9e      	subge	r6, r3, r6
 800bd3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	bfb8      	it	lt
 800bd42:	2600      	movlt	r6, #0
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	bfb7      	itett	lt
 800bd48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bd4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bd50:	1a9d      	sublt	r5, r3, r2
 800bd52:	2300      	movlt	r3, #0
 800bd54:	e734      	b.n	800bbc0 <_dtoa_r+0x720>
 800bd56:	9e07      	ldr	r6, [sp, #28]
 800bd58:	9d04      	ldr	r5, [sp, #16]
 800bd5a:	9f08      	ldr	r7, [sp, #32]
 800bd5c:	e73b      	b.n	800bbd6 <_dtoa_r+0x736>
 800bd5e:	9a07      	ldr	r2, [sp, #28]
 800bd60:	e767      	b.n	800bc32 <_dtoa_r+0x792>
 800bd62:	9b06      	ldr	r3, [sp, #24]
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	dc18      	bgt.n	800bd9a <_dtoa_r+0x8fa>
 800bd68:	f1ba 0f00 	cmp.w	sl, #0
 800bd6c:	d115      	bne.n	800bd9a <_dtoa_r+0x8fa>
 800bd6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd72:	b993      	cbnz	r3, 800bd9a <_dtoa_r+0x8fa>
 800bd74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd78:	0d1b      	lsrs	r3, r3, #20
 800bd7a:	051b      	lsls	r3, r3, #20
 800bd7c:	b183      	cbz	r3, 800bda0 <_dtoa_r+0x900>
 800bd7e:	9b04      	ldr	r3, [sp, #16]
 800bd80:	3301      	adds	r3, #1
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	9b05      	ldr	r3, [sp, #20]
 800bd86:	3301      	adds	r3, #1
 800bd88:	9305      	str	r3, [sp, #20]
 800bd8a:	f04f 0801 	mov.w	r8, #1
 800bd8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	f47f af6a 	bne.w	800bc6a <_dtoa_r+0x7ca>
 800bd96:	2001      	movs	r0, #1
 800bd98:	e76f      	b.n	800bc7a <_dtoa_r+0x7da>
 800bd9a:	f04f 0800 	mov.w	r8, #0
 800bd9e:	e7f6      	b.n	800bd8e <_dtoa_r+0x8ee>
 800bda0:	4698      	mov	r8, r3
 800bda2:	e7f4      	b.n	800bd8e <_dtoa_r+0x8ee>
 800bda4:	f43f af7d 	beq.w	800bca2 <_dtoa_r+0x802>
 800bda8:	4618      	mov	r0, r3
 800bdaa:	301c      	adds	r0, #28
 800bdac:	e772      	b.n	800bc94 <_dtoa_r+0x7f4>
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dc37      	bgt.n	800be24 <_dtoa_r+0x984>
 800bdb4:	9b06      	ldr	r3, [sp, #24]
 800bdb6:	2b02      	cmp	r3, #2
 800bdb8:	dd34      	ble.n	800be24 <_dtoa_r+0x984>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	9302      	str	r3, [sp, #8]
 800bdbe:	9b02      	ldr	r3, [sp, #8]
 800bdc0:	b96b      	cbnz	r3, 800bdde <_dtoa_r+0x93e>
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f000 ff96 	bl	800ccf8 <__multadd>
 800bdcc:	4601      	mov	r1, r0
 800bdce:	4606      	mov	r6, r0
 800bdd0:	ee18 0a10 	vmov	r0, s16
 800bdd4:	f001 f9fa 	bl	800d1cc <__mcmp>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	f73f adbb 	bgt.w	800b954 <_dtoa_r+0x4b4>
 800bdde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde0:	9d01      	ldr	r5, [sp, #4]
 800bde2:	43db      	mvns	r3, r3
 800bde4:	9300      	str	r3, [sp, #0]
 800bde6:	f04f 0800 	mov.w	r8, #0
 800bdea:	4631      	mov	r1, r6
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 ff61 	bl	800ccb4 <_Bfree>
 800bdf2:	2f00      	cmp	r7, #0
 800bdf4:	f43f aea4 	beq.w	800bb40 <_dtoa_r+0x6a0>
 800bdf8:	f1b8 0f00 	cmp.w	r8, #0
 800bdfc:	d005      	beq.n	800be0a <_dtoa_r+0x96a>
 800bdfe:	45b8      	cmp	r8, r7
 800be00:	d003      	beq.n	800be0a <_dtoa_r+0x96a>
 800be02:	4641      	mov	r1, r8
 800be04:	4620      	mov	r0, r4
 800be06:	f000 ff55 	bl	800ccb4 <_Bfree>
 800be0a:	4639      	mov	r1, r7
 800be0c:	4620      	mov	r0, r4
 800be0e:	f000 ff51 	bl	800ccb4 <_Bfree>
 800be12:	e695      	b.n	800bb40 <_dtoa_r+0x6a0>
 800be14:	2600      	movs	r6, #0
 800be16:	4637      	mov	r7, r6
 800be18:	e7e1      	b.n	800bdde <_dtoa_r+0x93e>
 800be1a:	9700      	str	r7, [sp, #0]
 800be1c:	4637      	mov	r7, r6
 800be1e:	e599      	b.n	800b954 <_dtoa_r+0x4b4>
 800be20:	40240000 	.word	0x40240000
 800be24:	9b08      	ldr	r3, [sp, #32]
 800be26:	2b00      	cmp	r3, #0
 800be28:	f000 80ca 	beq.w	800bfc0 <_dtoa_r+0xb20>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	9302      	str	r3, [sp, #8]
 800be30:	2d00      	cmp	r5, #0
 800be32:	dd05      	ble.n	800be40 <_dtoa_r+0x9a0>
 800be34:	4639      	mov	r1, r7
 800be36:	462a      	mov	r2, r5
 800be38:	4620      	mov	r0, r4
 800be3a:	f001 f957 	bl	800d0ec <__lshift>
 800be3e:	4607      	mov	r7, r0
 800be40:	f1b8 0f00 	cmp.w	r8, #0
 800be44:	d05b      	beq.n	800befe <_dtoa_r+0xa5e>
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	4620      	mov	r0, r4
 800be4a:	f000 fef3 	bl	800cc34 <_Balloc>
 800be4e:	4605      	mov	r5, r0
 800be50:	b928      	cbnz	r0, 800be5e <_dtoa_r+0x9be>
 800be52:	4b87      	ldr	r3, [pc, #540]	; (800c070 <_dtoa_r+0xbd0>)
 800be54:	4602      	mov	r2, r0
 800be56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be5a:	f7ff bb3b 	b.w	800b4d4 <_dtoa_r+0x34>
 800be5e:	693a      	ldr	r2, [r7, #16]
 800be60:	3202      	adds	r2, #2
 800be62:	0092      	lsls	r2, r2, #2
 800be64:	f107 010c 	add.w	r1, r7, #12
 800be68:	300c      	adds	r0, #12
 800be6a:	f7fd fc1d 	bl	80096a8 <memcpy>
 800be6e:	2201      	movs	r2, #1
 800be70:	4629      	mov	r1, r5
 800be72:	4620      	mov	r0, r4
 800be74:	f001 f93a 	bl	800d0ec <__lshift>
 800be78:	9b01      	ldr	r3, [sp, #4]
 800be7a:	f103 0901 	add.w	r9, r3, #1
 800be7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800be82:	4413      	add	r3, r2
 800be84:	9305      	str	r3, [sp, #20]
 800be86:	f00a 0301 	and.w	r3, sl, #1
 800be8a:	46b8      	mov	r8, r7
 800be8c:	9304      	str	r3, [sp, #16]
 800be8e:	4607      	mov	r7, r0
 800be90:	4631      	mov	r1, r6
 800be92:	ee18 0a10 	vmov	r0, s16
 800be96:	f7ff fa77 	bl	800b388 <quorem>
 800be9a:	4641      	mov	r1, r8
 800be9c:	9002      	str	r0, [sp, #8]
 800be9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bea2:	ee18 0a10 	vmov	r0, s16
 800bea6:	f001 f991 	bl	800d1cc <__mcmp>
 800beaa:	463a      	mov	r2, r7
 800beac:	9003      	str	r0, [sp, #12]
 800beae:	4631      	mov	r1, r6
 800beb0:	4620      	mov	r0, r4
 800beb2:	f001 f9a7 	bl	800d204 <__mdiff>
 800beb6:	68c2      	ldr	r2, [r0, #12]
 800beb8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800bebc:	4605      	mov	r5, r0
 800bebe:	bb02      	cbnz	r2, 800bf02 <_dtoa_r+0xa62>
 800bec0:	4601      	mov	r1, r0
 800bec2:	ee18 0a10 	vmov	r0, s16
 800bec6:	f001 f981 	bl	800d1cc <__mcmp>
 800beca:	4602      	mov	r2, r0
 800becc:	4629      	mov	r1, r5
 800bece:	4620      	mov	r0, r4
 800bed0:	9207      	str	r2, [sp, #28]
 800bed2:	f000 feef 	bl	800ccb4 <_Bfree>
 800bed6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800beda:	ea43 0102 	orr.w	r1, r3, r2
 800bede:	9b04      	ldr	r3, [sp, #16]
 800bee0:	430b      	orrs	r3, r1
 800bee2:	464d      	mov	r5, r9
 800bee4:	d10f      	bne.n	800bf06 <_dtoa_r+0xa66>
 800bee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800beea:	d02a      	beq.n	800bf42 <_dtoa_r+0xaa2>
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	dd02      	ble.n	800bef8 <_dtoa_r+0xa58>
 800bef2:	9b02      	ldr	r3, [sp, #8]
 800bef4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bef8:	f88b a000 	strb.w	sl, [fp]
 800befc:	e775      	b.n	800bdea <_dtoa_r+0x94a>
 800befe:	4638      	mov	r0, r7
 800bf00:	e7ba      	b.n	800be78 <_dtoa_r+0x9d8>
 800bf02:	2201      	movs	r2, #1
 800bf04:	e7e2      	b.n	800becc <_dtoa_r+0xa2c>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	db04      	blt.n	800bf16 <_dtoa_r+0xa76>
 800bf0c:	9906      	ldr	r1, [sp, #24]
 800bf0e:	430b      	orrs	r3, r1
 800bf10:	9904      	ldr	r1, [sp, #16]
 800bf12:	430b      	orrs	r3, r1
 800bf14:	d122      	bne.n	800bf5c <_dtoa_r+0xabc>
 800bf16:	2a00      	cmp	r2, #0
 800bf18:	ddee      	ble.n	800bef8 <_dtoa_r+0xa58>
 800bf1a:	ee18 1a10 	vmov	r1, s16
 800bf1e:	2201      	movs	r2, #1
 800bf20:	4620      	mov	r0, r4
 800bf22:	f001 f8e3 	bl	800d0ec <__lshift>
 800bf26:	4631      	mov	r1, r6
 800bf28:	ee08 0a10 	vmov	s16, r0
 800bf2c:	f001 f94e 	bl	800d1cc <__mcmp>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	dc03      	bgt.n	800bf3c <_dtoa_r+0xa9c>
 800bf34:	d1e0      	bne.n	800bef8 <_dtoa_r+0xa58>
 800bf36:	f01a 0f01 	tst.w	sl, #1
 800bf3a:	d0dd      	beq.n	800bef8 <_dtoa_r+0xa58>
 800bf3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf40:	d1d7      	bne.n	800bef2 <_dtoa_r+0xa52>
 800bf42:	2339      	movs	r3, #57	; 0x39
 800bf44:	f88b 3000 	strb.w	r3, [fp]
 800bf48:	462b      	mov	r3, r5
 800bf4a:	461d      	mov	r5, r3
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf52:	2a39      	cmp	r2, #57	; 0x39
 800bf54:	d071      	beq.n	800c03a <_dtoa_r+0xb9a>
 800bf56:	3201      	adds	r2, #1
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	e746      	b.n	800bdea <_dtoa_r+0x94a>
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	dd07      	ble.n	800bf70 <_dtoa_r+0xad0>
 800bf60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf64:	d0ed      	beq.n	800bf42 <_dtoa_r+0xaa2>
 800bf66:	f10a 0301 	add.w	r3, sl, #1
 800bf6a:	f88b 3000 	strb.w	r3, [fp]
 800bf6e:	e73c      	b.n	800bdea <_dtoa_r+0x94a>
 800bf70:	9b05      	ldr	r3, [sp, #20]
 800bf72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bf76:	4599      	cmp	r9, r3
 800bf78:	d047      	beq.n	800c00a <_dtoa_r+0xb6a>
 800bf7a:	ee18 1a10 	vmov	r1, s16
 800bf7e:	2300      	movs	r3, #0
 800bf80:	220a      	movs	r2, #10
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 feb8 	bl	800ccf8 <__multadd>
 800bf88:	45b8      	cmp	r8, r7
 800bf8a:	ee08 0a10 	vmov	s16, r0
 800bf8e:	f04f 0300 	mov.w	r3, #0
 800bf92:	f04f 020a 	mov.w	r2, #10
 800bf96:	4641      	mov	r1, r8
 800bf98:	4620      	mov	r0, r4
 800bf9a:	d106      	bne.n	800bfaa <_dtoa_r+0xb0a>
 800bf9c:	f000 feac 	bl	800ccf8 <__multadd>
 800bfa0:	4680      	mov	r8, r0
 800bfa2:	4607      	mov	r7, r0
 800bfa4:	f109 0901 	add.w	r9, r9, #1
 800bfa8:	e772      	b.n	800be90 <_dtoa_r+0x9f0>
 800bfaa:	f000 fea5 	bl	800ccf8 <__multadd>
 800bfae:	4639      	mov	r1, r7
 800bfb0:	4680      	mov	r8, r0
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	220a      	movs	r2, #10
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 fe9e 	bl	800ccf8 <__multadd>
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	e7f1      	b.n	800bfa4 <_dtoa_r+0xb04>
 800bfc0:	9b03      	ldr	r3, [sp, #12]
 800bfc2:	9302      	str	r3, [sp, #8]
 800bfc4:	9d01      	ldr	r5, [sp, #4]
 800bfc6:	ee18 0a10 	vmov	r0, s16
 800bfca:	4631      	mov	r1, r6
 800bfcc:	f7ff f9dc 	bl	800b388 <quorem>
 800bfd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bfd4:	9b01      	ldr	r3, [sp, #4]
 800bfd6:	f805 ab01 	strb.w	sl, [r5], #1
 800bfda:	1aea      	subs	r2, r5, r3
 800bfdc:	9b02      	ldr	r3, [sp, #8]
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	dd09      	ble.n	800bff6 <_dtoa_r+0xb56>
 800bfe2:	ee18 1a10 	vmov	r1, s16
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fe84 	bl	800ccf8 <__multadd>
 800bff0:	ee08 0a10 	vmov	s16, r0
 800bff4:	e7e7      	b.n	800bfc6 <_dtoa_r+0xb26>
 800bff6:	9b02      	ldr	r3, [sp, #8]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	bfc8      	it	gt
 800bffc:	461d      	movgt	r5, r3
 800bffe:	9b01      	ldr	r3, [sp, #4]
 800c000:	bfd8      	it	le
 800c002:	2501      	movle	r5, #1
 800c004:	441d      	add	r5, r3
 800c006:	f04f 0800 	mov.w	r8, #0
 800c00a:	ee18 1a10 	vmov	r1, s16
 800c00e:	2201      	movs	r2, #1
 800c010:	4620      	mov	r0, r4
 800c012:	f001 f86b 	bl	800d0ec <__lshift>
 800c016:	4631      	mov	r1, r6
 800c018:	ee08 0a10 	vmov	s16, r0
 800c01c:	f001 f8d6 	bl	800d1cc <__mcmp>
 800c020:	2800      	cmp	r0, #0
 800c022:	dc91      	bgt.n	800bf48 <_dtoa_r+0xaa8>
 800c024:	d102      	bne.n	800c02c <_dtoa_r+0xb8c>
 800c026:	f01a 0f01 	tst.w	sl, #1
 800c02a:	d18d      	bne.n	800bf48 <_dtoa_r+0xaa8>
 800c02c:	462b      	mov	r3, r5
 800c02e:	461d      	mov	r5, r3
 800c030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c034:	2a30      	cmp	r2, #48	; 0x30
 800c036:	d0fa      	beq.n	800c02e <_dtoa_r+0xb8e>
 800c038:	e6d7      	b.n	800bdea <_dtoa_r+0x94a>
 800c03a:	9a01      	ldr	r2, [sp, #4]
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d184      	bne.n	800bf4a <_dtoa_r+0xaaa>
 800c040:	9b00      	ldr	r3, [sp, #0]
 800c042:	3301      	adds	r3, #1
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	2331      	movs	r3, #49	; 0x31
 800c048:	7013      	strb	r3, [r2, #0]
 800c04a:	e6ce      	b.n	800bdea <_dtoa_r+0x94a>
 800c04c:	4b09      	ldr	r3, [pc, #36]	; (800c074 <_dtoa_r+0xbd4>)
 800c04e:	f7ff ba95 	b.w	800b57c <_dtoa_r+0xdc>
 800c052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c054:	2b00      	cmp	r3, #0
 800c056:	f47f aa6e 	bne.w	800b536 <_dtoa_r+0x96>
 800c05a:	4b07      	ldr	r3, [pc, #28]	; (800c078 <_dtoa_r+0xbd8>)
 800c05c:	f7ff ba8e 	b.w	800b57c <_dtoa_r+0xdc>
 800c060:	9b02      	ldr	r3, [sp, #8]
 800c062:	2b00      	cmp	r3, #0
 800c064:	dcae      	bgt.n	800bfc4 <_dtoa_r+0xb24>
 800c066:	9b06      	ldr	r3, [sp, #24]
 800c068:	2b02      	cmp	r3, #2
 800c06a:	f73f aea8 	bgt.w	800bdbe <_dtoa_r+0x91e>
 800c06e:	e7a9      	b.n	800bfc4 <_dtoa_r+0xb24>
 800c070:	0800f9f8 	.word	0x0800f9f8
 800c074:	0800fc59 	.word	0x0800fc59
 800c078:	0800f979 	.word	0x0800f979

0800c07c <__sflush_r>:
 800c07c:	898a      	ldrh	r2, [r1, #12]
 800c07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c082:	4605      	mov	r5, r0
 800c084:	0710      	lsls	r0, r2, #28
 800c086:	460c      	mov	r4, r1
 800c088:	d458      	bmi.n	800c13c <__sflush_r+0xc0>
 800c08a:	684b      	ldr	r3, [r1, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	dc05      	bgt.n	800c09c <__sflush_r+0x20>
 800c090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c092:	2b00      	cmp	r3, #0
 800c094:	dc02      	bgt.n	800c09c <__sflush_r+0x20>
 800c096:	2000      	movs	r0, #0
 800c098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c09c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c09e:	2e00      	cmp	r6, #0
 800c0a0:	d0f9      	beq.n	800c096 <__sflush_r+0x1a>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0a8:	682f      	ldr	r7, [r5, #0]
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	d032      	beq.n	800c114 <__sflush_r+0x98>
 800c0ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	075a      	lsls	r2, r3, #29
 800c0b4:	d505      	bpl.n	800c0c2 <__sflush_r+0x46>
 800c0b6:	6863      	ldr	r3, [r4, #4]
 800c0b8:	1ac0      	subs	r0, r0, r3
 800c0ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0bc:	b10b      	cbz	r3, 800c0c2 <__sflush_r+0x46>
 800c0be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0c0:	1ac0      	subs	r0, r0, r3
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0c8:	6a21      	ldr	r1, [r4, #32]
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b0      	blx	r6
 800c0ce:	1c43      	adds	r3, r0, #1
 800c0d0:	89a3      	ldrh	r3, [r4, #12]
 800c0d2:	d106      	bne.n	800c0e2 <__sflush_r+0x66>
 800c0d4:	6829      	ldr	r1, [r5, #0]
 800c0d6:	291d      	cmp	r1, #29
 800c0d8:	d82c      	bhi.n	800c134 <__sflush_r+0xb8>
 800c0da:	4a2a      	ldr	r2, [pc, #168]	; (800c184 <__sflush_r+0x108>)
 800c0dc:	40ca      	lsrs	r2, r1
 800c0de:	07d6      	lsls	r6, r2, #31
 800c0e0:	d528      	bpl.n	800c134 <__sflush_r+0xb8>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	6062      	str	r2, [r4, #4]
 800c0e6:	04d9      	lsls	r1, r3, #19
 800c0e8:	6922      	ldr	r2, [r4, #16]
 800c0ea:	6022      	str	r2, [r4, #0]
 800c0ec:	d504      	bpl.n	800c0f8 <__sflush_r+0x7c>
 800c0ee:	1c42      	adds	r2, r0, #1
 800c0f0:	d101      	bne.n	800c0f6 <__sflush_r+0x7a>
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	b903      	cbnz	r3, 800c0f8 <__sflush_r+0x7c>
 800c0f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c0f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0fa:	602f      	str	r7, [r5, #0]
 800c0fc:	2900      	cmp	r1, #0
 800c0fe:	d0ca      	beq.n	800c096 <__sflush_r+0x1a>
 800c100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c104:	4299      	cmp	r1, r3
 800c106:	d002      	beq.n	800c10e <__sflush_r+0x92>
 800c108:	4628      	mov	r0, r5
 800c10a:	f001 fa6b 	bl	800d5e4 <_free_r>
 800c10e:	2000      	movs	r0, #0
 800c110:	6360      	str	r0, [r4, #52]	; 0x34
 800c112:	e7c1      	b.n	800c098 <__sflush_r+0x1c>
 800c114:	6a21      	ldr	r1, [r4, #32]
 800c116:	2301      	movs	r3, #1
 800c118:	4628      	mov	r0, r5
 800c11a:	47b0      	blx	r6
 800c11c:	1c41      	adds	r1, r0, #1
 800c11e:	d1c7      	bne.n	800c0b0 <__sflush_r+0x34>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d0c4      	beq.n	800c0b0 <__sflush_r+0x34>
 800c126:	2b1d      	cmp	r3, #29
 800c128:	d001      	beq.n	800c12e <__sflush_r+0xb2>
 800c12a:	2b16      	cmp	r3, #22
 800c12c:	d101      	bne.n	800c132 <__sflush_r+0xb6>
 800c12e:	602f      	str	r7, [r5, #0]
 800c130:	e7b1      	b.n	800c096 <__sflush_r+0x1a>
 800c132:	89a3      	ldrh	r3, [r4, #12]
 800c134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c138:	81a3      	strh	r3, [r4, #12]
 800c13a:	e7ad      	b.n	800c098 <__sflush_r+0x1c>
 800c13c:	690f      	ldr	r7, [r1, #16]
 800c13e:	2f00      	cmp	r7, #0
 800c140:	d0a9      	beq.n	800c096 <__sflush_r+0x1a>
 800c142:	0793      	lsls	r3, r2, #30
 800c144:	680e      	ldr	r6, [r1, #0]
 800c146:	bf08      	it	eq
 800c148:	694b      	ldreq	r3, [r1, #20]
 800c14a:	600f      	str	r7, [r1, #0]
 800c14c:	bf18      	it	ne
 800c14e:	2300      	movne	r3, #0
 800c150:	eba6 0807 	sub.w	r8, r6, r7
 800c154:	608b      	str	r3, [r1, #8]
 800c156:	f1b8 0f00 	cmp.w	r8, #0
 800c15a:	dd9c      	ble.n	800c096 <__sflush_r+0x1a>
 800c15c:	6a21      	ldr	r1, [r4, #32]
 800c15e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c160:	4643      	mov	r3, r8
 800c162:	463a      	mov	r2, r7
 800c164:	4628      	mov	r0, r5
 800c166:	47b0      	blx	r6
 800c168:	2800      	cmp	r0, #0
 800c16a:	dc06      	bgt.n	800c17a <__sflush_r+0xfe>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c178:	e78e      	b.n	800c098 <__sflush_r+0x1c>
 800c17a:	4407      	add	r7, r0
 800c17c:	eba8 0800 	sub.w	r8, r8, r0
 800c180:	e7e9      	b.n	800c156 <__sflush_r+0xda>
 800c182:	bf00      	nop
 800c184:	20400001 	.word	0x20400001

0800c188 <_fflush_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	690b      	ldr	r3, [r1, #16]
 800c18c:	4605      	mov	r5, r0
 800c18e:	460c      	mov	r4, r1
 800c190:	b913      	cbnz	r3, 800c198 <_fflush_r+0x10>
 800c192:	2500      	movs	r5, #0
 800c194:	4628      	mov	r0, r5
 800c196:	bd38      	pop	{r3, r4, r5, pc}
 800c198:	b118      	cbz	r0, 800c1a2 <_fflush_r+0x1a>
 800c19a:	6983      	ldr	r3, [r0, #24]
 800c19c:	b90b      	cbnz	r3, 800c1a2 <_fflush_r+0x1a>
 800c19e:	f000 f899 	bl	800c2d4 <__sinit>
 800c1a2:	4b14      	ldr	r3, [pc, #80]	; (800c1f4 <_fflush_r+0x6c>)
 800c1a4:	429c      	cmp	r4, r3
 800c1a6:	d11b      	bne.n	800c1e0 <_fflush_r+0x58>
 800c1a8:	686c      	ldr	r4, [r5, #4]
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0ef      	beq.n	800c192 <_fflush_r+0xa>
 800c1b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1b4:	07d0      	lsls	r0, r2, #31
 800c1b6:	d404      	bmi.n	800c1c2 <_fflush_r+0x3a>
 800c1b8:	0599      	lsls	r1, r3, #22
 800c1ba:	d402      	bmi.n	800c1c2 <_fflush_r+0x3a>
 800c1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1be:	f000 fcb8 	bl	800cb32 <__retarget_lock_acquire_recursive>
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	f7ff ff59 	bl	800c07c <__sflush_r>
 800c1ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1cc:	07da      	lsls	r2, r3, #31
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	d4e0      	bmi.n	800c194 <_fflush_r+0xc>
 800c1d2:	89a3      	ldrh	r3, [r4, #12]
 800c1d4:	059b      	lsls	r3, r3, #22
 800c1d6:	d4dd      	bmi.n	800c194 <_fflush_r+0xc>
 800c1d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1da:	f000 fcab 	bl	800cb34 <__retarget_lock_release_recursive>
 800c1de:	e7d9      	b.n	800c194 <_fflush_r+0xc>
 800c1e0:	4b05      	ldr	r3, [pc, #20]	; (800c1f8 <_fflush_r+0x70>)
 800c1e2:	429c      	cmp	r4, r3
 800c1e4:	d101      	bne.n	800c1ea <_fflush_r+0x62>
 800c1e6:	68ac      	ldr	r4, [r5, #8]
 800c1e8:	e7df      	b.n	800c1aa <_fflush_r+0x22>
 800c1ea:	4b04      	ldr	r3, [pc, #16]	; (800c1fc <_fflush_r+0x74>)
 800c1ec:	429c      	cmp	r4, r3
 800c1ee:	bf08      	it	eq
 800c1f0:	68ec      	ldreq	r4, [r5, #12]
 800c1f2:	e7da      	b.n	800c1aa <_fflush_r+0x22>
 800c1f4:	0800fa2c 	.word	0x0800fa2c
 800c1f8:	0800fa4c 	.word	0x0800fa4c
 800c1fc:	0800fa0c 	.word	0x0800fa0c

0800c200 <fflush>:
 800c200:	4601      	mov	r1, r0
 800c202:	b920      	cbnz	r0, 800c20e <fflush+0xe>
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <fflush+0x18>)
 800c206:	4905      	ldr	r1, [pc, #20]	; (800c21c <fflush+0x1c>)
 800c208:	6818      	ldr	r0, [r3, #0]
 800c20a:	f000 b8fe 	b.w	800c40a <_fwalk_reent>
 800c20e:	4b04      	ldr	r3, [pc, #16]	; (800c220 <fflush+0x20>)
 800c210:	6818      	ldr	r0, [r3, #0]
 800c212:	f7ff bfb9 	b.w	800c188 <_fflush_r>
 800c216:	bf00      	nop
 800c218:	0800f7e8 	.word	0x0800f7e8
 800c21c:	0800c189 	.word	0x0800c189
 800c220:	2000004c 	.word	0x2000004c

0800c224 <std>:
 800c224:	2300      	movs	r3, #0
 800c226:	b510      	push	{r4, lr}
 800c228:	4604      	mov	r4, r0
 800c22a:	e9c0 3300 	strd	r3, r3, [r0]
 800c22e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c232:	6083      	str	r3, [r0, #8]
 800c234:	8181      	strh	r1, [r0, #12]
 800c236:	6643      	str	r3, [r0, #100]	; 0x64
 800c238:	81c2      	strh	r2, [r0, #14]
 800c23a:	6183      	str	r3, [r0, #24]
 800c23c:	4619      	mov	r1, r3
 800c23e:	2208      	movs	r2, #8
 800c240:	305c      	adds	r0, #92	; 0x5c
 800c242:	f7fd fa3f 	bl	80096c4 <memset>
 800c246:	4b05      	ldr	r3, [pc, #20]	; (800c25c <std+0x38>)
 800c248:	6263      	str	r3, [r4, #36]	; 0x24
 800c24a:	4b05      	ldr	r3, [pc, #20]	; (800c260 <std+0x3c>)
 800c24c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c24e:	4b05      	ldr	r3, [pc, #20]	; (800c264 <std+0x40>)
 800c250:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c252:	4b05      	ldr	r3, [pc, #20]	; (800c268 <std+0x44>)
 800c254:	6224      	str	r4, [r4, #32]
 800c256:	6323      	str	r3, [r4, #48]	; 0x30
 800c258:	bd10      	pop	{r4, pc}
 800c25a:	bf00      	nop
 800c25c:	0800e5a9 	.word	0x0800e5a9
 800c260:	0800e5cb 	.word	0x0800e5cb
 800c264:	0800e603 	.word	0x0800e603
 800c268:	0800e627 	.word	0x0800e627

0800c26c <_cleanup_r>:
 800c26c:	4901      	ldr	r1, [pc, #4]	; (800c274 <_cleanup_r+0x8>)
 800c26e:	f000 b8cc 	b.w	800c40a <_fwalk_reent>
 800c272:	bf00      	nop
 800c274:	0800c189 	.word	0x0800c189

0800c278 <__sfmoreglue>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	2268      	movs	r2, #104	; 0x68
 800c27c:	1e4d      	subs	r5, r1, #1
 800c27e:	4355      	muls	r5, r2
 800c280:	460e      	mov	r6, r1
 800c282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c286:	f001 fa19 	bl	800d6bc <_malloc_r>
 800c28a:	4604      	mov	r4, r0
 800c28c:	b140      	cbz	r0, 800c2a0 <__sfmoreglue+0x28>
 800c28e:	2100      	movs	r1, #0
 800c290:	e9c0 1600 	strd	r1, r6, [r0]
 800c294:	300c      	adds	r0, #12
 800c296:	60a0      	str	r0, [r4, #8]
 800c298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c29c:	f7fd fa12 	bl	80096c4 <memset>
 800c2a0:	4620      	mov	r0, r4
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}

0800c2a4 <__sfp_lock_acquire>:
 800c2a4:	4801      	ldr	r0, [pc, #4]	; (800c2ac <__sfp_lock_acquire+0x8>)
 800c2a6:	f000 bc44 	b.w	800cb32 <__retarget_lock_acquire_recursive>
 800c2aa:	bf00      	nop
 800c2ac:	20000591 	.word	0x20000591

0800c2b0 <__sfp_lock_release>:
 800c2b0:	4801      	ldr	r0, [pc, #4]	; (800c2b8 <__sfp_lock_release+0x8>)
 800c2b2:	f000 bc3f 	b.w	800cb34 <__retarget_lock_release_recursive>
 800c2b6:	bf00      	nop
 800c2b8:	20000591 	.word	0x20000591

0800c2bc <__sinit_lock_acquire>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__sinit_lock_acquire+0x8>)
 800c2be:	f000 bc38 	b.w	800cb32 <__retarget_lock_acquire_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	20000592 	.word	0x20000592

0800c2c8 <__sinit_lock_release>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	; (800c2d0 <__sinit_lock_release+0x8>)
 800c2ca:	f000 bc33 	b.w	800cb34 <__retarget_lock_release_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	20000592 	.word	0x20000592

0800c2d4 <__sinit>:
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	f7ff fff0 	bl	800c2bc <__sinit_lock_acquire>
 800c2dc:	69a3      	ldr	r3, [r4, #24]
 800c2de:	b11b      	cbz	r3, 800c2e8 <__sinit+0x14>
 800c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2e4:	f7ff bff0 	b.w	800c2c8 <__sinit_lock_release>
 800c2e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2ec:	6523      	str	r3, [r4, #80]	; 0x50
 800c2ee:	4b13      	ldr	r3, [pc, #76]	; (800c33c <__sinit+0x68>)
 800c2f0:	4a13      	ldr	r2, [pc, #76]	; (800c340 <__sinit+0x6c>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2f6:	42a3      	cmp	r3, r4
 800c2f8:	bf04      	itt	eq
 800c2fa:	2301      	moveq	r3, #1
 800c2fc:	61a3      	streq	r3, [r4, #24]
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f820 	bl	800c344 <__sfp>
 800c304:	6060      	str	r0, [r4, #4]
 800c306:	4620      	mov	r0, r4
 800c308:	f000 f81c 	bl	800c344 <__sfp>
 800c30c:	60a0      	str	r0, [r4, #8]
 800c30e:	4620      	mov	r0, r4
 800c310:	f000 f818 	bl	800c344 <__sfp>
 800c314:	2200      	movs	r2, #0
 800c316:	60e0      	str	r0, [r4, #12]
 800c318:	2104      	movs	r1, #4
 800c31a:	6860      	ldr	r0, [r4, #4]
 800c31c:	f7ff ff82 	bl	800c224 <std>
 800c320:	68a0      	ldr	r0, [r4, #8]
 800c322:	2201      	movs	r2, #1
 800c324:	2109      	movs	r1, #9
 800c326:	f7ff ff7d 	bl	800c224 <std>
 800c32a:	68e0      	ldr	r0, [r4, #12]
 800c32c:	2202      	movs	r2, #2
 800c32e:	2112      	movs	r1, #18
 800c330:	f7ff ff78 	bl	800c224 <std>
 800c334:	2301      	movs	r3, #1
 800c336:	61a3      	str	r3, [r4, #24]
 800c338:	e7d2      	b.n	800c2e0 <__sinit+0xc>
 800c33a:	bf00      	nop
 800c33c:	0800f7e8 	.word	0x0800f7e8
 800c340:	0800c26d 	.word	0x0800c26d

0800c344 <__sfp>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	4607      	mov	r7, r0
 800c348:	f7ff ffac 	bl	800c2a4 <__sfp_lock_acquire>
 800c34c:	4b1e      	ldr	r3, [pc, #120]	; (800c3c8 <__sfp+0x84>)
 800c34e:	681e      	ldr	r6, [r3, #0]
 800c350:	69b3      	ldr	r3, [r6, #24]
 800c352:	b913      	cbnz	r3, 800c35a <__sfp+0x16>
 800c354:	4630      	mov	r0, r6
 800c356:	f7ff ffbd 	bl	800c2d4 <__sinit>
 800c35a:	3648      	adds	r6, #72	; 0x48
 800c35c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c360:	3b01      	subs	r3, #1
 800c362:	d503      	bpl.n	800c36c <__sfp+0x28>
 800c364:	6833      	ldr	r3, [r6, #0]
 800c366:	b30b      	cbz	r3, 800c3ac <__sfp+0x68>
 800c368:	6836      	ldr	r6, [r6, #0]
 800c36a:	e7f7      	b.n	800c35c <__sfp+0x18>
 800c36c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c370:	b9d5      	cbnz	r5, 800c3a8 <__sfp+0x64>
 800c372:	4b16      	ldr	r3, [pc, #88]	; (800c3cc <__sfp+0x88>)
 800c374:	60e3      	str	r3, [r4, #12]
 800c376:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c37a:	6665      	str	r5, [r4, #100]	; 0x64
 800c37c:	f000 fbd8 	bl	800cb30 <__retarget_lock_init_recursive>
 800c380:	f7ff ff96 	bl	800c2b0 <__sfp_lock_release>
 800c384:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c388:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c38c:	6025      	str	r5, [r4, #0]
 800c38e:	61a5      	str	r5, [r4, #24]
 800c390:	2208      	movs	r2, #8
 800c392:	4629      	mov	r1, r5
 800c394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c398:	f7fd f994 	bl	80096c4 <memset>
 800c39c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3a8:	3468      	adds	r4, #104	; 0x68
 800c3aa:	e7d9      	b.n	800c360 <__sfp+0x1c>
 800c3ac:	2104      	movs	r1, #4
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	f7ff ff62 	bl	800c278 <__sfmoreglue>
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	6030      	str	r0, [r6, #0]
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d1d5      	bne.n	800c368 <__sfp+0x24>
 800c3bc:	f7ff ff78 	bl	800c2b0 <__sfp_lock_release>
 800c3c0:	230c      	movs	r3, #12
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	e7ee      	b.n	800c3a4 <__sfp+0x60>
 800c3c6:	bf00      	nop
 800c3c8:	0800f7e8 	.word	0x0800f7e8
 800c3cc:	ffff0001 	.word	0xffff0001

0800c3d0 <_fwalk>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3da:	2600      	movs	r6, #0
 800c3dc:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 800c3e0:	f1b8 0801 	subs.w	r8, r8, #1
 800c3e4:	d505      	bpl.n	800c3f2 <_fwalk+0x22>
 800c3e6:	6824      	ldr	r4, [r4, #0]
 800c3e8:	2c00      	cmp	r4, #0
 800c3ea:	d1f7      	bne.n	800c3dc <_fwalk+0xc>
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3f2:	89ab      	ldrh	r3, [r5, #12]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d906      	bls.n	800c406 <_fwalk+0x36>
 800c3f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	d002      	beq.n	800c406 <_fwalk+0x36>
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	4306      	orrs	r6, r0
 800c406:	3568      	adds	r5, #104	; 0x68
 800c408:	e7ea      	b.n	800c3e0 <_fwalk+0x10>

0800c40a <_fwalk_reent>:
 800c40a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c40e:	4606      	mov	r6, r0
 800c410:	4688      	mov	r8, r1
 800c412:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c416:	2700      	movs	r7, #0
 800c418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c41c:	f1b9 0901 	subs.w	r9, r9, #1
 800c420:	d505      	bpl.n	800c42e <_fwalk_reent+0x24>
 800c422:	6824      	ldr	r4, [r4, #0]
 800c424:	2c00      	cmp	r4, #0
 800c426:	d1f7      	bne.n	800c418 <_fwalk_reent+0xe>
 800c428:	4638      	mov	r0, r7
 800c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42e:	89ab      	ldrh	r3, [r5, #12]
 800c430:	2b01      	cmp	r3, #1
 800c432:	d907      	bls.n	800c444 <_fwalk_reent+0x3a>
 800c434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c438:	3301      	adds	r3, #1
 800c43a:	d003      	beq.n	800c444 <_fwalk_reent+0x3a>
 800c43c:	4629      	mov	r1, r5
 800c43e:	4630      	mov	r0, r6
 800c440:	47c0      	blx	r8
 800c442:	4307      	orrs	r7, r0
 800c444:	3568      	adds	r5, #104	; 0x68
 800c446:	e7e9      	b.n	800c41c <_fwalk_reent+0x12>

0800c448 <rshift>:
 800c448:	6903      	ldr	r3, [r0, #16]
 800c44a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c44e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c452:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c456:	f100 0414 	add.w	r4, r0, #20
 800c45a:	dd45      	ble.n	800c4e8 <rshift+0xa0>
 800c45c:	f011 011f 	ands.w	r1, r1, #31
 800c460:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c464:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c468:	d10c      	bne.n	800c484 <rshift+0x3c>
 800c46a:	f100 0710 	add.w	r7, r0, #16
 800c46e:	4629      	mov	r1, r5
 800c470:	42b1      	cmp	r1, r6
 800c472:	d334      	bcc.n	800c4de <rshift+0x96>
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	1eea      	subs	r2, r5, #3
 800c47a:	4296      	cmp	r6, r2
 800c47c:	bf38      	it	cc
 800c47e:	2300      	movcc	r3, #0
 800c480:	4423      	add	r3, r4
 800c482:	e015      	b.n	800c4b0 <rshift+0x68>
 800c484:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c488:	f1c1 0820 	rsb	r8, r1, #32
 800c48c:	40cf      	lsrs	r7, r1
 800c48e:	f105 0e04 	add.w	lr, r5, #4
 800c492:	46a1      	mov	r9, r4
 800c494:	4576      	cmp	r6, lr
 800c496:	46f4      	mov	ip, lr
 800c498:	d815      	bhi.n	800c4c6 <rshift+0x7e>
 800c49a:	1a9a      	subs	r2, r3, r2
 800c49c:	0092      	lsls	r2, r2, #2
 800c49e:	3a04      	subs	r2, #4
 800c4a0:	3501      	adds	r5, #1
 800c4a2:	42ae      	cmp	r6, r5
 800c4a4:	bf38      	it	cc
 800c4a6:	2200      	movcc	r2, #0
 800c4a8:	18a3      	adds	r3, r4, r2
 800c4aa:	50a7      	str	r7, [r4, r2]
 800c4ac:	b107      	cbz	r7, 800c4b0 <rshift+0x68>
 800c4ae:	3304      	adds	r3, #4
 800c4b0:	1b1a      	subs	r2, r3, r4
 800c4b2:	42a3      	cmp	r3, r4
 800c4b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4b8:	bf08      	it	eq
 800c4ba:	2300      	moveq	r3, #0
 800c4bc:	6102      	str	r2, [r0, #16]
 800c4be:	bf08      	it	eq
 800c4c0:	6143      	streq	r3, [r0, #20]
 800c4c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4c6:	f8dc c000 	ldr.w	ip, [ip]
 800c4ca:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4ce:	ea4c 0707 	orr.w	r7, ip, r7
 800c4d2:	f849 7b04 	str.w	r7, [r9], #4
 800c4d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4da:	40cf      	lsrs	r7, r1
 800c4dc:	e7da      	b.n	800c494 <rshift+0x4c>
 800c4de:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4e2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4e6:	e7c3      	b.n	800c470 <rshift+0x28>
 800c4e8:	4623      	mov	r3, r4
 800c4ea:	e7e1      	b.n	800c4b0 <rshift+0x68>

0800c4ec <__hexdig_fun>:
 800c4ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c4f0:	2b09      	cmp	r3, #9
 800c4f2:	d802      	bhi.n	800c4fa <__hexdig_fun+0xe>
 800c4f4:	3820      	subs	r0, #32
 800c4f6:	b2c0      	uxtb	r0, r0
 800c4f8:	4770      	bx	lr
 800c4fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c4fe:	2b05      	cmp	r3, #5
 800c500:	d801      	bhi.n	800c506 <__hexdig_fun+0x1a>
 800c502:	3847      	subs	r0, #71	; 0x47
 800c504:	e7f7      	b.n	800c4f6 <__hexdig_fun+0xa>
 800c506:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c50a:	2b05      	cmp	r3, #5
 800c50c:	d801      	bhi.n	800c512 <__hexdig_fun+0x26>
 800c50e:	3827      	subs	r0, #39	; 0x27
 800c510:	e7f1      	b.n	800c4f6 <__hexdig_fun+0xa>
 800c512:	2000      	movs	r0, #0
 800c514:	4770      	bx	lr
	...

0800c518 <__gethex>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	ed2d 8b02 	vpush	{d8}
 800c520:	b089      	sub	sp, #36	; 0x24
 800c522:	ee08 0a10 	vmov	s16, r0
 800c526:	9304      	str	r3, [sp, #16]
 800c528:	4bb4      	ldr	r3, [pc, #720]	; (800c7fc <__gethex+0x2e4>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	4618      	mov	r0, r3
 800c530:	468b      	mov	fp, r1
 800c532:	4690      	mov	r8, r2
 800c534:	f7f3 fe64 	bl	8000200 <strlen>
 800c538:	9b01      	ldr	r3, [sp, #4]
 800c53a:	f8db 2000 	ldr.w	r2, [fp]
 800c53e:	4403      	add	r3, r0
 800c540:	4682      	mov	sl, r0
 800c542:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c546:	9305      	str	r3, [sp, #20]
 800c548:	1c93      	adds	r3, r2, #2
 800c54a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c54e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c552:	32fe      	adds	r2, #254	; 0xfe
 800c554:	18d1      	adds	r1, r2, r3
 800c556:	461f      	mov	r7, r3
 800c558:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c55c:	9100      	str	r1, [sp, #0]
 800c55e:	2830      	cmp	r0, #48	; 0x30
 800c560:	d0f8      	beq.n	800c554 <__gethex+0x3c>
 800c562:	f7ff ffc3 	bl	800c4ec <__hexdig_fun>
 800c566:	4604      	mov	r4, r0
 800c568:	2800      	cmp	r0, #0
 800c56a:	d13a      	bne.n	800c5e2 <__gethex+0xca>
 800c56c:	9901      	ldr	r1, [sp, #4]
 800c56e:	4652      	mov	r2, sl
 800c570:	4638      	mov	r0, r7
 800c572:	f002 f85c 	bl	800e62e <strncmp>
 800c576:	4605      	mov	r5, r0
 800c578:	2800      	cmp	r0, #0
 800c57a:	d168      	bne.n	800c64e <__gethex+0x136>
 800c57c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c580:	eb07 060a 	add.w	r6, r7, sl
 800c584:	f7ff ffb2 	bl	800c4ec <__hexdig_fun>
 800c588:	2800      	cmp	r0, #0
 800c58a:	d062      	beq.n	800c652 <__gethex+0x13a>
 800c58c:	4633      	mov	r3, r6
 800c58e:	7818      	ldrb	r0, [r3, #0]
 800c590:	2830      	cmp	r0, #48	; 0x30
 800c592:	461f      	mov	r7, r3
 800c594:	f103 0301 	add.w	r3, r3, #1
 800c598:	d0f9      	beq.n	800c58e <__gethex+0x76>
 800c59a:	f7ff ffa7 	bl	800c4ec <__hexdig_fun>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	fab0 f480 	clz	r4, r0
 800c5a4:	0964      	lsrs	r4, r4, #5
 800c5a6:	4635      	mov	r5, r6
 800c5a8:	9300      	str	r3, [sp, #0]
 800c5aa:	463a      	mov	r2, r7
 800c5ac:	4616      	mov	r6, r2
 800c5ae:	3201      	adds	r2, #1
 800c5b0:	7830      	ldrb	r0, [r6, #0]
 800c5b2:	f7ff ff9b 	bl	800c4ec <__hexdig_fun>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d1f8      	bne.n	800c5ac <__gethex+0x94>
 800c5ba:	9901      	ldr	r1, [sp, #4]
 800c5bc:	4652      	mov	r2, sl
 800c5be:	4630      	mov	r0, r6
 800c5c0:	f002 f835 	bl	800e62e <strncmp>
 800c5c4:	b980      	cbnz	r0, 800c5e8 <__gethex+0xd0>
 800c5c6:	b94d      	cbnz	r5, 800c5dc <__gethex+0xc4>
 800c5c8:	eb06 050a 	add.w	r5, r6, sl
 800c5cc:	462a      	mov	r2, r5
 800c5ce:	4616      	mov	r6, r2
 800c5d0:	3201      	adds	r2, #1
 800c5d2:	7830      	ldrb	r0, [r6, #0]
 800c5d4:	f7ff ff8a 	bl	800c4ec <__hexdig_fun>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d1f8      	bne.n	800c5ce <__gethex+0xb6>
 800c5dc:	1bad      	subs	r5, r5, r6
 800c5de:	00ad      	lsls	r5, r5, #2
 800c5e0:	e004      	b.n	800c5ec <__gethex+0xd4>
 800c5e2:	2400      	movs	r4, #0
 800c5e4:	4625      	mov	r5, r4
 800c5e6:	e7e0      	b.n	800c5aa <__gethex+0x92>
 800c5e8:	2d00      	cmp	r5, #0
 800c5ea:	d1f7      	bne.n	800c5dc <__gethex+0xc4>
 800c5ec:	7833      	ldrb	r3, [r6, #0]
 800c5ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5f2:	2b50      	cmp	r3, #80	; 0x50
 800c5f4:	d13b      	bne.n	800c66e <__gethex+0x156>
 800c5f6:	7873      	ldrb	r3, [r6, #1]
 800c5f8:	2b2b      	cmp	r3, #43	; 0x2b
 800c5fa:	d02c      	beq.n	800c656 <__gethex+0x13e>
 800c5fc:	2b2d      	cmp	r3, #45	; 0x2d
 800c5fe:	d02e      	beq.n	800c65e <__gethex+0x146>
 800c600:	1c71      	adds	r1, r6, #1
 800c602:	f04f 0900 	mov.w	r9, #0
 800c606:	7808      	ldrb	r0, [r1, #0]
 800c608:	f7ff ff70 	bl	800c4ec <__hexdig_fun>
 800c60c:	1e43      	subs	r3, r0, #1
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b18      	cmp	r3, #24
 800c612:	d82c      	bhi.n	800c66e <__gethex+0x156>
 800c614:	f1a0 0210 	sub.w	r2, r0, #16
 800c618:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c61c:	f7ff ff66 	bl	800c4ec <__hexdig_fun>
 800c620:	1e43      	subs	r3, r0, #1
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b18      	cmp	r3, #24
 800c626:	d91d      	bls.n	800c664 <__gethex+0x14c>
 800c628:	f1b9 0f00 	cmp.w	r9, #0
 800c62c:	d000      	beq.n	800c630 <__gethex+0x118>
 800c62e:	4252      	negs	r2, r2
 800c630:	4415      	add	r5, r2
 800c632:	f8cb 1000 	str.w	r1, [fp]
 800c636:	b1e4      	cbz	r4, 800c672 <__gethex+0x15a>
 800c638:	9b00      	ldr	r3, [sp, #0]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	bf14      	ite	ne
 800c63e:	2700      	movne	r7, #0
 800c640:	2706      	moveq	r7, #6
 800c642:	4638      	mov	r0, r7
 800c644:	b009      	add	sp, #36	; 0x24
 800c646:	ecbd 8b02 	vpop	{d8}
 800c64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64e:	463e      	mov	r6, r7
 800c650:	4625      	mov	r5, r4
 800c652:	2401      	movs	r4, #1
 800c654:	e7ca      	b.n	800c5ec <__gethex+0xd4>
 800c656:	f04f 0900 	mov.w	r9, #0
 800c65a:	1cb1      	adds	r1, r6, #2
 800c65c:	e7d3      	b.n	800c606 <__gethex+0xee>
 800c65e:	f04f 0901 	mov.w	r9, #1
 800c662:	e7fa      	b.n	800c65a <__gethex+0x142>
 800c664:	230a      	movs	r3, #10
 800c666:	fb03 0202 	mla	r2, r3, r2, r0
 800c66a:	3a10      	subs	r2, #16
 800c66c:	e7d4      	b.n	800c618 <__gethex+0x100>
 800c66e:	4631      	mov	r1, r6
 800c670:	e7df      	b.n	800c632 <__gethex+0x11a>
 800c672:	1bf3      	subs	r3, r6, r7
 800c674:	3b01      	subs	r3, #1
 800c676:	4621      	mov	r1, r4
 800c678:	2b07      	cmp	r3, #7
 800c67a:	dc0b      	bgt.n	800c694 <__gethex+0x17c>
 800c67c:	ee18 0a10 	vmov	r0, s16
 800c680:	f000 fad8 	bl	800cc34 <_Balloc>
 800c684:	4604      	mov	r4, r0
 800c686:	b940      	cbnz	r0, 800c69a <__gethex+0x182>
 800c688:	4b5d      	ldr	r3, [pc, #372]	; (800c800 <__gethex+0x2e8>)
 800c68a:	4602      	mov	r2, r0
 800c68c:	21de      	movs	r1, #222	; 0xde
 800c68e:	485d      	ldr	r0, [pc, #372]	; (800c804 <__gethex+0x2ec>)
 800c690:	f002 fa08 	bl	800eaa4 <__assert_func>
 800c694:	3101      	adds	r1, #1
 800c696:	105b      	asrs	r3, r3, #1
 800c698:	e7ee      	b.n	800c678 <__gethex+0x160>
 800c69a:	f100 0914 	add.w	r9, r0, #20
 800c69e:	f04f 0b00 	mov.w	fp, #0
 800c6a2:	f1ca 0301 	rsb	r3, sl, #1
 800c6a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800c6aa:	f8cd b000 	str.w	fp, [sp]
 800c6ae:	9306      	str	r3, [sp, #24]
 800c6b0:	42b7      	cmp	r7, r6
 800c6b2:	d340      	bcc.n	800c736 <__gethex+0x21e>
 800c6b4:	9802      	ldr	r0, [sp, #8]
 800c6b6:	9b00      	ldr	r3, [sp, #0]
 800c6b8:	f840 3b04 	str.w	r3, [r0], #4
 800c6bc:	eba0 0009 	sub.w	r0, r0, r9
 800c6c0:	1080      	asrs	r0, r0, #2
 800c6c2:	0146      	lsls	r6, r0, #5
 800c6c4:	6120      	str	r0, [r4, #16]
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f000 fba6 	bl	800ce18 <__hi0bits>
 800c6cc:	1a30      	subs	r0, r6, r0
 800c6ce:	f8d8 6000 	ldr.w	r6, [r8]
 800c6d2:	42b0      	cmp	r0, r6
 800c6d4:	dd63      	ble.n	800c79e <__gethex+0x286>
 800c6d6:	1b87      	subs	r7, r0, r6
 800c6d8:	4639      	mov	r1, r7
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f000 ff4a 	bl	800d574 <__any_on>
 800c6e0:	4682      	mov	sl, r0
 800c6e2:	b1a8      	cbz	r0, 800c710 <__gethex+0x1f8>
 800c6e4:	1e7b      	subs	r3, r7, #1
 800c6e6:	1159      	asrs	r1, r3, #5
 800c6e8:	f003 021f 	and.w	r2, r3, #31
 800c6ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c6f0:	f04f 0a01 	mov.w	sl, #1
 800c6f4:	fa0a f202 	lsl.w	r2, sl, r2
 800c6f8:	420a      	tst	r2, r1
 800c6fa:	d009      	beq.n	800c710 <__gethex+0x1f8>
 800c6fc:	4553      	cmp	r3, sl
 800c6fe:	dd05      	ble.n	800c70c <__gethex+0x1f4>
 800c700:	1eb9      	subs	r1, r7, #2
 800c702:	4620      	mov	r0, r4
 800c704:	f000 ff36 	bl	800d574 <__any_on>
 800c708:	2800      	cmp	r0, #0
 800c70a:	d145      	bne.n	800c798 <__gethex+0x280>
 800c70c:	f04f 0a02 	mov.w	sl, #2
 800c710:	4639      	mov	r1, r7
 800c712:	4620      	mov	r0, r4
 800c714:	f7ff fe98 	bl	800c448 <rshift>
 800c718:	443d      	add	r5, r7
 800c71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c71e:	42ab      	cmp	r3, r5
 800c720:	da4c      	bge.n	800c7bc <__gethex+0x2a4>
 800c722:	ee18 0a10 	vmov	r0, s16
 800c726:	4621      	mov	r1, r4
 800c728:	f000 fac4 	bl	800ccb4 <_Bfree>
 800c72c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c72e:	2300      	movs	r3, #0
 800c730:	6013      	str	r3, [r2, #0]
 800c732:	27a3      	movs	r7, #163	; 0xa3
 800c734:	e785      	b.n	800c642 <__gethex+0x12a>
 800c736:	1e73      	subs	r3, r6, #1
 800c738:	9a05      	ldr	r2, [sp, #20]
 800c73a:	9303      	str	r3, [sp, #12]
 800c73c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c740:	4293      	cmp	r3, r2
 800c742:	d019      	beq.n	800c778 <__gethex+0x260>
 800c744:	f1bb 0f20 	cmp.w	fp, #32
 800c748:	d107      	bne.n	800c75a <__gethex+0x242>
 800c74a:	9b02      	ldr	r3, [sp, #8]
 800c74c:	9a00      	ldr	r2, [sp, #0]
 800c74e:	f843 2b04 	str.w	r2, [r3], #4
 800c752:	9302      	str	r3, [sp, #8]
 800c754:	2300      	movs	r3, #0
 800c756:	9300      	str	r3, [sp, #0]
 800c758:	469b      	mov	fp, r3
 800c75a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c75e:	f7ff fec5 	bl	800c4ec <__hexdig_fun>
 800c762:	9b00      	ldr	r3, [sp, #0]
 800c764:	f000 000f 	and.w	r0, r0, #15
 800c768:	fa00 f00b 	lsl.w	r0, r0, fp
 800c76c:	4303      	orrs	r3, r0
 800c76e:	9300      	str	r3, [sp, #0]
 800c770:	f10b 0b04 	add.w	fp, fp, #4
 800c774:	9b03      	ldr	r3, [sp, #12]
 800c776:	e00d      	b.n	800c794 <__gethex+0x27c>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	9a06      	ldr	r2, [sp, #24]
 800c77c:	4413      	add	r3, r2
 800c77e:	42bb      	cmp	r3, r7
 800c780:	d3e0      	bcc.n	800c744 <__gethex+0x22c>
 800c782:	4618      	mov	r0, r3
 800c784:	9901      	ldr	r1, [sp, #4]
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	4652      	mov	r2, sl
 800c78a:	f001 ff50 	bl	800e62e <strncmp>
 800c78e:	9b07      	ldr	r3, [sp, #28]
 800c790:	2800      	cmp	r0, #0
 800c792:	d1d7      	bne.n	800c744 <__gethex+0x22c>
 800c794:	461e      	mov	r6, r3
 800c796:	e78b      	b.n	800c6b0 <__gethex+0x198>
 800c798:	f04f 0a03 	mov.w	sl, #3
 800c79c:	e7b8      	b.n	800c710 <__gethex+0x1f8>
 800c79e:	da0a      	bge.n	800c7b6 <__gethex+0x29e>
 800c7a0:	1a37      	subs	r7, r6, r0
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	ee18 0a10 	vmov	r0, s16
 800c7a8:	463a      	mov	r2, r7
 800c7aa:	f000 fc9f 	bl	800d0ec <__lshift>
 800c7ae:	1bed      	subs	r5, r5, r7
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	f100 0914 	add.w	r9, r0, #20
 800c7b6:	f04f 0a00 	mov.w	sl, #0
 800c7ba:	e7ae      	b.n	800c71a <__gethex+0x202>
 800c7bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c7c0:	42a8      	cmp	r0, r5
 800c7c2:	dd72      	ble.n	800c8aa <__gethex+0x392>
 800c7c4:	1b45      	subs	r5, r0, r5
 800c7c6:	42ae      	cmp	r6, r5
 800c7c8:	dc36      	bgt.n	800c838 <__gethex+0x320>
 800c7ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c7ce:	2b02      	cmp	r3, #2
 800c7d0:	d02a      	beq.n	800c828 <__gethex+0x310>
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d02c      	beq.n	800c830 <__gethex+0x318>
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d11c      	bne.n	800c814 <__gethex+0x2fc>
 800c7da:	42ae      	cmp	r6, r5
 800c7dc:	d11a      	bne.n	800c814 <__gethex+0x2fc>
 800c7de:	2e01      	cmp	r6, #1
 800c7e0:	d112      	bne.n	800c808 <__gethex+0x2f0>
 800c7e2:	9a04      	ldr	r2, [sp, #16]
 800c7e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	6123      	str	r3, [r4, #16]
 800c7ee:	f8c9 3000 	str.w	r3, [r9]
 800c7f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c7f4:	2762      	movs	r7, #98	; 0x62
 800c7f6:	601c      	str	r4, [r3, #0]
 800c7f8:	e723      	b.n	800c642 <__gethex+0x12a>
 800c7fa:	bf00      	nop
 800c7fc:	0800fad4 	.word	0x0800fad4
 800c800:	0800f9f8 	.word	0x0800f9f8
 800c804:	0800fa6c 	.word	0x0800fa6c
 800c808:	1e71      	subs	r1, r6, #1
 800c80a:	4620      	mov	r0, r4
 800c80c:	f000 feb2 	bl	800d574 <__any_on>
 800c810:	2800      	cmp	r0, #0
 800c812:	d1e6      	bne.n	800c7e2 <__gethex+0x2ca>
 800c814:	ee18 0a10 	vmov	r0, s16
 800c818:	4621      	mov	r1, r4
 800c81a:	f000 fa4b 	bl	800ccb4 <_Bfree>
 800c81e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c820:	2300      	movs	r3, #0
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	2750      	movs	r7, #80	; 0x50
 800c826:	e70c      	b.n	800c642 <__gethex+0x12a>
 800c828:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1f2      	bne.n	800c814 <__gethex+0x2fc>
 800c82e:	e7d8      	b.n	800c7e2 <__gethex+0x2ca>
 800c830:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1d5      	bne.n	800c7e2 <__gethex+0x2ca>
 800c836:	e7ed      	b.n	800c814 <__gethex+0x2fc>
 800c838:	1e6f      	subs	r7, r5, #1
 800c83a:	f1ba 0f00 	cmp.w	sl, #0
 800c83e:	d131      	bne.n	800c8a4 <__gethex+0x38c>
 800c840:	b127      	cbz	r7, 800c84c <__gethex+0x334>
 800c842:	4639      	mov	r1, r7
 800c844:	4620      	mov	r0, r4
 800c846:	f000 fe95 	bl	800d574 <__any_on>
 800c84a:	4682      	mov	sl, r0
 800c84c:	117b      	asrs	r3, r7, #5
 800c84e:	2101      	movs	r1, #1
 800c850:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c854:	f007 071f 	and.w	r7, r7, #31
 800c858:	fa01 f707 	lsl.w	r7, r1, r7
 800c85c:	421f      	tst	r7, r3
 800c85e:	4629      	mov	r1, r5
 800c860:	4620      	mov	r0, r4
 800c862:	bf18      	it	ne
 800c864:	f04a 0a02 	orrne.w	sl, sl, #2
 800c868:	1b76      	subs	r6, r6, r5
 800c86a:	f7ff fded 	bl	800c448 <rshift>
 800c86e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c872:	2702      	movs	r7, #2
 800c874:	f1ba 0f00 	cmp.w	sl, #0
 800c878:	d048      	beq.n	800c90c <__gethex+0x3f4>
 800c87a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d015      	beq.n	800c8ae <__gethex+0x396>
 800c882:	2b03      	cmp	r3, #3
 800c884:	d017      	beq.n	800c8b6 <__gethex+0x39e>
 800c886:	2b01      	cmp	r3, #1
 800c888:	d109      	bne.n	800c89e <__gethex+0x386>
 800c88a:	f01a 0f02 	tst.w	sl, #2
 800c88e:	d006      	beq.n	800c89e <__gethex+0x386>
 800c890:	f8d9 0000 	ldr.w	r0, [r9]
 800c894:	ea4a 0a00 	orr.w	sl, sl, r0
 800c898:	f01a 0f01 	tst.w	sl, #1
 800c89c:	d10e      	bne.n	800c8bc <__gethex+0x3a4>
 800c89e:	f047 0710 	orr.w	r7, r7, #16
 800c8a2:	e033      	b.n	800c90c <__gethex+0x3f4>
 800c8a4:	f04f 0a01 	mov.w	sl, #1
 800c8a8:	e7d0      	b.n	800c84c <__gethex+0x334>
 800c8aa:	2701      	movs	r7, #1
 800c8ac:	e7e2      	b.n	800c874 <__gethex+0x35c>
 800c8ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8b0:	f1c3 0301 	rsb	r3, r3, #1
 800c8b4:	9315      	str	r3, [sp, #84]	; 0x54
 800c8b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0f0      	beq.n	800c89e <__gethex+0x386>
 800c8bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8c0:	f104 0314 	add.w	r3, r4, #20
 800c8c4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c8c8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c8cc:	f04f 0c00 	mov.w	ip, #0
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c8da:	d01c      	beq.n	800c916 <__gethex+0x3fe>
 800c8dc:	3201      	adds	r2, #1
 800c8de:	6002      	str	r2, [r0, #0]
 800c8e0:	2f02      	cmp	r7, #2
 800c8e2:	f104 0314 	add.w	r3, r4, #20
 800c8e6:	d13f      	bne.n	800c968 <__gethex+0x450>
 800c8e8:	f8d8 2000 	ldr.w	r2, [r8]
 800c8ec:	3a01      	subs	r2, #1
 800c8ee:	42b2      	cmp	r2, r6
 800c8f0:	d10a      	bne.n	800c908 <__gethex+0x3f0>
 800c8f2:	1171      	asrs	r1, r6, #5
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8fa:	f006 061f 	and.w	r6, r6, #31
 800c8fe:	fa02 f606 	lsl.w	r6, r2, r6
 800c902:	421e      	tst	r6, r3
 800c904:	bf18      	it	ne
 800c906:	4617      	movne	r7, r2
 800c908:	f047 0720 	orr.w	r7, r7, #32
 800c90c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c90e:	601c      	str	r4, [r3, #0]
 800c910:	9b04      	ldr	r3, [sp, #16]
 800c912:	601d      	str	r5, [r3, #0]
 800c914:	e695      	b.n	800c642 <__gethex+0x12a>
 800c916:	4299      	cmp	r1, r3
 800c918:	f843 cc04 	str.w	ip, [r3, #-4]
 800c91c:	d8d8      	bhi.n	800c8d0 <__gethex+0x3b8>
 800c91e:	68a3      	ldr	r3, [r4, #8]
 800c920:	459b      	cmp	fp, r3
 800c922:	db19      	blt.n	800c958 <__gethex+0x440>
 800c924:	6861      	ldr	r1, [r4, #4]
 800c926:	ee18 0a10 	vmov	r0, s16
 800c92a:	3101      	adds	r1, #1
 800c92c:	f000 f982 	bl	800cc34 <_Balloc>
 800c930:	4681      	mov	r9, r0
 800c932:	b918      	cbnz	r0, 800c93c <__gethex+0x424>
 800c934:	4b1a      	ldr	r3, [pc, #104]	; (800c9a0 <__gethex+0x488>)
 800c936:	4602      	mov	r2, r0
 800c938:	2184      	movs	r1, #132	; 0x84
 800c93a:	e6a8      	b.n	800c68e <__gethex+0x176>
 800c93c:	6922      	ldr	r2, [r4, #16]
 800c93e:	3202      	adds	r2, #2
 800c940:	f104 010c 	add.w	r1, r4, #12
 800c944:	0092      	lsls	r2, r2, #2
 800c946:	300c      	adds	r0, #12
 800c948:	f7fc feae 	bl	80096a8 <memcpy>
 800c94c:	4621      	mov	r1, r4
 800c94e:	ee18 0a10 	vmov	r0, s16
 800c952:	f000 f9af 	bl	800ccb4 <_Bfree>
 800c956:	464c      	mov	r4, r9
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c960:	6122      	str	r2, [r4, #16]
 800c962:	2201      	movs	r2, #1
 800c964:	615a      	str	r2, [r3, #20]
 800c966:	e7bb      	b.n	800c8e0 <__gethex+0x3c8>
 800c968:	6922      	ldr	r2, [r4, #16]
 800c96a:	455a      	cmp	r2, fp
 800c96c:	dd0b      	ble.n	800c986 <__gethex+0x46e>
 800c96e:	2101      	movs	r1, #1
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff fd69 	bl	800c448 <rshift>
 800c976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c97a:	3501      	adds	r5, #1
 800c97c:	42ab      	cmp	r3, r5
 800c97e:	f6ff aed0 	blt.w	800c722 <__gethex+0x20a>
 800c982:	2701      	movs	r7, #1
 800c984:	e7c0      	b.n	800c908 <__gethex+0x3f0>
 800c986:	f016 061f 	ands.w	r6, r6, #31
 800c98a:	d0fa      	beq.n	800c982 <__gethex+0x46a>
 800c98c:	4453      	add	r3, sl
 800c98e:	f1c6 0620 	rsb	r6, r6, #32
 800c992:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c996:	f000 fa3f 	bl	800ce18 <__hi0bits>
 800c99a:	42b0      	cmp	r0, r6
 800c99c:	dbe7      	blt.n	800c96e <__gethex+0x456>
 800c99e:	e7f0      	b.n	800c982 <__gethex+0x46a>
 800c9a0:	0800f9f8 	.word	0x0800f9f8

0800c9a4 <L_shift>:
 800c9a4:	f1c2 0208 	rsb	r2, r2, #8
 800c9a8:	0092      	lsls	r2, r2, #2
 800c9aa:	b570      	push	{r4, r5, r6, lr}
 800c9ac:	f1c2 0620 	rsb	r6, r2, #32
 800c9b0:	6843      	ldr	r3, [r0, #4]
 800c9b2:	6804      	ldr	r4, [r0, #0]
 800c9b4:	fa03 f506 	lsl.w	r5, r3, r6
 800c9b8:	432c      	orrs	r4, r5
 800c9ba:	40d3      	lsrs	r3, r2
 800c9bc:	6004      	str	r4, [r0, #0]
 800c9be:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9c2:	4288      	cmp	r0, r1
 800c9c4:	d3f4      	bcc.n	800c9b0 <L_shift+0xc>
 800c9c6:	bd70      	pop	{r4, r5, r6, pc}

0800c9c8 <__match>:
 800c9c8:	b530      	push	{r4, r5, lr}
 800c9ca:	6803      	ldr	r3, [r0, #0]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d2:	b914      	cbnz	r4, 800c9da <__match+0x12>
 800c9d4:	6003      	str	r3, [r0, #0]
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	bd30      	pop	{r4, r5, pc}
 800c9da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c9e2:	2d19      	cmp	r5, #25
 800c9e4:	bf98      	it	ls
 800c9e6:	3220      	addls	r2, #32
 800c9e8:	42a2      	cmp	r2, r4
 800c9ea:	d0f0      	beq.n	800c9ce <__match+0x6>
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	e7f3      	b.n	800c9d8 <__match+0x10>

0800c9f0 <__hexnan>:
 800c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f4:	680b      	ldr	r3, [r1, #0]
 800c9f6:	115e      	asrs	r6, r3, #5
 800c9f8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9fc:	f013 031f 	ands.w	r3, r3, #31
 800ca00:	b087      	sub	sp, #28
 800ca02:	bf18      	it	ne
 800ca04:	3604      	addne	r6, #4
 800ca06:	2500      	movs	r5, #0
 800ca08:	1f37      	subs	r7, r6, #4
 800ca0a:	4690      	mov	r8, r2
 800ca0c:	6802      	ldr	r2, [r0, #0]
 800ca0e:	9301      	str	r3, [sp, #4]
 800ca10:	4682      	mov	sl, r0
 800ca12:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca16:	46b9      	mov	r9, r7
 800ca18:	463c      	mov	r4, r7
 800ca1a:	9502      	str	r5, [sp, #8]
 800ca1c:	46ab      	mov	fp, r5
 800ca1e:	7851      	ldrb	r1, [r2, #1]
 800ca20:	1c53      	adds	r3, r2, #1
 800ca22:	9303      	str	r3, [sp, #12]
 800ca24:	b341      	cbz	r1, 800ca78 <__hexnan+0x88>
 800ca26:	4608      	mov	r0, r1
 800ca28:	9205      	str	r2, [sp, #20]
 800ca2a:	9104      	str	r1, [sp, #16]
 800ca2c:	f7ff fd5e 	bl	800c4ec <__hexdig_fun>
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d14f      	bne.n	800cad4 <__hexnan+0xe4>
 800ca34:	9904      	ldr	r1, [sp, #16]
 800ca36:	9a05      	ldr	r2, [sp, #20]
 800ca38:	2920      	cmp	r1, #32
 800ca3a:	d818      	bhi.n	800ca6e <__hexnan+0x7e>
 800ca3c:	9b02      	ldr	r3, [sp, #8]
 800ca3e:	459b      	cmp	fp, r3
 800ca40:	dd13      	ble.n	800ca6a <__hexnan+0x7a>
 800ca42:	454c      	cmp	r4, r9
 800ca44:	d206      	bcs.n	800ca54 <__hexnan+0x64>
 800ca46:	2d07      	cmp	r5, #7
 800ca48:	dc04      	bgt.n	800ca54 <__hexnan+0x64>
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	4649      	mov	r1, r9
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f7ff ffa8 	bl	800c9a4 <L_shift>
 800ca54:	4544      	cmp	r4, r8
 800ca56:	d950      	bls.n	800cafa <__hexnan+0x10a>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f1a4 0904 	sub.w	r9, r4, #4
 800ca5e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca62:	f8cd b008 	str.w	fp, [sp, #8]
 800ca66:	464c      	mov	r4, r9
 800ca68:	461d      	mov	r5, r3
 800ca6a:	9a03      	ldr	r2, [sp, #12]
 800ca6c:	e7d7      	b.n	800ca1e <__hexnan+0x2e>
 800ca6e:	2929      	cmp	r1, #41	; 0x29
 800ca70:	d156      	bne.n	800cb20 <__hexnan+0x130>
 800ca72:	3202      	adds	r2, #2
 800ca74:	f8ca 2000 	str.w	r2, [sl]
 800ca78:	f1bb 0f00 	cmp.w	fp, #0
 800ca7c:	d050      	beq.n	800cb20 <__hexnan+0x130>
 800ca7e:	454c      	cmp	r4, r9
 800ca80:	d206      	bcs.n	800ca90 <__hexnan+0xa0>
 800ca82:	2d07      	cmp	r5, #7
 800ca84:	dc04      	bgt.n	800ca90 <__hexnan+0xa0>
 800ca86:	462a      	mov	r2, r5
 800ca88:	4649      	mov	r1, r9
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f7ff ff8a 	bl	800c9a4 <L_shift>
 800ca90:	4544      	cmp	r4, r8
 800ca92:	d934      	bls.n	800cafe <__hexnan+0x10e>
 800ca94:	f1a8 0204 	sub.w	r2, r8, #4
 800ca98:	4623      	mov	r3, r4
 800ca9a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca9e:	f842 1f04 	str.w	r1, [r2, #4]!
 800caa2:	429f      	cmp	r7, r3
 800caa4:	d2f9      	bcs.n	800ca9a <__hexnan+0xaa>
 800caa6:	1b3b      	subs	r3, r7, r4
 800caa8:	f023 0303 	bic.w	r3, r3, #3
 800caac:	3304      	adds	r3, #4
 800caae:	3401      	adds	r4, #1
 800cab0:	3e03      	subs	r6, #3
 800cab2:	42b4      	cmp	r4, r6
 800cab4:	bf88      	it	hi
 800cab6:	2304      	movhi	r3, #4
 800cab8:	4443      	add	r3, r8
 800caba:	2200      	movs	r2, #0
 800cabc:	f843 2b04 	str.w	r2, [r3], #4
 800cac0:	429f      	cmp	r7, r3
 800cac2:	d2fb      	bcs.n	800cabc <__hexnan+0xcc>
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	b91b      	cbnz	r3, 800cad0 <__hexnan+0xe0>
 800cac8:	4547      	cmp	r7, r8
 800caca:	d127      	bne.n	800cb1c <__hexnan+0x12c>
 800cacc:	2301      	movs	r3, #1
 800cace:	603b      	str	r3, [r7, #0]
 800cad0:	2005      	movs	r0, #5
 800cad2:	e026      	b.n	800cb22 <__hexnan+0x132>
 800cad4:	3501      	adds	r5, #1
 800cad6:	2d08      	cmp	r5, #8
 800cad8:	f10b 0b01 	add.w	fp, fp, #1
 800cadc:	dd06      	ble.n	800caec <__hexnan+0xfc>
 800cade:	4544      	cmp	r4, r8
 800cae0:	d9c3      	bls.n	800ca6a <__hexnan+0x7a>
 800cae2:	2300      	movs	r3, #0
 800cae4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cae8:	2501      	movs	r5, #1
 800caea:	3c04      	subs	r4, #4
 800caec:	6822      	ldr	r2, [r4, #0]
 800caee:	f000 000f 	and.w	r0, r0, #15
 800caf2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800caf6:	6022      	str	r2, [r4, #0]
 800caf8:	e7b7      	b.n	800ca6a <__hexnan+0x7a>
 800cafa:	2508      	movs	r5, #8
 800cafc:	e7b5      	b.n	800ca6a <__hexnan+0x7a>
 800cafe:	9b01      	ldr	r3, [sp, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d0df      	beq.n	800cac4 <__hexnan+0xd4>
 800cb04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb08:	f1c3 0320 	rsb	r3, r3, #32
 800cb0c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cb14:	401a      	ands	r2, r3
 800cb16:	f846 2c04 	str.w	r2, [r6, #-4]
 800cb1a:	e7d3      	b.n	800cac4 <__hexnan+0xd4>
 800cb1c:	3f04      	subs	r7, #4
 800cb1e:	e7d1      	b.n	800cac4 <__hexnan+0xd4>
 800cb20:	2004      	movs	r0, #4
 800cb22:	b007      	add	sp, #28
 800cb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb28 <_localeconv_r>:
 800cb28:	4800      	ldr	r0, [pc, #0]	; (800cb2c <_localeconv_r+0x4>)
 800cb2a:	4770      	bx	lr
 800cb2c:	200001a4 	.word	0x200001a4

0800cb30 <__retarget_lock_init_recursive>:
 800cb30:	4770      	bx	lr

0800cb32 <__retarget_lock_acquire_recursive>:
 800cb32:	4770      	bx	lr

0800cb34 <__retarget_lock_release_recursive>:
 800cb34:	4770      	bx	lr

0800cb36 <__swhatbuf_r>:
 800cb36:	b570      	push	{r4, r5, r6, lr}
 800cb38:	460e      	mov	r6, r1
 800cb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	b096      	sub	sp, #88	; 0x58
 800cb42:	4614      	mov	r4, r2
 800cb44:	461d      	mov	r5, r3
 800cb46:	da08      	bge.n	800cb5a <__swhatbuf_r+0x24>
 800cb48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	602a      	str	r2, [r5, #0]
 800cb50:	061a      	lsls	r2, r3, #24
 800cb52:	d410      	bmi.n	800cb76 <__swhatbuf_r+0x40>
 800cb54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb58:	e00e      	b.n	800cb78 <__swhatbuf_r+0x42>
 800cb5a:	466a      	mov	r2, sp
 800cb5c:	f001 ffe2 	bl	800eb24 <_fstat_r>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	dbf1      	blt.n	800cb48 <__swhatbuf_r+0x12>
 800cb64:	9a01      	ldr	r2, [sp, #4]
 800cb66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb6e:	425a      	negs	r2, r3
 800cb70:	415a      	adcs	r2, r3
 800cb72:	602a      	str	r2, [r5, #0]
 800cb74:	e7ee      	b.n	800cb54 <__swhatbuf_r+0x1e>
 800cb76:	2340      	movs	r3, #64	; 0x40
 800cb78:	2000      	movs	r0, #0
 800cb7a:	6023      	str	r3, [r4, #0]
 800cb7c:	b016      	add	sp, #88	; 0x58
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}

0800cb80 <__smakebuf_r>:
 800cb80:	898b      	ldrh	r3, [r1, #12]
 800cb82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb84:	079d      	lsls	r5, r3, #30
 800cb86:	4606      	mov	r6, r0
 800cb88:	460c      	mov	r4, r1
 800cb8a:	d507      	bpl.n	800cb9c <__smakebuf_r+0x1c>
 800cb8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	6123      	str	r3, [r4, #16]
 800cb94:	2301      	movs	r3, #1
 800cb96:	6163      	str	r3, [r4, #20]
 800cb98:	b002      	add	sp, #8
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
 800cb9c:	ab01      	add	r3, sp, #4
 800cb9e:	466a      	mov	r2, sp
 800cba0:	f7ff ffc9 	bl	800cb36 <__swhatbuf_r>
 800cba4:	9900      	ldr	r1, [sp, #0]
 800cba6:	4605      	mov	r5, r0
 800cba8:	4630      	mov	r0, r6
 800cbaa:	f000 fd87 	bl	800d6bc <_malloc_r>
 800cbae:	b948      	cbnz	r0, 800cbc4 <__smakebuf_r+0x44>
 800cbb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb4:	059a      	lsls	r2, r3, #22
 800cbb6:	d4ef      	bmi.n	800cb98 <__smakebuf_r+0x18>
 800cbb8:	f023 0303 	bic.w	r3, r3, #3
 800cbbc:	f043 0302 	orr.w	r3, r3, #2
 800cbc0:	81a3      	strh	r3, [r4, #12]
 800cbc2:	e7e3      	b.n	800cb8c <__smakebuf_r+0xc>
 800cbc4:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <__smakebuf_r+0x7c>)
 800cbc6:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbc8:	89a3      	ldrh	r3, [r4, #12]
 800cbca:	6020      	str	r0, [r4, #0]
 800cbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	9b00      	ldr	r3, [sp, #0]
 800cbd4:	6163      	str	r3, [r4, #20]
 800cbd6:	9b01      	ldr	r3, [sp, #4]
 800cbd8:	6120      	str	r0, [r4, #16]
 800cbda:	b15b      	cbz	r3, 800cbf4 <__smakebuf_r+0x74>
 800cbdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f001 ffb1 	bl	800eb48 <_isatty_r>
 800cbe6:	b128      	cbz	r0, 800cbf4 <__smakebuf_r+0x74>
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f023 0303 	bic.w	r3, r3, #3
 800cbee:	f043 0301 	orr.w	r3, r3, #1
 800cbf2:	81a3      	strh	r3, [r4, #12]
 800cbf4:	89a0      	ldrh	r0, [r4, #12]
 800cbf6:	4305      	orrs	r5, r0
 800cbf8:	81a5      	strh	r5, [r4, #12]
 800cbfa:	e7cd      	b.n	800cb98 <__smakebuf_r+0x18>
 800cbfc:	0800c26d 	.word	0x0800c26d

0800cc00 <malloc>:
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <malloc+0xc>)
 800cc02:	4601      	mov	r1, r0
 800cc04:	6818      	ldr	r0, [r3, #0]
 800cc06:	f000 bd59 	b.w	800d6bc <_malloc_r>
 800cc0a:	bf00      	nop
 800cc0c:	2000004c 	.word	0x2000004c

0800cc10 <__ascii_mbtowc>:
 800cc10:	b082      	sub	sp, #8
 800cc12:	b901      	cbnz	r1, 800cc16 <__ascii_mbtowc+0x6>
 800cc14:	a901      	add	r1, sp, #4
 800cc16:	b142      	cbz	r2, 800cc2a <__ascii_mbtowc+0x1a>
 800cc18:	b14b      	cbz	r3, 800cc2e <__ascii_mbtowc+0x1e>
 800cc1a:	7813      	ldrb	r3, [r2, #0]
 800cc1c:	600b      	str	r3, [r1, #0]
 800cc1e:	7812      	ldrb	r2, [r2, #0]
 800cc20:	1e10      	subs	r0, r2, #0
 800cc22:	bf18      	it	ne
 800cc24:	2001      	movne	r0, #1
 800cc26:	b002      	add	sp, #8
 800cc28:	4770      	bx	lr
 800cc2a:	4610      	mov	r0, r2
 800cc2c:	e7fb      	b.n	800cc26 <__ascii_mbtowc+0x16>
 800cc2e:	f06f 0001 	mvn.w	r0, #1
 800cc32:	e7f8      	b.n	800cc26 <__ascii_mbtowc+0x16>

0800cc34 <_Balloc>:
 800cc34:	b570      	push	{r4, r5, r6, lr}
 800cc36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc38:	4604      	mov	r4, r0
 800cc3a:	460d      	mov	r5, r1
 800cc3c:	b976      	cbnz	r6, 800cc5c <_Balloc+0x28>
 800cc3e:	2010      	movs	r0, #16
 800cc40:	f7ff ffde 	bl	800cc00 <malloc>
 800cc44:	4602      	mov	r2, r0
 800cc46:	6260      	str	r0, [r4, #36]	; 0x24
 800cc48:	b920      	cbnz	r0, 800cc54 <_Balloc+0x20>
 800cc4a:	4b18      	ldr	r3, [pc, #96]	; (800ccac <_Balloc+0x78>)
 800cc4c:	4818      	ldr	r0, [pc, #96]	; (800ccb0 <_Balloc+0x7c>)
 800cc4e:	2166      	movs	r1, #102	; 0x66
 800cc50:	f001 ff28 	bl	800eaa4 <__assert_func>
 800cc54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc58:	6006      	str	r6, [r0, #0]
 800cc5a:	60c6      	str	r6, [r0, #12]
 800cc5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc5e:	68f3      	ldr	r3, [r6, #12]
 800cc60:	b183      	cbz	r3, 800cc84 <_Balloc+0x50>
 800cc62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc6a:	b9b8      	cbnz	r0, 800cc9c <_Balloc+0x68>
 800cc6c:	2101      	movs	r1, #1
 800cc6e:	fa01 f605 	lsl.w	r6, r1, r5
 800cc72:	1d72      	adds	r2, r6, #5
 800cc74:	0092      	lsls	r2, r2, #2
 800cc76:	4620      	mov	r0, r4
 800cc78:	f000 fc9d 	bl	800d5b6 <_calloc_r>
 800cc7c:	b160      	cbz	r0, 800cc98 <_Balloc+0x64>
 800cc7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc82:	e00e      	b.n	800cca2 <_Balloc+0x6e>
 800cc84:	2221      	movs	r2, #33	; 0x21
 800cc86:	2104      	movs	r1, #4
 800cc88:	4620      	mov	r0, r4
 800cc8a:	f000 fc94 	bl	800d5b6 <_calloc_r>
 800cc8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc90:	60f0      	str	r0, [r6, #12]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1e4      	bne.n	800cc62 <_Balloc+0x2e>
 800cc98:	2000      	movs	r0, #0
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
 800cc9c:	6802      	ldr	r2, [r0, #0]
 800cc9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cca2:	2300      	movs	r3, #0
 800cca4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cca8:	e7f7      	b.n	800cc9a <_Balloc+0x66>
 800ccaa:	bf00      	nop
 800ccac:	0800f986 	.word	0x0800f986
 800ccb0:	0800fae8 	.word	0x0800fae8

0800ccb4 <_Bfree>:
 800ccb4:	b570      	push	{r4, r5, r6, lr}
 800ccb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccb8:	4605      	mov	r5, r0
 800ccba:	460c      	mov	r4, r1
 800ccbc:	b976      	cbnz	r6, 800ccdc <_Bfree+0x28>
 800ccbe:	2010      	movs	r0, #16
 800ccc0:	f7ff ff9e 	bl	800cc00 <malloc>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	6268      	str	r0, [r5, #36]	; 0x24
 800ccc8:	b920      	cbnz	r0, 800ccd4 <_Bfree+0x20>
 800ccca:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <_Bfree+0x3c>)
 800cccc:	4809      	ldr	r0, [pc, #36]	; (800ccf4 <_Bfree+0x40>)
 800ccce:	218a      	movs	r1, #138	; 0x8a
 800ccd0:	f001 fee8 	bl	800eaa4 <__assert_func>
 800ccd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccd8:	6006      	str	r6, [r0, #0]
 800ccda:	60c6      	str	r6, [r0, #12]
 800ccdc:	b13c      	cbz	r4, 800ccee <_Bfree+0x3a>
 800ccde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cce0:	6862      	ldr	r2, [r4, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cce8:	6021      	str	r1, [r4, #0]
 800ccea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	0800f986 	.word	0x0800f986
 800ccf4:	0800fae8 	.word	0x0800fae8

0800ccf8 <__multadd>:
 800ccf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfc:	690d      	ldr	r5, [r1, #16]
 800ccfe:	4607      	mov	r7, r0
 800cd00:	460c      	mov	r4, r1
 800cd02:	461e      	mov	r6, r3
 800cd04:	f101 0c14 	add.w	ip, r1, #20
 800cd08:	2000      	movs	r0, #0
 800cd0a:	f8dc 3000 	ldr.w	r3, [ip]
 800cd0e:	b299      	uxth	r1, r3
 800cd10:	fb02 6101 	mla	r1, r2, r1, r6
 800cd14:	0c1e      	lsrs	r6, r3, #16
 800cd16:	0c0b      	lsrs	r3, r1, #16
 800cd18:	fb02 3306 	mla	r3, r2, r6, r3
 800cd1c:	b289      	uxth	r1, r1
 800cd1e:	3001      	adds	r0, #1
 800cd20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd24:	4285      	cmp	r5, r0
 800cd26:	f84c 1b04 	str.w	r1, [ip], #4
 800cd2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd2e:	dcec      	bgt.n	800cd0a <__multadd+0x12>
 800cd30:	b30e      	cbz	r6, 800cd76 <__multadd+0x7e>
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	42ab      	cmp	r3, r5
 800cd36:	dc19      	bgt.n	800cd6c <__multadd+0x74>
 800cd38:	6861      	ldr	r1, [r4, #4]
 800cd3a:	4638      	mov	r0, r7
 800cd3c:	3101      	adds	r1, #1
 800cd3e:	f7ff ff79 	bl	800cc34 <_Balloc>
 800cd42:	4680      	mov	r8, r0
 800cd44:	b928      	cbnz	r0, 800cd52 <__multadd+0x5a>
 800cd46:	4602      	mov	r2, r0
 800cd48:	4b0c      	ldr	r3, [pc, #48]	; (800cd7c <__multadd+0x84>)
 800cd4a:	480d      	ldr	r0, [pc, #52]	; (800cd80 <__multadd+0x88>)
 800cd4c:	21b5      	movs	r1, #181	; 0xb5
 800cd4e:	f001 fea9 	bl	800eaa4 <__assert_func>
 800cd52:	6922      	ldr	r2, [r4, #16]
 800cd54:	3202      	adds	r2, #2
 800cd56:	f104 010c 	add.w	r1, r4, #12
 800cd5a:	0092      	lsls	r2, r2, #2
 800cd5c:	300c      	adds	r0, #12
 800cd5e:	f7fc fca3 	bl	80096a8 <memcpy>
 800cd62:	4621      	mov	r1, r4
 800cd64:	4638      	mov	r0, r7
 800cd66:	f7ff ffa5 	bl	800ccb4 <_Bfree>
 800cd6a:	4644      	mov	r4, r8
 800cd6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd70:	3501      	adds	r5, #1
 800cd72:	615e      	str	r6, [r3, #20]
 800cd74:	6125      	str	r5, [r4, #16]
 800cd76:	4620      	mov	r0, r4
 800cd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7c:	0800f9f8 	.word	0x0800f9f8
 800cd80:	0800fae8 	.word	0x0800fae8

0800cd84 <__s2b>:
 800cd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd88:	460c      	mov	r4, r1
 800cd8a:	4615      	mov	r5, r2
 800cd8c:	461f      	mov	r7, r3
 800cd8e:	2209      	movs	r2, #9
 800cd90:	3308      	adds	r3, #8
 800cd92:	4606      	mov	r6, r0
 800cd94:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd98:	2100      	movs	r1, #0
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	db09      	blt.n	800cdb4 <__s2b+0x30>
 800cda0:	4630      	mov	r0, r6
 800cda2:	f7ff ff47 	bl	800cc34 <_Balloc>
 800cda6:	b940      	cbnz	r0, 800cdba <__s2b+0x36>
 800cda8:	4602      	mov	r2, r0
 800cdaa:	4b19      	ldr	r3, [pc, #100]	; (800ce10 <__s2b+0x8c>)
 800cdac:	4819      	ldr	r0, [pc, #100]	; (800ce14 <__s2b+0x90>)
 800cdae:	21ce      	movs	r1, #206	; 0xce
 800cdb0:	f001 fe78 	bl	800eaa4 <__assert_func>
 800cdb4:	0052      	lsls	r2, r2, #1
 800cdb6:	3101      	adds	r1, #1
 800cdb8:	e7f0      	b.n	800cd9c <__s2b+0x18>
 800cdba:	9b08      	ldr	r3, [sp, #32]
 800cdbc:	6143      	str	r3, [r0, #20]
 800cdbe:	2d09      	cmp	r5, #9
 800cdc0:	f04f 0301 	mov.w	r3, #1
 800cdc4:	6103      	str	r3, [r0, #16]
 800cdc6:	dd16      	ble.n	800cdf6 <__s2b+0x72>
 800cdc8:	f104 0909 	add.w	r9, r4, #9
 800cdcc:	46c8      	mov	r8, r9
 800cdce:	442c      	add	r4, r5
 800cdd0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cdd4:	4601      	mov	r1, r0
 800cdd6:	3b30      	subs	r3, #48	; 0x30
 800cdd8:	220a      	movs	r2, #10
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7ff ff8c 	bl	800ccf8 <__multadd>
 800cde0:	45a0      	cmp	r8, r4
 800cde2:	d1f5      	bne.n	800cdd0 <__s2b+0x4c>
 800cde4:	f1a5 0408 	sub.w	r4, r5, #8
 800cde8:	444c      	add	r4, r9
 800cdea:	1b2d      	subs	r5, r5, r4
 800cdec:	1963      	adds	r3, r4, r5
 800cdee:	42bb      	cmp	r3, r7
 800cdf0:	db04      	blt.n	800cdfc <__s2b+0x78>
 800cdf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdf6:	340a      	adds	r4, #10
 800cdf8:	2509      	movs	r5, #9
 800cdfa:	e7f6      	b.n	800cdea <__s2b+0x66>
 800cdfc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce00:	4601      	mov	r1, r0
 800ce02:	3b30      	subs	r3, #48	; 0x30
 800ce04:	220a      	movs	r2, #10
 800ce06:	4630      	mov	r0, r6
 800ce08:	f7ff ff76 	bl	800ccf8 <__multadd>
 800ce0c:	e7ee      	b.n	800cdec <__s2b+0x68>
 800ce0e:	bf00      	nop
 800ce10:	0800f9f8 	.word	0x0800f9f8
 800ce14:	0800fae8 	.word	0x0800fae8

0800ce18 <__hi0bits>:
 800ce18:	0c03      	lsrs	r3, r0, #16
 800ce1a:	041b      	lsls	r3, r3, #16
 800ce1c:	b9d3      	cbnz	r3, 800ce54 <__hi0bits+0x3c>
 800ce1e:	0400      	lsls	r0, r0, #16
 800ce20:	2310      	movs	r3, #16
 800ce22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce26:	bf04      	itt	eq
 800ce28:	0200      	lsleq	r0, r0, #8
 800ce2a:	3308      	addeq	r3, #8
 800ce2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce30:	bf04      	itt	eq
 800ce32:	0100      	lsleq	r0, r0, #4
 800ce34:	3304      	addeq	r3, #4
 800ce36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce3a:	bf04      	itt	eq
 800ce3c:	0080      	lsleq	r0, r0, #2
 800ce3e:	3302      	addeq	r3, #2
 800ce40:	2800      	cmp	r0, #0
 800ce42:	db05      	blt.n	800ce50 <__hi0bits+0x38>
 800ce44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce48:	f103 0301 	add.w	r3, r3, #1
 800ce4c:	bf08      	it	eq
 800ce4e:	2320      	moveq	r3, #32
 800ce50:	4618      	mov	r0, r3
 800ce52:	4770      	bx	lr
 800ce54:	2300      	movs	r3, #0
 800ce56:	e7e4      	b.n	800ce22 <__hi0bits+0xa>

0800ce58 <__lo0bits>:
 800ce58:	6803      	ldr	r3, [r0, #0]
 800ce5a:	f013 0207 	ands.w	r2, r3, #7
 800ce5e:	4601      	mov	r1, r0
 800ce60:	d00b      	beq.n	800ce7a <__lo0bits+0x22>
 800ce62:	07da      	lsls	r2, r3, #31
 800ce64:	d423      	bmi.n	800ceae <__lo0bits+0x56>
 800ce66:	0798      	lsls	r0, r3, #30
 800ce68:	bf49      	itett	mi
 800ce6a:	085b      	lsrmi	r3, r3, #1
 800ce6c:	089b      	lsrpl	r3, r3, #2
 800ce6e:	2001      	movmi	r0, #1
 800ce70:	600b      	strmi	r3, [r1, #0]
 800ce72:	bf5c      	itt	pl
 800ce74:	600b      	strpl	r3, [r1, #0]
 800ce76:	2002      	movpl	r0, #2
 800ce78:	4770      	bx	lr
 800ce7a:	b298      	uxth	r0, r3
 800ce7c:	b9a8      	cbnz	r0, 800ceaa <__lo0bits+0x52>
 800ce7e:	0c1b      	lsrs	r3, r3, #16
 800ce80:	2010      	movs	r0, #16
 800ce82:	b2da      	uxtb	r2, r3
 800ce84:	b90a      	cbnz	r2, 800ce8a <__lo0bits+0x32>
 800ce86:	3008      	adds	r0, #8
 800ce88:	0a1b      	lsrs	r3, r3, #8
 800ce8a:	071a      	lsls	r2, r3, #28
 800ce8c:	bf04      	itt	eq
 800ce8e:	091b      	lsreq	r3, r3, #4
 800ce90:	3004      	addeq	r0, #4
 800ce92:	079a      	lsls	r2, r3, #30
 800ce94:	bf04      	itt	eq
 800ce96:	089b      	lsreq	r3, r3, #2
 800ce98:	3002      	addeq	r0, #2
 800ce9a:	07da      	lsls	r2, r3, #31
 800ce9c:	d403      	bmi.n	800cea6 <__lo0bits+0x4e>
 800ce9e:	085b      	lsrs	r3, r3, #1
 800cea0:	f100 0001 	add.w	r0, r0, #1
 800cea4:	d005      	beq.n	800ceb2 <__lo0bits+0x5a>
 800cea6:	600b      	str	r3, [r1, #0]
 800cea8:	4770      	bx	lr
 800ceaa:	4610      	mov	r0, r2
 800ceac:	e7e9      	b.n	800ce82 <__lo0bits+0x2a>
 800ceae:	2000      	movs	r0, #0
 800ceb0:	4770      	bx	lr
 800ceb2:	2020      	movs	r0, #32
 800ceb4:	4770      	bx	lr
	...

0800ceb8 <__i2b>:
 800ceb8:	b510      	push	{r4, lr}
 800ceba:	460c      	mov	r4, r1
 800cebc:	2101      	movs	r1, #1
 800cebe:	f7ff feb9 	bl	800cc34 <_Balloc>
 800cec2:	4602      	mov	r2, r0
 800cec4:	b928      	cbnz	r0, 800ced2 <__i2b+0x1a>
 800cec6:	4b05      	ldr	r3, [pc, #20]	; (800cedc <__i2b+0x24>)
 800cec8:	4805      	ldr	r0, [pc, #20]	; (800cee0 <__i2b+0x28>)
 800ceca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cece:	f001 fde9 	bl	800eaa4 <__assert_func>
 800ced2:	2301      	movs	r3, #1
 800ced4:	6144      	str	r4, [r0, #20]
 800ced6:	6103      	str	r3, [r0, #16]
 800ced8:	bd10      	pop	{r4, pc}
 800ceda:	bf00      	nop
 800cedc:	0800f9f8 	.word	0x0800f9f8
 800cee0:	0800fae8 	.word	0x0800fae8

0800cee4 <__multiply>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	4691      	mov	r9, r2
 800ceea:	690a      	ldr	r2, [r1, #16]
 800ceec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	bfb8      	it	lt
 800cef4:	460b      	movlt	r3, r1
 800cef6:	460c      	mov	r4, r1
 800cef8:	bfbc      	itt	lt
 800cefa:	464c      	movlt	r4, r9
 800cefc:	4699      	movlt	r9, r3
 800cefe:	6927      	ldr	r7, [r4, #16]
 800cf00:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cf04:	68a3      	ldr	r3, [r4, #8]
 800cf06:	6861      	ldr	r1, [r4, #4]
 800cf08:	eb07 060a 	add.w	r6, r7, sl
 800cf0c:	42b3      	cmp	r3, r6
 800cf0e:	b085      	sub	sp, #20
 800cf10:	bfb8      	it	lt
 800cf12:	3101      	addlt	r1, #1
 800cf14:	f7ff fe8e 	bl	800cc34 <_Balloc>
 800cf18:	b930      	cbnz	r0, 800cf28 <__multiply+0x44>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	4b44      	ldr	r3, [pc, #272]	; (800d030 <__multiply+0x14c>)
 800cf1e:	4845      	ldr	r0, [pc, #276]	; (800d034 <__multiply+0x150>)
 800cf20:	f240 115d 	movw	r1, #349	; 0x15d
 800cf24:	f001 fdbe 	bl	800eaa4 <__assert_func>
 800cf28:	f100 0514 	add.w	r5, r0, #20
 800cf2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf30:	462b      	mov	r3, r5
 800cf32:	2200      	movs	r2, #0
 800cf34:	4543      	cmp	r3, r8
 800cf36:	d321      	bcc.n	800cf7c <__multiply+0x98>
 800cf38:	f104 0314 	add.w	r3, r4, #20
 800cf3c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf40:	f109 0314 	add.w	r3, r9, #20
 800cf44:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf48:	9202      	str	r2, [sp, #8]
 800cf4a:	1b3a      	subs	r2, r7, r4
 800cf4c:	3a15      	subs	r2, #21
 800cf4e:	f022 0203 	bic.w	r2, r2, #3
 800cf52:	3204      	adds	r2, #4
 800cf54:	f104 0115 	add.w	r1, r4, #21
 800cf58:	428f      	cmp	r7, r1
 800cf5a:	bf38      	it	cc
 800cf5c:	2204      	movcc	r2, #4
 800cf5e:	9201      	str	r2, [sp, #4]
 800cf60:	9a02      	ldr	r2, [sp, #8]
 800cf62:	9303      	str	r3, [sp, #12]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d80c      	bhi.n	800cf82 <__multiply+0x9e>
 800cf68:	2e00      	cmp	r6, #0
 800cf6a:	dd03      	ble.n	800cf74 <__multiply+0x90>
 800cf6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d05a      	beq.n	800d02a <__multiply+0x146>
 800cf74:	6106      	str	r6, [r0, #16]
 800cf76:	b005      	add	sp, #20
 800cf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf7c:	f843 2b04 	str.w	r2, [r3], #4
 800cf80:	e7d8      	b.n	800cf34 <__multiply+0x50>
 800cf82:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf86:	f1ba 0f00 	cmp.w	sl, #0
 800cf8a:	d024      	beq.n	800cfd6 <__multiply+0xf2>
 800cf8c:	f104 0e14 	add.w	lr, r4, #20
 800cf90:	46a9      	mov	r9, r5
 800cf92:	f04f 0c00 	mov.w	ip, #0
 800cf96:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf9a:	f8d9 1000 	ldr.w	r1, [r9]
 800cf9e:	fa1f fb82 	uxth.w	fp, r2
 800cfa2:	b289      	uxth	r1, r1
 800cfa4:	fb0a 110b 	mla	r1, sl, fp, r1
 800cfa8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cfac:	f8d9 2000 	ldr.w	r2, [r9]
 800cfb0:	4461      	add	r1, ip
 800cfb2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfb6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cfba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfbe:	b289      	uxth	r1, r1
 800cfc0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cfc4:	4577      	cmp	r7, lr
 800cfc6:	f849 1b04 	str.w	r1, [r9], #4
 800cfca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfce:	d8e2      	bhi.n	800cf96 <__multiply+0xb2>
 800cfd0:	9a01      	ldr	r2, [sp, #4]
 800cfd2:	f845 c002 	str.w	ip, [r5, r2]
 800cfd6:	9a03      	ldr	r2, [sp, #12]
 800cfd8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfdc:	3304      	adds	r3, #4
 800cfde:	f1b9 0f00 	cmp.w	r9, #0
 800cfe2:	d020      	beq.n	800d026 <__multiply+0x142>
 800cfe4:	6829      	ldr	r1, [r5, #0]
 800cfe6:	f104 0c14 	add.w	ip, r4, #20
 800cfea:	46ae      	mov	lr, r5
 800cfec:	f04f 0a00 	mov.w	sl, #0
 800cff0:	f8bc b000 	ldrh.w	fp, [ip]
 800cff4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cff8:	fb09 220b 	mla	r2, r9, fp, r2
 800cffc:	4492      	add	sl, r2
 800cffe:	b289      	uxth	r1, r1
 800d000:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d004:	f84e 1b04 	str.w	r1, [lr], #4
 800d008:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d00c:	f8be 1000 	ldrh.w	r1, [lr]
 800d010:	0c12      	lsrs	r2, r2, #16
 800d012:	fb09 1102 	mla	r1, r9, r2, r1
 800d016:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d01a:	4567      	cmp	r7, ip
 800d01c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d020:	d8e6      	bhi.n	800cff0 <__multiply+0x10c>
 800d022:	9a01      	ldr	r2, [sp, #4]
 800d024:	50a9      	str	r1, [r5, r2]
 800d026:	3504      	adds	r5, #4
 800d028:	e79a      	b.n	800cf60 <__multiply+0x7c>
 800d02a:	3e01      	subs	r6, #1
 800d02c:	e79c      	b.n	800cf68 <__multiply+0x84>
 800d02e:	bf00      	nop
 800d030:	0800f9f8 	.word	0x0800f9f8
 800d034:	0800fae8 	.word	0x0800fae8

0800d038 <__pow5mult>:
 800d038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d03c:	4615      	mov	r5, r2
 800d03e:	f012 0203 	ands.w	r2, r2, #3
 800d042:	4606      	mov	r6, r0
 800d044:	460f      	mov	r7, r1
 800d046:	d007      	beq.n	800d058 <__pow5mult+0x20>
 800d048:	4c25      	ldr	r4, [pc, #148]	; (800d0e0 <__pow5mult+0xa8>)
 800d04a:	3a01      	subs	r2, #1
 800d04c:	2300      	movs	r3, #0
 800d04e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d052:	f7ff fe51 	bl	800ccf8 <__multadd>
 800d056:	4607      	mov	r7, r0
 800d058:	10ad      	asrs	r5, r5, #2
 800d05a:	d03d      	beq.n	800d0d8 <__pow5mult+0xa0>
 800d05c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d05e:	b97c      	cbnz	r4, 800d080 <__pow5mult+0x48>
 800d060:	2010      	movs	r0, #16
 800d062:	f7ff fdcd 	bl	800cc00 <malloc>
 800d066:	4602      	mov	r2, r0
 800d068:	6270      	str	r0, [r6, #36]	; 0x24
 800d06a:	b928      	cbnz	r0, 800d078 <__pow5mult+0x40>
 800d06c:	4b1d      	ldr	r3, [pc, #116]	; (800d0e4 <__pow5mult+0xac>)
 800d06e:	481e      	ldr	r0, [pc, #120]	; (800d0e8 <__pow5mult+0xb0>)
 800d070:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d074:	f001 fd16 	bl	800eaa4 <__assert_func>
 800d078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d07c:	6004      	str	r4, [r0, #0]
 800d07e:	60c4      	str	r4, [r0, #12]
 800d080:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d084:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d088:	b94c      	cbnz	r4, 800d09e <__pow5mult+0x66>
 800d08a:	f240 2171 	movw	r1, #625	; 0x271
 800d08e:	4630      	mov	r0, r6
 800d090:	f7ff ff12 	bl	800ceb8 <__i2b>
 800d094:	2300      	movs	r3, #0
 800d096:	f8c8 0008 	str.w	r0, [r8, #8]
 800d09a:	4604      	mov	r4, r0
 800d09c:	6003      	str	r3, [r0, #0]
 800d09e:	f04f 0900 	mov.w	r9, #0
 800d0a2:	07eb      	lsls	r3, r5, #31
 800d0a4:	d50a      	bpl.n	800d0bc <__pow5mult+0x84>
 800d0a6:	4639      	mov	r1, r7
 800d0a8:	4622      	mov	r2, r4
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f7ff ff1a 	bl	800cee4 <__multiply>
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	4680      	mov	r8, r0
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	f7ff fdfd 	bl	800ccb4 <_Bfree>
 800d0ba:	4647      	mov	r7, r8
 800d0bc:	106d      	asrs	r5, r5, #1
 800d0be:	d00b      	beq.n	800d0d8 <__pow5mult+0xa0>
 800d0c0:	6820      	ldr	r0, [r4, #0]
 800d0c2:	b938      	cbnz	r0, 800d0d4 <__pow5mult+0x9c>
 800d0c4:	4622      	mov	r2, r4
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f7ff ff0b 	bl	800cee4 <__multiply>
 800d0ce:	6020      	str	r0, [r4, #0]
 800d0d0:	f8c0 9000 	str.w	r9, [r0]
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	e7e4      	b.n	800d0a2 <__pow5mult+0x6a>
 800d0d8:	4638      	mov	r0, r7
 800d0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0de:	bf00      	nop
 800d0e0:	0800fc38 	.word	0x0800fc38
 800d0e4:	0800f986 	.word	0x0800f986
 800d0e8:	0800fae8 	.word	0x0800fae8

0800d0ec <__lshift>:
 800d0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f0:	460c      	mov	r4, r1
 800d0f2:	6849      	ldr	r1, [r1, #4]
 800d0f4:	6923      	ldr	r3, [r4, #16]
 800d0f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	4691      	mov	r9, r2
 800d100:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d104:	f108 0601 	add.w	r6, r8, #1
 800d108:	42b3      	cmp	r3, r6
 800d10a:	db0b      	blt.n	800d124 <__lshift+0x38>
 800d10c:	4638      	mov	r0, r7
 800d10e:	f7ff fd91 	bl	800cc34 <_Balloc>
 800d112:	4605      	mov	r5, r0
 800d114:	b948      	cbnz	r0, 800d12a <__lshift+0x3e>
 800d116:	4602      	mov	r2, r0
 800d118:	4b2a      	ldr	r3, [pc, #168]	; (800d1c4 <__lshift+0xd8>)
 800d11a:	482b      	ldr	r0, [pc, #172]	; (800d1c8 <__lshift+0xdc>)
 800d11c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d120:	f001 fcc0 	bl	800eaa4 <__assert_func>
 800d124:	3101      	adds	r1, #1
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	e7ee      	b.n	800d108 <__lshift+0x1c>
 800d12a:	2300      	movs	r3, #0
 800d12c:	f100 0114 	add.w	r1, r0, #20
 800d130:	f100 0210 	add.w	r2, r0, #16
 800d134:	4618      	mov	r0, r3
 800d136:	4553      	cmp	r3, sl
 800d138:	db37      	blt.n	800d1aa <__lshift+0xbe>
 800d13a:	6920      	ldr	r0, [r4, #16]
 800d13c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d140:	f104 0314 	add.w	r3, r4, #20
 800d144:	f019 091f 	ands.w	r9, r9, #31
 800d148:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d14c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d150:	d02f      	beq.n	800d1b2 <__lshift+0xc6>
 800d152:	f1c9 0e20 	rsb	lr, r9, #32
 800d156:	468a      	mov	sl, r1
 800d158:	f04f 0c00 	mov.w	ip, #0
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	fa02 f209 	lsl.w	r2, r2, r9
 800d162:	ea42 020c 	orr.w	r2, r2, ip
 800d166:	f84a 2b04 	str.w	r2, [sl], #4
 800d16a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d16e:	4298      	cmp	r0, r3
 800d170:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d174:	d8f2      	bhi.n	800d15c <__lshift+0x70>
 800d176:	1b03      	subs	r3, r0, r4
 800d178:	3b15      	subs	r3, #21
 800d17a:	f023 0303 	bic.w	r3, r3, #3
 800d17e:	3304      	adds	r3, #4
 800d180:	f104 0215 	add.w	r2, r4, #21
 800d184:	4290      	cmp	r0, r2
 800d186:	bf38      	it	cc
 800d188:	2304      	movcc	r3, #4
 800d18a:	f841 c003 	str.w	ip, [r1, r3]
 800d18e:	f1bc 0f00 	cmp.w	ip, #0
 800d192:	d001      	beq.n	800d198 <__lshift+0xac>
 800d194:	f108 0602 	add.w	r6, r8, #2
 800d198:	3e01      	subs	r6, #1
 800d19a:	4638      	mov	r0, r7
 800d19c:	612e      	str	r6, [r5, #16]
 800d19e:	4621      	mov	r1, r4
 800d1a0:	f7ff fd88 	bl	800ccb4 <_Bfree>
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	e7c1      	b.n	800d136 <__lshift+0x4a>
 800d1b2:	3904      	subs	r1, #4
 800d1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1bc:	4298      	cmp	r0, r3
 800d1be:	d8f9      	bhi.n	800d1b4 <__lshift+0xc8>
 800d1c0:	e7ea      	b.n	800d198 <__lshift+0xac>
 800d1c2:	bf00      	nop
 800d1c4:	0800f9f8 	.word	0x0800f9f8
 800d1c8:	0800fae8 	.word	0x0800fae8

0800d1cc <__mcmp>:
 800d1cc:	b530      	push	{r4, r5, lr}
 800d1ce:	6902      	ldr	r2, [r0, #16]
 800d1d0:	690c      	ldr	r4, [r1, #16]
 800d1d2:	1b12      	subs	r2, r2, r4
 800d1d4:	d10e      	bne.n	800d1f4 <__mcmp+0x28>
 800d1d6:	f100 0314 	add.w	r3, r0, #20
 800d1da:	3114      	adds	r1, #20
 800d1dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1ec:	42a5      	cmp	r5, r4
 800d1ee:	d003      	beq.n	800d1f8 <__mcmp+0x2c>
 800d1f0:	d305      	bcc.n	800d1fe <__mcmp+0x32>
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	bd30      	pop	{r4, r5, pc}
 800d1f8:	4283      	cmp	r3, r0
 800d1fa:	d3f3      	bcc.n	800d1e4 <__mcmp+0x18>
 800d1fc:	e7fa      	b.n	800d1f4 <__mcmp+0x28>
 800d1fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d202:	e7f7      	b.n	800d1f4 <__mcmp+0x28>

0800d204 <__mdiff>:
 800d204:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d208:	460c      	mov	r4, r1
 800d20a:	4606      	mov	r6, r0
 800d20c:	4611      	mov	r1, r2
 800d20e:	4620      	mov	r0, r4
 800d210:	4690      	mov	r8, r2
 800d212:	f7ff ffdb 	bl	800d1cc <__mcmp>
 800d216:	1e05      	subs	r5, r0, #0
 800d218:	d110      	bne.n	800d23c <__mdiff+0x38>
 800d21a:	4629      	mov	r1, r5
 800d21c:	4630      	mov	r0, r6
 800d21e:	f7ff fd09 	bl	800cc34 <_Balloc>
 800d222:	b930      	cbnz	r0, 800d232 <__mdiff+0x2e>
 800d224:	4b3a      	ldr	r3, [pc, #232]	; (800d310 <__mdiff+0x10c>)
 800d226:	4602      	mov	r2, r0
 800d228:	f240 2132 	movw	r1, #562	; 0x232
 800d22c:	4839      	ldr	r0, [pc, #228]	; (800d314 <__mdiff+0x110>)
 800d22e:	f001 fc39 	bl	800eaa4 <__assert_func>
 800d232:	2301      	movs	r3, #1
 800d234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d238:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	bfa4      	itt	ge
 800d23e:	4643      	movge	r3, r8
 800d240:	46a0      	movge	r8, r4
 800d242:	4630      	mov	r0, r6
 800d244:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d248:	bfa6      	itte	ge
 800d24a:	461c      	movge	r4, r3
 800d24c:	2500      	movge	r5, #0
 800d24e:	2501      	movlt	r5, #1
 800d250:	f7ff fcf0 	bl	800cc34 <_Balloc>
 800d254:	b920      	cbnz	r0, 800d260 <__mdiff+0x5c>
 800d256:	4b2e      	ldr	r3, [pc, #184]	; (800d310 <__mdiff+0x10c>)
 800d258:	4602      	mov	r2, r0
 800d25a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d25e:	e7e5      	b.n	800d22c <__mdiff+0x28>
 800d260:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d264:	6926      	ldr	r6, [r4, #16]
 800d266:	60c5      	str	r5, [r0, #12]
 800d268:	f104 0914 	add.w	r9, r4, #20
 800d26c:	f108 0514 	add.w	r5, r8, #20
 800d270:	f100 0e14 	add.w	lr, r0, #20
 800d274:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d278:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d27c:	f108 0210 	add.w	r2, r8, #16
 800d280:	46f2      	mov	sl, lr
 800d282:	2100      	movs	r1, #0
 800d284:	f859 3b04 	ldr.w	r3, [r9], #4
 800d288:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d28c:	fa1f f883 	uxth.w	r8, r3
 800d290:	fa11 f18b 	uxtah	r1, r1, fp
 800d294:	0c1b      	lsrs	r3, r3, #16
 800d296:	eba1 0808 	sub.w	r8, r1, r8
 800d29a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d29e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d2a2:	fa1f f888 	uxth.w	r8, r8
 800d2a6:	1419      	asrs	r1, r3, #16
 800d2a8:	454e      	cmp	r6, r9
 800d2aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2ae:	f84a 3b04 	str.w	r3, [sl], #4
 800d2b2:	d8e7      	bhi.n	800d284 <__mdiff+0x80>
 800d2b4:	1b33      	subs	r3, r6, r4
 800d2b6:	3b15      	subs	r3, #21
 800d2b8:	f023 0303 	bic.w	r3, r3, #3
 800d2bc:	3304      	adds	r3, #4
 800d2be:	3415      	adds	r4, #21
 800d2c0:	42a6      	cmp	r6, r4
 800d2c2:	bf38      	it	cc
 800d2c4:	2304      	movcc	r3, #4
 800d2c6:	441d      	add	r5, r3
 800d2c8:	4473      	add	r3, lr
 800d2ca:	469e      	mov	lr, r3
 800d2cc:	462e      	mov	r6, r5
 800d2ce:	4566      	cmp	r6, ip
 800d2d0:	d30e      	bcc.n	800d2f0 <__mdiff+0xec>
 800d2d2:	f10c 0203 	add.w	r2, ip, #3
 800d2d6:	1b52      	subs	r2, r2, r5
 800d2d8:	f022 0203 	bic.w	r2, r2, #3
 800d2dc:	3d03      	subs	r5, #3
 800d2de:	45ac      	cmp	ip, r5
 800d2e0:	bf38      	it	cc
 800d2e2:	2200      	movcc	r2, #0
 800d2e4:	441a      	add	r2, r3
 800d2e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d2ea:	b17b      	cbz	r3, 800d30c <__mdiff+0x108>
 800d2ec:	6107      	str	r7, [r0, #16]
 800d2ee:	e7a3      	b.n	800d238 <__mdiff+0x34>
 800d2f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d2f4:	fa11 f288 	uxtah	r2, r1, r8
 800d2f8:	1414      	asrs	r4, r2, #16
 800d2fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2fe:	b292      	uxth	r2, r2
 800d300:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d304:	f84e 2b04 	str.w	r2, [lr], #4
 800d308:	1421      	asrs	r1, r4, #16
 800d30a:	e7e0      	b.n	800d2ce <__mdiff+0xca>
 800d30c:	3f01      	subs	r7, #1
 800d30e:	e7ea      	b.n	800d2e6 <__mdiff+0xe2>
 800d310:	0800f9f8 	.word	0x0800f9f8
 800d314:	0800fae8 	.word	0x0800fae8

0800d318 <__ulp>:
 800d318:	b082      	sub	sp, #8
 800d31a:	ed8d 0b00 	vstr	d0, [sp]
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	4912      	ldr	r1, [pc, #72]	; (800d36c <__ulp+0x54>)
 800d322:	4019      	ands	r1, r3
 800d324:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d328:	2900      	cmp	r1, #0
 800d32a:	dd05      	ble.n	800d338 <__ulp+0x20>
 800d32c:	2200      	movs	r2, #0
 800d32e:	460b      	mov	r3, r1
 800d330:	ec43 2b10 	vmov	d0, r2, r3
 800d334:	b002      	add	sp, #8
 800d336:	4770      	bx	lr
 800d338:	4249      	negs	r1, r1
 800d33a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d33e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d342:	f04f 0200 	mov.w	r2, #0
 800d346:	f04f 0300 	mov.w	r3, #0
 800d34a:	da04      	bge.n	800d356 <__ulp+0x3e>
 800d34c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d350:	fa41 f300 	asr.w	r3, r1, r0
 800d354:	e7ec      	b.n	800d330 <__ulp+0x18>
 800d356:	f1a0 0114 	sub.w	r1, r0, #20
 800d35a:	291e      	cmp	r1, #30
 800d35c:	bfda      	itte	le
 800d35e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d362:	fa20 f101 	lsrle.w	r1, r0, r1
 800d366:	2101      	movgt	r1, #1
 800d368:	460a      	mov	r2, r1
 800d36a:	e7e1      	b.n	800d330 <__ulp+0x18>
 800d36c:	7ff00000 	.word	0x7ff00000

0800d370 <__b2d>:
 800d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d372:	6905      	ldr	r5, [r0, #16]
 800d374:	f100 0714 	add.w	r7, r0, #20
 800d378:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d37c:	1f2e      	subs	r6, r5, #4
 800d37e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d382:	4620      	mov	r0, r4
 800d384:	f7ff fd48 	bl	800ce18 <__hi0bits>
 800d388:	f1c0 0320 	rsb	r3, r0, #32
 800d38c:	280a      	cmp	r0, #10
 800d38e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d40c <__b2d+0x9c>
 800d392:	600b      	str	r3, [r1, #0]
 800d394:	dc14      	bgt.n	800d3c0 <__b2d+0x50>
 800d396:	f1c0 0e0b 	rsb	lr, r0, #11
 800d39a:	fa24 f10e 	lsr.w	r1, r4, lr
 800d39e:	42b7      	cmp	r7, r6
 800d3a0:	ea41 030c 	orr.w	r3, r1, ip
 800d3a4:	bf34      	ite	cc
 800d3a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3aa:	2100      	movcs	r1, #0
 800d3ac:	3015      	adds	r0, #21
 800d3ae:	fa04 f000 	lsl.w	r0, r4, r0
 800d3b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800d3b6:	ea40 0201 	orr.w	r2, r0, r1
 800d3ba:	ec43 2b10 	vmov	d0, r2, r3
 800d3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c0:	42b7      	cmp	r7, r6
 800d3c2:	bf3a      	itte	cc
 800d3c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d3c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800d3cc:	2100      	movcs	r1, #0
 800d3ce:	380b      	subs	r0, #11
 800d3d0:	d017      	beq.n	800d402 <__b2d+0x92>
 800d3d2:	f1c0 0c20 	rsb	ip, r0, #32
 800d3d6:	fa04 f500 	lsl.w	r5, r4, r0
 800d3da:	42be      	cmp	r6, r7
 800d3dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800d3e0:	ea45 0504 	orr.w	r5, r5, r4
 800d3e4:	bf8c      	ite	hi
 800d3e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d3ea:	2400      	movls	r4, #0
 800d3ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d3f0:	fa01 f000 	lsl.w	r0, r1, r0
 800d3f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800d3f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d3fc:	ea40 0204 	orr.w	r2, r0, r4
 800d400:	e7db      	b.n	800d3ba <__b2d+0x4a>
 800d402:	ea44 030c 	orr.w	r3, r4, ip
 800d406:	460a      	mov	r2, r1
 800d408:	e7d7      	b.n	800d3ba <__b2d+0x4a>
 800d40a:	bf00      	nop
 800d40c:	3ff00000 	.word	0x3ff00000

0800d410 <__d2b>:
 800d410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d414:	4689      	mov	r9, r1
 800d416:	2101      	movs	r1, #1
 800d418:	ec57 6b10 	vmov	r6, r7, d0
 800d41c:	4690      	mov	r8, r2
 800d41e:	f7ff fc09 	bl	800cc34 <_Balloc>
 800d422:	4604      	mov	r4, r0
 800d424:	b930      	cbnz	r0, 800d434 <__d2b+0x24>
 800d426:	4602      	mov	r2, r0
 800d428:	4b25      	ldr	r3, [pc, #148]	; (800d4c0 <__d2b+0xb0>)
 800d42a:	4826      	ldr	r0, [pc, #152]	; (800d4c4 <__d2b+0xb4>)
 800d42c:	f240 310a 	movw	r1, #778	; 0x30a
 800d430:	f001 fb38 	bl	800eaa4 <__assert_func>
 800d434:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d43c:	bb35      	cbnz	r5, 800d48c <__d2b+0x7c>
 800d43e:	2e00      	cmp	r6, #0
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	d028      	beq.n	800d496 <__d2b+0x86>
 800d444:	4668      	mov	r0, sp
 800d446:	9600      	str	r6, [sp, #0]
 800d448:	f7ff fd06 	bl	800ce58 <__lo0bits>
 800d44c:	9900      	ldr	r1, [sp, #0]
 800d44e:	b300      	cbz	r0, 800d492 <__d2b+0x82>
 800d450:	9a01      	ldr	r2, [sp, #4]
 800d452:	f1c0 0320 	rsb	r3, r0, #32
 800d456:	fa02 f303 	lsl.w	r3, r2, r3
 800d45a:	430b      	orrs	r3, r1
 800d45c:	40c2      	lsrs	r2, r0
 800d45e:	6163      	str	r3, [r4, #20]
 800d460:	9201      	str	r2, [sp, #4]
 800d462:	9b01      	ldr	r3, [sp, #4]
 800d464:	61a3      	str	r3, [r4, #24]
 800d466:	2b00      	cmp	r3, #0
 800d468:	bf14      	ite	ne
 800d46a:	2202      	movne	r2, #2
 800d46c:	2201      	moveq	r2, #1
 800d46e:	6122      	str	r2, [r4, #16]
 800d470:	b1d5      	cbz	r5, 800d4a8 <__d2b+0x98>
 800d472:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d476:	4405      	add	r5, r0
 800d478:	f8c9 5000 	str.w	r5, [r9]
 800d47c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d480:	f8c8 0000 	str.w	r0, [r8]
 800d484:	4620      	mov	r0, r4
 800d486:	b003      	add	sp, #12
 800d488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d48c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d490:	e7d5      	b.n	800d43e <__d2b+0x2e>
 800d492:	6161      	str	r1, [r4, #20]
 800d494:	e7e5      	b.n	800d462 <__d2b+0x52>
 800d496:	a801      	add	r0, sp, #4
 800d498:	f7ff fcde 	bl	800ce58 <__lo0bits>
 800d49c:	9b01      	ldr	r3, [sp, #4]
 800d49e:	6163      	str	r3, [r4, #20]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	6122      	str	r2, [r4, #16]
 800d4a4:	3020      	adds	r0, #32
 800d4a6:	e7e3      	b.n	800d470 <__d2b+0x60>
 800d4a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4b0:	f8c9 0000 	str.w	r0, [r9]
 800d4b4:	6918      	ldr	r0, [r3, #16]
 800d4b6:	f7ff fcaf 	bl	800ce18 <__hi0bits>
 800d4ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4be:	e7df      	b.n	800d480 <__d2b+0x70>
 800d4c0:	0800f9f8 	.word	0x0800f9f8
 800d4c4:	0800fae8 	.word	0x0800fae8

0800d4c8 <__ratio>:
 800d4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	4688      	mov	r8, r1
 800d4ce:	4669      	mov	r1, sp
 800d4d0:	4681      	mov	r9, r0
 800d4d2:	f7ff ff4d 	bl	800d370 <__b2d>
 800d4d6:	a901      	add	r1, sp, #4
 800d4d8:	4640      	mov	r0, r8
 800d4da:	ec55 4b10 	vmov	r4, r5, d0
 800d4de:	f7ff ff47 	bl	800d370 <__b2d>
 800d4e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d4e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d4ea:	eba3 0c02 	sub.w	ip, r3, r2
 800d4ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4f2:	1a9b      	subs	r3, r3, r2
 800d4f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d4f8:	ec51 0b10 	vmov	r0, r1, d0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	bfd6      	itet	le
 800d500:	460a      	movle	r2, r1
 800d502:	462a      	movgt	r2, r5
 800d504:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d508:	468b      	mov	fp, r1
 800d50a:	462f      	mov	r7, r5
 800d50c:	bfd4      	ite	le
 800d50e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d516:	4620      	mov	r0, r4
 800d518:	ee10 2a10 	vmov	r2, s0
 800d51c:	465b      	mov	r3, fp
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f3 f9ac 	bl	800087c <__aeabi_ddiv>
 800d524:	ec41 0b10 	vmov	d0, r0, r1
 800d528:	b003      	add	sp, #12
 800d52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d52e <__copybits>:
 800d52e:	3901      	subs	r1, #1
 800d530:	b570      	push	{r4, r5, r6, lr}
 800d532:	1149      	asrs	r1, r1, #5
 800d534:	6914      	ldr	r4, [r2, #16]
 800d536:	3101      	adds	r1, #1
 800d538:	f102 0314 	add.w	r3, r2, #20
 800d53c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d544:	1f05      	subs	r5, r0, #4
 800d546:	42a3      	cmp	r3, r4
 800d548:	d30c      	bcc.n	800d564 <__copybits+0x36>
 800d54a:	1aa3      	subs	r3, r4, r2
 800d54c:	3b11      	subs	r3, #17
 800d54e:	f023 0303 	bic.w	r3, r3, #3
 800d552:	3211      	adds	r2, #17
 800d554:	42a2      	cmp	r2, r4
 800d556:	bf88      	it	hi
 800d558:	2300      	movhi	r3, #0
 800d55a:	4418      	add	r0, r3
 800d55c:	2300      	movs	r3, #0
 800d55e:	4288      	cmp	r0, r1
 800d560:	d305      	bcc.n	800d56e <__copybits+0x40>
 800d562:	bd70      	pop	{r4, r5, r6, pc}
 800d564:	f853 6b04 	ldr.w	r6, [r3], #4
 800d568:	f845 6f04 	str.w	r6, [r5, #4]!
 800d56c:	e7eb      	b.n	800d546 <__copybits+0x18>
 800d56e:	f840 3b04 	str.w	r3, [r0], #4
 800d572:	e7f4      	b.n	800d55e <__copybits+0x30>

0800d574 <__any_on>:
 800d574:	f100 0214 	add.w	r2, r0, #20
 800d578:	6900      	ldr	r0, [r0, #16]
 800d57a:	114b      	asrs	r3, r1, #5
 800d57c:	4298      	cmp	r0, r3
 800d57e:	b510      	push	{r4, lr}
 800d580:	db11      	blt.n	800d5a6 <__any_on+0x32>
 800d582:	dd0a      	ble.n	800d59a <__any_on+0x26>
 800d584:	f011 011f 	ands.w	r1, r1, #31
 800d588:	d007      	beq.n	800d59a <__any_on+0x26>
 800d58a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d58e:	fa24 f001 	lsr.w	r0, r4, r1
 800d592:	fa00 f101 	lsl.w	r1, r0, r1
 800d596:	428c      	cmp	r4, r1
 800d598:	d10b      	bne.n	800d5b2 <__any_on+0x3e>
 800d59a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d803      	bhi.n	800d5aa <__any_on+0x36>
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	bd10      	pop	{r4, pc}
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	e7f7      	b.n	800d59a <__any_on+0x26>
 800d5aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5ae:	2900      	cmp	r1, #0
 800d5b0:	d0f5      	beq.n	800d59e <__any_on+0x2a>
 800d5b2:	2001      	movs	r0, #1
 800d5b4:	e7f6      	b.n	800d5a4 <__any_on+0x30>

0800d5b6 <_calloc_r>:
 800d5b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5b8:	fba1 2402 	umull	r2, r4, r1, r2
 800d5bc:	b94c      	cbnz	r4, 800d5d2 <_calloc_r+0x1c>
 800d5be:	4611      	mov	r1, r2
 800d5c0:	9201      	str	r2, [sp, #4]
 800d5c2:	f000 f87b 	bl	800d6bc <_malloc_r>
 800d5c6:	9a01      	ldr	r2, [sp, #4]
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	b930      	cbnz	r0, 800d5da <_calloc_r+0x24>
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	b003      	add	sp, #12
 800d5d0:	bd30      	pop	{r4, r5, pc}
 800d5d2:	220c      	movs	r2, #12
 800d5d4:	6002      	str	r2, [r0, #0]
 800d5d6:	2500      	movs	r5, #0
 800d5d8:	e7f8      	b.n	800d5cc <_calloc_r+0x16>
 800d5da:	4621      	mov	r1, r4
 800d5dc:	f7fc f872 	bl	80096c4 <memset>
 800d5e0:	e7f4      	b.n	800d5cc <_calloc_r+0x16>
	...

0800d5e4 <_free_r>:
 800d5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d5e6:	2900      	cmp	r1, #0
 800d5e8:	d044      	beq.n	800d674 <_free_r+0x90>
 800d5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5ee:	9001      	str	r0, [sp, #4]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d5f6:	bfb8      	it	lt
 800d5f8:	18e4      	addlt	r4, r4, r3
 800d5fa:	f001 fae1 	bl	800ebc0 <__malloc_lock>
 800d5fe:	4a1e      	ldr	r2, [pc, #120]	; (800d678 <_free_r+0x94>)
 800d600:	9801      	ldr	r0, [sp, #4]
 800d602:	6813      	ldr	r3, [r2, #0]
 800d604:	b933      	cbnz	r3, 800d614 <_free_r+0x30>
 800d606:	6063      	str	r3, [r4, #4]
 800d608:	6014      	str	r4, [r2, #0]
 800d60a:	b003      	add	sp, #12
 800d60c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d610:	f001 badc 	b.w	800ebcc <__malloc_unlock>
 800d614:	42a3      	cmp	r3, r4
 800d616:	d908      	bls.n	800d62a <_free_r+0x46>
 800d618:	6825      	ldr	r5, [r4, #0]
 800d61a:	1961      	adds	r1, r4, r5
 800d61c:	428b      	cmp	r3, r1
 800d61e:	bf01      	itttt	eq
 800d620:	6819      	ldreq	r1, [r3, #0]
 800d622:	685b      	ldreq	r3, [r3, #4]
 800d624:	1949      	addeq	r1, r1, r5
 800d626:	6021      	streq	r1, [r4, #0]
 800d628:	e7ed      	b.n	800d606 <_free_r+0x22>
 800d62a:	461a      	mov	r2, r3
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	b10b      	cbz	r3, 800d634 <_free_r+0x50>
 800d630:	42a3      	cmp	r3, r4
 800d632:	d9fa      	bls.n	800d62a <_free_r+0x46>
 800d634:	6811      	ldr	r1, [r2, #0]
 800d636:	1855      	adds	r5, r2, r1
 800d638:	42a5      	cmp	r5, r4
 800d63a:	d10b      	bne.n	800d654 <_free_r+0x70>
 800d63c:	6824      	ldr	r4, [r4, #0]
 800d63e:	4421      	add	r1, r4
 800d640:	1854      	adds	r4, r2, r1
 800d642:	42a3      	cmp	r3, r4
 800d644:	6011      	str	r1, [r2, #0]
 800d646:	d1e0      	bne.n	800d60a <_free_r+0x26>
 800d648:	681c      	ldr	r4, [r3, #0]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	6053      	str	r3, [r2, #4]
 800d64e:	4421      	add	r1, r4
 800d650:	6011      	str	r1, [r2, #0]
 800d652:	e7da      	b.n	800d60a <_free_r+0x26>
 800d654:	d902      	bls.n	800d65c <_free_r+0x78>
 800d656:	230c      	movs	r3, #12
 800d658:	6003      	str	r3, [r0, #0]
 800d65a:	e7d6      	b.n	800d60a <_free_r+0x26>
 800d65c:	6825      	ldr	r5, [r4, #0]
 800d65e:	1961      	adds	r1, r4, r5
 800d660:	428b      	cmp	r3, r1
 800d662:	bf04      	itt	eq
 800d664:	6819      	ldreq	r1, [r3, #0]
 800d666:	685b      	ldreq	r3, [r3, #4]
 800d668:	6063      	str	r3, [r4, #4]
 800d66a:	bf04      	itt	eq
 800d66c:	1949      	addeq	r1, r1, r5
 800d66e:	6021      	streq	r1, [r4, #0]
 800d670:	6054      	str	r4, [r2, #4]
 800d672:	e7ca      	b.n	800d60a <_free_r+0x26>
 800d674:	b003      	add	sp, #12
 800d676:	bd30      	pop	{r4, r5, pc}
 800d678:	20000594 	.word	0x20000594

0800d67c <sbrk_aligned>:
 800d67c:	b570      	push	{r4, r5, r6, lr}
 800d67e:	4e0e      	ldr	r6, [pc, #56]	; (800d6b8 <sbrk_aligned+0x3c>)
 800d680:	460c      	mov	r4, r1
 800d682:	6831      	ldr	r1, [r6, #0]
 800d684:	4605      	mov	r5, r0
 800d686:	b911      	cbnz	r1, 800d68e <sbrk_aligned+0x12>
 800d688:	f000 ff46 	bl	800e518 <_sbrk_r>
 800d68c:	6030      	str	r0, [r6, #0]
 800d68e:	4621      	mov	r1, r4
 800d690:	4628      	mov	r0, r5
 800d692:	f000 ff41 	bl	800e518 <_sbrk_r>
 800d696:	1c43      	adds	r3, r0, #1
 800d698:	d00a      	beq.n	800d6b0 <sbrk_aligned+0x34>
 800d69a:	1cc4      	adds	r4, r0, #3
 800d69c:	f024 0403 	bic.w	r4, r4, #3
 800d6a0:	42a0      	cmp	r0, r4
 800d6a2:	d007      	beq.n	800d6b4 <sbrk_aligned+0x38>
 800d6a4:	1a21      	subs	r1, r4, r0
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f000 ff36 	bl	800e518 <_sbrk_r>
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d101      	bne.n	800d6b4 <sbrk_aligned+0x38>
 800d6b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	bd70      	pop	{r4, r5, r6, pc}
 800d6b8:	20000598 	.word	0x20000598

0800d6bc <_malloc_r>:
 800d6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c0:	1ccd      	adds	r5, r1, #3
 800d6c2:	f025 0503 	bic.w	r5, r5, #3
 800d6c6:	3508      	adds	r5, #8
 800d6c8:	2d0c      	cmp	r5, #12
 800d6ca:	bf38      	it	cc
 800d6cc:	250c      	movcc	r5, #12
 800d6ce:	2d00      	cmp	r5, #0
 800d6d0:	4607      	mov	r7, r0
 800d6d2:	db01      	blt.n	800d6d8 <_malloc_r+0x1c>
 800d6d4:	42a9      	cmp	r1, r5
 800d6d6:	d905      	bls.n	800d6e4 <_malloc_r+0x28>
 800d6d8:	230c      	movs	r3, #12
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	2600      	movs	r6, #0
 800d6de:	4630      	mov	r0, r6
 800d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e4:	4e2e      	ldr	r6, [pc, #184]	; (800d7a0 <_malloc_r+0xe4>)
 800d6e6:	f001 fa6b 	bl	800ebc0 <__malloc_lock>
 800d6ea:	6833      	ldr	r3, [r6, #0]
 800d6ec:	461c      	mov	r4, r3
 800d6ee:	bb34      	cbnz	r4, 800d73e <_malloc_r+0x82>
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	4638      	mov	r0, r7
 800d6f4:	f7ff ffc2 	bl	800d67c <sbrk_aligned>
 800d6f8:	1c43      	adds	r3, r0, #1
 800d6fa:	4604      	mov	r4, r0
 800d6fc:	d14d      	bne.n	800d79a <_malloc_r+0xde>
 800d6fe:	6834      	ldr	r4, [r6, #0]
 800d700:	4626      	mov	r6, r4
 800d702:	2e00      	cmp	r6, #0
 800d704:	d140      	bne.n	800d788 <_malloc_r+0xcc>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	4631      	mov	r1, r6
 800d70a:	4638      	mov	r0, r7
 800d70c:	eb04 0803 	add.w	r8, r4, r3
 800d710:	f000 ff02 	bl	800e518 <_sbrk_r>
 800d714:	4580      	cmp	r8, r0
 800d716:	d13a      	bne.n	800d78e <_malloc_r+0xd2>
 800d718:	6821      	ldr	r1, [r4, #0]
 800d71a:	3503      	adds	r5, #3
 800d71c:	1a6d      	subs	r5, r5, r1
 800d71e:	f025 0503 	bic.w	r5, r5, #3
 800d722:	3508      	adds	r5, #8
 800d724:	2d0c      	cmp	r5, #12
 800d726:	bf38      	it	cc
 800d728:	250c      	movcc	r5, #12
 800d72a:	4629      	mov	r1, r5
 800d72c:	4638      	mov	r0, r7
 800d72e:	f7ff ffa5 	bl	800d67c <sbrk_aligned>
 800d732:	3001      	adds	r0, #1
 800d734:	d02b      	beq.n	800d78e <_malloc_r+0xd2>
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	442b      	add	r3, r5
 800d73a:	6023      	str	r3, [r4, #0]
 800d73c:	e00e      	b.n	800d75c <_malloc_r+0xa0>
 800d73e:	6822      	ldr	r2, [r4, #0]
 800d740:	1b52      	subs	r2, r2, r5
 800d742:	d41e      	bmi.n	800d782 <_malloc_r+0xc6>
 800d744:	2a0b      	cmp	r2, #11
 800d746:	d916      	bls.n	800d776 <_malloc_r+0xba>
 800d748:	1961      	adds	r1, r4, r5
 800d74a:	42a3      	cmp	r3, r4
 800d74c:	6025      	str	r5, [r4, #0]
 800d74e:	bf18      	it	ne
 800d750:	6059      	strne	r1, [r3, #4]
 800d752:	6863      	ldr	r3, [r4, #4]
 800d754:	bf08      	it	eq
 800d756:	6031      	streq	r1, [r6, #0]
 800d758:	5162      	str	r2, [r4, r5]
 800d75a:	604b      	str	r3, [r1, #4]
 800d75c:	4638      	mov	r0, r7
 800d75e:	f104 060b 	add.w	r6, r4, #11
 800d762:	f001 fa33 	bl	800ebcc <__malloc_unlock>
 800d766:	f026 0607 	bic.w	r6, r6, #7
 800d76a:	1d23      	adds	r3, r4, #4
 800d76c:	1af2      	subs	r2, r6, r3
 800d76e:	d0b6      	beq.n	800d6de <_malloc_r+0x22>
 800d770:	1b9b      	subs	r3, r3, r6
 800d772:	50a3      	str	r3, [r4, r2]
 800d774:	e7b3      	b.n	800d6de <_malloc_r+0x22>
 800d776:	6862      	ldr	r2, [r4, #4]
 800d778:	42a3      	cmp	r3, r4
 800d77a:	bf0c      	ite	eq
 800d77c:	6032      	streq	r2, [r6, #0]
 800d77e:	605a      	strne	r2, [r3, #4]
 800d780:	e7ec      	b.n	800d75c <_malloc_r+0xa0>
 800d782:	4623      	mov	r3, r4
 800d784:	6864      	ldr	r4, [r4, #4]
 800d786:	e7b2      	b.n	800d6ee <_malloc_r+0x32>
 800d788:	4634      	mov	r4, r6
 800d78a:	6876      	ldr	r6, [r6, #4]
 800d78c:	e7b9      	b.n	800d702 <_malloc_r+0x46>
 800d78e:	230c      	movs	r3, #12
 800d790:	603b      	str	r3, [r7, #0]
 800d792:	4638      	mov	r0, r7
 800d794:	f001 fa1a 	bl	800ebcc <__malloc_unlock>
 800d798:	e7a1      	b.n	800d6de <_malloc_r+0x22>
 800d79a:	6025      	str	r5, [r4, #0]
 800d79c:	e7de      	b.n	800d75c <_malloc_r+0xa0>
 800d79e:	bf00      	nop
 800d7a0:	20000594 	.word	0x20000594

0800d7a4 <__ssputs_r>:
 800d7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	688e      	ldr	r6, [r1, #8]
 800d7aa:	429e      	cmp	r6, r3
 800d7ac:	4682      	mov	sl, r0
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	4690      	mov	r8, r2
 800d7b2:	461f      	mov	r7, r3
 800d7b4:	d838      	bhi.n	800d828 <__ssputs_r+0x84>
 800d7b6:	898a      	ldrh	r2, [r1, #12]
 800d7b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7bc:	d032      	beq.n	800d824 <__ssputs_r+0x80>
 800d7be:	6825      	ldr	r5, [r4, #0]
 800d7c0:	6909      	ldr	r1, [r1, #16]
 800d7c2:	eba5 0901 	sub.w	r9, r5, r1
 800d7c6:	6965      	ldr	r5, [r4, #20]
 800d7c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	444b      	add	r3, r9
 800d7d4:	106d      	asrs	r5, r5, #1
 800d7d6:	429d      	cmp	r5, r3
 800d7d8:	bf38      	it	cc
 800d7da:	461d      	movcc	r5, r3
 800d7dc:	0553      	lsls	r3, r2, #21
 800d7de:	d531      	bpl.n	800d844 <__ssputs_r+0xa0>
 800d7e0:	4629      	mov	r1, r5
 800d7e2:	f7ff ff6b 	bl	800d6bc <_malloc_r>
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	b950      	cbnz	r0, 800d800 <__ssputs_r+0x5c>
 800d7ea:	230c      	movs	r3, #12
 800d7ec:	f8ca 3000 	str.w	r3, [sl]
 800d7f0:	89a3      	ldrh	r3, [r4, #12]
 800d7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f6:	81a3      	strh	r3, [r4, #12]
 800d7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d800:	6921      	ldr	r1, [r4, #16]
 800d802:	464a      	mov	r2, r9
 800d804:	f7fb ff50 	bl	80096a8 <memcpy>
 800d808:	89a3      	ldrh	r3, [r4, #12]
 800d80a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	6126      	str	r6, [r4, #16]
 800d816:	6165      	str	r5, [r4, #20]
 800d818:	444e      	add	r6, r9
 800d81a:	eba5 0509 	sub.w	r5, r5, r9
 800d81e:	6026      	str	r6, [r4, #0]
 800d820:	60a5      	str	r5, [r4, #8]
 800d822:	463e      	mov	r6, r7
 800d824:	42be      	cmp	r6, r7
 800d826:	d900      	bls.n	800d82a <__ssputs_r+0x86>
 800d828:	463e      	mov	r6, r7
 800d82a:	6820      	ldr	r0, [r4, #0]
 800d82c:	4632      	mov	r2, r6
 800d82e:	4641      	mov	r1, r8
 800d830:	f001 f9ac 	bl	800eb8c <memmove>
 800d834:	68a3      	ldr	r3, [r4, #8]
 800d836:	1b9b      	subs	r3, r3, r6
 800d838:	60a3      	str	r3, [r4, #8]
 800d83a:	6823      	ldr	r3, [r4, #0]
 800d83c:	4433      	add	r3, r6
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	2000      	movs	r0, #0
 800d842:	e7db      	b.n	800d7fc <__ssputs_r+0x58>
 800d844:	462a      	mov	r2, r5
 800d846:	f001 f9c7 	bl	800ebd8 <_realloc_r>
 800d84a:	4606      	mov	r6, r0
 800d84c:	2800      	cmp	r0, #0
 800d84e:	d1e1      	bne.n	800d814 <__ssputs_r+0x70>
 800d850:	6921      	ldr	r1, [r4, #16]
 800d852:	4650      	mov	r0, sl
 800d854:	f7ff fec6 	bl	800d5e4 <_free_r>
 800d858:	e7c7      	b.n	800d7ea <__ssputs_r+0x46>
	...

0800d85c <_svfiprintf_r>:
 800d85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4698      	mov	r8, r3
 800d862:	898b      	ldrh	r3, [r1, #12]
 800d864:	061b      	lsls	r3, r3, #24
 800d866:	b09d      	sub	sp, #116	; 0x74
 800d868:	4607      	mov	r7, r0
 800d86a:	460d      	mov	r5, r1
 800d86c:	4614      	mov	r4, r2
 800d86e:	d50e      	bpl.n	800d88e <_svfiprintf_r+0x32>
 800d870:	690b      	ldr	r3, [r1, #16]
 800d872:	b963      	cbnz	r3, 800d88e <_svfiprintf_r+0x32>
 800d874:	2140      	movs	r1, #64	; 0x40
 800d876:	f7ff ff21 	bl	800d6bc <_malloc_r>
 800d87a:	6028      	str	r0, [r5, #0]
 800d87c:	6128      	str	r0, [r5, #16]
 800d87e:	b920      	cbnz	r0, 800d88a <_svfiprintf_r+0x2e>
 800d880:	230c      	movs	r3, #12
 800d882:	603b      	str	r3, [r7, #0]
 800d884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d888:	e0d1      	b.n	800da2e <_svfiprintf_r+0x1d2>
 800d88a:	2340      	movs	r3, #64	; 0x40
 800d88c:	616b      	str	r3, [r5, #20]
 800d88e:	2300      	movs	r3, #0
 800d890:	9309      	str	r3, [sp, #36]	; 0x24
 800d892:	2320      	movs	r3, #32
 800d894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d898:	f8cd 800c 	str.w	r8, [sp, #12]
 800d89c:	2330      	movs	r3, #48	; 0x30
 800d89e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800da48 <_svfiprintf_r+0x1ec>
 800d8a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a6:	f04f 0901 	mov.w	r9, #1
 800d8aa:	4623      	mov	r3, r4
 800d8ac:	469a      	mov	sl, r3
 800d8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8b2:	b10a      	cbz	r2, 800d8b8 <_svfiprintf_r+0x5c>
 800d8b4:	2a25      	cmp	r2, #37	; 0x25
 800d8b6:	d1f9      	bne.n	800d8ac <_svfiprintf_r+0x50>
 800d8b8:	ebba 0b04 	subs.w	fp, sl, r4
 800d8bc:	d00b      	beq.n	800d8d6 <_svfiprintf_r+0x7a>
 800d8be:	465b      	mov	r3, fp
 800d8c0:	4622      	mov	r2, r4
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	4638      	mov	r0, r7
 800d8c6:	f7ff ff6d 	bl	800d7a4 <__ssputs_r>
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	f000 80aa 	beq.w	800da24 <_svfiprintf_r+0x1c8>
 800d8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8d2:	445a      	add	r2, fp
 800d8d4:	9209      	str	r2, [sp, #36]	; 0x24
 800d8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	f000 80a2 	beq.w	800da24 <_svfiprintf_r+0x1c8>
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ea:	f10a 0a01 	add.w	sl, sl, #1
 800d8ee:	9304      	str	r3, [sp, #16]
 800d8f0:	9307      	str	r3, [sp, #28]
 800d8f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8f6:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f8:	4654      	mov	r4, sl
 800d8fa:	2205      	movs	r2, #5
 800d8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d900:	4851      	ldr	r0, [pc, #324]	; (800da48 <_svfiprintf_r+0x1ec>)
 800d902:	f7f2 fc85 	bl	8000210 <memchr>
 800d906:	9a04      	ldr	r2, [sp, #16]
 800d908:	b9d8      	cbnz	r0, 800d942 <_svfiprintf_r+0xe6>
 800d90a:	06d0      	lsls	r0, r2, #27
 800d90c:	bf44      	itt	mi
 800d90e:	2320      	movmi	r3, #32
 800d910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d914:	0711      	lsls	r1, r2, #28
 800d916:	bf44      	itt	mi
 800d918:	232b      	movmi	r3, #43	; 0x2b
 800d91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d91e:	f89a 3000 	ldrb.w	r3, [sl]
 800d922:	2b2a      	cmp	r3, #42	; 0x2a
 800d924:	d015      	beq.n	800d952 <_svfiprintf_r+0xf6>
 800d926:	9a07      	ldr	r2, [sp, #28]
 800d928:	4654      	mov	r4, sl
 800d92a:	2000      	movs	r0, #0
 800d92c:	f04f 0c0a 	mov.w	ip, #10
 800d930:	4621      	mov	r1, r4
 800d932:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d936:	3b30      	subs	r3, #48	; 0x30
 800d938:	2b09      	cmp	r3, #9
 800d93a:	d94e      	bls.n	800d9da <_svfiprintf_r+0x17e>
 800d93c:	b1b0      	cbz	r0, 800d96c <_svfiprintf_r+0x110>
 800d93e:	9207      	str	r2, [sp, #28]
 800d940:	e014      	b.n	800d96c <_svfiprintf_r+0x110>
 800d942:	eba0 0308 	sub.w	r3, r0, r8
 800d946:	fa09 f303 	lsl.w	r3, r9, r3
 800d94a:	4313      	orrs	r3, r2
 800d94c:	9304      	str	r3, [sp, #16]
 800d94e:	46a2      	mov	sl, r4
 800d950:	e7d2      	b.n	800d8f8 <_svfiprintf_r+0x9c>
 800d952:	9b03      	ldr	r3, [sp, #12]
 800d954:	1d19      	adds	r1, r3, #4
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	9103      	str	r1, [sp, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	bfbb      	ittet	lt
 800d95e:	425b      	neglt	r3, r3
 800d960:	f042 0202 	orrlt.w	r2, r2, #2
 800d964:	9307      	strge	r3, [sp, #28]
 800d966:	9307      	strlt	r3, [sp, #28]
 800d968:	bfb8      	it	lt
 800d96a:	9204      	strlt	r2, [sp, #16]
 800d96c:	7823      	ldrb	r3, [r4, #0]
 800d96e:	2b2e      	cmp	r3, #46	; 0x2e
 800d970:	d10c      	bne.n	800d98c <_svfiprintf_r+0x130>
 800d972:	7863      	ldrb	r3, [r4, #1]
 800d974:	2b2a      	cmp	r3, #42	; 0x2a
 800d976:	d135      	bne.n	800d9e4 <_svfiprintf_r+0x188>
 800d978:	9b03      	ldr	r3, [sp, #12]
 800d97a:	1d1a      	adds	r2, r3, #4
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	9203      	str	r2, [sp, #12]
 800d980:	2b00      	cmp	r3, #0
 800d982:	bfb8      	it	lt
 800d984:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d988:	3402      	adds	r4, #2
 800d98a:	9305      	str	r3, [sp, #20]
 800d98c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800da58 <_svfiprintf_r+0x1fc>
 800d990:	7821      	ldrb	r1, [r4, #0]
 800d992:	2203      	movs	r2, #3
 800d994:	4650      	mov	r0, sl
 800d996:	f7f2 fc3b 	bl	8000210 <memchr>
 800d99a:	b140      	cbz	r0, 800d9ae <_svfiprintf_r+0x152>
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	eba0 000a 	sub.w	r0, r0, sl
 800d9a2:	fa03 f000 	lsl.w	r0, r3, r0
 800d9a6:	9b04      	ldr	r3, [sp, #16]
 800d9a8:	4303      	orrs	r3, r0
 800d9aa:	3401      	adds	r4, #1
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b2:	4826      	ldr	r0, [pc, #152]	; (800da4c <_svfiprintf_r+0x1f0>)
 800d9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b8:	2206      	movs	r2, #6
 800d9ba:	f7f2 fc29 	bl	8000210 <memchr>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d038      	beq.n	800da34 <_svfiprintf_r+0x1d8>
 800d9c2:	4b23      	ldr	r3, [pc, #140]	; (800da50 <_svfiprintf_r+0x1f4>)
 800d9c4:	bb1b      	cbnz	r3, 800da0e <_svfiprintf_r+0x1b2>
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	3307      	adds	r3, #7
 800d9ca:	f023 0307 	bic.w	r3, r3, #7
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	9303      	str	r3, [sp, #12]
 800d9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d4:	4433      	add	r3, r6
 800d9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d8:	e767      	b.n	800d8aa <_svfiprintf_r+0x4e>
 800d9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9de:	460c      	mov	r4, r1
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	e7a5      	b.n	800d930 <_svfiprintf_r+0xd4>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	9305      	str	r3, [sp, #20]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f04f 0c0a 	mov.w	ip, #10
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9f6:	3a30      	subs	r2, #48	; 0x30
 800d9f8:	2a09      	cmp	r2, #9
 800d9fa:	d903      	bls.n	800da04 <_svfiprintf_r+0x1a8>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0c5      	beq.n	800d98c <_svfiprintf_r+0x130>
 800da00:	9105      	str	r1, [sp, #20]
 800da02:	e7c3      	b.n	800d98c <_svfiprintf_r+0x130>
 800da04:	fb0c 2101 	mla	r1, ip, r1, r2
 800da08:	4604      	mov	r4, r0
 800da0a:	2301      	movs	r3, #1
 800da0c:	e7f0      	b.n	800d9f0 <_svfiprintf_r+0x194>
 800da0e:	ab03      	add	r3, sp, #12
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	462a      	mov	r2, r5
 800da14:	4b0f      	ldr	r3, [pc, #60]	; (800da54 <_svfiprintf_r+0x1f8>)
 800da16:	a904      	add	r1, sp, #16
 800da18:	4638      	mov	r0, r7
 800da1a:	f7fb fefb 	bl	8009814 <_printf_float>
 800da1e:	1c42      	adds	r2, r0, #1
 800da20:	4606      	mov	r6, r0
 800da22:	d1d6      	bne.n	800d9d2 <_svfiprintf_r+0x176>
 800da24:	89ab      	ldrh	r3, [r5, #12]
 800da26:	065b      	lsls	r3, r3, #25
 800da28:	f53f af2c 	bmi.w	800d884 <_svfiprintf_r+0x28>
 800da2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da2e:	b01d      	add	sp, #116	; 0x74
 800da30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da34:	ab03      	add	r3, sp, #12
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	462a      	mov	r2, r5
 800da3a:	4b06      	ldr	r3, [pc, #24]	; (800da54 <_svfiprintf_r+0x1f8>)
 800da3c:	a904      	add	r1, sp, #16
 800da3e:	4638      	mov	r0, r7
 800da40:	f7fc f98c 	bl	8009d5c <_printf_i>
 800da44:	e7eb      	b.n	800da1e <_svfiprintf_r+0x1c2>
 800da46:	bf00      	nop
 800da48:	0800fc44 	.word	0x0800fc44
 800da4c:	0800fc4e 	.word	0x0800fc4e
 800da50:	08009815 	.word	0x08009815
 800da54:	0800d7a5 	.word	0x0800d7a5
 800da58:	0800fc4a 	.word	0x0800fc4a

0800da5c <__sfputc_r>:
 800da5c:	6893      	ldr	r3, [r2, #8]
 800da5e:	3b01      	subs	r3, #1
 800da60:	2b00      	cmp	r3, #0
 800da62:	b410      	push	{r4}
 800da64:	6093      	str	r3, [r2, #8]
 800da66:	da08      	bge.n	800da7a <__sfputc_r+0x1e>
 800da68:	6994      	ldr	r4, [r2, #24]
 800da6a:	42a3      	cmp	r3, r4
 800da6c:	db01      	blt.n	800da72 <__sfputc_r+0x16>
 800da6e:	290a      	cmp	r1, #10
 800da70:	d103      	bne.n	800da7a <__sfputc_r+0x1e>
 800da72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da76:	f000 bf35 	b.w	800e8e4 <__swbuf_r>
 800da7a:	6813      	ldr	r3, [r2, #0]
 800da7c:	1c58      	adds	r0, r3, #1
 800da7e:	6010      	str	r0, [r2, #0]
 800da80:	7019      	strb	r1, [r3, #0]
 800da82:	4608      	mov	r0, r1
 800da84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da88:	4770      	bx	lr

0800da8a <__sfputs_r>:
 800da8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8c:	4606      	mov	r6, r0
 800da8e:	460f      	mov	r7, r1
 800da90:	4614      	mov	r4, r2
 800da92:	18d5      	adds	r5, r2, r3
 800da94:	42ac      	cmp	r4, r5
 800da96:	d101      	bne.n	800da9c <__sfputs_r+0x12>
 800da98:	2000      	movs	r0, #0
 800da9a:	e007      	b.n	800daac <__sfputs_r+0x22>
 800da9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa0:	463a      	mov	r2, r7
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7ff ffda 	bl	800da5c <__sfputc_r>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d1f3      	bne.n	800da94 <__sfputs_r+0xa>
 800daac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dab0 <_vfiprintf_r>:
 800dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dab4:	460d      	mov	r5, r1
 800dab6:	b09d      	sub	sp, #116	; 0x74
 800dab8:	4614      	mov	r4, r2
 800daba:	4698      	mov	r8, r3
 800dabc:	4606      	mov	r6, r0
 800dabe:	b118      	cbz	r0, 800dac8 <_vfiprintf_r+0x18>
 800dac0:	6983      	ldr	r3, [r0, #24]
 800dac2:	b90b      	cbnz	r3, 800dac8 <_vfiprintf_r+0x18>
 800dac4:	f7fe fc06 	bl	800c2d4 <__sinit>
 800dac8:	4b89      	ldr	r3, [pc, #548]	; (800dcf0 <_vfiprintf_r+0x240>)
 800daca:	429d      	cmp	r5, r3
 800dacc:	d11b      	bne.n	800db06 <_vfiprintf_r+0x56>
 800dace:	6875      	ldr	r5, [r6, #4]
 800dad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dad2:	07d9      	lsls	r1, r3, #31
 800dad4:	d405      	bmi.n	800dae2 <_vfiprintf_r+0x32>
 800dad6:	89ab      	ldrh	r3, [r5, #12]
 800dad8:	059a      	lsls	r2, r3, #22
 800dada:	d402      	bmi.n	800dae2 <_vfiprintf_r+0x32>
 800dadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dade:	f7ff f828 	bl	800cb32 <__retarget_lock_acquire_recursive>
 800dae2:	89ab      	ldrh	r3, [r5, #12]
 800dae4:	071b      	lsls	r3, r3, #28
 800dae6:	d501      	bpl.n	800daec <_vfiprintf_r+0x3c>
 800dae8:	692b      	ldr	r3, [r5, #16]
 800daea:	b9eb      	cbnz	r3, 800db28 <_vfiprintf_r+0x78>
 800daec:	4629      	mov	r1, r5
 800daee:	4630      	mov	r0, r6
 800daf0:	f000 ff6a 	bl	800e9c8 <__swsetup_r>
 800daf4:	b1c0      	cbz	r0, 800db28 <_vfiprintf_r+0x78>
 800daf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800daf8:	07dc      	lsls	r4, r3, #31
 800dafa:	d50e      	bpl.n	800db1a <_vfiprintf_r+0x6a>
 800dafc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db00:	b01d      	add	sp, #116	; 0x74
 800db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db06:	4b7b      	ldr	r3, [pc, #492]	; (800dcf4 <_vfiprintf_r+0x244>)
 800db08:	429d      	cmp	r5, r3
 800db0a:	d101      	bne.n	800db10 <_vfiprintf_r+0x60>
 800db0c:	68b5      	ldr	r5, [r6, #8]
 800db0e:	e7df      	b.n	800dad0 <_vfiprintf_r+0x20>
 800db10:	4b79      	ldr	r3, [pc, #484]	; (800dcf8 <_vfiprintf_r+0x248>)
 800db12:	429d      	cmp	r5, r3
 800db14:	bf08      	it	eq
 800db16:	68f5      	ldreq	r5, [r6, #12]
 800db18:	e7da      	b.n	800dad0 <_vfiprintf_r+0x20>
 800db1a:	89ab      	ldrh	r3, [r5, #12]
 800db1c:	0598      	lsls	r0, r3, #22
 800db1e:	d4ed      	bmi.n	800dafc <_vfiprintf_r+0x4c>
 800db20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db22:	f7ff f807 	bl	800cb34 <__retarget_lock_release_recursive>
 800db26:	e7e9      	b.n	800dafc <_vfiprintf_r+0x4c>
 800db28:	2300      	movs	r3, #0
 800db2a:	9309      	str	r3, [sp, #36]	; 0x24
 800db2c:	2320      	movs	r3, #32
 800db2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db32:	f8cd 800c 	str.w	r8, [sp, #12]
 800db36:	2330      	movs	r3, #48	; 0x30
 800db38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dcfc <_vfiprintf_r+0x24c>
 800db3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db40:	f04f 0901 	mov.w	r9, #1
 800db44:	4623      	mov	r3, r4
 800db46:	469a      	mov	sl, r3
 800db48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db4c:	b10a      	cbz	r2, 800db52 <_vfiprintf_r+0xa2>
 800db4e:	2a25      	cmp	r2, #37	; 0x25
 800db50:	d1f9      	bne.n	800db46 <_vfiprintf_r+0x96>
 800db52:	ebba 0b04 	subs.w	fp, sl, r4
 800db56:	d00b      	beq.n	800db70 <_vfiprintf_r+0xc0>
 800db58:	465b      	mov	r3, fp
 800db5a:	4622      	mov	r2, r4
 800db5c:	4629      	mov	r1, r5
 800db5e:	4630      	mov	r0, r6
 800db60:	f7ff ff93 	bl	800da8a <__sfputs_r>
 800db64:	3001      	adds	r0, #1
 800db66:	f000 80aa 	beq.w	800dcbe <_vfiprintf_r+0x20e>
 800db6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db6c:	445a      	add	r2, fp
 800db6e:	9209      	str	r2, [sp, #36]	; 0x24
 800db70:	f89a 3000 	ldrb.w	r3, [sl]
 800db74:	2b00      	cmp	r3, #0
 800db76:	f000 80a2 	beq.w	800dcbe <_vfiprintf_r+0x20e>
 800db7a:	2300      	movs	r3, #0
 800db7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db84:	f10a 0a01 	add.w	sl, sl, #1
 800db88:	9304      	str	r3, [sp, #16]
 800db8a:	9307      	str	r3, [sp, #28]
 800db8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db90:	931a      	str	r3, [sp, #104]	; 0x68
 800db92:	4654      	mov	r4, sl
 800db94:	2205      	movs	r2, #5
 800db96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9a:	4858      	ldr	r0, [pc, #352]	; (800dcfc <_vfiprintf_r+0x24c>)
 800db9c:	f7f2 fb38 	bl	8000210 <memchr>
 800dba0:	9a04      	ldr	r2, [sp, #16]
 800dba2:	b9d8      	cbnz	r0, 800dbdc <_vfiprintf_r+0x12c>
 800dba4:	06d1      	lsls	r1, r2, #27
 800dba6:	bf44      	itt	mi
 800dba8:	2320      	movmi	r3, #32
 800dbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbae:	0713      	lsls	r3, r2, #28
 800dbb0:	bf44      	itt	mi
 800dbb2:	232b      	movmi	r3, #43	; 0x2b
 800dbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800dbbc:	2b2a      	cmp	r3, #42	; 0x2a
 800dbbe:	d015      	beq.n	800dbec <_vfiprintf_r+0x13c>
 800dbc0:	9a07      	ldr	r2, [sp, #28]
 800dbc2:	4654      	mov	r4, sl
 800dbc4:	2000      	movs	r0, #0
 800dbc6:	f04f 0c0a 	mov.w	ip, #10
 800dbca:	4621      	mov	r1, r4
 800dbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd0:	3b30      	subs	r3, #48	; 0x30
 800dbd2:	2b09      	cmp	r3, #9
 800dbd4:	d94e      	bls.n	800dc74 <_vfiprintf_r+0x1c4>
 800dbd6:	b1b0      	cbz	r0, 800dc06 <_vfiprintf_r+0x156>
 800dbd8:	9207      	str	r2, [sp, #28]
 800dbda:	e014      	b.n	800dc06 <_vfiprintf_r+0x156>
 800dbdc:	eba0 0308 	sub.w	r3, r0, r8
 800dbe0:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	9304      	str	r3, [sp, #16]
 800dbe8:	46a2      	mov	sl, r4
 800dbea:	e7d2      	b.n	800db92 <_vfiprintf_r+0xe2>
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	1d19      	adds	r1, r3, #4
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	9103      	str	r1, [sp, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	bfbb      	ittet	lt
 800dbf8:	425b      	neglt	r3, r3
 800dbfa:	f042 0202 	orrlt.w	r2, r2, #2
 800dbfe:	9307      	strge	r3, [sp, #28]
 800dc00:	9307      	strlt	r3, [sp, #28]
 800dc02:	bfb8      	it	lt
 800dc04:	9204      	strlt	r2, [sp, #16]
 800dc06:	7823      	ldrb	r3, [r4, #0]
 800dc08:	2b2e      	cmp	r3, #46	; 0x2e
 800dc0a:	d10c      	bne.n	800dc26 <_vfiprintf_r+0x176>
 800dc0c:	7863      	ldrb	r3, [r4, #1]
 800dc0e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc10:	d135      	bne.n	800dc7e <_vfiprintf_r+0x1ce>
 800dc12:	9b03      	ldr	r3, [sp, #12]
 800dc14:	1d1a      	adds	r2, r3, #4
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	9203      	str	r2, [sp, #12]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	bfb8      	it	lt
 800dc1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800dc22:	3402      	adds	r4, #2
 800dc24:	9305      	str	r3, [sp, #20]
 800dc26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dd0c <_vfiprintf_r+0x25c>
 800dc2a:	7821      	ldrb	r1, [r4, #0]
 800dc2c:	2203      	movs	r2, #3
 800dc2e:	4650      	mov	r0, sl
 800dc30:	f7f2 faee 	bl	8000210 <memchr>
 800dc34:	b140      	cbz	r0, 800dc48 <_vfiprintf_r+0x198>
 800dc36:	2340      	movs	r3, #64	; 0x40
 800dc38:	eba0 000a 	sub.w	r0, r0, sl
 800dc3c:	fa03 f000 	lsl.w	r0, r3, r0
 800dc40:	9b04      	ldr	r3, [sp, #16]
 800dc42:	4303      	orrs	r3, r0
 800dc44:	3401      	adds	r4, #1
 800dc46:	9304      	str	r3, [sp, #16]
 800dc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc4c:	482c      	ldr	r0, [pc, #176]	; (800dd00 <_vfiprintf_r+0x250>)
 800dc4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc52:	2206      	movs	r2, #6
 800dc54:	f7f2 fadc 	bl	8000210 <memchr>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d03f      	beq.n	800dcdc <_vfiprintf_r+0x22c>
 800dc5c:	4b29      	ldr	r3, [pc, #164]	; (800dd04 <_vfiprintf_r+0x254>)
 800dc5e:	bb1b      	cbnz	r3, 800dca8 <_vfiprintf_r+0x1f8>
 800dc60:	9b03      	ldr	r3, [sp, #12]
 800dc62:	3307      	adds	r3, #7
 800dc64:	f023 0307 	bic.w	r3, r3, #7
 800dc68:	3308      	adds	r3, #8
 800dc6a:	9303      	str	r3, [sp, #12]
 800dc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc6e:	443b      	add	r3, r7
 800dc70:	9309      	str	r3, [sp, #36]	; 0x24
 800dc72:	e767      	b.n	800db44 <_vfiprintf_r+0x94>
 800dc74:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc78:	460c      	mov	r4, r1
 800dc7a:	2001      	movs	r0, #1
 800dc7c:	e7a5      	b.n	800dbca <_vfiprintf_r+0x11a>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	3401      	adds	r4, #1
 800dc82:	9305      	str	r3, [sp, #20]
 800dc84:	4619      	mov	r1, r3
 800dc86:	f04f 0c0a 	mov.w	ip, #10
 800dc8a:	4620      	mov	r0, r4
 800dc8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc90:	3a30      	subs	r2, #48	; 0x30
 800dc92:	2a09      	cmp	r2, #9
 800dc94:	d903      	bls.n	800dc9e <_vfiprintf_r+0x1ee>
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d0c5      	beq.n	800dc26 <_vfiprintf_r+0x176>
 800dc9a:	9105      	str	r1, [sp, #20]
 800dc9c:	e7c3      	b.n	800dc26 <_vfiprintf_r+0x176>
 800dc9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800dca2:	4604      	mov	r4, r0
 800dca4:	2301      	movs	r3, #1
 800dca6:	e7f0      	b.n	800dc8a <_vfiprintf_r+0x1da>
 800dca8:	ab03      	add	r3, sp, #12
 800dcaa:	9300      	str	r3, [sp, #0]
 800dcac:	462a      	mov	r2, r5
 800dcae:	4b16      	ldr	r3, [pc, #88]	; (800dd08 <_vfiprintf_r+0x258>)
 800dcb0:	a904      	add	r1, sp, #16
 800dcb2:	4630      	mov	r0, r6
 800dcb4:	f7fb fdae 	bl	8009814 <_printf_float>
 800dcb8:	4607      	mov	r7, r0
 800dcba:	1c78      	adds	r0, r7, #1
 800dcbc:	d1d6      	bne.n	800dc6c <_vfiprintf_r+0x1bc>
 800dcbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc0:	07d9      	lsls	r1, r3, #31
 800dcc2:	d405      	bmi.n	800dcd0 <_vfiprintf_r+0x220>
 800dcc4:	89ab      	ldrh	r3, [r5, #12]
 800dcc6:	059a      	lsls	r2, r3, #22
 800dcc8:	d402      	bmi.n	800dcd0 <_vfiprintf_r+0x220>
 800dcca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dccc:	f7fe ff32 	bl	800cb34 <__retarget_lock_release_recursive>
 800dcd0:	89ab      	ldrh	r3, [r5, #12]
 800dcd2:	065b      	lsls	r3, r3, #25
 800dcd4:	f53f af12 	bmi.w	800dafc <_vfiprintf_r+0x4c>
 800dcd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dcda:	e711      	b.n	800db00 <_vfiprintf_r+0x50>
 800dcdc:	ab03      	add	r3, sp, #12
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	462a      	mov	r2, r5
 800dce2:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <_vfiprintf_r+0x258>)
 800dce4:	a904      	add	r1, sp, #16
 800dce6:	4630      	mov	r0, r6
 800dce8:	f7fc f838 	bl	8009d5c <_printf_i>
 800dcec:	e7e4      	b.n	800dcb8 <_vfiprintf_r+0x208>
 800dcee:	bf00      	nop
 800dcf0:	0800fa2c 	.word	0x0800fa2c
 800dcf4:	0800fa4c 	.word	0x0800fa4c
 800dcf8:	0800fa0c 	.word	0x0800fa0c
 800dcfc:	0800fc44 	.word	0x0800fc44
 800dd00:	0800fc4e 	.word	0x0800fc4e
 800dd04:	08009815 	.word	0x08009815
 800dd08:	0800da8b 	.word	0x0800da8b
 800dd0c:	0800fc4a 	.word	0x0800fc4a

0800dd10 <__svfiscanf_r>:
 800dd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd14:	461d      	mov	r5, r3
 800dd16:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800dd18:	07df      	lsls	r7, r3, #31
 800dd1a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800dd1e:	4606      	mov	r6, r0
 800dd20:	460c      	mov	r4, r1
 800dd22:	4692      	mov	sl, r2
 800dd24:	d405      	bmi.n	800dd32 <__svfiscanf_r+0x22>
 800dd26:	898b      	ldrh	r3, [r1, #12]
 800dd28:	0598      	lsls	r0, r3, #22
 800dd2a:	d402      	bmi.n	800dd32 <__svfiscanf_r+0x22>
 800dd2c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800dd2e:	f7fe ff00 	bl	800cb32 <__retarget_lock_acquire_recursive>
 800dd32:	2300      	movs	r3, #0
 800dd34:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 800dd38:	4ba6      	ldr	r3, [pc, #664]	; (800dfd4 <__svfiscanf_r+0x2c4>)
 800dd3a:	93a0      	str	r3, [sp, #640]	; 0x280
 800dd3c:	f10d 0804 	add.w	r8, sp, #4
 800dd40:	4ba5      	ldr	r3, [pc, #660]	; (800dfd8 <__svfiscanf_r+0x2c8>)
 800dd42:	4fa6      	ldr	r7, [pc, #664]	; (800dfdc <__svfiscanf_r+0x2cc>)
 800dd44:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800dfe0 <__svfiscanf_r+0x2d0>
 800dd48:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800dd4c:	93a1      	str	r3, [sp, #644]	; 0x284
 800dd4e:	9500      	str	r5, [sp, #0]
 800dd50:	f89a 3000 	ldrb.w	r3, [sl]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	f000 8173 	beq.w	800e040 <__svfiscanf_r+0x330>
 800dd5a:	5dd9      	ldrb	r1, [r3, r7]
 800dd5c:	f011 0108 	ands.w	r1, r1, #8
 800dd60:	f10a 0501 	add.w	r5, sl, #1
 800dd64:	d019      	beq.n	800dd9a <__svfiscanf_r+0x8a>
 800dd66:	6863      	ldr	r3, [r4, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dd0f      	ble.n	800dd8c <__svfiscanf_r+0x7c>
 800dd6c:	6823      	ldr	r3, [r4, #0]
 800dd6e:	781a      	ldrb	r2, [r3, #0]
 800dd70:	5cba      	ldrb	r2, [r7, r2]
 800dd72:	0711      	lsls	r1, r2, #28
 800dd74:	d401      	bmi.n	800dd7a <__svfiscanf_r+0x6a>
 800dd76:	46aa      	mov	sl, r5
 800dd78:	e7ea      	b.n	800dd50 <__svfiscanf_r+0x40>
 800dd7a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dd7c:	3201      	adds	r2, #1
 800dd7e:	9245      	str	r2, [sp, #276]	; 0x114
 800dd80:	6862      	ldr	r2, [r4, #4]
 800dd82:	3301      	adds	r3, #1
 800dd84:	3a01      	subs	r2, #1
 800dd86:	6062      	str	r2, [r4, #4]
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	e7ec      	b.n	800dd66 <__svfiscanf_r+0x56>
 800dd8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4630      	mov	r0, r6
 800dd92:	4798      	blx	r3
 800dd94:	2800      	cmp	r0, #0
 800dd96:	d0e9      	beq.n	800dd6c <__svfiscanf_r+0x5c>
 800dd98:	e7ed      	b.n	800dd76 <__svfiscanf_r+0x66>
 800dd9a:	2b25      	cmp	r3, #37	; 0x25
 800dd9c:	d012      	beq.n	800ddc4 <__svfiscanf_r+0xb4>
 800dd9e:	469a      	mov	sl, r3
 800dda0:	6863      	ldr	r3, [r4, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f340 8095 	ble.w	800ded2 <__svfiscanf_r+0x1c2>
 800dda8:	6822      	ldr	r2, [r4, #0]
 800ddaa:	7813      	ldrb	r3, [r2, #0]
 800ddac:	4553      	cmp	r3, sl
 800ddae:	f040 8147 	bne.w	800e040 <__svfiscanf_r+0x330>
 800ddb2:	6863      	ldr	r3, [r4, #4]
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	6063      	str	r3, [r4, #4]
 800ddb8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800ddba:	3201      	adds	r2, #1
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	6022      	str	r2, [r4, #0]
 800ddc0:	9345      	str	r3, [sp, #276]	; 0x114
 800ddc2:	e7d8      	b.n	800dd76 <__svfiscanf_r+0x66>
 800ddc4:	9141      	str	r1, [sp, #260]	; 0x104
 800ddc6:	9143      	str	r1, [sp, #268]	; 0x10c
 800ddc8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800ddcc:	2b2a      	cmp	r3, #42	; 0x2a
 800ddce:	bf02      	ittt	eq
 800ddd0:	2310      	moveq	r3, #16
 800ddd2:	9341      	streq	r3, [sp, #260]	; 0x104
 800ddd4:	f10a 0502 	addeq.w	r5, sl, #2
 800ddd8:	220a      	movs	r2, #10
 800ddda:	46aa      	mov	sl, r5
 800dddc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800dde0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800dde4:	2b09      	cmp	r3, #9
 800dde6:	d91e      	bls.n	800de26 <__svfiscanf_r+0x116>
 800dde8:	487d      	ldr	r0, [pc, #500]	; (800dfe0 <__svfiscanf_r+0x2d0>)
 800ddea:	2203      	movs	r2, #3
 800ddec:	f7f2 fa10 	bl	8000210 <memchr>
 800ddf0:	b140      	cbz	r0, 800de04 <__svfiscanf_r+0xf4>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	eba0 0009 	sub.w	r0, r0, r9
 800ddf8:	fa03 f000 	lsl.w	r0, r3, r0
 800ddfc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800ddfe:	4318      	orrs	r0, r3
 800de00:	9041      	str	r0, [sp, #260]	; 0x104
 800de02:	4655      	mov	r5, sl
 800de04:	f815 3b01 	ldrb.w	r3, [r5], #1
 800de08:	2b78      	cmp	r3, #120	; 0x78
 800de0a:	d807      	bhi.n	800de1c <__svfiscanf_r+0x10c>
 800de0c:	2b57      	cmp	r3, #87	; 0x57
 800de0e:	d811      	bhi.n	800de34 <__svfiscanf_r+0x124>
 800de10:	2b25      	cmp	r3, #37	; 0x25
 800de12:	d0c4      	beq.n	800dd9e <__svfiscanf_r+0x8e>
 800de14:	d858      	bhi.n	800dec8 <__svfiscanf_r+0x1b8>
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 80c8 	beq.w	800dfac <__svfiscanf_r+0x29c>
 800de1c:	2303      	movs	r3, #3
 800de1e:	9347      	str	r3, [sp, #284]	; 0x11c
 800de20:	230a      	movs	r3, #10
 800de22:	9342      	str	r3, [sp, #264]	; 0x108
 800de24:	e07c      	b.n	800df20 <__svfiscanf_r+0x210>
 800de26:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800de28:	fb02 1103 	mla	r1, r2, r3, r1
 800de2c:	3930      	subs	r1, #48	; 0x30
 800de2e:	9143      	str	r1, [sp, #268]	; 0x10c
 800de30:	4655      	mov	r5, sl
 800de32:	e7d2      	b.n	800ddda <__svfiscanf_r+0xca>
 800de34:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800de38:	2a20      	cmp	r2, #32
 800de3a:	d8ef      	bhi.n	800de1c <__svfiscanf_r+0x10c>
 800de3c:	a101      	add	r1, pc, #4	; (adr r1, 800de44 <__svfiscanf_r+0x134>)
 800de3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de42:	bf00      	nop
 800de44:	0800df0b 	.word	0x0800df0b
 800de48:	0800de1d 	.word	0x0800de1d
 800de4c:	0800de1d 	.word	0x0800de1d
 800de50:	0800df69 	.word	0x0800df69
 800de54:	0800de1d 	.word	0x0800de1d
 800de58:	0800de1d 	.word	0x0800de1d
 800de5c:	0800de1d 	.word	0x0800de1d
 800de60:	0800de1d 	.word	0x0800de1d
 800de64:	0800de1d 	.word	0x0800de1d
 800de68:	0800de1d 	.word	0x0800de1d
 800de6c:	0800de1d 	.word	0x0800de1d
 800de70:	0800df7f 	.word	0x0800df7f
 800de74:	0800df55 	.word	0x0800df55
 800de78:	0800decf 	.word	0x0800decf
 800de7c:	0800decf 	.word	0x0800decf
 800de80:	0800decf 	.word	0x0800decf
 800de84:	0800de1d 	.word	0x0800de1d
 800de88:	0800df59 	.word	0x0800df59
 800de8c:	0800de1d 	.word	0x0800de1d
 800de90:	0800de1d 	.word	0x0800de1d
 800de94:	0800de1d 	.word	0x0800de1d
 800de98:	0800de1d 	.word	0x0800de1d
 800de9c:	0800df8f 	.word	0x0800df8f
 800dea0:	0800df61 	.word	0x0800df61
 800dea4:	0800df03 	.word	0x0800df03
 800dea8:	0800de1d 	.word	0x0800de1d
 800deac:	0800de1d 	.word	0x0800de1d
 800deb0:	0800df8b 	.word	0x0800df8b
 800deb4:	0800de1d 	.word	0x0800de1d
 800deb8:	0800df55 	.word	0x0800df55
 800debc:	0800de1d 	.word	0x0800de1d
 800dec0:	0800de1d 	.word	0x0800de1d
 800dec4:	0800df0b 	.word	0x0800df0b
 800dec8:	3b45      	subs	r3, #69	; 0x45
 800deca:	2b02      	cmp	r3, #2
 800decc:	d8a6      	bhi.n	800de1c <__svfiscanf_r+0x10c>
 800dece:	2305      	movs	r3, #5
 800ded0:	e025      	b.n	800df1e <__svfiscanf_r+0x20e>
 800ded2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ded4:	4621      	mov	r1, r4
 800ded6:	4630      	mov	r0, r6
 800ded8:	4798      	blx	r3
 800deda:	2800      	cmp	r0, #0
 800dedc:	f43f af64 	beq.w	800dda8 <__svfiscanf_r+0x98>
 800dee0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dee2:	07da      	lsls	r2, r3, #31
 800dee4:	f140 80a4 	bpl.w	800e030 <__svfiscanf_r+0x320>
 800dee8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800deea:	2800      	cmp	r0, #0
 800deec:	d067      	beq.n	800dfbe <__svfiscanf_r+0x2ae>
 800deee:	89a3      	ldrh	r3, [r4, #12]
 800def0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800def4:	bf18      	it	ne
 800def6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800defa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800defe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df02:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800df04:	f042 0220 	orr.w	r2, r2, #32
 800df08:	9241      	str	r2, [sp, #260]	; 0x104
 800df0a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800df0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df10:	9241      	str	r2, [sp, #260]	; 0x104
 800df12:	2210      	movs	r2, #16
 800df14:	2b6f      	cmp	r3, #111	; 0x6f
 800df16:	9242      	str	r2, [sp, #264]	; 0x108
 800df18:	bf34      	ite	cc
 800df1a:	2303      	movcc	r3, #3
 800df1c:	2304      	movcs	r3, #4
 800df1e:	9347      	str	r3, [sp, #284]	; 0x11c
 800df20:	6863      	ldr	r3, [r4, #4]
 800df22:	2b00      	cmp	r3, #0
 800df24:	dd4e      	ble.n	800dfc4 <__svfiscanf_r+0x2b4>
 800df26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df28:	065b      	lsls	r3, r3, #25
 800df2a:	d404      	bmi.n	800df36 <__svfiscanf_r+0x226>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	781a      	ldrb	r2, [r3, #0]
 800df30:	5cba      	ldrb	r2, [r7, r2]
 800df32:	0710      	lsls	r0, r2, #28
 800df34:	d456      	bmi.n	800dfe4 <__svfiscanf_r+0x2d4>
 800df36:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800df38:	2b02      	cmp	r3, #2
 800df3a:	dc65      	bgt.n	800e008 <__svfiscanf_r+0x2f8>
 800df3c:	466b      	mov	r3, sp
 800df3e:	4622      	mov	r2, r4
 800df40:	a941      	add	r1, sp, #260	; 0x104
 800df42:	4630      	mov	r0, r6
 800df44:	f000 f8b2 	bl	800e0ac <_scanf_chars>
 800df48:	2801      	cmp	r0, #1
 800df4a:	d079      	beq.n	800e040 <__svfiscanf_r+0x330>
 800df4c:	2802      	cmp	r0, #2
 800df4e:	f47f af12 	bne.w	800dd76 <__svfiscanf_r+0x66>
 800df52:	e7c5      	b.n	800dee0 <__svfiscanf_r+0x1d0>
 800df54:	220a      	movs	r2, #10
 800df56:	e7dd      	b.n	800df14 <__svfiscanf_r+0x204>
 800df58:	2300      	movs	r3, #0
 800df5a:	9342      	str	r3, [sp, #264]	; 0x108
 800df5c:	2303      	movs	r3, #3
 800df5e:	e7de      	b.n	800df1e <__svfiscanf_r+0x20e>
 800df60:	2308      	movs	r3, #8
 800df62:	9342      	str	r3, [sp, #264]	; 0x108
 800df64:	2304      	movs	r3, #4
 800df66:	e7da      	b.n	800df1e <__svfiscanf_r+0x20e>
 800df68:	4629      	mov	r1, r5
 800df6a:	4640      	mov	r0, r8
 800df6c:	f000 fae4 	bl	800e538 <__sccl>
 800df70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df76:	9341      	str	r3, [sp, #260]	; 0x104
 800df78:	4605      	mov	r5, r0
 800df7a:	2301      	movs	r3, #1
 800df7c:	e7cf      	b.n	800df1e <__svfiscanf_r+0x20e>
 800df7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800df80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df84:	9341      	str	r3, [sp, #260]	; 0x104
 800df86:	2300      	movs	r3, #0
 800df88:	e7c9      	b.n	800df1e <__svfiscanf_r+0x20e>
 800df8a:	2302      	movs	r3, #2
 800df8c:	e7c7      	b.n	800df1e <__svfiscanf_r+0x20e>
 800df8e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800df90:	06c3      	lsls	r3, r0, #27
 800df92:	f53f aef0 	bmi.w	800dd76 <__svfiscanf_r+0x66>
 800df96:	9b00      	ldr	r3, [sp, #0]
 800df98:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800df9a:	1d19      	adds	r1, r3, #4
 800df9c:	9100      	str	r1, [sp, #0]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	f010 0f01 	tst.w	r0, #1
 800dfa4:	bf14      	ite	ne
 800dfa6:	801a      	strhne	r2, [r3, #0]
 800dfa8:	601a      	streq	r2, [r3, #0]
 800dfaa:	e6e4      	b.n	800dd76 <__svfiscanf_r+0x66>
 800dfac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfae:	07d8      	lsls	r0, r3, #31
 800dfb0:	d405      	bmi.n	800dfbe <__svfiscanf_r+0x2ae>
 800dfb2:	89a3      	ldrh	r3, [r4, #12]
 800dfb4:	0599      	lsls	r1, r3, #22
 800dfb6:	d402      	bmi.n	800dfbe <__svfiscanf_r+0x2ae>
 800dfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfba:	f7fe fdbb 	bl	800cb34 <__retarget_lock_release_recursive>
 800dfbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfc2:	e79a      	b.n	800defa <__svfiscanf_r+0x1ea>
 800dfc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	4630      	mov	r0, r6
 800dfca:	4798      	blx	r3
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	d0aa      	beq.n	800df26 <__svfiscanf_r+0x216>
 800dfd0:	e786      	b.n	800dee0 <__svfiscanf_r+0x1d0>
 800dfd2:	bf00      	nop
 800dfd4:	0800e7b5 	.word	0x0800e7b5
 800dfd8:	0800e3f5 	.word	0x0800e3f5
 800dfdc:	0800f879 	.word	0x0800f879
 800dfe0:	0800fc4a 	.word	0x0800fc4a
 800dfe4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800dfe6:	3201      	adds	r2, #1
 800dfe8:	9245      	str	r2, [sp, #276]	; 0x114
 800dfea:	6862      	ldr	r2, [r4, #4]
 800dfec:	3a01      	subs	r2, #1
 800dfee:	2a00      	cmp	r2, #0
 800dff0:	6062      	str	r2, [r4, #4]
 800dff2:	dd02      	ble.n	800dffa <__svfiscanf_r+0x2ea>
 800dff4:	3301      	adds	r3, #1
 800dff6:	6023      	str	r3, [r4, #0]
 800dff8:	e798      	b.n	800df2c <__svfiscanf_r+0x21c>
 800dffa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800dffc:	4621      	mov	r1, r4
 800dffe:	4630      	mov	r0, r6
 800e000:	4798      	blx	r3
 800e002:	2800      	cmp	r0, #0
 800e004:	d092      	beq.n	800df2c <__svfiscanf_r+0x21c>
 800e006:	e76b      	b.n	800dee0 <__svfiscanf_r+0x1d0>
 800e008:	2b04      	cmp	r3, #4
 800e00a:	dc06      	bgt.n	800e01a <__svfiscanf_r+0x30a>
 800e00c:	466b      	mov	r3, sp
 800e00e:	4622      	mov	r2, r4
 800e010:	a941      	add	r1, sp, #260	; 0x104
 800e012:	4630      	mov	r0, r6
 800e014:	f000 f8a4 	bl	800e160 <_scanf_i>
 800e018:	e796      	b.n	800df48 <__svfiscanf_r+0x238>
 800e01a:	4b0f      	ldr	r3, [pc, #60]	; (800e058 <__svfiscanf_r+0x348>)
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f43f aeaa 	beq.w	800dd76 <__svfiscanf_r+0x66>
 800e022:	466b      	mov	r3, sp
 800e024:	4622      	mov	r2, r4
 800e026:	a941      	add	r1, sp, #260	; 0x104
 800e028:	4630      	mov	r0, r6
 800e02a:	f7fb ffbd 	bl	8009fa8 <_scanf_float>
 800e02e:	e78b      	b.n	800df48 <__svfiscanf_r+0x238>
 800e030:	89a3      	ldrh	r3, [r4, #12]
 800e032:	0599      	lsls	r1, r3, #22
 800e034:	f53f af58 	bmi.w	800dee8 <__svfiscanf_r+0x1d8>
 800e038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e03a:	f7fe fd7b 	bl	800cb34 <__retarget_lock_release_recursive>
 800e03e:	e753      	b.n	800dee8 <__svfiscanf_r+0x1d8>
 800e040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e042:	07da      	lsls	r2, r3, #31
 800e044:	d405      	bmi.n	800e052 <__svfiscanf_r+0x342>
 800e046:	89a3      	ldrh	r3, [r4, #12]
 800e048:	059b      	lsls	r3, r3, #22
 800e04a:	d402      	bmi.n	800e052 <__svfiscanf_r+0x342>
 800e04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e04e:	f7fe fd71 	bl	800cb34 <__retarget_lock_release_recursive>
 800e052:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e054:	e751      	b.n	800defa <__svfiscanf_r+0x1ea>
 800e056:	bf00      	nop
 800e058:	08009fa9 	.word	0x08009fa9

0800e05c <_vfiscanf_r>:
 800e05c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e05e:	460c      	mov	r4, r1
 800e060:	4605      	mov	r5, r0
 800e062:	b138      	cbz	r0, 800e074 <_vfiscanf_r+0x18>
 800e064:	6981      	ldr	r1, [r0, #24]
 800e066:	b929      	cbnz	r1, 800e074 <_vfiscanf_r+0x18>
 800e068:	e9cd 2300 	strd	r2, r3, [sp]
 800e06c:	f7fe f932 	bl	800c2d4 <__sinit>
 800e070:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e074:	490a      	ldr	r1, [pc, #40]	; (800e0a0 <_vfiscanf_r+0x44>)
 800e076:	428c      	cmp	r4, r1
 800e078:	d107      	bne.n	800e08a <_vfiscanf_r+0x2e>
 800e07a:	686c      	ldr	r4, [r5, #4]
 800e07c:	4621      	mov	r1, r4
 800e07e:	4628      	mov	r0, r5
 800e080:	b003      	add	sp, #12
 800e082:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e086:	f7ff be43 	b.w	800dd10 <__svfiscanf_r>
 800e08a:	4906      	ldr	r1, [pc, #24]	; (800e0a4 <_vfiscanf_r+0x48>)
 800e08c:	428c      	cmp	r4, r1
 800e08e:	d101      	bne.n	800e094 <_vfiscanf_r+0x38>
 800e090:	68ac      	ldr	r4, [r5, #8]
 800e092:	e7f3      	b.n	800e07c <_vfiscanf_r+0x20>
 800e094:	4904      	ldr	r1, [pc, #16]	; (800e0a8 <_vfiscanf_r+0x4c>)
 800e096:	428c      	cmp	r4, r1
 800e098:	bf08      	it	eq
 800e09a:	68ec      	ldreq	r4, [r5, #12]
 800e09c:	e7ee      	b.n	800e07c <_vfiscanf_r+0x20>
 800e09e:	bf00      	nop
 800e0a0:	0800fa2c 	.word	0x0800fa2c
 800e0a4:	0800fa4c 	.word	0x0800fa4c
 800e0a8:	0800fa0c 	.word	0x0800fa0c

0800e0ac <_scanf_chars>:
 800e0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b0:	4615      	mov	r5, r2
 800e0b2:	688a      	ldr	r2, [r1, #8]
 800e0b4:	4680      	mov	r8, r0
 800e0b6:	460c      	mov	r4, r1
 800e0b8:	b932      	cbnz	r2, 800e0c8 <_scanf_chars+0x1c>
 800e0ba:	698a      	ldr	r2, [r1, #24]
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	bf0c      	ite	eq
 800e0c0:	2201      	moveq	r2, #1
 800e0c2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800e0c6:	608a      	str	r2, [r1, #8]
 800e0c8:	6822      	ldr	r2, [r4, #0]
 800e0ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e15c <_scanf_chars+0xb0>
 800e0ce:	06d1      	lsls	r1, r2, #27
 800e0d0:	bf5f      	itttt	pl
 800e0d2:	681a      	ldrpl	r2, [r3, #0]
 800e0d4:	1d11      	addpl	r1, r2, #4
 800e0d6:	6019      	strpl	r1, [r3, #0]
 800e0d8:	6816      	ldrpl	r6, [r2, #0]
 800e0da:	2700      	movs	r7, #0
 800e0dc:	69a0      	ldr	r0, [r4, #24]
 800e0de:	b188      	cbz	r0, 800e104 <_scanf_chars+0x58>
 800e0e0:	2801      	cmp	r0, #1
 800e0e2:	d107      	bne.n	800e0f4 <_scanf_chars+0x48>
 800e0e4:	682a      	ldr	r2, [r5, #0]
 800e0e6:	7811      	ldrb	r1, [r2, #0]
 800e0e8:	6962      	ldr	r2, [r4, #20]
 800e0ea:	5c52      	ldrb	r2, [r2, r1]
 800e0ec:	b952      	cbnz	r2, 800e104 <_scanf_chars+0x58>
 800e0ee:	2f00      	cmp	r7, #0
 800e0f0:	d031      	beq.n	800e156 <_scanf_chars+0xaa>
 800e0f2:	e022      	b.n	800e13a <_scanf_chars+0x8e>
 800e0f4:	2802      	cmp	r0, #2
 800e0f6:	d120      	bne.n	800e13a <_scanf_chars+0x8e>
 800e0f8:	682b      	ldr	r3, [r5, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e100:	071b      	lsls	r3, r3, #28
 800e102:	d41a      	bmi.n	800e13a <_scanf_chars+0x8e>
 800e104:	6823      	ldr	r3, [r4, #0]
 800e106:	06da      	lsls	r2, r3, #27
 800e108:	bf5e      	ittt	pl
 800e10a:	682b      	ldrpl	r3, [r5, #0]
 800e10c:	781b      	ldrbpl	r3, [r3, #0]
 800e10e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e112:	682a      	ldr	r2, [r5, #0]
 800e114:	686b      	ldr	r3, [r5, #4]
 800e116:	3201      	adds	r2, #1
 800e118:	602a      	str	r2, [r5, #0]
 800e11a:	68a2      	ldr	r2, [r4, #8]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	3a01      	subs	r2, #1
 800e120:	606b      	str	r3, [r5, #4]
 800e122:	3701      	adds	r7, #1
 800e124:	60a2      	str	r2, [r4, #8]
 800e126:	b142      	cbz	r2, 800e13a <_scanf_chars+0x8e>
 800e128:	2b00      	cmp	r3, #0
 800e12a:	dcd7      	bgt.n	800e0dc <_scanf_chars+0x30>
 800e12c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e130:	4629      	mov	r1, r5
 800e132:	4640      	mov	r0, r8
 800e134:	4798      	blx	r3
 800e136:	2800      	cmp	r0, #0
 800e138:	d0d0      	beq.n	800e0dc <_scanf_chars+0x30>
 800e13a:	6823      	ldr	r3, [r4, #0]
 800e13c:	f013 0310 	ands.w	r3, r3, #16
 800e140:	d105      	bne.n	800e14e <_scanf_chars+0xa2>
 800e142:	68e2      	ldr	r2, [r4, #12]
 800e144:	3201      	adds	r2, #1
 800e146:	60e2      	str	r2, [r4, #12]
 800e148:	69a2      	ldr	r2, [r4, #24]
 800e14a:	b102      	cbz	r2, 800e14e <_scanf_chars+0xa2>
 800e14c:	7033      	strb	r3, [r6, #0]
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	443b      	add	r3, r7
 800e152:	6123      	str	r3, [r4, #16]
 800e154:	2000      	movs	r0, #0
 800e156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15a:	bf00      	nop
 800e15c:	0800f879 	.word	0x0800f879

0800e160 <_scanf_i>:
 800e160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e164:	4698      	mov	r8, r3
 800e166:	4b76      	ldr	r3, [pc, #472]	; (800e340 <_scanf_i+0x1e0>)
 800e168:	460c      	mov	r4, r1
 800e16a:	4682      	mov	sl, r0
 800e16c:	4616      	mov	r6, r2
 800e16e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e172:	b087      	sub	sp, #28
 800e174:	ab03      	add	r3, sp, #12
 800e176:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e17a:	4b72      	ldr	r3, [pc, #456]	; (800e344 <_scanf_i+0x1e4>)
 800e17c:	69a1      	ldr	r1, [r4, #24]
 800e17e:	4a72      	ldr	r2, [pc, #456]	; (800e348 <_scanf_i+0x1e8>)
 800e180:	2903      	cmp	r1, #3
 800e182:	bf18      	it	ne
 800e184:	461a      	movne	r2, r3
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	9201      	str	r2, [sp, #4]
 800e18a:	1e5a      	subs	r2, r3, #1
 800e18c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e190:	bf88      	it	hi
 800e192:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e196:	4627      	mov	r7, r4
 800e198:	bf82      	ittt	hi
 800e19a:	eb03 0905 	addhi.w	r9, r3, r5
 800e19e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e1a2:	60a3      	strhi	r3, [r4, #8]
 800e1a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e1a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e1ac:	bf98      	it	ls
 800e1ae:	f04f 0900 	movls.w	r9, #0
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	463d      	mov	r5, r7
 800e1b6:	f04f 0b00 	mov.w	fp, #0
 800e1ba:	6831      	ldr	r1, [r6, #0]
 800e1bc:	ab03      	add	r3, sp, #12
 800e1be:	7809      	ldrb	r1, [r1, #0]
 800e1c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e1c4:	2202      	movs	r2, #2
 800e1c6:	f7f2 f823 	bl	8000210 <memchr>
 800e1ca:	b328      	cbz	r0, 800e218 <_scanf_i+0xb8>
 800e1cc:	f1bb 0f01 	cmp.w	fp, #1
 800e1d0:	d159      	bne.n	800e286 <_scanf_i+0x126>
 800e1d2:	6862      	ldr	r2, [r4, #4]
 800e1d4:	b92a      	cbnz	r2, 800e1e2 <_scanf_i+0x82>
 800e1d6:	6822      	ldr	r2, [r4, #0]
 800e1d8:	2308      	movs	r3, #8
 800e1da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1de:	6063      	str	r3, [r4, #4]
 800e1e0:	6022      	str	r2, [r4, #0]
 800e1e2:	6822      	ldr	r2, [r4, #0]
 800e1e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e1e8:	6022      	str	r2, [r4, #0]
 800e1ea:	68a2      	ldr	r2, [r4, #8]
 800e1ec:	1e51      	subs	r1, r2, #1
 800e1ee:	60a1      	str	r1, [r4, #8]
 800e1f0:	b192      	cbz	r2, 800e218 <_scanf_i+0xb8>
 800e1f2:	6832      	ldr	r2, [r6, #0]
 800e1f4:	1c51      	adds	r1, r2, #1
 800e1f6:	6031      	str	r1, [r6, #0]
 800e1f8:	7812      	ldrb	r2, [r2, #0]
 800e1fa:	f805 2b01 	strb.w	r2, [r5], #1
 800e1fe:	6872      	ldr	r2, [r6, #4]
 800e200:	3a01      	subs	r2, #1
 800e202:	2a00      	cmp	r2, #0
 800e204:	6072      	str	r2, [r6, #4]
 800e206:	dc07      	bgt.n	800e218 <_scanf_i+0xb8>
 800e208:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e20c:	4631      	mov	r1, r6
 800e20e:	4650      	mov	r0, sl
 800e210:	4790      	blx	r2
 800e212:	2800      	cmp	r0, #0
 800e214:	f040 8085 	bne.w	800e322 <_scanf_i+0x1c2>
 800e218:	f10b 0b01 	add.w	fp, fp, #1
 800e21c:	f1bb 0f03 	cmp.w	fp, #3
 800e220:	d1cb      	bne.n	800e1ba <_scanf_i+0x5a>
 800e222:	6863      	ldr	r3, [r4, #4]
 800e224:	b90b      	cbnz	r3, 800e22a <_scanf_i+0xca>
 800e226:	230a      	movs	r3, #10
 800e228:	6063      	str	r3, [r4, #4]
 800e22a:	6863      	ldr	r3, [r4, #4]
 800e22c:	4947      	ldr	r1, [pc, #284]	; (800e34c <_scanf_i+0x1ec>)
 800e22e:	6960      	ldr	r0, [r4, #20]
 800e230:	1ac9      	subs	r1, r1, r3
 800e232:	f000 f981 	bl	800e538 <__sccl>
 800e236:	f04f 0b00 	mov.w	fp, #0
 800e23a:	68a3      	ldr	r3, [r4, #8]
 800e23c:	6822      	ldr	r2, [r4, #0]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d03d      	beq.n	800e2be <_scanf_i+0x15e>
 800e242:	6831      	ldr	r1, [r6, #0]
 800e244:	6960      	ldr	r0, [r4, #20]
 800e246:	f891 c000 	ldrb.w	ip, [r1]
 800e24a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e24e:	2800      	cmp	r0, #0
 800e250:	d035      	beq.n	800e2be <_scanf_i+0x15e>
 800e252:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e256:	d124      	bne.n	800e2a2 <_scanf_i+0x142>
 800e258:	0510      	lsls	r0, r2, #20
 800e25a:	d522      	bpl.n	800e2a2 <_scanf_i+0x142>
 800e25c:	f10b 0b01 	add.w	fp, fp, #1
 800e260:	f1b9 0f00 	cmp.w	r9, #0
 800e264:	d003      	beq.n	800e26e <_scanf_i+0x10e>
 800e266:	3301      	adds	r3, #1
 800e268:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e26c:	60a3      	str	r3, [r4, #8]
 800e26e:	6873      	ldr	r3, [r6, #4]
 800e270:	3b01      	subs	r3, #1
 800e272:	2b00      	cmp	r3, #0
 800e274:	6073      	str	r3, [r6, #4]
 800e276:	dd1b      	ble.n	800e2b0 <_scanf_i+0x150>
 800e278:	6833      	ldr	r3, [r6, #0]
 800e27a:	3301      	adds	r3, #1
 800e27c:	6033      	str	r3, [r6, #0]
 800e27e:	68a3      	ldr	r3, [r4, #8]
 800e280:	3b01      	subs	r3, #1
 800e282:	60a3      	str	r3, [r4, #8]
 800e284:	e7d9      	b.n	800e23a <_scanf_i+0xda>
 800e286:	f1bb 0f02 	cmp.w	fp, #2
 800e28a:	d1ae      	bne.n	800e1ea <_scanf_i+0x8a>
 800e28c:	6822      	ldr	r2, [r4, #0]
 800e28e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e292:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e296:	d1bf      	bne.n	800e218 <_scanf_i+0xb8>
 800e298:	2310      	movs	r3, #16
 800e29a:	6063      	str	r3, [r4, #4]
 800e29c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2a0:	e7a2      	b.n	800e1e8 <_scanf_i+0x88>
 800e2a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e2a6:	6022      	str	r2, [r4, #0]
 800e2a8:	780b      	ldrb	r3, [r1, #0]
 800e2aa:	f805 3b01 	strb.w	r3, [r5], #1
 800e2ae:	e7de      	b.n	800e26e <_scanf_i+0x10e>
 800e2b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e2b4:	4631      	mov	r1, r6
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	4798      	blx	r3
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0df      	beq.n	800e27e <_scanf_i+0x11e>
 800e2be:	6823      	ldr	r3, [r4, #0]
 800e2c0:	05db      	lsls	r3, r3, #23
 800e2c2:	d50d      	bpl.n	800e2e0 <_scanf_i+0x180>
 800e2c4:	42bd      	cmp	r5, r7
 800e2c6:	d909      	bls.n	800e2dc <_scanf_i+0x17c>
 800e2c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e2cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2d0:	4632      	mov	r2, r6
 800e2d2:	4650      	mov	r0, sl
 800e2d4:	4798      	blx	r3
 800e2d6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800e2da:	464d      	mov	r5, r9
 800e2dc:	42bd      	cmp	r5, r7
 800e2de:	d02d      	beq.n	800e33c <_scanf_i+0x1dc>
 800e2e0:	6822      	ldr	r2, [r4, #0]
 800e2e2:	f012 0210 	ands.w	r2, r2, #16
 800e2e6:	d113      	bne.n	800e310 <_scanf_i+0x1b0>
 800e2e8:	702a      	strb	r2, [r5, #0]
 800e2ea:	6863      	ldr	r3, [r4, #4]
 800e2ec:	9e01      	ldr	r6, [sp, #4]
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	4650      	mov	r0, sl
 800e2f2:	47b0      	blx	r6
 800e2f4:	6821      	ldr	r1, [r4, #0]
 800e2f6:	f8d8 3000 	ldr.w	r3, [r8]
 800e2fa:	f011 0f20 	tst.w	r1, #32
 800e2fe:	d013      	beq.n	800e328 <_scanf_i+0x1c8>
 800e300:	1d1a      	adds	r2, r3, #4
 800e302:	f8c8 2000 	str.w	r2, [r8]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6018      	str	r0, [r3, #0]
 800e30a:	68e3      	ldr	r3, [r4, #12]
 800e30c:	3301      	adds	r3, #1
 800e30e:	60e3      	str	r3, [r4, #12]
 800e310:	1bed      	subs	r5, r5, r7
 800e312:	44ab      	add	fp, r5
 800e314:	6925      	ldr	r5, [r4, #16]
 800e316:	445d      	add	r5, fp
 800e318:	6125      	str	r5, [r4, #16]
 800e31a:	2000      	movs	r0, #0
 800e31c:	b007      	add	sp, #28
 800e31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e322:	f04f 0b00 	mov.w	fp, #0
 800e326:	e7ca      	b.n	800e2be <_scanf_i+0x15e>
 800e328:	1d1a      	adds	r2, r3, #4
 800e32a:	f8c8 2000 	str.w	r2, [r8]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f011 0f01 	tst.w	r1, #1
 800e334:	bf14      	ite	ne
 800e336:	8018      	strhne	r0, [r3, #0]
 800e338:	6018      	streq	r0, [r3, #0]
 800e33a:	e7e6      	b.n	800e30a <_scanf_i+0x1aa>
 800e33c:	2001      	movs	r0, #1
 800e33e:	e7ed      	b.n	800e31c <_scanf_i+0x1bc>
 800e340:	0800ef68 	.word	0x0800ef68
 800e344:	0800e73d 	.word	0x0800e73d
 800e348:	0800b385 	.word	0x0800b385
 800e34c:	0800fc6e 	.word	0x0800fc6e

0800e350 <_putc_r>:
 800e350:	b570      	push	{r4, r5, r6, lr}
 800e352:	460d      	mov	r5, r1
 800e354:	4614      	mov	r4, r2
 800e356:	4606      	mov	r6, r0
 800e358:	b118      	cbz	r0, 800e362 <_putc_r+0x12>
 800e35a:	6983      	ldr	r3, [r0, #24]
 800e35c:	b90b      	cbnz	r3, 800e362 <_putc_r+0x12>
 800e35e:	f7fd ffb9 	bl	800c2d4 <__sinit>
 800e362:	4b1c      	ldr	r3, [pc, #112]	; (800e3d4 <_putc_r+0x84>)
 800e364:	429c      	cmp	r4, r3
 800e366:	d124      	bne.n	800e3b2 <_putc_r+0x62>
 800e368:	6874      	ldr	r4, [r6, #4]
 800e36a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e36c:	07d8      	lsls	r0, r3, #31
 800e36e:	d405      	bmi.n	800e37c <_putc_r+0x2c>
 800e370:	89a3      	ldrh	r3, [r4, #12]
 800e372:	0599      	lsls	r1, r3, #22
 800e374:	d402      	bmi.n	800e37c <_putc_r+0x2c>
 800e376:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e378:	f7fe fbdb 	bl	800cb32 <__retarget_lock_acquire_recursive>
 800e37c:	68a3      	ldr	r3, [r4, #8]
 800e37e:	3b01      	subs	r3, #1
 800e380:	2b00      	cmp	r3, #0
 800e382:	60a3      	str	r3, [r4, #8]
 800e384:	da05      	bge.n	800e392 <_putc_r+0x42>
 800e386:	69a2      	ldr	r2, [r4, #24]
 800e388:	4293      	cmp	r3, r2
 800e38a:	db1c      	blt.n	800e3c6 <_putc_r+0x76>
 800e38c:	b2eb      	uxtb	r3, r5
 800e38e:	2b0a      	cmp	r3, #10
 800e390:	d019      	beq.n	800e3c6 <_putc_r+0x76>
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	6022      	str	r2, [r4, #0]
 800e398:	701d      	strb	r5, [r3, #0]
 800e39a:	b2ed      	uxtb	r5, r5
 800e39c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e39e:	07da      	lsls	r2, r3, #31
 800e3a0:	d405      	bmi.n	800e3ae <_putc_r+0x5e>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	059b      	lsls	r3, r3, #22
 800e3a6:	d402      	bmi.n	800e3ae <_putc_r+0x5e>
 800e3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3aa:	f7fe fbc3 	bl	800cb34 <__retarget_lock_release_recursive>
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	bd70      	pop	{r4, r5, r6, pc}
 800e3b2:	4b09      	ldr	r3, [pc, #36]	; (800e3d8 <_putc_r+0x88>)
 800e3b4:	429c      	cmp	r4, r3
 800e3b6:	d101      	bne.n	800e3bc <_putc_r+0x6c>
 800e3b8:	68b4      	ldr	r4, [r6, #8]
 800e3ba:	e7d6      	b.n	800e36a <_putc_r+0x1a>
 800e3bc:	4b07      	ldr	r3, [pc, #28]	; (800e3dc <_putc_r+0x8c>)
 800e3be:	429c      	cmp	r4, r3
 800e3c0:	bf08      	it	eq
 800e3c2:	68f4      	ldreq	r4, [r6, #12]
 800e3c4:	e7d1      	b.n	800e36a <_putc_r+0x1a>
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4630      	mov	r0, r6
 800e3cc:	f000 fa8a 	bl	800e8e4 <__swbuf_r>
 800e3d0:	4605      	mov	r5, r0
 800e3d2:	e7e3      	b.n	800e39c <_putc_r+0x4c>
 800e3d4:	0800fa2c 	.word	0x0800fa2c
 800e3d8:	0800fa4c 	.word	0x0800fa4c
 800e3dc:	0800fa0c 	.word	0x0800fa0c

0800e3e0 <lflush>:
 800e3e0:	8983      	ldrh	r3, [r0, #12]
 800e3e2:	f003 0309 	and.w	r3, r3, #9
 800e3e6:	2b09      	cmp	r3, #9
 800e3e8:	d101      	bne.n	800e3ee <lflush+0xe>
 800e3ea:	f7fd bf09 	b.w	800c200 <fflush>
 800e3ee:	2000      	movs	r0, #0
 800e3f0:	4770      	bx	lr
	...

0800e3f4 <__srefill_r>:
 800e3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3f6:	460c      	mov	r4, r1
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	b118      	cbz	r0, 800e404 <__srefill_r+0x10>
 800e3fc:	6983      	ldr	r3, [r0, #24]
 800e3fe:	b90b      	cbnz	r3, 800e404 <__srefill_r+0x10>
 800e400:	f7fd ff68 	bl	800c2d4 <__sinit>
 800e404:	4b3b      	ldr	r3, [pc, #236]	; (800e4f4 <__srefill_r+0x100>)
 800e406:	429c      	cmp	r4, r3
 800e408:	d10a      	bne.n	800e420 <__srefill_r+0x2c>
 800e40a:	686c      	ldr	r4, [r5, #4]
 800e40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e410:	2300      	movs	r3, #0
 800e412:	6063      	str	r3, [r4, #4]
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	069e      	lsls	r6, r3, #26
 800e418:	d50c      	bpl.n	800e434 <__srefill_r+0x40>
 800e41a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e41e:	e066      	b.n	800e4ee <__srefill_r+0xfa>
 800e420:	4b35      	ldr	r3, [pc, #212]	; (800e4f8 <__srefill_r+0x104>)
 800e422:	429c      	cmp	r4, r3
 800e424:	d101      	bne.n	800e42a <__srefill_r+0x36>
 800e426:	68ac      	ldr	r4, [r5, #8]
 800e428:	e7f0      	b.n	800e40c <__srefill_r+0x18>
 800e42a:	4b34      	ldr	r3, [pc, #208]	; (800e4fc <__srefill_r+0x108>)
 800e42c:	429c      	cmp	r4, r3
 800e42e:	bf08      	it	eq
 800e430:	68ec      	ldreq	r4, [r5, #12]
 800e432:	e7eb      	b.n	800e40c <__srefill_r+0x18>
 800e434:	0758      	lsls	r0, r3, #29
 800e436:	d448      	bmi.n	800e4ca <__srefill_r+0xd6>
 800e438:	06d9      	lsls	r1, r3, #27
 800e43a:	d405      	bmi.n	800e448 <__srefill_r+0x54>
 800e43c:	2309      	movs	r3, #9
 800e43e:	602b      	str	r3, [r5, #0]
 800e440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e444:	81a3      	strh	r3, [r4, #12]
 800e446:	e7e8      	b.n	800e41a <__srefill_r+0x26>
 800e448:	071a      	lsls	r2, r3, #28
 800e44a:	d50b      	bpl.n	800e464 <__srefill_r+0x70>
 800e44c:	4621      	mov	r1, r4
 800e44e:	4628      	mov	r0, r5
 800e450:	f7fd fe9a 	bl	800c188 <_fflush_r>
 800e454:	2800      	cmp	r0, #0
 800e456:	d1e0      	bne.n	800e41a <__srefill_r+0x26>
 800e458:	89a3      	ldrh	r3, [r4, #12]
 800e45a:	60a0      	str	r0, [r4, #8]
 800e45c:	f023 0308 	bic.w	r3, r3, #8
 800e460:	81a3      	strh	r3, [r4, #12]
 800e462:	61a0      	str	r0, [r4, #24]
 800e464:	89a3      	ldrh	r3, [r4, #12]
 800e466:	f043 0304 	orr.w	r3, r3, #4
 800e46a:	81a3      	strh	r3, [r4, #12]
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	b91b      	cbnz	r3, 800e478 <__srefill_r+0x84>
 800e470:	4621      	mov	r1, r4
 800e472:	4628      	mov	r0, r5
 800e474:	f7fe fb84 	bl	800cb80 <__smakebuf_r>
 800e478:	89a6      	ldrh	r6, [r4, #12]
 800e47a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800e47e:	07b3      	lsls	r3, r6, #30
 800e480:	d00f      	beq.n	800e4a2 <__srefill_r+0xae>
 800e482:	2301      	movs	r3, #1
 800e484:	81a3      	strh	r3, [r4, #12]
 800e486:	4b1e      	ldr	r3, [pc, #120]	; (800e500 <__srefill_r+0x10c>)
 800e488:	491e      	ldr	r1, [pc, #120]	; (800e504 <__srefill_r+0x110>)
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	f006 0609 	and.w	r6, r6, #9
 800e490:	f7fd ff9e 	bl	800c3d0 <_fwalk>
 800e494:	2e09      	cmp	r6, #9
 800e496:	81a7      	strh	r7, [r4, #12]
 800e498:	d103      	bne.n	800e4a2 <__srefill_r+0xae>
 800e49a:	4621      	mov	r1, r4
 800e49c:	4628      	mov	r0, r5
 800e49e:	f7fd fded 	bl	800c07c <__sflush_r>
 800e4a2:	6922      	ldr	r2, [r4, #16]
 800e4a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e4a6:	6963      	ldr	r3, [r4, #20]
 800e4a8:	6a21      	ldr	r1, [r4, #32]
 800e4aa:	6022      	str	r2, [r4, #0]
 800e4ac:	4628      	mov	r0, r5
 800e4ae:	47b0      	blx	r6
 800e4b0:	2800      	cmp	r0, #0
 800e4b2:	6060      	str	r0, [r4, #4]
 800e4b4:	dc1c      	bgt.n	800e4f0 <__srefill_r+0xfc>
 800e4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ba:	bf17      	itett	ne
 800e4bc:	2200      	movne	r2, #0
 800e4be:	f043 0320 	orreq.w	r3, r3, #32
 800e4c2:	6062      	strne	r2, [r4, #4]
 800e4c4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800e4c8:	e7bc      	b.n	800e444 <__srefill_r+0x50>
 800e4ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4cc:	2900      	cmp	r1, #0
 800e4ce:	d0cd      	beq.n	800e46c <__srefill_r+0x78>
 800e4d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4d4:	4299      	cmp	r1, r3
 800e4d6:	d002      	beq.n	800e4de <__srefill_r+0xea>
 800e4d8:	4628      	mov	r0, r5
 800e4da:	f7ff f883 	bl	800d5e4 <_free_r>
 800e4de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4e0:	6063      	str	r3, [r4, #4]
 800e4e2:	2000      	movs	r0, #0
 800e4e4:	6360      	str	r0, [r4, #52]	; 0x34
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d0c0      	beq.n	800e46c <__srefill_r+0x78>
 800e4ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e4ec:	6023      	str	r3, [r4, #0]
 800e4ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	e7fc      	b.n	800e4ee <__srefill_r+0xfa>
 800e4f4:	0800fa2c 	.word	0x0800fa2c
 800e4f8:	0800fa4c 	.word	0x0800fa4c
 800e4fc:	0800fa0c 	.word	0x0800fa0c
 800e500:	0800f7e8 	.word	0x0800f7e8
 800e504:	0800e3e1 	.word	0x0800e3e1

0800e508 <nan>:
 800e508:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e510 <nan+0x8>
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	00000000 	.word	0x00000000
 800e514:	7ff80000 	.word	0x7ff80000

0800e518 <_sbrk_r>:
 800e518:	b538      	push	{r3, r4, r5, lr}
 800e51a:	4d06      	ldr	r5, [pc, #24]	; (800e534 <_sbrk_r+0x1c>)
 800e51c:	2300      	movs	r3, #0
 800e51e:	4604      	mov	r4, r0
 800e520:	4608      	mov	r0, r1
 800e522:	602b      	str	r3, [r5, #0]
 800e524:	f7fa ffde 	bl	80094e4 <_sbrk>
 800e528:	1c43      	adds	r3, r0, #1
 800e52a:	d102      	bne.n	800e532 <_sbrk_r+0x1a>
 800e52c:	682b      	ldr	r3, [r5, #0]
 800e52e:	b103      	cbz	r3, 800e532 <_sbrk_r+0x1a>
 800e530:	6023      	str	r3, [r4, #0]
 800e532:	bd38      	pop	{r3, r4, r5, pc}
 800e534:	2000059c 	.word	0x2000059c

0800e538 <__sccl>:
 800e538:	b570      	push	{r4, r5, r6, lr}
 800e53a:	780b      	ldrb	r3, [r1, #0]
 800e53c:	4604      	mov	r4, r0
 800e53e:	2b5e      	cmp	r3, #94	; 0x5e
 800e540:	bf0b      	itete	eq
 800e542:	784b      	ldrbeq	r3, [r1, #1]
 800e544:	1c48      	addne	r0, r1, #1
 800e546:	1c88      	addeq	r0, r1, #2
 800e548:	2200      	movne	r2, #0
 800e54a:	bf08      	it	eq
 800e54c:	2201      	moveq	r2, #1
 800e54e:	1e61      	subs	r1, r4, #1
 800e550:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e554:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e558:	42a9      	cmp	r1, r5
 800e55a:	d1fb      	bne.n	800e554 <__sccl+0x1c>
 800e55c:	b90b      	cbnz	r3, 800e562 <__sccl+0x2a>
 800e55e:	3801      	subs	r0, #1
 800e560:	bd70      	pop	{r4, r5, r6, pc}
 800e562:	f082 0201 	eor.w	r2, r2, #1
 800e566:	54e2      	strb	r2, [r4, r3]
 800e568:	4605      	mov	r5, r0
 800e56a:	4628      	mov	r0, r5
 800e56c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e570:	292d      	cmp	r1, #45	; 0x2d
 800e572:	d006      	beq.n	800e582 <__sccl+0x4a>
 800e574:	295d      	cmp	r1, #93	; 0x5d
 800e576:	d0f3      	beq.n	800e560 <__sccl+0x28>
 800e578:	b909      	cbnz	r1, 800e57e <__sccl+0x46>
 800e57a:	4628      	mov	r0, r5
 800e57c:	e7f0      	b.n	800e560 <__sccl+0x28>
 800e57e:	460b      	mov	r3, r1
 800e580:	e7f1      	b.n	800e566 <__sccl+0x2e>
 800e582:	786e      	ldrb	r6, [r5, #1]
 800e584:	2e5d      	cmp	r6, #93	; 0x5d
 800e586:	d0fa      	beq.n	800e57e <__sccl+0x46>
 800e588:	42b3      	cmp	r3, r6
 800e58a:	dcf8      	bgt.n	800e57e <__sccl+0x46>
 800e58c:	3502      	adds	r5, #2
 800e58e:	4619      	mov	r1, r3
 800e590:	3101      	adds	r1, #1
 800e592:	428e      	cmp	r6, r1
 800e594:	5462      	strb	r2, [r4, r1]
 800e596:	dcfb      	bgt.n	800e590 <__sccl+0x58>
 800e598:	1af1      	subs	r1, r6, r3
 800e59a:	3901      	subs	r1, #1
 800e59c:	1c58      	adds	r0, r3, #1
 800e59e:	42b3      	cmp	r3, r6
 800e5a0:	bfa8      	it	ge
 800e5a2:	2100      	movge	r1, #0
 800e5a4:	1843      	adds	r3, r0, r1
 800e5a6:	e7e0      	b.n	800e56a <__sccl+0x32>

0800e5a8 <__sread>:
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b0:	f000 fb42 	bl	800ec38 <_read_r>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	bfab      	itete	ge
 800e5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e5bc:	181b      	addge	r3, r3, r0
 800e5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e5c2:	bfac      	ite	ge
 800e5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e5c6:	81a3      	strhlt	r3, [r4, #12]
 800e5c8:	bd10      	pop	{r4, pc}

0800e5ca <__swrite>:
 800e5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ce:	461f      	mov	r7, r3
 800e5d0:	898b      	ldrh	r3, [r1, #12]
 800e5d2:	05db      	lsls	r3, r3, #23
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	460c      	mov	r4, r1
 800e5d8:	4616      	mov	r6, r2
 800e5da:	d505      	bpl.n	800e5e8 <__swrite+0x1e>
 800e5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f000 fac0 	bl	800eb68 <_lseek_r>
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5f2:	81a3      	strh	r3, [r4, #12]
 800e5f4:	4632      	mov	r2, r6
 800e5f6:	463b      	mov	r3, r7
 800e5f8:	4628      	mov	r0, r5
 800e5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fe:	f000 b9d1 	b.w	800e9a4 <_write_r>

0800e602 <__sseek>:
 800e602:	b510      	push	{r4, lr}
 800e604:	460c      	mov	r4, r1
 800e606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e60a:	f000 faad 	bl	800eb68 <_lseek_r>
 800e60e:	1c43      	adds	r3, r0, #1
 800e610:	89a3      	ldrh	r3, [r4, #12]
 800e612:	bf15      	itete	ne
 800e614:	6560      	strne	r0, [r4, #84]	; 0x54
 800e616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e61e:	81a3      	strheq	r3, [r4, #12]
 800e620:	bf18      	it	ne
 800e622:	81a3      	strhne	r3, [r4, #12]
 800e624:	bd10      	pop	{r4, pc}

0800e626 <__sclose>:
 800e626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e62a:	f000 ba59 	b.w	800eae0 <_close_r>

0800e62e <strncmp>:
 800e62e:	b510      	push	{r4, lr}
 800e630:	b17a      	cbz	r2, 800e652 <strncmp+0x24>
 800e632:	4603      	mov	r3, r0
 800e634:	3901      	subs	r1, #1
 800e636:	1884      	adds	r4, r0, r2
 800e638:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e63c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e640:	4290      	cmp	r0, r2
 800e642:	d101      	bne.n	800e648 <strncmp+0x1a>
 800e644:	42a3      	cmp	r3, r4
 800e646:	d101      	bne.n	800e64c <strncmp+0x1e>
 800e648:	1a80      	subs	r0, r0, r2
 800e64a:	bd10      	pop	{r4, pc}
 800e64c:	2800      	cmp	r0, #0
 800e64e:	d1f3      	bne.n	800e638 <strncmp+0xa>
 800e650:	e7fa      	b.n	800e648 <strncmp+0x1a>
 800e652:	4610      	mov	r0, r2
 800e654:	e7f9      	b.n	800e64a <strncmp+0x1c>
	...

0800e658 <_strtoul_l.constprop.0>:
 800e658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e65c:	4f36      	ldr	r7, [pc, #216]	; (800e738 <_strtoul_l.constprop.0+0xe0>)
 800e65e:	4686      	mov	lr, r0
 800e660:	460d      	mov	r5, r1
 800e662:	4628      	mov	r0, r5
 800e664:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e668:	5de6      	ldrb	r6, [r4, r7]
 800e66a:	f016 0608 	ands.w	r6, r6, #8
 800e66e:	d1f8      	bne.n	800e662 <_strtoul_l.constprop.0+0xa>
 800e670:	2c2d      	cmp	r4, #45	; 0x2d
 800e672:	d12f      	bne.n	800e6d4 <_strtoul_l.constprop.0+0x7c>
 800e674:	782c      	ldrb	r4, [r5, #0]
 800e676:	2601      	movs	r6, #1
 800e678:	1c85      	adds	r5, r0, #2
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d057      	beq.n	800e72e <_strtoul_l.constprop.0+0xd6>
 800e67e:	2b10      	cmp	r3, #16
 800e680:	d109      	bne.n	800e696 <_strtoul_l.constprop.0+0x3e>
 800e682:	2c30      	cmp	r4, #48	; 0x30
 800e684:	d107      	bne.n	800e696 <_strtoul_l.constprop.0+0x3e>
 800e686:	7828      	ldrb	r0, [r5, #0]
 800e688:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e68c:	2858      	cmp	r0, #88	; 0x58
 800e68e:	d149      	bne.n	800e724 <_strtoul_l.constprop.0+0xcc>
 800e690:	786c      	ldrb	r4, [r5, #1]
 800e692:	2310      	movs	r3, #16
 800e694:	3502      	adds	r5, #2
 800e696:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800e69a:	2700      	movs	r7, #0
 800e69c:	fbb8 f8f3 	udiv	r8, r8, r3
 800e6a0:	fb03 f908 	mul.w	r9, r3, r8
 800e6a4:	ea6f 0909 	mvn.w	r9, r9
 800e6a8:	4638      	mov	r0, r7
 800e6aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e6ae:	f1bc 0f09 	cmp.w	ip, #9
 800e6b2:	d814      	bhi.n	800e6de <_strtoul_l.constprop.0+0x86>
 800e6b4:	4664      	mov	r4, ip
 800e6b6:	42a3      	cmp	r3, r4
 800e6b8:	dd22      	ble.n	800e700 <_strtoul_l.constprop.0+0xa8>
 800e6ba:	2f00      	cmp	r7, #0
 800e6bc:	db1d      	blt.n	800e6fa <_strtoul_l.constprop.0+0xa2>
 800e6be:	4580      	cmp	r8, r0
 800e6c0:	d31b      	bcc.n	800e6fa <_strtoul_l.constprop.0+0xa2>
 800e6c2:	d101      	bne.n	800e6c8 <_strtoul_l.constprop.0+0x70>
 800e6c4:	45a1      	cmp	r9, r4
 800e6c6:	db18      	blt.n	800e6fa <_strtoul_l.constprop.0+0xa2>
 800e6c8:	fb00 4003 	mla	r0, r0, r3, r4
 800e6cc:	2701      	movs	r7, #1
 800e6ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e6d2:	e7ea      	b.n	800e6aa <_strtoul_l.constprop.0+0x52>
 800e6d4:	2c2b      	cmp	r4, #43	; 0x2b
 800e6d6:	bf04      	itt	eq
 800e6d8:	782c      	ldrbeq	r4, [r5, #0]
 800e6da:	1c85      	addeq	r5, r0, #2
 800e6dc:	e7cd      	b.n	800e67a <_strtoul_l.constprop.0+0x22>
 800e6de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e6e2:	f1bc 0f19 	cmp.w	ip, #25
 800e6e6:	d801      	bhi.n	800e6ec <_strtoul_l.constprop.0+0x94>
 800e6e8:	3c37      	subs	r4, #55	; 0x37
 800e6ea:	e7e4      	b.n	800e6b6 <_strtoul_l.constprop.0+0x5e>
 800e6ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e6f0:	f1bc 0f19 	cmp.w	ip, #25
 800e6f4:	d804      	bhi.n	800e700 <_strtoul_l.constprop.0+0xa8>
 800e6f6:	3c57      	subs	r4, #87	; 0x57
 800e6f8:	e7dd      	b.n	800e6b6 <_strtoul_l.constprop.0+0x5e>
 800e6fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e6fe:	e7e6      	b.n	800e6ce <_strtoul_l.constprop.0+0x76>
 800e700:	2f00      	cmp	r7, #0
 800e702:	da07      	bge.n	800e714 <_strtoul_l.constprop.0+0xbc>
 800e704:	2322      	movs	r3, #34	; 0x22
 800e706:	f8ce 3000 	str.w	r3, [lr]
 800e70a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e70e:	b932      	cbnz	r2, 800e71e <_strtoul_l.constprop.0+0xc6>
 800e710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e714:	b106      	cbz	r6, 800e718 <_strtoul_l.constprop.0+0xc0>
 800e716:	4240      	negs	r0, r0
 800e718:	2a00      	cmp	r2, #0
 800e71a:	d0f9      	beq.n	800e710 <_strtoul_l.constprop.0+0xb8>
 800e71c:	b107      	cbz	r7, 800e720 <_strtoul_l.constprop.0+0xc8>
 800e71e:	1e69      	subs	r1, r5, #1
 800e720:	6011      	str	r1, [r2, #0]
 800e722:	e7f5      	b.n	800e710 <_strtoul_l.constprop.0+0xb8>
 800e724:	2430      	movs	r4, #48	; 0x30
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1b5      	bne.n	800e696 <_strtoul_l.constprop.0+0x3e>
 800e72a:	2308      	movs	r3, #8
 800e72c:	e7b3      	b.n	800e696 <_strtoul_l.constprop.0+0x3e>
 800e72e:	2c30      	cmp	r4, #48	; 0x30
 800e730:	d0a9      	beq.n	800e686 <_strtoul_l.constprop.0+0x2e>
 800e732:	230a      	movs	r3, #10
 800e734:	e7af      	b.n	800e696 <_strtoul_l.constprop.0+0x3e>
 800e736:	bf00      	nop
 800e738:	0800f879 	.word	0x0800f879

0800e73c <_strtoul_r>:
 800e73c:	f7ff bf8c 	b.w	800e658 <_strtoul_l.constprop.0>

0800e740 <__submore>:
 800e740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e744:	460c      	mov	r4, r1
 800e746:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e74c:	4299      	cmp	r1, r3
 800e74e:	d11d      	bne.n	800e78c <__submore+0x4c>
 800e750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e754:	f7fe ffb2 	bl	800d6bc <_malloc_r>
 800e758:	b918      	cbnz	r0, 800e762 <__submore+0x22>
 800e75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e766:	63a3      	str	r3, [r4, #56]	; 0x38
 800e768:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e76c:	6360      	str	r0, [r4, #52]	; 0x34
 800e76e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e772:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e776:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800e77a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e77e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800e782:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e786:	6020      	str	r0, [r4, #0]
 800e788:	2000      	movs	r0, #0
 800e78a:	e7e8      	b.n	800e75e <__submore+0x1e>
 800e78c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e78e:	0077      	lsls	r7, r6, #1
 800e790:	463a      	mov	r2, r7
 800e792:	f000 fa21 	bl	800ebd8 <_realloc_r>
 800e796:	4605      	mov	r5, r0
 800e798:	2800      	cmp	r0, #0
 800e79a:	d0de      	beq.n	800e75a <__submore+0x1a>
 800e79c:	eb00 0806 	add.w	r8, r0, r6
 800e7a0:	4601      	mov	r1, r0
 800e7a2:	4632      	mov	r2, r6
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	f7fa ff7f 	bl	80096a8 <memcpy>
 800e7aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e7ae:	f8c4 8000 	str.w	r8, [r4]
 800e7b2:	e7e9      	b.n	800e788 <__submore+0x48>

0800e7b4 <_ungetc_r>:
 800e7b4:	b570      	push	{r4, r5, r6, lr}
 800e7b6:	4614      	mov	r4, r2
 800e7b8:	1c4a      	adds	r2, r1, #1
 800e7ba:	4606      	mov	r6, r0
 800e7bc:	460d      	mov	r5, r1
 800e7be:	d103      	bne.n	800e7c8 <_ungetc_r+0x14>
 800e7c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e7c4:	4628      	mov	r0, r5
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	b118      	cbz	r0, 800e7d2 <_ungetc_r+0x1e>
 800e7ca:	6983      	ldr	r3, [r0, #24]
 800e7cc:	b90b      	cbnz	r3, 800e7d2 <_ungetc_r+0x1e>
 800e7ce:	f7fd fd81 	bl	800c2d4 <__sinit>
 800e7d2:	4b41      	ldr	r3, [pc, #260]	; (800e8d8 <_ungetc_r+0x124>)
 800e7d4:	429c      	cmp	r4, r3
 800e7d6:	d11d      	bne.n	800e814 <_ungetc_r+0x60>
 800e7d8:	6874      	ldr	r4, [r6, #4]
 800e7da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7dc:	07db      	lsls	r3, r3, #31
 800e7de:	d405      	bmi.n	800e7ec <_ungetc_r+0x38>
 800e7e0:	89a3      	ldrh	r3, [r4, #12]
 800e7e2:	0598      	lsls	r0, r3, #22
 800e7e4:	d402      	bmi.n	800e7ec <_ungetc_r+0x38>
 800e7e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7e8:	f7fe f9a3 	bl	800cb32 <__retarget_lock_acquire_recursive>
 800e7ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7f0:	f023 0320 	bic.w	r3, r3, #32
 800e7f4:	0759      	lsls	r1, r3, #29
 800e7f6:	81a3      	strh	r3, [r4, #12]
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	d42d      	bmi.n	800e858 <_ungetc_r+0xa4>
 800e7fc:	06d3      	lsls	r3, r2, #27
 800e7fe:	d413      	bmi.n	800e828 <_ungetc_r+0x74>
 800e800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e802:	07dd      	lsls	r5, r3, #31
 800e804:	d4dc      	bmi.n	800e7c0 <_ungetc_r+0xc>
 800e806:	f412 7f00 	tst.w	r2, #512	; 0x200
 800e80a:	d1d9      	bne.n	800e7c0 <_ungetc_r+0xc>
 800e80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e80e:	f7fe f991 	bl	800cb34 <__retarget_lock_release_recursive>
 800e812:	e7d5      	b.n	800e7c0 <_ungetc_r+0xc>
 800e814:	4b31      	ldr	r3, [pc, #196]	; (800e8dc <_ungetc_r+0x128>)
 800e816:	429c      	cmp	r4, r3
 800e818:	d101      	bne.n	800e81e <_ungetc_r+0x6a>
 800e81a:	68b4      	ldr	r4, [r6, #8]
 800e81c:	e7dd      	b.n	800e7da <_ungetc_r+0x26>
 800e81e:	4b30      	ldr	r3, [pc, #192]	; (800e8e0 <_ungetc_r+0x12c>)
 800e820:	429c      	cmp	r4, r3
 800e822:	bf08      	it	eq
 800e824:	68f4      	ldreq	r4, [r6, #12]
 800e826:	e7d8      	b.n	800e7da <_ungetc_r+0x26>
 800e828:	0710      	lsls	r0, r2, #28
 800e82a:	d511      	bpl.n	800e850 <_ungetc_r+0x9c>
 800e82c:	4621      	mov	r1, r4
 800e82e:	4630      	mov	r0, r6
 800e830:	f7fd fcaa 	bl	800c188 <_fflush_r>
 800e834:	b130      	cbz	r0, 800e844 <_ungetc_r+0x90>
 800e836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e838:	07d9      	lsls	r1, r3, #31
 800e83a:	d4c1      	bmi.n	800e7c0 <_ungetc_r+0xc>
 800e83c:	89a3      	ldrh	r3, [r4, #12]
 800e83e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e842:	e7e2      	b.n	800e80a <_ungetc_r+0x56>
 800e844:	89a3      	ldrh	r3, [r4, #12]
 800e846:	60a0      	str	r0, [r4, #8]
 800e848:	f023 0308 	bic.w	r3, r3, #8
 800e84c:	81a3      	strh	r3, [r4, #12]
 800e84e:	61a0      	str	r0, [r4, #24]
 800e850:	89a3      	ldrh	r3, [r4, #12]
 800e852:	f043 0304 	orr.w	r3, r3, #4
 800e856:	81a3      	strh	r3, [r4, #12]
 800e858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e85a:	6862      	ldr	r2, [r4, #4]
 800e85c:	b2ed      	uxtb	r5, r5
 800e85e:	b1d3      	cbz	r3, 800e896 <_ungetc_r+0xe2>
 800e860:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e862:	4293      	cmp	r3, r2
 800e864:	dc05      	bgt.n	800e872 <_ungetc_r+0xbe>
 800e866:	4621      	mov	r1, r4
 800e868:	4630      	mov	r0, r6
 800e86a:	f7ff ff69 	bl	800e740 <__submore>
 800e86e:	2800      	cmp	r0, #0
 800e870:	d1e1      	bne.n	800e836 <_ungetc_r+0x82>
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	1e5a      	subs	r2, r3, #1
 800e876:	6022      	str	r2, [r4, #0]
 800e878:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e87c:	6863      	ldr	r3, [r4, #4]
 800e87e:	3301      	adds	r3, #1
 800e880:	6063      	str	r3, [r4, #4]
 800e882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e884:	07da      	lsls	r2, r3, #31
 800e886:	d49d      	bmi.n	800e7c4 <_ungetc_r+0x10>
 800e888:	89a3      	ldrh	r3, [r4, #12]
 800e88a:	059b      	lsls	r3, r3, #22
 800e88c:	d49a      	bmi.n	800e7c4 <_ungetc_r+0x10>
 800e88e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e890:	f7fe f950 	bl	800cb34 <__retarget_lock_release_recursive>
 800e894:	e796      	b.n	800e7c4 <_ungetc_r+0x10>
 800e896:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e898:	6920      	ldr	r0, [r4, #16]
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	f001 0101 	and.w	r1, r1, #1
 800e8a0:	b160      	cbz	r0, 800e8bc <_ungetc_r+0x108>
 800e8a2:	4298      	cmp	r0, r3
 800e8a4:	d20a      	bcs.n	800e8bc <_ungetc_r+0x108>
 800e8a6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800e8aa:	42a8      	cmp	r0, r5
 800e8ac:	d106      	bne.n	800e8bc <_ungetc_r+0x108>
 800e8ae:	3b01      	subs	r3, #1
 800e8b0:	3201      	adds	r2, #1
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	6062      	str	r2, [r4, #4]
 800e8b6:	2900      	cmp	r1, #0
 800e8b8:	d184      	bne.n	800e7c4 <_ungetc_r+0x10>
 800e8ba:	e7e5      	b.n	800e888 <_ungetc_r+0xd4>
 800e8bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e8c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800e8c6:	2303      	movs	r3, #3
 800e8c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800e8ca:	4623      	mov	r3, r4
 800e8cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	6063      	str	r3, [r4, #4]
 800e8d6:	e7ee      	b.n	800e8b6 <_ungetc_r+0x102>
 800e8d8:	0800fa2c 	.word	0x0800fa2c
 800e8dc:	0800fa4c 	.word	0x0800fa4c
 800e8e0:	0800fa0c 	.word	0x0800fa0c

0800e8e4 <__swbuf_r>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	460e      	mov	r6, r1
 800e8e8:	4614      	mov	r4, r2
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	b118      	cbz	r0, 800e8f6 <__swbuf_r+0x12>
 800e8ee:	6983      	ldr	r3, [r0, #24]
 800e8f0:	b90b      	cbnz	r3, 800e8f6 <__swbuf_r+0x12>
 800e8f2:	f7fd fcef 	bl	800c2d4 <__sinit>
 800e8f6:	4b21      	ldr	r3, [pc, #132]	; (800e97c <__swbuf_r+0x98>)
 800e8f8:	429c      	cmp	r4, r3
 800e8fa:	d12b      	bne.n	800e954 <__swbuf_r+0x70>
 800e8fc:	686c      	ldr	r4, [r5, #4]
 800e8fe:	69a3      	ldr	r3, [r4, #24]
 800e900:	60a3      	str	r3, [r4, #8]
 800e902:	89a3      	ldrh	r3, [r4, #12]
 800e904:	071a      	lsls	r2, r3, #28
 800e906:	d52f      	bpl.n	800e968 <__swbuf_r+0x84>
 800e908:	6923      	ldr	r3, [r4, #16]
 800e90a:	b36b      	cbz	r3, 800e968 <__swbuf_r+0x84>
 800e90c:	6923      	ldr	r3, [r4, #16]
 800e90e:	6820      	ldr	r0, [r4, #0]
 800e910:	1ac0      	subs	r0, r0, r3
 800e912:	6963      	ldr	r3, [r4, #20]
 800e914:	b2f6      	uxtb	r6, r6
 800e916:	4283      	cmp	r3, r0
 800e918:	4637      	mov	r7, r6
 800e91a:	dc04      	bgt.n	800e926 <__swbuf_r+0x42>
 800e91c:	4621      	mov	r1, r4
 800e91e:	4628      	mov	r0, r5
 800e920:	f7fd fc32 	bl	800c188 <_fflush_r>
 800e924:	bb30      	cbnz	r0, 800e974 <__swbuf_r+0x90>
 800e926:	68a3      	ldr	r3, [r4, #8]
 800e928:	3b01      	subs	r3, #1
 800e92a:	60a3      	str	r3, [r4, #8]
 800e92c:	6823      	ldr	r3, [r4, #0]
 800e92e:	1c5a      	adds	r2, r3, #1
 800e930:	6022      	str	r2, [r4, #0]
 800e932:	701e      	strb	r6, [r3, #0]
 800e934:	6963      	ldr	r3, [r4, #20]
 800e936:	3001      	adds	r0, #1
 800e938:	4283      	cmp	r3, r0
 800e93a:	d004      	beq.n	800e946 <__swbuf_r+0x62>
 800e93c:	89a3      	ldrh	r3, [r4, #12]
 800e93e:	07db      	lsls	r3, r3, #31
 800e940:	d506      	bpl.n	800e950 <__swbuf_r+0x6c>
 800e942:	2e0a      	cmp	r6, #10
 800e944:	d104      	bne.n	800e950 <__swbuf_r+0x6c>
 800e946:	4621      	mov	r1, r4
 800e948:	4628      	mov	r0, r5
 800e94a:	f7fd fc1d 	bl	800c188 <_fflush_r>
 800e94e:	b988      	cbnz	r0, 800e974 <__swbuf_r+0x90>
 800e950:	4638      	mov	r0, r7
 800e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e954:	4b0a      	ldr	r3, [pc, #40]	; (800e980 <__swbuf_r+0x9c>)
 800e956:	429c      	cmp	r4, r3
 800e958:	d101      	bne.n	800e95e <__swbuf_r+0x7a>
 800e95a:	68ac      	ldr	r4, [r5, #8]
 800e95c:	e7cf      	b.n	800e8fe <__swbuf_r+0x1a>
 800e95e:	4b09      	ldr	r3, [pc, #36]	; (800e984 <__swbuf_r+0xa0>)
 800e960:	429c      	cmp	r4, r3
 800e962:	bf08      	it	eq
 800e964:	68ec      	ldreq	r4, [r5, #12]
 800e966:	e7ca      	b.n	800e8fe <__swbuf_r+0x1a>
 800e968:	4621      	mov	r1, r4
 800e96a:	4628      	mov	r0, r5
 800e96c:	f000 f82c 	bl	800e9c8 <__swsetup_r>
 800e970:	2800      	cmp	r0, #0
 800e972:	d0cb      	beq.n	800e90c <__swbuf_r+0x28>
 800e974:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e978:	e7ea      	b.n	800e950 <__swbuf_r+0x6c>
 800e97a:	bf00      	nop
 800e97c:	0800fa2c 	.word	0x0800fa2c
 800e980:	0800fa4c 	.word	0x0800fa4c
 800e984:	0800fa0c 	.word	0x0800fa0c

0800e988 <__ascii_wctomb>:
 800e988:	b149      	cbz	r1, 800e99e <__ascii_wctomb+0x16>
 800e98a:	2aff      	cmp	r2, #255	; 0xff
 800e98c:	bf85      	ittet	hi
 800e98e:	238a      	movhi	r3, #138	; 0x8a
 800e990:	6003      	strhi	r3, [r0, #0]
 800e992:	700a      	strbls	r2, [r1, #0]
 800e994:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e998:	bf98      	it	ls
 800e99a:	2001      	movls	r0, #1
 800e99c:	4770      	bx	lr
 800e99e:	4608      	mov	r0, r1
 800e9a0:	4770      	bx	lr
	...

0800e9a4 <_write_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4d07      	ldr	r5, [pc, #28]	; (800e9c4 <_write_r+0x20>)
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	4608      	mov	r0, r1
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	602a      	str	r2, [r5, #0]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	f7fa fd45 	bl	8009442 <_write>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_write_r+0x1e>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_write_r+0x1e>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	2000059c 	.word	0x2000059c

0800e9c8 <__swsetup_r>:
 800e9c8:	4b32      	ldr	r3, [pc, #200]	; (800ea94 <__swsetup_r+0xcc>)
 800e9ca:	b570      	push	{r4, r5, r6, lr}
 800e9cc:	681d      	ldr	r5, [r3, #0]
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	b125      	cbz	r5, 800e9de <__swsetup_r+0x16>
 800e9d4:	69ab      	ldr	r3, [r5, #24]
 800e9d6:	b913      	cbnz	r3, 800e9de <__swsetup_r+0x16>
 800e9d8:	4628      	mov	r0, r5
 800e9da:	f7fd fc7b 	bl	800c2d4 <__sinit>
 800e9de:	4b2e      	ldr	r3, [pc, #184]	; (800ea98 <__swsetup_r+0xd0>)
 800e9e0:	429c      	cmp	r4, r3
 800e9e2:	d10f      	bne.n	800ea04 <__swsetup_r+0x3c>
 800e9e4:	686c      	ldr	r4, [r5, #4]
 800e9e6:	89a3      	ldrh	r3, [r4, #12]
 800e9e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9ec:	0719      	lsls	r1, r3, #28
 800e9ee:	d42c      	bmi.n	800ea4a <__swsetup_r+0x82>
 800e9f0:	06dd      	lsls	r5, r3, #27
 800e9f2:	d411      	bmi.n	800ea18 <__swsetup_r+0x50>
 800e9f4:	2309      	movs	r3, #9
 800e9f6:	6033      	str	r3, [r6, #0]
 800e9f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9fc:	81a3      	strh	r3, [r4, #12]
 800e9fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea02:	e03e      	b.n	800ea82 <__swsetup_r+0xba>
 800ea04:	4b25      	ldr	r3, [pc, #148]	; (800ea9c <__swsetup_r+0xd4>)
 800ea06:	429c      	cmp	r4, r3
 800ea08:	d101      	bne.n	800ea0e <__swsetup_r+0x46>
 800ea0a:	68ac      	ldr	r4, [r5, #8]
 800ea0c:	e7eb      	b.n	800e9e6 <__swsetup_r+0x1e>
 800ea0e:	4b24      	ldr	r3, [pc, #144]	; (800eaa0 <__swsetup_r+0xd8>)
 800ea10:	429c      	cmp	r4, r3
 800ea12:	bf08      	it	eq
 800ea14:	68ec      	ldreq	r4, [r5, #12]
 800ea16:	e7e6      	b.n	800e9e6 <__swsetup_r+0x1e>
 800ea18:	0758      	lsls	r0, r3, #29
 800ea1a:	d512      	bpl.n	800ea42 <__swsetup_r+0x7a>
 800ea1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea1e:	b141      	cbz	r1, 800ea32 <__swsetup_r+0x6a>
 800ea20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea24:	4299      	cmp	r1, r3
 800ea26:	d002      	beq.n	800ea2e <__swsetup_r+0x66>
 800ea28:	4630      	mov	r0, r6
 800ea2a:	f7fe fddb 	bl	800d5e4 <_free_r>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	6363      	str	r3, [r4, #52]	; 0x34
 800ea32:	89a3      	ldrh	r3, [r4, #12]
 800ea34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea38:	81a3      	strh	r3, [r4, #12]
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	6063      	str	r3, [r4, #4]
 800ea3e:	6923      	ldr	r3, [r4, #16]
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	89a3      	ldrh	r3, [r4, #12]
 800ea44:	f043 0308 	orr.w	r3, r3, #8
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	6923      	ldr	r3, [r4, #16]
 800ea4c:	b94b      	cbnz	r3, 800ea62 <__swsetup_r+0x9a>
 800ea4e:	89a3      	ldrh	r3, [r4, #12]
 800ea50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea58:	d003      	beq.n	800ea62 <__swsetup_r+0x9a>
 800ea5a:	4621      	mov	r1, r4
 800ea5c:	4630      	mov	r0, r6
 800ea5e:	f7fe f88f 	bl	800cb80 <__smakebuf_r>
 800ea62:	89a0      	ldrh	r0, [r4, #12]
 800ea64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea68:	f010 0301 	ands.w	r3, r0, #1
 800ea6c:	d00a      	beq.n	800ea84 <__swsetup_r+0xbc>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	60a3      	str	r3, [r4, #8]
 800ea72:	6963      	ldr	r3, [r4, #20]
 800ea74:	425b      	negs	r3, r3
 800ea76:	61a3      	str	r3, [r4, #24]
 800ea78:	6923      	ldr	r3, [r4, #16]
 800ea7a:	b943      	cbnz	r3, 800ea8e <__swsetup_r+0xc6>
 800ea7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea80:	d1ba      	bne.n	800e9f8 <__swsetup_r+0x30>
 800ea82:	bd70      	pop	{r4, r5, r6, pc}
 800ea84:	0781      	lsls	r1, r0, #30
 800ea86:	bf58      	it	pl
 800ea88:	6963      	ldrpl	r3, [r4, #20]
 800ea8a:	60a3      	str	r3, [r4, #8]
 800ea8c:	e7f4      	b.n	800ea78 <__swsetup_r+0xb0>
 800ea8e:	2000      	movs	r0, #0
 800ea90:	e7f7      	b.n	800ea82 <__swsetup_r+0xba>
 800ea92:	bf00      	nop
 800ea94:	2000004c 	.word	0x2000004c
 800ea98:	0800fa2c 	.word	0x0800fa2c
 800ea9c:	0800fa4c 	.word	0x0800fa4c
 800eaa0:	0800fa0c 	.word	0x0800fa0c

0800eaa4 <__assert_func>:
 800eaa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eaa6:	4614      	mov	r4, r2
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	4b09      	ldr	r3, [pc, #36]	; (800ead0 <__assert_func+0x2c>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4605      	mov	r5, r0
 800eab0:	68d8      	ldr	r0, [r3, #12]
 800eab2:	b14c      	cbz	r4, 800eac8 <__assert_func+0x24>
 800eab4:	4b07      	ldr	r3, [pc, #28]	; (800ead4 <__assert_func+0x30>)
 800eab6:	9100      	str	r1, [sp, #0]
 800eab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eabc:	4906      	ldr	r1, [pc, #24]	; (800ead8 <__assert_func+0x34>)
 800eabe:	462b      	mov	r3, r5
 800eac0:	f000 f81e 	bl	800eb00 <fiprintf>
 800eac4:	f000 f8ca 	bl	800ec5c <abort>
 800eac8:	4b04      	ldr	r3, [pc, #16]	; (800eadc <__assert_func+0x38>)
 800eaca:	461c      	mov	r4, r3
 800eacc:	e7f3      	b.n	800eab6 <__assert_func+0x12>
 800eace:	bf00      	nop
 800ead0:	2000004c 	.word	0x2000004c
 800ead4:	0800fc70 	.word	0x0800fc70
 800ead8:	0800fc7d 	.word	0x0800fc7d
 800eadc:	0800fcab 	.word	0x0800fcab

0800eae0 <_close_r>:
 800eae0:	b538      	push	{r3, r4, r5, lr}
 800eae2:	4d06      	ldr	r5, [pc, #24]	; (800eafc <_close_r+0x1c>)
 800eae4:	2300      	movs	r3, #0
 800eae6:	4604      	mov	r4, r0
 800eae8:	4608      	mov	r0, r1
 800eaea:	602b      	str	r3, [r5, #0]
 800eaec:	f7fa fcc5 	bl	800947a <_close>
 800eaf0:	1c43      	adds	r3, r0, #1
 800eaf2:	d102      	bne.n	800eafa <_close_r+0x1a>
 800eaf4:	682b      	ldr	r3, [r5, #0]
 800eaf6:	b103      	cbz	r3, 800eafa <_close_r+0x1a>
 800eaf8:	6023      	str	r3, [r4, #0]
 800eafa:	bd38      	pop	{r3, r4, r5, pc}
 800eafc:	2000059c 	.word	0x2000059c

0800eb00 <fiprintf>:
 800eb00:	b40e      	push	{r1, r2, r3}
 800eb02:	b503      	push	{r0, r1, lr}
 800eb04:	4601      	mov	r1, r0
 800eb06:	ab03      	add	r3, sp, #12
 800eb08:	4805      	ldr	r0, [pc, #20]	; (800eb20 <fiprintf+0x20>)
 800eb0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb0e:	6800      	ldr	r0, [r0, #0]
 800eb10:	9301      	str	r3, [sp, #4]
 800eb12:	f7fe ffcd 	bl	800dab0 <_vfiprintf_r>
 800eb16:	b002      	add	sp, #8
 800eb18:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb1c:	b003      	add	sp, #12
 800eb1e:	4770      	bx	lr
 800eb20:	2000004c 	.word	0x2000004c

0800eb24 <_fstat_r>:
 800eb24:	b538      	push	{r3, r4, r5, lr}
 800eb26:	4d07      	ldr	r5, [pc, #28]	; (800eb44 <_fstat_r+0x20>)
 800eb28:	2300      	movs	r3, #0
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	4608      	mov	r0, r1
 800eb2e:	4611      	mov	r1, r2
 800eb30:	602b      	str	r3, [r5, #0]
 800eb32:	f7fa fcae 	bl	8009492 <_fstat>
 800eb36:	1c43      	adds	r3, r0, #1
 800eb38:	d102      	bne.n	800eb40 <_fstat_r+0x1c>
 800eb3a:	682b      	ldr	r3, [r5, #0]
 800eb3c:	b103      	cbz	r3, 800eb40 <_fstat_r+0x1c>
 800eb3e:	6023      	str	r3, [r4, #0]
 800eb40:	bd38      	pop	{r3, r4, r5, pc}
 800eb42:	bf00      	nop
 800eb44:	2000059c 	.word	0x2000059c

0800eb48 <_isatty_r>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	4d06      	ldr	r5, [pc, #24]	; (800eb64 <_isatty_r+0x1c>)
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	4604      	mov	r4, r0
 800eb50:	4608      	mov	r0, r1
 800eb52:	602b      	str	r3, [r5, #0]
 800eb54:	f7fa fcad 	bl	80094b2 <_isatty>
 800eb58:	1c43      	adds	r3, r0, #1
 800eb5a:	d102      	bne.n	800eb62 <_isatty_r+0x1a>
 800eb5c:	682b      	ldr	r3, [r5, #0]
 800eb5e:	b103      	cbz	r3, 800eb62 <_isatty_r+0x1a>
 800eb60:	6023      	str	r3, [r4, #0]
 800eb62:	bd38      	pop	{r3, r4, r5, pc}
 800eb64:	2000059c 	.word	0x2000059c

0800eb68 <_lseek_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4d07      	ldr	r5, [pc, #28]	; (800eb88 <_lseek_r+0x20>)
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	4608      	mov	r0, r1
 800eb70:	4611      	mov	r1, r2
 800eb72:	2200      	movs	r2, #0
 800eb74:	602a      	str	r2, [r5, #0]
 800eb76:	461a      	mov	r2, r3
 800eb78:	f7fa fca6 	bl	80094c8 <_lseek>
 800eb7c:	1c43      	adds	r3, r0, #1
 800eb7e:	d102      	bne.n	800eb86 <_lseek_r+0x1e>
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	b103      	cbz	r3, 800eb86 <_lseek_r+0x1e>
 800eb84:	6023      	str	r3, [r4, #0]
 800eb86:	bd38      	pop	{r3, r4, r5, pc}
 800eb88:	2000059c 	.word	0x2000059c

0800eb8c <memmove>:
 800eb8c:	4288      	cmp	r0, r1
 800eb8e:	b510      	push	{r4, lr}
 800eb90:	eb01 0402 	add.w	r4, r1, r2
 800eb94:	d902      	bls.n	800eb9c <memmove+0x10>
 800eb96:	4284      	cmp	r4, r0
 800eb98:	4623      	mov	r3, r4
 800eb9a:	d807      	bhi.n	800ebac <memmove+0x20>
 800eb9c:	1e43      	subs	r3, r0, #1
 800eb9e:	42a1      	cmp	r1, r4
 800eba0:	d008      	beq.n	800ebb4 <memmove+0x28>
 800eba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebaa:	e7f8      	b.n	800eb9e <memmove+0x12>
 800ebac:	4402      	add	r2, r0
 800ebae:	4601      	mov	r1, r0
 800ebb0:	428a      	cmp	r2, r1
 800ebb2:	d100      	bne.n	800ebb6 <memmove+0x2a>
 800ebb4:	bd10      	pop	{r4, pc}
 800ebb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ebba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ebbe:	e7f7      	b.n	800ebb0 <memmove+0x24>

0800ebc0 <__malloc_lock>:
 800ebc0:	4801      	ldr	r0, [pc, #4]	; (800ebc8 <__malloc_lock+0x8>)
 800ebc2:	f7fd bfb6 	b.w	800cb32 <__retarget_lock_acquire_recursive>
 800ebc6:	bf00      	nop
 800ebc8:	20000590 	.word	0x20000590

0800ebcc <__malloc_unlock>:
 800ebcc:	4801      	ldr	r0, [pc, #4]	; (800ebd4 <__malloc_unlock+0x8>)
 800ebce:	f7fd bfb1 	b.w	800cb34 <__retarget_lock_release_recursive>
 800ebd2:	bf00      	nop
 800ebd4:	20000590 	.word	0x20000590

0800ebd8 <_realloc_r>:
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	4680      	mov	r8, r0
 800ebde:	4614      	mov	r4, r2
 800ebe0:	460e      	mov	r6, r1
 800ebe2:	b921      	cbnz	r1, 800ebee <_realloc_r+0x16>
 800ebe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe8:	4611      	mov	r1, r2
 800ebea:	f7fe bd67 	b.w	800d6bc <_malloc_r>
 800ebee:	b92a      	cbnz	r2, 800ebfc <_realloc_r+0x24>
 800ebf0:	f7fe fcf8 	bl	800d5e4 <_free_r>
 800ebf4:	4625      	mov	r5, r4
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebfc:	f000 f835 	bl	800ec6a <_malloc_usable_size_r>
 800ec00:	4284      	cmp	r4, r0
 800ec02:	4607      	mov	r7, r0
 800ec04:	d802      	bhi.n	800ec0c <_realloc_r+0x34>
 800ec06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec0a:	d812      	bhi.n	800ec32 <_realloc_r+0x5a>
 800ec0c:	4621      	mov	r1, r4
 800ec0e:	4640      	mov	r0, r8
 800ec10:	f7fe fd54 	bl	800d6bc <_malloc_r>
 800ec14:	4605      	mov	r5, r0
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d0ed      	beq.n	800ebf6 <_realloc_r+0x1e>
 800ec1a:	42bc      	cmp	r4, r7
 800ec1c:	4622      	mov	r2, r4
 800ec1e:	4631      	mov	r1, r6
 800ec20:	bf28      	it	cs
 800ec22:	463a      	movcs	r2, r7
 800ec24:	f7fa fd40 	bl	80096a8 <memcpy>
 800ec28:	4631      	mov	r1, r6
 800ec2a:	4640      	mov	r0, r8
 800ec2c:	f7fe fcda 	bl	800d5e4 <_free_r>
 800ec30:	e7e1      	b.n	800ebf6 <_realloc_r+0x1e>
 800ec32:	4635      	mov	r5, r6
 800ec34:	e7df      	b.n	800ebf6 <_realloc_r+0x1e>
	...

0800ec38 <_read_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d07      	ldr	r5, [pc, #28]	; (800ec58 <_read_r+0x20>)
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	4608      	mov	r0, r1
 800ec40:	4611      	mov	r1, r2
 800ec42:	2200      	movs	r2, #0
 800ec44:	602a      	str	r2, [r5, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	f7fa fbde 	bl	8009408 <_read>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_read_r+0x1e>
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_read_r+0x1e>
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	2000059c 	.word	0x2000059c

0800ec5c <abort>:
 800ec5c:	b508      	push	{r3, lr}
 800ec5e:	2006      	movs	r0, #6
 800ec60:	f000 f834 	bl	800eccc <raise>
 800ec64:	2001      	movs	r0, #1
 800ec66:	f7fa fbc5 	bl	80093f4 <_exit>

0800ec6a <_malloc_usable_size_r>:
 800ec6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec6e:	1f18      	subs	r0, r3, #4
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	bfbc      	itt	lt
 800ec74:	580b      	ldrlt	r3, [r1, r0]
 800ec76:	18c0      	addlt	r0, r0, r3
 800ec78:	4770      	bx	lr

0800ec7a <_raise_r>:
 800ec7a:	291f      	cmp	r1, #31
 800ec7c:	b538      	push	{r3, r4, r5, lr}
 800ec7e:	4604      	mov	r4, r0
 800ec80:	460d      	mov	r5, r1
 800ec82:	d904      	bls.n	800ec8e <_raise_r+0x14>
 800ec84:	2316      	movs	r3, #22
 800ec86:	6003      	str	r3, [r0, #0]
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec8c:	bd38      	pop	{r3, r4, r5, pc}
 800ec8e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec90:	b112      	cbz	r2, 800ec98 <_raise_r+0x1e>
 800ec92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec96:	b94b      	cbnz	r3, 800ecac <_raise_r+0x32>
 800ec98:	4620      	mov	r0, r4
 800ec9a:	f000 f831 	bl	800ed00 <_getpid_r>
 800ec9e:	462a      	mov	r2, r5
 800eca0:	4601      	mov	r1, r0
 800eca2:	4620      	mov	r0, r4
 800eca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eca8:	f000 b818 	b.w	800ecdc <_kill_r>
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d00a      	beq.n	800ecc6 <_raise_r+0x4c>
 800ecb0:	1c59      	adds	r1, r3, #1
 800ecb2:	d103      	bne.n	800ecbc <_raise_r+0x42>
 800ecb4:	2316      	movs	r3, #22
 800ecb6:	6003      	str	r3, [r0, #0]
 800ecb8:	2001      	movs	r0, #1
 800ecba:	e7e7      	b.n	800ec8c <_raise_r+0x12>
 800ecbc:	2400      	movs	r4, #0
 800ecbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecc2:	4628      	mov	r0, r5
 800ecc4:	4798      	blx	r3
 800ecc6:	2000      	movs	r0, #0
 800ecc8:	e7e0      	b.n	800ec8c <_raise_r+0x12>
	...

0800eccc <raise>:
 800eccc:	4b02      	ldr	r3, [pc, #8]	; (800ecd8 <raise+0xc>)
 800ecce:	4601      	mov	r1, r0
 800ecd0:	6818      	ldr	r0, [r3, #0]
 800ecd2:	f7ff bfd2 	b.w	800ec7a <_raise_r>
 800ecd6:	bf00      	nop
 800ecd8:	2000004c 	.word	0x2000004c

0800ecdc <_kill_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4d07      	ldr	r5, [pc, #28]	; (800ecfc <_kill_r+0x20>)
 800ece0:	2300      	movs	r3, #0
 800ece2:	4604      	mov	r4, r0
 800ece4:	4608      	mov	r0, r1
 800ece6:	4611      	mov	r1, r2
 800ece8:	602b      	str	r3, [r5, #0]
 800ecea:	f7fa fb73 	bl	80093d4 <_kill>
 800ecee:	1c43      	adds	r3, r0, #1
 800ecf0:	d102      	bne.n	800ecf8 <_kill_r+0x1c>
 800ecf2:	682b      	ldr	r3, [r5, #0]
 800ecf4:	b103      	cbz	r3, 800ecf8 <_kill_r+0x1c>
 800ecf6:	6023      	str	r3, [r4, #0]
 800ecf8:	bd38      	pop	{r3, r4, r5, pc}
 800ecfa:	bf00      	nop
 800ecfc:	2000059c 	.word	0x2000059c

0800ed00 <_getpid_r>:
 800ed00:	f7fa bb60 	b.w	80093c4 <_getpid>

0800ed04 <_init>:
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	bf00      	nop
 800ed08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed0a:	bc08      	pop	{r3}
 800ed0c:	469e      	mov	lr, r3
 800ed0e:	4770      	bx	lr

0800ed10 <_fini>:
 800ed10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed12:	bf00      	nop
 800ed14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed16:	bc08      	pop	{r3}
 800ed18:	469e      	mov	lr, r3
 800ed1a:	4770      	bx	lr
