
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080b4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008278  08008278  00018278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d4  080086d4  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086dc  080086dc  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080086e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000210  080088f4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080088f4  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000135c2  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002736  00000000  00000000  00033802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00035f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00036e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0ab  00000000  00000000  00037cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013678  00000000  00000000  00062d9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107910  00000000  00000000  00076413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017dd23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f94  00000000  00000000  0017dd74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000210 	.word	0x20000210
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800825c 	.word	0x0800825c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000214 	.word	0x20000214
 80001fc:	0800825c 	.word	0x0800825c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000efc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f00:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	481b      	ldr	r0, [pc, #108]	; (8000f88 <I2Cx_MspInit+0xac>)
 8000f1a:	f000 fc0b 	bl	8001734 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <I2Cx_MspInit+0xac>)
 8000f26:	f000 fc05 	bl	8001734 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f34:	6593      	str	r3, [r2, #88]	; 0x58
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f58:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	2021      	movs	r0, #33	; 0x21
 8000f60:	f000 fbb1 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f64:	2021      	movs	r0, #33	; 0x21
 8000f66:	f000 fbca 	bl	80016fe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	2022      	movs	r0, #34	; 0x22
 8000f70:	f000 fba9 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f74:	2022      	movs	r0, #34	; 0x22
 8000f76:	f000 fbc2 	bl	80016fe <HAL_NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400

08000f8c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <I2Cx_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <I2Cx_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff89 	bl	8000edc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fe80 	bl	8001cd0 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f001 fc0e 	bl	80027f4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40005800 	.word	0x40005800
 8000fe4:	00702681 	.word	0x00702681

08000fe8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	72fb      	strb	r3, [r7, #11]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	813b      	strh	r3, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b299      	uxth	r1, r3
 800100a:	88f8      	ldrh	r0, [r7, #6]
 800100c:	893a      	ldrh	r2, [r7, #8]
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 f828 	bl	8002074 <HAL_I2C_Mem_Read>
 8001024:	4603      	mov	r3, r0
 8001026:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	4619      	mov	r1, r3
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 f832 	bl	800109c <I2Cx_Error>
  }
  return status;
 8001038:	7dfb      	ldrb	r3, [r7, #23]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b08a      	sub	sp, #40	; 0x28
 8001046:	af04      	add	r7, sp, #16
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	461a      	mov	r2, r3
 8001050:	4603      	mov	r3, r0
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	460b      	mov	r3, r1
 8001056:	813b      	strh	r3, [r7, #8]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	b299      	uxth	r1, r3
 8001064:	88f8      	ldrh	r0, [r7, #6]
 8001066:	893a      	ldrh	r2, [r7, #8]
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4603      	mov	r3, r0
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 fee7 	bl	8001e4c <HAL_I2C_Mem_Write>
 800107e:	4603      	mov	r3, r0
 8001080:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	4619      	mov	r1, r3
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f805 	bl	800109c <I2Cx_Error>
  }
  return status;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fea0 	bl	8001dee <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff6c 	bl	8000f8c <I2Cx_Init>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <SENSOR_IO_Init+0x10>)
 80010c2:	f7ff ff63 	bl	8000f8c <I2Cx_Init>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000022c 	.word	0x2000022c

080010d0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	79f9      	ldrb	r1, [r7, #7]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1d7b      	adds	r3, r7, #5
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <SENSOR_IO_Write+0x30>)
 80010f4:	f7ff ffa5 	bl	8001042 <I2Cx_WriteMultiple>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	2000022c 	.word	0x2000022c

08001104 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	b29a      	uxth	r2, r3
 800111c:	79f9      	ldrb	r1, [r7, #7]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <SENSOR_IO_Read+0x38>)
 800112c:	f7ff ff5c 	bl	8000fe8 <I2Cx_ReadMultiple>

  return read_value;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000022c 	.word	0x2000022c

08001140 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af02      	add	r7, sp, #8
 8001146:	603a      	str	r2, [r7, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	b29a      	uxth	r2, r3
 800115a:	79f9      	ldrb	r1, [r7, #7]
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <SENSOR_IO_ReadMultiple+0x38>)
 8001168:	f7ff ff3e 	bl	8000fe8 <I2Cx_ReadMultiple>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	2000022c 	.word	0x2000022c

0800117c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001186:	2300      	movs	r3, #0
 8001188:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <BSP_ACCELERO_Init+0x74>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4798      	blx	r3
 8001190:	4603      	mov	r3, r0
 8001192:	2b6a      	cmp	r3, #106	; 0x6a
 8001194:	d002      	beq.n	800119c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e024      	b.n	80011e6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <BSP_ACCELERO_Init+0x78>)
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <BSP_ACCELERO_Init+0x74>)
 80011a0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80011a2:	2330      	movs	r3, #48	; 0x30
 80011a4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80011aa:	2300      	movs	r3, #0
 80011ac:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80011ba:	797a      	ldrb	r2, [r7, #5]
 80011bc:	7abb      	ldrb	r3, [r7, #10]
 80011be:	4313      	orrs	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80011c4:	7a3b      	ldrb	r3, [r7, #8]
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <BSP_ACCELERO_Init+0x78>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	89ba      	ldrh	r2, [r7, #12]
 80011e2:	4610      	mov	r0, r2
 80011e4:	4798      	blx	r3
  }  

  return ret;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000280 	.word	0x20000280

080011f8 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001206:	2110      	movs	r1, #16
 8001208:	20d4      	movs	r0, #212	; 0xd4
 800120a:	f7ff ff7b 	bl	8001104 <SENSOR_IO_Read>
 800120e:	4603      	mov	r3, r0
 8001210:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800121e:	7bba      	ldrb	r2, [r7, #14]
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	4313      	orrs	r3, r2
 8001224:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	461a      	mov	r2, r3
 800122a:	2110      	movs	r1, #16
 800122c:	20d4      	movs	r0, #212	; 0xd4
 800122e:	f7ff ff4f 	bl	80010d0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001232:	2112      	movs	r1, #18
 8001234:	20d4      	movs	r0, #212	; 0xd4
 8001236:	f7ff ff65 	bl	8001104 <SENSOR_IO_Read>
 800123a:	4603      	mov	r3, r0
 800123c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	b29b      	uxth	r3, r3
 8001244:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001246:	7bbb      	ldrb	r3, [r7, #14]
 8001248:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800124c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800124e:	7bba      	ldrb	r2, [r7, #14]
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	4313      	orrs	r3, r2
 8001254:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001256:	7bbb      	ldrb	r3, [r7, #14]
 8001258:	461a      	mov	r2, r3
 800125a:	2112      	movs	r1, #18
 800125c:	20d4      	movs	r0, #212	; 0xd4
 800125e:	f7ff ff37 	bl	80010d0 <SENSOR_IO_Write>
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001270:	2300      	movs	r3, #0
 8001272:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001274:	2110      	movs	r1, #16
 8001276:	20d4      	movs	r0, #212	; 0xd4
 8001278:	f7ff ff44 	bl	8001104 <SENSOR_IO_Read>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	461a      	mov	r2, r3
 800128c:	2110      	movs	r1, #16
 800128e:	20d4      	movs	r0, #212	; 0xd4
 8001290:	f7ff ff1e 	bl	80010d0 <SENSOR_IO_Write>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80012a0:	f7ff ff0c 	bl	80010bc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80012a4:	210f      	movs	r1, #15
 80012a6:	20d4      	movs	r0, #212	; 0xd4
 80012a8:	f7ff ff2c 	bl	8001104 <SENSOR_IO_Read>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	4603      	mov	r3, r0
 80012ba:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80012c0:	2115      	movs	r1, #21
 80012c2:	20d4      	movs	r0, #212	; 0xd4
 80012c4:	f7ff ff1e 	bl	8001104 <SENSOR_IO_Read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	f023 0310 	bic.w	r3, r3, #16
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	461a      	mov	r2, r3
 80012e6:	2115      	movs	r1, #21
 80012e8:	20d4      	movs	r0, #212	; 0xd4
 80012ea:	f7ff fef1 	bl	80010d0 <SENSOR_IO_Write>
}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001300:	2300      	movs	r3, #0
 8001302:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800130e:	2110      	movs	r1, #16
 8001310:	20d4      	movs	r0, #212	; 0xd4
 8001312:	f7ff fef7 	bl	8001104 <SENSOR_IO_Read>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800131a:	f107 0208 	add.w	r2, r7, #8
 800131e:	2306      	movs	r3, #6
 8001320:	2128      	movs	r1, #40	; 0x28
 8001322:	20d4      	movs	r0, #212	; 0xd4
 8001324:	f7ff ff0c 	bl	8001140 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001328:	2300      	movs	r3, #0
 800132a:	77fb      	strb	r3, [r7, #31]
 800132c:	e01c      	b.n	8001368 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800132e:	7ffb      	ldrb	r3, [r7, #31]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	3301      	adds	r3, #1
 8001334:	3320      	adds	r3, #32
 8001336:	443b      	add	r3, r7
 8001338:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800133c:	b29b      	uxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b29a      	uxth	r2, r3
 8001342:	7ffb      	ldrb	r3, [r7, #31]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	3320      	adds	r3, #32
 8001348:	443b      	add	r3, r7
 800134a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800134e:	b29b      	uxth	r3, r3
 8001350:	4413      	add	r3, r2
 8001352:	b29a      	uxth	r2, r3
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	b212      	sxth	r2, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	3320      	adds	r3, #32
 800135c:	443b      	add	r3, r7
 800135e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	3301      	adds	r3, #1
 8001366:	77fb      	strb	r3, [r7, #31]
 8001368:	7ffb      	ldrb	r3, [r7, #31]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d9df      	bls.n	800132e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800136e:	7dfb      	ldrb	r3, [r7, #23]
 8001370:	f003 030c 	and.w	r3, r3, #12
 8001374:	2b0c      	cmp	r3, #12
 8001376:	d829      	bhi.n	80013cc <LSM6DSL_AccReadXYZ+0xd4>
 8001378:	a201      	add	r2, pc, #4	; (adr r2, 8001380 <LSM6DSL_AccReadXYZ+0x88>)
 800137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137e:	bf00      	nop
 8001380:	080013b5 	.word	0x080013b5
 8001384:	080013cd 	.word	0x080013cd
 8001388:	080013cd 	.word	0x080013cd
 800138c:	080013cd 	.word	0x080013cd
 8001390:	080013c7 	.word	0x080013c7
 8001394:	080013cd 	.word	0x080013cd
 8001398:	080013cd 	.word	0x080013cd
 800139c:	080013cd 	.word	0x080013cd
 80013a0:	080013bb 	.word	0x080013bb
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	080013cd 	.word	0x080013cd
 80013ac:	080013cd 	.word	0x080013cd
 80013b0:	080013c1 	.word	0x080013c1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <LSM6DSL_AccReadXYZ+0x120>)
 80013b6:	61bb      	str	r3, [r7, #24]
    break;
 80013b8:	e008      	b.n	80013cc <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <LSM6DSL_AccReadXYZ+0x124>)
 80013bc:	61bb      	str	r3, [r7, #24]
    break;
 80013be:	e005      	b.n	80013cc <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <LSM6DSL_AccReadXYZ+0x128>)
 80013c2:	61bb      	str	r3, [r7, #24]
    break;
 80013c4:	e002      	b.n	80013cc <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <LSM6DSL_AccReadXYZ+0x12c>)
 80013c8:	61bb      	str	r3, [r7, #24]
    break;    
 80013ca:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80013cc:	2300      	movs	r3, #0
 80013ce:	77fb      	strb	r3, [r7, #31]
 80013d0:	e01a      	b.n	8001408 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80013d2:	7ffb      	ldrb	r3, [r7, #31]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	3320      	adds	r3, #32
 80013d8:	443b      	add	r3, r7
 80013da:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 2a90 	vmov	r2, s15
 80013fe:	b212      	sxth	r2, r2
 8001400:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001402:	7ffb      	ldrb	r3, [r7, #31]
 8001404:	3301      	adds	r3, #1
 8001406:	77fb      	strb	r3, [r7, #31]
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	2b02      	cmp	r3, #2
 800140c:	d9e1      	bls.n	80013d2 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800140e:	bf00      	nop
 8001410:	bf00      	nop
 8001412:	3720      	adds	r7, #32
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	3d79db23 	.word	0x3d79db23
 800141c:	3df9db23 	.word	0x3df9db23
 8001420:	3e79db23 	.word	0x3e79db23
 8001424:	3ef9db23 	.word	0x3ef9db23

08001428 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001432:	2003      	movs	r0, #3
 8001434:	f000 f93c 	bl	80016b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001438:	2000      	movs	r0, #0
 800143a:	f000 f80d 	bl	8001458 <HAL_InitTick>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	71fb      	strb	r3, [r7, #7]
 8001448:	e001      	b.n	800144e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800144a:	f003 ff4b 	bl	80052e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800144e:	79fb      	ldrb	r3, [r7, #7]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_InitTick+0x70>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_InitTick+0x6c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800147a:	fbb3 f3f1 	udiv	r3, r3, r1
 800147e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f949 	bl	800171a <HAL_SYSTICK_Config>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d809      	bhi.n	80014a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800149c:	f000 f913 	bl	80016c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_InitTick+0x74>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e007      	b.n	80014b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
 80014ac:	e004      	b.n	80014b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e001      	b.n	80014b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000038 	.word	0x20000038
 80014c8:	2000003c 	.word	0x2000003c
 80014cc:	20000034 	.word	0x20000034

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000038 	.word	0x20000038
 80014f4:	20000284 	.word	0x20000284

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000284 	.word	0x20000284

08001510 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	60d3      	str	r3, [r2, #12]
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
	...

0800166c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800167c:	d301      	bcc.n	8001682 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167e:	2301      	movs	r3, #1
 8001680:	e00f      	b.n	80016a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001682:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <SysTick_Config+0x40>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168a:	210f      	movs	r1, #15
 800168c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001690:	f7ff ff8e 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SysTick_Config+0x40>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <SysTick_Config+0x40>)
 800169c:	2207      	movs	r2, #7
 800169e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	e000e010 	.word	0xe000e010

080016b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff ff29 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b086      	sub	sp, #24
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	60b9      	str	r1, [r7, #8]
 80016d0:	607a      	str	r2, [r7, #4]
 80016d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016d8:	f7ff ff3e 	bl	8001558 <__NVIC_GetPriorityGrouping>
 80016dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	68b9      	ldr	r1, [r7, #8]
 80016e2:	6978      	ldr	r0, [r7, #20]
 80016e4:	f7ff ff8e 	bl	8001604 <NVIC_EncodePriority>
 80016e8:	4602      	mov	r2, r0
 80016ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff5d 	bl	80015b0 <__NVIC_SetPriority>
}
 80016f6:	bf00      	nop
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff31 	bl	8001574 <__NVIC_EnableIRQ>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffa2 	bl	800166c <SysTick_Config>
 8001728:	4603      	mov	r3, r0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
	...

08001734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001734:	b480      	push	{r7}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001742:	e166      	b.n	8001a12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	fa01 f303 	lsl.w	r3, r1, r3
 8001750:	4013      	ands	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8158 	beq.w	8001a0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d005      	beq.n	8001774 <HAL_GPIO_Init+0x40>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d130      	bne.n	80017d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	2203      	movs	r2, #3
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017aa:	2201      	movs	r2, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 0201 	and.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d017      	beq.n	8001812 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	2203      	movs	r2, #3
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4013      	ands	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d123      	bne.n	8001866 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	691a      	ldr	r2, [r3, #16]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	6939      	ldr	r1, [r7, #16]
 8001862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0203 	and.w	r2, r3, #3
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f000 80b2 	beq.w	8001a0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a8:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <HAL_GPIO_Init+0x2fc>)
 80018aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ac:	4a60      	ldr	r2, [pc, #384]	; (8001a30 <HAL_GPIO_Init+0x2fc>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6613      	str	r3, [r2, #96]	; 0x60
 80018b4:	4b5e      	ldr	r3, [pc, #376]	; (8001a30 <HAL_GPIO_Init+0x2fc>)
 80018b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c0:	4a5c      	ldr	r2, [pc, #368]	; (8001a34 <HAL_GPIO_Init+0x300>)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	3302      	adds	r3, #2
 80018c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	220f      	movs	r2, #15
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ea:	d02b      	beq.n	8001944 <HAL_GPIO_Init+0x210>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x304>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d025      	beq.n	8001940 <HAL_GPIO_Init+0x20c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x308>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d01f      	beq.n	800193c <HAL_GPIO_Init+0x208>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_GPIO_Init+0x30c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d019      	beq.n	8001938 <HAL_GPIO_Init+0x204>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <HAL_GPIO_Init+0x310>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d013      	beq.n	8001934 <HAL_GPIO_Init+0x200>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <HAL_GPIO_Init+0x314>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00d      	beq.n	8001930 <HAL_GPIO_Init+0x1fc>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4d      	ldr	r2, [pc, #308]	; (8001a4c <HAL_GPIO_Init+0x318>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d007      	beq.n	800192c <HAL_GPIO_Init+0x1f8>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4c      	ldr	r2, [pc, #304]	; (8001a50 <HAL_GPIO_Init+0x31c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_GPIO_Init+0x1f4>
 8001924:	2307      	movs	r3, #7
 8001926:	e00e      	b.n	8001946 <HAL_GPIO_Init+0x212>
 8001928:	2308      	movs	r3, #8
 800192a:	e00c      	b.n	8001946 <HAL_GPIO_Init+0x212>
 800192c:	2306      	movs	r3, #6
 800192e:	e00a      	b.n	8001946 <HAL_GPIO_Init+0x212>
 8001930:	2305      	movs	r3, #5
 8001932:	e008      	b.n	8001946 <HAL_GPIO_Init+0x212>
 8001934:	2304      	movs	r3, #4
 8001936:	e006      	b.n	8001946 <HAL_GPIO_Init+0x212>
 8001938:	2303      	movs	r3, #3
 800193a:	e004      	b.n	8001946 <HAL_GPIO_Init+0x212>
 800193c:	2302      	movs	r3, #2
 800193e:	e002      	b.n	8001946 <HAL_GPIO_Init+0x212>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <HAL_GPIO_Init+0x212>
 8001944:	2300      	movs	r3, #0
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	f002 0203 	and.w	r2, r2, #3
 800194c:	0092      	lsls	r2, r2, #2
 800194e:	4093      	lsls	r3, r2
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001956:	4937      	ldr	r1, [pc, #220]	; (8001a34 <HAL_GPIO_Init+0x300>)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	089b      	lsrs	r3, r3, #2
 800195c:	3302      	adds	r3, #2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_GPIO_Init+0x320>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001988:	4a32      	ldr	r2, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0x320>)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_GPIO_Init+0x320>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b2:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <HAL_GPIO_Init+0x320>)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b8:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_GPIO_Init+0x320>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <HAL_GPIO_Init+0x320>)
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	; (8001a54 <HAL_GPIO_Init+0x320>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_GPIO_Init+0x320>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f47f ae91 	bne.w	8001744 <HAL_GPIO_Init+0x10>
  }
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40010000 	.word	0x40010000
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	48000800 	.word	0x48000800
 8001a40:	48000c00 	.word	0x48000c00
 8001a44:	48001000 	.word	0x48001000
 8001a48:	48001400 	.word	0x48001400
 8001a4c:	48001800 	.word	0x48001800
 8001a50:	48001c00 	.word	0x48001c00
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001a66:	e0c9      	b.n	8001bfc <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80bc 	beq.w	8001bf6 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a7e:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <HAL_GPIO_DeInit+0x1c0>)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa6:	d02b      	beq.n	8001b00 <HAL_GPIO_DeInit+0xa8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a5c      	ldr	r2, [pc, #368]	; (8001c1c <HAL_GPIO_DeInit+0x1c4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d025      	beq.n	8001afc <HAL_GPIO_DeInit+0xa4>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a5b      	ldr	r2, [pc, #364]	; (8001c20 <HAL_GPIO_DeInit+0x1c8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d01f      	beq.n	8001af8 <HAL_GPIO_DeInit+0xa0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a5a      	ldr	r2, [pc, #360]	; (8001c24 <HAL_GPIO_DeInit+0x1cc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d019      	beq.n	8001af4 <HAL_GPIO_DeInit+0x9c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	; (8001c28 <HAL_GPIO_DeInit+0x1d0>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d013      	beq.n	8001af0 <HAL_GPIO_DeInit+0x98>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_GPIO_DeInit+0x1d4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_DeInit+0x94>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_GPIO_DeInit+0x1d8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_DeInit+0x90>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_GPIO_DeInit+0x1dc>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_DeInit+0x8c>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e00e      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001ae4:	2308      	movs	r3, #8
 8001ae6:	e00c      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001ae8:	2306      	movs	r3, #6
 8001aea:	e00a      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001aec:	2305      	movs	r3, #5
 8001aee:	e008      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_DeInit+0xaa>
 8001b00:	2300      	movs	r3, #0
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d132      	bne.n	8001b78 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	4947      	ldr	r1, [pc, #284]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	4943      	ldr	r1, [pc, #268]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001b2e:	4b42      	ldr	r3, [pc, #264]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4940      	ldr	r1, [pc, #256]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001b3c:	4b3e      	ldr	r3, [pc, #248]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	493c      	ldr	r1, [pc, #240]	; (8001c38 <HAL_GPIO_DeInit+0x1e0>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	220f      	movs	r2, #15
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001b5a:	4a2f      	ldr	r2, [pc, #188]	; (8001c18 <HAL_GPIO_DeInit+0x1c0>)
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	482b      	ldr	r0, [pc, #172]	; (8001c18 <HAL_GPIO_DeInit+0x1c0>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	400a      	ands	r2, r1
 8001b72:	3302      	adds	r3, #2
 8001b74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2103      	movs	r1, #3
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	08da      	lsrs	r2, r3, #3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3208      	adds	r2, #8
 8001b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	08d2      	lsrs	r2, r2, #3
 8001bac:	4019      	ands	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2103      	movs	r1, #3
 8001bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2103      	movs	r1, #3
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f47f af2f 	bne.w	8001a68 <HAL_GPIO_DeInit+0x10>
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40010000 	.word	0x40010000
 8001c1c:	48000400 	.word	0x48000400
 8001c20:	48000800 	.word	0x48000800
 8001c24:	48000c00 	.word	0x48000c00
 8001c28:	48001000 	.word	0x48001000
 8001c2c:	48001400 	.word	0x48001400
 8001c30:	48001800 	.word	0x48001800
 8001c34:	48001c00 	.word	0x48001c00
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4013      	ands	r3, r2
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	43d9      	mvns	r1, r3
 8001c8a:	887b      	ldrh	r3, [r7, #2]
 8001c8c:	400b      	ands	r3, r1
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cac:	695a      	ldr	r2, [r3, #20]
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d006      	beq.n	8001cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f003 f992 	bl	8004fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40010400 	.word	0x40010400

08001cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e081      	b.n	8001de6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f003 fb18 	bl	800532c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e006      	b.n	8001d58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d104      	bne.n	8001d6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68da      	ldr	r2, [r3, #12]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69d9      	ldr	r1, [r3, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1a      	ldr	r2, [r3, #32]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e021      	b.n	8001e44 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2224      	movs	r2, #36	; 0x24
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f003 fae5 	bl	80053e8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	817b      	strh	r3, [r7, #10]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	813b      	strh	r3, [r7, #8]
 8001e62:	4613      	mov	r3, r2
 8001e64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	f040 80f9 	bne.w	8002066 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d002      	beq.n	8001e80 <HAL_I2C_Mem_Write+0x34>
 8001e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0ed      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Mem_Write+0x4e>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0e6      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ea2:	f7ff fb29 	bl	80014f8 <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2319      	movs	r3, #25
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 fac3 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d1      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2221      	movs	r2, #33	; 0x21
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6a3a      	ldr	r2, [r7, #32]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eec:	88f8      	ldrh	r0, [r7, #6]
 8001eee:	893a      	ldrh	r2, [r7, #8]
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	4603      	mov	r3, r0
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 f9d3 	bl	80022a8 <I2C_RequestMemoryWrite>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0a9      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d90e      	bls.n	8001f3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	8979      	ldrh	r1, [r7, #10]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f000 fc2b 	bl	8002790 <I2C_TransferConfig>
 8001f3a:	e00f      	b.n	8001f5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	8979      	ldrh	r1, [r7, #10]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f000 fc1a 	bl	8002790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 faad 	bl	80024c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e07b      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	781a      	ldrb	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d034      	beq.n	8002014 <HAL_I2C_Mem_Write+0x1c8>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d130      	bne.n	8002014 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fa3f 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04d      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2bff      	cmp	r3, #255	; 0xff
 8001fd4:	d90e      	bls.n	8001ff4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	22ff      	movs	r2, #255	; 0xff
 8001fda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	8979      	ldrh	r1, [r7, #10]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fbcf 	bl	8002790 <I2C_TransferConfig>
 8001ff2:	e00f      	b.n	8002014 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002002:	b2da      	uxtb	r2, r3
 8002004:	8979      	ldrh	r1, [r7, #10]
 8002006:	2300      	movs	r3, #0
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 fbbe 	bl	8002790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d19e      	bne.n	8001f5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002022:	68f8      	ldr	r0, [r7, #12]
 8002024:	f000 fa8c 	bl	8002540 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e01a      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2220      	movs	r2, #32
 8002038:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_I2C_Mem_Write+0x224>)
 8002046:	400b      	ands	r3, r1
 8002048:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002066:	2302      	movs	r3, #2
  }
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	fe00e800 	.word	0xfe00e800

08002074 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	4608      	mov	r0, r1
 800207e:	4611      	mov	r1, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4603      	mov	r3, r0
 8002084:	817b      	strh	r3, [r7, #10]
 8002086:	460b      	mov	r3, r1
 8002088:	813b      	strh	r3, [r7, #8]
 800208a:	4613      	mov	r3, r2
 800208c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b20      	cmp	r3, #32
 8002098:	f040 80fd 	bne.w	8002296 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d002      	beq.n	80020a8 <HAL_I2C_Mem_Read+0x34>
 80020a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d105      	bne.n	80020b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0f1      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Mem_Read+0x4e>
 80020be:	2302      	movs	r3, #2
 80020c0:	e0ea      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020ca:	f7ff fa15 	bl	80014f8 <HAL_GetTick>
 80020ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	2319      	movs	r3, #25
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 f9af 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0d5      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2222      	movs	r2, #34	; 0x22
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002114:	88f8      	ldrh	r0, [r7, #6]
 8002116:	893a      	ldrh	r2, [r7, #8]
 8002118:	8979      	ldrh	r1, [r7, #10]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4603      	mov	r3, r0
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f913 	bl	8002350 <I2C_RequestMemoryRead>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0ad      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2bff      	cmp	r3, #255	; 0xff
 8002144:	d90e      	bls.n	8002164 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	22ff      	movs	r2, #255	; 0xff
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002150:	b2da      	uxtb	r2, r3
 8002152:	8979      	ldrh	r1, [r7, #10]
 8002154:	4b52      	ldr	r3, [pc, #328]	; (80022a0 <HAL_I2C_Mem_Read+0x22c>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fb17 	bl	8002790 <I2C_TransferConfig>
 8002162:	e00f      	b.n	8002184 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002168:	b29a      	uxth	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	b2da      	uxtb	r2, r3
 8002174:	8979      	ldrh	r1, [r7, #10]
 8002176:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_I2C_Mem_Read+0x22c>)
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fb06 	bl	8002790 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	2200      	movs	r2, #0
 800218c:	2104      	movs	r1, #4
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f956 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e07c      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ba:	3b01      	subs	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d034      	beq.n	8002244 <HAL_I2C_Mem_Read+0x1d0>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d130      	bne.n	8002244 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e8:	2200      	movs	r2, #0
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f927 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e04d      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2bff      	cmp	r3, #255	; 0xff
 8002204:	d90e      	bls.n	8002224 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	22ff      	movs	r2, #255	; 0xff
 800220a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002210:	b2da      	uxtb	r2, r3
 8002212:	8979      	ldrh	r1, [r7, #10]
 8002214:	2300      	movs	r3, #0
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fab7 	bl	8002790 <I2C_TransferConfig>
 8002222:	e00f      	b.n	8002244 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	b2da      	uxtb	r2, r3
 8002234:	8979      	ldrh	r1, [r7, #10]
 8002236:	2300      	movs	r3, #0
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 faa6 	bl	8002790 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d19a      	bne.n	8002184 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 f974 	bl	8002540 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e01a      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2220      	movs	r2, #32
 8002268:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_I2C_Mem_Read+0x230>)
 8002276:	400b      	ands	r3, r1
 8002278:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e000      	b.n	8002298 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002296:	2302      	movs	r3, #2
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	80002400 	.word	0x80002400
 80022a4:	fe00e800 	.word	0xfe00e800

080022a8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <I2C_RequestMemoryWrite+0xa4>)
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fa5d 	bl	8002790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8f0 	bl	80024c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02c      	b.n	8002344 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022f0:	893b      	ldrh	r3, [r7, #8]
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
 80022fa:	e015      	b.n	8002328 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022fc:	893b      	ldrh	r3, [r7, #8]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b29b      	uxth	r3, r3
 8002302:	b2da      	uxtb	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	69b9      	ldr	r1, [r7, #24]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f8d6 	bl	80024c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e012      	b.n	8002344 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231e:	893b      	ldrh	r3, [r7, #8]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2200      	movs	r2, #0
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f884 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	80002000 	.word	0x80002000

08002350 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4603      	mov	r3, r0
 8002360:	817b      	strh	r3, [r7, #10]
 8002362:	460b      	mov	r3, r1
 8002364:	813b      	strh	r3, [r7, #8]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	8979      	ldrh	r1, [r7, #10]
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <I2C_RequestMemoryRead+0xa4>)
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa0a 	bl	8002790 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f89d 	bl	80024c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e02c      	b.n	80023ea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002396:	893b      	ldrh	r3, [r7, #8]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
 80023a0:	e015      	b.n	80023ce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80023a2:	893b      	ldrh	r3, [r7, #8]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 f883 	bl	80024c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e012      	b.n	80023ea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80023c4:	893b      	ldrh	r3, [r7, #8]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2140      	movs	r1, #64	; 0x40
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f831 	bl	8002440 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	80002000 	.word	0x80002000

080023f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b02      	cmp	r3, #2
 800240c:	d103      	bne.n	8002416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2200      	movs	r2, #0
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b01      	cmp	r3, #1
 8002422:	d007      	beq.n	8002434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	619a      	str	r2, [r3, #24]
  }
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002450:	e022      	b.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002458:	d01e      	beq.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	f7ff f84d 	bl	80014f8 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d302      	bcc.n	8002470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d113      	bne.n	8002498 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e00f      	b.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699a      	ldr	r2, [r3, #24]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4013      	ands	r3, r2
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d0cd      	beq.n	8002452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024cc:	e02c      	b.n	8002528 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 f870 	bl	80025b8 <I2C_IsErrorOccurred>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e02a      	b.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e8:	d01e      	beq.n	8002528 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ea:	f7ff f805 	bl	80014f8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d302      	bcc.n	8002500 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d113      	bne.n	8002528 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	f043 0220 	orr.w	r2, r3, #32
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e007      	b.n	8002538 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b02      	cmp	r3, #2
 8002534:	d1cb      	bne.n	80024ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800254c:	e028      	b.n	80025a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68b9      	ldr	r1, [r7, #8]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f830 	bl	80025b8 <I2C_IsErrorOccurred>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e026      	b.n	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7fe ffc9 	bl	80014f8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d113      	bne.n	80025a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	f043 0220 	orr.w	r2, r3, #32
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e007      	b.n	80025b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d1cf      	bne.n	800254e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d075      	beq.n	80026d0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025ec:	e056      	b.n	800269c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f4:	d052      	beq.n	800269c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025f6:	f7fe ff7f 	bl	80014f8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	429a      	cmp	r2, r3
 8002604:	d302      	bcc.n	800260c <I2C_IsErrorOccurred+0x54>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d147      	bne.n	800269c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800261e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262e:	d12e      	bne.n	800268e <I2C_IsErrorOccurred+0xd6>
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002636:	d02a      	beq.n	800268e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	2b20      	cmp	r3, #32
 800263c:	d027      	beq.n	800268e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800264e:	f7fe ff53 	bl	80014f8 <HAL_GetTick>
 8002652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002654:	e01b      	b.n	800268e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002656:	f7fe ff4f 	bl	80014f8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b19      	cmp	r3, #25
 8002662:	d914      	bls.n	800268e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b20      	cmp	r3, #32
 800269a:	d1dc      	bne.n	8002656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	2b20      	cmp	r3, #32
 80026a8:	d003      	beq.n	80026b2 <I2C_IsErrorOccurred+0xfa>
 80026aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d09d      	beq.n	80025ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d103      	bne.n	80026c2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2220      	movs	r2, #32
 80026c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f043 0308 	orr.w	r3, r3, #8
 800270a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00b      	beq.n	800273e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002736:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800273e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002742:	2b00      	cmp	r3, #0
 8002744:	d01c      	beq.n	8002780 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f7ff fe56 	bl	80023f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <I2C_IsErrorOccurred+0x1d4>)
 8002758:	400b      	ands	r3, r1
 800275a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002784:	4618      	mov	r0, r3
 8002786:	3728      	adds	r7, #40	; 0x28
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	fe00e800 	.word	0xfe00e800

08002790 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002790:	b480      	push	{r7}
 8002792:	b087      	sub	sp, #28
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	607b      	str	r3, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	817b      	strh	r3, [r7, #10]
 800279e:	4613      	mov	r3, r2
 80027a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027a8:	7a7b      	ldrb	r3, [r7, #9]
 80027aa:	041b      	lsls	r3, r3, #16
 80027ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	0d5b      	lsrs	r3, r3, #21
 80027ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <I2C_TransferConfig+0x60>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	43db      	mvns	r3, r3
 80027d4:	ea02 0103 	and.w	r1, r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	03ff63ff 	.word	0x03ff63ff

080027f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	d138      	bne.n	800287c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002814:	2302      	movs	r3, #2
 8002816:	e032      	b.n	800287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288a:	b480      	push	{r7}
 800288c:	b085      	sub	sp, #20
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b20      	cmp	r3, #32
 800289e:	d139      	bne.n	8002914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e033      	b.n	8002916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2224      	movs	r2, #36	; 0x24
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	021b      	lsls	r3, r3, #8
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_PWREx_GetVoltageRange+0x3c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002934:	d102      	bne.n	800293c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800293a:	e00b      	b.n	8002954 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800293c:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_PWREx_GetVoltageRange+0x3c>)
 800293e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294a:	d102      	bne.n	8002952 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800294c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002950:	e000      	b.n	8002954 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002952:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d141      	bne.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002972:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800297a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800297e:	d131      	bne.n	80029e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002980:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002986:	4a46      	ldr	r2, [pc, #280]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800298c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002998:	4a41      	ldr	r2, [pc, #260]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800299a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800299e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80029a0:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2232      	movs	r2, #50	; 0x32
 80029a6:	fb02 f303 	mul.w	r3, r2, r3
 80029aa:	4a3f      	ldr	r2, [pc, #252]	; (8002aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80029ac:	fba2 2303 	umull	r2, r3, r2, r3
 80029b0:	0c9b      	lsrs	r3, r3, #18
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b6:	e002      	b.n	80029be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029be:	4b38      	ldr	r3, [pc, #224]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d102      	bne.n	80029d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f2      	bne.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029d2:	4b33      	ldr	r3, [pc, #204]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029de:	d158      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e057      	b.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029e4:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ea:	4a2d      	ldr	r2, [pc, #180]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029f4:	e04d      	b.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fc:	d141      	bne.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0a:	d131      	bne.n	8002a70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a12:	4a23      	ldr	r2, [pc, #140]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	; (8002aa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2232      	movs	r2, #50	; 0x32
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	0c9b      	lsrs	r3, r3, #18
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a42:	e002      	b.n	8002a4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a56:	d102      	bne.n	8002a5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f2      	bne.n	8002a44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a6a:	d112      	bne.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e011      	b.n	8002a94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a80:	e007      	b.n	8002a92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a90:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	2000003c 	.word	0x2000003c
 8002aa8:	431bde83 	.word	0x431bde83

08002aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b088      	sub	sp, #32
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	f000 bc08 	b.w	80032d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac0:	4b96      	ldr	r3, [pc, #600]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aca:	4b94      	ldr	r3, [pc, #592]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 80e4 	beq.w	8002caa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <HAL_RCC_OscConfig+0x4c>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	f040 808b 	bne.w	8002c06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	f040 8087 	bne.w	8002c06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002af8:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_RCC_OscConfig+0x64>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e3df      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	4b81      	ldr	r3, [pc, #516]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d004      	beq.n	8002b2a <HAL_RCC_OscConfig+0x7e>
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b28:	e005      	b.n	8002b36 <HAL_RCC_OscConfig+0x8a>
 8002b2a:	4b7c      	ldr	r3, [pc, #496]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d223      	bcs.n	8002b82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 fdcc 	bl	80036dc <RCC_SetFlashLatencyFromMSIRange>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e3c0      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	4b70      	ldr	r3, [pc, #448]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	496d      	ldr	r1, [pc, #436]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b6c:	4b6b      	ldr	r3, [pc, #428]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	4968      	ldr	r1, [pc, #416]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	e025      	b.n	8002bce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b82:	4b66      	ldr	r3, [pc, #408]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a65      	ldr	r2, [pc, #404]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b88:	f043 0308 	orr.w	r3, r3, #8
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	4960      	ldr	r1, [pc, #384]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba0:	4b5e      	ldr	r3, [pc, #376]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	021b      	lsls	r3, r3, #8
 8002bae:	495b      	ldr	r1, [pc, #364]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d109      	bne.n	8002bce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 fd8c 	bl	80036dc <RCC_SetFlashLatencyFromMSIRange>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e380      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bce:	f000 fcc1 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	4950      	ldr	r1, [pc, #320]	; (8002d20 <HAL_RCC_OscConfig+0x274>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	4a4e      	ldr	r2, [pc, #312]	; (8002d24 <HAL_RCC_OscConfig+0x278>)
 8002bec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bee:	4b4e      	ldr	r3, [pc, #312]	; (8002d28 <HAL_RCC_OscConfig+0x27c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fe fc30 	bl	8001458 <HAL_InitTick>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d052      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	e364      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d032      	beq.n	8002c74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a42      	ldr	r2, [pc, #264]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fc6d 	bl	80014f8 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c22:	f7fe fc69 	bl	80014f8 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e34d      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c40:	4b36      	ldr	r3, [pc, #216]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a35      	ldr	r2, [pc, #212]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c46:	f043 0308 	orr.w	r3, r3, #8
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b33      	ldr	r3, [pc, #204]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	4930      	ldr	r1, [pc, #192]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c5e:	4b2f      	ldr	r3, [pc, #188]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	021b      	lsls	r3, r3, #8
 8002c6c:	492b      	ldr	r1, [pc, #172]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
 8002c72:	e01a      	b.n	8002caa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c74:	4b29      	ldr	r3, [pc, #164]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a28      	ldr	r2, [pc, #160]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fc3a 	bl	80014f8 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c88:	f7fe fc36 	bl	80014f8 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e31a      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x1dc>
 8002ca6:	e000      	b.n	8002caa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ca8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d073      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x21c>
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d10e      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d063      	beq.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d15f      	bne.n	8002d9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e2f7      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce8:	d106      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x24c>
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	e025      	b.n	8002d44 <HAL_RCC_OscConfig+0x298>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d00:	d114      	bne.n	8002d2c <HAL_RCC_OscConfig+0x280>
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a05      	ldr	r2, [pc, #20]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a02      	ldr	r2, [pc, #8]	; (8002d1c <HAL_RCC_OscConfig+0x270>)
 8002d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	e013      	b.n	8002d44 <HAL_RCC_OscConfig+0x298>
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080082b0 	.word	0x080082b0
 8002d24:	2000003c 	.word	0x2000003c
 8002d28:	20000034 	.word	0x20000034
 8002d2c:	4ba0      	ldr	r3, [pc, #640]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a9f      	ldr	r2, [pc, #636]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b9d      	ldr	r3, [pc, #628]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a9c      	ldr	r2, [pc, #624]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4c:	f7fe fbd4 	bl	80014f8 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe fbd0 	bl	80014f8 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e2b4      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0x2a8>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fbc0 	bl	80014f8 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fbbc 	bl	80014f8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	; 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e2a0      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x2d0>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d060      	beq.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d005      	beq.n	8002dbc <HAL_RCC_OscConfig+0x310>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	d119      	bne.n	8002dea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d116      	bne.n	8002dea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dbc:	4b7c      	ldr	r3, [pc, #496]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x328>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e27d      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd4:	4b76      	ldr	r3, [pc, #472]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	061b      	lsls	r3, r3, #24
 8002de2:	4973      	ldr	r1, [pc, #460]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002de8:	e040      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d023      	beq.n	8002e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fb7b 	bl	80014f8 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe fb77 	bl	80014f8 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e25b      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e18:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b62      	ldr	r3, [pc, #392]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	495f      	ldr	r1, [pc, #380]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	604b      	str	r3, [r1, #4]
 8002e38:	e018      	b.n	8002e6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5c      	ldr	r2, [pc, #368]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fb57 	bl	80014f8 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fb53 	bl	80014f8 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e237      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e60:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e86:	4a4a      	ldr	r2, [pc, #296]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e90:	f7fe fb32 	bl	80014f8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe fb2e 	bl	80014f8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e212      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eaa:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d0ef      	beq.n	8002e98 <HAL_RCC_OscConfig+0x3ec>
 8002eb8:	e01b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec0:	4a3b      	ldr	r2, [pc, #236]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eca:	f7fe fb15 	bl	80014f8 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe fb11 	bl	80014f8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e1f5      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ef      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 80a6 	beq.w	800304c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10d      	bne.n	8002f2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f14:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d118      	bne.n	8002f6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f38:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f44:	f7fe fad8 	bl	80014f8 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4c:	f7fe fad4 	bl	80014f8 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e1b8      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x508>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d108      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4d8>
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f82:	e029      	b.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b05      	cmp	r3, #5
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x50c>
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f92:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fac:	e014      	b.n	8002fd8 <HAL_RCC_OscConfig+0x52c>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	4b9d      	ldr	r3, [pc, #628]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	4a9c      	ldr	r2, [pc, #624]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fc8:	4b99      	ldr	r3, [pc, #612]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	4a98      	ldr	r2, [pc, #608]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d016      	beq.n	800300e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe fa8a 	bl	80014f8 <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fa86 	bl	80014f8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e168      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ffe:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ed      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x53c>
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fa73 	bl	80014f8 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003014:	e00a      	b.n	800302c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fa6f 	bl	80014f8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	; 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e151      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800302c:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1ed      	bne.n	8003016 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800303a:	7ffb      	ldrb	r3, [r7, #31]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d105      	bne.n	800304c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4b7b      	ldr	r3, [pc, #492]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003044:	4a7a      	ldr	r2, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800304a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03c      	beq.n	80030d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01c      	beq.n	800309a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003060:	4b73      	ldr	r3, [pc, #460]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003066:	4a72      	ldr	r2, [pc, #456]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003070:	f7fe fa42 	bl	80014f8 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003078:	f7fe fa3e 	bl	80014f8 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e122      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800308a:	4b69      	ldr	r3, [pc, #420]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 800308c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0ef      	beq.n	8003078 <HAL_RCC_OscConfig+0x5cc>
 8003098:	e01b      	b.n	80030d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800309a:	4b65      	ldr	r3, [pc, #404]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 800309c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a0:	4a63      	ldr	r2, [pc, #396]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80030a2:	f023 0301 	bic.w	r3, r3, #1
 80030a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe fa25 	bl	80014f8 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030b2:	f7fe fa21 	bl	80014f8 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e105      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030c4:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80030c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1ef      	bne.n	80030b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80f9 	beq.w	80032ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	f040 80cf 	bne.w	8003284 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80030e6:	4b52      	ldr	r3, [pc, #328]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d12c      	bne.n	8003154 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	3b01      	subs	r3, #1
 8003106:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003108:	429a      	cmp	r2, r3
 800310a:	d123      	bne.n	8003154 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003118:	429a      	cmp	r2, r3
 800311a:	d11b      	bne.n	8003154 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d113      	bne.n	8003154 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	3b01      	subs	r3, #1
 800313a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800313c:	429a      	cmp	r2, r3
 800313e:	d109      	bne.n	8003154 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d071      	beq.n	8003238 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d068      	beq.n	800322c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800315a:	4b35      	ldr	r3, [pc, #212]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d105      	bne.n	8003172 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003166:	4b32      	ldr	r3, [pc, #200]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e0ac      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 800317c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003180:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003182:	f7fe f9b9 	bl	80014f8 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe f9b5 	bl	80014f8 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e099      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1f0      	bne.n	800318a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	4b21      	ldr	r3, [pc, #132]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4b21      	ldr	r3, [pc, #132]	; (8003234 <HAL_RCC_OscConfig+0x788>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031b8:	3a01      	subs	r2, #1
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031c2:	0212      	lsls	r2, r2, #8
 80031c4:	4311      	orrs	r1, r2
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031ca:	0852      	lsrs	r2, r2, #1
 80031cc:	3a01      	subs	r2, #1
 80031ce:	0552      	lsls	r2, r2, #21
 80031d0:	4311      	orrs	r1, r2
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031d6:	0852      	lsrs	r2, r2, #1
 80031d8:	3a01      	subs	r2, #1
 80031da:	0652      	lsls	r2, r2, #25
 80031dc:	4311      	orrs	r1, r2
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031e2:	06d2      	lsls	r2, r2, #27
 80031e4:	430a      	orrs	r2, r1
 80031e6:	4912      	ldr	r1, [pc, #72]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f8:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 80031fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003202:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003204:	f7fe f978 	bl	80014f8 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320c:	f7fe f974 	bl	80014f8 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e058      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_RCC_OscConfig+0x784>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d0f0      	beq.n	800320c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800322a:	e050      	b.n	80032ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e04f      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
 8003230:	40021000 	.word	0x40021000
 8003234:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003238:	4b27      	ldr	r3, [pc, #156]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d144      	bne.n	80032ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003244:	4b24      	ldr	r3, [pc, #144]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a23      	ldr	r2, [pc, #140]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 800324a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003250:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 8003256:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800325c:	f7fe f94c 	bl	80014f8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7fe f948 	bl	80014f8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e02c      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x7b8>
 8003282:	e024      	b.n	80032ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2b0c      	cmp	r3, #12
 8003288:	d01f      	beq.n	80032ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a12      	ldr	r2, [pc, #72]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 8003290:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003296:	f7fe f92f 	bl	80014f8 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329e:	f7fe f92b 	bl	80014f8 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e00f      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1f0      	bne.n	800329e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	4905      	ldr	r1, [pc, #20]	; (80032d8 <HAL_RCC_OscConfig+0x82c>)
 80032c2:	4b06      	ldr	r3, [pc, #24]	; (80032dc <HAL_RCC_OscConfig+0x830>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	60cb      	str	r3, [r1, #12]
 80032c8:	e001      	b.n	80032ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3720      	adds	r7, #32
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000
 80032dc:	feeefffc 	.word	0xfeeefffc

080032e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e11d      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b90      	ldr	r3, [pc, #576]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d910      	bls.n	8003328 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b8d      	ldr	r3, [pc, #564]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 020f 	bic.w	r2, r3, #15
 800330e:	498b      	ldr	r1, [pc, #556]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b89      	ldr	r3, [pc, #548]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e105      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b81      	ldr	r3, [pc, #516]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	429a      	cmp	r2, r3
 8003342:	d908      	bls.n	8003356 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b7e      	ldr	r3, [pc, #504]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	497b      	ldr	r1, [pc, #492]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d079      	beq.n	8003456 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b03      	cmp	r3, #3
 8003368:	d11e      	bne.n	80033a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	4b75      	ldr	r3, [pc, #468]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e0dc      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800337a:	f000 fa09 	bl	8003790 <RCC_GetSysClockFreqFromPLLSource>
 800337e:	4603      	mov	r3, r0
 8003380:	4a70      	ldr	r2, [pc, #448]	; (8003544 <HAL_RCC_ClockConfig+0x264>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d946      	bls.n	8003414 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003386:	4b6e      	ldr	r3, [pc, #440]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d140      	bne.n	8003414 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003392:	4b6b      	ldr	r3, [pc, #428]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	4a69      	ldr	r2, [pc, #420]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e035      	b.n	8003414 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033b0:	4b63      	ldr	r3, [pc, #396]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d115      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b9      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033c8:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0ad      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0a5      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80033e8:	f000 f8b4 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a55      	ldr	r2, [pc, #340]	; (8003544 <HAL_RCC_ClockConfig+0x264>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d90f      	bls.n	8003414 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80033f4:	4b52      	ldr	r3, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003400:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003408:	4a4d      	ldr	r2, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800340a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003414:	4b4a      	ldr	r3, [pc, #296]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 0203 	bic.w	r2, r3, #3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4947      	ldr	r1, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003426:	f7fe f867 	bl	80014f8 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342c:	e00a      	b.n	8003444 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800342e:	f7fe f863 	bl	80014f8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e077      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003444:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 020c 	and.w	r2, r3, #12
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	429a      	cmp	r2, r3
 8003454:	d1eb      	bne.n	800342e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b80      	cmp	r3, #128	; 0x80
 800345a:	d105      	bne.n	8003468 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a37      	ldr	r2, [pc, #220]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003466:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b31      	ldr	r3, [pc, #196]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003480:	429a      	cmp	r2, r3
 8003482:	d208      	bcs.n	8003496 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b2e      	ldr	r3, [pc, #184]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	492b      	ldr	r1, [pc, #172]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d210      	bcs.n	80034c6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 020f 	bic.w	r2, r3, #15
 80034ac:	4923      	ldr	r1, [pc, #140]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_RCC_ClockConfig+0x25c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e036      	b.n	8003534 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d2:	4b1b      	ldr	r3, [pc, #108]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	4918      	ldr	r1, [pc, #96]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d009      	beq.n	8003504 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4910      	ldr	r1, [pc, #64]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 8003500:	4313      	orrs	r3, r2
 8003502:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003504:	f000 f826 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <HAL_RCC_ClockConfig+0x260>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	490c      	ldr	r1, [pc, #48]	; (8003548 <HAL_RCC_ClockConfig+0x268>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_RCC_ClockConfig+0x26c>)
 8003522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd ff95 	bl	8001458 <HAL_InitTick>
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]

  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40022000 	.word	0x40022000
 8003540:	40021000 	.word	0x40021000
 8003544:	04c4b400 	.word	0x04c4b400
 8003548:	080082b0 	.word	0x080082b0
 800354c:	2000003c 	.word	0x2000003c
 8003550:	20000034 	.word	0x20000034

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	2300      	movs	r3, #0
 8003560:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003562:	4b3e      	ldr	r3, [pc, #248]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	4b3b      	ldr	r3, [pc, #236]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f003 0303 	and.w	r3, r3, #3
 8003574:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0x34>
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b0c      	cmp	r3, #12
 8003580:	d121      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d11e      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003588:	4b34      	ldr	r3, [pc, #208]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003594:	4b31      	ldr	r3, [pc, #196]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 8003596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359a:	0a1b      	lsrs	r3, r3, #8
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	61fb      	str	r3, [r7, #28]
 80035a2:	e005      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035a4:	4b2d      	ldr	r3, [pc, #180]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <HAL_RCC_GetSysClockFreq+0x10c>)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035c4:	e00a      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d102      	bne.n	80035d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035cc:	4b25      	ldr	r3, [pc, #148]	; (8003664 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	e004      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035d8:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCC_GetSysClockFreq+0x114>)
 80035da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d134      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d003      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0xa6>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d003      	beq.n	8003600 <HAL_RCC_GetSysClockFreq+0xac>
 80035f8:	e005      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_RCC_GetSysClockFreq+0x110>)
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	e005      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003600:	4b19      	ldr	r3, [pc, #100]	; (8003668 <HAL_RCC_GetSysClockFreq+0x114>)
 8003602:	617b      	str	r3, [r7, #20]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	617b      	str	r3, [r7, #20]
      break;
 800360a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800360c:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3301      	adds	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	0a1b      	lsrs	r3, r3, #8
 8003620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	fb03 f202 	mul.w	r2, r3, r2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003632:	4b0a      	ldr	r3, [pc, #40]	; (800365c <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0e5b      	lsrs	r3, r3, #25
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	3301      	adds	r3, #1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800364c:	69bb      	ldr	r3, [r7, #24]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	080082c8 	.word	0x080082c8
 8003664:	00f42400 	.word	0x00f42400
 8003668:	007a1200 	.word	0x007a1200

0800366c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	2000003c 	.word	0x2000003c

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4904      	ldr	r1, [pc, #16]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	080082c0 	.word	0x080082c0

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036b4:	f7ff ffda 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0adb      	lsrs	r3, r3, #11
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4904      	ldr	r1, [pc, #16]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	080082c0 	.word	0x080082c0

080036dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036f4:	f7ff f916 	bl	8002924 <HAL_PWREx_GetVoltageRange>
 80036f8:	6178      	str	r0, [r7, #20]
 80036fa:	e014      	b.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80036fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003700:	4a21      	ldr	r2, [pc, #132]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003706:	6593      	str	r3, [r2, #88]	; 0x58
 8003708:	4b1f      	ldr	r3, [pc, #124]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003714:	f7ff f906 	bl	8002924 <HAL_PWREx_GetVoltageRange>
 8003718:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371e:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372c:	d10b      	bne.n	8003746 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b80      	cmp	r3, #128	; 0x80
 8003732:	d913      	bls.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2ba0      	cmp	r3, #160	; 0xa0
 8003738:	d902      	bls.n	8003740 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800373a:	2302      	movs	r3, #2
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e00d      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003740:	2301      	movs	r3, #1
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e00a      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b7f      	cmp	r3, #127	; 0x7f
 800374a:	d902      	bls.n	8003752 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800374c:	2302      	movs	r3, #2
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e004      	b.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d101      	bne.n	800375c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003758:	2301      	movs	r3, #1
 800375a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 020f 	bic.w	r2, r3, #15
 8003764:	4909      	ldr	r1, [pc, #36]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	429a      	cmp	r2, r3
 8003778:	d001      	beq.n	800377e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	40022000 	.word	0x40022000

08003790 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003796:	4b2d      	ldr	r3, [pc, #180]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d00b      	beq.n	80037be <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d825      	bhi.n	80037f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d008      	beq.n	80037c4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11f      	bne.n	80037f8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80037ba:	613b      	str	r3, [r7, #16]
    break;
 80037bc:	e01f      	b.n	80037fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80037c0:	613b      	str	r3, [r7, #16]
    break;
 80037c2:	e01c      	b.n	80037fe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d107      	bne.n	80037e0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d6:	0a1b      	lsrs	r3, r3, #8
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e005      	b.n	80037ec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037e0:	4b1a      	ldr	r3, [pc, #104]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	091b      	lsrs	r3, r3, #4
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80037ec:	4a1a      	ldr	r2, [pc, #104]	; (8003858 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f4:	613b      	str	r3, [r7, #16]
    break;
 80037f6:	e002      	b.n	80037fe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
    break;
 80037fc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	091b      	lsrs	r3, r3, #4
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	3301      	adds	r3, #1
 800380a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800380c:	4b0f      	ldr	r3, [pc, #60]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	fb03 f202 	mul.w	r2, r3, r2
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0e5b      	lsrs	r3, r3, #25
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	3301      	adds	r3, #1
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800383e:	683b      	ldr	r3, [r7, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	371c      	adds	r7, #28
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40021000 	.word	0x40021000
 8003850:	00f42400 	.word	0x00f42400
 8003854:	007a1200 	.word	0x007a1200
 8003858:	080082c8 	.word	0x080082c8

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003864:	2300      	movs	r3, #0
 8003866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003868:	2300      	movs	r3, #0
 800386a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003874:	2b00      	cmp	r3, #0
 8003876:	d040      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387c:	2b80      	cmp	r3, #128	; 0x80
 800387e:	d02a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003880:	2b80      	cmp	r3, #128	; 0x80
 8003882:	d825      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003884:	2b60      	cmp	r3, #96	; 0x60
 8003886:	d026      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003888:	2b60      	cmp	r3, #96	; 0x60
 800388a:	d821      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d006      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d81d      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d009      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d010      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x62>
 800389c:	e018      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800389e:	4b89      	ldr	r3, [pc, #548]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	4a88      	ldr	r2, [pc, #544]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038aa:	e015      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2100      	movs	r1, #0
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fb02 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038bc:	e00c      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3320      	adds	r3, #32
 80038c2:	2100      	movs	r1, #0
 80038c4:	4618      	mov	r0, r3
 80038c6:	f000 fbed 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 80038ca:	4603      	mov	r3, r0
 80038cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038ce:	e003      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	74fb      	strb	r3, [r7, #19]
      break;
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80038d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038de:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038e4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ec:	4975      	ldr	r1, [pc, #468]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80038f4:	e001      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d047      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390e:	d030      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d82a      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800391a:	d02a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800391c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003920:	d824      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003926:	d008      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392c:	d81e      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003936:	d010      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003938:	e018      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800393a:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	4a61      	ldr	r2, [pc, #388]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003944:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003946:	e015      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fab4 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003958:	e00c      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3320      	adds	r3, #32
 800395e:	2100      	movs	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fb9f 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800396a:	e003      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	74fb      	strb	r3, [r7, #19]
      break;
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003972:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800397a:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003988:	494e      	ldr	r1, [pc, #312]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003990:	e001      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 809f 	beq.w	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a4:	2300      	movs	r3, #0
 80039a6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a8:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80039b8:	2300      	movs	r3, #0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	4a40      	ldr	r2, [pc, #256]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
 80039ca:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d6:	2301      	movs	r3, #1
 80039d8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039da:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e6:	f7fd fd87 	bl	80014f8 <HAL_GetTick>
 80039ea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ec:	e009      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7fd fd83 	bl	80014f8 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d902      	bls.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003a00:	e005      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a02:	4b31      	ldr	r3, [pc, #196]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0ef      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d15b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a14:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01f      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d019      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a3e:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a5e:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d016      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fd fd42 	bl	80014f8 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a76:	e00b      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a78:	f7fd fd3e 	bl	80014f8 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d902      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	74fb      	strb	r3, [r7, #19]
            break;
 8003a8e:	e006      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a90:	4b0c      	ldr	r3, [pc, #48]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0ec      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10c      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	74bb      	strb	r3, [r7, #18]
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad0:	7c7b      	ldrb	r3, [r7, #17]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad6:	4ba0      	ldr	r3, [pc, #640]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	4a9f      	ldr	r2, [pc, #636]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aee:	4b9a      	ldr	r3, [pc, #616]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f023 0203 	bic.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	4996      	ldr	r1, [pc, #600]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b10:	4b91      	ldr	r3, [pc, #580]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f023 020c 	bic.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	498e      	ldr	r1, [pc, #568]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	4985      	ldr	r1, [pc, #532]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b54:	4b80      	ldr	r3, [pc, #512]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	497d      	ldr	r1, [pc, #500]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b76:	4b78      	ldr	r3, [pc, #480]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b84:	4974      	ldr	r1, [pc, #464]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b98:	4b6f      	ldr	r3, [pc, #444]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	496c      	ldr	r1, [pc, #432]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bba:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc8:	4963      	ldr	r1, [pc, #396]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bdc:	4b5e      	ldr	r3, [pc, #376]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bea:	495b      	ldr	r1, [pc, #364]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bfe:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	4952      	ldr	r1, [pc, #328]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c20:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	494a      	ldr	r1, [pc, #296]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c42:	4b45      	ldr	r3, [pc, #276]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c50:	4941      	ldr	r1, [pc, #260]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c64:	4b3c      	ldr	r3, [pc, #240]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	4939      	ldr	r1, [pc, #228]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d028      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c86:	4b34      	ldr	r3, [pc, #208]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	4930      	ldr	r1, [pc, #192]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca4:	d106      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb0:	60d3      	str	r3, [r2, #12]
 8003cb2:	e011      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 f8f9 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d04d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cec:	d108      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003cee:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003cfe:	e012      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003d00:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d06:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003d10:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d1e:	490e      	ldr	r1, [pc, #56]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d2e:	d106      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a08      	ldr	r2, [pc, #32]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d3a:	60d3      	str	r3, [r2, #12]
 8003d3c:	e020      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d46:	d109      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a02      	ldr	r2, [pc, #8]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	60d3      	str	r3, [r2, #12]
 8003d54:	e014      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003d56:	bf00      	nop
 8003d58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f8a5 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d028      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d8c:	4b4a      	ldr	r3, [pc, #296]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d9a:	4947      	ldr	r1, [pc, #284]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003daa:	d106      	bne.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a41      	ldr	r2, [pc, #260]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
 8003db8:	e011      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dc2:	d10c      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f876 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dd4:	7cfb      	ldrb	r3, [r7, #19]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01e      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dea:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dfa:	492f      	ldr	r1, [pc, #188]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 f851 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e1e:	7cfb      	ldrb	r3, [r7, #19]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003e24:	7cfb      	ldrb	r3, [r7, #19]
 8003e26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00b      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e34:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e3a:	f023 0204 	bic.w	r2, r3, #4
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	491c      	ldr	r1, [pc, #112]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e58:	4b17      	ldr	r3, [pc, #92]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e5e:	f023 0218 	bic.w	r2, r3, #24
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e68:	4913      	ldr	r1, [pc, #76]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d017      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8c:	490a      	ldr	r1, [pc, #40]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e9e:	d105      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eaa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003eac:	7cbb      	ldrb	r3, [r7, #18]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000

08003ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eca:	4b72      	ldr	r3, [pc, #456]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00e      	beq.n	8003ef4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ed6:	4b6f      	ldr	r3, [pc, #444]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0203 	and.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d103      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d142      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
 8003ef2:	e03f      	b.n	8003f74 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d018      	beq.n	8003f2e <RCCEx_PLLSAI1_Config+0x72>
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d825      	bhi.n	8003f4c <RCCEx_PLLSAI1_Config+0x90>
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d002      	beq.n	8003f0a <RCCEx_PLLSAI1_Config+0x4e>
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d009      	beq.n	8003f1c <RCCEx_PLLSAI1_Config+0x60>
 8003f08:	e020      	b.n	8003f4c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f0a:	4b62      	ldr	r3, [pc, #392]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11d      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f1a:	e01a      	b.n	8003f52 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f1c:	4b5d      	ldr	r3, [pc, #372]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d116      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2c:	e013      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f2e:	4b59      	ldr	r3, [pc, #356]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f3a:	4b56      	ldr	r3, [pc, #344]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f4a:	e006      	b.n	8003f5a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f50:	e004      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003f52:	bf00      	nop
 8003f54:	e002      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003f56:	bf00      	nop
 8003f58:	e000      	b.n	8003f5c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d108      	bne.n	8003f74 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003f62:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4949      	ldr	r1, [pc, #292]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f040 8086 	bne.w	8004088 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f7c:	4b45      	ldr	r3, [pc, #276]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a44      	ldr	r2, [pc, #272]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f88:	f7fd fab6 	bl	80014f8 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f8e:	e009      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f90:	f7fd fab2 	bl	80014f8 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d902      	bls.n	8003fa4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa2:	e005      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa4:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1ef      	bne.n	8003f90 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d168      	bne.n	8004088 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d113      	bne.n	8003fe4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	4b35      	ldr	r3, [pc, #212]	; (8004098 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6892      	ldr	r2, [r2, #8]
 8003fc8:	0211      	lsls	r1, r2, #8
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68d2      	ldr	r2, [r2, #12]
 8003fce:	06d2      	lsls	r2, r2, #27
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6852      	ldr	r2, [r2, #4]
 8003fd6:	3a01      	subs	r2, #1
 8003fd8:	0112      	lsls	r2, r2, #4
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	492d      	ldr	r1, [pc, #180]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]
 8003fe2:	e02d      	b.n	8004040 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d115      	bne.n	8004016 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fea:	4b2a      	ldr	r3, [pc, #168]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	4b2b      	ldr	r3, [pc, #172]	; (800409c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6892      	ldr	r2, [r2, #8]
 8003ff6:	0211      	lsls	r1, r2, #8
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6912      	ldr	r2, [r2, #16]
 8003ffc:	0852      	lsrs	r2, r2, #1
 8003ffe:	3a01      	subs	r2, #1
 8004000:	0552      	lsls	r2, r2, #21
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6852      	ldr	r2, [r2, #4]
 8004008:	3a01      	subs	r2, #1
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	430a      	orrs	r2, r1
 800400e:	4921      	ldr	r1, [pc, #132]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004010:	4313      	orrs	r3, r2
 8004012:	610b      	str	r3, [r1, #16]
 8004014:	e014      	b.n	8004040 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004016:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6892      	ldr	r2, [r2, #8]
 8004022:	0211      	lsls	r1, r2, #8
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6952      	ldr	r2, [r2, #20]
 8004028:	0852      	lsrs	r2, r2, #1
 800402a:	3a01      	subs	r2, #1
 800402c:	0652      	lsls	r2, r2, #25
 800402e:	4311      	orrs	r1, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6852      	ldr	r2, [r2, #4]
 8004034:	3a01      	subs	r2, #1
 8004036:	0112      	lsls	r2, r2, #4
 8004038:	430a      	orrs	r2, r1
 800403a:	4916      	ldr	r1, [pc, #88]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 800403c:	4313      	orrs	r3, r2
 800403e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800404a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404c:	f7fd fa54 	bl	80014f8 <HAL_GetTick>
 8004050:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004052:	e009      	b.n	8004068 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004054:	f7fd fa50 	bl	80014f8 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d902      	bls.n	8004068 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	73fb      	strb	r3, [r7, #15]
          break;
 8004066:	e005      	b.n	8004074 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0ef      	beq.n	8004054 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d106      	bne.n	8004088 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4904      	ldr	r1, [pc, #16]	; (8004094 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004084:	4313      	orrs	r3, r2
 8004086:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40021000 	.word	0x40021000
 8004098:	07ff800f 	.word	0x07ff800f
 800409c:	ff9f800f 	.word	0xff9f800f
 80040a0:	f9ff800f 	.word	0xf9ff800f

080040a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040b2:	4b72      	ldr	r3, [pc, #456]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00e      	beq.n	80040dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040be:	4b6f      	ldr	r3, [pc, #444]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d103      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
       ||
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d142      	bne.n	800415c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
 80040da:	e03f      	b.n	800415c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d018      	beq.n	8004116 <RCCEx_PLLSAI2_Config+0x72>
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d825      	bhi.n	8004134 <RCCEx_PLLSAI2_Config+0x90>
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d002      	beq.n	80040f2 <RCCEx_PLLSAI2_Config+0x4e>
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d009      	beq.n	8004104 <RCCEx_PLLSAI2_Config+0x60>
 80040f0:	e020      	b.n	8004134 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040f2:	4b62      	ldr	r3, [pc, #392]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11d      	bne.n	800413a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004102:	e01a      	b.n	800413a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004104:	4b5d      	ldr	r3, [pc, #372]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004114:	e013      	b.n	800413e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004116:	4b59      	ldr	r3, [pc, #356]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004122:	4b56      	ldr	r3, [pc, #344]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d109      	bne.n	8004142 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004132:	e006      	b.n	8004142 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      break;
 8004138:	e004      	b.n	8004144 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004142:	bf00      	nop
    }

    if(status == HAL_OK)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800414a:	4b4c      	ldr	r3, [pc, #304]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4949      	ldr	r1, [pc, #292]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004158:	4313      	orrs	r3, r2
 800415a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 8086 	bne.w	8004270 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004164:	4b45      	ldr	r3, [pc, #276]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a44      	ldr	r2, [pc, #272]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 800416a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004170:	f7fd f9c2 	bl	80014f8 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004176:	e009      	b.n	800418c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004178:	f7fd f9be 	bl	80014f8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d902      	bls.n	800418c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	73fb      	strb	r3, [r7, #15]
        break;
 800418a:	e005      	b.n	8004198 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418c:	4b3b      	ldr	r3, [pc, #236]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1ef      	bne.n	8004178 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d168      	bne.n	8004270 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d113      	bne.n	80041cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041a4:	4b35      	ldr	r3, [pc, #212]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041a6:	695a      	ldr	r2, [r3, #20]
 80041a8:	4b35      	ldr	r3, [pc, #212]	; (8004280 <RCCEx_PLLSAI2_Config+0x1dc>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6892      	ldr	r2, [r2, #8]
 80041b0:	0211      	lsls	r1, r2, #8
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68d2      	ldr	r2, [r2, #12]
 80041b6:	06d2      	lsls	r2, r2, #27
 80041b8:	4311      	orrs	r1, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6852      	ldr	r2, [r2, #4]
 80041be:	3a01      	subs	r2, #1
 80041c0:	0112      	lsls	r2, r2, #4
 80041c2:	430a      	orrs	r2, r1
 80041c4:	492d      	ldr	r1, [pc, #180]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	614b      	str	r3, [r1, #20]
 80041ca:	e02d      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d115      	bne.n	80041fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <RCCEx_PLLSAI2_Config+0x1e0>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6892      	ldr	r2, [r2, #8]
 80041de:	0211      	lsls	r1, r2, #8
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6912      	ldr	r2, [r2, #16]
 80041e4:	0852      	lsrs	r2, r2, #1
 80041e6:	3a01      	subs	r2, #1
 80041e8:	0552      	lsls	r2, r2, #21
 80041ea:	4311      	orrs	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6852      	ldr	r2, [r2, #4]
 80041f0:	3a01      	subs	r2, #1
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	430a      	orrs	r2, r1
 80041f6:	4921      	ldr	r1, [pc, #132]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	614b      	str	r3, [r1, #20]
 80041fc:	e014      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041fe:	4b1f      	ldr	r3, [pc, #124]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	4b21      	ldr	r3, [pc, #132]	; (8004288 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004204:	4013      	ands	r3, r2
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	6892      	ldr	r2, [r2, #8]
 800420a:	0211      	lsls	r1, r2, #8
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6952      	ldr	r2, [r2, #20]
 8004210:	0852      	lsrs	r2, r2, #1
 8004212:	3a01      	subs	r2, #1
 8004214:	0652      	lsls	r2, r2, #25
 8004216:	4311      	orrs	r1, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6852      	ldr	r2, [r2, #4]
 800421c:	3a01      	subs	r2, #1
 800421e:	0112      	lsls	r2, r2, #4
 8004220:	430a      	orrs	r2, r1
 8004222:	4916      	ldr	r1, [pc, #88]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004224:	4313      	orrs	r3, r2
 8004226:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004228:	4b14      	ldr	r3, [pc, #80]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a13      	ldr	r2, [pc, #76]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 800422e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004232:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fd f960 	bl	80014f8 <HAL_GetTick>
 8004238:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800423a:	e009      	b.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800423c:	f7fd f95c 	bl	80014f8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d902      	bls.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	73fb      	strb	r3, [r7, #15]
          break;
 800424e:	e005      	b.n	800425c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004250:	4b0a      	ldr	r3, [pc, #40]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0ef      	beq.n	800423c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d106      	bne.n	8004270 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	4904      	ldr	r1, [pc, #16]	; (800427c <RCCEx_PLLSAI2_Config+0x1d8>)
 800426c:	4313      	orrs	r3, r2
 800426e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
 8004280:	07ff800f 	.word	0x07ff800f
 8004284:	ff9f800f 	.word	0xff9f800f
 8004288:	f9ff800f 	.word	0xf9ff800f

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e042      	b.n	8004324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d106      	bne.n	80042b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f001 f8bd 	bl	8005430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8c4 	bl	800445c <UART_SetConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e022      	b.n	8004324 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d002      	beq.n	80042ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 fbb4 	bl	8004a54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800430a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fc3b 	bl	8004b98 <UART_CheckIdleState>
 8004322:	4603      	mov	r3, r0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3708      	adds	r7, #8
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	; 0x28
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	603b      	str	r3, [r7, #0]
 8004338:	4613      	mov	r3, r2
 800433a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004342:	2b20      	cmp	r3, #32
 8004344:	f040 8084 	bne.w	8004450 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <HAL_UART_Transmit+0x28>
 800434e:	88fb      	ldrh	r3, [r7, #6]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e07c      	b.n	8004452 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_UART_Transmit+0x3a>
 8004362:	2302      	movs	r3, #2
 8004364:	e075      	b.n	8004452 <HAL_UART_Transmit+0x126>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2221      	movs	r2, #33	; 0x21
 800437a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800437e:	f7fd f8bb 	bl	80014f8 <HAL_GetTick>
 8004382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	88fa      	ldrh	r2, [r7, #6]
 8004388:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439c:	d108      	bne.n	80043b0 <HAL_UART_Transmit+0x84>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	61bb      	str	r3, [r7, #24]
 80043ae:	e003      	b.n	80043b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80043c0:	e02d      	b.n	800441e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 fc2e 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e03a      	b.n	8004452 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10b      	bne.n	80043fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	881a      	ldrh	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ee:	b292      	uxth	r2, r2
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3302      	adds	r3, #2
 80043f6:	61bb      	str	r3, [r7, #24]
 80043f8:	e008      	b.n	800440c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b292      	uxth	r2, r2
 8004404:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3301      	adds	r3, #1
 800440a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b29a      	uxth	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1cb      	bne.n	80043c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	2200      	movs	r2, #0
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fbfa 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e006      	b.n	8004452 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b08c      	sub	sp, #48	; 0x30
 8004462:	af00      	add	r7, sp, #0
 8004464:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	431a      	orrs	r2, r3
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	431a      	orrs	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4baa      	ldr	r3, [pc, #680]	; (8004734 <UART_SetConfig+0x2d8>)
 800448c:	4013      	ands	r3, r2
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004494:	430b      	orrs	r3, r1
 8004496:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a9f      	ldr	r2, [pc, #636]	; (8004738 <UART_SetConfig+0x2dc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044dc:	430b      	orrs	r3, r1
 80044de:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	f023 010f 	bic.w	r1, r3, #15
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a90      	ldr	r2, [pc, #576]	; (800473c <UART_SetConfig+0x2e0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d125      	bne.n	800454c <UART_SetConfig+0xf0>
 8004500:	4b8f      	ldr	r3, [pc, #572]	; (8004740 <UART_SetConfig+0x2e4>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b03      	cmp	r3, #3
 800450c:	d81a      	bhi.n	8004544 <UART_SetConfig+0xe8>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0xb8>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004525 	.word	0x08004525
 8004518:	08004535 	.word	0x08004535
 800451c:	0800452d 	.word	0x0800452d
 8004520:	0800453d 	.word	0x0800453d
 8004524:	2301      	movs	r3, #1
 8004526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452a:	e116      	b.n	800475a <UART_SetConfig+0x2fe>
 800452c:	2302      	movs	r3, #2
 800452e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004532:	e112      	b.n	800475a <UART_SetConfig+0x2fe>
 8004534:	2304      	movs	r3, #4
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e10e      	b.n	800475a <UART_SetConfig+0x2fe>
 800453c:	2308      	movs	r3, #8
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e10a      	b.n	800475a <UART_SetConfig+0x2fe>
 8004544:	2310      	movs	r3, #16
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e106      	b.n	800475a <UART_SetConfig+0x2fe>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7c      	ldr	r2, [pc, #496]	; (8004744 <UART_SetConfig+0x2e8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d138      	bne.n	80045c8 <UART_SetConfig+0x16c>
 8004556:	4b7a      	ldr	r3, [pc, #488]	; (8004740 <UART_SetConfig+0x2e4>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f003 030c 	and.w	r3, r3, #12
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d82d      	bhi.n	80045c0 <UART_SetConfig+0x164>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <UART_SetConfig+0x110>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	080045a1 	.word	0x080045a1
 8004570:	080045c1 	.word	0x080045c1
 8004574:	080045c1 	.word	0x080045c1
 8004578:	080045c1 	.word	0x080045c1
 800457c:	080045b1 	.word	0x080045b1
 8004580:	080045c1 	.word	0x080045c1
 8004584:	080045c1 	.word	0x080045c1
 8004588:	080045c1 	.word	0x080045c1
 800458c:	080045a9 	.word	0x080045a9
 8004590:	080045c1 	.word	0x080045c1
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045c1 	.word	0x080045c1
 800459c:	080045b9 	.word	0x080045b9
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a6:	e0d8      	b.n	800475a <UART_SetConfig+0x2fe>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ae:	e0d4      	b.n	800475a <UART_SetConfig+0x2fe>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b6:	e0d0      	b.n	800475a <UART_SetConfig+0x2fe>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045be:	e0cc      	b.n	800475a <UART_SetConfig+0x2fe>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045c6:	e0c8      	b.n	800475a <UART_SetConfig+0x2fe>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a5e      	ldr	r2, [pc, #376]	; (8004748 <UART_SetConfig+0x2ec>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d125      	bne.n	800461e <UART_SetConfig+0x1c2>
 80045d2:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <UART_SetConfig+0x2e4>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045dc:	2b30      	cmp	r3, #48	; 0x30
 80045de:	d016      	beq.n	800460e <UART_SetConfig+0x1b2>
 80045e0:	2b30      	cmp	r3, #48	; 0x30
 80045e2:	d818      	bhi.n	8004616 <UART_SetConfig+0x1ba>
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d00a      	beq.n	80045fe <UART_SetConfig+0x1a2>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d814      	bhi.n	8004616 <UART_SetConfig+0x1ba>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <UART_SetConfig+0x19a>
 80045f0:	2b10      	cmp	r3, #16
 80045f2:	d008      	beq.n	8004606 <UART_SetConfig+0x1aa>
 80045f4:	e00f      	b.n	8004616 <UART_SetConfig+0x1ba>
 80045f6:	2300      	movs	r3, #0
 80045f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045fc:	e0ad      	b.n	800475a <UART_SetConfig+0x2fe>
 80045fe:	2302      	movs	r3, #2
 8004600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004604:	e0a9      	b.n	800475a <UART_SetConfig+0x2fe>
 8004606:	2304      	movs	r3, #4
 8004608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460c:	e0a5      	b.n	800475a <UART_SetConfig+0x2fe>
 800460e:	2308      	movs	r3, #8
 8004610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004614:	e0a1      	b.n	800475a <UART_SetConfig+0x2fe>
 8004616:	2310      	movs	r3, #16
 8004618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461c:	e09d      	b.n	800475a <UART_SetConfig+0x2fe>
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a4a      	ldr	r2, [pc, #296]	; (800474c <UART_SetConfig+0x2f0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d125      	bne.n	8004674 <UART_SetConfig+0x218>
 8004628:	4b45      	ldr	r3, [pc, #276]	; (8004740 <UART_SetConfig+0x2e4>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004632:	2bc0      	cmp	r3, #192	; 0xc0
 8004634:	d016      	beq.n	8004664 <UART_SetConfig+0x208>
 8004636:	2bc0      	cmp	r3, #192	; 0xc0
 8004638:	d818      	bhi.n	800466c <UART_SetConfig+0x210>
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d00a      	beq.n	8004654 <UART_SetConfig+0x1f8>
 800463e:	2b80      	cmp	r3, #128	; 0x80
 8004640:	d814      	bhi.n	800466c <UART_SetConfig+0x210>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x1f0>
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d008      	beq.n	800465c <UART_SetConfig+0x200>
 800464a:	e00f      	b.n	800466c <UART_SetConfig+0x210>
 800464c:	2300      	movs	r3, #0
 800464e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004652:	e082      	b.n	800475a <UART_SetConfig+0x2fe>
 8004654:	2302      	movs	r3, #2
 8004656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800465a:	e07e      	b.n	800475a <UART_SetConfig+0x2fe>
 800465c:	2304      	movs	r3, #4
 800465e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004662:	e07a      	b.n	800475a <UART_SetConfig+0x2fe>
 8004664:	2308      	movs	r3, #8
 8004666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800466a:	e076      	b.n	800475a <UART_SetConfig+0x2fe>
 800466c:	2310      	movs	r3, #16
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004672:	e072      	b.n	800475a <UART_SetConfig+0x2fe>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a35      	ldr	r2, [pc, #212]	; (8004750 <UART_SetConfig+0x2f4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d12a      	bne.n	80046d4 <UART_SetConfig+0x278>
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <UART_SetConfig+0x2e4>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468c:	d01a      	beq.n	80046c4 <UART_SetConfig+0x268>
 800468e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004692:	d81b      	bhi.n	80046cc <UART_SetConfig+0x270>
 8004694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004698:	d00c      	beq.n	80046b4 <UART_SetConfig+0x258>
 800469a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800469e:	d815      	bhi.n	80046cc <UART_SetConfig+0x270>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <UART_SetConfig+0x250>
 80046a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a8:	d008      	beq.n	80046bc <UART_SetConfig+0x260>
 80046aa:	e00f      	b.n	80046cc <UART_SetConfig+0x270>
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046b2:	e052      	b.n	800475a <UART_SetConfig+0x2fe>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ba:	e04e      	b.n	800475a <UART_SetConfig+0x2fe>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046c2:	e04a      	b.n	800475a <UART_SetConfig+0x2fe>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ca:	e046      	b.n	800475a <UART_SetConfig+0x2fe>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d2:	e042      	b.n	800475a <UART_SetConfig+0x2fe>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a17      	ldr	r2, [pc, #92]	; (8004738 <UART_SetConfig+0x2dc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d13a      	bne.n	8004754 <UART_SetConfig+0x2f8>
 80046de:	4b18      	ldr	r3, [pc, #96]	; (8004740 <UART_SetConfig+0x2e4>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ec:	d01a      	beq.n	8004724 <UART_SetConfig+0x2c8>
 80046ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046f2:	d81b      	bhi.n	800472c <UART_SetConfig+0x2d0>
 80046f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f8:	d00c      	beq.n	8004714 <UART_SetConfig+0x2b8>
 80046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046fe:	d815      	bhi.n	800472c <UART_SetConfig+0x2d0>
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <UART_SetConfig+0x2b0>
 8004704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004708:	d008      	beq.n	800471c <UART_SetConfig+0x2c0>
 800470a:	e00f      	b.n	800472c <UART_SetConfig+0x2d0>
 800470c:	2300      	movs	r3, #0
 800470e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004712:	e022      	b.n	800475a <UART_SetConfig+0x2fe>
 8004714:	2302      	movs	r3, #2
 8004716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800471a:	e01e      	b.n	800475a <UART_SetConfig+0x2fe>
 800471c:	2304      	movs	r3, #4
 800471e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004722:	e01a      	b.n	800475a <UART_SetConfig+0x2fe>
 8004724:	2308      	movs	r3, #8
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472a:	e016      	b.n	800475a <UART_SetConfig+0x2fe>
 800472c:	2310      	movs	r3, #16
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004732:	e012      	b.n	800475a <UART_SetConfig+0x2fe>
 8004734:	cfff69f3 	.word	0xcfff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	40004800 	.word	0x40004800
 800474c:	40004c00 	.word	0x40004c00
 8004750:	40005000 	.word	0x40005000
 8004754:	2310      	movs	r3, #16
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4aae      	ldr	r2, [pc, #696]	; (8004a18 <UART_SetConfig+0x5bc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	f040 8097 	bne.w	8004894 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004766:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800476a:	2b08      	cmp	r3, #8
 800476c:	d823      	bhi.n	80047b6 <UART_SetConfig+0x35a>
 800476e:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <UART_SetConfig+0x318>)
 8004770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004774:	08004799 	.word	0x08004799
 8004778:	080047b7 	.word	0x080047b7
 800477c:	080047a1 	.word	0x080047a1
 8004780:	080047b7 	.word	0x080047b7
 8004784:	080047a7 	.word	0x080047a7
 8004788:	080047b7 	.word	0x080047b7
 800478c:	080047b7 	.word	0x080047b7
 8004790:	080047b7 	.word	0x080047b7
 8004794:	080047af 	.word	0x080047af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004798:	f7fe ff74 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 800479c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800479e:	e010      	b.n	80047c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b9e      	ldr	r3, [pc, #632]	; (8004a1c <UART_SetConfig+0x5c0>)
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047a4:	e00d      	b.n	80047c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047a6:	f7fe fed5 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80047aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047ac:	e009      	b.n	80047c2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047b4:	e005      	b.n	80047c2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8130 	beq.w	8004a2a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	4a94      	ldr	r2, [pc, #592]	; (8004a20 <UART_SetConfig+0x5c4>)
 80047d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	4413      	add	r3, r2
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d305      	bcc.n	80047fa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d903      	bls.n	8004802 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004800:	e113      	b.n	8004a2a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	2200      	movs	r2, #0
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	60fa      	str	r2, [r7, #12]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	4a84      	ldr	r2, [pc, #528]	; (8004a20 <UART_SetConfig+0x5c4>)
 8004810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004814:	b29b      	uxth	r3, r3
 8004816:	2200      	movs	r2, #0
 8004818:	603b      	str	r3, [r7, #0]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004820:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004824:	f7fc f9d8 	bl	8000bd8 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	020b      	lsls	r3, r1, #8
 800483a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800483e:	0202      	lsls	r2, r0, #8
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	6849      	ldr	r1, [r1, #4]
 8004844:	0849      	lsrs	r1, r1, #1
 8004846:	2000      	movs	r0, #0
 8004848:	460c      	mov	r4, r1
 800484a:	4605      	mov	r5, r0
 800484c:	eb12 0804 	adds.w	r8, r2, r4
 8004850:	eb43 0905 	adc.w	r9, r3, r5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	469a      	mov	sl, r3
 800485c:	4693      	mov	fp, r2
 800485e:	4652      	mov	r2, sl
 8004860:	465b      	mov	r3, fp
 8004862:	4640      	mov	r0, r8
 8004864:	4649      	mov	r1, r9
 8004866:	f7fc f9b7 	bl	8000bd8 <__aeabi_uldivmod>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4613      	mov	r3, r2
 8004870:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004878:	d308      	bcc.n	800488c <UART_SetConfig+0x430>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004880:	d204      	bcs.n	800488c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	6a3a      	ldr	r2, [r7, #32]
 8004888:	60da      	str	r2, [r3, #12]
 800488a:	e0ce      	b.n	8004a2a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004892:	e0ca      	b.n	8004a2a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489c:	d166      	bne.n	800496c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800489e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d827      	bhi.n	80048f6 <UART_SetConfig+0x49a>
 80048a6:	a201      	add	r2, pc, #4	; (adr r2, 80048ac <UART_SetConfig+0x450>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d9 	.word	0x080048d9
 80048b4:	080048e1 	.word	0x080048e1
 80048b8:	080048f7 	.word	0x080048f7
 80048bc:	080048e7 	.word	0x080048e7
 80048c0:	080048f7 	.word	0x080048f7
 80048c4:	080048f7 	.word	0x080048f7
 80048c8:	080048f7 	.word	0x080048f7
 80048cc:	080048ef 	.word	0x080048ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d0:	f7fe fed8 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048d6:	e014      	b.n	8004902 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d8:	f7fe feea 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048de:	e010      	b.n	8004902 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e0:	4b4e      	ldr	r3, [pc, #312]	; (8004a1c <UART_SetConfig+0x5c0>)
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048e4:	e00d      	b.n	8004902 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e6:	f7fe fe35 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80048ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048ec:	e009      	b.n	8004902 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048f4:	e005      	b.n	8004902 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004900:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8090 	beq.w	8004a2a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	4a44      	ldr	r2, [pc, #272]	; (8004a20 <UART_SetConfig+0x5c4>)
 8004910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004914:	461a      	mov	r2, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	fbb3 f3f2 	udiv	r3, r3, r2
 800491c:	005a      	lsls	r2, r3, #1
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	441a      	add	r2, r3
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2b0f      	cmp	r3, #15
 8004934:	d916      	bls.n	8004964 <UART_SetConfig+0x508>
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d212      	bcs.n	8004964 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	b29b      	uxth	r3, r3
 8004942:	f023 030f 	bic.w	r3, r3, #15
 8004946:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	085b      	lsrs	r3, r3, #1
 800494c:	b29b      	uxth	r3, r3
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	b29a      	uxth	r2, r3
 8004954:	8bfb      	ldrh	r3, [r7, #30]
 8004956:	4313      	orrs	r3, r2
 8004958:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	8bfa      	ldrh	r2, [r7, #30]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e062      	b.n	8004a2a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800496a:	e05e      	b.n	8004a2a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004970:	2b08      	cmp	r3, #8
 8004972:	d828      	bhi.n	80049c6 <UART_SetConfig+0x56a>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x520>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b7 	.word	0x080049b7
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049c7 	.word	0x080049c7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fe fe70 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a6:	e014      	b.n	80049d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a8:	f7fe fe82 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ae:	e010      	b.n	80049d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <UART_SetConfig+0x5c0>)
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049b4:	e00d      	b.n	80049d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fdcd 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80049ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049bc:	e009      	b.n	80049d2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049c4:	e005      	b.n	80049d2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049d0:	bf00      	nop
    }

    if (pclk != 0U)
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d028      	beq.n	8004a2a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <UART_SetConfig+0x5c4>)
 80049de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	441a      	add	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d910      	bls.n	8004a24 <UART_SetConfig+0x5c8>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a08:	d20c      	bcs.n	8004a24 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	e009      	b.n	8004a2a <UART_SetConfig+0x5ce>
 8004a16:	bf00      	nop
 8004a18:	40008000 	.word	0x40008000
 8004a1c:	00f42400 	.word	0x00f42400
 8004a20:	08008288 	.word	0x08008288
      }
      else
      {
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2200      	movs	r2, #0
 8004a44:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	; 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01a      	beq.n	8004b6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b52:	d10a      	bne.n	8004b6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	605a      	str	r2, [r3, #4]
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	370c      	adds	r7, #12
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ba8:	f7fc fca6 	bl	80014f8 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d10e      	bne.n	8004bda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f82f 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e025      	b.n	8004c26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d10e      	bne.n	8004c06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f819 	bl	8004c2e <UART_WaitOnFlagUntilTimeout>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e00f      	b.n	8004c26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2220      	movs	r2, #32
 8004c0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b09c      	sub	sp, #112	; 0x70
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	60f8      	str	r0, [r7, #12]
 8004c36:	60b9      	str	r1, [r7, #8]
 8004c38:	603b      	str	r3, [r7, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	e0a9      	b.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c46:	f000 80a5 	beq.w	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7fc fc55 	bl	80014f8 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d302      	bcc.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d140      	bne.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c74:	667b      	str	r3, [r7, #100]	; 0x64
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e069      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d051      	beq.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cfe:	d149      	bne.n	8004d94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d28:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e6      	bne.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d5c:	623a      	str	r2, [r7, #32]
 8004d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	69f9      	ldr	r1, [r7, #28]
 8004d62:	6a3a      	ldr	r2, [r7, #32]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e010      	b.n	8004db6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	69da      	ldr	r2, [r3, #28]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	f43f af46 	beq.w	8004c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3770      	adds	r7, #112	; 0x70
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e027      	b.n	8004e24 <HAL_UARTEx_DisableFifoMode+0x66>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	; 0x24
 8004de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d101      	bne.n	8004e48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e44:	2302      	movs	r3, #2
 8004e46:	e02d      	b.n	8004ea4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2224      	movs	r2, #36	; 0x24
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0201 	bic.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f84f 	bl	8004f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e02d      	b.n	8004f20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2224      	movs	r2, #36	; 0x24
 8004ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f811 	bl	8004f28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f48:	e031      	b.n	8004fae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f4e:	2308      	movs	r3, #8
 8004f50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	0e5b      	lsrs	r3, r3, #25
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	0f5b      	lsrs	r3, r3, #29
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	7b3a      	ldrb	r2, [r7, #12]
 8004f76:	4911      	ldr	r1, [pc, #68]	; (8004fbc <UARTEx_SetNbDataToProcess+0x94>)
 8004f78:	5c8a      	ldrb	r2, [r1, r2]
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f7e:	7b3a      	ldrb	r2, [r7, #12]
 8004f80:	490f      	ldr	r1, [pc, #60]	; (8004fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8004f82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f84:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	7b7a      	ldrb	r2, [r7, #13]
 8004f94:	4909      	ldr	r1, [pc, #36]	; (8004fbc <UARTEx_SetNbDataToProcess+0x94>)
 8004f96:	5c8a      	ldrb	r2, [r1, r2]
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f9c:	7b7a      	ldrb	r2, [r7, #13]
 8004f9e:	4908      	ldr	r1, [pc, #32]	; (8004fc0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	080082a0 	.word	0x080082a0
 8004fc0:	080082a8 	.word	0x080082a8

08004fc4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004fcc:	1d39      	adds	r1, r7, #4
 8004fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	4803      	ldr	r0, [pc, #12]	; (8004fe4 <__io_putchar+0x20>)
 8004fd6:	f7ff f9a9 	bl	800432c <HAL_UART_Transmit>
  return ch;
 8004fda:	687b      	ldr	r3, [r7, #4]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	200002dc 	.word	0x200002dc

08004fe8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	4603      	mov	r3, r0
 8004ff0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 8004ff2:	88fb      	ldrh	r3, [r7, #6]
 8004ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff8:	d107      	bne.n	800500a <HAL_GPIO_EXTI_Callback+0x22>

		// print something

		printf("That was easy.");
 8004ffa:	4806      	ldr	r0, [pc, #24]	; (8005014 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004ffc:	f001 f876 	bl	80060ec <iprintf>
		HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin); // toggle LED as user feedback for a successful button press
 8005000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005004:	4804      	ldr	r0, [pc, #16]	; (8005018 <HAL_GPIO_EXTI_Callback+0x30>)
 8005006:	f7fc fe31 	bl	8001c6c <HAL_GPIO_TogglePin>
	}
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	08008278 	.word	0x08008278
 8005018:	48000400 	.word	0x48000400

0800501c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005022:	f7fc fa01 	bl	8001428 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005026:	f000 f809 	bl	800503c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800502a:	f000 f8e5 	bl	80051f8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800502e:	f000 f857 	bl	80050e0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8005032:	f000 f895 	bl	8005160 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // I2C initializations
  BSP_ACCELERO_Init();
 8005036:	f7fc f8a1 	bl	800117c <BSP_ACCELERO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800503a:	e7fe      	b.n	800503a <main+0x1e>

0800503c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b096      	sub	sp, #88	; 0x58
 8005040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005042:	f107 0314 	add.w	r3, r7, #20
 8005046:	2244      	movs	r2, #68	; 0x44
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fbdc 	bl	8005808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005050:	463b      	mov	r3, r7
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	605a      	str	r2, [r3, #4]
 8005058:	609a      	str	r2, [r3, #8]
 800505a:	60da      	str	r2, [r3, #12]
 800505c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800505e:	2000      	movs	r0, #0
 8005060:	f7fd fc80 	bl	8002964 <HAL_PWREx_ControlVoltageScaling>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800506a:	f000 f935 	bl	80052d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800506e:	2310      	movs	r3, #16
 8005070:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005072:	2301      	movs	r3, #1
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800507a:	2360      	movs	r3, #96	; 0x60
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800507e:	2302      	movs	r3, #2
 8005080:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005082:	2301      	movs	r3, #1
 8005084:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800508a:	233c      	movs	r3, #60	; 0x3c
 800508c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800508e:	2302      	movs	r3, #2
 8005090:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005092:	2302      	movs	r3, #2
 8005094:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005096:	2302      	movs	r3, #2
 8005098:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800509a:	f107 0314 	add.w	r3, r7, #20
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fd04 	bl	8002aac <HAL_RCC_OscConfig>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <SystemClock_Config+0x72>
  {
    Error_Handler();
 80050aa:	f000 f915 	bl	80052d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050ae:	230f      	movs	r3, #15
 80050b0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050b2:	2303      	movs	r3, #3
 80050b4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050be:	2300      	movs	r3, #0
 80050c0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80050c2:	463b      	mov	r3, r7
 80050c4:	2105      	movs	r1, #5
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe f90a 	bl	80032e0 <HAL_RCC_ClockConfig>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80050d2:	f000 f901 	bl	80052d8 <Error_Handler>
  }
}
 80050d6:	bf00      	nop
 80050d8:	3758      	adds	r7, #88	; 0x58
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80050e4:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <MX_I2C2_Init+0x74>)
 80050e6:	4a1c      	ldr	r2, [pc, #112]	; (8005158 <MX_I2C2_Init+0x78>)
 80050e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80050ea:	4b1a      	ldr	r3, [pc, #104]	; (8005154 <MX_I2C2_Init+0x74>)
 80050ec:	4a1b      	ldr	r2, [pc, #108]	; (800515c <MX_I2C2_Init+0x7c>)
 80050ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80050f0:	4b18      	ldr	r3, [pc, #96]	; (8005154 <MX_I2C2_Init+0x74>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80050f6:	4b17      	ldr	r3, [pc, #92]	; (8005154 <MX_I2C2_Init+0x74>)
 80050f8:	2201      	movs	r2, #1
 80050fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050fc:	4b15      	ldr	r3, [pc, #84]	; (8005154 <MX_I2C2_Init+0x74>)
 80050fe:	2200      	movs	r2, #0
 8005100:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005102:	4b14      	ldr	r3, [pc, #80]	; (8005154 <MX_I2C2_Init+0x74>)
 8005104:	2200      	movs	r2, #0
 8005106:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005108:	4b12      	ldr	r3, [pc, #72]	; (8005154 <MX_I2C2_Init+0x74>)
 800510a:	2200      	movs	r2, #0
 800510c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <MX_I2C2_Init+0x74>)
 8005110:	2200      	movs	r2, #0
 8005112:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <MX_I2C2_Init+0x74>)
 8005116:	2200      	movs	r2, #0
 8005118:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800511a:	480e      	ldr	r0, [pc, #56]	; (8005154 <MX_I2C2_Init+0x74>)
 800511c:	f7fc fdd8 	bl	8001cd0 <HAL_I2C_Init>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005126:	f000 f8d7 	bl	80052d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800512a:	2100      	movs	r1, #0
 800512c:	4809      	ldr	r0, [pc, #36]	; (8005154 <MX_I2C2_Init+0x74>)
 800512e:	f7fd fb61 	bl	80027f4 <HAL_I2CEx_ConfigAnalogFilter>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005138:	f000 f8ce 	bl	80052d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800513c:	2100      	movs	r1, #0
 800513e:	4805      	ldr	r0, [pc, #20]	; (8005154 <MX_I2C2_Init+0x74>)
 8005140:	f7fd fba3 	bl	800288a <HAL_I2CEx_ConfigDigitalFilter>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800514a:	f000 f8c5 	bl	80052d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000288 	.word	0x20000288
 8005158:	40005800 	.word	0x40005800
 800515c:	307075b1 	.word	0x307075b1

08005160 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005164:	4b22      	ldr	r3, [pc, #136]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 8005166:	4a23      	ldr	r2, [pc, #140]	; (80051f4 <MX_USART2_UART_Init+0x94>)
 8005168:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800516a:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 800516c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005170:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005172:	4b1f      	ldr	r3, [pc, #124]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 8005174:	2200      	movs	r2, #0
 8005176:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 800517a:	2200      	movs	r2, #0
 800517c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 8005180:	2200      	movs	r2, #0
 8005182:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 8005186:	220c      	movs	r2, #12
 8005188:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 800518c:	2200      	movs	r2, #0
 800518e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 8005192:	2200      	movs	r2, #0
 8005194:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 8005198:	2200      	movs	r2, #0
 800519a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 800519e:	2200      	movs	r2, #0
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051a2:	4b13      	ldr	r3, [pc, #76]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051a8:	4811      	ldr	r0, [pc, #68]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 80051aa:	f7ff f86f 	bl	800428c <HAL_UART_Init>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80051b4:	f000 f890 	bl	80052d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051b8:	2100      	movs	r1, #0
 80051ba:	480d      	ldr	r0, [pc, #52]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 80051bc:	f7ff fe38 	bl	8004e30 <HAL_UARTEx_SetTxFifoThreshold>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80051c6:	f000 f887 	bl	80052d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051ca:	2100      	movs	r1, #0
 80051cc:	4808      	ldr	r0, [pc, #32]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 80051ce:	f7ff fe6d 	bl	8004eac <HAL_UARTEx_SetRxFifoThreshold>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80051d8:	f000 f87e 	bl	80052d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80051dc:	4804      	ldr	r0, [pc, #16]	; (80051f0 <MX_USART2_UART_Init+0x90>)
 80051de:	f7ff fdee 	bl	8004dbe <HAL_UARTEx_DisableFifoMode>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80051e8:	f000 f876 	bl	80052d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80051ec:	bf00      	nop
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	200002dc 	.word	0x200002dc
 80051f4:	40004400 	.word	0x40004400

080051f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fe:	f107 0314 	add.w	r3, r7, #20
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	60da      	str	r2, [r3, #12]
 800520c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800520e:	4b2f      	ldr	r3, [pc, #188]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005212:	4a2e      	ldr	r2, [pc, #184]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005214:	f043 0304 	orr.w	r3, r3, #4
 8005218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800521a:	4b2c      	ldr	r3, [pc, #176]	; (80052cc <MX_GPIO_Init+0xd4>)
 800521c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800522a:	4a28      	ldr	r2, [pc, #160]	; (80052cc <MX_GPIO_Init+0xd4>)
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005232:	4b26      	ldr	r3, [pc, #152]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800523e:	4b23      	ldr	r3, [pc, #140]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005242:	4a22      	ldr	r2, [pc, #136]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800524a:	4b20      	ldr	r3, [pc, #128]	; (80052cc <MX_GPIO_Init+0xd4>)
 800524c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	60bb      	str	r3, [r7, #8]
 8005254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <MX_GPIO_Init+0xd4>)
 800525c:	f043 0308 	orr.w	r3, r3, #8
 8005260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <MX_GPIO_Init+0xd4>)
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 800526e:	2200      	movs	r2, #0
 8005270:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005274:	4816      	ldr	r0, [pc, #88]	; (80052d0 <MX_GPIO_Init+0xd8>)
 8005276:	f7fc fce1 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 800527a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800527e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005280:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 800528a:	f107 0314 	add.w	r3, r7, #20
 800528e:	4619      	mov	r1, r3
 8005290:	4810      	ldr	r0, [pc, #64]	; (80052d4 <MX_GPIO_Init+0xdc>)
 8005292:	f7fc fa4f 	bl	8001734 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8005296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800529a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800529c:	2301      	movs	r3, #1
 800529e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a4:	2300      	movs	r3, #0
 80052a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 80052a8:	f107 0314 	add.w	r3, r7, #20
 80052ac:	4619      	mov	r1, r3
 80052ae:	4808      	ldr	r0, [pc, #32]	; (80052d0 <MX_GPIO_Init+0xd8>)
 80052b0:	f7fc fa40 	bl	8001734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80052b4:	2200      	movs	r2, #0
 80052b6:	2100      	movs	r1, #0
 80052b8:	2028      	movs	r0, #40	; 0x28
 80052ba:	f7fc fa04 	bl	80016c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80052be:	2028      	movs	r0, #40	; 0x28
 80052c0:	f7fc fa1d 	bl	80016fe <HAL_NVIC_EnableIRQ>

}
 80052c4:	bf00      	nop
 80052c6:	3728      	adds	r7, #40	; 0x28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	48000400 	.word	0x48000400
 80052d4:	48000800 	.word	0x48000800

080052d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80052dc:	b672      	cpsid	i
}
 80052de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052e0:	e7fe      	b.n	80052e0 <Error_Handler+0x8>
	...

080052e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_MspInit+0x44>)
 80052ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ee:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <HAL_MspInit+0x44>)
 80052f0:	f043 0301 	orr.w	r3, r3, #1
 80052f4:	6613      	str	r3, [r2, #96]	; 0x60
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_MspInit+0x44>)
 80052f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	607b      	str	r3, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005302:	4b09      	ldr	r3, [pc, #36]	; (8005328 <HAL_MspInit+0x44>)
 8005304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005306:	4a08      	ldr	r2, [pc, #32]	; (8005328 <HAL_MspInit+0x44>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530c:	6593      	str	r3, [r2, #88]	; 0x58
 800530e:	4b06      	ldr	r3, [pc, #24]	; (8005328 <HAL_MspInit+0x44>)
 8005310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000

0800532c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b0ae      	sub	sp, #184	; 0xb8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005344:	f107 0310 	add.w	r3, r7, #16
 8005348:	2294      	movs	r2, #148	; 0x94
 800534a:	2100      	movs	r1, #0
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fa5b 	bl	8005808 <memset>
  if(hi2c->Instance==I2C2)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <HAL_I2C_MspInit+0xb0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d13b      	bne.n	80053d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800535c:	2380      	movs	r3, #128	; 0x80
 800535e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8005360:	2300      	movs	r3, #0
 8005362:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005364:	f107 0310 	add.w	r3, r7, #16
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fa77 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005374:	f7ff ffb0 	bl	80052d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005378:	4b19      	ldr	r3, [pc, #100]	; (80053e0 <HAL_I2C_MspInit+0xb4>)
 800537a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800537c:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <HAL_I2C_MspInit+0xb4>)
 800537e:	f043 0302 	orr.w	r3, r3, #2
 8005382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005384:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <HAL_I2C_MspInit+0xb4>)
 8005386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005390:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005398:	2312      	movs	r3, #18
 800539a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053a4:	2303      	movs	r3, #3
 80053a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80053aa:	2304      	movs	r3, #4
 80053ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80053b4:	4619      	mov	r1, r3
 80053b6:	480b      	ldr	r0, [pc, #44]	; (80053e4 <HAL_I2C_MspInit+0xb8>)
 80053b8:	f7fc f9bc 	bl	8001734 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80053bc:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <HAL_I2C_MspInit+0xb4>)
 80053be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c0:	4a07      	ldr	r2, [pc, #28]	; (80053e0 <HAL_I2C_MspInit+0xb4>)
 80053c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053c6:	6593      	str	r3, [r2, #88]	; 0x58
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <HAL_I2C_MspInit+0xb4>)
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80053d4:	bf00      	nop
 80053d6:	37b8      	adds	r7, #184	; 0xb8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40005800 	.word	0x40005800
 80053e0:	40021000 	.word	0x40021000
 80053e4:	48000400 	.word	0x48000400

080053e8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <HAL_I2C_MspDeInit+0x3c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10f      	bne.n	800541a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_I2C_MspDeInit+0x40>)
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <HAL_I2C_MspDeInit+0x40>)
 8005400:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005404:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8005406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800540a:	4808      	ldr	r0, [pc, #32]	; (800542c <HAL_I2C_MspDeInit+0x44>)
 800540c:	f7fc fb24 	bl	8001a58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8005410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005414:	4805      	ldr	r0, [pc, #20]	; (800542c <HAL_I2C_MspDeInit+0x44>)
 8005416:	f7fc fb1f 	bl	8001a58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800541a:	bf00      	nop
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40005800 	.word	0x40005800
 8005428:	40021000 	.word	0x40021000
 800542c:	48000400 	.word	0x48000400

08005430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b0b0      	sub	sp, #192	; 0xc0
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005438:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	60da      	str	r2, [r3, #12]
 8005446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005448:	f107 0318 	add.w	r3, r7, #24
 800544c:	2294      	movs	r2, #148	; 0x94
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f000 f9d9 	bl	8005808 <memset>
  if(huart->Instance==USART2)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a32      	ldr	r2, [pc, #200]	; (8005524 <HAL_UART_MspInit+0xf4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d15d      	bne.n	800551c <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005460:	2302      	movs	r3, #2
 8005462:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005464:	2300      	movs	r3, #0
 8005466:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005468:	f107 0318 	add.w	r3, r7, #24
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe f9f5 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005478:	f7ff ff2e 	bl	80052d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800547c:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_UART_MspInit+0xf8>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	4a29      	ldr	r2, [pc, #164]	; (8005528 <HAL_UART_MspInit+0xf8>)
 8005482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005486:	6593      	str	r3, [r2, #88]	; 0x58
 8005488:	4b27      	ldr	r3, [pc, #156]	; (8005528 <HAL_UART_MspInit+0xf8>)
 800548a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800548c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005494:	4b24      	ldr	r3, [pc, #144]	; (8005528 <HAL_UART_MspInit+0xf8>)
 8005496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005498:	4a23      	ldr	r2, [pc, #140]	; (8005528 <HAL_UART_MspInit+0xf8>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054a0:	4b21      	ldr	r3, [pc, #132]	; (8005528 <HAL_UART_MspInit+0xf8>)
 80054a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054ac:	4b1e      	ldr	r3, [pc, #120]	; (8005528 <HAL_UART_MspInit+0xf8>)
 80054ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <HAL_UART_MspInit+0xf8>)
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_UART_MspInit+0xf8>)
 80054ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80054c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054cc:	2302      	movs	r3, #2
 80054ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d8:	2303      	movs	r3, #3
 80054da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80054de:	2303      	movs	r3, #3
 80054e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80054e8:	4619      	mov	r1, r3
 80054ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054ee:	f7fc f921 	bl	8001734 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80054f2:	2320      	movs	r3, #32
 80054f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f8:	2302      	movs	r3, #2
 80054fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005504:	2303      	movs	r3, #3
 8005506:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800550a:	2307      	movs	r3, #7
 800550c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005510:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005514:	4619      	mov	r1, r3
 8005516:	4805      	ldr	r0, [pc, #20]	; (800552c <HAL_UART_MspInit+0xfc>)
 8005518:	f7fc f90c 	bl	8001734 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800551c:	bf00      	nop
 800551e:	37c0      	adds	r7, #192	; 0xc0
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40004400 	.word	0x40004400
 8005528:	40021000 	.word	0x40021000
 800552c:	48000c00 	.word	0x48000c00

08005530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005534:	e7fe      	b.n	8005534 <NMI_Handler+0x4>

08005536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005536:	b480      	push	{r7}
 8005538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800553a:	e7fe      	b.n	800553a <HardFault_Handler+0x4>

0800553c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800553c:	b480      	push	{r7}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005540:	e7fe      	b.n	8005540 <MemManage_Handler+0x4>

08005542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005542:	b480      	push	{r7}
 8005544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005546:	e7fe      	b.n	8005546 <BusFault_Handler+0x4>

08005548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800554c:	e7fe      	b.n	800554c <UsageFault_Handler+0x4>

0800554e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800554e:	b480      	push	{r7}
 8005550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005552:	bf00      	nop
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800557c:	f7fb ffa8 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	bd80      	pop	{r7, pc}

08005584 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 8005588:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800558c:	f7fc fb88 	bl	8001ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005590:	bf00      	nop
 8005592:	bd80      	pop	{r7, pc}

08005594 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  return 1;
 8005598:	2301      	movs	r3, #1
}
 800559a:	4618      	mov	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <_kill>:

int _kill(int pid, int sig)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80055ae:	f000 f8f3 	bl	8005798 <__errno>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2216      	movs	r2, #22
 80055b6:	601a      	str	r2, [r3, #0]
  return -1;
 80055b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <_exit>:

void _exit (int status)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80055cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ffe7 	bl	80055a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80055d6:	e7fe      	b.n	80055d6 <_exit+0x12>

080055d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	e00a      	b.n	8005600 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80055ea:	f3af 8000 	nop.w
 80055ee:	4601      	mov	r1, r0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	60ba      	str	r2, [r7, #8]
 80055f6:	b2ca      	uxtb	r2, r1
 80055f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	dbf0      	blt.n	80055ea <_read+0x12>
  }

  return len;
 8005608:	687b      	ldr	r3, [r7, #4]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800561e:	2300      	movs	r3, #0
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e009      	b.n	8005638 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	60ba      	str	r2, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fcc9 	bl	8004fc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	429a      	cmp	r2, r3
 800563e:	dbf1      	blt.n	8005624 <_write+0x12>
  }
  return len;
 8005640:	687b      	ldr	r3, [r7, #4]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3718      	adds	r7, #24
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <_close>:

int _close(int file)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr

08005662 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
 800566a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005672:	605a      	str	r2, [r3, #4]
  return 0;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <_isatty>:

int _isatty(int file)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800568a:	2301      	movs	r3, #1
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
	...

080056b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80056bc:	4a14      	ldr	r2, [pc, #80]	; (8005710 <_sbrk+0x5c>)
 80056be:	4b15      	ldr	r3, [pc, #84]	; (8005714 <_sbrk+0x60>)
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80056c8:	4b13      	ldr	r3, [pc, #76]	; (8005718 <_sbrk+0x64>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056d0:	4b11      	ldr	r3, [pc, #68]	; (8005718 <_sbrk+0x64>)
 80056d2:	4a12      	ldr	r2, [pc, #72]	; (800571c <_sbrk+0x68>)
 80056d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056d6:	4b10      	ldr	r3, [pc, #64]	; (8005718 <_sbrk+0x64>)
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4413      	add	r3, r2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d207      	bcs.n	80056f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056e4:	f000 f858 	bl	8005798 <__errno>
 80056e8:	4603      	mov	r3, r0
 80056ea:	220c      	movs	r2, #12
 80056ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056f2:	e009      	b.n	8005708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056f4:	4b08      	ldr	r3, [pc, #32]	; (8005718 <_sbrk+0x64>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <_sbrk+0x64>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	4a05      	ldr	r2, [pc, #20]	; (8005718 <_sbrk+0x64>)
 8005704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005706:	68fb      	ldr	r3, [r7, #12]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	200a0000 	.word	0x200a0000
 8005714:	00000400 	.word	0x00000400
 8005718:	2000036c 	.word	0x2000036c
 800571c:	20000380 	.word	0x20000380

08005720 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <SystemInit+0x20>)
 8005726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <SystemInit+0x20>)
 800572c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800577c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005748:	f7ff ffea 	bl	8005720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800574c:	480c      	ldr	r0, [pc, #48]	; (8005780 <LoopForever+0x6>)
  ldr r1, =_edata
 800574e:	490d      	ldr	r1, [pc, #52]	; (8005784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005750:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <LoopForever+0xe>)
  movs r3, #0
 8005752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005754:	e002      	b.n	800575c <LoopCopyDataInit>

08005756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800575a:	3304      	adds	r3, #4

0800575c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800575c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800575e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005760:	d3f9      	bcc.n	8005756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005762:	4a0a      	ldr	r2, [pc, #40]	; (800578c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005764:	4c0a      	ldr	r4, [pc, #40]	; (8005790 <LoopForever+0x16>)
  movs r3, #0
 8005766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005768:	e001      	b.n	800576e <LoopFillZerobss>

0800576a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800576a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800576c:	3204      	adds	r2, #4

0800576e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800576e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005770:	d3fb      	bcc.n	800576a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005772:	f000 f817 	bl	80057a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005776:	f7ff fc51 	bl	800501c <main>

0800577a <LoopForever>:

LoopForever:
    b LoopForever
 800577a:	e7fe      	b.n	800577a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800577c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8005780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005784:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8005788:	080086e4 	.word	0x080086e4
  ldr r2, =_sbss
 800578c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8005790:	20000380 	.word	0x20000380

08005794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005794:	e7fe      	b.n	8005794 <ADC1_IRQHandler>
	...

08005798 <__errno>:
 8005798:	4b01      	ldr	r3, [pc, #4]	; (80057a0 <__errno+0x8>)
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	20000040 	.word	0x20000040

080057a4 <__libc_init_array>:
 80057a4:	b570      	push	{r4, r5, r6, lr}
 80057a6:	4d0d      	ldr	r5, [pc, #52]	; (80057dc <__libc_init_array+0x38>)
 80057a8:	4c0d      	ldr	r4, [pc, #52]	; (80057e0 <__libc_init_array+0x3c>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	2600      	movs	r6, #0
 80057b0:	42a6      	cmp	r6, r4
 80057b2:	d109      	bne.n	80057c8 <__libc_init_array+0x24>
 80057b4:	4d0b      	ldr	r5, [pc, #44]	; (80057e4 <__libc_init_array+0x40>)
 80057b6:	4c0c      	ldr	r4, [pc, #48]	; (80057e8 <__libc_init_array+0x44>)
 80057b8:	f002 fd50 	bl	800825c <_init>
 80057bc:	1b64      	subs	r4, r4, r5
 80057be:	10a4      	asrs	r4, r4, #2
 80057c0:	2600      	movs	r6, #0
 80057c2:	42a6      	cmp	r6, r4
 80057c4:	d105      	bne.n	80057d2 <__libc_init_array+0x2e>
 80057c6:	bd70      	pop	{r4, r5, r6, pc}
 80057c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80057cc:	4798      	blx	r3
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7ee      	b.n	80057b0 <__libc_init_array+0xc>
 80057d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d6:	4798      	blx	r3
 80057d8:	3601      	adds	r6, #1
 80057da:	e7f2      	b.n	80057c2 <__libc_init_array+0x1e>
 80057dc:	080086dc 	.word	0x080086dc
 80057e0:	080086dc 	.word	0x080086dc
 80057e4:	080086dc 	.word	0x080086dc
 80057e8:	080086e0 	.word	0x080086e0

080057ec <memcpy>:
 80057ec:	440a      	add	r2, r1
 80057ee:	4291      	cmp	r1, r2
 80057f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057f4:	d100      	bne.n	80057f8 <memcpy+0xc>
 80057f6:	4770      	bx	lr
 80057f8:	b510      	push	{r4, lr}
 80057fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005802:	4291      	cmp	r1, r2
 8005804:	d1f9      	bne.n	80057fa <memcpy+0xe>
 8005806:	bd10      	pop	{r4, pc}

08005808 <memset>:
 8005808:	4402      	add	r2, r0
 800580a:	4603      	mov	r3, r0
 800580c:	4293      	cmp	r3, r2
 800580e:	d100      	bne.n	8005812 <memset+0xa>
 8005810:	4770      	bx	lr
 8005812:	f803 1b01 	strb.w	r1, [r3], #1
 8005816:	e7f9      	b.n	800580c <memset+0x4>

08005818 <__cvt>:
 8005818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	ec55 4b10 	vmov	r4, r5, d0
 8005820:	2d00      	cmp	r5, #0
 8005822:	460e      	mov	r6, r1
 8005824:	4619      	mov	r1, r3
 8005826:	462b      	mov	r3, r5
 8005828:	bfbb      	ittet	lt
 800582a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800582e:	461d      	movlt	r5, r3
 8005830:	2300      	movge	r3, #0
 8005832:	232d      	movlt	r3, #45	; 0x2d
 8005834:	700b      	strb	r3, [r1, #0]
 8005836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005838:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800583c:	4691      	mov	r9, r2
 800583e:	f023 0820 	bic.w	r8, r3, #32
 8005842:	bfbc      	itt	lt
 8005844:	4622      	movlt	r2, r4
 8005846:	4614      	movlt	r4, r2
 8005848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800584c:	d005      	beq.n	800585a <__cvt+0x42>
 800584e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005852:	d100      	bne.n	8005856 <__cvt+0x3e>
 8005854:	3601      	adds	r6, #1
 8005856:	2102      	movs	r1, #2
 8005858:	e000      	b.n	800585c <__cvt+0x44>
 800585a:	2103      	movs	r1, #3
 800585c:	ab03      	add	r3, sp, #12
 800585e:	9301      	str	r3, [sp, #4]
 8005860:	ab02      	add	r3, sp, #8
 8005862:	9300      	str	r3, [sp, #0]
 8005864:	ec45 4b10 	vmov	d0, r4, r5
 8005868:	4653      	mov	r3, sl
 800586a:	4632      	mov	r2, r6
 800586c:	f000 fce4 	bl	8006238 <_dtoa_r>
 8005870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005874:	4607      	mov	r7, r0
 8005876:	d102      	bne.n	800587e <__cvt+0x66>
 8005878:	f019 0f01 	tst.w	r9, #1
 800587c:	d022      	beq.n	80058c4 <__cvt+0xac>
 800587e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005882:	eb07 0906 	add.w	r9, r7, r6
 8005886:	d110      	bne.n	80058aa <__cvt+0x92>
 8005888:	783b      	ldrb	r3, [r7, #0]
 800588a:	2b30      	cmp	r3, #48	; 0x30
 800588c:	d10a      	bne.n	80058a4 <__cvt+0x8c>
 800588e:	2200      	movs	r2, #0
 8005890:	2300      	movs	r3, #0
 8005892:	4620      	mov	r0, r4
 8005894:	4629      	mov	r1, r5
 8005896:	f7fb f92f 	bl	8000af8 <__aeabi_dcmpeq>
 800589a:	b918      	cbnz	r0, 80058a4 <__cvt+0x8c>
 800589c:	f1c6 0601 	rsb	r6, r6, #1
 80058a0:	f8ca 6000 	str.w	r6, [sl]
 80058a4:	f8da 3000 	ldr.w	r3, [sl]
 80058a8:	4499      	add	r9, r3
 80058aa:	2200      	movs	r2, #0
 80058ac:	2300      	movs	r3, #0
 80058ae:	4620      	mov	r0, r4
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7fb f921 	bl	8000af8 <__aeabi_dcmpeq>
 80058b6:	b108      	cbz	r0, 80058bc <__cvt+0xa4>
 80058b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80058bc:	2230      	movs	r2, #48	; 0x30
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	454b      	cmp	r3, r9
 80058c2:	d307      	bcc.n	80058d4 <__cvt+0xbc>
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058c8:	1bdb      	subs	r3, r3, r7
 80058ca:	4638      	mov	r0, r7
 80058cc:	6013      	str	r3, [r2, #0]
 80058ce:	b004      	add	sp, #16
 80058d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	9103      	str	r1, [sp, #12]
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e7f0      	b.n	80058be <__cvt+0xa6>

080058dc <__exponent>:
 80058dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058de:	4603      	mov	r3, r0
 80058e0:	2900      	cmp	r1, #0
 80058e2:	bfb8      	it	lt
 80058e4:	4249      	neglt	r1, r1
 80058e6:	f803 2b02 	strb.w	r2, [r3], #2
 80058ea:	bfb4      	ite	lt
 80058ec:	222d      	movlt	r2, #45	; 0x2d
 80058ee:	222b      	movge	r2, #43	; 0x2b
 80058f0:	2909      	cmp	r1, #9
 80058f2:	7042      	strb	r2, [r0, #1]
 80058f4:	dd2a      	ble.n	800594c <__exponent+0x70>
 80058f6:	f10d 0407 	add.w	r4, sp, #7
 80058fa:	46a4      	mov	ip, r4
 80058fc:	270a      	movs	r7, #10
 80058fe:	46a6      	mov	lr, r4
 8005900:	460a      	mov	r2, r1
 8005902:	fb91 f6f7 	sdiv	r6, r1, r7
 8005906:	fb07 1516 	mls	r5, r7, r6, r1
 800590a:	3530      	adds	r5, #48	; 0x30
 800590c:	2a63      	cmp	r2, #99	; 0x63
 800590e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005916:	4631      	mov	r1, r6
 8005918:	dcf1      	bgt.n	80058fe <__exponent+0x22>
 800591a:	3130      	adds	r1, #48	; 0x30
 800591c:	f1ae 0502 	sub.w	r5, lr, #2
 8005920:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005924:	1c44      	adds	r4, r0, #1
 8005926:	4629      	mov	r1, r5
 8005928:	4561      	cmp	r1, ip
 800592a:	d30a      	bcc.n	8005942 <__exponent+0x66>
 800592c:	f10d 0209 	add.w	r2, sp, #9
 8005930:	eba2 020e 	sub.w	r2, r2, lr
 8005934:	4565      	cmp	r5, ip
 8005936:	bf88      	it	hi
 8005938:	2200      	movhi	r2, #0
 800593a:	4413      	add	r3, r2
 800593c:	1a18      	subs	r0, r3, r0
 800593e:	b003      	add	sp, #12
 8005940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005946:	f804 2f01 	strb.w	r2, [r4, #1]!
 800594a:	e7ed      	b.n	8005928 <__exponent+0x4c>
 800594c:	2330      	movs	r3, #48	; 0x30
 800594e:	3130      	adds	r1, #48	; 0x30
 8005950:	7083      	strb	r3, [r0, #2]
 8005952:	70c1      	strb	r1, [r0, #3]
 8005954:	1d03      	adds	r3, r0, #4
 8005956:	e7f1      	b.n	800593c <__exponent+0x60>

08005958 <_printf_float>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	ed2d 8b02 	vpush	{d8}
 8005960:	b08d      	sub	sp, #52	; 0x34
 8005962:	460c      	mov	r4, r1
 8005964:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005968:	4616      	mov	r6, r2
 800596a:	461f      	mov	r7, r3
 800596c:	4605      	mov	r5, r0
 800596e:	f001 fb47 	bl	8007000 <_localeconv_r>
 8005972:	f8d0 a000 	ldr.w	sl, [r0]
 8005976:	4650      	mov	r0, sl
 8005978:	f7fa fc42 	bl	8000200 <strlen>
 800597c:	2300      	movs	r3, #0
 800597e:	930a      	str	r3, [sp, #40]	; 0x28
 8005980:	6823      	ldr	r3, [r4, #0]
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	f8d8 3000 	ldr.w	r3, [r8]
 8005988:	f894 b018 	ldrb.w	fp, [r4, #24]
 800598c:	3307      	adds	r3, #7
 800598e:	f023 0307 	bic.w	r3, r3, #7
 8005992:	f103 0208 	add.w	r2, r3, #8
 8005996:	f8c8 2000 	str.w	r2, [r8]
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059aa:	9307      	str	r3, [sp, #28]
 80059ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80059b0:	ee08 0a10 	vmov	s16, r0
 80059b4:	4b9f      	ldr	r3, [pc, #636]	; (8005c34 <_printf_float+0x2dc>)
 80059b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059be:	f7fb f8cd 	bl	8000b5c <__aeabi_dcmpun>
 80059c2:	bb88      	cbnz	r0, 8005a28 <_printf_float+0xd0>
 80059c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059c8:	4b9a      	ldr	r3, [pc, #616]	; (8005c34 <_printf_float+0x2dc>)
 80059ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059ce:	f7fb f8a7 	bl	8000b20 <__aeabi_dcmple>
 80059d2:	bb48      	cbnz	r0, 8005a28 <_printf_float+0xd0>
 80059d4:	2200      	movs	r2, #0
 80059d6:	2300      	movs	r3, #0
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fb f896 	bl	8000b0c <__aeabi_dcmplt>
 80059e0:	b110      	cbz	r0, 80059e8 <_printf_float+0x90>
 80059e2:	232d      	movs	r3, #45	; 0x2d
 80059e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059e8:	4b93      	ldr	r3, [pc, #588]	; (8005c38 <_printf_float+0x2e0>)
 80059ea:	4894      	ldr	r0, [pc, #592]	; (8005c3c <_printf_float+0x2e4>)
 80059ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80059f0:	bf94      	ite	ls
 80059f2:	4698      	movls	r8, r3
 80059f4:	4680      	movhi	r8, r0
 80059f6:	2303      	movs	r3, #3
 80059f8:	6123      	str	r3, [r4, #16]
 80059fa:	9b05      	ldr	r3, [sp, #20]
 80059fc:	f023 0204 	bic.w	r2, r3, #4
 8005a00:	6022      	str	r2, [r4, #0]
 8005a02:	f04f 0900 	mov.w	r9, #0
 8005a06:	9700      	str	r7, [sp, #0]
 8005a08:	4633      	mov	r3, r6
 8005a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f9d8 	bl	8005dc4 <_printf_common>
 8005a14:	3001      	adds	r0, #1
 8005a16:	f040 8090 	bne.w	8005b3a <_printf_float+0x1e2>
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a1e:	b00d      	add	sp, #52	; 0x34
 8005a20:	ecbd 8b02 	vpop	{d8}
 8005a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a28:	4642      	mov	r2, r8
 8005a2a:	464b      	mov	r3, r9
 8005a2c:	4640      	mov	r0, r8
 8005a2e:	4649      	mov	r1, r9
 8005a30:	f7fb f894 	bl	8000b5c <__aeabi_dcmpun>
 8005a34:	b140      	cbz	r0, 8005a48 <_printf_float+0xf0>
 8005a36:	464b      	mov	r3, r9
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	bfbc      	itt	lt
 8005a3c:	232d      	movlt	r3, #45	; 0x2d
 8005a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a42:	487f      	ldr	r0, [pc, #508]	; (8005c40 <_printf_float+0x2e8>)
 8005a44:	4b7f      	ldr	r3, [pc, #508]	; (8005c44 <_printf_float+0x2ec>)
 8005a46:	e7d1      	b.n	80059ec <_printf_float+0x94>
 8005a48:	6863      	ldr	r3, [r4, #4]
 8005a4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a4e:	9206      	str	r2, [sp, #24]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	d13f      	bne.n	8005ad4 <_printf_float+0x17c>
 8005a54:	2306      	movs	r3, #6
 8005a56:	6063      	str	r3, [r4, #4]
 8005a58:	9b05      	ldr	r3, [sp, #20]
 8005a5a:	6861      	ldr	r1, [r4, #4]
 8005a5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005a60:	2300      	movs	r3, #0
 8005a62:	9303      	str	r3, [sp, #12]
 8005a64:	ab0a      	add	r3, sp, #40	; 0x28
 8005a66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005a6a:	ab09      	add	r3, sp, #36	; 0x24
 8005a6c:	ec49 8b10 	vmov	d0, r8, r9
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	6022      	str	r2, [r4, #0]
 8005a74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f7ff fecd 	bl	8005818 <__cvt>
 8005a7e:	9b06      	ldr	r3, [sp, #24]
 8005a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a82:	2b47      	cmp	r3, #71	; 0x47
 8005a84:	4680      	mov	r8, r0
 8005a86:	d108      	bne.n	8005a9a <_printf_float+0x142>
 8005a88:	1cc8      	adds	r0, r1, #3
 8005a8a:	db02      	blt.n	8005a92 <_printf_float+0x13a>
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	4299      	cmp	r1, r3
 8005a90:	dd41      	ble.n	8005b16 <_printf_float+0x1be>
 8005a92:	f1ab 0b02 	sub.w	fp, fp, #2
 8005a96:	fa5f fb8b 	uxtb.w	fp, fp
 8005a9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005a9e:	d820      	bhi.n	8005ae2 <_printf_float+0x18a>
 8005aa0:	3901      	subs	r1, #1
 8005aa2:	465a      	mov	r2, fp
 8005aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8005aaa:	f7ff ff17 	bl	80058dc <__exponent>
 8005aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab0:	1813      	adds	r3, r2, r0
 8005ab2:	2a01      	cmp	r2, #1
 8005ab4:	4681      	mov	r9, r0
 8005ab6:	6123      	str	r3, [r4, #16]
 8005ab8:	dc02      	bgt.n	8005ac0 <_printf_float+0x168>
 8005aba:	6822      	ldr	r2, [r4, #0]
 8005abc:	07d2      	lsls	r2, r2, #31
 8005abe:	d501      	bpl.n	8005ac4 <_printf_float+0x16c>
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d09c      	beq.n	8005a06 <_printf_float+0xae>
 8005acc:	232d      	movs	r3, #45	; 0x2d
 8005ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad2:	e798      	b.n	8005a06 <_printf_float+0xae>
 8005ad4:	9a06      	ldr	r2, [sp, #24]
 8005ad6:	2a47      	cmp	r2, #71	; 0x47
 8005ad8:	d1be      	bne.n	8005a58 <_printf_float+0x100>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1bc      	bne.n	8005a58 <_printf_float+0x100>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e7b9      	b.n	8005a56 <_printf_float+0xfe>
 8005ae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ae6:	d118      	bne.n	8005b1a <_printf_float+0x1c2>
 8005ae8:	2900      	cmp	r1, #0
 8005aea:	6863      	ldr	r3, [r4, #4]
 8005aec:	dd0b      	ble.n	8005b06 <_printf_float+0x1ae>
 8005aee:	6121      	str	r1, [r4, #16]
 8005af0:	b913      	cbnz	r3, 8005af8 <_printf_float+0x1a0>
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	07d0      	lsls	r0, r2, #31
 8005af6:	d502      	bpl.n	8005afe <_printf_float+0x1a6>
 8005af8:	3301      	adds	r3, #1
 8005afa:	440b      	add	r3, r1
 8005afc:	6123      	str	r3, [r4, #16]
 8005afe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b00:	f04f 0900 	mov.w	r9, #0
 8005b04:	e7de      	b.n	8005ac4 <_printf_float+0x16c>
 8005b06:	b913      	cbnz	r3, 8005b0e <_printf_float+0x1b6>
 8005b08:	6822      	ldr	r2, [r4, #0]
 8005b0a:	07d2      	lsls	r2, r2, #31
 8005b0c:	d501      	bpl.n	8005b12 <_printf_float+0x1ba>
 8005b0e:	3302      	adds	r3, #2
 8005b10:	e7f4      	b.n	8005afc <_printf_float+0x1a4>
 8005b12:	2301      	movs	r3, #1
 8005b14:	e7f2      	b.n	8005afc <_printf_float+0x1a4>
 8005b16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1c:	4299      	cmp	r1, r3
 8005b1e:	db05      	blt.n	8005b2c <_printf_float+0x1d4>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	6121      	str	r1, [r4, #16]
 8005b24:	07d8      	lsls	r0, r3, #31
 8005b26:	d5ea      	bpl.n	8005afe <_printf_float+0x1a6>
 8005b28:	1c4b      	adds	r3, r1, #1
 8005b2a:	e7e7      	b.n	8005afc <_printf_float+0x1a4>
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	bfd4      	ite	le
 8005b30:	f1c1 0202 	rsble	r2, r1, #2
 8005b34:	2201      	movgt	r2, #1
 8005b36:	4413      	add	r3, r2
 8005b38:	e7e0      	b.n	8005afc <_printf_float+0x1a4>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	055a      	lsls	r2, r3, #21
 8005b3e:	d407      	bmi.n	8005b50 <_printf_float+0x1f8>
 8005b40:	6923      	ldr	r3, [r4, #16]
 8005b42:	4642      	mov	r2, r8
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	d12c      	bne.n	8005ba8 <_printf_float+0x250>
 8005b4e:	e764      	b.n	8005a1a <_printf_float+0xc2>
 8005b50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b54:	f240 80e0 	bls.w	8005d18 <_printf_float+0x3c0>
 8005b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f7fa ffca 	bl	8000af8 <__aeabi_dcmpeq>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d034      	beq.n	8005bd2 <_printf_float+0x27a>
 8005b68:	4a37      	ldr	r2, [pc, #220]	; (8005c48 <_printf_float+0x2f0>)
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4628      	mov	r0, r5
 8005b70:	47b8      	blx	r7
 8005b72:	3001      	adds	r0, #1
 8005b74:	f43f af51 	beq.w	8005a1a <_printf_float+0xc2>
 8005b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	db02      	blt.n	8005b86 <_printf_float+0x22e>
 8005b80:	6823      	ldr	r3, [r4, #0]
 8005b82:	07d8      	lsls	r0, r3, #31
 8005b84:	d510      	bpl.n	8005ba8 <_printf_float+0x250>
 8005b86:	ee18 3a10 	vmov	r3, s16
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	4631      	mov	r1, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	47b8      	blx	r7
 8005b92:	3001      	adds	r0, #1
 8005b94:	f43f af41 	beq.w	8005a1a <_printf_float+0xc2>
 8005b98:	f04f 0800 	mov.w	r8, #0
 8005b9c:	f104 091a 	add.w	r9, r4, #26
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	4543      	cmp	r3, r8
 8005ba6:	dc09      	bgt.n	8005bbc <_printf_float+0x264>
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	079b      	lsls	r3, r3, #30
 8005bac:	f100 8105 	bmi.w	8005dba <_printf_float+0x462>
 8005bb0:	68e0      	ldr	r0, [r4, #12]
 8005bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb4:	4298      	cmp	r0, r3
 8005bb6:	bfb8      	it	lt
 8005bb8:	4618      	movlt	r0, r3
 8005bba:	e730      	b.n	8005a1e <_printf_float+0xc6>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	464a      	mov	r2, r9
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f af27 	beq.w	8005a1a <_printf_float+0xc2>
 8005bcc:	f108 0801 	add.w	r8, r8, #1
 8005bd0:	e7e6      	b.n	8005ba0 <_printf_float+0x248>
 8005bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dc39      	bgt.n	8005c4c <_printf_float+0x2f4>
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <_printf_float+0x2f0>)
 8005bda:	2301      	movs	r3, #1
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f af19 	beq.w	8005a1a <_printf_float+0xc2>
 8005be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d102      	bne.n	8005bf6 <_printf_float+0x29e>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	07d9      	lsls	r1, r3, #31
 8005bf4:	d5d8      	bpl.n	8005ba8 <_printf_float+0x250>
 8005bf6:	ee18 3a10 	vmov	r3, s16
 8005bfa:	4652      	mov	r2, sl
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	f43f af09 	beq.w	8005a1a <_printf_float+0xc2>
 8005c08:	f04f 0900 	mov.w	r9, #0
 8005c0c:	f104 0a1a 	add.w	sl, r4, #26
 8005c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c12:	425b      	negs	r3, r3
 8005c14:	454b      	cmp	r3, r9
 8005c16:	dc01      	bgt.n	8005c1c <_printf_float+0x2c4>
 8005c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c1a:	e792      	b.n	8005b42 <_printf_float+0x1ea>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4652      	mov	r2, sl
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f aef7 	beq.w	8005a1a <_printf_float+0xc2>
 8005c2c:	f109 0901 	add.w	r9, r9, #1
 8005c30:	e7ee      	b.n	8005c10 <_printf_float+0x2b8>
 8005c32:	bf00      	nop
 8005c34:	7fefffff 	.word	0x7fefffff
 8005c38:	080082fc 	.word	0x080082fc
 8005c3c:	08008300 	.word	0x08008300
 8005c40:	08008308 	.word	0x08008308
 8005c44:	08008304 	.word	0x08008304
 8005c48:	0800830c 	.word	0x0800830c
 8005c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c50:	429a      	cmp	r2, r3
 8005c52:	bfa8      	it	ge
 8005c54:	461a      	movge	r2, r3
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	4691      	mov	r9, r2
 8005c5a:	dc37      	bgt.n	8005ccc <_printf_float+0x374>
 8005c5c:	f04f 0b00 	mov.w	fp, #0
 8005c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c64:	f104 021a 	add.w	r2, r4, #26
 8005c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c6a:	9305      	str	r3, [sp, #20]
 8005c6c:	eba3 0309 	sub.w	r3, r3, r9
 8005c70:	455b      	cmp	r3, fp
 8005c72:	dc33      	bgt.n	8005cdc <_printf_float+0x384>
 8005c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	db3b      	blt.n	8005cf4 <_printf_float+0x39c>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	07da      	lsls	r2, r3, #31
 8005c80:	d438      	bmi.n	8005cf4 <_printf_float+0x39c>
 8005c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c84:	9a05      	ldr	r2, [sp, #20]
 8005c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c88:	1a9a      	subs	r2, r3, r2
 8005c8a:	eba3 0901 	sub.w	r9, r3, r1
 8005c8e:	4591      	cmp	r9, r2
 8005c90:	bfa8      	it	ge
 8005c92:	4691      	movge	r9, r2
 8005c94:	f1b9 0f00 	cmp.w	r9, #0
 8005c98:	dc35      	bgt.n	8005d06 <_printf_float+0x3ae>
 8005c9a:	f04f 0800 	mov.w	r8, #0
 8005c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ca2:	f104 0a1a 	add.w	sl, r4, #26
 8005ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	eba3 0309 	sub.w	r3, r3, r9
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	f77f af79 	ble.w	8005ba8 <_printf_float+0x250>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4652      	mov	r2, sl
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	f43f aeaa 	beq.w	8005a1a <_printf_float+0xc2>
 8005cc6:	f108 0801 	add.w	r8, r8, #1
 8005cca:	e7ec      	b.n	8005ca6 <_printf_float+0x34e>
 8005ccc:	4613      	mov	r3, r2
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	47b8      	blx	r7
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	d1c0      	bne.n	8005c5c <_printf_float+0x304>
 8005cda:	e69e      	b.n	8005a1a <_printf_float+0xc2>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	9205      	str	r2, [sp, #20]
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f ae97 	beq.w	8005a1a <_printf_float+0xc2>
 8005cec:	9a05      	ldr	r2, [sp, #20]
 8005cee:	f10b 0b01 	add.w	fp, fp, #1
 8005cf2:	e7b9      	b.n	8005c68 <_printf_float+0x310>
 8005cf4:	ee18 3a10 	vmov	r3, s16
 8005cf8:	4652      	mov	r2, sl
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	d1be      	bne.n	8005c82 <_printf_float+0x32a>
 8005d04:	e689      	b.n	8005a1a <_printf_float+0xc2>
 8005d06:	9a05      	ldr	r2, [sp, #20]
 8005d08:	464b      	mov	r3, r9
 8005d0a:	4442      	add	r2, r8
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	d1c1      	bne.n	8005c9a <_printf_float+0x342>
 8005d16:	e680      	b.n	8005a1a <_printf_float+0xc2>
 8005d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d1a:	2a01      	cmp	r2, #1
 8005d1c:	dc01      	bgt.n	8005d22 <_printf_float+0x3ca>
 8005d1e:	07db      	lsls	r3, r3, #31
 8005d20:	d538      	bpl.n	8005d94 <_printf_float+0x43c>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4642      	mov	r2, r8
 8005d26:	4631      	mov	r1, r6
 8005d28:	4628      	mov	r0, r5
 8005d2a:	47b8      	blx	r7
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f43f ae74 	beq.w	8005a1a <_printf_float+0xc2>
 8005d32:	ee18 3a10 	vmov	r3, s16
 8005d36:	4652      	mov	r2, sl
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	47b8      	blx	r7
 8005d3e:	3001      	adds	r0, #1
 8005d40:	f43f ae6b 	beq.w	8005a1a <_printf_float+0xc2>
 8005d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f7fa fed4 	bl	8000af8 <__aeabi_dcmpeq>
 8005d50:	b9d8      	cbnz	r0, 8005d8a <_printf_float+0x432>
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	f108 0201 	add.w	r2, r8, #1
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	4631      	mov	r1, r6
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b8      	blx	r7
 8005d60:	3001      	adds	r0, #1
 8005d62:	d10e      	bne.n	8005d82 <_printf_float+0x42a>
 8005d64:	e659      	b.n	8005a1a <_printf_float+0xc2>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4652      	mov	r2, sl
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f ae52 	beq.w	8005a1a <_printf_float+0xc2>
 8005d76:	f108 0801 	add.w	r8, r8, #1
 8005d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	4543      	cmp	r3, r8
 8005d80:	dcf1      	bgt.n	8005d66 <_printf_float+0x40e>
 8005d82:	464b      	mov	r3, r9
 8005d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005d88:	e6dc      	b.n	8005b44 <_printf_float+0x1ec>
 8005d8a:	f04f 0800 	mov.w	r8, #0
 8005d8e:	f104 0a1a 	add.w	sl, r4, #26
 8005d92:	e7f2      	b.n	8005d7a <_printf_float+0x422>
 8005d94:	2301      	movs	r3, #1
 8005d96:	4642      	mov	r2, r8
 8005d98:	e7df      	b.n	8005d5a <_printf_float+0x402>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	464a      	mov	r2, r9
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b8      	blx	r7
 8005da4:	3001      	adds	r0, #1
 8005da6:	f43f ae38 	beq.w	8005a1a <_printf_float+0xc2>
 8005daa:	f108 0801 	add.w	r8, r8, #1
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005db2:	1a5b      	subs	r3, r3, r1
 8005db4:	4543      	cmp	r3, r8
 8005db6:	dcf0      	bgt.n	8005d9a <_printf_float+0x442>
 8005db8:	e6fa      	b.n	8005bb0 <_printf_float+0x258>
 8005dba:	f04f 0800 	mov.w	r8, #0
 8005dbe:	f104 0919 	add.w	r9, r4, #25
 8005dc2:	e7f4      	b.n	8005dae <_printf_float+0x456>

08005dc4 <_printf_common>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	4616      	mov	r6, r2
 8005dca:	4699      	mov	r9, r3
 8005dcc:	688a      	ldr	r2, [r1, #8]
 8005dce:	690b      	ldr	r3, [r1, #16]
 8005dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	bfb8      	it	lt
 8005dd8:	4613      	movlt	r3, r2
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005de0:	4607      	mov	r7, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	b10a      	cbz	r2, 8005dea <_printf_common+0x26>
 8005de6:	3301      	adds	r3, #1
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	0699      	lsls	r1, r3, #26
 8005dee:	bf42      	ittt	mi
 8005df0:	6833      	ldrmi	r3, [r6, #0]
 8005df2:	3302      	addmi	r3, #2
 8005df4:	6033      	strmi	r3, [r6, #0]
 8005df6:	6825      	ldr	r5, [r4, #0]
 8005df8:	f015 0506 	ands.w	r5, r5, #6
 8005dfc:	d106      	bne.n	8005e0c <_printf_common+0x48>
 8005dfe:	f104 0a19 	add.w	sl, r4, #25
 8005e02:	68e3      	ldr	r3, [r4, #12]
 8005e04:	6832      	ldr	r2, [r6, #0]
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	42ab      	cmp	r3, r5
 8005e0a:	dc26      	bgt.n	8005e5a <_printf_common+0x96>
 8005e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e10:	1e13      	subs	r3, r2, #0
 8005e12:	6822      	ldr	r2, [r4, #0]
 8005e14:	bf18      	it	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	0692      	lsls	r2, r2, #26
 8005e1a:	d42b      	bmi.n	8005e74 <_printf_common+0xb0>
 8005e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e20:	4649      	mov	r1, r9
 8005e22:	4638      	mov	r0, r7
 8005e24:	47c0      	blx	r8
 8005e26:	3001      	adds	r0, #1
 8005e28:	d01e      	beq.n	8005e68 <_printf_common+0xa4>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	68e5      	ldr	r5, [r4, #12]
 8005e2e:	6832      	ldr	r2, [r6, #0]
 8005e30:	f003 0306 	and.w	r3, r3, #6
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	bf08      	it	eq
 8005e38:	1aad      	subeq	r5, r5, r2
 8005e3a:	68a3      	ldr	r3, [r4, #8]
 8005e3c:	6922      	ldr	r2, [r4, #16]
 8005e3e:	bf0c      	ite	eq
 8005e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e44:	2500      	movne	r5, #0
 8005e46:	4293      	cmp	r3, r2
 8005e48:	bfc4      	itt	gt
 8005e4a:	1a9b      	subgt	r3, r3, r2
 8005e4c:	18ed      	addgt	r5, r5, r3
 8005e4e:	2600      	movs	r6, #0
 8005e50:	341a      	adds	r4, #26
 8005e52:	42b5      	cmp	r5, r6
 8005e54:	d11a      	bne.n	8005e8c <_printf_common+0xc8>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e008      	b.n	8005e6c <_printf_common+0xa8>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	4649      	mov	r1, r9
 8005e60:	4638      	mov	r0, r7
 8005e62:	47c0      	blx	r8
 8005e64:	3001      	adds	r0, #1
 8005e66:	d103      	bne.n	8005e70 <_printf_common+0xac>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e70:	3501      	adds	r5, #1
 8005e72:	e7c6      	b.n	8005e02 <_printf_common+0x3e>
 8005e74:	18e1      	adds	r1, r4, r3
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	2030      	movs	r0, #48	; 0x30
 8005e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e7e:	4422      	add	r2, r4
 8005e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e88:	3302      	adds	r3, #2
 8005e8a:	e7c7      	b.n	8005e1c <_printf_common+0x58>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4622      	mov	r2, r4
 8005e90:	4649      	mov	r1, r9
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c0      	blx	r8
 8005e96:	3001      	adds	r0, #1
 8005e98:	d0e6      	beq.n	8005e68 <_printf_common+0xa4>
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	e7d9      	b.n	8005e52 <_printf_common+0x8e>
	...

08005ea0 <_printf_i>:
 8005ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	7e0f      	ldrb	r7, [r1, #24]
 8005ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ea8:	2f78      	cmp	r7, #120	; 0x78
 8005eaa:	4691      	mov	r9, r2
 8005eac:	4680      	mov	r8, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005eb6:	d807      	bhi.n	8005ec8 <_printf_i+0x28>
 8005eb8:	2f62      	cmp	r7, #98	; 0x62
 8005eba:	d80a      	bhi.n	8005ed2 <_printf_i+0x32>
 8005ebc:	2f00      	cmp	r7, #0
 8005ebe:	f000 80d8 	beq.w	8006072 <_printf_i+0x1d2>
 8005ec2:	2f58      	cmp	r7, #88	; 0x58
 8005ec4:	f000 80a3 	beq.w	800600e <_printf_i+0x16e>
 8005ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ed0:	e03a      	b.n	8005f48 <_printf_i+0xa8>
 8005ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ed6:	2b15      	cmp	r3, #21
 8005ed8:	d8f6      	bhi.n	8005ec8 <_printf_i+0x28>
 8005eda:	a101      	add	r1, pc, #4	; (adr r1, 8005ee0 <_printf_i+0x40>)
 8005edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee0:	08005f39 	.word	0x08005f39
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005ec9 	.word	0x08005ec9
 8005eec:	08005ec9 	.word	0x08005ec9
 8005ef0:	08005ec9 	.word	0x08005ec9
 8005ef4:	08005ec9 	.word	0x08005ec9
 8005ef8:	08005f4d 	.word	0x08005f4d
 8005efc:	08005ec9 	.word	0x08005ec9
 8005f00:	08005ec9 	.word	0x08005ec9
 8005f04:	08005ec9 	.word	0x08005ec9
 8005f08:	08005ec9 	.word	0x08005ec9
 8005f0c:	08006059 	.word	0x08006059
 8005f10:	08005f7d 	.word	0x08005f7d
 8005f14:	0800603b 	.word	0x0800603b
 8005f18:	08005ec9 	.word	0x08005ec9
 8005f1c:	08005ec9 	.word	0x08005ec9
 8005f20:	0800607b 	.word	0x0800607b
 8005f24:	08005ec9 	.word	0x08005ec9
 8005f28:	08005f7d 	.word	0x08005f7d
 8005f2c:	08005ec9 	.word	0x08005ec9
 8005f30:	08005ec9 	.word	0x08005ec9
 8005f34:	08006043 	.word	0x08006043
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	602a      	str	r2, [r5, #0]
 8005f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e0a3      	b.n	8006094 <_printf_i+0x1f4>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	6829      	ldr	r1, [r5, #0]
 8005f50:	0606      	lsls	r6, r0, #24
 8005f52:	f101 0304 	add.w	r3, r1, #4
 8005f56:	d50a      	bpl.n	8005f6e <_printf_i+0xce>
 8005f58:	680e      	ldr	r6, [r1, #0]
 8005f5a:	602b      	str	r3, [r5, #0]
 8005f5c:	2e00      	cmp	r6, #0
 8005f5e:	da03      	bge.n	8005f68 <_printf_i+0xc8>
 8005f60:	232d      	movs	r3, #45	; 0x2d
 8005f62:	4276      	negs	r6, r6
 8005f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f68:	485e      	ldr	r0, [pc, #376]	; (80060e4 <_printf_i+0x244>)
 8005f6a:	230a      	movs	r3, #10
 8005f6c:	e019      	b.n	8005fa2 <_printf_i+0x102>
 8005f6e:	680e      	ldr	r6, [r1, #0]
 8005f70:	602b      	str	r3, [r5, #0]
 8005f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f76:	bf18      	it	ne
 8005f78:	b236      	sxthne	r6, r6
 8005f7a:	e7ef      	b.n	8005f5c <_printf_i+0xbc>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	6820      	ldr	r0, [r4, #0]
 8005f80:	1d19      	adds	r1, r3, #4
 8005f82:	6029      	str	r1, [r5, #0]
 8005f84:	0601      	lsls	r1, r0, #24
 8005f86:	d501      	bpl.n	8005f8c <_printf_i+0xec>
 8005f88:	681e      	ldr	r6, [r3, #0]
 8005f8a:	e002      	b.n	8005f92 <_printf_i+0xf2>
 8005f8c:	0646      	lsls	r6, r0, #25
 8005f8e:	d5fb      	bpl.n	8005f88 <_printf_i+0xe8>
 8005f90:	881e      	ldrh	r6, [r3, #0]
 8005f92:	4854      	ldr	r0, [pc, #336]	; (80060e4 <_printf_i+0x244>)
 8005f94:	2f6f      	cmp	r7, #111	; 0x6f
 8005f96:	bf0c      	ite	eq
 8005f98:	2308      	moveq	r3, #8
 8005f9a:	230a      	movne	r3, #10
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fa2:	6865      	ldr	r5, [r4, #4]
 8005fa4:	60a5      	str	r5, [r4, #8]
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	bfa2      	ittt	ge
 8005faa:	6821      	ldrge	r1, [r4, #0]
 8005fac:	f021 0104 	bicge.w	r1, r1, #4
 8005fb0:	6021      	strge	r1, [r4, #0]
 8005fb2:	b90e      	cbnz	r6, 8005fb8 <_printf_i+0x118>
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	d04d      	beq.n	8006054 <_printf_i+0x1b4>
 8005fb8:	4615      	mov	r5, r2
 8005fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8005fc2:	5dc7      	ldrb	r7, [r0, r7]
 8005fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fc8:	4637      	mov	r7, r6
 8005fca:	42bb      	cmp	r3, r7
 8005fcc:	460e      	mov	r6, r1
 8005fce:	d9f4      	bls.n	8005fba <_printf_i+0x11a>
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d10b      	bne.n	8005fec <_printf_i+0x14c>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	07de      	lsls	r6, r3, #31
 8005fd8:	d508      	bpl.n	8005fec <_printf_i+0x14c>
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	6861      	ldr	r1, [r4, #4]
 8005fde:	4299      	cmp	r1, r3
 8005fe0:	bfde      	ittt	le
 8005fe2:	2330      	movle	r3, #48	; 0x30
 8005fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005fe8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005fec:	1b52      	subs	r2, r2, r5
 8005fee:	6122      	str	r2, [r4, #16]
 8005ff0:	f8cd a000 	str.w	sl, [sp]
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	aa03      	add	r2, sp, #12
 8005ff8:	4621      	mov	r1, r4
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	f7ff fee2 	bl	8005dc4 <_printf_common>
 8006000:	3001      	adds	r0, #1
 8006002:	d14c      	bne.n	800609e <_printf_i+0x1fe>
 8006004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006008:	b004      	add	sp, #16
 800600a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800600e:	4835      	ldr	r0, [pc, #212]	; (80060e4 <_printf_i+0x244>)
 8006010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006014:	6829      	ldr	r1, [r5, #0]
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f851 6b04 	ldr.w	r6, [r1], #4
 800601c:	6029      	str	r1, [r5, #0]
 800601e:	061d      	lsls	r5, r3, #24
 8006020:	d514      	bpl.n	800604c <_printf_i+0x1ac>
 8006022:	07df      	lsls	r7, r3, #31
 8006024:	bf44      	itt	mi
 8006026:	f043 0320 	orrmi.w	r3, r3, #32
 800602a:	6023      	strmi	r3, [r4, #0]
 800602c:	b91e      	cbnz	r6, 8006036 <_printf_i+0x196>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	f023 0320 	bic.w	r3, r3, #32
 8006034:	6023      	str	r3, [r4, #0]
 8006036:	2310      	movs	r3, #16
 8006038:	e7b0      	b.n	8005f9c <_printf_i+0xfc>
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	f043 0320 	orr.w	r3, r3, #32
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	2378      	movs	r3, #120	; 0x78
 8006044:	4828      	ldr	r0, [pc, #160]	; (80060e8 <_printf_i+0x248>)
 8006046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800604a:	e7e3      	b.n	8006014 <_printf_i+0x174>
 800604c:	0659      	lsls	r1, r3, #25
 800604e:	bf48      	it	mi
 8006050:	b2b6      	uxthmi	r6, r6
 8006052:	e7e6      	b.n	8006022 <_printf_i+0x182>
 8006054:	4615      	mov	r5, r2
 8006056:	e7bb      	b.n	8005fd0 <_printf_i+0x130>
 8006058:	682b      	ldr	r3, [r5, #0]
 800605a:	6826      	ldr	r6, [r4, #0]
 800605c:	6961      	ldr	r1, [r4, #20]
 800605e:	1d18      	adds	r0, r3, #4
 8006060:	6028      	str	r0, [r5, #0]
 8006062:	0635      	lsls	r5, r6, #24
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	d501      	bpl.n	800606c <_printf_i+0x1cc>
 8006068:	6019      	str	r1, [r3, #0]
 800606a:	e002      	b.n	8006072 <_printf_i+0x1d2>
 800606c:	0670      	lsls	r0, r6, #25
 800606e:	d5fb      	bpl.n	8006068 <_printf_i+0x1c8>
 8006070:	8019      	strh	r1, [r3, #0]
 8006072:	2300      	movs	r3, #0
 8006074:	6123      	str	r3, [r4, #16]
 8006076:	4615      	mov	r5, r2
 8006078:	e7ba      	b.n	8005ff0 <_printf_i+0x150>
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	1d1a      	adds	r2, r3, #4
 800607e:	602a      	str	r2, [r5, #0]
 8006080:	681d      	ldr	r5, [r3, #0]
 8006082:	6862      	ldr	r2, [r4, #4]
 8006084:	2100      	movs	r1, #0
 8006086:	4628      	mov	r0, r5
 8006088:	f7fa f8c2 	bl	8000210 <memchr>
 800608c:	b108      	cbz	r0, 8006092 <_printf_i+0x1f2>
 800608e:	1b40      	subs	r0, r0, r5
 8006090:	6060      	str	r0, [r4, #4]
 8006092:	6863      	ldr	r3, [r4, #4]
 8006094:	6123      	str	r3, [r4, #16]
 8006096:	2300      	movs	r3, #0
 8006098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800609c:	e7a8      	b.n	8005ff0 <_printf_i+0x150>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	462a      	mov	r2, r5
 80060a2:	4649      	mov	r1, r9
 80060a4:	4640      	mov	r0, r8
 80060a6:	47d0      	blx	sl
 80060a8:	3001      	adds	r0, #1
 80060aa:	d0ab      	beq.n	8006004 <_printf_i+0x164>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	079b      	lsls	r3, r3, #30
 80060b0:	d413      	bmi.n	80060da <_printf_i+0x23a>
 80060b2:	68e0      	ldr	r0, [r4, #12]
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	4298      	cmp	r0, r3
 80060b8:	bfb8      	it	lt
 80060ba:	4618      	movlt	r0, r3
 80060bc:	e7a4      	b.n	8006008 <_printf_i+0x168>
 80060be:	2301      	movs	r3, #1
 80060c0:	4632      	mov	r2, r6
 80060c2:	4649      	mov	r1, r9
 80060c4:	4640      	mov	r0, r8
 80060c6:	47d0      	blx	sl
 80060c8:	3001      	adds	r0, #1
 80060ca:	d09b      	beq.n	8006004 <_printf_i+0x164>
 80060cc:	3501      	adds	r5, #1
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	9903      	ldr	r1, [sp, #12]
 80060d2:	1a5b      	subs	r3, r3, r1
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dcf2      	bgt.n	80060be <_printf_i+0x21e>
 80060d8:	e7eb      	b.n	80060b2 <_printf_i+0x212>
 80060da:	2500      	movs	r5, #0
 80060dc:	f104 0619 	add.w	r6, r4, #25
 80060e0:	e7f5      	b.n	80060ce <_printf_i+0x22e>
 80060e2:	bf00      	nop
 80060e4:	0800830e 	.word	0x0800830e
 80060e8:	0800831f 	.word	0x0800831f

080060ec <iprintf>:
 80060ec:	b40f      	push	{r0, r1, r2, r3}
 80060ee:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <iprintf+0x2c>)
 80060f0:	b513      	push	{r0, r1, r4, lr}
 80060f2:	681c      	ldr	r4, [r3, #0]
 80060f4:	b124      	cbz	r4, 8006100 <iprintf+0x14>
 80060f6:	69a3      	ldr	r3, [r4, #24]
 80060f8:	b913      	cbnz	r3, 8006100 <iprintf+0x14>
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fee2 	bl	8006ec4 <__sinit>
 8006100:	ab05      	add	r3, sp, #20
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	68a1      	ldr	r1, [r4, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	4620      	mov	r0, r4
 800610a:	f001 fc2d 	bl	8007968 <_vfiprintf_r>
 800610e:	b002      	add	sp, #8
 8006110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006114:	b004      	add	sp, #16
 8006116:	4770      	bx	lr
 8006118:	20000040 	.word	0x20000040

0800611c <quorem>:
 800611c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	6903      	ldr	r3, [r0, #16]
 8006122:	690c      	ldr	r4, [r1, #16]
 8006124:	42a3      	cmp	r3, r4
 8006126:	4607      	mov	r7, r0
 8006128:	f2c0 8081 	blt.w	800622e <quorem+0x112>
 800612c:	3c01      	subs	r4, #1
 800612e:	f101 0814 	add.w	r8, r1, #20
 8006132:	f100 0514 	add.w	r5, r0, #20
 8006136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800613a:	9301      	str	r3, [sp, #4]
 800613c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006144:	3301      	adds	r3, #1
 8006146:	429a      	cmp	r2, r3
 8006148:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800614c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006150:	fbb2 f6f3 	udiv	r6, r2, r3
 8006154:	d331      	bcc.n	80061ba <quorem+0x9e>
 8006156:	f04f 0e00 	mov.w	lr, #0
 800615a:	4640      	mov	r0, r8
 800615c:	46ac      	mov	ip, r5
 800615e:	46f2      	mov	sl, lr
 8006160:	f850 2b04 	ldr.w	r2, [r0], #4
 8006164:	b293      	uxth	r3, r2
 8006166:	fb06 e303 	mla	r3, r6, r3, lr
 800616a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800616e:	b29b      	uxth	r3, r3
 8006170:	ebaa 0303 	sub.w	r3, sl, r3
 8006174:	f8dc a000 	ldr.w	sl, [ip]
 8006178:	0c12      	lsrs	r2, r2, #16
 800617a:	fa13 f38a 	uxtah	r3, r3, sl
 800617e:	fb06 e202 	mla	r2, r6, r2, lr
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	9b00      	ldr	r3, [sp, #0]
 8006186:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800618a:	b292      	uxth	r2, r2
 800618c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006194:	f8bd 3000 	ldrh.w	r3, [sp]
 8006198:	4581      	cmp	r9, r0
 800619a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800619e:	f84c 3b04 	str.w	r3, [ip], #4
 80061a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061a6:	d2db      	bcs.n	8006160 <quorem+0x44>
 80061a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80061ac:	b92b      	cbnz	r3, 80061ba <quorem+0x9e>
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	3b04      	subs	r3, #4
 80061b2:	429d      	cmp	r5, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	d32e      	bcc.n	8006216 <quorem+0xfa>
 80061b8:	613c      	str	r4, [r7, #16]
 80061ba:	4638      	mov	r0, r7
 80061bc:	f001 f9b2 	bl	8007524 <__mcmp>
 80061c0:	2800      	cmp	r0, #0
 80061c2:	db24      	blt.n	800620e <quorem+0xf2>
 80061c4:	3601      	adds	r6, #1
 80061c6:	4628      	mov	r0, r5
 80061c8:	f04f 0c00 	mov.w	ip, #0
 80061cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80061d0:	f8d0 e000 	ldr.w	lr, [r0]
 80061d4:	b293      	uxth	r3, r2
 80061d6:	ebac 0303 	sub.w	r3, ip, r3
 80061da:	0c12      	lsrs	r2, r2, #16
 80061dc:	fa13 f38e 	uxtah	r3, r3, lr
 80061e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80061e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061ee:	45c1      	cmp	r9, r8
 80061f0:	f840 3b04 	str.w	r3, [r0], #4
 80061f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061f8:	d2e8      	bcs.n	80061cc <quorem+0xb0>
 80061fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006202:	b922      	cbnz	r2, 800620e <quorem+0xf2>
 8006204:	3b04      	subs	r3, #4
 8006206:	429d      	cmp	r5, r3
 8006208:	461a      	mov	r2, r3
 800620a:	d30a      	bcc.n	8006222 <quorem+0x106>
 800620c:	613c      	str	r4, [r7, #16]
 800620e:	4630      	mov	r0, r6
 8006210:	b003      	add	sp, #12
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	3b04      	subs	r3, #4
 800621a:	2a00      	cmp	r2, #0
 800621c:	d1cc      	bne.n	80061b8 <quorem+0x9c>
 800621e:	3c01      	subs	r4, #1
 8006220:	e7c7      	b.n	80061b2 <quorem+0x96>
 8006222:	6812      	ldr	r2, [r2, #0]
 8006224:	3b04      	subs	r3, #4
 8006226:	2a00      	cmp	r2, #0
 8006228:	d1f0      	bne.n	800620c <quorem+0xf0>
 800622a:	3c01      	subs	r4, #1
 800622c:	e7eb      	b.n	8006206 <quorem+0xea>
 800622e:	2000      	movs	r0, #0
 8006230:	e7ee      	b.n	8006210 <quorem+0xf4>
 8006232:	0000      	movs	r0, r0
 8006234:	0000      	movs	r0, r0
	...

08006238 <_dtoa_r>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	ed2d 8b04 	vpush	{d8-d9}
 8006240:	ec57 6b10 	vmov	r6, r7, d0
 8006244:	b093      	sub	sp, #76	; 0x4c
 8006246:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006248:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800624c:	9106      	str	r1, [sp, #24]
 800624e:	ee10 aa10 	vmov	sl, s0
 8006252:	4604      	mov	r4, r0
 8006254:	9209      	str	r2, [sp, #36]	; 0x24
 8006256:	930c      	str	r3, [sp, #48]	; 0x30
 8006258:	46bb      	mov	fp, r7
 800625a:	b975      	cbnz	r5, 800627a <_dtoa_r+0x42>
 800625c:	2010      	movs	r0, #16
 800625e:	f000 fed7 	bl	8007010 <malloc>
 8006262:	4602      	mov	r2, r0
 8006264:	6260      	str	r0, [r4, #36]	; 0x24
 8006266:	b920      	cbnz	r0, 8006272 <_dtoa_r+0x3a>
 8006268:	4ba7      	ldr	r3, [pc, #668]	; (8006508 <_dtoa_r+0x2d0>)
 800626a:	21ea      	movs	r1, #234	; 0xea
 800626c:	48a7      	ldr	r0, [pc, #668]	; (800650c <_dtoa_r+0x2d4>)
 800626e:	f001 fdd1 	bl	8007e14 <__assert_func>
 8006272:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006276:	6005      	str	r5, [r0, #0]
 8006278:	60c5      	str	r5, [r0, #12]
 800627a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800627c:	6819      	ldr	r1, [r3, #0]
 800627e:	b151      	cbz	r1, 8006296 <_dtoa_r+0x5e>
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	604a      	str	r2, [r1, #4]
 8006284:	2301      	movs	r3, #1
 8006286:	4093      	lsls	r3, r2
 8006288:	608b      	str	r3, [r1, #8]
 800628a:	4620      	mov	r0, r4
 800628c:	f000 ff08 	bl	80070a0 <_Bfree>
 8006290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	1e3b      	subs	r3, r7, #0
 8006298:	bfaa      	itet	ge
 800629a:	2300      	movge	r3, #0
 800629c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80062a0:	f8c8 3000 	strge.w	r3, [r8]
 80062a4:	4b9a      	ldr	r3, [pc, #616]	; (8006510 <_dtoa_r+0x2d8>)
 80062a6:	bfbc      	itt	lt
 80062a8:	2201      	movlt	r2, #1
 80062aa:	f8c8 2000 	strlt.w	r2, [r8]
 80062ae:	ea33 030b 	bics.w	r3, r3, fp
 80062b2:	d11b      	bne.n	80062ec <_dtoa_r+0xb4>
 80062b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062c0:	4333      	orrs	r3, r6
 80062c2:	f000 8592 	beq.w	8006dea <_dtoa_r+0xbb2>
 80062c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062c8:	b963      	cbnz	r3, 80062e4 <_dtoa_r+0xac>
 80062ca:	4b92      	ldr	r3, [pc, #584]	; (8006514 <_dtoa_r+0x2dc>)
 80062cc:	e022      	b.n	8006314 <_dtoa_r+0xdc>
 80062ce:	4b92      	ldr	r3, [pc, #584]	; (8006518 <_dtoa_r+0x2e0>)
 80062d0:	9301      	str	r3, [sp, #4]
 80062d2:	3308      	adds	r3, #8
 80062d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80062d6:	6013      	str	r3, [r2, #0]
 80062d8:	9801      	ldr	r0, [sp, #4]
 80062da:	b013      	add	sp, #76	; 0x4c
 80062dc:	ecbd 8b04 	vpop	{d8-d9}
 80062e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e4:	4b8b      	ldr	r3, [pc, #556]	; (8006514 <_dtoa_r+0x2dc>)
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	3303      	adds	r3, #3
 80062ea:	e7f3      	b.n	80062d4 <_dtoa_r+0x9c>
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	4650      	mov	r0, sl
 80062f2:	4659      	mov	r1, fp
 80062f4:	f7fa fc00 	bl	8000af8 <__aeabi_dcmpeq>
 80062f8:	ec4b ab19 	vmov	d9, sl, fp
 80062fc:	4680      	mov	r8, r0
 80062fe:	b158      	cbz	r0, 8006318 <_dtoa_r+0xe0>
 8006300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006302:	2301      	movs	r3, #1
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 856b 	beq.w	8006de4 <_dtoa_r+0xbac>
 800630e:	4883      	ldr	r0, [pc, #524]	; (800651c <_dtoa_r+0x2e4>)
 8006310:	6018      	str	r0, [r3, #0]
 8006312:	1e43      	subs	r3, r0, #1
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	e7df      	b.n	80062d8 <_dtoa_r+0xa0>
 8006318:	ec4b ab10 	vmov	d0, sl, fp
 800631c:	aa10      	add	r2, sp, #64	; 0x40
 800631e:	a911      	add	r1, sp, #68	; 0x44
 8006320:	4620      	mov	r0, r4
 8006322:	f001 f9a5 	bl	8007670 <__d2b>
 8006326:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800632a:	ee08 0a10 	vmov	s16, r0
 800632e:	2d00      	cmp	r5, #0
 8006330:	f000 8084 	beq.w	800643c <_dtoa_r+0x204>
 8006334:	ee19 3a90 	vmov	r3, s19
 8006338:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800633c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006340:	4656      	mov	r6, sl
 8006342:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800634a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800634e:	4b74      	ldr	r3, [pc, #464]	; (8006520 <_dtoa_r+0x2e8>)
 8006350:	2200      	movs	r2, #0
 8006352:	4630      	mov	r0, r6
 8006354:	4639      	mov	r1, r7
 8006356:	f7f9 ffaf 	bl	80002b8 <__aeabi_dsub>
 800635a:	a365      	add	r3, pc, #404	; (adr r3, 80064f0 <_dtoa_r+0x2b8>)
 800635c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006360:	f7fa f962 	bl	8000628 <__aeabi_dmul>
 8006364:	a364      	add	r3, pc, #400	; (adr r3, 80064f8 <_dtoa_r+0x2c0>)
 8006366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636a:	f7f9 ffa7 	bl	80002bc <__adddf3>
 800636e:	4606      	mov	r6, r0
 8006370:	4628      	mov	r0, r5
 8006372:	460f      	mov	r7, r1
 8006374:	f7fa f8ee 	bl	8000554 <__aeabi_i2d>
 8006378:	a361      	add	r3, pc, #388	; (adr r3, 8006500 <_dtoa_r+0x2c8>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7fa f953 	bl	8000628 <__aeabi_dmul>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7f9 ff97 	bl	80002bc <__adddf3>
 800638e:	4606      	mov	r6, r0
 8006390:	460f      	mov	r7, r1
 8006392:	f7fa fbf9 	bl	8000b88 <__aeabi_d2iz>
 8006396:	2200      	movs	r2, #0
 8006398:	9000      	str	r0, [sp, #0]
 800639a:	2300      	movs	r3, #0
 800639c:	4630      	mov	r0, r6
 800639e:	4639      	mov	r1, r7
 80063a0:	f7fa fbb4 	bl	8000b0c <__aeabi_dcmplt>
 80063a4:	b150      	cbz	r0, 80063bc <_dtoa_r+0x184>
 80063a6:	9800      	ldr	r0, [sp, #0]
 80063a8:	f7fa f8d4 	bl	8000554 <__aeabi_i2d>
 80063ac:	4632      	mov	r2, r6
 80063ae:	463b      	mov	r3, r7
 80063b0:	f7fa fba2 	bl	8000af8 <__aeabi_dcmpeq>
 80063b4:	b910      	cbnz	r0, 80063bc <_dtoa_r+0x184>
 80063b6:	9b00      	ldr	r3, [sp, #0]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	9b00      	ldr	r3, [sp, #0]
 80063be:	2b16      	cmp	r3, #22
 80063c0:	d85a      	bhi.n	8006478 <_dtoa_r+0x240>
 80063c2:	9a00      	ldr	r2, [sp, #0]
 80063c4:	4b57      	ldr	r3, [pc, #348]	; (8006524 <_dtoa_r+0x2ec>)
 80063c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	ec51 0b19 	vmov	r0, r1, d9
 80063d2:	f7fa fb9b 	bl	8000b0c <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d050      	beq.n	800647c <_dtoa_r+0x244>
 80063da:	9b00      	ldr	r3, [sp, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	2300      	movs	r3, #0
 80063e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063e6:	1b5d      	subs	r5, r3, r5
 80063e8:	1e6b      	subs	r3, r5, #1
 80063ea:	9305      	str	r3, [sp, #20]
 80063ec:	bf45      	ittet	mi
 80063ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80063f2:	9304      	strmi	r3, [sp, #16]
 80063f4:	2300      	movpl	r3, #0
 80063f6:	2300      	movmi	r3, #0
 80063f8:	bf4c      	ite	mi
 80063fa:	9305      	strmi	r3, [sp, #20]
 80063fc:	9304      	strpl	r3, [sp, #16]
 80063fe:	9b00      	ldr	r3, [sp, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	db3d      	blt.n	8006480 <_dtoa_r+0x248>
 8006404:	9b05      	ldr	r3, [sp, #20]
 8006406:	9a00      	ldr	r2, [sp, #0]
 8006408:	920a      	str	r2, [sp, #40]	; 0x28
 800640a:	4413      	add	r3, r2
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	2300      	movs	r3, #0
 8006410:	9307      	str	r3, [sp, #28]
 8006412:	9b06      	ldr	r3, [sp, #24]
 8006414:	2b09      	cmp	r3, #9
 8006416:	f200 8089 	bhi.w	800652c <_dtoa_r+0x2f4>
 800641a:	2b05      	cmp	r3, #5
 800641c:	bfc4      	itt	gt
 800641e:	3b04      	subgt	r3, #4
 8006420:	9306      	strgt	r3, [sp, #24]
 8006422:	9b06      	ldr	r3, [sp, #24]
 8006424:	f1a3 0302 	sub.w	r3, r3, #2
 8006428:	bfcc      	ite	gt
 800642a:	2500      	movgt	r5, #0
 800642c:	2501      	movle	r5, #1
 800642e:	2b03      	cmp	r3, #3
 8006430:	f200 8087 	bhi.w	8006542 <_dtoa_r+0x30a>
 8006434:	e8df f003 	tbb	[pc, r3]
 8006438:	59383a2d 	.word	0x59383a2d
 800643c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006440:	441d      	add	r5, r3
 8006442:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006446:	2b20      	cmp	r3, #32
 8006448:	bfc1      	itttt	gt
 800644a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800644e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006452:	fa0b f303 	lslgt.w	r3, fp, r3
 8006456:	fa26 f000 	lsrgt.w	r0, r6, r0
 800645a:	bfda      	itte	le
 800645c:	f1c3 0320 	rsble	r3, r3, #32
 8006460:	fa06 f003 	lslle.w	r0, r6, r3
 8006464:	4318      	orrgt	r0, r3
 8006466:	f7fa f865 	bl	8000534 <__aeabi_ui2d>
 800646a:	2301      	movs	r3, #1
 800646c:	4606      	mov	r6, r0
 800646e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006472:	3d01      	subs	r5, #1
 8006474:	930e      	str	r3, [sp, #56]	; 0x38
 8006476:	e76a      	b.n	800634e <_dtoa_r+0x116>
 8006478:	2301      	movs	r3, #1
 800647a:	e7b2      	b.n	80063e2 <_dtoa_r+0x1aa>
 800647c:	900b      	str	r0, [sp, #44]	; 0x2c
 800647e:	e7b1      	b.n	80063e4 <_dtoa_r+0x1ac>
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	9a00      	ldr	r2, [sp, #0]
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	9304      	str	r3, [sp, #16]
 8006488:	4253      	negs	r3, r2
 800648a:	9307      	str	r3, [sp, #28]
 800648c:	2300      	movs	r3, #0
 800648e:	930a      	str	r3, [sp, #40]	; 0x28
 8006490:	e7bf      	b.n	8006412 <_dtoa_r+0x1da>
 8006492:	2300      	movs	r3, #0
 8006494:	9308      	str	r3, [sp, #32]
 8006496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006498:	2b00      	cmp	r3, #0
 800649a:	dc55      	bgt.n	8006548 <_dtoa_r+0x310>
 800649c:	2301      	movs	r3, #1
 800649e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064a2:	461a      	mov	r2, r3
 80064a4:	9209      	str	r2, [sp, #36]	; 0x24
 80064a6:	e00c      	b.n	80064c2 <_dtoa_r+0x28a>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e7f3      	b.n	8006494 <_dtoa_r+0x25c>
 80064ac:	2300      	movs	r3, #0
 80064ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064b0:	9308      	str	r3, [sp, #32]
 80064b2:	9b00      	ldr	r3, [sp, #0]
 80064b4:	4413      	add	r3, r2
 80064b6:	9302      	str	r3, [sp, #8]
 80064b8:	3301      	adds	r3, #1
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	9303      	str	r3, [sp, #12]
 80064be:	bfb8      	it	lt
 80064c0:	2301      	movlt	r3, #1
 80064c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80064c4:	2200      	movs	r2, #0
 80064c6:	6042      	str	r2, [r0, #4]
 80064c8:	2204      	movs	r2, #4
 80064ca:	f102 0614 	add.w	r6, r2, #20
 80064ce:	429e      	cmp	r6, r3
 80064d0:	6841      	ldr	r1, [r0, #4]
 80064d2:	d93d      	bls.n	8006550 <_dtoa_r+0x318>
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fda3 	bl	8007020 <_Balloc>
 80064da:	9001      	str	r0, [sp, #4]
 80064dc:	2800      	cmp	r0, #0
 80064de:	d13b      	bne.n	8006558 <_dtoa_r+0x320>
 80064e0:	4b11      	ldr	r3, [pc, #68]	; (8006528 <_dtoa_r+0x2f0>)
 80064e2:	4602      	mov	r2, r0
 80064e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80064e8:	e6c0      	b.n	800626c <_dtoa_r+0x34>
 80064ea:	2301      	movs	r3, #1
 80064ec:	e7df      	b.n	80064ae <_dtoa_r+0x276>
 80064ee:	bf00      	nop
 80064f0:	636f4361 	.word	0x636f4361
 80064f4:	3fd287a7 	.word	0x3fd287a7
 80064f8:	8b60c8b3 	.word	0x8b60c8b3
 80064fc:	3fc68a28 	.word	0x3fc68a28
 8006500:	509f79fb 	.word	0x509f79fb
 8006504:	3fd34413 	.word	0x3fd34413
 8006508:	0800833d 	.word	0x0800833d
 800650c:	08008354 	.word	0x08008354
 8006510:	7ff00000 	.word	0x7ff00000
 8006514:	08008339 	.word	0x08008339
 8006518:	08008330 	.word	0x08008330
 800651c:	0800830d 	.word	0x0800830d
 8006520:	3ff80000 	.word	0x3ff80000
 8006524:	080084a8 	.word	0x080084a8
 8006528:	080083af 	.word	0x080083af
 800652c:	2501      	movs	r5, #1
 800652e:	2300      	movs	r3, #0
 8006530:	9306      	str	r3, [sp, #24]
 8006532:	9508      	str	r5, [sp, #32]
 8006534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006538:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	2312      	movs	r3, #18
 8006540:	e7b0      	b.n	80064a4 <_dtoa_r+0x26c>
 8006542:	2301      	movs	r3, #1
 8006544:	9308      	str	r3, [sp, #32]
 8006546:	e7f5      	b.n	8006534 <_dtoa_r+0x2fc>
 8006548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800654a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800654e:	e7b8      	b.n	80064c2 <_dtoa_r+0x28a>
 8006550:	3101      	adds	r1, #1
 8006552:	6041      	str	r1, [r0, #4]
 8006554:	0052      	lsls	r2, r2, #1
 8006556:	e7b8      	b.n	80064ca <_dtoa_r+0x292>
 8006558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800655a:	9a01      	ldr	r2, [sp, #4]
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	9b03      	ldr	r3, [sp, #12]
 8006560:	2b0e      	cmp	r3, #14
 8006562:	f200 809d 	bhi.w	80066a0 <_dtoa_r+0x468>
 8006566:	2d00      	cmp	r5, #0
 8006568:	f000 809a 	beq.w	80066a0 <_dtoa_r+0x468>
 800656c:	9b00      	ldr	r3, [sp, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	dd32      	ble.n	80065d8 <_dtoa_r+0x3a0>
 8006572:	4ab7      	ldr	r2, [pc, #732]	; (8006850 <_dtoa_r+0x618>)
 8006574:	f003 030f 	and.w	r3, r3, #15
 8006578:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800657c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006580:	9b00      	ldr	r3, [sp, #0]
 8006582:	05d8      	lsls	r0, r3, #23
 8006584:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006588:	d516      	bpl.n	80065b8 <_dtoa_r+0x380>
 800658a:	4bb2      	ldr	r3, [pc, #712]	; (8006854 <_dtoa_r+0x61c>)
 800658c:	ec51 0b19 	vmov	r0, r1, d9
 8006590:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006594:	f7fa f972 	bl	800087c <__aeabi_ddiv>
 8006598:	f007 070f 	and.w	r7, r7, #15
 800659c:	4682      	mov	sl, r0
 800659e:	468b      	mov	fp, r1
 80065a0:	2503      	movs	r5, #3
 80065a2:	4eac      	ldr	r6, [pc, #688]	; (8006854 <_dtoa_r+0x61c>)
 80065a4:	b957      	cbnz	r7, 80065bc <_dtoa_r+0x384>
 80065a6:	4642      	mov	r2, r8
 80065a8:	464b      	mov	r3, r9
 80065aa:	4650      	mov	r0, sl
 80065ac:	4659      	mov	r1, fp
 80065ae:	f7fa f965 	bl	800087c <__aeabi_ddiv>
 80065b2:	4682      	mov	sl, r0
 80065b4:	468b      	mov	fp, r1
 80065b6:	e028      	b.n	800660a <_dtoa_r+0x3d2>
 80065b8:	2502      	movs	r5, #2
 80065ba:	e7f2      	b.n	80065a2 <_dtoa_r+0x36a>
 80065bc:	07f9      	lsls	r1, r7, #31
 80065be:	d508      	bpl.n	80065d2 <_dtoa_r+0x39a>
 80065c0:	4640      	mov	r0, r8
 80065c2:	4649      	mov	r1, r9
 80065c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065c8:	f7fa f82e 	bl	8000628 <__aeabi_dmul>
 80065cc:	3501      	adds	r5, #1
 80065ce:	4680      	mov	r8, r0
 80065d0:	4689      	mov	r9, r1
 80065d2:	107f      	asrs	r7, r7, #1
 80065d4:	3608      	adds	r6, #8
 80065d6:	e7e5      	b.n	80065a4 <_dtoa_r+0x36c>
 80065d8:	f000 809b 	beq.w	8006712 <_dtoa_r+0x4da>
 80065dc:	9b00      	ldr	r3, [sp, #0]
 80065de:	4f9d      	ldr	r7, [pc, #628]	; (8006854 <_dtoa_r+0x61c>)
 80065e0:	425e      	negs	r6, r3
 80065e2:	4b9b      	ldr	r3, [pc, #620]	; (8006850 <_dtoa_r+0x618>)
 80065e4:	f006 020f 	and.w	r2, r6, #15
 80065e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	ec51 0b19 	vmov	r0, r1, d9
 80065f4:	f7fa f818 	bl	8000628 <__aeabi_dmul>
 80065f8:	1136      	asrs	r6, r6, #4
 80065fa:	4682      	mov	sl, r0
 80065fc:	468b      	mov	fp, r1
 80065fe:	2300      	movs	r3, #0
 8006600:	2502      	movs	r5, #2
 8006602:	2e00      	cmp	r6, #0
 8006604:	d17a      	bne.n	80066fc <_dtoa_r+0x4c4>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1d3      	bne.n	80065b2 <_dtoa_r+0x37a>
 800660a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 8082 	beq.w	8006716 <_dtoa_r+0x4de>
 8006612:	4b91      	ldr	r3, [pc, #580]	; (8006858 <_dtoa_r+0x620>)
 8006614:	2200      	movs	r2, #0
 8006616:	4650      	mov	r0, sl
 8006618:	4659      	mov	r1, fp
 800661a:	f7fa fa77 	bl	8000b0c <__aeabi_dcmplt>
 800661e:	2800      	cmp	r0, #0
 8006620:	d079      	beq.n	8006716 <_dtoa_r+0x4de>
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d076      	beq.n	8006716 <_dtoa_r+0x4de>
 8006628:	9b02      	ldr	r3, [sp, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	dd36      	ble.n	800669c <_dtoa_r+0x464>
 800662e:	9b00      	ldr	r3, [sp, #0]
 8006630:	4650      	mov	r0, sl
 8006632:	4659      	mov	r1, fp
 8006634:	1e5f      	subs	r7, r3, #1
 8006636:	2200      	movs	r2, #0
 8006638:	4b88      	ldr	r3, [pc, #544]	; (800685c <_dtoa_r+0x624>)
 800663a:	f7f9 fff5 	bl	8000628 <__aeabi_dmul>
 800663e:	9e02      	ldr	r6, [sp, #8]
 8006640:	4682      	mov	sl, r0
 8006642:	468b      	mov	fp, r1
 8006644:	3501      	adds	r5, #1
 8006646:	4628      	mov	r0, r5
 8006648:	f7f9 ff84 	bl	8000554 <__aeabi_i2d>
 800664c:	4652      	mov	r2, sl
 800664e:	465b      	mov	r3, fp
 8006650:	f7f9 ffea 	bl	8000628 <__aeabi_dmul>
 8006654:	4b82      	ldr	r3, [pc, #520]	; (8006860 <_dtoa_r+0x628>)
 8006656:	2200      	movs	r2, #0
 8006658:	f7f9 fe30 	bl	80002bc <__adddf3>
 800665c:	46d0      	mov	r8, sl
 800665e:	46d9      	mov	r9, fp
 8006660:	4682      	mov	sl, r0
 8006662:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006666:	2e00      	cmp	r6, #0
 8006668:	d158      	bne.n	800671c <_dtoa_r+0x4e4>
 800666a:	4b7e      	ldr	r3, [pc, #504]	; (8006864 <_dtoa_r+0x62c>)
 800666c:	2200      	movs	r2, #0
 800666e:	4640      	mov	r0, r8
 8006670:	4649      	mov	r1, r9
 8006672:	f7f9 fe21 	bl	80002b8 <__aeabi_dsub>
 8006676:	4652      	mov	r2, sl
 8006678:	465b      	mov	r3, fp
 800667a:	4680      	mov	r8, r0
 800667c:	4689      	mov	r9, r1
 800667e:	f7fa fa63 	bl	8000b48 <__aeabi_dcmpgt>
 8006682:	2800      	cmp	r0, #0
 8006684:	f040 8295 	bne.w	8006bb2 <_dtoa_r+0x97a>
 8006688:	4652      	mov	r2, sl
 800668a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7fa fa3b 	bl	8000b0c <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	f040 8289 	bne.w	8006bae <_dtoa_r+0x976>
 800669c:	ec5b ab19 	vmov	sl, fp, d9
 80066a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f2c0 8148 	blt.w	8006938 <_dtoa_r+0x700>
 80066a8:	9a00      	ldr	r2, [sp, #0]
 80066aa:	2a0e      	cmp	r2, #14
 80066ac:	f300 8144 	bgt.w	8006938 <_dtoa_r+0x700>
 80066b0:	4b67      	ldr	r3, [pc, #412]	; (8006850 <_dtoa_r+0x618>)
 80066b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f280 80d5 	bge.w	800686c <_dtoa_r+0x634>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f300 80d1 	bgt.w	800686c <_dtoa_r+0x634>
 80066ca:	f040 826f 	bne.w	8006bac <_dtoa_r+0x974>
 80066ce:	4b65      	ldr	r3, [pc, #404]	; (8006864 <_dtoa_r+0x62c>)
 80066d0:	2200      	movs	r2, #0
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7f9 ffa7 	bl	8000628 <__aeabi_dmul>
 80066da:	4652      	mov	r2, sl
 80066dc:	465b      	mov	r3, fp
 80066de:	f7fa fa29 	bl	8000b34 <__aeabi_dcmpge>
 80066e2:	9e03      	ldr	r6, [sp, #12]
 80066e4:	4637      	mov	r7, r6
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f040 8245 	bne.w	8006b76 <_dtoa_r+0x93e>
 80066ec:	9d01      	ldr	r5, [sp, #4]
 80066ee:	2331      	movs	r3, #49	; 0x31
 80066f0:	f805 3b01 	strb.w	r3, [r5], #1
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	3301      	adds	r3, #1
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	e240      	b.n	8006b7e <_dtoa_r+0x946>
 80066fc:	07f2      	lsls	r2, r6, #31
 80066fe:	d505      	bpl.n	800670c <_dtoa_r+0x4d4>
 8006700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006704:	f7f9 ff90 	bl	8000628 <__aeabi_dmul>
 8006708:	3501      	adds	r5, #1
 800670a:	2301      	movs	r3, #1
 800670c:	1076      	asrs	r6, r6, #1
 800670e:	3708      	adds	r7, #8
 8006710:	e777      	b.n	8006602 <_dtoa_r+0x3ca>
 8006712:	2502      	movs	r5, #2
 8006714:	e779      	b.n	800660a <_dtoa_r+0x3d2>
 8006716:	9f00      	ldr	r7, [sp, #0]
 8006718:	9e03      	ldr	r6, [sp, #12]
 800671a:	e794      	b.n	8006646 <_dtoa_r+0x40e>
 800671c:	9901      	ldr	r1, [sp, #4]
 800671e:	4b4c      	ldr	r3, [pc, #304]	; (8006850 <_dtoa_r+0x618>)
 8006720:	4431      	add	r1, r6
 8006722:	910d      	str	r1, [sp, #52]	; 0x34
 8006724:	9908      	ldr	r1, [sp, #32]
 8006726:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800672a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800672e:	2900      	cmp	r1, #0
 8006730:	d043      	beq.n	80067ba <_dtoa_r+0x582>
 8006732:	494d      	ldr	r1, [pc, #308]	; (8006868 <_dtoa_r+0x630>)
 8006734:	2000      	movs	r0, #0
 8006736:	f7fa f8a1 	bl	800087c <__aeabi_ddiv>
 800673a:	4652      	mov	r2, sl
 800673c:	465b      	mov	r3, fp
 800673e:	f7f9 fdbb 	bl	80002b8 <__aeabi_dsub>
 8006742:	9d01      	ldr	r5, [sp, #4]
 8006744:	4682      	mov	sl, r0
 8006746:	468b      	mov	fp, r1
 8006748:	4649      	mov	r1, r9
 800674a:	4640      	mov	r0, r8
 800674c:	f7fa fa1c 	bl	8000b88 <__aeabi_d2iz>
 8006750:	4606      	mov	r6, r0
 8006752:	f7f9 feff 	bl	8000554 <__aeabi_i2d>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4640      	mov	r0, r8
 800675c:	4649      	mov	r1, r9
 800675e:	f7f9 fdab 	bl	80002b8 <__aeabi_dsub>
 8006762:	3630      	adds	r6, #48	; 0x30
 8006764:	f805 6b01 	strb.w	r6, [r5], #1
 8006768:	4652      	mov	r2, sl
 800676a:	465b      	mov	r3, fp
 800676c:	4680      	mov	r8, r0
 800676e:	4689      	mov	r9, r1
 8006770:	f7fa f9cc 	bl	8000b0c <__aeabi_dcmplt>
 8006774:	2800      	cmp	r0, #0
 8006776:	d163      	bne.n	8006840 <_dtoa_r+0x608>
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	4936      	ldr	r1, [pc, #216]	; (8006858 <_dtoa_r+0x620>)
 800677e:	2000      	movs	r0, #0
 8006780:	f7f9 fd9a 	bl	80002b8 <__aeabi_dsub>
 8006784:	4652      	mov	r2, sl
 8006786:	465b      	mov	r3, fp
 8006788:	f7fa f9c0 	bl	8000b0c <__aeabi_dcmplt>
 800678c:	2800      	cmp	r0, #0
 800678e:	f040 80b5 	bne.w	80068fc <_dtoa_r+0x6c4>
 8006792:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006794:	429d      	cmp	r5, r3
 8006796:	d081      	beq.n	800669c <_dtoa_r+0x464>
 8006798:	4b30      	ldr	r3, [pc, #192]	; (800685c <_dtoa_r+0x624>)
 800679a:	2200      	movs	r2, #0
 800679c:	4650      	mov	r0, sl
 800679e:	4659      	mov	r1, fp
 80067a0:	f7f9 ff42 	bl	8000628 <__aeabi_dmul>
 80067a4:	4b2d      	ldr	r3, [pc, #180]	; (800685c <_dtoa_r+0x624>)
 80067a6:	4682      	mov	sl, r0
 80067a8:	468b      	mov	fp, r1
 80067aa:	4640      	mov	r0, r8
 80067ac:	4649      	mov	r1, r9
 80067ae:	2200      	movs	r2, #0
 80067b0:	f7f9 ff3a 	bl	8000628 <__aeabi_dmul>
 80067b4:	4680      	mov	r8, r0
 80067b6:	4689      	mov	r9, r1
 80067b8:	e7c6      	b.n	8006748 <_dtoa_r+0x510>
 80067ba:	4650      	mov	r0, sl
 80067bc:	4659      	mov	r1, fp
 80067be:	f7f9 ff33 	bl	8000628 <__aeabi_dmul>
 80067c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067c4:	9d01      	ldr	r5, [sp, #4]
 80067c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80067c8:	4682      	mov	sl, r0
 80067ca:	468b      	mov	fp, r1
 80067cc:	4649      	mov	r1, r9
 80067ce:	4640      	mov	r0, r8
 80067d0:	f7fa f9da 	bl	8000b88 <__aeabi_d2iz>
 80067d4:	4606      	mov	r6, r0
 80067d6:	f7f9 febd 	bl	8000554 <__aeabi_i2d>
 80067da:	3630      	adds	r6, #48	; 0x30
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4640      	mov	r0, r8
 80067e2:	4649      	mov	r1, r9
 80067e4:	f7f9 fd68 	bl	80002b8 <__aeabi_dsub>
 80067e8:	f805 6b01 	strb.w	r6, [r5], #1
 80067ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ee:	429d      	cmp	r5, r3
 80067f0:	4680      	mov	r8, r0
 80067f2:	4689      	mov	r9, r1
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	d124      	bne.n	8006844 <_dtoa_r+0x60c>
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <_dtoa_r+0x630>)
 80067fc:	4650      	mov	r0, sl
 80067fe:	4659      	mov	r1, fp
 8006800:	f7f9 fd5c 	bl	80002bc <__adddf3>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4640      	mov	r0, r8
 800680a:	4649      	mov	r1, r9
 800680c:	f7fa f99c 	bl	8000b48 <__aeabi_dcmpgt>
 8006810:	2800      	cmp	r0, #0
 8006812:	d173      	bne.n	80068fc <_dtoa_r+0x6c4>
 8006814:	4652      	mov	r2, sl
 8006816:	465b      	mov	r3, fp
 8006818:	4913      	ldr	r1, [pc, #76]	; (8006868 <_dtoa_r+0x630>)
 800681a:	2000      	movs	r0, #0
 800681c:	f7f9 fd4c 	bl	80002b8 <__aeabi_dsub>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	4640      	mov	r0, r8
 8006826:	4649      	mov	r1, r9
 8006828:	f7fa f970 	bl	8000b0c <__aeabi_dcmplt>
 800682c:	2800      	cmp	r0, #0
 800682e:	f43f af35 	beq.w	800669c <_dtoa_r+0x464>
 8006832:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006834:	1e6b      	subs	r3, r5, #1
 8006836:	930f      	str	r3, [sp, #60]	; 0x3c
 8006838:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800683c:	2b30      	cmp	r3, #48	; 0x30
 800683e:	d0f8      	beq.n	8006832 <_dtoa_r+0x5fa>
 8006840:	9700      	str	r7, [sp, #0]
 8006842:	e049      	b.n	80068d8 <_dtoa_r+0x6a0>
 8006844:	4b05      	ldr	r3, [pc, #20]	; (800685c <_dtoa_r+0x624>)
 8006846:	f7f9 feef 	bl	8000628 <__aeabi_dmul>
 800684a:	4680      	mov	r8, r0
 800684c:	4689      	mov	r9, r1
 800684e:	e7bd      	b.n	80067cc <_dtoa_r+0x594>
 8006850:	080084a8 	.word	0x080084a8
 8006854:	08008480 	.word	0x08008480
 8006858:	3ff00000 	.word	0x3ff00000
 800685c:	40240000 	.word	0x40240000
 8006860:	401c0000 	.word	0x401c0000
 8006864:	40140000 	.word	0x40140000
 8006868:	3fe00000 	.word	0x3fe00000
 800686c:	9d01      	ldr	r5, [sp, #4]
 800686e:	4656      	mov	r6, sl
 8006870:	465f      	mov	r7, fp
 8006872:	4642      	mov	r2, r8
 8006874:	464b      	mov	r3, r9
 8006876:	4630      	mov	r0, r6
 8006878:	4639      	mov	r1, r7
 800687a:	f7f9 ffff 	bl	800087c <__aeabi_ddiv>
 800687e:	f7fa f983 	bl	8000b88 <__aeabi_d2iz>
 8006882:	4682      	mov	sl, r0
 8006884:	f7f9 fe66 	bl	8000554 <__aeabi_i2d>
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	f7f9 fecc 	bl	8000628 <__aeabi_dmul>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4630      	mov	r0, r6
 8006896:	4639      	mov	r1, r7
 8006898:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800689c:	f7f9 fd0c 	bl	80002b8 <__aeabi_dsub>
 80068a0:	f805 6b01 	strb.w	r6, [r5], #1
 80068a4:	9e01      	ldr	r6, [sp, #4]
 80068a6:	9f03      	ldr	r7, [sp, #12]
 80068a8:	1bae      	subs	r6, r5, r6
 80068aa:	42b7      	cmp	r7, r6
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	d135      	bne.n	800691e <_dtoa_r+0x6e6>
 80068b2:	f7f9 fd03 	bl	80002bc <__adddf3>
 80068b6:	4642      	mov	r2, r8
 80068b8:	464b      	mov	r3, r9
 80068ba:	4606      	mov	r6, r0
 80068bc:	460f      	mov	r7, r1
 80068be:	f7fa f943 	bl	8000b48 <__aeabi_dcmpgt>
 80068c2:	b9d0      	cbnz	r0, 80068fa <_dtoa_r+0x6c2>
 80068c4:	4642      	mov	r2, r8
 80068c6:	464b      	mov	r3, r9
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	f7fa f914 	bl	8000af8 <__aeabi_dcmpeq>
 80068d0:	b110      	cbz	r0, 80068d8 <_dtoa_r+0x6a0>
 80068d2:	f01a 0f01 	tst.w	sl, #1
 80068d6:	d110      	bne.n	80068fa <_dtoa_r+0x6c2>
 80068d8:	4620      	mov	r0, r4
 80068da:	ee18 1a10 	vmov	r1, s16
 80068de:	f000 fbdf 	bl	80070a0 <_Bfree>
 80068e2:	2300      	movs	r3, #0
 80068e4:	9800      	ldr	r0, [sp, #0]
 80068e6:	702b      	strb	r3, [r5, #0]
 80068e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068ea:	3001      	adds	r0, #1
 80068ec:	6018      	str	r0, [r3, #0]
 80068ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f43f acf1 	beq.w	80062d8 <_dtoa_r+0xa0>
 80068f6:	601d      	str	r5, [r3, #0]
 80068f8:	e4ee      	b.n	80062d8 <_dtoa_r+0xa0>
 80068fa:	9f00      	ldr	r7, [sp, #0]
 80068fc:	462b      	mov	r3, r5
 80068fe:	461d      	mov	r5, r3
 8006900:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006904:	2a39      	cmp	r2, #57	; 0x39
 8006906:	d106      	bne.n	8006916 <_dtoa_r+0x6de>
 8006908:	9a01      	ldr	r2, [sp, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d1f7      	bne.n	80068fe <_dtoa_r+0x6c6>
 800690e:	9901      	ldr	r1, [sp, #4]
 8006910:	2230      	movs	r2, #48	; 0x30
 8006912:	3701      	adds	r7, #1
 8006914:	700a      	strb	r2, [r1, #0]
 8006916:	781a      	ldrb	r2, [r3, #0]
 8006918:	3201      	adds	r2, #1
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	e790      	b.n	8006840 <_dtoa_r+0x608>
 800691e:	4ba6      	ldr	r3, [pc, #664]	; (8006bb8 <_dtoa_r+0x980>)
 8006920:	2200      	movs	r2, #0
 8006922:	f7f9 fe81 	bl	8000628 <__aeabi_dmul>
 8006926:	2200      	movs	r2, #0
 8006928:	2300      	movs	r3, #0
 800692a:	4606      	mov	r6, r0
 800692c:	460f      	mov	r7, r1
 800692e:	f7fa f8e3 	bl	8000af8 <__aeabi_dcmpeq>
 8006932:	2800      	cmp	r0, #0
 8006934:	d09d      	beq.n	8006872 <_dtoa_r+0x63a>
 8006936:	e7cf      	b.n	80068d8 <_dtoa_r+0x6a0>
 8006938:	9a08      	ldr	r2, [sp, #32]
 800693a:	2a00      	cmp	r2, #0
 800693c:	f000 80d7 	beq.w	8006aee <_dtoa_r+0x8b6>
 8006940:	9a06      	ldr	r2, [sp, #24]
 8006942:	2a01      	cmp	r2, #1
 8006944:	f300 80ba 	bgt.w	8006abc <_dtoa_r+0x884>
 8006948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800694a:	2a00      	cmp	r2, #0
 800694c:	f000 80b2 	beq.w	8006ab4 <_dtoa_r+0x87c>
 8006950:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006954:	9e07      	ldr	r6, [sp, #28]
 8006956:	9d04      	ldr	r5, [sp, #16]
 8006958:	9a04      	ldr	r2, [sp, #16]
 800695a:	441a      	add	r2, r3
 800695c:	9204      	str	r2, [sp, #16]
 800695e:	9a05      	ldr	r2, [sp, #20]
 8006960:	2101      	movs	r1, #1
 8006962:	441a      	add	r2, r3
 8006964:	4620      	mov	r0, r4
 8006966:	9205      	str	r2, [sp, #20]
 8006968:	f000 fc52 	bl	8007210 <__i2b>
 800696c:	4607      	mov	r7, r0
 800696e:	2d00      	cmp	r5, #0
 8006970:	dd0c      	ble.n	800698c <_dtoa_r+0x754>
 8006972:	9b05      	ldr	r3, [sp, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	dd09      	ble.n	800698c <_dtoa_r+0x754>
 8006978:	42ab      	cmp	r3, r5
 800697a:	9a04      	ldr	r2, [sp, #16]
 800697c:	bfa8      	it	ge
 800697e:	462b      	movge	r3, r5
 8006980:	1ad2      	subs	r2, r2, r3
 8006982:	9204      	str	r2, [sp, #16]
 8006984:	9a05      	ldr	r2, [sp, #20]
 8006986:	1aed      	subs	r5, r5, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	9305      	str	r3, [sp, #20]
 800698c:	9b07      	ldr	r3, [sp, #28]
 800698e:	b31b      	cbz	r3, 80069d8 <_dtoa_r+0x7a0>
 8006990:	9b08      	ldr	r3, [sp, #32]
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 80af 	beq.w	8006af6 <_dtoa_r+0x8be>
 8006998:	2e00      	cmp	r6, #0
 800699a:	dd13      	ble.n	80069c4 <_dtoa_r+0x78c>
 800699c:	4639      	mov	r1, r7
 800699e:	4632      	mov	r2, r6
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 fcf5 	bl	8007390 <__pow5mult>
 80069a6:	ee18 2a10 	vmov	r2, s16
 80069aa:	4601      	mov	r1, r0
 80069ac:	4607      	mov	r7, r0
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 fc44 	bl	800723c <__multiply>
 80069b4:	ee18 1a10 	vmov	r1, s16
 80069b8:	4680      	mov	r8, r0
 80069ba:	4620      	mov	r0, r4
 80069bc:	f000 fb70 	bl	80070a0 <_Bfree>
 80069c0:	ee08 8a10 	vmov	s16, r8
 80069c4:	9b07      	ldr	r3, [sp, #28]
 80069c6:	1b9a      	subs	r2, r3, r6
 80069c8:	d006      	beq.n	80069d8 <_dtoa_r+0x7a0>
 80069ca:	ee18 1a10 	vmov	r1, s16
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 fcde 	bl	8007390 <__pow5mult>
 80069d4:	ee08 0a10 	vmov	s16, r0
 80069d8:	2101      	movs	r1, #1
 80069da:	4620      	mov	r0, r4
 80069dc:	f000 fc18 	bl	8007210 <__i2b>
 80069e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	4606      	mov	r6, r0
 80069e6:	f340 8088 	ble.w	8006afa <_dtoa_r+0x8c2>
 80069ea:	461a      	mov	r2, r3
 80069ec:	4601      	mov	r1, r0
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fcce 	bl	8007390 <__pow5mult>
 80069f4:	9b06      	ldr	r3, [sp, #24]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	4606      	mov	r6, r0
 80069fa:	f340 8081 	ble.w	8006b00 <_dtoa_r+0x8c8>
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	6933      	ldr	r3, [r6, #16]
 8006a04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a08:	6918      	ldr	r0, [r3, #16]
 8006a0a:	f000 fbb1 	bl	8007170 <__hi0bits>
 8006a0e:	f1c0 0020 	rsb	r0, r0, #32
 8006a12:	9b05      	ldr	r3, [sp, #20]
 8006a14:	4418      	add	r0, r3
 8006a16:	f010 001f 	ands.w	r0, r0, #31
 8006a1a:	f000 8092 	beq.w	8006b42 <_dtoa_r+0x90a>
 8006a1e:	f1c0 0320 	rsb	r3, r0, #32
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	f340 808a 	ble.w	8006b3c <_dtoa_r+0x904>
 8006a28:	f1c0 001c 	rsb	r0, r0, #28
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	4403      	add	r3, r0
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	9b05      	ldr	r3, [sp, #20]
 8006a34:	4403      	add	r3, r0
 8006a36:	4405      	add	r5, r0
 8006a38:	9305      	str	r3, [sp, #20]
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dd07      	ble.n	8006a50 <_dtoa_r+0x818>
 8006a40:	ee18 1a10 	vmov	r1, s16
 8006a44:	461a      	mov	r2, r3
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 fcfc 	bl	8007444 <__lshift>
 8006a4c:	ee08 0a10 	vmov	s16, r0
 8006a50:	9b05      	ldr	r3, [sp, #20]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	dd05      	ble.n	8006a62 <_dtoa_r+0x82a>
 8006a56:	4631      	mov	r1, r6
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f000 fcf2 	bl	8007444 <__lshift>
 8006a60:	4606      	mov	r6, r0
 8006a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d06e      	beq.n	8006b46 <_dtoa_r+0x90e>
 8006a68:	ee18 0a10 	vmov	r0, s16
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	f000 fd59 	bl	8007524 <__mcmp>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	da67      	bge.n	8006b46 <_dtoa_r+0x90e>
 8006a76:	9b00      	ldr	r3, [sp, #0]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	ee18 1a10 	vmov	r1, s16
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	220a      	movs	r2, #10
 8006a82:	2300      	movs	r3, #0
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fb2d 	bl	80070e4 <__multadd>
 8006a8a:	9b08      	ldr	r3, [sp, #32]
 8006a8c:	ee08 0a10 	vmov	s16, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 81b1 	beq.w	8006df8 <_dtoa_r+0xbc0>
 8006a96:	2300      	movs	r3, #0
 8006a98:	4639      	mov	r1, r7
 8006a9a:	220a      	movs	r2, #10
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fb21 	bl	80070e4 <__multadd>
 8006aa2:	9b02      	ldr	r3, [sp, #8]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	f300 808e 	bgt.w	8006bc8 <_dtoa_r+0x990>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	2b02      	cmp	r3, #2
 8006ab0:	dc51      	bgt.n	8006b56 <_dtoa_r+0x91e>
 8006ab2:	e089      	b.n	8006bc8 <_dtoa_r+0x990>
 8006ab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ab6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006aba:	e74b      	b.n	8006954 <_dtoa_r+0x71c>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	1e5e      	subs	r6, r3, #1
 8006ac0:	9b07      	ldr	r3, [sp, #28]
 8006ac2:	42b3      	cmp	r3, r6
 8006ac4:	bfbf      	itttt	lt
 8006ac6:	9b07      	ldrlt	r3, [sp, #28]
 8006ac8:	9607      	strlt	r6, [sp, #28]
 8006aca:	1af2      	sublt	r2, r6, r3
 8006acc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006ace:	bfb6      	itet	lt
 8006ad0:	189b      	addlt	r3, r3, r2
 8006ad2:	1b9e      	subge	r6, r3, r6
 8006ad4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	bfb8      	it	lt
 8006ada:	2600      	movlt	r6, #0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bfb7      	itett	lt
 8006ae0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006ae4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ae8:	1a9d      	sublt	r5, r3, r2
 8006aea:	2300      	movlt	r3, #0
 8006aec:	e734      	b.n	8006958 <_dtoa_r+0x720>
 8006aee:	9e07      	ldr	r6, [sp, #28]
 8006af0:	9d04      	ldr	r5, [sp, #16]
 8006af2:	9f08      	ldr	r7, [sp, #32]
 8006af4:	e73b      	b.n	800696e <_dtoa_r+0x736>
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	e767      	b.n	80069ca <_dtoa_r+0x792>
 8006afa:	9b06      	ldr	r3, [sp, #24]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	dc18      	bgt.n	8006b32 <_dtoa_r+0x8fa>
 8006b00:	f1ba 0f00 	cmp.w	sl, #0
 8006b04:	d115      	bne.n	8006b32 <_dtoa_r+0x8fa>
 8006b06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b0a:	b993      	cbnz	r3, 8006b32 <_dtoa_r+0x8fa>
 8006b0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b10:	0d1b      	lsrs	r3, r3, #20
 8006b12:	051b      	lsls	r3, r3, #20
 8006b14:	b183      	cbz	r3, 8006b38 <_dtoa_r+0x900>
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	9b05      	ldr	r3, [sp, #20]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	9305      	str	r3, [sp, #20]
 8006b22:	f04f 0801 	mov.w	r8, #1
 8006b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f af6a 	bne.w	8006a02 <_dtoa_r+0x7ca>
 8006b2e:	2001      	movs	r0, #1
 8006b30:	e76f      	b.n	8006a12 <_dtoa_r+0x7da>
 8006b32:	f04f 0800 	mov.w	r8, #0
 8006b36:	e7f6      	b.n	8006b26 <_dtoa_r+0x8ee>
 8006b38:	4698      	mov	r8, r3
 8006b3a:	e7f4      	b.n	8006b26 <_dtoa_r+0x8ee>
 8006b3c:	f43f af7d 	beq.w	8006a3a <_dtoa_r+0x802>
 8006b40:	4618      	mov	r0, r3
 8006b42:	301c      	adds	r0, #28
 8006b44:	e772      	b.n	8006a2c <_dtoa_r+0x7f4>
 8006b46:	9b03      	ldr	r3, [sp, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dc37      	bgt.n	8006bbc <_dtoa_r+0x984>
 8006b4c:	9b06      	ldr	r3, [sp, #24]
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	dd34      	ble.n	8006bbc <_dtoa_r+0x984>
 8006b52:	9b03      	ldr	r3, [sp, #12]
 8006b54:	9302      	str	r3, [sp, #8]
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	b96b      	cbnz	r3, 8006b76 <_dtoa_r+0x93e>
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	2205      	movs	r2, #5
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 fac0 	bl	80070e4 <__multadd>
 8006b64:	4601      	mov	r1, r0
 8006b66:	4606      	mov	r6, r0
 8006b68:	ee18 0a10 	vmov	r0, s16
 8006b6c:	f000 fcda 	bl	8007524 <__mcmp>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f73f adbb 	bgt.w	80066ec <_dtoa_r+0x4b4>
 8006b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b78:	9d01      	ldr	r5, [sp, #4]
 8006b7a:	43db      	mvns	r3, r3
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	f04f 0800 	mov.w	r8, #0
 8006b82:	4631      	mov	r1, r6
 8006b84:	4620      	mov	r0, r4
 8006b86:	f000 fa8b 	bl	80070a0 <_Bfree>
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	f43f aea4 	beq.w	80068d8 <_dtoa_r+0x6a0>
 8006b90:	f1b8 0f00 	cmp.w	r8, #0
 8006b94:	d005      	beq.n	8006ba2 <_dtoa_r+0x96a>
 8006b96:	45b8      	cmp	r8, r7
 8006b98:	d003      	beq.n	8006ba2 <_dtoa_r+0x96a>
 8006b9a:	4641      	mov	r1, r8
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fa7f 	bl	80070a0 <_Bfree>
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 fa7b 	bl	80070a0 <_Bfree>
 8006baa:	e695      	b.n	80068d8 <_dtoa_r+0x6a0>
 8006bac:	2600      	movs	r6, #0
 8006bae:	4637      	mov	r7, r6
 8006bb0:	e7e1      	b.n	8006b76 <_dtoa_r+0x93e>
 8006bb2:	9700      	str	r7, [sp, #0]
 8006bb4:	4637      	mov	r7, r6
 8006bb6:	e599      	b.n	80066ec <_dtoa_r+0x4b4>
 8006bb8:	40240000 	.word	0x40240000
 8006bbc:	9b08      	ldr	r3, [sp, #32]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80ca 	beq.w	8006d58 <_dtoa_r+0xb20>
 8006bc4:	9b03      	ldr	r3, [sp, #12]
 8006bc6:	9302      	str	r3, [sp, #8]
 8006bc8:	2d00      	cmp	r5, #0
 8006bca:	dd05      	ble.n	8006bd8 <_dtoa_r+0x9a0>
 8006bcc:	4639      	mov	r1, r7
 8006bce:	462a      	mov	r2, r5
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fc37 	bl	8007444 <__lshift>
 8006bd6:	4607      	mov	r7, r0
 8006bd8:	f1b8 0f00 	cmp.w	r8, #0
 8006bdc:	d05b      	beq.n	8006c96 <_dtoa_r+0xa5e>
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	4620      	mov	r0, r4
 8006be2:	f000 fa1d 	bl	8007020 <_Balloc>
 8006be6:	4605      	mov	r5, r0
 8006be8:	b928      	cbnz	r0, 8006bf6 <_dtoa_r+0x9be>
 8006bea:	4b87      	ldr	r3, [pc, #540]	; (8006e08 <_dtoa_r+0xbd0>)
 8006bec:	4602      	mov	r2, r0
 8006bee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bf2:	f7ff bb3b 	b.w	800626c <_dtoa_r+0x34>
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	3202      	adds	r2, #2
 8006bfa:	0092      	lsls	r2, r2, #2
 8006bfc:	f107 010c 	add.w	r1, r7, #12
 8006c00:	300c      	adds	r0, #12
 8006c02:	f7fe fdf3 	bl	80057ec <memcpy>
 8006c06:	2201      	movs	r2, #1
 8006c08:	4629      	mov	r1, r5
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f000 fc1a 	bl	8007444 <__lshift>
 8006c10:	9b01      	ldr	r3, [sp, #4]
 8006c12:	f103 0901 	add.w	r9, r3, #1
 8006c16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	9305      	str	r3, [sp, #20]
 8006c1e:	f00a 0301 	and.w	r3, sl, #1
 8006c22:	46b8      	mov	r8, r7
 8006c24:	9304      	str	r3, [sp, #16]
 8006c26:	4607      	mov	r7, r0
 8006c28:	4631      	mov	r1, r6
 8006c2a:	ee18 0a10 	vmov	r0, s16
 8006c2e:	f7ff fa75 	bl	800611c <quorem>
 8006c32:	4641      	mov	r1, r8
 8006c34:	9002      	str	r0, [sp, #8]
 8006c36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c3a:	ee18 0a10 	vmov	r0, s16
 8006c3e:	f000 fc71 	bl	8007524 <__mcmp>
 8006c42:	463a      	mov	r2, r7
 8006c44:	9003      	str	r0, [sp, #12]
 8006c46:	4631      	mov	r1, r6
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f000 fc87 	bl	800755c <__mdiff>
 8006c4e:	68c2      	ldr	r2, [r0, #12]
 8006c50:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006c54:	4605      	mov	r5, r0
 8006c56:	bb02      	cbnz	r2, 8006c9a <_dtoa_r+0xa62>
 8006c58:	4601      	mov	r1, r0
 8006c5a:	ee18 0a10 	vmov	r0, s16
 8006c5e:	f000 fc61 	bl	8007524 <__mcmp>
 8006c62:	4602      	mov	r2, r0
 8006c64:	4629      	mov	r1, r5
 8006c66:	4620      	mov	r0, r4
 8006c68:	9207      	str	r2, [sp, #28]
 8006c6a:	f000 fa19 	bl	80070a0 <_Bfree>
 8006c6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006c72:	ea43 0102 	orr.w	r1, r3, r2
 8006c76:	9b04      	ldr	r3, [sp, #16]
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	464d      	mov	r5, r9
 8006c7c:	d10f      	bne.n	8006c9e <_dtoa_r+0xa66>
 8006c7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c82:	d02a      	beq.n	8006cda <_dtoa_r+0xaa2>
 8006c84:	9b03      	ldr	r3, [sp, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	dd02      	ble.n	8006c90 <_dtoa_r+0xa58>
 8006c8a:	9b02      	ldr	r3, [sp, #8]
 8006c8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006c90:	f88b a000 	strb.w	sl, [fp]
 8006c94:	e775      	b.n	8006b82 <_dtoa_r+0x94a>
 8006c96:	4638      	mov	r0, r7
 8006c98:	e7ba      	b.n	8006c10 <_dtoa_r+0x9d8>
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	e7e2      	b.n	8006c64 <_dtoa_r+0xa2c>
 8006c9e:	9b03      	ldr	r3, [sp, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	db04      	blt.n	8006cae <_dtoa_r+0xa76>
 8006ca4:	9906      	ldr	r1, [sp, #24]
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	9904      	ldr	r1, [sp, #16]
 8006caa:	430b      	orrs	r3, r1
 8006cac:	d122      	bne.n	8006cf4 <_dtoa_r+0xabc>
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	ddee      	ble.n	8006c90 <_dtoa_r+0xa58>
 8006cb2:	ee18 1a10 	vmov	r1, s16
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fbc3 	bl	8007444 <__lshift>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	ee08 0a10 	vmov	s16, r0
 8006cc4:	f000 fc2e 	bl	8007524 <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dc03      	bgt.n	8006cd4 <_dtoa_r+0xa9c>
 8006ccc:	d1e0      	bne.n	8006c90 <_dtoa_r+0xa58>
 8006cce:	f01a 0f01 	tst.w	sl, #1
 8006cd2:	d0dd      	beq.n	8006c90 <_dtoa_r+0xa58>
 8006cd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cd8:	d1d7      	bne.n	8006c8a <_dtoa_r+0xa52>
 8006cda:	2339      	movs	r3, #57	; 0x39
 8006cdc:	f88b 3000 	strb.w	r3, [fp]
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	461d      	mov	r5, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cea:	2a39      	cmp	r2, #57	; 0x39
 8006cec:	d071      	beq.n	8006dd2 <_dtoa_r+0xb9a>
 8006cee:	3201      	adds	r2, #1
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e746      	b.n	8006b82 <_dtoa_r+0x94a>
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	dd07      	ble.n	8006d08 <_dtoa_r+0xad0>
 8006cf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cfc:	d0ed      	beq.n	8006cda <_dtoa_r+0xaa2>
 8006cfe:	f10a 0301 	add.w	r3, sl, #1
 8006d02:	f88b 3000 	strb.w	r3, [fp]
 8006d06:	e73c      	b.n	8006b82 <_dtoa_r+0x94a>
 8006d08:	9b05      	ldr	r3, [sp, #20]
 8006d0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d0e:	4599      	cmp	r9, r3
 8006d10:	d047      	beq.n	8006da2 <_dtoa_r+0xb6a>
 8006d12:	ee18 1a10 	vmov	r1, s16
 8006d16:	2300      	movs	r3, #0
 8006d18:	220a      	movs	r2, #10
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 f9e2 	bl	80070e4 <__multadd>
 8006d20:	45b8      	cmp	r8, r7
 8006d22:	ee08 0a10 	vmov	s16, r0
 8006d26:	f04f 0300 	mov.w	r3, #0
 8006d2a:	f04f 020a 	mov.w	r2, #10
 8006d2e:	4641      	mov	r1, r8
 8006d30:	4620      	mov	r0, r4
 8006d32:	d106      	bne.n	8006d42 <_dtoa_r+0xb0a>
 8006d34:	f000 f9d6 	bl	80070e4 <__multadd>
 8006d38:	4680      	mov	r8, r0
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	f109 0901 	add.w	r9, r9, #1
 8006d40:	e772      	b.n	8006c28 <_dtoa_r+0x9f0>
 8006d42:	f000 f9cf 	bl	80070e4 <__multadd>
 8006d46:	4639      	mov	r1, r7
 8006d48:	4680      	mov	r8, r0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	220a      	movs	r2, #10
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f9c8 	bl	80070e4 <__multadd>
 8006d54:	4607      	mov	r7, r0
 8006d56:	e7f1      	b.n	8006d3c <_dtoa_r+0xb04>
 8006d58:	9b03      	ldr	r3, [sp, #12]
 8006d5a:	9302      	str	r3, [sp, #8]
 8006d5c:	9d01      	ldr	r5, [sp, #4]
 8006d5e:	ee18 0a10 	vmov	r0, s16
 8006d62:	4631      	mov	r1, r6
 8006d64:	f7ff f9da 	bl	800611c <quorem>
 8006d68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006d6c:	9b01      	ldr	r3, [sp, #4]
 8006d6e:	f805 ab01 	strb.w	sl, [r5], #1
 8006d72:	1aea      	subs	r2, r5, r3
 8006d74:	9b02      	ldr	r3, [sp, #8]
 8006d76:	4293      	cmp	r3, r2
 8006d78:	dd09      	ble.n	8006d8e <_dtoa_r+0xb56>
 8006d7a:	ee18 1a10 	vmov	r1, s16
 8006d7e:	2300      	movs	r3, #0
 8006d80:	220a      	movs	r2, #10
 8006d82:	4620      	mov	r0, r4
 8006d84:	f000 f9ae 	bl	80070e4 <__multadd>
 8006d88:	ee08 0a10 	vmov	s16, r0
 8006d8c:	e7e7      	b.n	8006d5e <_dtoa_r+0xb26>
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	bfc8      	it	gt
 8006d94:	461d      	movgt	r5, r3
 8006d96:	9b01      	ldr	r3, [sp, #4]
 8006d98:	bfd8      	it	le
 8006d9a:	2501      	movle	r5, #1
 8006d9c:	441d      	add	r5, r3
 8006d9e:	f04f 0800 	mov.w	r8, #0
 8006da2:	ee18 1a10 	vmov	r1, s16
 8006da6:	2201      	movs	r2, #1
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fb4b 	bl	8007444 <__lshift>
 8006dae:	4631      	mov	r1, r6
 8006db0:	ee08 0a10 	vmov	s16, r0
 8006db4:	f000 fbb6 	bl	8007524 <__mcmp>
 8006db8:	2800      	cmp	r0, #0
 8006dba:	dc91      	bgt.n	8006ce0 <_dtoa_r+0xaa8>
 8006dbc:	d102      	bne.n	8006dc4 <_dtoa_r+0xb8c>
 8006dbe:	f01a 0f01 	tst.w	sl, #1
 8006dc2:	d18d      	bne.n	8006ce0 <_dtoa_r+0xaa8>
 8006dc4:	462b      	mov	r3, r5
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dcc:	2a30      	cmp	r2, #48	; 0x30
 8006dce:	d0fa      	beq.n	8006dc6 <_dtoa_r+0xb8e>
 8006dd0:	e6d7      	b.n	8006b82 <_dtoa_r+0x94a>
 8006dd2:	9a01      	ldr	r2, [sp, #4]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d184      	bne.n	8006ce2 <_dtoa_r+0xaaa>
 8006dd8:	9b00      	ldr	r3, [sp, #0]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2331      	movs	r3, #49	; 0x31
 8006de0:	7013      	strb	r3, [r2, #0]
 8006de2:	e6ce      	b.n	8006b82 <_dtoa_r+0x94a>
 8006de4:	4b09      	ldr	r3, [pc, #36]	; (8006e0c <_dtoa_r+0xbd4>)
 8006de6:	f7ff ba95 	b.w	8006314 <_dtoa_r+0xdc>
 8006dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f47f aa6e 	bne.w	80062ce <_dtoa_r+0x96>
 8006df2:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <_dtoa_r+0xbd8>)
 8006df4:	f7ff ba8e 	b.w	8006314 <_dtoa_r+0xdc>
 8006df8:	9b02      	ldr	r3, [sp, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	dcae      	bgt.n	8006d5c <_dtoa_r+0xb24>
 8006dfe:	9b06      	ldr	r3, [sp, #24]
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	f73f aea8 	bgt.w	8006b56 <_dtoa_r+0x91e>
 8006e06:	e7a9      	b.n	8006d5c <_dtoa_r+0xb24>
 8006e08:	080083af 	.word	0x080083af
 8006e0c:	0800830c 	.word	0x0800830c
 8006e10:	08008330 	.word	0x08008330

08006e14 <std>:
 8006e14:	2300      	movs	r3, #0
 8006e16:	b510      	push	{r4, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e22:	6083      	str	r3, [r0, #8]
 8006e24:	8181      	strh	r1, [r0, #12]
 8006e26:	6643      	str	r3, [r0, #100]	; 0x64
 8006e28:	81c2      	strh	r2, [r0, #14]
 8006e2a:	6183      	str	r3, [r0, #24]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	2208      	movs	r2, #8
 8006e30:	305c      	adds	r0, #92	; 0x5c
 8006e32:	f7fe fce9 	bl	8005808 <memset>
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <std+0x38>)
 8006e38:	6263      	str	r3, [r4, #36]	; 0x24
 8006e3a:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <std+0x3c>)
 8006e3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e3e:	4b05      	ldr	r3, [pc, #20]	; (8006e54 <std+0x40>)
 8006e40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e42:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <std+0x44>)
 8006e44:	6224      	str	r4, [r4, #32]
 8006e46:	6323      	str	r3, [r4, #48]	; 0x30
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08007be9 	.word	0x08007be9
 8006e50:	08007c0b 	.word	0x08007c0b
 8006e54:	08007c43 	.word	0x08007c43
 8006e58:	08007c67 	.word	0x08007c67

08006e5c <_cleanup_r>:
 8006e5c:	4901      	ldr	r1, [pc, #4]	; (8006e64 <_cleanup_r+0x8>)
 8006e5e:	f000 b8af 	b.w	8006fc0 <_fwalk_reent>
 8006e62:	bf00      	nop
 8006e64:	08007f7d 	.word	0x08007f7d

08006e68 <__sfmoreglue>:
 8006e68:	b570      	push	{r4, r5, r6, lr}
 8006e6a:	2268      	movs	r2, #104	; 0x68
 8006e6c:	1e4d      	subs	r5, r1, #1
 8006e6e:	4355      	muls	r5, r2
 8006e70:	460e      	mov	r6, r1
 8006e72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e76:	f000 fcd9 	bl	800782c <_malloc_r>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	b140      	cbz	r0, 8006e90 <__sfmoreglue+0x28>
 8006e7e:	2100      	movs	r1, #0
 8006e80:	e9c0 1600 	strd	r1, r6, [r0]
 8006e84:	300c      	adds	r0, #12
 8006e86:	60a0      	str	r0, [r4, #8]
 8006e88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e8c:	f7fe fcbc 	bl	8005808 <memset>
 8006e90:	4620      	mov	r0, r4
 8006e92:	bd70      	pop	{r4, r5, r6, pc}

08006e94 <__sfp_lock_acquire>:
 8006e94:	4801      	ldr	r0, [pc, #4]	; (8006e9c <__sfp_lock_acquire+0x8>)
 8006e96:	f000 b8b8 	b.w	800700a <__retarget_lock_acquire_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	20000371 	.word	0x20000371

08006ea0 <__sfp_lock_release>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	; (8006ea8 <__sfp_lock_release+0x8>)
 8006ea2:	f000 b8b3 	b.w	800700c <__retarget_lock_release_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	20000371 	.word	0x20000371

08006eac <__sinit_lock_acquire>:
 8006eac:	4801      	ldr	r0, [pc, #4]	; (8006eb4 <__sinit_lock_acquire+0x8>)
 8006eae:	f000 b8ac 	b.w	800700a <__retarget_lock_acquire_recursive>
 8006eb2:	bf00      	nop
 8006eb4:	20000372 	.word	0x20000372

08006eb8 <__sinit_lock_release>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sinit_lock_release+0x8>)
 8006eba:	f000 b8a7 	b.w	800700c <__retarget_lock_release_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20000372 	.word	0x20000372

08006ec4 <__sinit>:
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	f7ff fff0 	bl	8006eac <__sinit_lock_acquire>
 8006ecc:	69a3      	ldr	r3, [r4, #24]
 8006ece:	b11b      	cbz	r3, 8006ed8 <__sinit+0x14>
 8006ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed4:	f7ff bff0 	b.w	8006eb8 <__sinit_lock_release>
 8006ed8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006edc:	6523      	str	r3, [r4, #80]	; 0x50
 8006ede:	4b13      	ldr	r3, [pc, #76]	; (8006f2c <__sinit+0x68>)
 8006ee0:	4a13      	ldr	r2, [pc, #76]	; (8006f30 <__sinit+0x6c>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ee6:	42a3      	cmp	r3, r4
 8006ee8:	bf04      	itt	eq
 8006eea:	2301      	moveq	r3, #1
 8006eec:	61a3      	streq	r3, [r4, #24]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f000 f820 	bl	8006f34 <__sfp>
 8006ef4:	6060      	str	r0, [r4, #4]
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	f000 f81c 	bl	8006f34 <__sfp>
 8006efc:	60a0      	str	r0, [r4, #8]
 8006efe:	4620      	mov	r0, r4
 8006f00:	f000 f818 	bl	8006f34 <__sfp>
 8006f04:	2200      	movs	r2, #0
 8006f06:	60e0      	str	r0, [r4, #12]
 8006f08:	2104      	movs	r1, #4
 8006f0a:	6860      	ldr	r0, [r4, #4]
 8006f0c:	f7ff ff82 	bl	8006e14 <std>
 8006f10:	68a0      	ldr	r0, [r4, #8]
 8006f12:	2201      	movs	r2, #1
 8006f14:	2109      	movs	r1, #9
 8006f16:	f7ff ff7d 	bl	8006e14 <std>
 8006f1a:	68e0      	ldr	r0, [r4, #12]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	2112      	movs	r1, #18
 8006f20:	f7ff ff78 	bl	8006e14 <std>
 8006f24:	2301      	movs	r3, #1
 8006f26:	61a3      	str	r3, [r4, #24]
 8006f28:	e7d2      	b.n	8006ed0 <__sinit+0xc>
 8006f2a:	bf00      	nop
 8006f2c:	080082f8 	.word	0x080082f8
 8006f30:	08006e5d 	.word	0x08006e5d

08006f34 <__sfp>:
 8006f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f36:	4607      	mov	r7, r0
 8006f38:	f7ff ffac 	bl	8006e94 <__sfp_lock_acquire>
 8006f3c:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <__sfp+0x84>)
 8006f3e:	681e      	ldr	r6, [r3, #0]
 8006f40:	69b3      	ldr	r3, [r6, #24]
 8006f42:	b913      	cbnz	r3, 8006f4a <__sfp+0x16>
 8006f44:	4630      	mov	r0, r6
 8006f46:	f7ff ffbd 	bl	8006ec4 <__sinit>
 8006f4a:	3648      	adds	r6, #72	; 0x48
 8006f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	d503      	bpl.n	8006f5c <__sfp+0x28>
 8006f54:	6833      	ldr	r3, [r6, #0]
 8006f56:	b30b      	cbz	r3, 8006f9c <__sfp+0x68>
 8006f58:	6836      	ldr	r6, [r6, #0]
 8006f5a:	e7f7      	b.n	8006f4c <__sfp+0x18>
 8006f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f60:	b9d5      	cbnz	r5, 8006f98 <__sfp+0x64>
 8006f62:	4b16      	ldr	r3, [pc, #88]	; (8006fbc <__sfp+0x88>)
 8006f64:	60e3      	str	r3, [r4, #12]
 8006f66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f6a:	6665      	str	r5, [r4, #100]	; 0x64
 8006f6c:	f000 f84c 	bl	8007008 <__retarget_lock_init_recursive>
 8006f70:	f7ff ff96 	bl	8006ea0 <__sfp_lock_release>
 8006f74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f7c:	6025      	str	r5, [r4, #0]
 8006f7e:	61a5      	str	r5, [r4, #24]
 8006f80:	2208      	movs	r2, #8
 8006f82:	4629      	mov	r1, r5
 8006f84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f88:	f7fe fc3e 	bl	8005808 <memset>
 8006f8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f94:	4620      	mov	r0, r4
 8006f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f98:	3468      	adds	r4, #104	; 0x68
 8006f9a:	e7d9      	b.n	8006f50 <__sfp+0x1c>
 8006f9c:	2104      	movs	r1, #4
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	f7ff ff62 	bl	8006e68 <__sfmoreglue>
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	6030      	str	r0, [r6, #0]
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1d5      	bne.n	8006f58 <__sfp+0x24>
 8006fac:	f7ff ff78 	bl	8006ea0 <__sfp_lock_release>
 8006fb0:	230c      	movs	r3, #12
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	e7ee      	b.n	8006f94 <__sfp+0x60>
 8006fb6:	bf00      	nop
 8006fb8:	080082f8 	.word	0x080082f8
 8006fbc:	ffff0001 	.word	0xffff0001

08006fc0 <_fwalk_reent>:
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	4688      	mov	r8, r1
 8006fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fcc:	2700      	movs	r7, #0
 8006fce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fd2:	f1b9 0901 	subs.w	r9, r9, #1
 8006fd6:	d505      	bpl.n	8006fe4 <_fwalk_reent+0x24>
 8006fd8:	6824      	ldr	r4, [r4, #0]
 8006fda:	2c00      	cmp	r4, #0
 8006fdc:	d1f7      	bne.n	8006fce <_fwalk_reent+0xe>
 8006fde:	4638      	mov	r0, r7
 8006fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe4:	89ab      	ldrh	r3, [r5, #12]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d907      	bls.n	8006ffa <_fwalk_reent+0x3a>
 8006fea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	d003      	beq.n	8006ffa <_fwalk_reent+0x3a>
 8006ff2:	4629      	mov	r1, r5
 8006ff4:	4630      	mov	r0, r6
 8006ff6:	47c0      	blx	r8
 8006ff8:	4307      	orrs	r7, r0
 8006ffa:	3568      	adds	r5, #104	; 0x68
 8006ffc:	e7e9      	b.n	8006fd2 <_fwalk_reent+0x12>
	...

08007000 <_localeconv_r>:
 8007000:	4800      	ldr	r0, [pc, #0]	; (8007004 <_localeconv_r+0x4>)
 8007002:	4770      	bx	lr
 8007004:	20000194 	.word	0x20000194

08007008 <__retarget_lock_init_recursive>:
 8007008:	4770      	bx	lr

0800700a <__retarget_lock_acquire_recursive>:
 800700a:	4770      	bx	lr

0800700c <__retarget_lock_release_recursive>:
 800700c:	4770      	bx	lr
	...

08007010 <malloc>:
 8007010:	4b02      	ldr	r3, [pc, #8]	; (800701c <malloc+0xc>)
 8007012:	4601      	mov	r1, r0
 8007014:	6818      	ldr	r0, [r3, #0]
 8007016:	f000 bc09 	b.w	800782c <_malloc_r>
 800701a:	bf00      	nop
 800701c:	20000040 	.word	0x20000040

08007020 <_Balloc>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	b976      	cbnz	r6, 8007048 <_Balloc+0x28>
 800702a:	2010      	movs	r0, #16
 800702c:	f7ff fff0 	bl	8007010 <malloc>
 8007030:	4602      	mov	r2, r0
 8007032:	6260      	str	r0, [r4, #36]	; 0x24
 8007034:	b920      	cbnz	r0, 8007040 <_Balloc+0x20>
 8007036:	4b18      	ldr	r3, [pc, #96]	; (8007098 <_Balloc+0x78>)
 8007038:	4818      	ldr	r0, [pc, #96]	; (800709c <_Balloc+0x7c>)
 800703a:	2166      	movs	r1, #102	; 0x66
 800703c:	f000 feea 	bl	8007e14 <__assert_func>
 8007040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007044:	6006      	str	r6, [r0, #0]
 8007046:	60c6      	str	r6, [r0, #12]
 8007048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800704a:	68f3      	ldr	r3, [r6, #12]
 800704c:	b183      	cbz	r3, 8007070 <_Balloc+0x50>
 800704e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007056:	b9b8      	cbnz	r0, 8007088 <_Balloc+0x68>
 8007058:	2101      	movs	r1, #1
 800705a:	fa01 f605 	lsl.w	r6, r1, r5
 800705e:	1d72      	adds	r2, r6, #5
 8007060:	0092      	lsls	r2, r2, #2
 8007062:	4620      	mov	r0, r4
 8007064:	f000 fb60 	bl	8007728 <_calloc_r>
 8007068:	b160      	cbz	r0, 8007084 <_Balloc+0x64>
 800706a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800706e:	e00e      	b.n	800708e <_Balloc+0x6e>
 8007070:	2221      	movs	r2, #33	; 0x21
 8007072:	2104      	movs	r1, #4
 8007074:	4620      	mov	r0, r4
 8007076:	f000 fb57 	bl	8007728 <_calloc_r>
 800707a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800707c:	60f0      	str	r0, [r6, #12]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e4      	bne.n	800704e <_Balloc+0x2e>
 8007084:	2000      	movs	r0, #0
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	6802      	ldr	r2, [r0, #0]
 800708a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800708e:	2300      	movs	r3, #0
 8007090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007094:	e7f7      	b.n	8007086 <_Balloc+0x66>
 8007096:	bf00      	nop
 8007098:	0800833d 	.word	0x0800833d
 800709c:	08008420 	.word	0x08008420

080070a0 <_Bfree>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070a4:	4605      	mov	r5, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	b976      	cbnz	r6, 80070c8 <_Bfree+0x28>
 80070aa:	2010      	movs	r0, #16
 80070ac:	f7ff ffb0 	bl	8007010 <malloc>
 80070b0:	4602      	mov	r2, r0
 80070b2:	6268      	str	r0, [r5, #36]	; 0x24
 80070b4:	b920      	cbnz	r0, 80070c0 <_Bfree+0x20>
 80070b6:	4b09      	ldr	r3, [pc, #36]	; (80070dc <_Bfree+0x3c>)
 80070b8:	4809      	ldr	r0, [pc, #36]	; (80070e0 <_Bfree+0x40>)
 80070ba:	218a      	movs	r1, #138	; 0x8a
 80070bc:	f000 feaa 	bl	8007e14 <__assert_func>
 80070c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070c4:	6006      	str	r6, [r0, #0]
 80070c6:	60c6      	str	r6, [r0, #12]
 80070c8:	b13c      	cbz	r4, 80070da <_Bfree+0x3a>
 80070ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070cc:	6862      	ldr	r2, [r4, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070d4:	6021      	str	r1, [r4, #0]
 80070d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	0800833d 	.word	0x0800833d
 80070e0:	08008420 	.word	0x08008420

080070e4 <__multadd>:
 80070e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e8:	690d      	ldr	r5, [r1, #16]
 80070ea:	4607      	mov	r7, r0
 80070ec:	460c      	mov	r4, r1
 80070ee:	461e      	mov	r6, r3
 80070f0:	f101 0c14 	add.w	ip, r1, #20
 80070f4:	2000      	movs	r0, #0
 80070f6:	f8dc 3000 	ldr.w	r3, [ip]
 80070fa:	b299      	uxth	r1, r3
 80070fc:	fb02 6101 	mla	r1, r2, r1, r6
 8007100:	0c1e      	lsrs	r6, r3, #16
 8007102:	0c0b      	lsrs	r3, r1, #16
 8007104:	fb02 3306 	mla	r3, r2, r6, r3
 8007108:	b289      	uxth	r1, r1
 800710a:	3001      	adds	r0, #1
 800710c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007110:	4285      	cmp	r5, r0
 8007112:	f84c 1b04 	str.w	r1, [ip], #4
 8007116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800711a:	dcec      	bgt.n	80070f6 <__multadd+0x12>
 800711c:	b30e      	cbz	r6, 8007162 <__multadd+0x7e>
 800711e:	68a3      	ldr	r3, [r4, #8]
 8007120:	42ab      	cmp	r3, r5
 8007122:	dc19      	bgt.n	8007158 <__multadd+0x74>
 8007124:	6861      	ldr	r1, [r4, #4]
 8007126:	4638      	mov	r0, r7
 8007128:	3101      	adds	r1, #1
 800712a:	f7ff ff79 	bl	8007020 <_Balloc>
 800712e:	4680      	mov	r8, r0
 8007130:	b928      	cbnz	r0, 800713e <__multadd+0x5a>
 8007132:	4602      	mov	r2, r0
 8007134:	4b0c      	ldr	r3, [pc, #48]	; (8007168 <__multadd+0x84>)
 8007136:	480d      	ldr	r0, [pc, #52]	; (800716c <__multadd+0x88>)
 8007138:	21b5      	movs	r1, #181	; 0xb5
 800713a:	f000 fe6b 	bl	8007e14 <__assert_func>
 800713e:	6922      	ldr	r2, [r4, #16]
 8007140:	3202      	adds	r2, #2
 8007142:	f104 010c 	add.w	r1, r4, #12
 8007146:	0092      	lsls	r2, r2, #2
 8007148:	300c      	adds	r0, #12
 800714a:	f7fe fb4f 	bl	80057ec <memcpy>
 800714e:	4621      	mov	r1, r4
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff ffa5 	bl	80070a0 <_Bfree>
 8007156:	4644      	mov	r4, r8
 8007158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800715c:	3501      	adds	r5, #1
 800715e:	615e      	str	r6, [r3, #20]
 8007160:	6125      	str	r5, [r4, #16]
 8007162:	4620      	mov	r0, r4
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	080083af 	.word	0x080083af
 800716c:	08008420 	.word	0x08008420

08007170 <__hi0bits>:
 8007170:	0c03      	lsrs	r3, r0, #16
 8007172:	041b      	lsls	r3, r3, #16
 8007174:	b9d3      	cbnz	r3, 80071ac <__hi0bits+0x3c>
 8007176:	0400      	lsls	r0, r0, #16
 8007178:	2310      	movs	r3, #16
 800717a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800717e:	bf04      	itt	eq
 8007180:	0200      	lsleq	r0, r0, #8
 8007182:	3308      	addeq	r3, #8
 8007184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007188:	bf04      	itt	eq
 800718a:	0100      	lsleq	r0, r0, #4
 800718c:	3304      	addeq	r3, #4
 800718e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007192:	bf04      	itt	eq
 8007194:	0080      	lsleq	r0, r0, #2
 8007196:	3302      	addeq	r3, #2
 8007198:	2800      	cmp	r0, #0
 800719a:	db05      	blt.n	80071a8 <__hi0bits+0x38>
 800719c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071a0:	f103 0301 	add.w	r3, r3, #1
 80071a4:	bf08      	it	eq
 80071a6:	2320      	moveq	r3, #32
 80071a8:	4618      	mov	r0, r3
 80071aa:	4770      	bx	lr
 80071ac:	2300      	movs	r3, #0
 80071ae:	e7e4      	b.n	800717a <__hi0bits+0xa>

080071b0 <__lo0bits>:
 80071b0:	6803      	ldr	r3, [r0, #0]
 80071b2:	f013 0207 	ands.w	r2, r3, #7
 80071b6:	4601      	mov	r1, r0
 80071b8:	d00b      	beq.n	80071d2 <__lo0bits+0x22>
 80071ba:	07da      	lsls	r2, r3, #31
 80071bc:	d423      	bmi.n	8007206 <__lo0bits+0x56>
 80071be:	0798      	lsls	r0, r3, #30
 80071c0:	bf49      	itett	mi
 80071c2:	085b      	lsrmi	r3, r3, #1
 80071c4:	089b      	lsrpl	r3, r3, #2
 80071c6:	2001      	movmi	r0, #1
 80071c8:	600b      	strmi	r3, [r1, #0]
 80071ca:	bf5c      	itt	pl
 80071cc:	600b      	strpl	r3, [r1, #0]
 80071ce:	2002      	movpl	r0, #2
 80071d0:	4770      	bx	lr
 80071d2:	b298      	uxth	r0, r3
 80071d4:	b9a8      	cbnz	r0, 8007202 <__lo0bits+0x52>
 80071d6:	0c1b      	lsrs	r3, r3, #16
 80071d8:	2010      	movs	r0, #16
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	b90a      	cbnz	r2, 80071e2 <__lo0bits+0x32>
 80071de:	3008      	adds	r0, #8
 80071e0:	0a1b      	lsrs	r3, r3, #8
 80071e2:	071a      	lsls	r2, r3, #28
 80071e4:	bf04      	itt	eq
 80071e6:	091b      	lsreq	r3, r3, #4
 80071e8:	3004      	addeq	r0, #4
 80071ea:	079a      	lsls	r2, r3, #30
 80071ec:	bf04      	itt	eq
 80071ee:	089b      	lsreq	r3, r3, #2
 80071f0:	3002      	addeq	r0, #2
 80071f2:	07da      	lsls	r2, r3, #31
 80071f4:	d403      	bmi.n	80071fe <__lo0bits+0x4e>
 80071f6:	085b      	lsrs	r3, r3, #1
 80071f8:	f100 0001 	add.w	r0, r0, #1
 80071fc:	d005      	beq.n	800720a <__lo0bits+0x5a>
 80071fe:	600b      	str	r3, [r1, #0]
 8007200:	4770      	bx	lr
 8007202:	4610      	mov	r0, r2
 8007204:	e7e9      	b.n	80071da <__lo0bits+0x2a>
 8007206:	2000      	movs	r0, #0
 8007208:	4770      	bx	lr
 800720a:	2020      	movs	r0, #32
 800720c:	4770      	bx	lr
	...

08007210 <__i2b>:
 8007210:	b510      	push	{r4, lr}
 8007212:	460c      	mov	r4, r1
 8007214:	2101      	movs	r1, #1
 8007216:	f7ff ff03 	bl	8007020 <_Balloc>
 800721a:	4602      	mov	r2, r0
 800721c:	b928      	cbnz	r0, 800722a <__i2b+0x1a>
 800721e:	4b05      	ldr	r3, [pc, #20]	; (8007234 <__i2b+0x24>)
 8007220:	4805      	ldr	r0, [pc, #20]	; (8007238 <__i2b+0x28>)
 8007222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007226:	f000 fdf5 	bl	8007e14 <__assert_func>
 800722a:	2301      	movs	r3, #1
 800722c:	6144      	str	r4, [r0, #20]
 800722e:	6103      	str	r3, [r0, #16]
 8007230:	bd10      	pop	{r4, pc}
 8007232:	bf00      	nop
 8007234:	080083af 	.word	0x080083af
 8007238:	08008420 	.word	0x08008420

0800723c <__multiply>:
 800723c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007240:	4691      	mov	r9, r2
 8007242:	690a      	ldr	r2, [r1, #16]
 8007244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007248:	429a      	cmp	r2, r3
 800724a:	bfb8      	it	lt
 800724c:	460b      	movlt	r3, r1
 800724e:	460c      	mov	r4, r1
 8007250:	bfbc      	itt	lt
 8007252:	464c      	movlt	r4, r9
 8007254:	4699      	movlt	r9, r3
 8007256:	6927      	ldr	r7, [r4, #16]
 8007258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	6861      	ldr	r1, [r4, #4]
 8007260:	eb07 060a 	add.w	r6, r7, sl
 8007264:	42b3      	cmp	r3, r6
 8007266:	b085      	sub	sp, #20
 8007268:	bfb8      	it	lt
 800726a:	3101      	addlt	r1, #1
 800726c:	f7ff fed8 	bl	8007020 <_Balloc>
 8007270:	b930      	cbnz	r0, 8007280 <__multiply+0x44>
 8007272:	4602      	mov	r2, r0
 8007274:	4b44      	ldr	r3, [pc, #272]	; (8007388 <__multiply+0x14c>)
 8007276:	4845      	ldr	r0, [pc, #276]	; (800738c <__multiply+0x150>)
 8007278:	f240 115d 	movw	r1, #349	; 0x15d
 800727c:	f000 fdca 	bl	8007e14 <__assert_func>
 8007280:	f100 0514 	add.w	r5, r0, #20
 8007284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007288:	462b      	mov	r3, r5
 800728a:	2200      	movs	r2, #0
 800728c:	4543      	cmp	r3, r8
 800728e:	d321      	bcc.n	80072d4 <__multiply+0x98>
 8007290:	f104 0314 	add.w	r3, r4, #20
 8007294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007298:	f109 0314 	add.w	r3, r9, #20
 800729c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072a0:	9202      	str	r2, [sp, #8]
 80072a2:	1b3a      	subs	r2, r7, r4
 80072a4:	3a15      	subs	r2, #21
 80072a6:	f022 0203 	bic.w	r2, r2, #3
 80072aa:	3204      	adds	r2, #4
 80072ac:	f104 0115 	add.w	r1, r4, #21
 80072b0:	428f      	cmp	r7, r1
 80072b2:	bf38      	it	cc
 80072b4:	2204      	movcc	r2, #4
 80072b6:	9201      	str	r2, [sp, #4]
 80072b8:	9a02      	ldr	r2, [sp, #8]
 80072ba:	9303      	str	r3, [sp, #12]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d80c      	bhi.n	80072da <__multiply+0x9e>
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	dd03      	ble.n	80072cc <__multiply+0x90>
 80072c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d05a      	beq.n	8007382 <__multiply+0x146>
 80072cc:	6106      	str	r6, [r0, #16]
 80072ce:	b005      	add	sp, #20
 80072d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d4:	f843 2b04 	str.w	r2, [r3], #4
 80072d8:	e7d8      	b.n	800728c <__multiply+0x50>
 80072da:	f8b3 a000 	ldrh.w	sl, [r3]
 80072de:	f1ba 0f00 	cmp.w	sl, #0
 80072e2:	d024      	beq.n	800732e <__multiply+0xf2>
 80072e4:	f104 0e14 	add.w	lr, r4, #20
 80072e8:	46a9      	mov	r9, r5
 80072ea:	f04f 0c00 	mov.w	ip, #0
 80072ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072f2:	f8d9 1000 	ldr.w	r1, [r9]
 80072f6:	fa1f fb82 	uxth.w	fp, r2
 80072fa:	b289      	uxth	r1, r1
 80072fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007304:	f8d9 2000 	ldr.w	r2, [r9]
 8007308:	4461      	add	r1, ip
 800730a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800730e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007316:	b289      	uxth	r1, r1
 8007318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800731c:	4577      	cmp	r7, lr
 800731e:	f849 1b04 	str.w	r1, [r9], #4
 8007322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007326:	d8e2      	bhi.n	80072ee <__multiply+0xb2>
 8007328:	9a01      	ldr	r2, [sp, #4]
 800732a:	f845 c002 	str.w	ip, [r5, r2]
 800732e:	9a03      	ldr	r2, [sp, #12]
 8007330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007334:	3304      	adds	r3, #4
 8007336:	f1b9 0f00 	cmp.w	r9, #0
 800733a:	d020      	beq.n	800737e <__multiply+0x142>
 800733c:	6829      	ldr	r1, [r5, #0]
 800733e:	f104 0c14 	add.w	ip, r4, #20
 8007342:	46ae      	mov	lr, r5
 8007344:	f04f 0a00 	mov.w	sl, #0
 8007348:	f8bc b000 	ldrh.w	fp, [ip]
 800734c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007350:	fb09 220b 	mla	r2, r9, fp, r2
 8007354:	4492      	add	sl, r2
 8007356:	b289      	uxth	r1, r1
 8007358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800735c:	f84e 1b04 	str.w	r1, [lr], #4
 8007360:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007364:	f8be 1000 	ldrh.w	r1, [lr]
 8007368:	0c12      	lsrs	r2, r2, #16
 800736a:	fb09 1102 	mla	r1, r9, r2, r1
 800736e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007372:	4567      	cmp	r7, ip
 8007374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007378:	d8e6      	bhi.n	8007348 <__multiply+0x10c>
 800737a:	9a01      	ldr	r2, [sp, #4]
 800737c:	50a9      	str	r1, [r5, r2]
 800737e:	3504      	adds	r5, #4
 8007380:	e79a      	b.n	80072b8 <__multiply+0x7c>
 8007382:	3e01      	subs	r6, #1
 8007384:	e79c      	b.n	80072c0 <__multiply+0x84>
 8007386:	bf00      	nop
 8007388:	080083af 	.word	0x080083af
 800738c:	08008420 	.word	0x08008420

08007390 <__pow5mult>:
 8007390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007394:	4615      	mov	r5, r2
 8007396:	f012 0203 	ands.w	r2, r2, #3
 800739a:	4606      	mov	r6, r0
 800739c:	460f      	mov	r7, r1
 800739e:	d007      	beq.n	80073b0 <__pow5mult+0x20>
 80073a0:	4c25      	ldr	r4, [pc, #148]	; (8007438 <__pow5mult+0xa8>)
 80073a2:	3a01      	subs	r2, #1
 80073a4:	2300      	movs	r3, #0
 80073a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073aa:	f7ff fe9b 	bl	80070e4 <__multadd>
 80073ae:	4607      	mov	r7, r0
 80073b0:	10ad      	asrs	r5, r5, #2
 80073b2:	d03d      	beq.n	8007430 <__pow5mult+0xa0>
 80073b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073b6:	b97c      	cbnz	r4, 80073d8 <__pow5mult+0x48>
 80073b8:	2010      	movs	r0, #16
 80073ba:	f7ff fe29 	bl	8007010 <malloc>
 80073be:	4602      	mov	r2, r0
 80073c0:	6270      	str	r0, [r6, #36]	; 0x24
 80073c2:	b928      	cbnz	r0, 80073d0 <__pow5mult+0x40>
 80073c4:	4b1d      	ldr	r3, [pc, #116]	; (800743c <__pow5mult+0xac>)
 80073c6:	481e      	ldr	r0, [pc, #120]	; (8007440 <__pow5mult+0xb0>)
 80073c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073cc:	f000 fd22 	bl	8007e14 <__assert_func>
 80073d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073d4:	6004      	str	r4, [r0, #0]
 80073d6:	60c4      	str	r4, [r0, #12]
 80073d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073e0:	b94c      	cbnz	r4, 80073f6 <__pow5mult+0x66>
 80073e2:	f240 2171 	movw	r1, #625	; 0x271
 80073e6:	4630      	mov	r0, r6
 80073e8:	f7ff ff12 	bl	8007210 <__i2b>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80073f2:	4604      	mov	r4, r0
 80073f4:	6003      	str	r3, [r0, #0]
 80073f6:	f04f 0900 	mov.w	r9, #0
 80073fa:	07eb      	lsls	r3, r5, #31
 80073fc:	d50a      	bpl.n	8007414 <__pow5mult+0x84>
 80073fe:	4639      	mov	r1, r7
 8007400:	4622      	mov	r2, r4
 8007402:	4630      	mov	r0, r6
 8007404:	f7ff ff1a 	bl	800723c <__multiply>
 8007408:	4639      	mov	r1, r7
 800740a:	4680      	mov	r8, r0
 800740c:	4630      	mov	r0, r6
 800740e:	f7ff fe47 	bl	80070a0 <_Bfree>
 8007412:	4647      	mov	r7, r8
 8007414:	106d      	asrs	r5, r5, #1
 8007416:	d00b      	beq.n	8007430 <__pow5mult+0xa0>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	b938      	cbnz	r0, 800742c <__pow5mult+0x9c>
 800741c:	4622      	mov	r2, r4
 800741e:	4621      	mov	r1, r4
 8007420:	4630      	mov	r0, r6
 8007422:	f7ff ff0b 	bl	800723c <__multiply>
 8007426:	6020      	str	r0, [r4, #0]
 8007428:	f8c0 9000 	str.w	r9, [r0]
 800742c:	4604      	mov	r4, r0
 800742e:	e7e4      	b.n	80073fa <__pow5mult+0x6a>
 8007430:	4638      	mov	r0, r7
 8007432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007436:	bf00      	nop
 8007438:	08008570 	.word	0x08008570
 800743c:	0800833d 	.word	0x0800833d
 8007440:	08008420 	.word	0x08008420

08007444 <__lshift>:
 8007444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007448:	460c      	mov	r4, r1
 800744a:	6849      	ldr	r1, [r1, #4]
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007452:	68a3      	ldr	r3, [r4, #8]
 8007454:	4607      	mov	r7, r0
 8007456:	4691      	mov	r9, r2
 8007458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800745c:	f108 0601 	add.w	r6, r8, #1
 8007460:	42b3      	cmp	r3, r6
 8007462:	db0b      	blt.n	800747c <__lshift+0x38>
 8007464:	4638      	mov	r0, r7
 8007466:	f7ff fddb 	bl	8007020 <_Balloc>
 800746a:	4605      	mov	r5, r0
 800746c:	b948      	cbnz	r0, 8007482 <__lshift+0x3e>
 800746e:	4602      	mov	r2, r0
 8007470:	4b2a      	ldr	r3, [pc, #168]	; (800751c <__lshift+0xd8>)
 8007472:	482b      	ldr	r0, [pc, #172]	; (8007520 <__lshift+0xdc>)
 8007474:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007478:	f000 fccc 	bl	8007e14 <__assert_func>
 800747c:	3101      	adds	r1, #1
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	e7ee      	b.n	8007460 <__lshift+0x1c>
 8007482:	2300      	movs	r3, #0
 8007484:	f100 0114 	add.w	r1, r0, #20
 8007488:	f100 0210 	add.w	r2, r0, #16
 800748c:	4618      	mov	r0, r3
 800748e:	4553      	cmp	r3, sl
 8007490:	db37      	blt.n	8007502 <__lshift+0xbe>
 8007492:	6920      	ldr	r0, [r4, #16]
 8007494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007498:	f104 0314 	add.w	r3, r4, #20
 800749c:	f019 091f 	ands.w	r9, r9, #31
 80074a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074a8:	d02f      	beq.n	800750a <__lshift+0xc6>
 80074aa:	f1c9 0e20 	rsb	lr, r9, #32
 80074ae:	468a      	mov	sl, r1
 80074b0:	f04f 0c00 	mov.w	ip, #0
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	fa02 f209 	lsl.w	r2, r2, r9
 80074ba:	ea42 020c 	orr.w	r2, r2, ip
 80074be:	f84a 2b04 	str.w	r2, [sl], #4
 80074c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074c6:	4298      	cmp	r0, r3
 80074c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80074cc:	d8f2      	bhi.n	80074b4 <__lshift+0x70>
 80074ce:	1b03      	subs	r3, r0, r4
 80074d0:	3b15      	subs	r3, #21
 80074d2:	f023 0303 	bic.w	r3, r3, #3
 80074d6:	3304      	adds	r3, #4
 80074d8:	f104 0215 	add.w	r2, r4, #21
 80074dc:	4290      	cmp	r0, r2
 80074de:	bf38      	it	cc
 80074e0:	2304      	movcc	r3, #4
 80074e2:	f841 c003 	str.w	ip, [r1, r3]
 80074e6:	f1bc 0f00 	cmp.w	ip, #0
 80074ea:	d001      	beq.n	80074f0 <__lshift+0xac>
 80074ec:	f108 0602 	add.w	r6, r8, #2
 80074f0:	3e01      	subs	r6, #1
 80074f2:	4638      	mov	r0, r7
 80074f4:	612e      	str	r6, [r5, #16]
 80074f6:	4621      	mov	r1, r4
 80074f8:	f7ff fdd2 	bl	80070a0 <_Bfree>
 80074fc:	4628      	mov	r0, r5
 80074fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007502:	f842 0f04 	str.w	r0, [r2, #4]!
 8007506:	3301      	adds	r3, #1
 8007508:	e7c1      	b.n	800748e <__lshift+0x4a>
 800750a:	3904      	subs	r1, #4
 800750c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007510:	f841 2f04 	str.w	r2, [r1, #4]!
 8007514:	4298      	cmp	r0, r3
 8007516:	d8f9      	bhi.n	800750c <__lshift+0xc8>
 8007518:	e7ea      	b.n	80074f0 <__lshift+0xac>
 800751a:	bf00      	nop
 800751c:	080083af 	.word	0x080083af
 8007520:	08008420 	.word	0x08008420

08007524 <__mcmp>:
 8007524:	b530      	push	{r4, r5, lr}
 8007526:	6902      	ldr	r2, [r0, #16]
 8007528:	690c      	ldr	r4, [r1, #16]
 800752a:	1b12      	subs	r2, r2, r4
 800752c:	d10e      	bne.n	800754c <__mcmp+0x28>
 800752e:	f100 0314 	add.w	r3, r0, #20
 8007532:	3114      	adds	r1, #20
 8007534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800753c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007544:	42a5      	cmp	r5, r4
 8007546:	d003      	beq.n	8007550 <__mcmp+0x2c>
 8007548:	d305      	bcc.n	8007556 <__mcmp+0x32>
 800754a:	2201      	movs	r2, #1
 800754c:	4610      	mov	r0, r2
 800754e:	bd30      	pop	{r4, r5, pc}
 8007550:	4283      	cmp	r3, r0
 8007552:	d3f3      	bcc.n	800753c <__mcmp+0x18>
 8007554:	e7fa      	b.n	800754c <__mcmp+0x28>
 8007556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800755a:	e7f7      	b.n	800754c <__mcmp+0x28>

0800755c <__mdiff>:
 800755c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007560:	460c      	mov	r4, r1
 8007562:	4606      	mov	r6, r0
 8007564:	4611      	mov	r1, r2
 8007566:	4620      	mov	r0, r4
 8007568:	4690      	mov	r8, r2
 800756a:	f7ff ffdb 	bl	8007524 <__mcmp>
 800756e:	1e05      	subs	r5, r0, #0
 8007570:	d110      	bne.n	8007594 <__mdiff+0x38>
 8007572:	4629      	mov	r1, r5
 8007574:	4630      	mov	r0, r6
 8007576:	f7ff fd53 	bl	8007020 <_Balloc>
 800757a:	b930      	cbnz	r0, 800758a <__mdiff+0x2e>
 800757c:	4b3a      	ldr	r3, [pc, #232]	; (8007668 <__mdiff+0x10c>)
 800757e:	4602      	mov	r2, r0
 8007580:	f240 2132 	movw	r1, #562	; 0x232
 8007584:	4839      	ldr	r0, [pc, #228]	; (800766c <__mdiff+0x110>)
 8007586:	f000 fc45 	bl	8007e14 <__assert_func>
 800758a:	2301      	movs	r3, #1
 800758c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	bfa4      	itt	ge
 8007596:	4643      	movge	r3, r8
 8007598:	46a0      	movge	r8, r4
 800759a:	4630      	mov	r0, r6
 800759c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075a0:	bfa6      	itte	ge
 80075a2:	461c      	movge	r4, r3
 80075a4:	2500      	movge	r5, #0
 80075a6:	2501      	movlt	r5, #1
 80075a8:	f7ff fd3a 	bl	8007020 <_Balloc>
 80075ac:	b920      	cbnz	r0, 80075b8 <__mdiff+0x5c>
 80075ae:	4b2e      	ldr	r3, [pc, #184]	; (8007668 <__mdiff+0x10c>)
 80075b0:	4602      	mov	r2, r0
 80075b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075b6:	e7e5      	b.n	8007584 <__mdiff+0x28>
 80075b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075bc:	6926      	ldr	r6, [r4, #16]
 80075be:	60c5      	str	r5, [r0, #12]
 80075c0:	f104 0914 	add.w	r9, r4, #20
 80075c4:	f108 0514 	add.w	r5, r8, #20
 80075c8:	f100 0e14 	add.w	lr, r0, #20
 80075cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075d4:	f108 0210 	add.w	r2, r8, #16
 80075d8:	46f2      	mov	sl, lr
 80075da:	2100      	movs	r1, #0
 80075dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80075e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075e4:	fa1f f883 	uxth.w	r8, r3
 80075e8:	fa11 f18b 	uxtah	r1, r1, fp
 80075ec:	0c1b      	lsrs	r3, r3, #16
 80075ee:	eba1 0808 	sub.w	r8, r1, r8
 80075f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075fa:	fa1f f888 	uxth.w	r8, r8
 80075fe:	1419      	asrs	r1, r3, #16
 8007600:	454e      	cmp	r6, r9
 8007602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007606:	f84a 3b04 	str.w	r3, [sl], #4
 800760a:	d8e7      	bhi.n	80075dc <__mdiff+0x80>
 800760c:	1b33      	subs	r3, r6, r4
 800760e:	3b15      	subs	r3, #21
 8007610:	f023 0303 	bic.w	r3, r3, #3
 8007614:	3304      	adds	r3, #4
 8007616:	3415      	adds	r4, #21
 8007618:	42a6      	cmp	r6, r4
 800761a:	bf38      	it	cc
 800761c:	2304      	movcc	r3, #4
 800761e:	441d      	add	r5, r3
 8007620:	4473      	add	r3, lr
 8007622:	469e      	mov	lr, r3
 8007624:	462e      	mov	r6, r5
 8007626:	4566      	cmp	r6, ip
 8007628:	d30e      	bcc.n	8007648 <__mdiff+0xec>
 800762a:	f10c 0203 	add.w	r2, ip, #3
 800762e:	1b52      	subs	r2, r2, r5
 8007630:	f022 0203 	bic.w	r2, r2, #3
 8007634:	3d03      	subs	r5, #3
 8007636:	45ac      	cmp	ip, r5
 8007638:	bf38      	it	cc
 800763a:	2200      	movcc	r2, #0
 800763c:	441a      	add	r2, r3
 800763e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007642:	b17b      	cbz	r3, 8007664 <__mdiff+0x108>
 8007644:	6107      	str	r7, [r0, #16]
 8007646:	e7a3      	b.n	8007590 <__mdiff+0x34>
 8007648:	f856 8b04 	ldr.w	r8, [r6], #4
 800764c:	fa11 f288 	uxtah	r2, r1, r8
 8007650:	1414      	asrs	r4, r2, #16
 8007652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007656:	b292      	uxth	r2, r2
 8007658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800765c:	f84e 2b04 	str.w	r2, [lr], #4
 8007660:	1421      	asrs	r1, r4, #16
 8007662:	e7e0      	b.n	8007626 <__mdiff+0xca>
 8007664:	3f01      	subs	r7, #1
 8007666:	e7ea      	b.n	800763e <__mdiff+0xe2>
 8007668:	080083af 	.word	0x080083af
 800766c:	08008420 	.word	0x08008420

08007670 <__d2b>:
 8007670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007674:	4689      	mov	r9, r1
 8007676:	2101      	movs	r1, #1
 8007678:	ec57 6b10 	vmov	r6, r7, d0
 800767c:	4690      	mov	r8, r2
 800767e:	f7ff fccf 	bl	8007020 <_Balloc>
 8007682:	4604      	mov	r4, r0
 8007684:	b930      	cbnz	r0, 8007694 <__d2b+0x24>
 8007686:	4602      	mov	r2, r0
 8007688:	4b25      	ldr	r3, [pc, #148]	; (8007720 <__d2b+0xb0>)
 800768a:	4826      	ldr	r0, [pc, #152]	; (8007724 <__d2b+0xb4>)
 800768c:	f240 310a 	movw	r1, #778	; 0x30a
 8007690:	f000 fbc0 	bl	8007e14 <__assert_func>
 8007694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800769c:	bb35      	cbnz	r5, 80076ec <__d2b+0x7c>
 800769e:	2e00      	cmp	r6, #0
 80076a0:	9301      	str	r3, [sp, #4]
 80076a2:	d028      	beq.n	80076f6 <__d2b+0x86>
 80076a4:	4668      	mov	r0, sp
 80076a6:	9600      	str	r6, [sp, #0]
 80076a8:	f7ff fd82 	bl	80071b0 <__lo0bits>
 80076ac:	9900      	ldr	r1, [sp, #0]
 80076ae:	b300      	cbz	r0, 80076f2 <__d2b+0x82>
 80076b0:	9a01      	ldr	r2, [sp, #4]
 80076b2:	f1c0 0320 	rsb	r3, r0, #32
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	430b      	orrs	r3, r1
 80076bc:	40c2      	lsrs	r2, r0
 80076be:	6163      	str	r3, [r4, #20]
 80076c0:	9201      	str	r2, [sp, #4]
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	61a3      	str	r3, [r4, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf14      	ite	ne
 80076ca:	2202      	movne	r2, #2
 80076cc:	2201      	moveq	r2, #1
 80076ce:	6122      	str	r2, [r4, #16]
 80076d0:	b1d5      	cbz	r5, 8007708 <__d2b+0x98>
 80076d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076d6:	4405      	add	r5, r0
 80076d8:	f8c9 5000 	str.w	r5, [r9]
 80076dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076e0:	f8c8 0000 	str.w	r0, [r8]
 80076e4:	4620      	mov	r0, r4
 80076e6:	b003      	add	sp, #12
 80076e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076f0:	e7d5      	b.n	800769e <__d2b+0x2e>
 80076f2:	6161      	str	r1, [r4, #20]
 80076f4:	e7e5      	b.n	80076c2 <__d2b+0x52>
 80076f6:	a801      	add	r0, sp, #4
 80076f8:	f7ff fd5a 	bl	80071b0 <__lo0bits>
 80076fc:	9b01      	ldr	r3, [sp, #4]
 80076fe:	6163      	str	r3, [r4, #20]
 8007700:	2201      	movs	r2, #1
 8007702:	6122      	str	r2, [r4, #16]
 8007704:	3020      	adds	r0, #32
 8007706:	e7e3      	b.n	80076d0 <__d2b+0x60>
 8007708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800770c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007710:	f8c9 0000 	str.w	r0, [r9]
 8007714:	6918      	ldr	r0, [r3, #16]
 8007716:	f7ff fd2b 	bl	8007170 <__hi0bits>
 800771a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800771e:	e7df      	b.n	80076e0 <__d2b+0x70>
 8007720:	080083af 	.word	0x080083af
 8007724:	08008420 	.word	0x08008420

08007728 <_calloc_r>:
 8007728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800772a:	fba1 2402 	umull	r2, r4, r1, r2
 800772e:	b94c      	cbnz	r4, 8007744 <_calloc_r+0x1c>
 8007730:	4611      	mov	r1, r2
 8007732:	9201      	str	r2, [sp, #4]
 8007734:	f000 f87a 	bl	800782c <_malloc_r>
 8007738:	9a01      	ldr	r2, [sp, #4]
 800773a:	4605      	mov	r5, r0
 800773c:	b930      	cbnz	r0, 800774c <_calloc_r+0x24>
 800773e:	4628      	mov	r0, r5
 8007740:	b003      	add	sp, #12
 8007742:	bd30      	pop	{r4, r5, pc}
 8007744:	220c      	movs	r2, #12
 8007746:	6002      	str	r2, [r0, #0]
 8007748:	2500      	movs	r5, #0
 800774a:	e7f8      	b.n	800773e <_calloc_r+0x16>
 800774c:	4621      	mov	r1, r4
 800774e:	f7fe f85b 	bl	8005808 <memset>
 8007752:	e7f4      	b.n	800773e <_calloc_r+0x16>

08007754 <_free_r>:
 8007754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007756:	2900      	cmp	r1, #0
 8007758:	d044      	beq.n	80077e4 <_free_r+0x90>
 800775a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775e:	9001      	str	r0, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f1a1 0404 	sub.w	r4, r1, #4
 8007766:	bfb8      	it	lt
 8007768:	18e4      	addlt	r4, r4, r3
 800776a:	f000 fcdf 	bl	800812c <__malloc_lock>
 800776e:	4a1e      	ldr	r2, [pc, #120]	; (80077e8 <_free_r+0x94>)
 8007770:	9801      	ldr	r0, [sp, #4]
 8007772:	6813      	ldr	r3, [r2, #0]
 8007774:	b933      	cbnz	r3, 8007784 <_free_r+0x30>
 8007776:	6063      	str	r3, [r4, #4]
 8007778:	6014      	str	r4, [r2, #0]
 800777a:	b003      	add	sp, #12
 800777c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007780:	f000 bcda 	b.w	8008138 <__malloc_unlock>
 8007784:	42a3      	cmp	r3, r4
 8007786:	d908      	bls.n	800779a <_free_r+0x46>
 8007788:	6825      	ldr	r5, [r4, #0]
 800778a:	1961      	adds	r1, r4, r5
 800778c:	428b      	cmp	r3, r1
 800778e:	bf01      	itttt	eq
 8007790:	6819      	ldreq	r1, [r3, #0]
 8007792:	685b      	ldreq	r3, [r3, #4]
 8007794:	1949      	addeq	r1, r1, r5
 8007796:	6021      	streq	r1, [r4, #0]
 8007798:	e7ed      	b.n	8007776 <_free_r+0x22>
 800779a:	461a      	mov	r2, r3
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	b10b      	cbz	r3, 80077a4 <_free_r+0x50>
 80077a0:	42a3      	cmp	r3, r4
 80077a2:	d9fa      	bls.n	800779a <_free_r+0x46>
 80077a4:	6811      	ldr	r1, [r2, #0]
 80077a6:	1855      	adds	r5, r2, r1
 80077a8:	42a5      	cmp	r5, r4
 80077aa:	d10b      	bne.n	80077c4 <_free_r+0x70>
 80077ac:	6824      	ldr	r4, [r4, #0]
 80077ae:	4421      	add	r1, r4
 80077b0:	1854      	adds	r4, r2, r1
 80077b2:	42a3      	cmp	r3, r4
 80077b4:	6011      	str	r1, [r2, #0]
 80077b6:	d1e0      	bne.n	800777a <_free_r+0x26>
 80077b8:	681c      	ldr	r4, [r3, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	6053      	str	r3, [r2, #4]
 80077be:	4421      	add	r1, r4
 80077c0:	6011      	str	r1, [r2, #0]
 80077c2:	e7da      	b.n	800777a <_free_r+0x26>
 80077c4:	d902      	bls.n	80077cc <_free_r+0x78>
 80077c6:	230c      	movs	r3, #12
 80077c8:	6003      	str	r3, [r0, #0]
 80077ca:	e7d6      	b.n	800777a <_free_r+0x26>
 80077cc:	6825      	ldr	r5, [r4, #0]
 80077ce:	1961      	adds	r1, r4, r5
 80077d0:	428b      	cmp	r3, r1
 80077d2:	bf04      	itt	eq
 80077d4:	6819      	ldreq	r1, [r3, #0]
 80077d6:	685b      	ldreq	r3, [r3, #4]
 80077d8:	6063      	str	r3, [r4, #4]
 80077da:	bf04      	itt	eq
 80077dc:	1949      	addeq	r1, r1, r5
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	6054      	str	r4, [r2, #4]
 80077e2:	e7ca      	b.n	800777a <_free_r+0x26>
 80077e4:	b003      	add	sp, #12
 80077e6:	bd30      	pop	{r4, r5, pc}
 80077e8:	20000374 	.word	0x20000374

080077ec <sbrk_aligned>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	4e0e      	ldr	r6, [pc, #56]	; (8007828 <sbrk_aligned+0x3c>)
 80077f0:	460c      	mov	r4, r1
 80077f2:	6831      	ldr	r1, [r6, #0]
 80077f4:	4605      	mov	r5, r0
 80077f6:	b911      	cbnz	r1, 80077fe <sbrk_aligned+0x12>
 80077f8:	f000 f9e6 	bl	8007bc8 <_sbrk_r>
 80077fc:	6030      	str	r0, [r6, #0]
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f000 f9e1 	bl	8007bc8 <_sbrk_r>
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	d00a      	beq.n	8007820 <sbrk_aligned+0x34>
 800780a:	1cc4      	adds	r4, r0, #3
 800780c:	f024 0403 	bic.w	r4, r4, #3
 8007810:	42a0      	cmp	r0, r4
 8007812:	d007      	beq.n	8007824 <sbrk_aligned+0x38>
 8007814:	1a21      	subs	r1, r4, r0
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f9d6 	bl	8007bc8 <_sbrk_r>
 800781c:	3001      	adds	r0, #1
 800781e:	d101      	bne.n	8007824 <sbrk_aligned+0x38>
 8007820:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007824:	4620      	mov	r0, r4
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	20000378 	.word	0x20000378

0800782c <_malloc_r>:
 800782c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007830:	1ccd      	adds	r5, r1, #3
 8007832:	f025 0503 	bic.w	r5, r5, #3
 8007836:	3508      	adds	r5, #8
 8007838:	2d0c      	cmp	r5, #12
 800783a:	bf38      	it	cc
 800783c:	250c      	movcc	r5, #12
 800783e:	2d00      	cmp	r5, #0
 8007840:	4607      	mov	r7, r0
 8007842:	db01      	blt.n	8007848 <_malloc_r+0x1c>
 8007844:	42a9      	cmp	r1, r5
 8007846:	d905      	bls.n	8007854 <_malloc_r+0x28>
 8007848:	230c      	movs	r3, #12
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	2600      	movs	r6, #0
 800784e:	4630      	mov	r0, r6
 8007850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007854:	4e2e      	ldr	r6, [pc, #184]	; (8007910 <_malloc_r+0xe4>)
 8007856:	f000 fc69 	bl	800812c <__malloc_lock>
 800785a:	6833      	ldr	r3, [r6, #0]
 800785c:	461c      	mov	r4, r3
 800785e:	bb34      	cbnz	r4, 80078ae <_malloc_r+0x82>
 8007860:	4629      	mov	r1, r5
 8007862:	4638      	mov	r0, r7
 8007864:	f7ff ffc2 	bl	80077ec <sbrk_aligned>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	4604      	mov	r4, r0
 800786c:	d14d      	bne.n	800790a <_malloc_r+0xde>
 800786e:	6834      	ldr	r4, [r6, #0]
 8007870:	4626      	mov	r6, r4
 8007872:	2e00      	cmp	r6, #0
 8007874:	d140      	bne.n	80078f8 <_malloc_r+0xcc>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	4631      	mov	r1, r6
 800787a:	4638      	mov	r0, r7
 800787c:	eb04 0803 	add.w	r8, r4, r3
 8007880:	f000 f9a2 	bl	8007bc8 <_sbrk_r>
 8007884:	4580      	cmp	r8, r0
 8007886:	d13a      	bne.n	80078fe <_malloc_r+0xd2>
 8007888:	6821      	ldr	r1, [r4, #0]
 800788a:	3503      	adds	r5, #3
 800788c:	1a6d      	subs	r5, r5, r1
 800788e:	f025 0503 	bic.w	r5, r5, #3
 8007892:	3508      	adds	r5, #8
 8007894:	2d0c      	cmp	r5, #12
 8007896:	bf38      	it	cc
 8007898:	250c      	movcc	r5, #12
 800789a:	4629      	mov	r1, r5
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff ffa5 	bl	80077ec <sbrk_aligned>
 80078a2:	3001      	adds	r0, #1
 80078a4:	d02b      	beq.n	80078fe <_malloc_r+0xd2>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	442b      	add	r3, r5
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	e00e      	b.n	80078cc <_malloc_r+0xa0>
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	1b52      	subs	r2, r2, r5
 80078b2:	d41e      	bmi.n	80078f2 <_malloc_r+0xc6>
 80078b4:	2a0b      	cmp	r2, #11
 80078b6:	d916      	bls.n	80078e6 <_malloc_r+0xba>
 80078b8:	1961      	adds	r1, r4, r5
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	6025      	str	r5, [r4, #0]
 80078be:	bf18      	it	ne
 80078c0:	6059      	strne	r1, [r3, #4]
 80078c2:	6863      	ldr	r3, [r4, #4]
 80078c4:	bf08      	it	eq
 80078c6:	6031      	streq	r1, [r6, #0]
 80078c8:	5162      	str	r2, [r4, r5]
 80078ca:	604b      	str	r3, [r1, #4]
 80078cc:	4638      	mov	r0, r7
 80078ce:	f104 060b 	add.w	r6, r4, #11
 80078d2:	f000 fc31 	bl	8008138 <__malloc_unlock>
 80078d6:	f026 0607 	bic.w	r6, r6, #7
 80078da:	1d23      	adds	r3, r4, #4
 80078dc:	1af2      	subs	r2, r6, r3
 80078de:	d0b6      	beq.n	800784e <_malloc_r+0x22>
 80078e0:	1b9b      	subs	r3, r3, r6
 80078e2:	50a3      	str	r3, [r4, r2]
 80078e4:	e7b3      	b.n	800784e <_malloc_r+0x22>
 80078e6:	6862      	ldr	r2, [r4, #4]
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	bf0c      	ite	eq
 80078ec:	6032      	streq	r2, [r6, #0]
 80078ee:	605a      	strne	r2, [r3, #4]
 80078f0:	e7ec      	b.n	80078cc <_malloc_r+0xa0>
 80078f2:	4623      	mov	r3, r4
 80078f4:	6864      	ldr	r4, [r4, #4]
 80078f6:	e7b2      	b.n	800785e <_malloc_r+0x32>
 80078f8:	4634      	mov	r4, r6
 80078fa:	6876      	ldr	r6, [r6, #4]
 80078fc:	e7b9      	b.n	8007872 <_malloc_r+0x46>
 80078fe:	230c      	movs	r3, #12
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4638      	mov	r0, r7
 8007904:	f000 fc18 	bl	8008138 <__malloc_unlock>
 8007908:	e7a1      	b.n	800784e <_malloc_r+0x22>
 800790a:	6025      	str	r5, [r4, #0]
 800790c:	e7de      	b.n	80078cc <_malloc_r+0xa0>
 800790e:	bf00      	nop
 8007910:	20000374 	.word	0x20000374

08007914 <__sfputc_r>:
 8007914:	6893      	ldr	r3, [r2, #8]
 8007916:	3b01      	subs	r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	b410      	push	{r4}
 800791c:	6093      	str	r3, [r2, #8]
 800791e:	da08      	bge.n	8007932 <__sfputc_r+0x1e>
 8007920:	6994      	ldr	r4, [r2, #24]
 8007922:	42a3      	cmp	r3, r4
 8007924:	db01      	blt.n	800792a <__sfputc_r+0x16>
 8007926:	290a      	cmp	r1, #10
 8007928:	d103      	bne.n	8007932 <__sfputc_r+0x1e>
 800792a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800792e:	f000 b99f 	b.w	8007c70 <__swbuf_r>
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	1c58      	adds	r0, r3, #1
 8007936:	6010      	str	r0, [r2, #0]
 8007938:	7019      	strb	r1, [r3, #0]
 800793a:	4608      	mov	r0, r1
 800793c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007940:	4770      	bx	lr

08007942 <__sfputs_r>:
 8007942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007944:	4606      	mov	r6, r0
 8007946:	460f      	mov	r7, r1
 8007948:	4614      	mov	r4, r2
 800794a:	18d5      	adds	r5, r2, r3
 800794c:	42ac      	cmp	r4, r5
 800794e:	d101      	bne.n	8007954 <__sfputs_r+0x12>
 8007950:	2000      	movs	r0, #0
 8007952:	e007      	b.n	8007964 <__sfputs_r+0x22>
 8007954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007958:	463a      	mov	r2, r7
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ffda 	bl	8007914 <__sfputc_r>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d1f3      	bne.n	800794c <__sfputs_r+0xa>
 8007964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007968 <_vfiprintf_r>:
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	460d      	mov	r5, r1
 800796e:	b09d      	sub	sp, #116	; 0x74
 8007970:	4614      	mov	r4, r2
 8007972:	4698      	mov	r8, r3
 8007974:	4606      	mov	r6, r0
 8007976:	b118      	cbz	r0, 8007980 <_vfiprintf_r+0x18>
 8007978:	6983      	ldr	r3, [r0, #24]
 800797a:	b90b      	cbnz	r3, 8007980 <_vfiprintf_r+0x18>
 800797c:	f7ff faa2 	bl	8006ec4 <__sinit>
 8007980:	4b89      	ldr	r3, [pc, #548]	; (8007ba8 <_vfiprintf_r+0x240>)
 8007982:	429d      	cmp	r5, r3
 8007984:	d11b      	bne.n	80079be <_vfiprintf_r+0x56>
 8007986:	6875      	ldr	r5, [r6, #4]
 8007988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800798a:	07d9      	lsls	r1, r3, #31
 800798c:	d405      	bmi.n	800799a <_vfiprintf_r+0x32>
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	059a      	lsls	r2, r3, #22
 8007992:	d402      	bmi.n	800799a <_vfiprintf_r+0x32>
 8007994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007996:	f7ff fb38 	bl	800700a <__retarget_lock_acquire_recursive>
 800799a:	89ab      	ldrh	r3, [r5, #12]
 800799c:	071b      	lsls	r3, r3, #28
 800799e:	d501      	bpl.n	80079a4 <_vfiprintf_r+0x3c>
 80079a0:	692b      	ldr	r3, [r5, #16]
 80079a2:	b9eb      	cbnz	r3, 80079e0 <_vfiprintf_r+0x78>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4630      	mov	r0, r6
 80079a8:	f000 f9c6 	bl	8007d38 <__swsetup_r>
 80079ac:	b1c0      	cbz	r0, 80079e0 <_vfiprintf_r+0x78>
 80079ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079b0:	07dc      	lsls	r4, r3, #31
 80079b2:	d50e      	bpl.n	80079d2 <_vfiprintf_r+0x6a>
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079b8:	b01d      	add	sp, #116	; 0x74
 80079ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079be:	4b7b      	ldr	r3, [pc, #492]	; (8007bac <_vfiprintf_r+0x244>)
 80079c0:	429d      	cmp	r5, r3
 80079c2:	d101      	bne.n	80079c8 <_vfiprintf_r+0x60>
 80079c4:	68b5      	ldr	r5, [r6, #8]
 80079c6:	e7df      	b.n	8007988 <_vfiprintf_r+0x20>
 80079c8:	4b79      	ldr	r3, [pc, #484]	; (8007bb0 <_vfiprintf_r+0x248>)
 80079ca:	429d      	cmp	r5, r3
 80079cc:	bf08      	it	eq
 80079ce:	68f5      	ldreq	r5, [r6, #12]
 80079d0:	e7da      	b.n	8007988 <_vfiprintf_r+0x20>
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	0598      	lsls	r0, r3, #22
 80079d6:	d4ed      	bmi.n	80079b4 <_vfiprintf_r+0x4c>
 80079d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079da:	f7ff fb17 	bl	800700c <__retarget_lock_release_recursive>
 80079de:	e7e9      	b.n	80079b4 <_vfiprintf_r+0x4c>
 80079e0:	2300      	movs	r3, #0
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	2320      	movs	r3, #32
 80079e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ee:	2330      	movs	r3, #48	; 0x30
 80079f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bb4 <_vfiprintf_r+0x24c>
 80079f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079f8:	f04f 0901 	mov.w	r9, #1
 80079fc:	4623      	mov	r3, r4
 80079fe:	469a      	mov	sl, r3
 8007a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a04:	b10a      	cbz	r2, 8007a0a <_vfiprintf_r+0xa2>
 8007a06:	2a25      	cmp	r2, #37	; 0x25
 8007a08:	d1f9      	bne.n	80079fe <_vfiprintf_r+0x96>
 8007a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0e:	d00b      	beq.n	8007a28 <_vfiprintf_r+0xc0>
 8007a10:	465b      	mov	r3, fp
 8007a12:	4622      	mov	r2, r4
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff ff93 	bl	8007942 <__sfputs_r>
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	f000 80aa 	beq.w	8007b76 <_vfiprintf_r+0x20e>
 8007a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a24:	445a      	add	r2, fp
 8007a26:	9209      	str	r2, [sp, #36]	; 0x24
 8007a28:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a2 	beq.w	8007b76 <_vfiprintf_r+0x20e>
 8007a32:	2300      	movs	r3, #0
 8007a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3c:	f10a 0a01 	add.w	sl, sl, #1
 8007a40:	9304      	str	r3, [sp, #16]
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a48:	931a      	str	r3, [sp, #104]	; 0x68
 8007a4a:	4654      	mov	r4, sl
 8007a4c:	2205      	movs	r2, #5
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4858      	ldr	r0, [pc, #352]	; (8007bb4 <_vfiprintf_r+0x24c>)
 8007a54:	f7f8 fbdc 	bl	8000210 <memchr>
 8007a58:	9a04      	ldr	r2, [sp, #16]
 8007a5a:	b9d8      	cbnz	r0, 8007a94 <_vfiprintf_r+0x12c>
 8007a5c:	06d1      	lsls	r1, r2, #27
 8007a5e:	bf44      	itt	mi
 8007a60:	2320      	movmi	r3, #32
 8007a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a66:	0713      	lsls	r3, r2, #28
 8007a68:	bf44      	itt	mi
 8007a6a:	232b      	movmi	r3, #43	; 0x2b
 8007a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a70:	f89a 3000 	ldrb.w	r3, [sl]
 8007a74:	2b2a      	cmp	r3, #42	; 0x2a
 8007a76:	d015      	beq.n	8007aa4 <_vfiprintf_r+0x13c>
 8007a78:	9a07      	ldr	r2, [sp, #28]
 8007a7a:	4654      	mov	r4, sl
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	f04f 0c0a 	mov.w	ip, #10
 8007a82:	4621      	mov	r1, r4
 8007a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a88:	3b30      	subs	r3, #48	; 0x30
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	d94e      	bls.n	8007b2c <_vfiprintf_r+0x1c4>
 8007a8e:	b1b0      	cbz	r0, 8007abe <_vfiprintf_r+0x156>
 8007a90:	9207      	str	r2, [sp, #28]
 8007a92:	e014      	b.n	8007abe <_vfiprintf_r+0x156>
 8007a94:	eba0 0308 	sub.w	r3, r0, r8
 8007a98:	fa09 f303 	lsl.w	r3, r9, r3
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	46a2      	mov	sl, r4
 8007aa2:	e7d2      	b.n	8007a4a <_vfiprintf_r+0xe2>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	1d19      	adds	r1, r3, #4
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	9103      	str	r1, [sp, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	bfbb      	ittet	lt
 8007ab0:	425b      	neglt	r3, r3
 8007ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab6:	9307      	strge	r3, [sp, #28]
 8007ab8:	9307      	strlt	r3, [sp, #28]
 8007aba:	bfb8      	it	lt
 8007abc:	9204      	strlt	r2, [sp, #16]
 8007abe:	7823      	ldrb	r3, [r4, #0]
 8007ac0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ac2:	d10c      	bne.n	8007ade <_vfiprintf_r+0x176>
 8007ac4:	7863      	ldrb	r3, [r4, #1]
 8007ac6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac8:	d135      	bne.n	8007b36 <_vfiprintf_r+0x1ce>
 8007aca:	9b03      	ldr	r3, [sp, #12]
 8007acc:	1d1a      	adds	r2, r3, #4
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	9203      	str	r2, [sp, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bfb8      	it	lt
 8007ad6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ada:	3402      	adds	r4, #2
 8007adc:	9305      	str	r3, [sp, #20]
 8007ade:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007bc4 <_vfiprintf_r+0x25c>
 8007ae2:	7821      	ldrb	r1, [r4, #0]
 8007ae4:	2203      	movs	r2, #3
 8007ae6:	4650      	mov	r0, sl
 8007ae8:	f7f8 fb92 	bl	8000210 <memchr>
 8007aec:	b140      	cbz	r0, 8007b00 <_vfiprintf_r+0x198>
 8007aee:	2340      	movs	r3, #64	; 0x40
 8007af0:	eba0 000a 	sub.w	r0, r0, sl
 8007af4:	fa03 f000 	lsl.w	r0, r3, r0
 8007af8:	9b04      	ldr	r3, [sp, #16]
 8007afa:	4303      	orrs	r3, r0
 8007afc:	3401      	adds	r4, #1
 8007afe:	9304      	str	r3, [sp, #16]
 8007b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b04:	482c      	ldr	r0, [pc, #176]	; (8007bb8 <_vfiprintf_r+0x250>)
 8007b06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b0a:	2206      	movs	r2, #6
 8007b0c:	f7f8 fb80 	bl	8000210 <memchr>
 8007b10:	2800      	cmp	r0, #0
 8007b12:	d03f      	beq.n	8007b94 <_vfiprintf_r+0x22c>
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <_vfiprintf_r+0x254>)
 8007b16:	bb1b      	cbnz	r3, 8007b60 <_vfiprintf_r+0x1f8>
 8007b18:	9b03      	ldr	r3, [sp, #12]
 8007b1a:	3307      	adds	r3, #7
 8007b1c:	f023 0307 	bic.w	r3, r3, #7
 8007b20:	3308      	adds	r3, #8
 8007b22:	9303      	str	r3, [sp, #12]
 8007b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b26:	443b      	add	r3, r7
 8007b28:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2a:	e767      	b.n	80079fc <_vfiprintf_r+0x94>
 8007b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b30:	460c      	mov	r4, r1
 8007b32:	2001      	movs	r0, #1
 8007b34:	e7a5      	b.n	8007a82 <_vfiprintf_r+0x11a>
 8007b36:	2300      	movs	r3, #0
 8007b38:	3401      	adds	r4, #1
 8007b3a:	9305      	str	r3, [sp, #20]
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f04f 0c0a 	mov.w	ip, #10
 8007b42:	4620      	mov	r0, r4
 8007b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b48:	3a30      	subs	r2, #48	; 0x30
 8007b4a:	2a09      	cmp	r2, #9
 8007b4c:	d903      	bls.n	8007b56 <_vfiprintf_r+0x1ee>
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0c5      	beq.n	8007ade <_vfiprintf_r+0x176>
 8007b52:	9105      	str	r1, [sp, #20]
 8007b54:	e7c3      	b.n	8007ade <_vfiprintf_r+0x176>
 8007b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e7f0      	b.n	8007b42 <_vfiprintf_r+0x1da>
 8007b60:	ab03      	add	r3, sp, #12
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	462a      	mov	r2, r5
 8007b66:	4b16      	ldr	r3, [pc, #88]	; (8007bc0 <_vfiprintf_r+0x258>)
 8007b68:	a904      	add	r1, sp, #16
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f7fd fef4 	bl	8005958 <_printf_float>
 8007b70:	4607      	mov	r7, r0
 8007b72:	1c78      	adds	r0, r7, #1
 8007b74:	d1d6      	bne.n	8007b24 <_vfiprintf_r+0x1bc>
 8007b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b78:	07d9      	lsls	r1, r3, #31
 8007b7a:	d405      	bmi.n	8007b88 <_vfiprintf_r+0x220>
 8007b7c:	89ab      	ldrh	r3, [r5, #12]
 8007b7e:	059a      	lsls	r2, r3, #22
 8007b80:	d402      	bmi.n	8007b88 <_vfiprintf_r+0x220>
 8007b82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b84:	f7ff fa42 	bl	800700c <__retarget_lock_release_recursive>
 8007b88:	89ab      	ldrh	r3, [r5, #12]
 8007b8a:	065b      	lsls	r3, r3, #25
 8007b8c:	f53f af12 	bmi.w	80079b4 <_vfiprintf_r+0x4c>
 8007b90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b92:	e711      	b.n	80079b8 <_vfiprintf_r+0x50>
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <_vfiprintf_r+0x258>)
 8007b9c:	a904      	add	r1, sp, #16
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7fe f97e 	bl	8005ea0 <_printf_i>
 8007ba4:	e7e4      	b.n	8007b70 <_vfiprintf_r+0x208>
 8007ba6:	bf00      	nop
 8007ba8:	080083e0 	.word	0x080083e0
 8007bac:	08008400 	.word	0x08008400
 8007bb0:	080083c0 	.word	0x080083c0
 8007bb4:	0800857c 	.word	0x0800857c
 8007bb8:	08008586 	.word	0x08008586
 8007bbc:	08005959 	.word	0x08005959
 8007bc0:	08007943 	.word	0x08007943
 8007bc4:	08008582 	.word	0x08008582

08007bc8 <_sbrk_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d06      	ldr	r5, [pc, #24]	; (8007be4 <_sbrk_r+0x1c>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7fd fd6e 	bl	80056b4 <_sbrk>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_sbrk_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_sbrk_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	2000037c 	.word	0x2000037c

08007be8 <__sread>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	460c      	mov	r4, r1
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	f000 faa8 	bl	8008144 <_read_r>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	bfab      	itete	ge
 8007bf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8007bfc:	181b      	addge	r3, r3, r0
 8007bfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c02:	bfac      	ite	ge
 8007c04:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c06:	81a3      	strhlt	r3, [r4, #12]
 8007c08:	bd10      	pop	{r4, pc}

08007c0a <__swrite>:
 8007c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0e:	461f      	mov	r7, r3
 8007c10:	898b      	ldrh	r3, [r1, #12]
 8007c12:	05db      	lsls	r3, r3, #23
 8007c14:	4605      	mov	r5, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	4616      	mov	r6, r2
 8007c1a:	d505      	bpl.n	8007c28 <__swrite+0x1e>
 8007c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c20:	2302      	movs	r3, #2
 8007c22:	2200      	movs	r2, #0
 8007c24:	f000 f9f8 	bl	8008018 <_lseek_r>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	4628      	mov	r0, r5
 8007c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3e:	f000 b869 	b.w	8007d14 <_write_r>

08007c42 <__sseek>:
 8007c42:	b510      	push	{r4, lr}
 8007c44:	460c      	mov	r4, r1
 8007c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c4a:	f000 f9e5 	bl	8008018 <_lseek_r>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	89a3      	ldrh	r3, [r4, #12]
 8007c52:	bf15      	itete	ne
 8007c54:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c5e:	81a3      	strheq	r3, [r4, #12]
 8007c60:	bf18      	it	ne
 8007c62:	81a3      	strhne	r3, [r4, #12]
 8007c64:	bd10      	pop	{r4, pc}

08007c66 <__sclose>:
 8007c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c6a:	f000 b8f1 	b.w	8007e50 <_close_r>
	...

08007c70 <__swbuf_r>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	460e      	mov	r6, r1
 8007c74:	4614      	mov	r4, r2
 8007c76:	4605      	mov	r5, r0
 8007c78:	b118      	cbz	r0, 8007c82 <__swbuf_r+0x12>
 8007c7a:	6983      	ldr	r3, [r0, #24]
 8007c7c:	b90b      	cbnz	r3, 8007c82 <__swbuf_r+0x12>
 8007c7e:	f7ff f921 	bl	8006ec4 <__sinit>
 8007c82:	4b21      	ldr	r3, [pc, #132]	; (8007d08 <__swbuf_r+0x98>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	d12b      	bne.n	8007ce0 <__swbuf_r+0x70>
 8007c88:	686c      	ldr	r4, [r5, #4]
 8007c8a:	69a3      	ldr	r3, [r4, #24]
 8007c8c:	60a3      	str	r3, [r4, #8]
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	071a      	lsls	r2, r3, #28
 8007c92:	d52f      	bpl.n	8007cf4 <__swbuf_r+0x84>
 8007c94:	6923      	ldr	r3, [r4, #16]
 8007c96:	b36b      	cbz	r3, 8007cf4 <__swbuf_r+0x84>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	6820      	ldr	r0, [r4, #0]
 8007c9c:	1ac0      	subs	r0, r0, r3
 8007c9e:	6963      	ldr	r3, [r4, #20]
 8007ca0:	b2f6      	uxtb	r6, r6
 8007ca2:	4283      	cmp	r3, r0
 8007ca4:	4637      	mov	r7, r6
 8007ca6:	dc04      	bgt.n	8007cb2 <__swbuf_r+0x42>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 f966 	bl	8007f7c <_fflush_r>
 8007cb0:	bb30      	cbnz	r0, 8007d00 <__swbuf_r+0x90>
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	60a3      	str	r3, [r4, #8]
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	1c5a      	adds	r2, r3, #1
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	701e      	strb	r6, [r3, #0]
 8007cc0:	6963      	ldr	r3, [r4, #20]
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	4283      	cmp	r3, r0
 8007cc6:	d004      	beq.n	8007cd2 <__swbuf_r+0x62>
 8007cc8:	89a3      	ldrh	r3, [r4, #12]
 8007cca:	07db      	lsls	r3, r3, #31
 8007ccc:	d506      	bpl.n	8007cdc <__swbuf_r+0x6c>
 8007cce:	2e0a      	cmp	r6, #10
 8007cd0:	d104      	bne.n	8007cdc <__swbuf_r+0x6c>
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	f000 f951 	bl	8007f7c <_fflush_r>
 8007cda:	b988      	cbnz	r0, 8007d00 <__swbuf_r+0x90>
 8007cdc:	4638      	mov	r0, r7
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	4b0a      	ldr	r3, [pc, #40]	; (8007d0c <__swbuf_r+0x9c>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	d101      	bne.n	8007cea <__swbuf_r+0x7a>
 8007ce6:	68ac      	ldr	r4, [r5, #8]
 8007ce8:	e7cf      	b.n	8007c8a <__swbuf_r+0x1a>
 8007cea:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <__swbuf_r+0xa0>)
 8007cec:	429c      	cmp	r4, r3
 8007cee:	bf08      	it	eq
 8007cf0:	68ec      	ldreq	r4, [r5, #12]
 8007cf2:	e7ca      	b.n	8007c8a <__swbuf_r+0x1a>
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	4628      	mov	r0, r5
 8007cf8:	f000 f81e 	bl	8007d38 <__swsetup_r>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	d0cb      	beq.n	8007c98 <__swbuf_r+0x28>
 8007d00:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d04:	e7ea      	b.n	8007cdc <__swbuf_r+0x6c>
 8007d06:	bf00      	nop
 8007d08:	080083e0 	.word	0x080083e0
 8007d0c:	08008400 	.word	0x08008400
 8007d10:	080083c0 	.word	0x080083c0

08007d14 <_write_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d07      	ldr	r5, [pc, #28]	; (8007d34 <_write_r+0x20>)
 8007d18:	4604      	mov	r4, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	2200      	movs	r2, #0
 8007d20:	602a      	str	r2, [r5, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f7fd fc75 	bl	8005612 <_write>
 8007d28:	1c43      	adds	r3, r0, #1
 8007d2a:	d102      	bne.n	8007d32 <_write_r+0x1e>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	b103      	cbz	r3, 8007d32 <_write_r+0x1e>
 8007d30:	6023      	str	r3, [r4, #0]
 8007d32:	bd38      	pop	{r3, r4, r5, pc}
 8007d34:	2000037c 	.word	0x2000037c

08007d38 <__swsetup_r>:
 8007d38:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <__swsetup_r+0xcc>)
 8007d3a:	b570      	push	{r4, r5, r6, lr}
 8007d3c:	681d      	ldr	r5, [r3, #0]
 8007d3e:	4606      	mov	r6, r0
 8007d40:	460c      	mov	r4, r1
 8007d42:	b125      	cbz	r5, 8007d4e <__swsetup_r+0x16>
 8007d44:	69ab      	ldr	r3, [r5, #24]
 8007d46:	b913      	cbnz	r3, 8007d4e <__swsetup_r+0x16>
 8007d48:	4628      	mov	r0, r5
 8007d4a:	f7ff f8bb 	bl	8006ec4 <__sinit>
 8007d4e:	4b2e      	ldr	r3, [pc, #184]	; (8007e08 <__swsetup_r+0xd0>)
 8007d50:	429c      	cmp	r4, r3
 8007d52:	d10f      	bne.n	8007d74 <__swsetup_r+0x3c>
 8007d54:	686c      	ldr	r4, [r5, #4]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d5c:	0719      	lsls	r1, r3, #28
 8007d5e:	d42c      	bmi.n	8007dba <__swsetup_r+0x82>
 8007d60:	06dd      	lsls	r5, r3, #27
 8007d62:	d411      	bmi.n	8007d88 <__swsetup_r+0x50>
 8007d64:	2309      	movs	r3, #9
 8007d66:	6033      	str	r3, [r6, #0]
 8007d68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d6c:	81a3      	strh	r3, [r4, #12]
 8007d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d72:	e03e      	b.n	8007df2 <__swsetup_r+0xba>
 8007d74:	4b25      	ldr	r3, [pc, #148]	; (8007e0c <__swsetup_r+0xd4>)
 8007d76:	429c      	cmp	r4, r3
 8007d78:	d101      	bne.n	8007d7e <__swsetup_r+0x46>
 8007d7a:	68ac      	ldr	r4, [r5, #8]
 8007d7c:	e7eb      	b.n	8007d56 <__swsetup_r+0x1e>
 8007d7e:	4b24      	ldr	r3, [pc, #144]	; (8007e10 <__swsetup_r+0xd8>)
 8007d80:	429c      	cmp	r4, r3
 8007d82:	bf08      	it	eq
 8007d84:	68ec      	ldreq	r4, [r5, #12]
 8007d86:	e7e6      	b.n	8007d56 <__swsetup_r+0x1e>
 8007d88:	0758      	lsls	r0, r3, #29
 8007d8a:	d512      	bpl.n	8007db2 <__swsetup_r+0x7a>
 8007d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d8e:	b141      	cbz	r1, 8007da2 <__swsetup_r+0x6a>
 8007d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d94:	4299      	cmp	r1, r3
 8007d96:	d002      	beq.n	8007d9e <__swsetup_r+0x66>
 8007d98:	4630      	mov	r0, r6
 8007d9a:	f7ff fcdb 	bl	8007754 <_free_r>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6363      	str	r3, [r4, #52]	; 0x34
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	2300      	movs	r3, #0
 8007dac:	6063      	str	r3, [r4, #4]
 8007dae:	6923      	ldr	r3, [r4, #16]
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	f043 0308 	orr.w	r3, r3, #8
 8007db8:	81a3      	strh	r3, [r4, #12]
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	b94b      	cbnz	r3, 8007dd2 <__swsetup_r+0x9a>
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc8:	d003      	beq.n	8007dd2 <__swsetup_r+0x9a>
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f000 f95b 	bl	8008088 <__smakebuf_r>
 8007dd2:	89a0      	ldrh	r0, [r4, #12]
 8007dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd8:	f010 0301 	ands.w	r3, r0, #1
 8007ddc:	d00a      	beq.n	8007df4 <__swsetup_r+0xbc>
 8007dde:	2300      	movs	r3, #0
 8007de0:	60a3      	str	r3, [r4, #8]
 8007de2:	6963      	ldr	r3, [r4, #20]
 8007de4:	425b      	negs	r3, r3
 8007de6:	61a3      	str	r3, [r4, #24]
 8007de8:	6923      	ldr	r3, [r4, #16]
 8007dea:	b943      	cbnz	r3, 8007dfe <__swsetup_r+0xc6>
 8007dec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007df0:	d1ba      	bne.n	8007d68 <__swsetup_r+0x30>
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	0781      	lsls	r1, r0, #30
 8007df6:	bf58      	it	pl
 8007df8:	6963      	ldrpl	r3, [r4, #20]
 8007dfa:	60a3      	str	r3, [r4, #8]
 8007dfc:	e7f4      	b.n	8007de8 <__swsetup_r+0xb0>
 8007dfe:	2000      	movs	r0, #0
 8007e00:	e7f7      	b.n	8007df2 <__swsetup_r+0xba>
 8007e02:	bf00      	nop
 8007e04:	20000040 	.word	0x20000040
 8007e08:	080083e0 	.word	0x080083e0
 8007e0c:	08008400 	.word	0x08008400
 8007e10:	080083c0 	.word	0x080083c0

08007e14 <__assert_func>:
 8007e14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e16:	4614      	mov	r4, r2
 8007e18:	461a      	mov	r2, r3
 8007e1a:	4b09      	ldr	r3, [pc, #36]	; (8007e40 <__assert_func+0x2c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4605      	mov	r5, r0
 8007e20:	68d8      	ldr	r0, [r3, #12]
 8007e22:	b14c      	cbz	r4, 8007e38 <__assert_func+0x24>
 8007e24:	4b07      	ldr	r3, [pc, #28]	; (8007e44 <__assert_func+0x30>)
 8007e26:	9100      	str	r1, [sp, #0]
 8007e28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e2c:	4906      	ldr	r1, [pc, #24]	; (8007e48 <__assert_func+0x34>)
 8007e2e:	462b      	mov	r3, r5
 8007e30:	f000 f8e0 	bl	8007ff4 <fiprintf>
 8007e34:	f000 f9a5 	bl	8008182 <abort>
 8007e38:	4b04      	ldr	r3, [pc, #16]	; (8007e4c <__assert_func+0x38>)
 8007e3a:	461c      	mov	r4, r3
 8007e3c:	e7f3      	b.n	8007e26 <__assert_func+0x12>
 8007e3e:	bf00      	nop
 8007e40:	20000040 	.word	0x20000040
 8007e44:	0800858d 	.word	0x0800858d
 8007e48:	0800859a 	.word	0x0800859a
 8007e4c:	080085c8 	.word	0x080085c8

08007e50 <_close_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d06      	ldr	r5, [pc, #24]	; (8007e6c <_close_r+0x1c>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	f7fd fbf5 	bl	800564a <_close>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_close_r+0x1a>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_close_r+0x1a>
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	2000037c 	.word	0x2000037c

08007e70 <__sflush_r>:
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e76:	4605      	mov	r5, r0
 8007e78:	0710      	lsls	r0, r2, #28
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	d458      	bmi.n	8007f30 <__sflush_r+0xc0>
 8007e7e:	684b      	ldr	r3, [r1, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc05      	bgt.n	8007e90 <__sflush_r+0x20>
 8007e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dc02      	bgt.n	8007e90 <__sflush_r+0x20>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e92:	2e00      	cmp	r6, #0
 8007e94:	d0f9      	beq.n	8007e8a <__sflush_r+0x1a>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e9c:	682f      	ldr	r7, [r5, #0]
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	d032      	beq.n	8007f08 <__sflush_r+0x98>
 8007ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	075a      	lsls	r2, r3, #29
 8007ea8:	d505      	bpl.n	8007eb6 <__sflush_r+0x46>
 8007eaa:	6863      	ldr	r3, [r4, #4]
 8007eac:	1ac0      	subs	r0, r0, r3
 8007eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eb0:	b10b      	cbz	r3, 8007eb6 <__sflush_r+0x46>
 8007eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb4:	1ac0      	subs	r0, r0, r3
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b0      	blx	r6
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	d106      	bne.n	8007ed6 <__sflush_r+0x66>
 8007ec8:	6829      	ldr	r1, [r5, #0]
 8007eca:	291d      	cmp	r1, #29
 8007ecc:	d82c      	bhi.n	8007f28 <__sflush_r+0xb8>
 8007ece:	4a2a      	ldr	r2, [pc, #168]	; (8007f78 <__sflush_r+0x108>)
 8007ed0:	40ca      	lsrs	r2, r1
 8007ed2:	07d6      	lsls	r6, r2, #31
 8007ed4:	d528      	bpl.n	8007f28 <__sflush_r+0xb8>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	04d9      	lsls	r1, r3, #19
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	d504      	bpl.n	8007eec <__sflush_r+0x7c>
 8007ee2:	1c42      	adds	r2, r0, #1
 8007ee4:	d101      	bne.n	8007eea <__sflush_r+0x7a>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b903      	cbnz	r3, 8007eec <__sflush_r+0x7c>
 8007eea:	6560      	str	r0, [r4, #84]	; 0x54
 8007eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eee:	602f      	str	r7, [r5, #0]
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d0ca      	beq.n	8007e8a <__sflush_r+0x1a>
 8007ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	d002      	beq.n	8007f02 <__sflush_r+0x92>
 8007efc:	4628      	mov	r0, r5
 8007efe:	f7ff fc29 	bl	8007754 <_free_r>
 8007f02:	2000      	movs	r0, #0
 8007f04:	6360      	str	r0, [r4, #52]	; 0x34
 8007f06:	e7c1      	b.n	8007e8c <__sflush_r+0x1c>
 8007f08:	6a21      	ldr	r1, [r4, #32]
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b0      	blx	r6
 8007f10:	1c41      	adds	r1, r0, #1
 8007f12:	d1c7      	bne.n	8007ea4 <__sflush_r+0x34>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0c4      	beq.n	8007ea4 <__sflush_r+0x34>
 8007f1a:	2b1d      	cmp	r3, #29
 8007f1c:	d001      	beq.n	8007f22 <__sflush_r+0xb2>
 8007f1e:	2b16      	cmp	r3, #22
 8007f20:	d101      	bne.n	8007f26 <__sflush_r+0xb6>
 8007f22:	602f      	str	r7, [r5, #0]
 8007f24:	e7b1      	b.n	8007e8a <__sflush_r+0x1a>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	e7ad      	b.n	8007e8c <__sflush_r+0x1c>
 8007f30:	690f      	ldr	r7, [r1, #16]
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d0a9      	beq.n	8007e8a <__sflush_r+0x1a>
 8007f36:	0793      	lsls	r3, r2, #30
 8007f38:	680e      	ldr	r6, [r1, #0]
 8007f3a:	bf08      	it	eq
 8007f3c:	694b      	ldreq	r3, [r1, #20]
 8007f3e:	600f      	str	r7, [r1, #0]
 8007f40:	bf18      	it	ne
 8007f42:	2300      	movne	r3, #0
 8007f44:	eba6 0807 	sub.w	r8, r6, r7
 8007f48:	608b      	str	r3, [r1, #8]
 8007f4a:	f1b8 0f00 	cmp.w	r8, #0
 8007f4e:	dd9c      	ble.n	8007e8a <__sflush_r+0x1a>
 8007f50:	6a21      	ldr	r1, [r4, #32]
 8007f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f54:	4643      	mov	r3, r8
 8007f56:	463a      	mov	r2, r7
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b0      	blx	r6
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	dc06      	bgt.n	8007f6e <__sflush_r+0xfe>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f6c:	e78e      	b.n	8007e8c <__sflush_r+0x1c>
 8007f6e:	4407      	add	r7, r0
 8007f70:	eba8 0800 	sub.w	r8, r8, r0
 8007f74:	e7e9      	b.n	8007f4a <__sflush_r+0xda>
 8007f76:	bf00      	nop
 8007f78:	20400001 	.word	0x20400001

08007f7c <_fflush_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	690b      	ldr	r3, [r1, #16]
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	b913      	cbnz	r3, 8007f8c <_fflush_r+0x10>
 8007f86:	2500      	movs	r5, #0
 8007f88:	4628      	mov	r0, r5
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	b118      	cbz	r0, 8007f96 <_fflush_r+0x1a>
 8007f8e:	6983      	ldr	r3, [r0, #24]
 8007f90:	b90b      	cbnz	r3, 8007f96 <_fflush_r+0x1a>
 8007f92:	f7fe ff97 	bl	8006ec4 <__sinit>
 8007f96:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <_fflush_r+0x6c>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	d11b      	bne.n	8007fd4 <_fflush_r+0x58>
 8007f9c:	686c      	ldr	r4, [r5, #4]
 8007f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0ef      	beq.n	8007f86 <_fflush_r+0xa>
 8007fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa8:	07d0      	lsls	r0, r2, #31
 8007faa:	d404      	bmi.n	8007fb6 <_fflush_r+0x3a>
 8007fac:	0599      	lsls	r1, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_fflush_r+0x3a>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb2:	f7ff f82a 	bl	800700a <__retarget_lock_acquire_recursive>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f7ff ff59 	bl	8007e70 <__sflush_r>
 8007fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc0:	07da      	lsls	r2, r3, #31
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	d4e0      	bmi.n	8007f88 <_fflush_r+0xc>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	059b      	lsls	r3, r3, #22
 8007fca:	d4dd      	bmi.n	8007f88 <_fflush_r+0xc>
 8007fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fce:	f7ff f81d 	bl	800700c <__retarget_lock_release_recursive>
 8007fd2:	e7d9      	b.n	8007f88 <_fflush_r+0xc>
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <_fflush_r+0x70>)
 8007fd6:	429c      	cmp	r4, r3
 8007fd8:	d101      	bne.n	8007fde <_fflush_r+0x62>
 8007fda:	68ac      	ldr	r4, [r5, #8]
 8007fdc:	e7df      	b.n	8007f9e <_fflush_r+0x22>
 8007fde:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <_fflush_r+0x74>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	bf08      	it	eq
 8007fe4:	68ec      	ldreq	r4, [r5, #12]
 8007fe6:	e7da      	b.n	8007f9e <_fflush_r+0x22>
 8007fe8:	080083e0 	.word	0x080083e0
 8007fec:	08008400 	.word	0x08008400
 8007ff0:	080083c0 	.word	0x080083c0

08007ff4 <fiprintf>:
 8007ff4:	b40e      	push	{r1, r2, r3}
 8007ff6:	b503      	push	{r0, r1, lr}
 8007ff8:	4601      	mov	r1, r0
 8007ffa:	ab03      	add	r3, sp, #12
 8007ffc:	4805      	ldr	r0, [pc, #20]	; (8008014 <fiprintf+0x20>)
 8007ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	f7ff fcaf 	bl	8007968 <_vfiprintf_r>
 800800a:	b002      	add	sp, #8
 800800c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008010:	b003      	add	sp, #12
 8008012:	4770      	bx	lr
 8008014:	20000040 	.word	0x20000040

08008018 <_lseek_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	; (8008038 <_lseek_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7fd fb36 	bl	8005698 <_lseek>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_lseek_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_lseek_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	2000037c 	.word	0x2000037c

0800803c <__swhatbuf_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	460e      	mov	r6, r1
 8008040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008044:	2900      	cmp	r1, #0
 8008046:	b096      	sub	sp, #88	; 0x58
 8008048:	4614      	mov	r4, r2
 800804a:	461d      	mov	r5, r3
 800804c:	da08      	bge.n	8008060 <__swhatbuf_r+0x24>
 800804e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	061a      	lsls	r2, r3, #24
 8008058:	d410      	bmi.n	800807c <__swhatbuf_r+0x40>
 800805a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805e:	e00e      	b.n	800807e <__swhatbuf_r+0x42>
 8008060:	466a      	mov	r2, sp
 8008062:	f000 f895 	bl	8008190 <_fstat_r>
 8008066:	2800      	cmp	r0, #0
 8008068:	dbf1      	blt.n	800804e <__swhatbuf_r+0x12>
 800806a:	9a01      	ldr	r2, [sp, #4]
 800806c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008070:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008074:	425a      	negs	r2, r3
 8008076:	415a      	adcs	r2, r3
 8008078:	602a      	str	r2, [r5, #0]
 800807a:	e7ee      	b.n	800805a <__swhatbuf_r+0x1e>
 800807c:	2340      	movs	r3, #64	; 0x40
 800807e:	2000      	movs	r0, #0
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	b016      	add	sp, #88	; 0x58
 8008084:	bd70      	pop	{r4, r5, r6, pc}
	...

08008088 <__smakebuf_r>:
 8008088:	898b      	ldrh	r3, [r1, #12]
 800808a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800808c:	079d      	lsls	r5, r3, #30
 800808e:	4606      	mov	r6, r0
 8008090:	460c      	mov	r4, r1
 8008092:	d507      	bpl.n	80080a4 <__smakebuf_r+0x1c>
 8008094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008098:	6023      	str	r3, [r4, #0]
 800809a:	6123      	str	r3, [r4, #16]
 800809c:	2301      	movs	r3, #1
 800809e:	6163      	str	r3, [r4, #20]
 80080a0:	b002      	add	sp, #8
 80080a2:	bd70      	pop	{r4, r5, r6, pc}
 80080a4:	ab01      	add	r3, sp, #4
 80080a6:	466a      	mov	r2, sp
 80080a8:	f7ff ffc8 	bl	800803c <__swhatbuf_r>
 80080ac:	9900      	ldr	r1, [sp, #0]
 80080ae:	4605      	mov	r5, r0
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7ff fbbb 	bl	800782c <_malloc_r>
 80080b6:	b948      	cbnz	r0, 80080cc <__smakebuf_r+0x44>
 80080b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080bc:	059a      	lsls	r2, r3, #22
 80080be:	d4ef      	bmi.n	80080a0 <__smakebuf_r+0x18>
 80080c0:	f023 0303 	bic.w	r3, r3, #3
 80080c4:	f043 0302 	orr.w	r3, r3, #2
 80080c8:	81a3      	strh	r3, [r4, #12]
 80080ca:	e7e3      	b.n	8008094 <__smakebuf_r+0xc>
 80080cc:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <__smakebuf_r+0x7c>)
 80080ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80080d0:	89a3      	ldrh	r3, [r4, #12]
 80080d2:	6020      	str	r0, [r4, #0]
 80080d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d8:	81a3      	strh	r3, [r4, #12]
 80080da:	9b00      	ldr	r3, [sp, #0]
 80080dc:	6163      	str	r3, [r4, #20]
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	6120      	str	r0, [r4, #16]
 80080e2:	b15b      	cbz	r3, 80080fc <__smakebuf_r+0x74>
 80080e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e8:	4630      	mov	r0, r6
 80080ea:	f000 f863 	bl	80081b4 <_isatty_r>
 80080ee:	b128      	cbz	r0, 80080fc <__smakebuf_r+0x74>
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	f043 0301 	orr.w	r3, r3, #1
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	89a0      	ldrh	r0, [r4, #12]
 80080fe:	4305      	orrs	r5, r0
 8008100:	81a5      	strh	r5, [r4, #12]
 8008102:	e7cd      	b.n	80080a0 <__smakebuf_r+0x18>
 8008104:	08006e5d 	.word	0x08006e5d

08008108 <__ascii_mbtowc>:
 8008108:	b082      	sub	sp, #8
 800810a:	b901      	cbnz	r1, 800810e <__ascii_mbtowc+0x6>
 800810c:	a901      	add	r1, sp, #4
 800810e:	b142      	cbz	r2, 8008122 <__ascii_mbtowc+0x1a>
 8008110:	b14b      	cbz	r3, 8008126 <__ascii_mbtowc+0x1e>
 8008112:	7813      	ldrb	r3, [r2, #0]
 8008114:	600b      	str	r3, [r1, #0]
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	1e10      	subs	r0, r2, #0
 800811a:	bf18      	it	ne
 800811c:	2001      	movne	r0, #1
 800811e:	b002      	add	sp, #8
 8008120:	4770      	bx	lr
 8008122:	4610      	mov	r0, r2
 8008124:	e7fb      	b.n	800811e <__ascii_mbtowc+0x16>
 8008126:	f06f 0001 	mvn.w	r0, #1
 800812a:	e7f8      	b.n	800811e <__ascii_mbtowc+0x16>

0800812c <__malloc_lock>:
 800812c:	4801      	ldr	r0, [pc, #4]	; (8008134 <__malloc_lock+0x8>)
 800812e:	f7fe bf6c 	b.w	800700a <__retarget_lock_acquire_recursive>
 8008132:	bf00      	nop
 8008134:	20000370 	.word	0x20000370

08008138 <__malloc_unlock>:
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <__malloc_unlock+0x8>)
 800813a:	f7fe bf67 	b.w	800700c <__retarget_lock_release_recursive>
 800813e:	bf00      	nop
 8008140:	20000370 	.word	0x20000370

08008144 <_read_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	; (8008164 <_read_r+0x20>)
 8008148:	4604      	mov	r4, r0
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	2200      	movs	r2, #0
 8008150:	602a      	str	r2, [r5, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f7fd fa40 	bl	80055d8 <_read>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_read_r+0x1e>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_read_r+0x1e>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	2000037c 	.word	0x2000037c

08008168 <__ascii_wctomb>:
 8008168:	b149      	cbz	r1, 800817e <__ascii_wctomb+0x16>
 800816a:	2aff      	cmp	r2, #255	; 0xff
 800816c:	bf85      	ittet	hi
 800816e:	238a      	movhi	r3, #138	; 0x8a
 8008170:	6003      	strhi	r3, [r0, #0]
 8008172:	700a      	strbls	r2, [r1, #0]
 8008174:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008178:	bf98      	it	ls
 800817a:	2001      	movls	r0, #1
 800817c:	4770      	bx	lr
 800817e:	4608      	mov	r0, r1
 8008180:	4770      	bx	lr

08008182 <abort>:
 8008182:	b508      	push	{r3, lr}
 8008184:	2006      	movs	r0, #6
 8008186:	f000 f84d 	bl	8008224 <raise>
 800818a:	2001      	movs	r0, #1
 800818c:	f7fd fa1a 	bl	80055c4 <_exit>

08008190 <_fstat_r>:
 8008190:	b538      	push	{r3, r4, r5, lr}
 8008192:	4d07      	ldr	r5, [pc, #28]	; (80081b0 <_fstat_r+0x20>)
 8008194:	2300      	movs	r3, #0
 8008196:	4604      	mov	r4, r0
 8008198:	4608      	mov	r0, r1
 800819a:	4611      	mov	r1, r2
 800819c:	602b      	str	r3, [r5, #0]
 800819e:	f7fd fa60 	bl	8005662 <_fstat>
 80081a2:	1c43      	adds	r3, r0, #1
 80081a4:	d102      	bne.n	80081ac <_fstat_r+0x1c>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	b103      	cbz	r3, 80081ac <_fstat_r+0x1c>
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	bd38      	pop	{r3, r4, r5, pc}
 80081ae:	bf00      	nop
 80081b0:	2000037c 	.word	0x2000037c

080081b4 <_isatty_r>:
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4d06      	ldr	r5, [pc, #24]	; (80081d0 <_isatty_r+0x1c>)
 80081b8:	2300      	movs	r3, #0
 80081ba:	4604      	mov	r4, r0
 80081bc:	4608      	mov	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7fd fa5f 	bl	8005682 <_isatty>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_isatty_r+0x1a>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_isatty_r+0x1a>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	2000037c 	.word	0x2000037c

080081d4 <_raise_r>:
 80081d4:	291f      	cmp	r1, #31
 80081d6:	b538      	push	{r3, r4, r5, lr}
 80081d8:	4604      	mov	r4, r0
 80081da:	460d      	mov	r5, r1
 80081dc:	d904      	bls.n	80081e8 <_raise_r+0x14>
 80081de:	2316      	movs	r3, #22
 80081e0:	6003      	str	r3, [r0, #0]
 80081e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081e6:	bd38      	pop	{r3, r4, r5, pc}
 80081e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80081ea:	b112      	cbz	r2, 80081f2 <_raise_r+0x1e>
 80081ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081f0:	b94b      	cbnz	r3, 8008206 <_raise_r+0x32>
 80081f2:	4620      	mov	r0, r4
 80081f4:	f000 f830 	bl	8008258 <_getpid_r>
 80081f8:	462a      	mov	r2, r5
 80081fa:	4601      	mov	r1, r0
 80081fc:	4620      	mov	r0, r4
 80081fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008202:	f000 b817 	b.w	8008234 <_kill_r>
 8008206:	2b01      	cmp	r3, #1
 8008208:	d00a      	beq.n	8008220 <_raise_r+0x4c>
 800820a:	1c59      	adds	r1, r3, #1
 800820c:	d103      	bne.n	8008216 <_raise_r+0x42>
 800820e:	2316      	movs	r3, #22
 8008210:	6003      	str	r3, [r0, #0]
 8008212:	2001      	movs	r0, #1
 8008214:	e7e7      	b.n	80081e6 <_raise_r+0x12>
 8008216:	2400      	movs	r4, #0
 8008218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800821c:	4628      	mov	r0, r5
 800821e:	4798      	blx	r3
 8008220:	2000      	movs	r0, #0
 8008222:	e7e0      	b.n	80081e6 <_raise_r+0x12>

08008224 <raise>:
 8008224:	4b02      	ldr	r3, [pc, #8]	; (8008230 <raise+0xc>)
 8008226:	4601      	mov	r1, r0
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	f7ff bfd3 	b.w	80081d4 <_raise_r>
 800822e:	bf00      	nop
 8008230:	20000040 	.word	0x20000040

08008234 <_kill_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4d07      	ldr	r5, [pc, #28]	; (8008254 <_kill_r+0x20>)
 8008238:	2300      	movs	r3, #0
 800823a:	4604      	mov	r4, r0
 800823c:	4608      	mov	r0, r1
 800823e:	4611      	mov	r1, r2
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	f7fd f9af 	bl	80055a4 <_kill>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	d102      	bne.n	8008250 <_kill_r+0x1c>
 800824a:	682b      	ldr	r3, [r5, #0]
 800824c:	b103      	cbz	r3, 8008250 <_kill_r+0x1c>
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	bd38      	pop	{r3, r4, r5, pc}
 8008252:	bf00      	nop
 8008254:	2000037c 	.word	0x2000037c

08008258 <_getpid_r>:
 8008258:	f7fd b99c 	b.w	8005594 <_getpid>

0800825c <_init>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr

08008268 <_fini>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr
