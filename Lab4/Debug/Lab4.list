
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f0c  08004f0c  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f14  08004f14  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08004f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000040  08004f5c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08004f5c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b0c  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d8  00000000  00000000  00032b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a449  00000000  00000000  00036c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001293a  00000000  00000000  000610d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106134  00000000  00000000  00073a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  00179b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000040 	.word	0x20000040
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004e84 	.word	0x08004e84

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000044 	.word	0x20000044
 80001f8:	08004e84 	.word	0x08004e84

080001fc <strlen>:
 80001fc:	4603      	mov	r3, r0
 80001fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000202:	2a00      	cmp	r2, #0
 8000204:	d1fb      	bne.n	80001fe <strlen+0x2>
 8000206:	1a18      	subs	r0, r3, r0
 8000208:	3801      	subs	r0, #1
 800020a:	4770      	bx	lr

0800020c <__aeabi_uldivmod>:
 800020c:	b953      	cbnz	r3, 8000224 <__aeabi_uldivmod+0x18>
 800020e:	b94a      	cbnz	r2, 8000224 <__aeabi_uldivmod+0x18>
 8000210:	2900      	cmp	r1, #0
 8000212:	bf08      	it	eq
 8000214:	2800      	cmpeq	r0, #0
 8000216:	bf1c      	itt	ne
 8000218:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800021c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000220:	f000 b974 	b.w	800050c <__aeabi_idiv0>
 8000224:	f1ad 0c08 	sub.w	ip, sp, #8
 8000228:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800022c:	f000 f806 	bl	800023c <__udivmoddi4>
 8000230:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr

0800023c <__udivmoddi4>:
 800023c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000240:	9d08      	ldr	r5, [sp, #32]
 8000242:	4604      	mov	r4, r0
 8000244:	468e      	mov	lr, r1
 8000246:	2b00      	cmp	r3, #0
 8000248:	d14d      	bne.n	80002e6 <__udivmoddi4+0xaa>
 800024a:	428a      	cmp	r2, r1
 800024c:	4694      	mov	ip, r2
 800024e:	d969      	bls.n	8000324 <__udivmoddi4+0xe8>
 8000250:	fab2 f282 	clz	r2, r2
 8000254:	b152      	cbz	r2, 800026c <__udivmoddi4+0x30>
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	f1c2 0120 	rsb	r1, r2, #32
 800025e:	fa20 f101 	lsr.w	r1, r0, r1
 8000262:	fa0c fc02 	lsl.w	ip, ip, r2
 8000266:	ea41 0e03 	orr.w	lr, r1, r3
 800026a:	4094      	lsls	r4, r2
 800026c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000270:	0c21      	lsrs	r1, r4, #16
 8000272:	fbbe f6f8 	udiv	r6, lr, r8
 8000276:	fa1f f78c 	uxth.w	r7, ip
 800027a:	fb08 e316 	mls	r3, r8, r6, lr
 800027e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000282:	fb06 f107 	mul.w	r1, r6, r7
 8000286:	4299      	cmp	r1, r3
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x64>
 800028a:	eb1c 0303 	adds.w	r3, ip, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 811f 	bcs.w	80004d4 <__udivmoddi4+0x298>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 811c 	bls.w	80004d4 <__udivmoddi4+0x298>
 800029c:	3e02      	subs	r6, #2
 800029e:	4463      	add	r3, ip
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 f707 	mul.w	r7, r0, r7
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x92>
 80002b8:	eb1c 0404 	adds.w	r4, ip, r4
 80002bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c0:	f080 810a 	bcs.w	80004d8 <__udivmoddi4+0x29c>
 80002c4:	42a7      	cmp	r7, r4
 80002c6:	f240 8107 	bls.w	80004d8 <__udivmoddi4+0x29c>
 80002ca:	4464      	add	r4, ip
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d2:	1be4      	subs	r4, r4, r7
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa4>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xc2>
 80002ea:	2d00      	cmp	r5, #0
 80002ec:	f000 80ef 	beq.w	80004ce <__udivmoddi4+0x292>
 80002f0:	2600      	movs	r6, #0
 80002f2:	e9c5 0100 	strd	r0, r1, [r5]
 80002f6:	4630      	mov	r0, r6
 80002f8:	4631      	mov	r1, r6
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f683 	clz	r6, r3
 8000302:	2e00      	cmp	r6, #0
 8000304:	d14a      	bne.n	800039c <__udivmoddi4+0x160>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd4>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80f9 	bhi.w	8000502 <__udivmoddi4+0x2c6>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	469e      	mov	lr, r3
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa4>
 800031e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa4>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xec>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 8092 	bne.w	8000456 <__udivmoddi4+0x21a>
 8000332:	eba1 010c 	sub.w	r1, r1, ip
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2601      	movs	r6, #1
 8000340:	0c20      	lsrs	r0, r4, #16
 8000342:	fbb1 f3f7 	udiv	r3, r1, r7
 8000346:	fb07 1113 	mls	r1, r7, r3, r1
 800034a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034e:	fb0e f003 	mul.w	r0, lr, r3
 8000352:	4288      	cmp	r0, r1
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x12c>
 8000356:	eb1c 0101 	adds.w	r1, ip, r1
 800035a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x12a>
 8000360:	4288      	cmp	r0, r1
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2c0>
 8000366:	4643      	mov	r3, r8
 8000368:	1a09      	subs	r1, r1, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000370:	fb07 1110 	mls	r1, r7, r0, r1
 8000374:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x156>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x154>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2ca>
 8000390:	4608      	mov	r0, r1
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039a:	e79c      	b.n	80002d6 <__udivmoddi4+0x9a>
 800039c:	f1c6 0720 	rsb	r7, r6, #32
 80003a0:	40b3      	lsls	r3, r6
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa20 f407 	lsr.w	r4, r0, r7
 80003ae:	fa01 f306 	lsl.w	r3, r1, r6
 80003b2:	431c      	orrs	r4, r3
 80003b4:	40f9      	lsrs	r1, r7
 80003b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ba:	fa00 f306 	lsl.w	r3, r0, r6
 80003be:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c2:	0c20      	lsrs	r0, r4, #16
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	fb09 1118 	mls	r1, r9, r8, r1
 80003cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d0:	fb08 f00e 	mul.w	r0, r8, lr
 80003d4:	4288      	cmp	r0, r1
 80003d6:	fa02 f206 	lsl.w	r2, r2, r6
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b8>
 80003dc:	eb1c 0101 	adds.w	r1, ip, r1
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2bc>
 80003e8:	4288      	cmp	r0, r1
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2bc>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4461      	add	r1, ip
 80003f4:	1a09      	subs	r1, r1, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000400:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000404:	fb00 fe0e 	mul.w	lr, r0, lr
 8000408:	458e      	cmp	lr, r1
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1e2>
 800040c:	eb1c 0101 	adds.w	r1, ip, r1
 8000410:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2b4>
 8000416:	458e      	cmp	lr, r1
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2b4>
 800041a:	3802      	subs	r0, #2
 800041c:	4461      	add	r1, ip
 800041e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000422:	fba0 9402 	umull	r9, r4, r0, r2
 8000426:	eba1 010e 	sub.w	r1, r1, lr
 800042a:	42a1      	cmp	r1, r4
 800042c:	46c8      	mov	r8, r9
 800042e:	46a6      	mov	lr, r4
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x2a4>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x2a0>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x212>
 8000436:	ebb3 0208 	subs.w	r2, r3, r8
 800043a:	eb61 010e 	sbc.w	r1, r1, lr
 800043e:	fa01 f707 	lsl.w	r7, r1, r7
 8000442:	fa22 f306 	lsr.w	r3, r2, r6
 8000446:	40f1      	lsrs	r1, r6
 8000448:	431f      	orrs	r7, r3
 800044a:	e9c5 7100 	strd	r7, r1, [r5]
 800044e:	2600      	movs	r6, #0
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	f1c2 0320 	rsb	r3, r2, #32
 800045a:	40d8      	lsrs	r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa21 f303 	lsr.w	r3, r1, r3
 8000464:	4091      	lsls	r1, r2
 8000466:	4301      	orrs	r1, r0
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb3 f0f7 	udiv	r0, r3, r7
 8000474:	fb07 3610 	mls	r6, r7, r0, r3
 8000478:	0c0b      	lsrs	r3, r1, #16
 800047a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047e:	fb00 f60e 	mul.w	r6, r0, lr
 8000482:	429e      	cmp	r6, r3
 8000484:	fa04 f402 	lsl.w	r4, r4, r2
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x260>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b8>
 8000494:	429e      	cmp	r6, r3
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b8>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1b9b      	subs	r3, r3, r6
 800049e:	b289      	uxth	r1, r1
 80004a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a4:	fb07 3316 	mls	r3, r7, r6, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb06 f30e 	mul.w	r3, r6, lr
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x28a>
 80004b4:	eb1c 0101 	adds.w	r1, ip, r1
 80004b8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2b0>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2b0>
 80004c2:	3e02      	subs	r6, #2
 80004c4:	4461      	add	r1, ip
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0x104>
 80004ce:	462e      	mov	r6, r5
 80004d0:	4628      	mov	r0, r5
 80004d2:	e705      	b.n	80002e0 <__udivmoddi4+0xa4>
 80004d4:	4606      	mov	r6, r0
 80004d6:	e6e3      	b.n	80002a0 <__udivmoddi4+0x64>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6f8      	b.n	80002ce <__udivmoddi4+0x92>
 80004dc:	454b      	cmp	r3, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f8>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e8:	3801      	subs	r0, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f8>
 80004ec:	4646      	mov	r6, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x28a>
 80004f0:	4620      	mov	r0, r4
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1e2>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x260>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b8>
 80004fc:	3b02      	subs	r3, #2
 80004fe:	4461      	add	r1, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x12c>
 8000502:	4630      	mov	r0, r6
 8000504:	e709      	b.n	800031a <__udivmoddi4+0xde>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x156>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <I2Cx_MspInit+0xa8>)
 800051a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051c:	4a26      	ldr	r2, [pc, #152]	; (80005b8 <I2Cx_MspInit+0xa8>)
 800051e:	f043 0302 	orr.w	r3, r3, #2
 8000522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <I2Cx_MspInit+0xa8>)
 8000526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000528:	f003 0302 	and.w	r3, r3, #2
 800052c:	613b      	str	r3, [r7, #16]
 800052e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000530:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000534:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000536:	2312      	movs	r3, #18
 8000538:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800053e:	2303      	movs	r3, #3
 8000540:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000542:	2304      	movs	r3, #4
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	481b      	ldr	r0, [pc, #108]	; (80005bc <I2Cx_MspInit+0xac>)
 800054e:	f000 fc47 	bl	8000de0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	4818      	ldr	r0, [pc, #96]	; (80005bc <I2Cx_MspInit+0xac>)
 800055a:	f000 fc41 	bl	8000de0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800055e:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <I2Cx_MspInit+0xa8>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <I2Cx_MspInit+0xa8>)
 8000564:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <I2Cx_MspInit+0xa8>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000576:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <I2Cx_MspInit+0xa8>)
 8000578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <I2Cx_MspInit+0xa8>)
 800057c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000580:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <I2Cx_MspInit+0xa8>)
 8000584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <I2Cx_MspInit+0xa8>)
 8000588:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800058c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	210f      	movs	r1, #15
 8000592:	2021      	movs	r0, #33	; 0x21
 8000594:	f000 fbed 	bl	8000d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000598:	2021      	movs	r0, #33	; 0x21
 800059a:	f000 fc06 	bl	8000daa <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	210f      	movs	r1, #15
 80005a2:	2022      	movs	r0, #34	; 0x22
 80005a4:	f000 fbe5 	bl	8000d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80005a8:	2022      	movs	r0, #34	; 0x22
 80005aa:	f000 fbfe 	bl	8000daa <HAL_NVIC_EnableIRQ>
}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000400 	.word	0x48000400

080005c0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <I2Cx_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a11      	ldr	r2, [pc, #68]	; (8000618 <I2Cx_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff89 	bl	8000510 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 fe8a 	bl	8001318 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000604:	2100      	movs	r1, #0
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f001 fc18 	bl	8001e3c <HAL_I2CEx_ConfigAnalogFilter>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40005800 	.word	0x40005800
 8000618:	00702681 	.word	0x00702681

0800061c <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af04      	add	r7, sp, #16
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	4608      	mov	r0, r1
 8000626:	4611      	mov	r1, r2
 8000628:	461a      	mov	r2, r3
 800062a:	4603      	mov	r3, r0
 800062c:	72fb      	strb	r3, [r7, #11]
 800062e:	460b      	mov	r3, r1
 8000630:	813b      	strh	r3, [r7, #8]
 8000632:	4613      	mov	r3, r2
 8000634:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800063a:	7afb      	ldrb	r3, [r7, #11]
 800063c:	b299      	uxth	r1, r3
 800063e:	88f8      	ldrh	r0, [r7, #6]
 8000640:	893a      	ldrh	r2, [r7, #8]
 8000642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000646:	9302      	str	r3, [sp, #8]
 8000648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	4603      	mov	r3, r0
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f001 f832 	bl	80016bc <HAL_I2C_Mem_Read>
 8000658:	4603      	mov	r3, r0
 800065a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000662:	7afb      	ldrb	r3, [r7, #11]
 8000664:	4619      	mov	r1, r3
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f000 f832 	bl	80006d0 <I2Cx_Error>
  }
  return status;
 800066c:	7dfb      	ldrb	r3, [r7, #23]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b08a      	sub	sp, #40	; 0x28
 800067a:	af04      	add	r7, sp, #16
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	4608      	mov	r0, r1
 8000680:	4611      	mov	r1, r2
 8000682:	461a      	mov	r2, r3
 8000684:	4603      	mov	r3, r0
 8000686:	72fb      	strb	r3, [r7, #11]
 8000688:	460b      	mov	r3, r1
 800068a:	813b      	strh	r3, [r7, #8]
 800068c:	4613      	mov	r3, r2
 800068e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000694:	7afb      	ldrb	r3, [r7, #11]
 8000696:	b299      	uxth	r1, r3
 8000698:	88f8      	ldrh	r0, [r7, #6]
 800069a:	893a      	ldrh	r2, [r7, #8]
 800069c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4603      	mov	r3, r0
 80006ac:	68f8      	ldr	r0, [r7, #12]
 80006ae:	f000 fef1 	bl	8001494 <HAL_I2C_Mem_Write>
 80006b2:	4603      	mov	r3, r0
 80006b4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80006bc:	7afb      	ldrb	r3, [r7, #11]
 80006be:	4619      	mov	r1, r3
 80006c0:	68f8      	ldr	r0, [r7, #12]
 80006c2:	f000 f805 	bl	80006d0 <I2Cx_Error>
  }
  return status;
 80006c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 feaa 	bl	8001436 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff ff6c 	bl	80005c0 <I2Cx_Init>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <SENSOR_IO_Init+0x10>)
 80006f6:	f7ff ff63 	bl	80005c0 <I2Cx_Init>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000005c 	.word	0x2000005c

08000704 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af02      	add	r7, sp, #8
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
 800070e:	460b      	mov	r3, r1
 8000710:	71bb      	strb	r3, [r7, #6]
 8000712:	4613      	mov	r3, r2
 8000714:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	b29a      	uxth	r2, r3
 800071a:	79f9      	ldrb	r1, [r7, #7]
 800071c:	2301      	movs	r3, #1
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	1d7b      	adds	r3, r7, #5
 8000722:	9300      	str	r3, [sp, #0]
 8000724:	2301      	movs	r3, #1
 8000726:	4803      	ldr	r0, [pc, #12]	; (8000734 <SENSOR_IO_Write+0x30>)
 8000728:	f7ff ffa5 	bl	8000676 <I2Cx_WriteMultiple>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000005c 	.word	0x2000005c

08000738 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af02      	add	r7, sp, #8
 800073e:	4603      	mov	r3, r0
 8000740:	460a      	mov	r2, r1
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	4613      	mov	r3, r2
 8000746:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	b29a      	uxth	r2, r3
 8000750:	79f9      	ldrb	r1, [r7, #7]
 8000752:	2301      	movs	r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	f107 030f 	add.w	r3, r7, #15
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2301      	movs	r3, #1
 800075e:	4804      	ldr	r0, [pc, #16]	; (8000770 <SENSOR_IO_Read+0x38>)
 8000760:	f7ff ff5c 	bl	800061c <I2Cx_ReadMultiple>

  return read_value;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000005c 	.word	0x2000005c

08000774 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af02      	add	r7, sp, #8
 800077a:	603a      	str	r2, [r7, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
 8000782:	460b      	mov	r3, r1
 8000784:	71bb      	strb	r3, [r7, #6]
 8000786:	4613      	mov	r3, r2
 8000788:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	b29a      	uxth	r2, r3
 800078e:	79f9      	ldrb	r1, [r7, #7]
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2301      	movs	r3, #1
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <SENSOR_IO_ReadMultiple+0x38>)
 800079c:	f7ff ff3e 	bl	800061c <I2Cx_ReadMultiple>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b29b      	uxth	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	2000005c 	.word	0x2000005c

080007b0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80007ba:	2300      	movs	r3, #0
 80007bc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <BSP_ACCELERO_Init+0x74>)
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	4798      	blx	r3
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b6a      	cmp	r3, #106	; 0x6a
 80007c8:	d002      	beq.n	80007d0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e024      	b.n	800081a <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <BSP_ACCELERO_Init+0x78>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <BSP_ACCELERO_Init+0x74>)
 80007d4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80007d6:	2330      	movs	r3, #48	; 0x30
 80007d8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80007de:	2300      	movs	r3, #0
 80007e0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80007e2:	2340      	movs	r3, #64	; 0x40
 80007e4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80007ee:	797a      	ldrb	r2, [r7, #5]
 80007f0:	7abb      	ldrb	r3, [r7, #10]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80007f8:	7a3b      	ldrb	r3, [r7, #8]
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	b21a      	sxth	r2, r3
 8000804:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000808:	4313      	orrs	r3, r2
 800080a:	b21b      	sxth	r3, r3
 800080c:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <BSP_ACCELERO_Init+0x78>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	89ba      	ldrh	r2, [r7, #12]
 8000816:	4610      	mov	r0, r2
 8000818:	4798      	blx	r3
  }  

  return ret;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	200000b0 	.word	0x200000b0

0800082c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d009      	beq.n	8000850 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	2b00      	cmp	r3, #0
 8000844:	d004      	beq.n	8000850 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8000846:	4b04      	ldr	r3, [pc, #16]	; (8000858 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	4798      	blx	r3
    }
  }
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000b0 	.word	0x200000b0

0800085c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800086a:	2110      	movs	r1, #16
 800086c:	20d4      	movs	r0, #212	; 0xd4
 800086e:	f7ff ff63 	bl	8000738 <SENSOR_IO_Read>
 8000872:	4603      	mov	r3, r0
 8000874:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800087a:	7bbb      	ldrb	r3, [r7, #14]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000882:	7bba      	ldrb	r2, [r7, #14]
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	4313      	orrs	r3, r2
 8000888:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	461a      	mov	r2, r3
 800088e:	2110      	movs	r1, #16
 8000890:	20d4      	movs	r0, #212	; 0xd4
 8000892:	f7ff ff37 	bl	8000704 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8000896:	2112      	movs	r1, #18
 8000898:	20d4      	movs	r0, #212	; 0xd4
 800089a:	f7ff ff4d 	bl	8000738 <SENSOR_IO_Read>
 800089e:	4603      	mov	r3, r0
 80008a0:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80008a2:	88fb      	ldrh	r3, [r7, #6]
 80008a4:	0a1b      	lsrs	r3, r3, #8
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80008aa:	7bbb      	ldrb	r3, [r7, #14]
 80008ac:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80008b0:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80008b2:	7bba      	ldrb	r2, [r7, #14]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80008ba:	7bbb      	ldrb	r3, [r7, #14]
 80008bc:	461a      	mov	r2, r3
 80008be:	2112      	movs	r1, #18
 80008c0:	20d4      	movs	r0, #212	; 0xd4
 80008c2:	f7ff ff1f 	bl	8000704 <SENSOR_IO_Write>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80008d4:	2300      	movs	r3, #0
 80008d6:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80008d8:	2110      	movs	r1, #16
 80008da:	20d4      	movs	r0, #212	; 0xd4
 80008dc:	f7ff ff2c 	bl	8000738 <SENSOR_IO_Read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	f003 030f 	and.w	r3, r3, #15
 80008ea:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2110      	movs	r1, #16
 80008f2:	20d4      	movs	r0, #212	; 0xd4
 80008f4:	f7ff ff06 	bl	8000704 <SENSOR_IO_Write>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8000904:	f7ff fef4 	bl	80006f0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8000908:	210f      	movs	r1, #15
 800090a:	20d4      	movs	r0, #212	; 0xd4
 800090c:	f7ff ff14 	bl	8000738 <SENSOR_IO_Read>
 8000910:	4603      	mov	r3, r0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}

08000916 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b084      	sub	sp, #16
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8000924:	2115      	movs	r1, #21
 8000926:	20d4      	movs	r0, #212	; 0xd4
 8000928:	f7ff ff06 	bl	8000738 <SENSOR_IO_Read>
 800092c:	4603      	mov	r3, r0
 800092e:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8000930:	7bfb      	ldrb	r3, [r7, #15]
 8000932:	f023 0310 	bic.w	r3, r3, #16
 8000936:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	461a      	mov	r2, r3
 800094a:	2115      	movs	r1, #21
 800094c:	20d4      	movs	r0, #212	; 0xd4
 800094e:	f7ff fed9 	bl	8000704 <SENSOR_IO_Write>
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000964:	2300      	movs	r3, #0
 8000966:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800096c:	f04f 0300 	mov.w	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000972:	2110      	movs	r1, #16
 8000974:	20d4      	movs	r0, #212	; 0xd4
 8000976:	f7ff fedf 	bl	8000738 <SENSOR_IO_Read>
 800097a:	4603      	mov	r3, r0
 800097c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800097e:	f107 0208 	add.w	r2, r7, #8
 8000982:	2306      	movs	r3, #6
 8000984:	2128      	movs	r1, #40	; 0x28
 8000986:	20d4      	movs	r0, #212	; 0xd4
 8000988:	f7ff fef4 	bl	8000774 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800098c:	2300      	movs	r3, #0
 800098e:	77fb      	strb	r3, [r7, #31]
 8000990:	e01c      	b.n	80009cc <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000992:	7ffb      	ldrb	r3, [r7, #31]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	3301      	adds	r3, #1
 8000998:	3320      	adds	r3, #32
 800099a:	443b      	add	r3, r7
 800099c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	021b      	lsls	r3, r3, #8
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	7ffb      	ldrb	r3, [r7, #31]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	3320      	adds	r3, #32
 80009ac:	443b      	add	r3, r7
 80009ae:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4413      	add	r3, r2
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	7ffb      	ldrb	r3, [r7, #31]
 80009ba:	b212      	sxth	r2, r2
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	3320      	adds	r3, #32
 80009c0:	443b      	add	r3, r7
 80009c2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	3301      	adds	r3, #1
 80009ca:	77fb      	strb	r3, [r7, #31]
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d9df      	bls.n	8000992 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
 80009d4:	f003 030c 	and.w	r3, r3, #12
 80009d8:	2b0c      	cmp	r3, #12
 80009da:	d829      	bhi.n	8000a30 <LSM6DSL_AccReadXYZ+0xd4>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <LSM6DSL_AccReadXYZ+0x88>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	08000a19 	.word	0x08000a19
 80009e8:	08000a31 	.word	0x08000a31
 80009ec:	08000a31 	.word	0x08000a31
 80009f0:	08000a31 	.word	0x08000a31
 80009f4:	08000a2b 	.word	0x08000a2b
 80009f8:	08000a31 	.word	0x08000a31
 80009fc:	08000a31 	.word	0x08000a31
 8000a00:	08000a31 	.word	0x08000a31
 8000a04:	08000a1f 	.word	0x08000a1f
 8000a08:	08000a31 	.word	0x08000a31
 8000a0c:	08000a31 	.word	0x08000a31
 8000a10:	08000a31 	.word	0x08000a31
 8000a14:	08000a25 	.word	0x08000a25
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <LSM6DSL_AccReadXYZ+0x120>)
 8000a1a:	61bb      	str	r3, [r7, #24]
    break;
 8000a1c:	e008      	b.n	8000a30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <LSM6DSL_AccReadXYZ+0x124>)
 8000a20:	61bb      	str	r3, [r7, #24]
    break;
 8000a22:	e005      	b.n	8000a30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <LSM6DSL_AccReadXYZ+0x128>)
 8000a26:	61bb      	str	r3, [r7, #24]
    break;
 8000a28:	e002      	b.n	8000a30 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <LSM6DSL_AccReadXYZ+0x12c>)
 8000a2c:	61bb      	str	r3, [r7, #24]
    break;    
 8000a2e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
 8000a34:	e01a      	b.n	8000a6c <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3320      	adds	r3, #32
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000a42:	ee07 3a90 	vmov	s15, r3
 8000a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a5e:	ee17 2a90 	vmov	r2, s15
 8000a62:	b212      	sxth	r2, r2
 8000a64:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000a66:	7ffb      	ldrb	r3, [r7, #31]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	77fb      	strb	r3, [r7, #31]
 8000a6c:	7ffb      	ldrb	r3, [r7, #31]
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d9e1      	bls.n	8000a36 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	3d79db23 	.word	0x3d79db23
 8000a80:	3df9db23 	.word	0x3df9db23
 8000a84:	3e79db23 	.word	0x3e79db23
 8000a88:	3ef9db23 	.word	0x3ef9db23

08000a8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a96:	2003      	movs	r0, #3
 8000a98:	f000 f960 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f000 f80d 	bl	8000abc <HAL_InitTick>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d002      	beq.n	8000aae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	e001      	b.n	8000ab2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aae:	f003 ff9b 	bl	80049e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_InitTick+0x6c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d023      	beq.n	8000b18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ad0:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <HAL_InitTick+0x70>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_InitTick+0x6c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 f96d 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10f      	bne.n	8000b12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d809      	bhi.n	8000b0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b00:	f000 f937 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_InitTick+0x74>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	e007      	b.n	8000b1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
 8000b10:	e004      	b.n	8000b1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	73fb      	strb	r3, [r7, #15]
 8000b16:	e001      	b.n	8000b1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000038 	.word	0x20000038
 8000b2c:	2000003c 	.word	0x2000003c
 8000b30:	20000034 	.word	0x20000034

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000038 	.word	0x20000038
 8000b58:	200000b4 	.word	0x200000b4

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200000b4 	.word	0x200000b4

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000038 	.word	0x20000038

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	60d3      	str	r3, [r2, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff3e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff31 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dee:	e166      	b.n	80010be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8158 	beq.w	80010b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d005      	beq.n	8000e20 <HAL_GPIO_Init+0x40>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d130      	bne.n	8000e82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68da      	ldr	r2, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e56:	2201      	movs	r2, #1
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	091b      	lsrs	r3, r3, #4
 8000e6c:	f003 0201 	and.w	r2, r3, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d017      	beq.n	8000ebe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	693a      	ldr	r2, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d123      	bne.n	8000f12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	691a      	ldr	r2, [r3, #16]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	08da      	lsrs	r2, r3, #3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3208      	adds	r2, #8
 8000f0c:	6939      	ldr	r1, [r7, #16]
 8000f0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0203 	and.w	r2, r3, #3
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80b2 	beq.w	80010b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f54:	4b61      	ldr	r3, [pc, #388]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f58:	4a60      	ldr	r2, [pc, #384]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f60:	4b5e      	ldr	r3, [pc, #376]	; (80010dc <HAL_GPIO_Init+0x2fc>)
 8000f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f6c:	4a5c      	ldr	r2, [pc, #368]	; (80010e0 <HAL_GPIO_Init+0x300>)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f96:	d02b      	beq.n	8000ff0 <HAL_GPIO_Init+0x210>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x304>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d025      	beq.n	8000fec <HAL_GPIO_Init+0x20c>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <HAL_GPIO_Init+0x308>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d01f      	beq.n	8000fe8 <HAL_GPIO_Init+0x208>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a50      	ldr	r2, [pc, #320]	; (80010ec <HAL_GPIO_Init+0x30c>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d019      	beq.n	8000fe4 <HAL_GPIO_Init+0x204>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x310>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d013      	beq.n	8000fe0 <HAL_GPIO_Init+0x200>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x314>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d00d      	beq.n	8000fdc <HAL_GPIO_Init+0x1fc>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_GPIO_Init+0x318>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d007      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f8>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_GPIO_Init+0x31c>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d101      	bne.n	8000fd4 <HAL_GPIO_Init+0x1f4>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	e00e      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd4:	2308      	movs	r3, #8
 8000fd6:	e00c      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fd8:	2306      	movs	r3, #6
 8000fda:	e00a      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fdc:	2305      	movs	r3, #5
 8000fde:	e008      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e006      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e004      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fec:	2301      	movs	r3, #1
 8000fee:	e000      	b.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	f002 0203 	and.w	r2, r2, #3
 8000ff8:	0092      	lsls	r2, r2, #2
 8000ffa:	4093      	lsls	r3, r2
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001002:	4937      	ldr	r1, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x300>)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001010:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <HAL_GPIO_Init+0x320>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001034:	4a32      	ldr	r2, [pc, #200]	; (8001100 <HAL_GPIO_Init+0x320>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <HAL_GPIO_Init+0x320>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <HAL_GPIO_Init+0x320>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001064:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_GPIO_Init+0x320>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001088:	4a1d      	ldr	r2, [pc, #116]	; (8001100 <HAL_GPIO_Init+0x320>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800108e:	4b1c      	ldr	r3, [pc, #112]	; (8001100 <HAL_GPIO_Init+0x320>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b2:	4a13      	ldr	r2, [pc, #76]	; (8001100 <HAL_GPIO_Init+0x320>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3301      	adds	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	fa22 f303 	lsr.w	r3, r2, r3
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f47f ae91 	bne.w	8000df0 <HAL_GPIO_Init+0x10>
  }
}
 80010ce:	bf00      	nop
 80010d0:	bf00      	nop
 80010d2:	371c      	adds	r7, #28
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000c00 	.word	0x48000c00
 80010f0:	48001000 	.word	0x48001000
 80010f4:	48001400 	.word	0x48001400
 80010f8:	48001800 	.word	0x48001800
 80010fc:	48001c00 	.word	0x48001c00
 8001100:	40010400 	.word	0x40010400

08001104 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001112:	e0c9      	b.n	80012a8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001114:	2201      	movs	r2, #1
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f000 80bc 	beq.w	80012a2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800112a:	4a66      	ldr	r2, [pc, #408]	; (80012c4 <HAL_GPIO_DeInit+0x1c0>)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001152:	d02b      	beq.n	80011ac <HAL_GPIO_DeInit+0xa8>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a5c      	ldr	r2, [pc, #368]	; (80012c8 <HAL_GPIO_DeInit+0x1c4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d025      	beq.n	80011a8 <HAL_GPIO_DeInit+0xa4>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a5b      	ldr	r2, [pc, #364]	; (80012cc <HAL_GPIO_DeInit+0x1c8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d01f      	beq.n	80011a4 <HAL_GPIO_DeInit+0xa0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a5a      	ldr	r2, [pc, #360]	; (80012d0 <HAL_GPIO_DeInit+0x1cc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d019      	beq.n	80011a0 <HAL_GPIO_DeInit+0x9c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a59      	ldr	r2, [pc, #356]	; (80012d4 <HAL_GPIO_DeInit+0x1d0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d013      	beq.n	800119c <HAL_GPIO_DeInit+0x98>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a58      	ldr	r2, [pc, #352]	; (80012d8 <HAL_GPIO_DeInit+0x1d4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_DeInit+0x94>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a57      	ldr	r2, [pc, #348]	; (80012dc <HAL_GPIO_DeInit+0x1d8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_DeInit+0x90>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a56      	ldr	r2, [pc, #344]	; (80012e0 <HAL_GPIO_DeInit+0x1dc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_DeInit+0x8c>
 800118c:	2307      	movs	r3, #7
 800118e:	e00e      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 8001190:	2308      	movs	r3, #8
 8001192:	e00c      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 8001194:	2306      	movs	r3, #6
 8001196:	e00a      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 8001198:	2305      	movs	r3, #5
 800119a:	e008      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 800119c:	2304      	movs	r3, #4
 800119e:	e006      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 80011a0:	2303      	movs	r3, #3
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_DeInit+0xaa>
 80011ac:	2300      	movs	r3, #0
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d132      	bne.n	8001224 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80011be:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	4947      	ldr	r1, [pc, #284]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80011cc:	4b45      	ldr	r3, [pc, #276]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	4943      	ldr	r1, [pc, #268]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011d6:	4013      	ands	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80011da:	4b42      	ldr	r3, [pc, #264]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4940      	ldr	r1, [pc, #256]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	493c      	ldr	r1, [pc, #240]	; (80012e4 <HAL_GPIO_DeInit+0x1e0>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001206:	4a2f      	ldr	r2, [pc, #188]	; (80012c4 <HAL_GPIO_DeInit+0x1c0>)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	43da      	mvns	r2, r3
 8001216:	482b      	ldr	r0, [pc, #172]	; (80012c4 <HAL_GPIO_DeInit+0x1c0>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	400a      	ands	r2, r1
 800121e:	3302      	adds	r3, #2
 8001220:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	2103      	movs	r1, #3
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	08d2      	lsrs	r2, r2, #3
 8001258:	4019      	ands	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2103      	movs	r1, #3
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2101      	movs	r1, #1
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	401a      	ands	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2103      	movs	r1, #3
 8001296:	fa01 f303 	lsl.w	r3, r1, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	401a      	ands	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3301      	adds	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f af2f 	bne.w	8001114 <HAL_GPIO_DeInit+0x10>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40010000 	.word	0x40010000
 80012c8:	48000400 	.word	0x48000400
 80012cc:	48000800 	.word	0x48000800
 80012d0:	48000c00 	.word	0x48000c00
 80012d4:	48001000 	.word	0x48001000
 80012d8:	48001400 	.word	0x48001400
 80012dc:	48001800 	.word	0x48001800
 80012e0:	48001c00 	.word	0x48001c00
 80012e4:	40010400 	.word	0x40010400

080012e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	807b      	strh	r3, [r7, #2]
 80012f4:	4613      	mov	r3, r2
 80012f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012f8:	787b      	ldrb	r3, [r7, #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001304:	e002      	b.n	800130c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001306:	887a      	ldrh	r2, [r7, #2]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e081      	b.n	800142e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f003 fb76 	bl	8004a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	; 0x24
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001368:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001378:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e006      	b.n	80013a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800139e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d104      	bne.n	80013b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	6812      	ldr	r2, [r2, #0]
 80013bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691a      	ldr	r2, [r3, #16]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	430a      	orrs	r2, r1
 80013ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69d9      	ldr	r1, [r3, #28]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2220      	movs	r2, #32
 800141a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e021      	b.n	800148c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2224      	movs	r2, #36	; 0x24
 800144c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f022 0201 	bic.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f003 fbcd 	bl	8004c00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	817b      	strh	r3, [r7, #10]
 80014a6:	460b      	mov	r3, r1
 80014a8:	813b      	strh	r3, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b20      	cmp	r3, #32
 80014b8:	f040 80f9 	bne.w	80016ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d002      	beq.n	80014c8 <HAL_I2C_Mem_Write+0x34>
 80014c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0ed      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_Mem_Write+0x4e>
 80014de:	2302      	movs	r3, #2
 80014e0:	e0e6      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014ea:	f7ff fb37 	bl	8000b5c <HAL_GetTick>
 80014ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2319      	movs	r3, #25
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f000 fac3 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0d1      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2221      	movs	r2, #33	; 0x21
 8001510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2240      	movs	r2, #64	; 0x40
 8001518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2200      	movs	r2, #0
 8001520:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a3a      	ldr	r2, [r7, #32]
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800152c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001534:	88f8      	ldrh	r0, [r7, #6]
 8001536:	893a      	ldrh	r2, [r7, #8]
 8001538:	8979      	ldrh	r1, [r7, #10]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	4603      	mov	r3, r0
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f9d3 	bl	80018f0 <I2C_RequestMemoryWrite>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0a9      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001560:	b29b      	uxth	r3, r3
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d90e      	bls.n	8001584 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	22ff      	movs	r2, #255	; 0xff
 800156a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001570:	b2da      	uxtb	r2, r3
 8001572:	8979      	ldrh	r1, [r7, #10]
 8001574:	2300      	movs	r3, #0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 fc2b 	bl	8001dd8 <I2C_TransferConfig>
 8001582:	e00f      	b.n	80015a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001592:	b2da      	uxtb	r2, r3
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	2300      	movs	r3, #0
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fc1a 	bl	8001dd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 faad 	bl	8001b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e07b      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	781a      	ldrb	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d034      	beq.n	800165c <HAL_I2C_Mem_Write+0x1c8>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d130      	bne.n	800165c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001600:	2200      	movs	r2, #0
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 fa3f 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e04d      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001618:	b29b      	uxth	r3, r3
 800161a:	2bff      	cmp	r3, #255	; 0xff
 800161c:	d90e      	bls.n	800163c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	22ff      	movs	r2, #255	; 0xff
 8001622:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001628:	b2da      	uxtb	r2, r3
 800162a:	8979      	ldrh	r1, [r7, #10]
 800162c:	2300      	movs	r3, #0
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 fbcf 	bl	8001dd8 <I2C_TransferConfig>
 800163a:	e00f      	b.n	800165c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164a:	b2da      	uxtb	r2, r3
 800164c:	8979      	ldrh	r1, [r7, #10]
 800164e:	2300      	movs	r3, #0
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 fbbe 	bl	8001dd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001660:	b29b      	uxth	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d19e      	bne.n	80015a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f000 fa8c 	bl	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e01a      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2220      	movs	r2, #32
 8001680:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6859      	ldr	r1, [r3, #4]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_I2C_Mem_Write+0x224>)
 800168e:	400b      	ands	r3, r1
 8001690:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2220      	movs	r2, #32
 8001696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80016ae:	2302      	movs	r3, #2
  }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	fe00e800 	.word	0xfe00e800

080016bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	817b      	strh	r3, [r7, #10]
 80016ce:	460b      	mov	r3, r1
 80016d0:	813b      	strh	r3, [r7, #8]
 80016d2:	4613      	mov	r3, r2
 80016d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b20      	cmp	r3, #32
 80016e0:	f040 80fd 	bne.w	80018de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d002      	beq.n	80016f0 <HAL_I2C_Mem_Read+0x34>
 80016ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d105      	bne.n	80016fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0f1      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_I2C_Mem_Read+0x4e>
 8001706:	2302      	movs	r3, #2
 8001708:	e0ea      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001712:	f7ff fa23 	bl	8000b5c <HAL_GetTick>
 8001716:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2319      	movs	r3, #25
 800171e:	2201      	movs	r2, #1
 8001720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f000 f9af 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0d5      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2222      	movs	r2, #34	; 0x22
 8001738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2240      	movs	r2, #64	; 0x40
 8001740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a3a      	ldr	r2, [r7, #32]
 800174e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001754:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800175c:	88f8      	ldrh	r0, [r7, #6]
 800175e:	893a      	ldrh	r2, [r7, #8]
 8001760:	8979      	ldrh	r1, [r7, #10]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4603      	mov	r3, r0
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f913 	bl	8001998 <I2C_RequestMemoryRead>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e0ad      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001788:	b29b      	uxth	r3, r3
 800178a:	2bff      	cmp	r3, #255	; 0xff
 800178c:	d90e      	bls.n	80017ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8979      	ldrh	r1, [r7, #10]
 800179c:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <HAL_I2C_Mem_Read+0x22c>)
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fb17 	bl	8001dd8 <I2C_TransferConfig>
 80017aa:	e00f      	b.n	80017cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	8979      	ldrh	r1, [r7, #10]
 80017be:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_I2C_Mem_Read+0x22c>)
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 fb06 	bl	8001dd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	2200      	movs	r2, #0
 80017d4:	2104      	movs	r1, #4
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f956 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07c      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d034      	beq.n	800188c <HAL_I2C_Mem_Read+0x1d0>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001826:	2b00      	cmp	r3, #0
 8001828:	d130      	bne.n	800188c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	2200      	movs	r2, #0
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	f000 f927 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e04d      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	2bff      	cmp	r3, #255	; 0xff
 800184c:	d90e      	bls.n	800186c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	22ff      	movs	r2, #255	; 0xff
 8001852:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001858:	b2da      	uxtb	r2, r3
 800185a:	8979      	ldrh	r1, [r7, #10]
 800185c:	2300      	movs	r3, #0
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fab7 	bl	8001dd8 <I2C_TransferConfig>
 800186a:	e00f      	b.n	800188c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29a      	uxth	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	b2da      	uxtb	r2, r3
 800187c:	8979      	ldrh	r1, [r7, #10]
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f000 faa6 	bl	8001dd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d19a      	bne.n	80017cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f974 	bl	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e01a      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2220      	movs	r2, #32
 80018b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_I2C_Mem_Read+0x230>)
 80018be:	400b      	ands	r3, r1
 80018c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018de:	2302      	movs	r3, #2
  }
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	80002400 	.word	0x80002400
 80018ec:	fe00e800 	.word	0xfe00e800

080018f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	817b      	strh	r3, [r7, #10]
 8001902:	460b      	mov	r3, r1
 8001904:	813b      	strh	r3, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	8979      	ldrh	r1, [r7, #10]
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <I2C_RequestMemoryWrite+0xa4>)
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 fa5d 	bl	8001dd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	69b9      	ldr	r1, [r7, #24]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 f8f0 	bl	8001b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e02c      	b.n	800198c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001938:	893b      	ldrh	r3, [r7, #8]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
 8001942:	e015      	b.n	8001970 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001944:	893b      	ldrh	r3, [r7, #8]
 8001946:	0a1b      	lsrs	r3, r3, #8
 8001948:	b29b      	uxth	r3, r3
 800194a:	b2da      	uxtb	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f8d6 	bl	8001b08 <I2C_WaitOnTXISFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e012      	b.n	800198c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001966:	893b      	ldrh	r3, [r7, #8]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2200      	movs	r2, #0
 8001978:	2180      	movs	r1, #128	; 0x80
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f884 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	80002000 	.word	0x80002000

08001998 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af02      	add	r7, sp, #8
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	4608      	mov	r0, r1
 80019a2:	4611      	mov	r1, r2
 80019a4:	461a      	mov	r2, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	817b      	strh	r3, [r7, #10]
 80019aa:	460b      	mov	r3, r1
 80019ac:	813b      	strh	r3, [r7, #8]
 80019ae:	4613      	mov	r3, r2
 80019b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80019b2:	88fb      	ldrh	r3, [r7, #6]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <I2C_RequestMemoryRead+0xa4>)
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 fa0a 	bl	8001dd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 f89d 	bl	8001b08 <I2C_WaitOnTXISFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e02c      	b.n	8001a32 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d105      	bne.n	80019ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019de:	893b      	ldrh	r3, [r7, #8]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28
 80019e8:	e015      	b.n	8001a16 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019ea:	893b      	ldrh	r3, [r7, #8]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	69b9      	ldr	r1, [r7, #24]
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f883 	bl	8001b08 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e012      	b.n	8001a32 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a0c:	893b      	ldrh	r3, [r7, #8]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2140      	movs	r1, #64	; 0x40
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 f831 	bl	8001a88 <I2C_WaitOnFlagUntilTimeout>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	80002000 	.word	0x80002000

08001a40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d103      	bne.n	8001a5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d007      	beq.n	8001a7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699a      	ldr	r2, [r3, #24]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	619a      	str	r2, [r3, #24]
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	4613      	mov	r3, r2
 8001a96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a98:	e022      	b.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aa0:	d01e      	beq.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa2:	f7ff f85b 	bl	8000b5c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d302      	bcc.n	8001ab8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d113      	bne.n	8001ae0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e00f      	b.n	8001b00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d0cd      	beq.n	8001a9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3710      	adds	r7, #16
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b14:	e02c      	b.n	8001b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 f870 	bl	8001c00 <I2C_IsErrorOccurred>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e02a      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b30:	d01e      	beq.n	8001b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b32:	f7ff f813 	bl	8000b5c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d302      	bcc.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d113      	bne.n	8001b70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	f043 0220 	orr.w	r2, r3, #32
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e007      	b.n	8001b80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d1cb      	bne.n	8001b16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b94:	e028      	b.n	8001be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f830 	bl	8001c00 <I2C_IsErrorOccurred>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e026      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001baa:	f7fe ffd7 	bl	8000b5c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d302      	bcc.n	8001bc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d113      	bne.n	8001be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	f043 0220 	orr.w	r2, r3, #32
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e007      	b.n	8001bf8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f003 0320 	and.w	r3, r3, #32
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d1cf      	bne.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d075      	beq.n	8001d18 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2210      	movs	r2, #16
 8001c32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c34:	e056      	b.n	8001ce4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d052      	beq.n	8001ce4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe ff8d 	bl	8000b5c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_IsErrorOccurred+0x54>
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d147      	bne.n	8001ce4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c76:	d12e      	bne.n	8001cd6 <I2C_IsErrorOccurred+0xd6>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c7e:	d02a      	beq.n	8001cd6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001c80:	7cfb      	ldrb	r3, [r7, #19]
 8001c82:	2b20      	cmp	r3, #32
 8001c84:	d027      	beq.n	8001cd6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c96:	f7fe ff61 	bl	8000b5c <HAL_GetTick>
 8001c9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c9c:	e01b      	b.n	8001cd6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c9e:	f7fe ff5d 	bl	8000b5c <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b19      	cmp	r3, #25
 8001caa:	d914      	bls.n	8001cd6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	f043 0220 	orr.w	r2, r3, #32
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d1dc      	bne.n	8001c9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b20      	cmp	r3, #32
 8001cf0:	d003      	beq.n	8001cfa <I2C_IsErrorOccurred+0xfa>
 8001cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d09d      	beq.n	8001c36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d103      	bne.n	8001d0a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2220      	movs	r2, #32
 8001d08:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00b      	beq.n	8001d42 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	f043 0301 	orr.w	r3, r3, #1
 8001d30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00b      	beq.n	8001d64 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d01c      	beq.n	8001dc8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff fe56 	bl	8001a40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6859      	ldr	r1, [r3, #4]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <I2C_IsErrorOccurred+0x1d4>)
 8001da0:	400b      	ands	r3, r1
 8001da2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3728      	adds	r7, #40	; 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	fe00e800 	.word	0xfe00e800

08001dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	817b      	strh	r3, [r7, #10]
 8001de6:	4613      	mov	r3, r2
 8001de8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001df0:	7a7b      	ldrb	r3, [r7, #9]
 8001df2:	041b      	lsls	r3, r3, #16
 8001df4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	0d5b      	lsrs	r3, r3, #21
 8001e12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <I2C_TransferConfig+0x60>)
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	ea02 0103 	and.w	r1, r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e2a:	bf00      	nop
 8001e2c:	371c      	adds	r7, #28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	03ff63ff 	.word	0x03ff63ff

08001e3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d138      	bne.n	8001ec4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e032      	b.n	8001ec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2224      	movs	r2, #36	; 0x24
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b085      	sub	sp, #20
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d139      	bne.n	8001f5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e033      	b.n	8001f5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2224      	movs	r2, #36	; 0x24
 8001f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e000      	b.n	8001f5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f5c:	2302      	movs	r3, #2
  }
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d102      	bne.n	8001f84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f82:	e00b      	b.n	8001f9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f92:	d102      	bne.n	8001f9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f98:	e000      	b.n	8001f9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40007000 	.word	0x40007000

08001fac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d141      	bne.n	800203e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fba:	4b4b      	ldr	r3, [pc, #300]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	d131      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fce:	4a46      	ldr	r2, [pc, #280]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd8:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe0:	4a41      	ldr	r2, [pc, #260]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001fe8:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2232      	movs	r2, #50	; 0x32
 8001fee:	fb02 f303 	mul.w	r3, r2, r3
 8001ff2:	4a3f      	ldr	r2, [pc, #252]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ffe:	e002      	b.n	8002006 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3b01      	subs	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	d102      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f2      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800201a:	4b33      	ldr	r3, [pc, #204]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002026:	d158      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e057      	b.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800202c:	4b2e      	ldr	r3, [pc, #184]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002038:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800203c:	e04d      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002044:	d141      	bne.n	80020ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002046:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800204e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002052:	d131      	bne.n	80020b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002064:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206c:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002072:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2232      	movs	r2, #50	; 0x32
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	4a1c      	ldr	r2, [pc, #112]	; (80020f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	3301      	adds	r3, #1
 8002088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208a:	e002      	b.n	8002092 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	3b01      	subs	r3, #1
 8002090:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002092:	4b15      	ldr	r3, [pc, #84]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d102      	bne.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f2      	bne.n	800208c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d112      	bne.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e011      	b.n	80020dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020c8:	e007      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020ca:	4b07      	ldr	r3, [pc, #28]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020d2:	4a05      	ldr	r2, [pc, #20]	; (80020e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40007000 	.word	0x40007000
 80020ec:	2000003c 	.word	0x2000003c
 80020f0:	431bde83 	.word	0x431bde83

080020f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	f000 bc08 	b.w	8002918 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002108:	4b96      	ldr	r3, [pc, #600]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002112:	4b94      	ldr	r3, [pc, #592]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80e4 	beq.w	80022f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_RCC_OscConfig+0x4c>
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b0c      	cmp	r3, #12
 8002134:	f040 808b 	bne.w	800224e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b01      	cmp	r3, #1
 800213c:	f040 8087 	bne.w	800224e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002140:	4b88      	ldr	r3, [pc, #544]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x64>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e3df      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	4b81      	ldr	r3, [pc, #516]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_RCC_OscConfig+0x7e>
 8002168:	4b7e      	ldr	r3, [pc, #504]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002170:	e005      	b.n	800217e <HAL_RCC_OscConfig+0x8a>
 8002172:	4b7c      	ldr	r3, [pc, #496]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800217e:	4293      	cmp	r3, r2
 8002180:	d223      	bcs.n	80021ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4618      	mov	r0, r3
 8002188:	f000 fdcc 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e3c0      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002196:	4b73      	ldr	r3, [pc, #460]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a72      	ldr	r2, [pc, #456]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b70      	ldr	r3, [pc, #448]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	496d      	ldr	r1, [pc, #436]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b4:	4b6b      	ldr	r3, [pc, #428]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	4968      	ldr	r1, [pc, #416]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]
 80021c8:	e025      	b.n	8002216 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021ca:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a65      	ldr	r2, [pc, #404]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b63      	ldr	r3, [pc, #396]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4960      	ldr	r1, [pc, #384]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e8:	4b5e      	ldr	r3, [pc, #376]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	021b      	lsls	r3, r3, #8
 80021f6:	495b      	ldr	r1, [pc, #364]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d109      	bne.n	8002216 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd8c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e380      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002216:	f000 fcc1 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800221a:	4602      	mov	r2, r0
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 030f 	and.w	r3, r3, #15
 8002226:	4950      	ldr	r1, [pc, #320]	; (8002368 <HAL_RCC_OscConfig+0x274>)
 8002228:	5ccb      	ldrb	r3, [r1, r3]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	fa22 f303 	lsr.w	r3, r2, r3
 8002232:	4a4e      	ldr	r2, [pc, #312]	; (800236c <HAL_RCC_OscConfig+0x278>)
 8002234:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002236:	4b4e      	ldr	r3, [pc, #312]	; (8002370 <HAL_RCC_OscConfig+0x27c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fc3e 	bl	8000abc <HAL_InitTick>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d052      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	e364      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d032      	beq.n	80022bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002256:	4b43      	ldr	r3, [pc, #268]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a42      	ldr	r2, [pc, #264]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002262:	f7fe fc7b 	bl	8000b5c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800226a:	f7fe fc77 	bl	8000b5c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e34d      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a35      	ldr	r2, [pc, #212]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800228e:	f043 0308 	orr.w	r3, r3, #8
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b33      	ldr	r3, [pc, #204]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4930      	ldr	r1, [pc, #192]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	021b      	lsls	r3, r3, #8
 80022b4:	492b      	ldr	r1, [pc, #172]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
 80022ba:	e01a      	b.n	80022f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022c2:	f023 0301 	bic.w	r3, r3, #1
 80022c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c8:	f7fe fc48 	bl	8000b5c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d0:	f7fe fc44 	bl	8000b5c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e31a      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1dc>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d073      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d005      	beq.n	8002310 <HAL_RCC_OscConfig+0x21c>
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d10e      	bne.n	8002328 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b03      	cmp	r3, #3
 800230e:	d10b      	bne.n	8002328 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d063      	beq.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d15f      	bne.n	80023e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e2f7      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x24c>
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a0b      	ldr	r2, [pc, #44]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800233c:	6013      	str	r3, [r2, #0]
 800233e:	e025      	b.n	800238c <HAL_RCC_OscConfig+0x298>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002348:	d114      	bne.n	8002374 <HAL_RCC_OscConfig+0x280>
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a02      	ldr	r2, [pc, #8]	; (8002364 <HAL_RCC_OscConfig+0x270>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e013      	b.n	800238c <HAL_RCC_OscConfig+0x298>
 8002364:	40021000 	.word	0x40021000
 8002368:	08004ec4 	.word	0x08004ec4
 800236c:	2000003c 	.word	0x2000003c
 8002370:	20000034 	.word	0x20000034
 8002374:	4ba0      	ldr	r3, [pc, #640]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a9f      	ldr	r2, [pc, #636]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800237a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	4b9d      	ldr	r3, [pc, #628]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a9c      	ldr	r2, [pc, #624]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800238a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fbe2 	bl	8000b5c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800239c:	f7fe fbde 	bl	8000b5c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b64      	cmp	r3, #100	; 0x64
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e2b4      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ae:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x2a8>
 80023ba:	e014      	b.n	80023e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7fe fbce 	bl	8000b5c <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c4:	f7fe fbca 	bl	8000b5c <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b64      	cmp	r3, #100	; 0x64
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e2a0      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d6:	4b88      	ldr	r3, [pc, #544]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x2d0>
 80023e2:	e000      	b.n	80023e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d060      	beq.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b04      	cmp	r3, #4
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_OscConfig+0x310>
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d119      	bne.n	8002432 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d116      	bne.n	8002432 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002404:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_OscConfig+0x328>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e27d      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241c:	4b76      	ldr	r3, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	4973      	ldr	r1, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002430:	e040      	b.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d023      	beq.n	8002482 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fb89 	bl	8000b5c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800244e:	f7fe fb85 	bl	8000b5c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e25b      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246c:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	495f      	ldr	r1, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
 8002480:	e018      	b.n	80024b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a5c      	ldr	r2, [pc, #368]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7fe fb65 	bl	8000b5c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002496:	f7fe fb61 	bl	8000b5c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e237      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a8:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d03c      	beq.n	800253a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d01c      	beq.n	8002502 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c8:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80024ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ce:	4a4a      	ldr	r2, [pc, #296]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fb40 	bl	8000b5c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7fe fb3c 	bl	8000b5c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e212      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80024f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCC_OscConfig+0x3ec>
 8002500:	e01b      	b.n	800253a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002508:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7fe fb23 	bl	8000b5c <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fb1f 	bl	8000b5c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e1f5      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800252c:	4b32      	ldr	r3, [pc, #200]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800252e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ef      	bne.n	800251a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80a6 	beq.w	8002694 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a26      	ldr	r2, [pc, #152]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002570:	2301      	movs	r3, #1
 8002572:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002574:	4b21      	ldr	r3, [pc, #132]	; (80025fc <HAL_RCC_OscConfig+0x508>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d118      	bne.n	80025b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <HAL_RCC_OscConfig+0x508>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1d      	ldr	r2, [pc, #116]	; (80025fc <HAL_RCC_OscConfig+0x508>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258c:	f7fe fae6 	bl	8000b5c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002594:	f7fe fae2 	bl	8000b5c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1b8      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_RCC_OscConfig+0x508>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d108      	bne.n	80025cc <HAL_RCC_OscConfig+0x4d8>
 80025ba:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ca:	e029      	b.n	8002620 <HAL_RCC_OscConfig+0x52c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d115      	bne.n	8002600 <HAL_RCC_OscConfig+0x50c>
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80025d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025da:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	4a03      	ldr	r2, [pc, #12]	; (80025f8 <HAL_RCC_OscConfig+0x504>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f4:	e014      	b.n	8002620 <HAL_RCC_OscConfig+0x52c>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40007000 	.word	0x40007000
 8002600:	4b9d      	ldr	r3, [pc, #628]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	4a9c      	ldr	r2, [pc, #624]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002608:	f023 0301 	bic.w	r3, r3, #1
 800260c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002610:	4b99      	ldr	r3, [pc, #612]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	4a98      	ldr	r2, [pc, #608]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d016      	beq.n	8002656 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fa98 	bl	8000b5c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fa94 	bl	8000b5c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e168      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002646:	4b8c      	ldr	r3, [pc, #560]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ed      	beq.n	8002630 <HAL_RCC_OscConfig+0x53c>
 8002654:	e015      	b.n	8002682 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fa81 	bl	8000b5c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fa7d 	bl	8000b5c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e151      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002674:	4b80      	ldr	r3, [pc, #512]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ed      	bne.n	800265e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002682:	7ffb      	ldrb	r3, [r7, #31]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002692:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d03c      	beq.n	800271a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01c      	beq.n	80026e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a8:	4b73      	ldr	r3, [pc, #460]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80026aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ae:	4a72      	ldr	r2, [pc, #456]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fa50 	bl	8000b5c <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c0:	f7fe fa4c 	bl	8000b5c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e122      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026d2:	4b69      	ldr	r3, [pc, #420]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80026d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0ef      	beq.n	80026c0 <HAL_RCC_OscConfig+0x5cc>
 80026e0:	e01b      	b.n	800271a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026e2:	4b65      	ldr	r3, [pc, #404]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80026e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e8:	4a63      	ldr	r2, [pc, #396]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f2:	f7fe fa33 	bl	8000b5c <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026fa:	f7fe fa2f 	bl	8000b5c <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e105      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800270c:	4b5a      	ldr	r3, [pc, #360]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 800270e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ef      	bne.n	80026fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80f9 	beq.w	8002916 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	2b02      	cmp	r3, #2
 800272a:	f040 80cf 	bne.w	80028cc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800272e:	4b52      	ldr	r3, [pc, #328]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0203 	and.w	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	429a      	cmp	r2, r3
 8002740:	d12c      	bne.n	800279c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	3b01      	subs	r3, #1
 800274e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d123      	bne.n	800279c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d11b      	bne.n	800279c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d113      	bne.n	800279c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d109      	bne.n	800279c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	3b01      	subs	r3, #1
 8002796:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d071      	beq.n	8002880 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d068      	beq.n	8002874 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027ae:	4b32      	ldr	r3, [pc, #200]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0ac      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027be:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2d      	ldr	r2, [pc, #180]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80027c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ca:	f7fe f9c7 	bl	8000b5c <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe f9c3 	bl	8000b5c <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e099      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f0      	bne.n	80027d2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027f0:	4b21      	ldr	r3, [pc, #132]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <HAL_RCC_OscConfig+0x788>)
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002800:	3a01      	subs	r2, #1
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	4311      	orrs	r1, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800280a:	0212      	lsls	r2, r2, #8
 800280c:	4311      	orrs	r1, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002812:	0852      	lsrs	r2, r2, #1
 8002814:	3a01      	subs	r2, #1
 8002816:	0552      	lsls	r2, r2, #21
 8002818:	4311      	orrs	r1, r2
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800281e:	0852      	lsrs	r2, r2, #1
 8002820:	3a01      	subs	r2, #1
 8002822:	0652      	lsls	r2, r2, #25
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800282a:	06d2      	lsls	r2, r2, #27
 800282c:	430a      	orrs	r2, r1
 800282e:	4912      	ldr	r1, [pc, #72]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002830:	4313      	orrs	r3, r2
 8002832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 800283a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800283e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a0c      	ldr	r2, [pc, #48]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800284c:	f7fe f986 	bl	8000b5c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe f982 	bl	8000b5c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e058      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCC_OscConfig+0x784>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002872:	e050      	b.n	8002916 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e04f      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
 8002878:	40021000 	.word	0x40021000
 800287c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002880:	4b27      	ldr	r3, [pc, #156]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d144      	bne.n	8002916 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a20      	ldr	r2, [pc, #128]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028a4:	f7fe f95a 	bl	8000b5c <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe f956 	bl	8000b5c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e02c      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x7b8>
 80028ca:	e024      	b.n	8002916 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	d01f      	beq.n	8002912 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a12      	ldr	r2, [pc, #72]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 80028d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe f93d 	bl	8000b5c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe f939 	bl	8000b5c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e00f      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	4905      	ldr	r1, [pc, #20]	; (8002920 <HAL_RCC_OscConfig+0x82c>)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x830>)
 800290c:	4013      	ands	r3, r2
 800290e:	60cb      	str	r3, [r1, #12]
 8002910:	e001      	b.n	8002916 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3720      	adds	r7, #32
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000
 8002924:	feeefffc 	.word	0xfeeefffc

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e11d      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b90      	ldr	r3, [pc, #576]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d910      	bls.n	8002970 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b8d      	ldr	r3, [pc, #564]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 020f 	bic.w	r2, r3, #15
 8002956:	498b      	ldr	r1, [pc, #556]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b89      	ldr	r3, [pc, #548]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e105      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	4b81      	ldr	r3, [pc, #516]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	429a      	cmp	r2, r3
 800298a:	d908      	bls.n	800299e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b7e      	ldr	r3, [pc, #504]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	497b      	ldr	r1, [pc, #492]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d079      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d11e      	bne.n	80029f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b2:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e0dc      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80029c2:	f000 fa09 	bl	8002dd8 <RCC_GetSysClockFreqFromPLLSource>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4a70      	ldr	r2, [pc, #448]	; (8002b8c <HAL_RCC_ClockConfig+0x264>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d946      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029ce:	4b6e      	ldr	r3, [pc, #440]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d140      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029da:	4b6b      	ldr	r3, [pc, #428]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e2:	4a69      	ldr	r2, [pc, #420]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 80029e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e035      	b.n	8002a5c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d107      	bne.n	8002a08 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f8:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d115      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b9      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a10:	4b5d      	ldr	r3, [pc, #372]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d109      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0ad      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0a5      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002a30:	f000 f8b4 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002a34:	4603      	mov	r3, r0
 8002a36:	4a55      	ldr	r2, [pc, #340]	; (8002b8c <HAL_RCC_ClockConfig+0x264>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d90f      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a3c:	4b52      	ldr	r3, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a48:	4b4f      	ldr	r3, [pc, #316]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a56:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a5c:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4947      	ldr	r1, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6e:	f7fe f875 	bl	8000b5c <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a76:	f7fe f871 	bl	8000b5c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e077      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	4b3e      	ldr	r3, [pc, #248]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 020c 	and.w	r2, r3, #12
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d1eb      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b80      	cmp	r3, #128	; 0x80
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002aa4:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a37      	ldr	r2, [pc, #220]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002aaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4b31      	ldr	r3, [pc, #196]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d208      	bcs.n	8002ade <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	492b      	ldr	r1, [pc, #172]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d210      	bcs.n	8002b0e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f023 020f 	bic.w	r2, r3, #15
 8002af4:	4923      	ldr	r1, [pc, #140]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_RCC_ClockConfig+0x25c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e036      	b.n	8002b7c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	4918      	ldr	r1, [pc, #96]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4910      	ldr	r1, [pc, #64]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b4c:	f000 f826 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <HAL_RCC_ClockConfig+0x260>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <HAL_RCC_ClockConfig+0x268>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
 8002b68:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x26c>)
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd ffa3 	bl	8000abc <HAL_InitTick>
 8002b76:	4603      	mov	r3, r0
 8002b78:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40022000 	.word	0x40022000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	04c4b400 	.word	0x04c4b400
 8002b90:	08004ec4 	.word	0x08004ec4
 8002b94:	2000003c 	.word	0x2000003c
 8002b98:	20000034 	.word	0x20000034

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d134      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xac>
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb03 f202 	mul.w	r2, r3, r2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	0e5b      	lsrs	r3, r3, #25
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c94:	69bb      	ldr	r3, [r7, #24]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	08004edc 	.word	0x08004edc
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	2000003c 	.word	0x2000003c

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	08004ed4 	.word	0x08004ed4

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cfc:	f7ff ffda 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0adb      	lsrs	r3, r3, #11
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	08004ed4 	.word	0x08004ed4

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d3c:	f7ff f916 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 8002d40:	6178      	str	r0, [r7, #20]
 8002d42:	e014      	b.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d50:	4b1f      	ldr	r3, [pc, #124]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d5c:	f7ff f906 	bl	8001f6c <HAL_PWREx_GetVoltageRange>
 8002d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a1a      	ldr	r2, [pc, #104]	; (8002dd0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d10b      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d913      	bls.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d80:	d902      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d82:	2302      	movs	r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e00d      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e00a      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b7f      	cmp	r3, #127	; 0x7f
 8002d92:	d902      	bls.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002d94:	2302      	movs	r3, #2
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e004      	b.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b70      	cmp	r3, #112	; 0x70
 8002d9e:	d101      	bne.n	8002da4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002da0:	2301      	movs	r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f023 020f 	bic.w	r2, r3, #15
 8002dac:	4909      	ldr	r1, [pc, #36]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d001      	beq.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40022000 	.word	0x40022000

08002dd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b03      	cmp	r3, #3
 8002dec:	d00b      	beq.n	8002e06 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d825      	bhi.n	8002e40 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d008      	beq.n	8002e0c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d11f      	bne.n	8002e40 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e00:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e02:	613b      	str	r3, [r7, #16]
    break;
 8002e04:	e01f      	b.n	8002e46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e06:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e08:	613b      	str	r3, [r7, #16]
    break;
 8002e0a:	e01c      	b.n	8002e46 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e0c:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d107      	bne.n	8002e28 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e18:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	0a1b      	lsrs	r3, r3, #8
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e005      	b.n	8002e34 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e28:	4b1a      	ldr	r3, [pc, #104]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e34:	4a1a      	ldr	r2, [pc, #104]	; (8002ea0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	613b      	str	r3, [r7, #16]
    break;
 8002e3e:	e002      	b.n	8002e46 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	613b      	str	r3, [r7, #16]
    break;
 8002e44:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	091b      	lsrs	r3, r3, #4
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e54:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	fb03 f202 	mul.w	r2, r3, r2
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	0e5b      	lsrs	r3, r3, #25
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	3301      	adds	r3, #1
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002e86:	683b      	ldr	r3, [r7, #0]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	371c      	adds	r7, #28
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200
 8002ea0:	08004edc 	.word	0x08004edc

08002ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eac:	2300      	movs	r3, #0
 8002eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d040      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec4:	2b80      	cmp	r3, #128	; 0x80
 8002ec6:	d02a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d825      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ecc:	2b60      	cmp	r3, #96	; 0x60
 8002ece:	d026      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ed0:	2b60      	cmp	r3, #96	; 0x60
 8002ed2:	d821      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d006      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d81d      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d010      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002ee4:	e018      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee6:	4b89      	ldr	r3, [pc, #548]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a88      	ldr	r2, [pc, #544]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ef2:	e015      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fb02 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f04:	e00c      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3320      	adds	r3, #32
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fbed 	bl	80036ec <RCCEx_PLLSAI2_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	74fb      	strb	r3, [r7, #19]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f26:	4b79      	ldr	r3, [pc, #484]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f34:	4975      	ldr	r1, [pc, #468]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f3c:	e001      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d047      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d030      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d82a      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f62:	d02a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f68:	d824      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f74:	d81e      	bhi.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002f80:	e018      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f82:	4b62      	ldr	r3, [pc, #392]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	4a61      	ldr	r2, [pc, #388]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8e:	e015      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3304      	adds	r3, #4
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fab4 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fa0:	e00c      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3320      	adds	r3, #32
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fb9f 	bl	80036ec <RCCEx_PLLSAI2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	74fb      	strb	r3, [r7, #19]
      break;
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fc2:	4b52      	ldr	r3, [pc, #328]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	494e      	ldr	r1, [pc, #312]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fd8:	e001      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 809f 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ff0:	4b46      	ldr	r3, [pc, #280]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00d      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003006:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	4a40      	ldr	r2, [pc, #256]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800300c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003010:	6593      	str	r3, [r2, #88]	; 0x58
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301e:	2301      	movs	r3, #1
 8003020:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a3a      	ldr	r2, [pc, #232]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800302e:	f7fd fd95 	bl	8000b5c <HAL_GetTick>
 8003032:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003034:	e009      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003036:	f7fd fd91 	bl	8000b5c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d902      	bls.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	74fb      	strb	r3, [r7, #19]
        break;
 8003048:	e005      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800304a:	4b31      	ldr	r3, [pc, #196]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ef      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d15b      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800305c:	4b2b      	ldr	r3, [pc, #172]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01f      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	429a      	cmp	r2, r3
 8003078:	d019      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003084:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003086:	4b21      	ldr	r3, [pc, #132]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	4a1f      	ldr	r2, [pc, #124]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003096:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309c:	4a1b      	ldr	r2, [pc, #108]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030a6:	4a19      	ldr	r2, [pc, #100]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d016      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd fd50 	bl	8000b5c <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030be:	e00b      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fd fd4c 	bl	8000b5c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d902      	bls.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	74fb      	strb	r3, [r7, #19]
            break;
 80030d6:	e006      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0ec      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fc:	4903      	ldr	r1, [pc, #12]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003104:	e008      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003106:	7cfb      	ldrb	r3, [r7, #19]
 8003108:	74bb      	strb	r3, [r7, #18]
 800310a:	e005      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7c7b      	ldrb	r3, [r7, #17]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4ba0      	ldr	r3, [pc, #640]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	4a9f      	ldr	r2, [pc, #636]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003136:	4b9a      	ldr	r3, [pc, #616]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f023 0203 	bic.w	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	4996      	ldr	r1, [pc, #600]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003158:	4b91      	ldr	r3, [pc, #580]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 020c 	bic.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	498e      	ldr	r1, [pc, #568]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317a:	4b89      	ldr	r3, [pc, #548]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	4985      	ldr	r1, [pc, #532]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319c:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031aa:	497d      	ldr	r1, [pc, #500]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031be:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	4974      	ldr	r1, [pc, #464]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ee:	496c      	ldr	r1, [pc, #432]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003210:	4963      	ldr	r1, [pc, #396]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003224:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003232:	495b      	ldr	r1, [pc, #364]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003246:	4b56      	ldr	r3, [pc, #344]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	4952      	ldr	r1, [pc, #328]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003268:	4b4d      	ldr	r3, [pc, #308]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	494a      	ldr	r1, [pc, #296]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800328a:	4b45      	ldr	r3, [pc, #276]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	4941      	ldr	r1, [pc, #260]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032ac:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b2:	f023 0203 	bic.w	r2, r3, #3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	4939      	ldr	r1, [pc, #228]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d028      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ce:	4b34      	ldr	r3, [pc, #208]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	4930      	ldr	r1, [pc, #192]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ec:	d106      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ee:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f8:	60d3      	str	r3, [r2, #12]
 80032fa:	e011      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2101      	movs	r1, #1
 800330c:	4618      	mov	r0, r3
 800330e:	f000 f8f9 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d04d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003330:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003334:	d108      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003338:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800333c:	4a18      	ldr	r2, [pc, #96]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003342:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003346:	e012      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800334a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003350:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003354:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	490e      	ldr	r1, [pc, #56]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003376:	d106      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003378:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800337e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003382:	60d3      	str	r3, [r2, #12]
 8003384:	e020      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800338a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800338e:	d109      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a02      	ldr	r2, [pc, #8]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339a:	60d3      	str	r3, [r2, #12]
 800339c:	e014      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3304      	adds	r3, #4
 80033b2:	2101      	movs	r1, #1
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 f8a5 	bl	8003504 <RCCEx_PLLSAI1_Config>
 80033ba:	4603      	mov	r3, r0
 80033bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d028      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033d4:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	4947      	ldr	r1, [pc, #284]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f2:	d106      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f4:	4b42      	ldr	r3, [pc, #264]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a41      	ldr	r2, [pc, #260]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fe:	60d3      	str	r3, [r2, #12]
 8003400:	e011      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340a:	d10c      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f876 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d01e      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003438:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003442:	492f      	ldr	r1, [pc, #188]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003450:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2102      	movs	r1, #2
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f851 	bl	8003504 <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00b      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003482:	f023 0204 	bic.w	r2, r3, #4
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348c:	491c      	ldr	r1, [pc, #112]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00b      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034a0:	4b17      	ldr	r3, [pc, #92]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034a6:	f023 0218 	bic.w	r2, r3, #24
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	4913      	ldr	r1, [pc, #76]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d017      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d4:	490a      	ldr	r1, [pc, #40]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e6:	d105      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000

08003504 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003512:	4b72      	ldr	r3, [pc, #456]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00e      	beq.n	800353c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800351e:	4b6f      	ldr	r3, [pc, #444]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d103      	bne.n	8003536 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
       ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d142      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
 800353a:	e03f      	b.n	80035bc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d018      	beq.n	8003576 <RCCEx_PLLSAI1_Config+0x72>
 8003544:	2b03      	cmp	r3, #3
 8003546:	d825      	bhi.n	8003594 <RCCEx_PLLSAI1_Config+0x90>
 8003548:	2b01      	cmp	r3, #1
 800354a:	d002      	beq.n	8003552 <RCCEx_PLLSAI1_Config+0x4e>
 800354c:	2b02      	cmp	r3, #2
 800354e:	d009      	beq.n	8003564 <RCCEx_PLLSAI1_Config+0x60>
 8003550:	e020      	b.n	8003594 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003552:	4b62      	ldr	r3, [pc, #392]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d11d      	bne.n	800359a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003562:	e01a      	b.n	800359a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003564:	4b5d      	ldr	r3, [pc, #372]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d116      	bne.n	800359e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003574:	e013      	b.n	800359e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003576:	4b59      	ldr	r3, [pc, #356]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10f      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003582:	4b56      	ldr	r3, [pc, #344]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003592:	e006      	b.n	80035a2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
      break;
 8003598:	e004      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d108      	bne.n	80035bc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80035aa:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4949      	ldr	r1, [pc, #292]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 8086 	bne.w	80036d0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035c4:	4b45      	ldr	r3, [pc, #276]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a44      	ldr	r2, [pc, #272]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fd fac4 	bl	8000b5c <HAL_GetTick>
 80035d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035d6:	e009      	b.n	80035ec <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035d8:	f7fd fac0 	bl	8000b5c <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	73fb      	strb	r3, [r7, #15]
        break;
 80035ea:	e005      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80035ec:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ef      	bne.n	80035d8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d168      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d113      	bne.n	800362c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003606:	691a      	ldr	r2, [r3, #16]
 8003608:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800360a:	4013      	ands	r3, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6892      	ldr	r2, [r2, #8]
 8003610:	0211      	lsls	r1, r2, #8
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	06d2      	lsls	r2, r2, #27
 8003618:	4311      	orrs	r1, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6852      	ldr	r2, [r2, #4]
 800361e:	3a01      	subs	r2, #1
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	430a      	orrs	r2, r1
 8003624:	492d      	ldr	r1, [pc, #180]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003626:	4313      	orrs	r3, r2
 8003628:	610b      	str	r3, [r1, #16]
 800362a:	e02d      	b.n	8003688 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003638:	4013      	ands	r3, r2
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6892      	ldr	r2, [r2, #8]
 800363e:	0211      	lsls	r1, r2, #8
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6912      	ldr	r2, [r2, #16]
 8003644:	0852      	lsrs	r2, r2, #1
 8003646:	3a01      	subs	r2, #1
 8003648:	0552      	lsls	r2, r2, #21
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6852      	ldr	r2, [r2, #4]
 8003650:	3a01      	subs	r2, #1
 8003652:	0112      	lsls	r2, r2, #4
 8003654:	430a      	orrs	r2, r1
 8003656:	4921      	ldr	r1, [pc, #132]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
 800365c:	e014      	b.n	8003688 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800365e:	4b1f      	ldr	r3, [pc, #124]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6892      	ldr	r2, [r2, #8]
 800366a:	0211      	lsls	r1, r2, #8
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6952      	ldr	r2, [r2, #20]
 8003670:	0852      	lsrs	r2, r2, #1
 8003672:	3a01      	subs	r2, #1
 8003674:	0652      	lsls	r2, r2, #25
 8003676:	4311      	orrs	r1, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6852      	ldr	r2, [r2, #4]
 800367c:	3a01      	subs	r2, #1
 800367e:	0112      	lsls	r2, r2, #4
 8003680:	430a      	orrs	r2, r1
 8003682:	4916      	ldr	r1, [pc, #88]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 8003684:	4313      	orrs	r3, r2
 8003686:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 800368e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003692:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003694:	f7fd fa62 	bl	8000b5c <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800369c:	f7fd fa5e 	bl	8000b5c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
          break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036b0:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ef      	beq.n	800369c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	4904      	ldr	r1, [pc, #16]	; (80036dc <RCCEx_PLLSAI1_Config+0x1d8>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40021000 	.word	0x40021000
 80036e0:	07ff800f 	.word	0x07ff800f
 80036e4:	ff9f800f 	.word	0xff9f800f
 80036e8:	f9ff800f 	.word	0xf9ff800f

080036ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036fa:	4b72      	ldr	r3, [pc, #456]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003706:	4b6f      	ldr	r3, [pc, #444]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	f003 0203 	and.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d103      	bne.n	800371e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
       ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d142      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	73fb      	strb	r3, [r7, #15]
 8003722:	e03f      	b.n	80037a4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d018      	beq.n	800375e <RCCEx_PLLSAI2_Config+0x72>
 800372c:	2b03      	cmp	r3, #3
 800372e:	d825      	bhi.n	800377c <RCCEx_PLLSAI2_Config+0x90>
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <RCCEx_PLLSAI2_Config+0x4e>
 8003734:	2b02      	cmp	r3, #2
 8003736:	d009      	beq.n	800374c <RCCEx_PLLSAI2_Config+0x60>
 8003738:	e020      	b.n	800377c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800373a:	4b62      	ldr	r3, [pc, #392]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d11d      	bne.n	8003782 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800374a:	e01a      	b.n	8003782 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800374c:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d116      	bne.n	8003786 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375c:	e013      	b.n	8003786 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800375e:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800376a:	4b56      	ldr	r3, [pc, #344]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800377a:	e006      	b.n	800378a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      break;
 8003780:	e004      	b.n	800378c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003782:	bf00      	nop
 8003784:	e002      	b.n	800378c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003786:	bf00      	nop
 8003788:	e000      	b.n	800378c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800378a:	bf00      	nop
    }

    if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d108      	bne.n	80037a4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003792:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f023 0203 	bic.w	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4949      	ldr	r1, [pc, #292]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f040 8086 	bne.w	80038b8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037ac:	4b45      	ldr	r3, [pc, #276]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a44      	ldr	r2, [pc, #272]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b8:	f7fd f9d0 	bl	8000b5c <HAL_GetTick>
 80037bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037be:	e009      	b.n	80037d4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037c0:	f7fd f9cc 	bl	8000b5c <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d902      	bls.n	80037d4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	73fb      	strb	r3, [r7, #15]
        break;
 80037d2:	e005      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037d4:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1ef      	bne.n	80037c0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d168      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d113      	bne.n	8003814 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037ec:	4b35      	ldr	r3, [pc, #212]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ee:	695a      	ldr	r2, [r3, #20]
 80037f0:	4b35      	ldr	r3, [pc, #212]	; (80038c8 <RCCEx_PLLSAI2_Config+0x1dc>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6892      	ldr	r2, [r2, #8]
 80037f8:	0211      	lsls	r1, r2, #8
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	06d2      	lsls	r2, r2, #27
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6852      	ldr	r2, [r2, #4]
 8003806:	3a01      	subs	r2, #1
 8003808:	0112      	lsls	r2, r2, #4
 800380a:	430a      	orrs	r2, r1
 800380c:	492d      	ldr	r1, [pc, #180]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	614b      	str	r3, [r1, #20]
 8003812:	e02d      	b.n	8003870 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d115      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800381a:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800381c:	695a      	ldr	r2, [r3, #20]
 800381e:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <RCCEx_PLLSAI2_Config+0x1e0>)
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	0211      	lsls	r1, r2, #8
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6912      	ldr	r2, [r2, #16]
 800382c:	0852      	lsrs	r2, r2, #1
 800382e:	3a01      	subs	r2, #1
 8003830:	0552      	lsls	r2, r2, #21
 8003832:	4311      	orrs	r1, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6852      	ldr	r2, [r2, #4]
 8003838:	3a01      	subs	r2, #1
 800383a:	0112      	lsls	r2, r2, #4
 800383c:	430a      	orrs	r2, r1
 800383e:	4921      	ldr	r1, [pc, #132]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003840:	4313      	orrs	r3, r2
 8003842:	614b      	str	r3, [r1, #20]
 8003844:	e014      	b.n	8003870 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003846:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6952      	ldr	r2, [r2, #20]
 8003858:	0852      	lsrs	r2, r2, #1
 800385a:	3a01      	subs	r2, #1
 800385c:	0652      	lsls	r2, r2, #25
 800385e:	4311      	orrs	r1, r2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6852      	ldr	r2, [r2, #4]
 8003864:	3a01      	subs	r2, #1
 8003866:	0112      	lsls	r2, r2, #4
 8003868:	430a      	orrs	r2, r1
 800386a:	4916      	ldr	r1, [pc, #88]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a13      	ldr	r2, [pc, #76]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fd f96e 	bl	8000b5c <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003882:	e009      	b.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003884:	f7fd f96a 	bl	8000b5c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d902      	bls.n	8003898 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	73fb      	strb	r3, [r7, #15]
          break;
 8003896:	e005      	b.n	80038a4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003898:	4b0a      	ldr	r3, [pc, #40]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d106      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038aa:	4b06      	ldr	r3, [pc, #24]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	4904      	ldr	r1, [pc, #16]	; (80038c4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	07ff800f 	.word	0x07ff800f
 80038cc:	ff9f800f 	.word	0xff9f800f
 80038d0:	f9ff800f 	.word	0xf9ff800f

080038d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e042      	b.n	800396c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f001 f9d3 	bl	8004ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2224      	movs	r2, #36	; 0x24
 8003902:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f8c4 	bl	8003aa4 <UART_SetConfig>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e022      	b.n	800396c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fbb4 	bl	800409c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003942:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003952:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fc3b 	bl	80041e0 <UART_CheckIdleState>
 800396a:	4603      	mov	r3, r0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af02      	add	r7, sp, #8
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	603b      	str	r3, [r7, #0]
 8003980:	4613      	mov	r3, r2
 8003982:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800398a:	2b20      	cmp	r3, #32
 800398c:	f040 8084 	bne.w	8003a98 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_UART_Transmit+0x28>
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e07c      	b.n	8003a9a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Transmit+0x3a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e075      	b.n	8003a9a <HAL_UART_Transmit+0x126>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2221      	movs	r2, #33	; 0x21
 80039c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039c6:	f7fd f8c9 	bl	8000b5c <HAL_GetTick>
 80039ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d108      	bne.n	80039f8 <HAL_UART_Transmit+0x84>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d104      	bne.n	80039f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e003      	b.n	8003a00 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a08:	e02d      	b.n	8003a66 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 fc2e 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e03a      	b.n	8003a9a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a36:	b292      	uxth	r2, r2
 8003a38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	e008      	b.n	8003a54 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	781a      	ldrb	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3301      	adds	r3, #1
 8003a52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1cb      	bne.n	8003a0a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2140      	movs	r1, #64	; 0x40
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fbfa 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e006      	b.n	8003a9a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b08c      	sub	sp, #48	; 0x30
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4baa      	ldr	r3, [pc, #680]	; (8003d7c <UART_SetConfig+0x2d8>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a9f      	ldr	r2, [pc, #636]	; (8003d80 <UART_SetConfig+0x2dc>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f023 010f 	bic.w	r1, r3, #15
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a90      	ldr	r2, [pc, #576]	; (8003d84 <UART_SetConfig+0x2e0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d125      	bne.n	8003b94 <UART_SetConfig+0xf0>
 8003b48:	4b8f      	ldr	r3, [pc, #572]	; (8003d88 <UART_SetConfig+0x2e4>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d81a      	bhi.n	8003b8c <UART_SetConfig+0xe8>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <UART_SetConfig+0xb8>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b7d 	.word	0x08003b7d
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b85 	.word	0x08003b85
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b72:	e116      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b7a:	e112      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b82:	e10e      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003b84:	2308      	movs	r3, #8
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	e10a      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b92:	e106      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7c      	ldr	r2, [pc, #496]	; (8003d8c <UART_SetConfig+0x2e8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d138      	bne.n	8003c10 <UART_SetConfig+0x16c>
 8003b9e:	4b7a      	ldr	r3, [pc, #488]	; (8003d88 <UART_SetConfig+0x2e4>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d82d      	bhi.n	8003c08 <UART_SetConfig+0x164>
 8003bac:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x110>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003c09 	.word	0x08003c09
 8003bbc:	08003c09 	.word	0x08003c09
 8003bc0:	08003c09 	.word	0x08003c09
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c09 	.word	0x08003c09
 8003bcc:	08003c09 	.word	0x08003c09
 8003bd0:	08003c09 	.word	0x08003c09
 8003bd4:	08003bf1 	.word	0x08003bf1
 8003bd8:	08003c09 	.word	0x08003c09
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c01 	.word	0x08003c01
 8003be8:	2300      	movs	r3, #0
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bee:	e0d8      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	e0d4      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e0d0      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c00:	2308      	movs	r3, #8
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e0cc      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e0c8      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a5e      	ldr	r2, [pc, #376]	; (8003d90 <UART_SetConfig+0x2ec>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d125      	bne.n	8003c66 <UART_SetConfig+0x1c2>
 8003c1a:	4b5b      	ldr	r3, [pc, #364]	; (8003d88 <UART_SetConfig+0x2e4>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d016      	beq.n	8003c56 <UART_SetConfig+0x1b2>
 8003c28:	2b30      	cmp	r3, #48	; 0x30
 8003c2a:	d818      	bhi.n	8003c5e <UART_SetConfig+0x1ba>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d00a      	beq.n	8003c46 <UART_SetConfig+0x1a2>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d814      	bhi.n	8003c5e <UART_SetConfig+0x1ba>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <UART_SetConfig+0x19a>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d008      	beq.n	8003c4e <UART_SetConfig+0x1aa>
 8003c3c:	e00f      	b.n	8003c5e <UART_SetConfig+0x1ba>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c44:	e0ad      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c46:	2302      	movs	r3, #2
 8003c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4c:	e0a9      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c54:	e0a5      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c56:	2308      	movs	r3, #8
 8003c58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5c:	e0a1      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c5e:	2310      	movs	r3, #16
 8003c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c64:	e09d      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a4a      	ldr	r2, [pc, #296]	; (8003d94 <UART_SetConfig+0x2f0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d125      	bne.n	8003cbc <UART_SetConfig+0x218>
 8003c70:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <UART_SetConfig+0x2e4>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c7c:	d016      	beq.n	8003cac <UART_SetConfig+0x208>
 8003c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c80:	d818      	bhi.n	8003cb4 <UART_SetConfig+0x210>
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d00a      	beq.n	8003c9c <UART_SetConfig+0x1f8>
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d814      	bhi.n	8003cb4 <UART_SetConfig+0x210>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <UART_SetConfig+0x1f0>
 8003c8e:	2b40      	cmp	r3, #64	; 0x40
 8003c90:	d008      	beq.n	8003ca4 <UART_SetConfig+0x200>
 8003c92:	e00f      	b.n	8003cb4 <UART_SetConfig+0x210>
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	e082      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e07e      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e07a      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003cac:	2308      	movs	r3, #8
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e076      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cba:	e072      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a35      	ldr	r2, [pc, #212]	; (8003d98 <UART_SetConfig+0x2f4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d12a      	bne.n	8003d1c <UART_SetConfig+0x278>
 8003cc6:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <UART_SetConfig+0x2e4>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd4:	d01a      	beq.n	8003d0c <UART_SetConfig+0x268>
 8003cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cda:	d81b      	bhi.n	8003d14 <UART_SetConfig+0x270>
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce0:	d00c      	beq.n	8003cfc <UART_SetConfig+0x258>
 8003ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce6:	d815      	bhi.n	8003d14 <UART_SetConfig+0x270>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <UART_SetConfig+0x250>
 8003cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cf0:	d008      	beq.n	8003d04 <UART_SetConfig+0x260>
 8003cf2:	e00f      	b.n	8003d14 <UART_SetConfig+0x270>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	e052      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e04e      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d04:	2304      	movs	r3, #4
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e04a      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e046      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d14:	2310      	movs	r3, #16
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e042      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <UART_SetConfig+0x2dc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d13a      	bne.n	8003d9c <UART_SetConfig+0x2f8>
 8003d26:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <UART_SetConfig+0x2e4>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d34:	d01a      	beq.n	8003d6c <UART_SetConfig+0x2c8>
 8003d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d3a:	d81b      	bhi.n	8003d74 <UART_SetConfig+0x2d0>
 8003d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d40:	d00c      	beq.n	8003d5c <UART_SetConfig+0x2b8>
 8003d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d46:	d815      	bhi.n	8003d74 <UART_SetConfig+0x2d0>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <UART_SetConfig+0x2b0>
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d50:	d008      	beq.n	8003d64 <UART_SetConfig+0x2c0>
 8003d52:	e00f      	b.n	8003d74 <UART_SetConfig+0x2d0>
 8003d54:	2300      	movs	r3, #0
 8003d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5a:	e022      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d62:	e01e      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d64:	2304      	movs	r3, #4
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6a:	e01a      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e016      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d74:	2310      	movs	r3, #16
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7a:	e012      	b.n	8003da2 <UART_SetConfig+0x2fe>
 8003d7c:	cfff69f3 	.word	0xcfff69f3
 8003d80:	40008000 	.word	0x40008000
 8003d84:	40013800 	.word	0x40013800
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40004400 	.word	0x40004400
 8003d90:	40004800 	.word	0x40004800
 8003d94:	40004c00 	.word	0x40004c00
 8003d98:	40005000 	.word	0x40005000
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4aae      	ldr	r2, [pc, #696]	; (8004060 <UART_SetConfig+0x5bc>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	f040 8097 	bne.w	8003edc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d823      	bhi.n	8003dfe <UART_SetConfig+0x35a>
 8003db6:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0x318>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003dff 	.word	0x08003dff
 8003dc4:	08003de9 	.word	0x08003de9
 8003dc8:	08003dff 	.word	0x08003dff
 8003dcc:	08003def 	.word	0x08003def
 8003dd0:	08003dff 	.word	0x08003dff
 8003dd4:	08003dff 	.word	0x08003dff
 8003dd8:	08003dff 	.word	0x08003dff
 8003ddc:	08003df7 	.word	0x08003df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7fe ff74 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003de4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003de6:	e010      	b.n	8003e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de8:	4b9e      	ldr	r3, [pc, #632]	; (8004064 <UART_SetConfig+0x5c0>)
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dec:	e00d      	b.n	8003e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dee:	f7fe fed5 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003df2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003df4:	e009      	b.n	8003e0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dfc:	e005      	b.n	8003e0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8130 	beq.w	8004072 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	4a94      	ldr	r2, [pc, #592]	; (8004068 <UART_SetConfig+0x5c4>)
 8003e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d305      	bcc.n	8003e42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d903      	bls.n	8003e4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e48:	e113      	b.n	8004072 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	60fa      	str	r2, [r7, #12]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	4a84      	ldr	r2, [pc, #528]	; (8004068 <UART_SetConfig+0x5c4>)
 8003e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2200      	movs	r2, #0
 8003e60:	603b      	str	r3, [r7, #0]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e6c:	f7fc f9ce 	bl	800020c <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	020b      	lsls	r3, r1, #8
 8003e82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e86:	0202      	lsls	r2, r0, #8
 8003e88:	6979      	ldr	r1, [r7, #20]
 8003e8a:	6849      	ldr	r1, [r1, #4]
 8003e8c:	0849      	lsrs	r1, r1, #1
 8003e8e:	2000      	movs	r0, #0
 8003e90:	460c      	mov	r4, r1
 8003e92:	4605      	mov	r5, r0
 8003e94:	eb12 0804 	adds.w	r8, r2, r4
 8003e98:	eb43 0905 	adc.w	r9, r3, r5
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	469a      	mov	sl, r3
 8003ea4:	4693      	mov	fp, r2
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	465b      	mov	r3, fp
 8003eaa:	4640      	mov	r0, r8
 8003eac:	4649      	mov	r1, r9
 8003eae:	f7fc f9ad 	bl	800020c <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec0:	d308      	bcc.n	8003ed4 <UART_SetConfig+0x430>
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec8:	d204      	bcs.n	8003ed4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6a3a      	ldr	r2, [r7, #32]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	e0ce      	b.n	8004072 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eda:	e0ca      	b.n	8004072 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee4:	d166      	bne.n	8003fb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003ee6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d827      	bhi.n	8003f3e <UART_SetConfig+0x49a>
 8003eee:	a201      	add	r2, pc, #4	; (adr r2, 8003ef4 <UART_SetConfig+0x450>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe fed8 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe feea 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b4e      	ldr	r3, [pc, #312]	; (8004064 <UART_SetConfig+0x5c0>)
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f2c:	e00d      	b.n	8003f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe fe35 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f34:	e009      	b.n	8003f4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f3c:	e005      	b.n	8003f4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8090 	beq.w	8004072 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	4a44      	ldr	r2, [pc, #272]	; (8004068 <UART_SetConfig+0x5c4>)
 8003f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f64:	005a      	lsls	r2, r3, #1
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	441a      	add	r2, r3
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	d916      	bls.n	8003fac <UART_SetConfig+0x508>
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f84:	d212      	bcs.n	8003fac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	f023 030f 	bic.w	r3, r3, #15
 8003f8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f90:	6a3b      	ldr	r3, [r7, #32]
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	8bfb      	ldrh	r3, [r7, #30]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	8bfa      	ldrh	r2, [r7, #30]
 8003fa8:	60da      	str	r2, [r3, #12]
 8003faa:	e062      	b.n	8004072 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fb2:	e05e      	b.n	8004072 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d828      	bhi.n	800400e <UART_SetConfig+0x56a>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0x520>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	0800400f 	.word	0x0800400f
 8003fd4:	08003fff 	.word	0x08003fff
 8003fd8:	0800400f 	.word	0x0800400f
 8003fdc:	0800400f 	.word	0x0800400f
 8003fe0:	0800400f 	.word	0x0800400f
 8003fe4:	08004007 	.word	0x08004007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fe8:	f7fe fe70 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003fec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fee:	e014      	b.n	800401a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ff0:	f7fe fe82 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff6:	e010      	b.n	800401a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <UART_SetConfig+0x5c0>)
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ffc:	e00d      	b.n	800401a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffe:	f7fe fdcd 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004004:	e009      	b.n	800401a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800400c:	e005      	b.n	800401a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004018:	bf00      	nop
    }

    if (pclk != 0U)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d028      	beq.n	8004072 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	4a10      	ldr	r2, [pc, #64]	; (8004068 <UART_SetConfig+0x5c4>)
 8004026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800402a:	461a      	mov	r2, r3
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	441a      	add	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b0f      	cmp	r3, #15
 8004048:	d910      	bls.n	800406c <UART_SetConfig+0x5c8>
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d20c      	bcs.n	800406c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	b29a      	uxth	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
 800405c:	e009      	b.n	8004072 <UART_SetConfig+0x5ce>
 800405e:	bf00      	nop
 8004060:	40008000 	.word	0x40008000
 8004064:	00f42400 	.word	0x00f42400
 8004068:	08004e9c 	.word	0x08004e9c
      }
      else
      {
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2201      	movs	r2, #1
 8004076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2201      	movs	r2, #1
 800407e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2200      	movs	r2, #0
 800408c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800408e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004092:	4618      	mov	r0, r3
 8004094:	3730      	adds	r7, #48	; 0x30
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800409c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01a      	beq.n	80041b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d10a      	bne.n	80041b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	605a      	str	r2, [r3, #4]
  }
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f0:	f7fc fcb4 	bl	8000b5c <HAL_GetTick>
 80041f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0308 	and.w	r3, r3, #8
 8004200:	2b08      	cmp	r3, #8
 8004202:	d10e      	bne.n	8004222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f82f 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e025      	b.n	800426e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b04      	cmp	r3, #4
 800422e:	d10e      	bne.n	800424e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f819 	bl	8004276 <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e00f      	b.n	800426e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b09c      	sub	sp, #112	; 0x70
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	603b      	str	r3, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004286:	e0a9      	b.n	80043dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428e:	f000 80a5 	beq.w	80043dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fc fc63 	bl	8000b5c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80042a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d140      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042bc:	667b      	str	r3, [r7, #100]	; 0x64
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	461a      	mov	r2, r3
 80042c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e6      	bne.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3308      	adds	r3, #8
 80042e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	663b      	str	r3, [r7, #96]	; 0x60
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3308      	adds	r3, #8
 80042f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004300:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e069      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d051      	beq.n	80043dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004346:	d149      	bne.n	80043dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004350:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043a4:	623a      	str	r2, [r7, #32]
 80043a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e010      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69da      	ldr	r2, [r3, #28]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	f43f af46 	beq.w	8004288 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3770      	adds	r7, #112	; 0x70
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004406:	b480      	push	{r7}
 8004408:	b085      	sub	sp, #20
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UARTEx_DisableFifoMode+0x16>
 8004418:	2302      	movs	r3, #2
 800441a:	e027      	b.n	800446c <HAL_UARTEx_DisableFifoMode+0x66>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2224      	movs	r2, #36	; 0x24
 8004428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0201 	bic.w	r2, r2, #1
 8004442:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800444a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800448c:	2302      	movs	r3, #2
 800448e:	e02d      	b.n	80044ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f84f 	bl	8004570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004508:	2302      	movs	r3, #2
 800450a:	e02d      	b.n	8004568 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0201 	bic.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f811 	bl	8004570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800457c:	2b00      	cmp	r3, #0
 800457e:	d108      	bne.n	8004592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004590:	e031      	b.n	80045f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004592:	2308      	movs	r3, #8
 8004594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004596:	2308      	movs	r3, #8
 8004598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	0e5b      	lsrs	r3, r3, #25
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	0f5b      	lsrs	r3, r3, #29
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ba:	7bbb      	ldrb	r3, [r7, #14]
 80045bc:	7b3a      	ldrb	r2, [r7, #12]
 80045be:	4911      	ldr	r1, [pc, #68]	; (8004604 <UARTEx_SetNbDataToProcess+0x94>)
 80045c0:	5c8a      	ldrb	r2, [r1, r2]
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045c6:	7b3a      	ldrb	r2, [r7, #12]
 80045c8:	490f      	ldr	r1, [pc, #60]	; (8004608 <UARTEx_SetNbDataToProcess+0x98>)
 80045ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
 80045da:	7b7a      	ldrb	r2, [r7, #13]
 80045dc:	4909      	ldr	r1, [pc, #36]	; (8004604 <UARTEx_SetNbDataToProcess+0x94>)
 80045de:	5c8a      	ldrb	r2, [r1, r2]
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045e4:	7b7a      	ldrb	r2, [r7, #13]
 80045e6:	4908      	ldr	r1, [pc, #32]	; (8004608 <UARTEx_SetNbDataToProcess+0x98>)
 80045e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	08004eb4 	.word	0x08004eb4
 8004608:	08004ebc 	.word	0x08004ebc

0800460c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004612:	f7fc fa3b 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004616:	f000 f827 	bl	8004668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800461a:	f000 f983 	bl	8004924 <MX_GPIO_Init>
  MX_I2C1_Init();
 800461e:	f000 f875 	bl	800470c <MX_I2C1_Init>
  MX_I2C2_Init();
 8004622:	f000 f8b3 	bl	800478c <MX_I2C2_Init>
  MX_I2C3_Init();
 8004626:	f000 f8f1 	bl	800480c <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800462a:	f000 f92f 	bl	800488c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // I2C initializations
  BSP_ACCELERO_Init();
 800462e:	f7fc f8bf 	bl	80007b0 <BSP_ACCELERO_Init>

  // UART initialization
//  HAL_StatusTypeDef UART_status;
  HAL_UART_Init(&huart1);
 8004632:	480b      	ldr	r0, [pc, #44]	; (8004660 <main+0x54>)
 8004634:	f7ff f94e 	bl	80038d4 <HAL_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  BSP_ACCELERO_AccGetXYZ(accelerometer_xyz);
 8004638:	463b      	mov	r3, r7
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc f8f6 	bl	800082c <BSP_ACCELERO_AccGetXYZ>

	  HAL_UART_Transmit(&huart1, (uint8_t*) str, (uint16_t) strlen(str), 10000); // inputs HandleTypeDef, data, data size, timeout
 8004640:	4808      	ldr	r0, [pc, #32]	; (8004664 <main+0x58>)
 8004642:	f7fb fddb 	bl	80001fc <strlen>
 8004646:	4603      	mov	r3, r0
 8004648:	b29a      	uxth	r2, r3
 800464a:	f242 7310 	movw	r3, #10000	; 0x2710
 800464e:	4905      	ldr	r1, [pc, #20]	; (8004664 <main+0x58>)
 8004650:	4803      	ldr	r0, [pc, #12]	; (8004660 <main+0x54>)
 8004652:	f7ff f98f 	bl	8003974 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8004656:	2064      	movs	r0, #100	; 0x64
 8004658:	f7fc fa8c 	bl	8000b74 <HAL_Delay>
	  BSP_ACCELERO_AccGetXYZ(accelerometer_xyz);
 800465c:	e7ec      	b.n	8004638 <main+0x2c>
 800465e:	bf00      	nop
 8004660:	200001b4 	.word	0x200001b4
 8004664:	20000244 	.word	0x20000244

08004668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b096      	sub	sp, #88	; 0x58
 800466c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800466e:	f107 0314 	add.w	r3, r7, #20
 8004672:	2244      	movs	r2, #68	; 0x44
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fbfc 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800467c:	463b      	mov	r3, r7
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800468a:	2000      	movs	r0, #0
 800468c:	f7fd fc8e 	bl	8001fac <HAL_PWREx_ControlVoltageScaling>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004696:	f000 f9a1 	bl	80049dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800469a:	2310      	movs	r3, #16
 800469c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800469e:	2301      	movs	r3, #1
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80046a6:	2360      	movs	r3, #96	; 0x60
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046aa:	2302      	movs	r3, #2
 80046ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80046ae:	2301      	movs	r3, #1
 80046b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80046b6:	233c      	movs	r3, #60	; 0x3c
 80046b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046ba:	2302      	movs	r3, #2
 80046bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80046be:	2302      	movs	r3, #2
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046c2:	2302      	movs	r3, #2
 80046c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046c6:	f107 0314 	add.w	r3, r7, #20
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fd fd12 	bl	80020f4 <HAL_RCC_OscConfig>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80046d6:	f000 f981 	bl	80049dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046da:	230f      	movs	r3, #15
 80046dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046de:	2303      	movs	r3, #3
 80046e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80046ee:	463b      	mov	r3, r7
 80046f0:	2105      	movs	r1, #5
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe f918 	bl	8002928 <HAL_RCC_ClockConfig>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80046fe:	f000 f96d 	bl	80049dc <Error_Handler>
  }
}
 8004702:	bf00      	nop
 8004704:	3758      	adds	r7, #88	; 0x58
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <MX_I2C1_Init+0x74>)
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <MX_I2C1_Init+0x78>)
 8004714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8004716:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <MX_I2C1_Init+0x74>)
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <MX_I2C1_Init+0x7c>)
 800471a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <MX_I2C1_Init+0x74>)
 800471e:	2200      	movs	r2, #0
 8004720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004722:	4b17      	ldr	r3, [pc, #92]	; (8004780 <MX_I2C1_Init+0x74>)
 8004724:	2201      	movs	r2, #1
 8004726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <MX_I2C1_Init+0x74>)
 800472a:	2200      	movs	r2, #0
 800472c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <MX_I2C1_Init+0x74>)
 8004730:	2200      	movs	r2, #0
 8004732:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004734:	4b12      	ldr	r3, [pc, #72]	; (8004780 <MX_I2C1_Init+0x74>)
 8004736:	2200      	movs	r2, #0
 8004738:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800473a:	4b11      	ldr	r3, [pc, #68]	; (8004780 <MX_I2C1_Init+0x74>)
 800473c:	2200      	movs	r2, #0
 800473e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <MX_I2C1_Init+0x74>)
 8004742:	2200      	movs	r2, #0
 8004744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004746:	480e      	ldr	r0, [pc, #56]	; (8004780 <MX_I2C1_Init+0x74>)
 8004748:	f7fc fde6 	bl	8001318 <HAL_I2C_Init>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004752:	f000 f943 	bl	80049dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004756:	2100      	movs	r1, #0
 8004758:	4809      	ldr	r0, [pc, #36]	; (8004780 <MX_I2C1_Init+0x74>)
 800475a:	f7fd fb6f 	bl	8001e3c <HAL_I2CEx_ConfigAnalogFilter>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004764:	f000 f93a 	bl	80049dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004768:	2100      	movs	r1, #0
 800476a:	4805      	ldr	r0, [pc, #20]	; (8004780 <MX_I2C1_Init+0x74>)
 800476c:	f7fd fbb1 	bl	8001ed2 <HAL_I2CEx_ConfigDigitalFilter>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004776:	f000 f931 	bl	80049dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	200000b8 	.word	0x200000b8
 8004784:	40005400 	.word	0x40005400
 8004788:	307075b1 	.word	0x307075b1

0800478c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <MX_I2C2_Init+0x74>)
 8004792:	4a1c      	ldr	r2, [pc, #112]	; (8004804 <MX_I2C2_Init+0x78>)
 8004794:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8004796:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <MX_I2C2_Init+0x74>)
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <MX_I2C2_Init+0x7c>)
 800479a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800479c:	4b18      	ldr	r3, [pc, #96]	; (8004800 <MX_I2C2_Init+0x74>)
 800479e:	2200      	movs	r2, #0
 80047a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047a2:	4b17      	ldr	r3, [pc, #92]	; (8004800 <MX_I2C2_Init+0x74>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <MX_I2C2_Init+0x74>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <MX_I2C2_Init+0x74>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80047b4:	4b12      	ldr	r3, [pc, #72]	; (8004800 <MX_I2C2_Init+0x74>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <MX_I2C2_Init+0x74>)
 80047bc:	2200      	movs	r2, #0
 80047be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <MX_I2C2_Init+0x74>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80047c6:	480e      	ldr	r0, [pc, #56]	; (8004800 <MX_I2C2_Init+0x74>)
 80047c8:	f7fc fda6 	bl	8001318 <HAL_I2C_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80047d2:	f000 f903 	bl	80049dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80047d6:	2100      	movs	r1, #0
 80047d8:	4809      	ldr	r0, [pc, #36]	; (8004800 <MX_I2C2_Init+0x74>)
 80047da:	f7fd fb2f 	bl	8001e3c <HAL_I2CEx_ConfigAnalogFilter>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80047e4:	f000 f8fa 	bl	80049dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80047e8:	2100      	movs	r1, #0
 80047ea:	4805      	ldr	r0, [pc, #20]	; (8004800 <MX_I2C2_Init+0x74>)
 80047ec:	f7fd fb71 	bl	8001ed2 <HAL_I2CEx_ConfigDigitalFilter>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80047f6:	f000 f8f1 	bl	80049dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000010c 	.word	0x2000010c
 8004804:	40005800 	.word	0x40005800
 8004808:	307075b1 	.word	0x307075b1

0800480c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <MX_I2C3_Init+0x74>)
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <MX_I2C3_Init+0x78>)
 8004814:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 8004816:	4b1a      	ldr	r3, [pc, #104]	; (8004880 <MX_I2C3_Init+0x74>)
 8004818:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <MX_I2C3_Init+0x7c>)
 800481a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <MX_I2C3_Init+0x74>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <MX_I2C3_Init+0x74>)
 8004824:	2201      	movs	r2, #1
 8004826:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004828:	4b15      	ldr	r3, [pc, #84]	; (8004880 <MX_I2C3_Init+0x74>)
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800482e:	4b14      	ldr	r3, [pc, #80]	; (8004880 <MX_I2C3_Init+0x74>)
 8004830:	2200      	movs	r2, #0
 8004832:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <MX_I2C3_Init+0x74>)
 8004836:	2200      	movs	r2, #0
 8004838:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <MX_I2C3_Init+0x74>)
 800483c:	2200      	movs	r2, #0
 800483e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <MX_I2C3_Init+0x74>)
 8004842:	2200      	movs	r2, #0
 8004844:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004846:	480e      	ldr	r0, [pc, #56]	; (8004880 <MX_I2C3_Init+0x74>)
 8004848:	f7fc fd66 	bl	8001318 <HAL_I2C_Init>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004852:	f000 f8c3 	bl	80049dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004856:	2100      	movs	r1, #0
 8004858:	4809      	ldr	r0, [pc, #36]	; (8004880 <MX_I2C3_Init+0x74>)
 800485a:	f7fd faef 	bl	8001e3c <HAL_I2CEx_ConfigAnalogFilter>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004864:	f000 f8ba 	bl	80049dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004868:	2100      	movs	r1, #0
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <MX_I2C3_Init+0x74>)
 800486c:	f7fd fb31 	bl	8001ed2 <HAL_I2CEx_ConfigDigitalFilter>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8004876:	f000 f8b1 	bl	80049dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000160 	.word	0x20000160
 8004884:	40005c00 	.word	0x40005c00
 8004888:	307075b1 	.word	0x307075b1

0800488c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004890:	4b22      	ldr	r3, [pc, #136]	; (800491c <MX_USART1_UART_Init+0x90>)
 8004892:	4a23      	ldr	r2, [pc, #140]	; (8004920 <MX_USART1_UART_Init+0x94>)
 8004894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004896:	4b21      	ldr	r3, [pc, #132]	; (800491c <MX_USART1_UART_Init+0x90>)
 8004898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800489c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800489e:	4b1f      	ldr	r3, [pc, #124]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048aa:	4b1c      	ldr	r3, [pc, #112]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048b2:	220c      	movs	r2, #12
 80048b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048b6:	4b19      	ldr	r3, [pc, #100]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80048bc:	4b17      	ldr	r3, [pc, #92]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048be:	2200      	movs	r2, #0
 80048c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048c2:	4b16      	ldr	r3, [pc, #88]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048ce:	4b13      	ldr	r3, [pc, #76]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048d4:	4811      	ldr	r0, [pc, #68]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048d6:	f7fe fffd 	bl	80038d4 <HAL_UART_Init>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80048e0:	f000 f87c 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048e4:	2100      	movs	r1, #0
 80048e6:	480d      	ldr	r0, [pc, #52]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048e8:	f7ff fdc6 	bl	8004478 <HAL_UARTEx_SetTxFifoThreshold>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80048f2:	f000 f873 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048f6:	2100      	movs	r1, #0
 80048f8:	4808      	ldr	r0, [pc, #32]	; (800491c <MX_USART1_UART_Init+0x90>)
 80048fa:	f7ff fdfb 	bl	80044f4 <HAL_UARTEx_SetRxFifoThreshold>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004904:	f000 f86a 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004908:	4804      	ldr	r0, [pc, #16]	; (800491c <MX_USART1_UART_Init+0x90>)
 800490a:	f7ff fd7c 	bl	8004406 <HAL_UARTEx_DisableFifoMode>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004914:	f000 f862 	bl	80049dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004918:	bf00      	nop
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200001b4 	.word	0x200001b4
 8004920:	40013800 	.word	0x40013800

08004924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800492a:	f107 030c 	add.w	r3, r7, #12
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	609a      	str	r2, [r3, #8]
 8004936:	60da      	str	r2, [r3, #12]
 8004938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800493a:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <MX_GPIO_Init+0xac>)
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	4a24      	ldr	r2, [pc, #144]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	f003 0304 	and.w	r3, r3, #4
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004952:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004956:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800495e:	4b1c      	ldr	r3, [pc, #112]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	607b      	str	r3, [r7, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800496a:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <MX_GPIO_Init+0xac>)
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004970:	f043 0301 	orr.w	r3, r3, #1
 8004974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004976:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <MX_GPIO_Init+0xac>)
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8004982:	2200      	movs	r2, #0
 8004984:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004988:	4812      	ldr	r0, [pc, #72]	; (80049d4 <MX_GPIO_Init+0xb0>)
 800498a:	f7fc fcad 	bl	80012e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 800498e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004994:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004998:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 800499e:	f107 030c 	add.w	r3, r7, #12
 80049a2:	4619      	mov	r1, r3
 80049a4:	480c      	ldr	r0, [pc, #48]	; (80049d8 <MX_GPIO_Init+0xb4>)
 80049a6:	f7fc fa1b 	bl	8000de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 80049aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049b0:	2301      	movs	r3, #1
 80049b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 80049bc:	f107 030c 	add.w	r3, r7, #12
 80049c0:	4619      	mov	r1, r3
 80049c2:	4804      	ldr	r0, [pc, #16]	; (80049d4 <MX_GPIO_Init+0xb0>)
 80049c4:	f7fc fa0c 	bl	8000de0 <HAL_GPIO_Init>

}
 80049c8:	bf00      	nop
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40021000 	.word	0x40021000
 80049d4:	48000400 	.word	0x48000400
 80049d8:	48000800 	.word	0x48000800

080049dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049e0:	b672      	cpsid	i
}
 80049e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <Error_Handler+0x8>
	...

080049e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_MspInit+0x44>)
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_MspInit+0x44>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6613      	str	r3, [r2, #96]	; 0x60
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_MspInit+0x44>)
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_MspInit+0x44>)
 8004a08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0a:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <HAL_MspInit+0x44>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	6593      	str	r3, [r2, #88]	; 0x58
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_MspInit+0x44>)
 8004a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	40021000 	.word	0x40021000

08004a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b0b2      	sub	sp, #200	; 0xc8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a48:	f107 0320 	add.w	r3, r7, #32
 8004a4c:	2294      	movs	r2, #148	; 0x94
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fa0f 	bl	8004e74 <memset>
  if(hi2c->Instance==I2C1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a63      	ldr	r2, [pc, #396]	; (8004be8 <HAL_I2C_MspInit+0x1b8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d13b      	bne.n	8004ad8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a60:	2340      	movs	r3, #64	; 0x40
 8004a62:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a64:	2300      	movs	r3, #0
 8004a66:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a68:	f107 0320 	add.w	r3, r7, #32
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fe fa19 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a78:	f7ff ffb0 	bl	80049dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a7c:	4b5b      	ldr	r3, [pc, #364]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a80:	4a5a      	ldr	r2, [pc, #360]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004a82:	f043 0302 	orr.w	r3, r3, #2
 8004a86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a88:	4b58      	ldr	r3, [pc, #352]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	61fb      	str	r3, [r7, #28]
 8004a92:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a94:	23c0      	movs	r3, #192	; 0xc0
 8004a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a9a:	2312      	movs	r3, #18
 8004a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004aac:	2304      	movs	r3, #4
 8004aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ab2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	484d      	ldr	r0, [pc, #308]	; (8004bf0 <HAL_I2C_MspInit+0x1c0>)
 8004aba:	f7fc f991 	bl	8000de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004abe:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac2:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8004aca:	4b48      	ldr	r3, [pc, #288]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad2:	61bb      	str	r3, [r7, #24]
 8004ad4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004ad6:	e082      	b.n	8004bde <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a45      	ldr	r2, [pc, #276]	; (8004bf4 <HAL_I2C_MspInit+0x1c4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d13c      	bne.n	8004b5c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aea:	f107 0320 	add.w	r3, r7, #32
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe f9d8 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8004afa:	f7ff ff6f 	bl	80049dc <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004afe:	4b3b      	ldr	r3, [pc, #236]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	4a3a      	ldr	r2, [pc, #232]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b04:	f043 0302 	orr.w	r3, r3, #2
 8004b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b0a:	4b38      	ldr	r3, [pc, #224]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b1e:	2312      	movs	r3, #18
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b30:	2304      	movs	r3, #4
 8004b32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b36:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	482c      	ldr	r0, [pc, #176]	; (8004bf0 <HAL_I2C_MspInit+0x1c0>)
 8004b3e:	f7fc f94f 	bl	8000de0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b42:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b4e:	4b27      	ldr	r3, [pc, #156]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b56:	613b      	str	r3, [r7, #16]
 8004b58:	693b      	ldr	r3, [r7, #16]
}
 8004b5a:	e040      	b.n	8004bde <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <HAL_I2C_MspInit+0x1c8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d13b      	bne.n	8004bde <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b6a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b70:	f107 0320 	add.w	r3, r7, #32
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe f995 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8004b80:	f7ff ff2c 	bl	80049dc <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b84:	4b19      	ldr	r3, [pc, #100]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b88:	4a18      	ldr	r2, [pc, #96]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b8a:	f043 0304 	orr.w	r3, r3, #4
 8004b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b90:	4b16      	ldr	r3, [pc, #88]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ba2:	2312      	movs	r3, #18
 8004ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	480e      	ldr	r0, [pc, #56]	; (8004bfc <HAL_I2C_MspInit+0x1cc>)
 8004bc2:	f7fc f90d 	bl	8000de0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004bc6:	4b09      	ldr	r3, [pc, #36]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	4a08      	ldr	r2, [pc, #32]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_I2C_MspInit+0x1bc>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
}
 8004bde:	bf00      	nop
 8004be0:	37c8      	adds	r7, #200	; 0xc8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	40005400 	.word	0x40005400
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	48000400 	.word	0x48000400
 8004bf4:	40005800 	.word	0x40005800
 8004bf8:	40005c00 	.word	0x40005c00
 8004bfc:	48000800 	.word	0x48000800

08004c00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1f      	ldr	r2, [pc, #124]	; (8004c8c <HAL_I2C_MspDeInit+0x8c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10e      	bne.n	8004c30 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004c12:	4b1f      	ldr	r3, [pc, #124]	; (8004c90 <HAL_I2C_MspDeInit+0x90>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	4a1e      	ldr	r2, [pc, #120]	; (8004c90 <HAL_I2C_MspDeInit+0x90>)
 8004c18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c1c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004c1e:	2140      	movs	r1, #64	; 0x40
 8004c20:	481c      	ldr	r0, [pc, #112]	; (8004c94 <HAL_I2C_MspDeInit+0x94>)
 8004c22:	f7fc fa6f 	bl	8001104 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	481a      	ldr	r0, [pc, #104]	; (8004c94 <HAL_I2C_MspDeInit+0x94>)
 8004c2a:	f7fc fa6b 	bl	8001104 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004c2e:	e028      	b.n	8004c82 <HAL_I2C_MspDeInit+0x82>
  else if(hi2c->Instance==I2C2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a18      	ldr	r2, [pc, #96]	; (8004c98 <HAL_I2C_MspDeInit+0x98>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d110      	bne.n	8004c5c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_I2C_MspDeInit+0x90>)
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <HAL_I2C_MspDeInit+0x90>)
 8004c40:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004c44:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c4a:	4812      	ldr	r0, [pc, #72]	; (8004c94 <HAL_I2C_MspDeInit+0x94>)
 8004c4c:	f7fc fa5a 	bl	8001104 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8004c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c54:	480f      	ldr	r0, [pc, #60]	; (8004c94 <HAL_I2C_MspDeInit+0x94>)
 8004c56:	f7fc fa55 	bl	8001104 <HAL_GPIO_DeInit>
}
 8004c5a:	e012      	b.n	8004c82 <HAL_I2C_MspDeInit+0x82>
  else if(hi2c->Instance==I2C3)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <HAL_I2C_MspDeInit+0x9c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d10d      	bne.n	8004c82 <HAL_I2C_MspDeInit+0x82>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004c66:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_I2C_MspDeInit+0x90>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <HAL_I2C_MspDeInit+0x90>)
 8004c6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c70:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8004c72:	2101      	movs	r1, #1
 8004c74:	480a      	ldr	r0, [pc, #40]	; (8004ca0 <HAL_I2C_MspDeInit+0xa0>)
 8004c76:	f7fc fa45 	bl	8001104 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	4808      	ldr	r0, [pc, #32]	; (8004ca0 <HAL_I2C_MspDeInit+0xa0>)
 8004c7e:	f7fc fa41 	bl	8001104 <HAL_GPIO_DeInit>
}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40005400 	.word	0x40005400
 8004c90:	40021000 	.word	0x40021000
 8004c94:	48000400 	.word	0x48000400
 8004c98:	40005800 	.word	0x40005800
 8004c9c:	40005c00 	.word	0x40005c00
 8004ca0:	48000800 	.word	0x48000800

08004ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b0ae      	sub	sp, #184	; 0xb8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	60da      	str	r2, [r3, #12]
 8004cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cbc:	f107 0310 	add.w	r3, r7, #16
 8004cc0:	2294      	movs	r2, #148	; 0x94
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f8d5 	bl	8004e74 <memset>
  if(huart->Instance==USART1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <HAL_UART_MspInit+0xb4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d13c      	bne.n	8004d4e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe f8df 	bl	8002ea4 <HAL_RCCEx_PeriphCLKConfig>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004cec:	f7ff fe76 	bl	80049dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_UART_MspInit+0xb8>)
 8004cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf4:	4a19      	ldr	r2, [pc, #100]	; (8004d5c <HAL_UART_MspInit+0xb8>)
 8004cf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_UART_MspInit+0xb8>)
 8004cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_UART_MspInit+0xb8>)
 8004d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <HAL_UART_MspInit+0xb8>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d14:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <HAL_UART_MspInit+0xb8>)
 8004d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
 8004d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004d20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d34:	2303      	movs	r3, #3
 8004d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004d3a:	2307      	movs	r3, #7
 8004d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004d44:	4619      	mov	r1, r3
 8004d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d4a:	f7fc f849 	bl	8000de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004d4e:	bf00      	nop
 8004d50:	37b8      	adds	r7, #184	; 0xb8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40013800 	.word	0x40013800
 8004d5c:	40021000 	.word	0x40021000

08004d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d64:	e7fe      	b.n	8004d64 <NMI_Handler+0x4>

08004d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d6a:	e7fe      	b.n	8004d6a <HardFault_Handler+0x4>

08004d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d70:	e7fe      	b.n	8004d70 <MemManage_Handler+0x4>

08004d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d72:	b480      	push	{r7}
 8004d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d76:	e7fe      	b.n	8004d76 <BusFault_Handler+0x4>

08004d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d7c:	e7fe      	b.n	8004d7c <UsageFault_Handler+0x4>

08004d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d9e:	bf00      	nop
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dac:	f7fb fec2 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db0:	bf00      	nop
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <SystemInit+0x20>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <SystemInit+0x20>)
 8004dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004dc8:	bf00      	nop
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
 8004dd2:	bf00      	nop
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e10 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ddc:	f7ff ffea 	bl	8004db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004de0:	480c      	ldr	r0, [pc, #48]	; (8004e14 <LoopForever+0x6>)
  ldr r1, =_edata
 8004de2:	490d      	ldr	r1, [pc, #52]	; (8004e18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004de4:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <LoopForever+0xe>)
  movs r3, #0
 8004de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004de8:	e002      	b.n	8004df0 <LoopCopyDataInit>

08004dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dee:	3304      	adds	r3, #4

08004df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004df4:	d3f9      	bcc.n	8004dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004df8:	4c0a      	ldr	r4, [pc, #40]	; (8004e24 <LoopForever+0x16>)
  movs r3, #0
 8004dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dfc:	e001      	b.n	8004e02 <LoopFillZerobss>

08004dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e00:	3204      	adds	r2, #4

08004e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e04:	d3fb      	bcc.n	8004dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e06:	f000 f811 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004e0a:	f7ff fbff 	bl	800460c <main>

08004e0e <LoopForever>:

LoopForever:
    b LoopForever
 8004e0e:	e7fe      	b.n	8004e0e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004e10:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e18:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8004e1c:	08004f1c 	.word	0x08004f1c
  ldr r2, =_sbss
 8004e20:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8004e24:	200002a8 	.word	0x200002a8

08004e28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004e28:	e7fe      	b.n	8004e28 <ADC1_IRQHandler>
	...

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	; (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	; (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	; (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	; (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 f820 	bl	8004e84 <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	08004f14 	.word	0x08004f14
 8004e68:	08004f14 	.word	0x08004f14
 8004e6c:	08004f14 	.word	0x08004f14
 8004e70:	08004f18 	.word	0x08004f18

08004e74 <memset>:
 8004e74:	4402      	add	r2, r0
 8004e76:	4603      	mov	r3, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
