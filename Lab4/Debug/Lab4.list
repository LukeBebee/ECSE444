
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae04  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800afc8  0800afc8  0001afc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5ac  0800b5ac  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5ac  0800b5ac  0001b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5b4  0800b5b4  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5b4  0800b5b4  0001b5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5b8  0800b5b8  0001b5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800b5bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001160  20000264  0800b820  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013c4  0800b820  000213c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021472  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004861  00000000  00000000  00041706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00045f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a18  00000000  00000000  00047b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e858  00000000  00000000  000495a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022c63  00000000  00000000  00077df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c412  00000000  00000000  0009aa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6e6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084a0  00000000  00000000  001b6ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000264 	.word	0x20000264
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800afac 	.word	0x0800afac

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000268 	.word	0x20000268
 80001fc:	0800afac 	.word	0x0800afac

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	; 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8000ee4:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000eea:	f043 0302 	orr.w	r3, r3, #2
 8000eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8000efc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f00:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	481b      	ldr	r0, [pc, #108]	; (8000f88 <I2Cx_MspInit+0xac>)
 8000f1a:	f000 febf 	bl	8001c9c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <I2Cx_MspInit+0xac>)
 8000f26:	f000 feb9 	bl	8001c9c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f2e:	4a15      	ldr	r2, [pc, #84]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f34:	6593      	str	r3, [r2, #88]	; 0x58
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f52:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <I2Cx_MspInit+0xa8>)
 8000f54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f58:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	2021      	movs	r0, #33	; 0x21
 8000f60:	f000 fe72 	bl	8001c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000f64:	2021      	movs	r0, #33	; 0x21
 8000f66:	f000 fe8b 	bl	8001c80 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	210f      	movs	r1, #15
 8000f6e:	2022      	movs	r0, #34	; 0x22
 8000f70:	f000 fe6a 	bl	8001c48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8000f74:	2022      	movs	r0, #34	; 0x22
 8000f76:	f000 fe83 	bl	8001c80 <HAL_NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000400 	.word	0x48000400

08000f8c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <I2Cx_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <I2Cx_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff89 	bl	8000edc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f001 f902 	bl	80021d4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f001 fe90 	bl	8002cf8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40005800 	.word	0x40005800
 8000fe4:	00702681 	.word	0x00702681

08000fe8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	; 0x28
 8000fec:	af04      	add	r7, sp, #16
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	72fb      	strb	r3, [r7, #11]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	813b      	strh	r3, [r7, #8]
 8000ffe:	4613      	mov	r3, r2
 8001000:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b299      	uxth	r1, r3
 800100a:	88f8      	ldrh	r0, [r7, #6]
 800100c:	893a      	ldrh	r2, [r7, #8]
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	9302      	str	r3, [sp, #8]
 8001014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001016:	9301      	str	r3, [sp, #4]
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	4603      	mov	r3, r0
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 faaa 	bl	8002578 <HAL_I2C_Mem_Read>
 8001024:	4603      	mov	r3, r0
 8001026:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001028:	7dfb      	ldrb	r3, [r7, #23]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d004      	beq.n	8001038 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800102e:	7afb      	ldrb	r3, [r7, #11]
 8001030:	4619      	mov	r1, r3
 8001032:	68f8      	ldr	r0, [r7, #12]
 8001034:	f000 f832 	bl	800109c <I2Cx_Error>
  }
  return status;
 8001038:	7dfb      	ldrb	r3, [r7, #23]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b08a      	sub	sp, #40	; 0x28
 8001046:	af04      	add	r7, sp, #16
 8001048:	60f8      	str	r0, [r7, #12]
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	461a      	mov	r2, r3
 8001050:	4603      	mov	r3, r0
 8001052:	72fb      	strb	r3, [r7, #11]
 8001054:	460b      	mov	r3, r1
 8001056:	813b      	strh	r3, [r7, #8]
 8001058:	4613      	mov	r3, r2
 800105a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001060:	7afb      	ldrb	r3, [r7, #11]
 8001062:	b299      	uxth	r1, r3
 8001064:	88f8      	ldrh	r0, [r7, #6]
 8001066:	893a      	ldrh	r2, [r7, #8]
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	9302      	str	r3, [sp, #8]
 800106e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001070:	9301      	str	r3, [sp, #4]
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	4603      	mov	r3, r0
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f001 f969 	bl	8002350 <HAL_I2C_Mem_Write>
 800107e:	4603      	mov	r3, r0
 8001080:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	4619      	mov	r1, r3
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f000 f805 	bl	800109c <I2Cx_Error>
  }
  return status;
 8001092:	7dfb      	ldrb	r3, [r7, #23]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f001 f922 	bl	80022f2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff6c 	bl	8000f8c <I2Cx_Init>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <SENSOR_IO_Init+0x10>)
 80010c2:	f7ff ff63 	bl	8000f8c <I2Cx_Init>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000280 	.word	0x20000280

080010d0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	460b      	mov	r3, r1
 80010dc:	71bb      	strb	r3, [r7, #6]
 80010de:	4613      	mov	r3, r2
 80010e0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	79f9      	ldrb	r1, [r7, #7]
 80010e8:	2301      	movs	r3, #1
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	1d7b      	adds	r3, r7, #5
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2301      	movs	r3, #1
 80010f2:	4803      	ldr	r0, [pc, #12]	; (8001100 <SENSOR_IO_Write+0x30>)
 80010f4:	f7ff ffa5 	bl	8001042 <I2Cx_WriteMultiple>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000280 	.word	0x20000280

08001104 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	460a      	mov	r2, r1
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	b29a      	uxth	r2, r3
 800111c:	79f9      	ldrb	r1, [r7, #7]
 800111e:	2301      	movs	r3, #1
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	f107 030f 	add.w	r3, r7, #15
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	4804      	ldr	r0, [pc, #16]	; (800113c <SENSOR_IO_Read+0x38>)
 800112c:	f7ff ff5c 	bl	8000fe8 <I2Cx_ReadMultiple>

  return read_value;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000280 	.word	0x20000280

08001140 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af02      	add	r7, sp, #8
 8001146:	603a      	str	r2, [r7, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	b29a      	uxth	r2, r3
 800115a:	79f9      	ldrb	r1, [r7, #7]
 800115c:	88bb      	ldrh	r3, [r7, #4]
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	4804      	ldr	r0, [pc, #16]	; (8001178 <SENSOR_IO_ReadMultiple+0x38>)
 8001168:	f7ff ff3e 	bl	8000fe8 <I2Cx_ReadMultiple>
 800116c:	4603      	mov	r3, r0
 800116e:	b29b      	uxth	r3, r3
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000280 	.word	0x20000280

0800117c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001186:	2300      	movs	r3, #0
 8001188:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <BSP_GYRO_Init+0x7c>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4798      	blx	r3
 8001190:	4603      	mov	r3, r0
 8001192:	2b6a      	cmp	r3, #106	; 0x6a
 8001194:	d002      	beq.n	800119c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e028      	b.n	80011ee <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <BSP_GYRO_Init+0x80>)
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <BSP_GYRO_Init+0x7c>)
 80011a0:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80011a6:	2330      	movs	r3, #48	; 0x30
 80011a8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80011ba:	230c      	movs	r3, #12
 80011bc:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80011be:	7aba      	ldrb	r2, [r7, #10]
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80011c8:	7a3b      	ldrb	r3, [r7, #8]
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21b      	sxth	r3, r3
 80011dc:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <BSP_GYRO_Init+0x80>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	89ba      	ldrh	r2, [r7, #12]
 80011e6:	4610      	mov	r0, r2
 80011e8:	4798      	blx	r3
    
    ret = GYRO_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000050 	.word	0x20000050
 80011fc:	200002d4 	.word	0x200002d4

08001200 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <BSP_GYRO_GetXYZ+0x2c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d009      	beq.n	8001224 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <BSP_GYRO_GetXYZ+0x2c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	2b00      	cmp	r3, #0
 8001218:	d004      	beq.n	8001224 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <BSP_GYRO_GetXYZ+0x2c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	4798      	blx	r3
    }
  }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200002d4 	.word	0x200002d4

08001230 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <BSP_MAGNETO_Init+0x50>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	4798      	blx	r3
 8001240:	4603      	mov	r3, r0
 8001242:	2b3d      	cmp	r3, #61	; 0x3d
 8001244:	d002      	beq.n	800124c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
 800124a:	e013      	b.n	8001274 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <BSP_MAGNETO_Init+0x54>)
 800124e:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <BSP_MAGNETO_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001252:	2358      	movs	r3, #88	; 0x58
 8001254:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001256:	2300      	movs	r3, #0
 8001258:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800125a:	2300      	movs	r3, #0
 800125c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800125e:	2308      	movs	r3, #8
 8001260:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001262:	2340      	movs	r3, #64	; 0x40
 8001264:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <BSP_MAGNETO_Init+0x54>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	463a      	mov	r2, r7
 800126e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001272:	4798      	blx	r3
  } 

  return ret;  
 8001274:	79fb      	ldrb	r3, [r7, #7]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000010 	.word	0x20000010
 8001284:	200002d8 	.word	0x200002d8

08001288 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d009      	beq.n	80012ac <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <BSP_MAGNETO_GetXYZ+0x2c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <BSP_MAGNETO_GetXYZ+0x2c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200002d8 	.word	0x200002d8

080012b8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <BSP_PSENSOR_Init+0x38>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	20ba      	movs	r0, #186	; 0xba
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	2bb1      	cmp	r3, #177	; 0xb1
 80012ca:	d002      	beq.n	80012d2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	e009      	b.n	80012e6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80012d2:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <BSP_PSENSOR_Init+0x3c>)
 80012d4:	4a06      	ldr	r2, [pc, #24]	; (80012f0 <BSP_PSENSOR_Init+0x38>)
 80012d6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <BSP_PSENSOR_Init+0x3c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	20ba      	movs	r0, #186	; 0xba
 80012e0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000044 	.word	0x20000044
 80012f4:	200002dc 	.word	0x200002dc

080012f8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <BSP_PSENSOR_ReadPressure+0x18>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	20ba      	movs	r0, #186	; 0xba
 8001304:	4798      	blx	r3
 8001306:	eef0 7a40 	vmov.f32	s15, s0
}
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002dc 	.word	0x200002dc

08001314 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <BSP_TSENSOR_Init+0x30>)
 8001320:	4a09      	ldr	r2, [pc, #36]	; (8001348 <BSP_TSENSOR_Init+0x34>)
 8001322:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001324:	f7ff feca 	bl	80010bc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <BSP_TSENSOR_Init+0x30>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2100      	movs	r1, #0
 8001330:	20be      	movs	r0, #190	; 0xbe
 8001332:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001338:	79fb      	ldrb	r3, [r7, #7]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002e0 	.word	0x200002e0
 8001348:	20000000 	.word	0x20000000

0800134c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <BSP_TSENSOR_ReadTemp+0x18>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	20be      	movs	r0, #190	; 0xbe
 8001358:	4798      	blx	r3
 800135a:	eef0 7a40 	vmov.f32	s15, s0
}
 800135e:	eeb0 0a67 	vmov.f32	s0, s15
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200002e0 	.word	0x200002e0

08001368 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2120      	movs	r1, #32
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fec2 	bl	8001104 <SENSOR_IO_Read>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	f023 0304 	bic.w	r3, r3, #4
 800138a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013aa:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	7bfa      	ldrb	r2, [r7, #15]
 80013b2:	2120      	movs	r1, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe8b 	bl	80010d0 <SENSOR_IO_Write>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b088      	sub	sp, #32
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4603      	mov	r3, r0
 80013ca:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	b2d8      	uxtb	r0, r3
 80013d0:	f107 0208 	add.w	r2, r7, #8
 80013d4:	2302      	movs	r3, #2
 80013d6:	21b2      	movs	r1, #178	; 0xb2
 80013d8:	f7ff feb2 	bl	8001140 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2135      	movs	r1, #53	; 0x35
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fe8e 	bl	8001104 <SENSOR_IO_Read>
 80013e8:	4603      	mov	r3, r0
 80013ea:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	b21b      	sxth	r3, r3
 80013f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7a3b      	ldrb	r3, [r7, #8]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001400:	7ffb      	ldrb	r3, [r7, #31]
 8001402:	019b      	lsls	r3, r3, #6
 8001404:	b21b      	sxth	r3, r3
 8001406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800140a:	b21a      	sxth	r2, r3
 800140c:	7a7b      	ldrb	r3, [r7, #9]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001414:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001418:	10db      	asrs	r3, r3, #3
 800141a:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800141c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001420:	10db      	asrs	r3, r3, #3
 8001422:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	b2d8      	uxtb	r0, r3
 8001428:	f107 0208 	add.w	r2, r7, #8
 800142c:	2304      	movs	r3, #4
 800142e:	21bc      	movs	r1, #188	; 0xbc
 8001430:	f7ff fe86 	bl	8001140 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001434:	7a7b      	ldrb	r3, [r7, #9]
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	b21a      	sxth	r2, r3
 800143a:	7a3b      	ldrb	r3, [r7, #8]
 800143c:	b21b      	sxth	r3, r3
 800143e:	4313      	orrs	r3, r2
 8001440:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001442:	7afb      	ldrb	r3, [r7, #11]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b21a      	sxth	r2, r3
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	b2d8      	uxtb	r0, r3
 8001454:	f107 0208 	add.w	r2, r7, #8
 8001458:	2302      	movs	r3, #2
 800145a:	21aa      	movs	r1, #170	; 0xaa
 800145c:	f7ff fe70 	bl	8001140 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001460:	7a7b      	ldrb	r3, [r7, #9]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	7a3b      	ldrb	r3, [r7, #8]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800146e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001472:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	ee07 3a90 	vmov	s15, r3
 800147c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001480:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001484:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001492:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001496:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800149a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014ac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	ee07 3a90 	vmov	s15, r3
}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	463b      	mov	r3, r7
 80014d8:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80014dc:	783b      	ldrb	r3, [r7, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	2120      	movs	r1, #32
 80014e2:	203c      	movs	r0, #60	; 0x3c
 80014e4:	f7ff fdf4 	bl	80010d0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80014e8:	787b      	ldrb	r3, [r7, #1]
 80014ea:	461a      	mov	r2, r3
 80014ec:	2121      	movs	r1, #33	; 0x21
 80014ee:	203c      	movs	r0, #60	; 0x3c
 80014f0:	f7ff fdee 	bl	80010d0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80014f4:	78bb      	ldrb	r3, [r7, #2]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2122      	movs	r1, #34	; 0x22
 80014fa:	203c      	movs	r0, #60	; 0x3c
 80014fc:	f7ff fde8 	bl	80010d0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	461a      	mov	r2, r3
 8001504:	2123      	movs	r1, #35	; 0x23
 8001506:	203c      	movs	r0, #60	; 0x3c
 8001508:	f7ff fde2 	bl	80010d0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800150c:	793b      	ldrb	r3, [r7, #4]
 800150e:	461a      	mov	r2, r3
 8001510:	2124      	movs	r1, #36	; 0x24
 8001512:	203c      	movs	r0, #60	; 0x3c
 8001514:	f7ff fddc 	bl	80010d0 <SENSOR_IO_Write>
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800152a:	2122      	movs	r1, #34	; 0x22
 800152c:	203c      	movs	r0, #60	; 0x3c
 800152e:	f7ff fde9 	bl	8001104 <SENSOR_IO_Read>
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f023 0303 	bic.w	r3, r3, #3
 800153c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f043 0303 	orr.w	r3, r3, #3
 8001544:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	461a      	mov	r2, r3
 800154a:	2122      	movs	r1, #34	; 0x22
 800154c:	203c      	movs	r0, #60	; 0x3c
 800154e:	f7ff fdbf 	bl	80010d0 <SENSOR_IO_Write>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800155e:	f7ff fdad 	bl	80010bc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001562:	210f      	movs	r1, #15
 8001564:	203c      	movs	r0, #60	; 0x3c
 8001566:	f7ff fdcd 	bl	8001104 <SENSOR_IO_Read>
 800156a:	4603      	mov	r3, r0
}
 800156c:	4618      	mov	r0, r3
 800156e:	bd80      	pop	{r7, pc}

08001570 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800157e:	2122      	movs	r1, #34	; 0x22
 8001580:	203c      	movs	r0, #60	; 0x3c
 8001582:	f7ff fdbf 	bl	8001104 <SENSOR_IO_Read>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	f023 0320 	bic.w	r3, r3, #32
 8001590:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d003      	beq.n	80015a0 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	f043 0320 	orr.w	r3, r3, #32
 800159e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	461a      	mov	r2, r3
 80015a4:	2122      	movs	r1, #34	; 0x22
 80015a6:	203c      	movs	r0, #60	; 0x3c
 80015a8:	f7ff fd92 	bl	80010d0 <SENSOR_IO_Write>
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80015ca:	2121      	movs	r1, #33	; 0x21
 80015cc:	203c      	movs	r0, #60	; 0x3c
 80015ce:	f7ff fd99 	bl	8001104 <SENSOR_IO_Read>
 80015d2:	4603      	mov	r3, r0
 80015d4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80015d6:	f107 0208 	add.w	r2, r7, #8
 80015da:	2306      	movs	r3, #6
 80015dc:	21a8      	movs	r1, #168	; 0xa8
 80015de:	203c      	movs	r0, #60	; 0x3c
 80015e0:	f7ff fdae 	bl	8001140 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	77fb      	strb	r3, [r7, #31]
 80015e8:	e01c      	b.n	8001624 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	3301      	adds	r3, #1
 80015f0:	3320      	adds	r3, #32
 80015f2:	443b      	add	r3, r7
 80015f4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	3320      	adds	r3, #32
 8001604:	443b      	add	r3, r7
 8001606:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800160a:	b29b      	uxth	r3, r3
 800160c:	4413      	add	r3, r2
 800160e:	b29a      	uxth	r2, r3
 8001610:	7ffb      	ldrb	r3, [r7, #31]
 8001612:	b212      	sxth	r2, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	3320      	adds	r3, #32
 8001618:	443b      	add	r3, r7
 800161a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800161e:	7ffb      	ldrb	r3, [r7, #31]
 8001620:	3301      	adds	r3, #1
 8001622:	77fb      	strb	r3, [r7, #31]
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d9df      	bls.n	80015ea <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001630:	2b60      	cmp	r3, #96	; 0x60
 8001632:	d013      	beq.n	800165c <LIS3MDL_MagReadXYZ+0xa8>
 8001634:	2b60      	cmp	r3, #96	; 0x60
 8001636:	dc14      	bgt.n	8001662 <LIS3MDL_MagReadXYZ+0xae>
 8001638:	2b40      	cmp	r3, #64	; 0x40
 800163a:	d00c      	beq.n	8001656 <LIS3MDL_MagReadXYZ+0xa2>
 800163c:	2b40      	cmp	r3, #64	; 0x40
 800163e:	dc10      	bgt.n	8001662 <LIS3MDL_MagReadXYZ+0xae>
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <LIS3MDL_MagReadXYZ+0x96>
 8001644:	2b20      	cmp	r3, #32
 8001646:	d003      	beq.n	8001650 <LIS3MDL_MagReadXYZ+0x9c>
 8001648:	e00b      	b.n	8001662 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <LIS3MDL_MagReadXYZ+0xfc>)
 800164c:	61bb      	str	r3, [r7, #24]
    break;
 800164e:	e008      	b.n	8001662 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <LIS3MDL_MagReadXYZ+0x100>)
 8001652:	61bb      	str	r3, [r7, #24]
    break;
 8001654:	e005      	b.n	8001662 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <LIS3MDL_MagReadXYZ+0x104>)
 8001658:	61bb      	str	r3, [r7, #24]
    break;
 800165a:	e002      	b.n	8001662 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <LIS3MDL_MagReadXYZ+0x108>)
 800165e:	61bb      	str	r3, [r7, #24]
    break;    
 8001660:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	77fb      	strb	r3, [r7, #31]
 8001666:	e01a      	b.n	800169e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001668:	7ffb      	ldrb	r3, [r7, #31]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	3320      	adds	r3, #32
 800166e:	443b      	add	r3, r7
 8001670:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800167c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001680:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001684:	7ffb      	ldrb	r3, [r7, #31]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001690:	ee17 2a90 	vmov	r2, s15
 8001694:	b212      	sxth	r2, r2
 8001696:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001698:	7ffb      	ldrb	r3, [r7, #31]
 800169a:	3301      	adds	r3, #1
 800169c:	77fb      	strb	r3, [r7, #31]
 800169e:	7ffb      	ldrb	r3, [r7, #31]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d9e1      	bls.n	8001668 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	3e0f5c29 	.word	0x3e0f5c29
 80016b4:	3e947ae1 	.word	0x3e947ae1
 80016b8:	3edc28f6 	.word	0x3edc28f6
 80016bc:	3f147ae1 	.word	0x3f147ae1

080016c0 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f879 	bl	80017c4 <LPS22HB_Init>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80016e8:	f7ff fce8 	bl	80010bc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	210f      	movs	r1, #15
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd06 	bl	8001104 <SENSOR_IO_Read>
 80016f8:	4603      	mov	r3, r0
 80016fa:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001716:	2300      	movs	r3, #0
 8001718:	74fb      	strb	r3, [r7, #19]
 800171a:	e013      	b.n	8001744 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	7cfb      	ldrb	r3, [r7, #19]
 8001722:	3328      	adds	r3, #40	; 0x28
 8001724:	b2db      	uxtb	r3, r3
 8001726:	7cfc      	ldrb	r4, [r7, #19]
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f7ff fcea 	bl	8001104 <SENSOR_IO_Read>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	f104 0318 	add.w	r3, r4, #24
 8001738:	443b      	add	r3, r7
 800173a:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800173e:	7cfb      	ldrb	r3, [r7, #19]
 8001740:	3301      	adds	r3, #1
 8001742:	74fb      	strb	r3, [r7, #19]
 8001744:	7cfb      	ldrb	r3, [r7, #19]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d9e8      	bls.n	800171c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	74fb      	strb	r3, [r7, #19]
 800174e:	e00f      	b.n	8001770 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	3318      	adds	r3, #24
 8001754:	443b      	add	r3, r7
 8001756:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800175a:	461a      	mov	r2, r3
 800175c:	7cfb      	ldrb	r3, [r7, #19]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	4313      	orrs	r3, r2
 8001768:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800176a:	7cfb      	ldrb	r3, [r7, #19]
 800176c:	3301      	adds	r3, #1
 800176e:	74fb      	strb	r3, [r7, #19]
 8001770:	7cfb      	ldrb	r3, [r7, #19]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d9ec      	bls.n	8001750 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001786:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2264      	movs	r2, #100	; 0x64
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	da01      	bge.n	800179c <LPS22HB_P_ReadPressure+0x94>
 8001798:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800179c:	131b      	asrs	r3, r3, #12
 800179e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017c0 <LPS22HB_P_ReadPressure+0xb8>
 80017ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80017b6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	42c80000 	.word	0x42c80000

080017c4 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	211a      	movs	r1, #26
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc95 	bl	8001104 <SENSOR_IO_Read>
 80017da:	4603      	mov	r3, r0
 80017dc:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80017de:	7bfb      	ldrb	r3, [r7, #15]
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	7bfa      	ldrb	r2, [r7, #15]
 80017f4:	211a      	movs	r1, #26
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fc6a 	bl	80010d0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2110      	movs	r1, #16
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fc7e 	bl	8001104 <SENSOR_IO_Read>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	f023 0302 	bic.w	r3, r3, #2
 8001822:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	7bfa      	ldrb	r2, [r7, #15]
 8001832:	2110      	movs	r1, #16
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fc4b 	bl	80010d0 <SENSOR_IO_Write>
}  
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001850:	2111      	movs	r1, #17
 8001852:	20d4      	movs	r0, #212	; 0xd4
 8001854:	f7ff fc56 	bl	8001104 <SENSOR_IO_Read>
 8001858:	4603      	mov	r3, r0
 800185a:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001868:	7bba      	ldrb	r2, [r7, #14]
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	4313      	orrs	r3, r2
 800186e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001870:	7bbb      	ldrb	r3, [r7, #14]
 8001872:	461a      	mov	r2, r3
 8001874:	2111      	movs	r1, #17
 8001876:	20d4      	movs	r0, #212	; 0xd4
 8001878:	f7ff fc2a 	bl	80010d0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800187c:	2112      	movs	r1, #18
 800187e:	20d4      	movs	r0, #212	; 0xd4
 8001880:	f7ff fc40 	bl	8001104 <SENSOR_IO_Read>
 8001884:	4603      	mov	r3, r0
 8001886:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	0a1b      	lsrs	r3, r3, #8
 800188c:	b29b      	uxth	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001896:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001898:	7bba      	ldrb	r2, [r7, #14]
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	4313      	orrs	r3, r2
 800189e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80018a0:	7bbb      	ldrb	r3, [r7, #14]
 80018a2:	461a      	mov	r2, r3
 80018a4:	2112      	movs	r1, #18
 80018a6:	20d4      	movs	r0, #212	; 0xd4
 80018a8:	f7ff fc12 	bl	80010d0 <SENSOR_IO_Write>
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80018be:	2111      	movs	r1, #17
 80018c0:	20d4      	movs	r0, #212	; 0xd4
 80018c2:	f7ff fc1f 	bl	8001104 <SENSOR_IO_Read>
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	461a      	mov	r2, r3
 80018d6:	2111      	movs	r1, #17
 80018d8:	20d4      	movs	r0, #212	; 0xd4
 80018da:	f7ff fbf9 	bl	80010d0 <SENSOR_IO_Write>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80018ea:	f7ff fbe7 	bl	80010bc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80018ee:	210f      	movs	r1, #15
 80018f0:	20d4      	movs	r0, #212	; 0xd4
 80018f2:	f7ff fc07 	bl	8001104 <SENSOR_IO_Read>
 80018f6:	4603      	mov	r3, r0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	bd80      	pop	{r7, pc}

080018fc <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800190a:	2116      	movs	r1, #22
 800190c:	20d4      	movs	r0, #212	; 0xd4
 800190e:	f7ff fbf9 	bl	8001104 <SENSOR_IO_Read>
 8001912:	4603      	mov	r3, r0
 8001914:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800191c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800192a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	461a      	mov	r2, r3
 8001930:	2116      	movs	r1, #22
 8001932:	20d4      	movs	r0, #212	; 0xd4
 8001934:	f7ff fbcc 	bl	80010d0 <SENSOR_IO_Write>
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001956:	2111      	movs	r1, #17
 8001958:	20d4      	movs	r0, #212	; 0xd4
 800195a:	f7ff fbd3 	bl	8001104 <SENSOR_IO_Read>
 800195e:	4603      	mov	r3, r0
 8001960:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8001962:	f107 0208 	add.w	r2, r7, #8
 8001966:	2306      	movs	r3, #6
 8001968:	2122      	movs	r1, #34	; 0x22
 800196a:	20d4      	movs	r0, #212	; 0xd4
 800196c:	f7ff fbe8 	bl	8001140 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
 8001974:	e01c      	b.n	80019b0 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001976:	7ffb      	ldrb	r3, [r7, #31]
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3301      	adds	r3, #1
 800197c:	3320      	adds	r3, #32
 800197e:	443b      	add	r3, r7
 8001980:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001984:	b29b      	uxth	r3, r3
 8001986:	021b      	lsls	r3, r3, #8
 8001988:	b29a      	uxth	r2, r3
 800198a:	7ffb      	ldrb	r3, [r7, #31]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	3320      	adds	r3, #32
 8001990:	443b      	add	r3, r7
 8001992:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4413      	add	r3, r2
 800199a:	b29a      	uxth	r2, r3
 800199c:	7ffb      	ldrb	r3, [r7, #31]
 800199e:	b212      	sxth	r2, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	3320      	adds	r3, #32
 80019a4:	443b      	add	r3, r7
 80019a6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	3301      	adds	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d9df      	bls.n	8001976 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b0c      	cmp	r3, #12
 80019be:	d829      	bhi.n	8001a14 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80019c0:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019fd 	.word	0x080019fd
 80019cc:	08001a15 	.word	0x08001a15
 80019d0:	08001a15 	.word	0x08001a15
 80019d4:	08001a15 	.word	0x08001a15
 80019d8:	08001a03 	.word	0x08001a03
 80019dc:	08001a15 	.word	0x08001a15
 80019e0:	08001a15 	.word	0x08001a15
 80019e4:	08001a15 	.word	0x08001a15
 80019e8:	08001a09 	.word	0x08001a09
 80019ec:	08001a15 	.word	0x08001a15
 80019f0:	08001a15 	.word	0x08001a15
 80019f4:	08001a15 	.word	0x08001a15
 80019f8:	08001a0f 	.word	0x08001a0f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80019fe:	61bb      	str	r3, [r7, #24]
    break;
 8001a00:	e008      	b.n	8001a14 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8001a04:	61bb      	str	r3, [r7, #24]
    break;
 8001a06:	e005      	b.n	8001a14 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8001a0a:	61bb      	str	r3, [r7, #24]
    break;
 8001a0c:	e002      	b.n	8001a14 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8001a0e:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8001a10:	61bb      	str	r3, [r7, #24]
    break;    
 8001a12:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001a14:	2300      	movs	r3, #0
 8001a16:	77fb      	strb	r3, [r7, #31]
 8001a18:	e016      	b.n	8001a48 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	3320      	adds	r3, #32
 8001a20:	443b      	add	r3, r7
 8001a22:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	3301      	adds	r3, #1
 8001a46:	77fb      	strb	r3, [r7, #31]
 8001a48:	7ffb      	ldrb	r3, [r7, #31]
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d9e5      	bls.n	8001a1a <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	410c0000 	.word	0x410c0000
 8001a5c:	418c0000 	.word	0x418c0000
 8001a60:	420c0000 	.word	0x420c0000
 8001a64:	428c0000 	.word	0x428c0000

08001a68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a72:	2003      	movs	r0, #3
 8001a74:	f000 f8dd 	bl	8001c32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a78:	200f      	movs	r0, #15
 8001a7a:	f006 fb99 	bl	80081b0 <HAL_InitTick>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e001      	b.n	8001a8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a8a:	f006 fa89 	bl	8007fa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x20>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_IncTick+0x24>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_IncTick+0x24>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000088 	.word	0x20000088
 8001abc:	200002e4 	.word	0x200002e4

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_GetTick+0x14>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	200002e4 	.word	0x200002e4

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	60d3      	str	r3, [r2, #12]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff ff4c 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5a:	f7ff ff61 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001c5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	6978      	ldr	r0, [r7, #20]
 8001c66:	f7ff ffb1 	bl	8001bcc <NVIC_EncodePriority>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff80 	bl	8001b78 <__NVIC_SetPriority>
}
 8001c78:	bf00      	nop
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff ff54 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001caa:	e166      	b.n	8001f7a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 8158 	beq.w	8001f74 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d005      	beq.n	8001cdc <HAL_GPIO_Init+0x40>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 0201 	and.w	r2, r3, #1
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d017      	beq.n	8001d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d123      	bne.n	8001dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0203 	and.w	r2, r3, #3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 80b2 	beq.w	8001f74 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e10:	4b61      	ldr	r3, [pc, #388]	; (8001f98 <HAL_GPIO_Init+0x2fc>)
 8001e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e14:	4a60      	ldr	r2, [pc, #384]	; (8001f98 <HAL_GPIO_Init+0x2fc>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6613      	str	r3, [r2, #96]	; 0x60
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <HAL_GPIO_Init+0x2fc>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e28:	4a5c      	ldr	r2, [pc, #368]	; (8001f9c <HAL_GPIO_Init+0x300>)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	220f      	movs	r2, #15
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e52:	d02b      	beq.n	8001eac <HAL_GPIO_Init+0x210>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a52      	ldr	r2, [pc, #328]	; (8001fa0 <HAL_GPIO_Init+0x304>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d025      	beq.n	8001ea8 <HAL_GPIO_Init+0x20c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_GPIO_Init+0x308>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d01f      	beq.n	8001ea4 <HAL_GPIO_Init+0x208>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a50      	ldr	r2, [pc, #320]	; (8001fa8 <HAL_GPIO_Init+0x30c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d019      	beq.n	8001ea0 <HAL_GPIO_Init+0x204>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4f      	ldr	r2, [pc, #316]	; (8001fac <HAL_GPIO_Init+0x310>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_GPIO_Init+0x200>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <HAL_GPIO_Init+0x314>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_GPIO_Init+0x1fc>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x318>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d007      	beq.n	8001e94 <HAL_GPIO_Init+0x1f8>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <HAL_GPIO_Init+0x31c>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d101      	bne.n	8001e90 <HAL_GPIO_Init+0x1f4>
 8001e8c:	2307      	movs	r3, #7
 8001e8e:	e00e      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001e90:	2308      	movs	r3, #8
 8001e92:	e00c      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001e94:	2306      	movs	r3, #6
 8001e96:	e00a      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	e008      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	e006      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e004      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e002      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e000      	b.n	8001eae <HAL_GPIO_Init+0x212>
 8001eac:	2300      	movs	r3, #0
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	f002 0203 	and.w	r2, r2, #3
 8001eb4:	0092      	lsls	r2, r2, #2
 8001eb6:	4093      	lsls	r3, r2
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ebe:	4937      	ldr	r1, [pc, #220]	; (8001f9c <HAL_GPIO_Init+0x300>)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	3302      	adds	r3, #2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef0:	4a32      	ldr	r2, [pc, #200]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f1a:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f44:	4a1d      	ldr	r2, [pc, #116]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_GPIO_Init+0x320>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f ae91 	bne.w	8001cac <HAL_GPIO_Init+0x10>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	bf00      	nop
 8001f8e:	371c      	adds	r7, #28
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	48000400 	.word	0x48000400
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	48001000 	.word	0x48001000
 8001fb0:	48001400 	.word	0x48001400
 8001fb4:	48001800 	.word	0x48001800
 8001fb8:	48001c00 	.word	0x48001c00
 8001fbc:	40010400 	.word	0x40010400

08001fc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fce:	e0c9      	b.n	8002164 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80bc 	beq.w	800215e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001fe6:	4a66      	ldr	r2, [pc, #408]	; (8002180 <HAL_GPIO_DeInit+0x1c0>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800200e:	d02b      	beq.n	8002068 <HAL_GPIO_DeInit+0xa8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_GPIO_DeInit+0x1c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d025      	beq.n	8002064 <HAL_GPIO_DeInit+0xa4>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a5b      	ldr	r2, [pc, #364]	; (8002188 <HAL_GPIO_DeInit+0x1c8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d01f      	beq.n	8002060 <HAL_GPIO_DeInit+0xa0>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a5a      	ldr	r2, [pc, #360]	; (800218c <HAL_GPIO_DeInit+0x1cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d019      	beq.n	800205c <HAL_GPIO_DeInit+0x9c>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a59      	ldr	r2, [pc, #356]	; (8002190 <HAL_GPIO_DeInit+0x1d0>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_GPIO_DeInit+0x98>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_GPIO_DeInit+0x1d4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_DeInit+0x94>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a57      	ldr	r2, [pc, #348]	; (8002198 <HAL_GPIO_DeInit+0x1d8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_DeInit+0x90>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a56      	ldr	r2, [pc, #344]	; (800219c <HAL_GPIO_DeInit+0x1dc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_DeInit+0x8c>
 8002048:	2307      	movs	r3, #7
 800204a:	e00e      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 800204c:	2308      	movs	r3, #8
 800204e:	e00c      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 8002050:	2306      	movs	r3, #6
 8002052:	e00a      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 8002054:	2305      	movs	r3, #5
 8002056:	e008      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 8002058:	2304      	movs	r3, #4
 800205a:	e006      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 800205c:	2303      	movs	r3, #3
 800205e:	e004      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 8002060:	2302      	movs	r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_DeInit+0xaa>
 8002068:	2300      	movs	r3, #0
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	429a      	cmp	r2, r3
 8002078:	d132      	bne.n	80020e0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800207a:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	4947      	ldr	r1, [pc, #284]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 8002084:	4013      	ands	r3, r2
 8002086:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002088:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	4943      	ldr	r1, [pc, #268]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 8002092:	4013      	ands	r3, r2
 8002094:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43db      	mvns	r3, r3
 800209e:	4940      	ldr	r1, [pc, #256]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80020a4:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	493c      	ldr	r1, [pc, #240]	; (80021a0 <HAL_GPIO_DeInit+0x1e0>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	220f      	movs	r2, #15
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020c2:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <HAL_GPIO_DeInit+0x1c0>)
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43da      	mvns	r2, r3
 80020d2:	482b      	ldr	r0, [pc, #172]	; (8002180 <HAL_GPIO_DeInit+0x1c0>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	400a      	ands	r2, r1
 80020da:	3302      	adds	r3, #2
 80020dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2103      	movs	r1, #3
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	220f      	movs	r2, #15
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	08d2      	lsrs	r2, r2, #3
 8002114:	4019      	ands	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2103      	movs	r1, #3
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	2101      	movs	r1, #1
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2103      	movs	r1, #3
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	401a      	ands	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	f47f af2f 	bne.w	8001fd0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40010000 	.word	0x40010000
 8002184:	48000400 	.word	0x48000400
 8002188:	48000800 	.word	0x48000800
 800218c:	48000c00 	.word	0x48000c00
 8002190:	48001000 	.word	0x48001000
 8002194:	48001400 	.word	0x48001400
 8002198:	48001800 	.word	0x48001800
 800219c:	48001c00 	.word	0x48001c00
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c0:	e002      	b.n	80021c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c2:	887a      	ldrh	r2, [r7, #2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e081      	b.n	80022ea <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d106      	bne.n	8002200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f005 fef8 	bl	8007ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002224:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002234:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e006      	b.n	800225c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800225a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b02      	cmp	r3, #2
 8002262:	d104      	bne.n	800226e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800227c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002280:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002290:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69d9      	ldr	r1, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a1a      	ldr	r2, [r3, #32]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e021      	b.n	8002348 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f005 fec5 	bl	80080ac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b088      	sub	sp, #32
 8002354:	af02      	add	r7, sp, #8
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	4608      	mov	r0, r1
 800235a:	4611      	mov	r1, r2
 800235c:	461a      	mov	r2, r3
 800235e:	4603      	mov	r3, r0
 8002360:	817b      	strh	r3, [r7, #10]
 8002362:	460b      	mov	r3, r1
 8002364:	813b      	strh	r3, [r7, #8]
 8002366:	4613      	mov	r3, r2
 8002368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b20      	cmp	r3, #32
 8002374:	f040 80f9 	bne.w	800256a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_I2C_Mem_Write+0x34>
 800237e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002380:	2b00      	cmp	r3, #0
 8002382:	d105      	bne.n	8002390 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0ed      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <HAL_I2C_Mem_Write+0x4e>
 800239a:	2302      	movs	r3, #2
 800239c:	e0e6      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023a6:	f7ff fb8b 	bl	8001ac0 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fac3 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d1      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2221      	movs	r2, #33	; 0x21
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a3a      	ldr	r2, [r7, #32]
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f0:	88f8      	ldrh	r0, [r7, #6]
 80023f2:	893a      	ldrh	r2, [r7, #8]
 80023f4:	8979      	ldrh	r1, [r7, #10]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4603      	mov	r3, r0
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f9d3 	bl	80027ac <I2C_RequestMemoryWrite>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0a9      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241c:	b29b      	uxth	r3, r3
 800241e:	2bff      	cmp	r3, #255	; 0xff
 8002420:	d90e      	bls.n	8002440 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	8979      	ldrh	r1, [r7, #10]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 fc2b 	bl	8002c94 <I2C_TransferConfig>
 800243e:	e00f      	b.n	8002460 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	b2da      	uxtb	r2, r3
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fc1a 	bl	8002c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 faad 	bl	80029c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e07b      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d034      	beq.n	8002518 <HAL_I2C_Mem_Write+0x1c8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d130      	bne.n	8002518 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	2200      	movs	r2, #0
 80024be:	2180      	movs	r1, #128	; 0x80
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 fa3f 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e04d      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2bff      	cmp	r3, #255	; 0xff
 80024d8:	d90e      	bls.n	80024f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	22ff      	movs	r2, #255	; 0xff
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fbcf 	bl	8002c94 <I2C_TransferConfig>
 80024f6:	e00f      	b.n	8002518 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	b2da      	uxtb	r2, r3
 8002508:	8979      	ldrh	r1, [r7, #10]
 800250a:	2300      	movs	r3, #0
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fbbe 	bl	8002c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d19e      	bne.n	8002460 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa8c 	bl	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e01a      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2220      	movs	r2, #32
 800253c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_I2C_Mem_Write+0x224>)
 800254a:	400b      	ands	r3, r1
 800254c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800256a:	2302      	movs	r3, #2
  }
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	fe00e800 	.word	0xfe00e800

08002578 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	4608      	mov	r0, r1
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	4603      	mov	r3, r0
 8002588:	817b      	strh	r3, [r7, #10]
 800258a:	460b      	mov	r3, r1
 800258c:	813b      	strh	r3, [r7, #8]
 800258e:	4613      	mov	r3, r2
 8002590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b20      	cmp	r3, #32
 800259c:	f040 80fd 	bne.w	800279a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	6a3b      	ldr	r3, [r7, #32]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_I2C_Mem_Read+0x34>
 80025a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0f1      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_I2C_Mem_Read+0x4e>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e0ea      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025ce:	f7ff fa77 	bl	8001ac0 <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	2319      	movs	r3, #25
 80025da:	2201      	movs	r2, #1
 80025dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f9af 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0d5      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2222      	movs	r2, #34	; 0x22
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2240      	movs	r2, #64	; 0x40
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a3a      	ldr	r2, [r7, #32]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002618:	88f8      	ldrh	r0, [r7, #6]
 800261a:	893a      	ldrh	r2, [r7, #8]
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	4603      	mov	r3, r0
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f913 	bl	8002854 <I2C_RequestMemoryRead>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0ad      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2bff      	cmp	r3, #255	; 0xff
 8002648:	d90e      	bls.n	8002668 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	b2da      	uxtb	r2, r3
 8002656:	8979      	ldrh	r1, [r7, #10]
 8002658:	4b52      	ldr	r3, [pc, #328]	; (80027a4 <HAL_I2C_Mem_Read+0x22c>)
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 fb17 	bl	8002c94 <I2C_TransferConfig>
 8002666:	e00f      	b.n	8002688 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002676:	b2da      	uxtb	r2, r3
 8002678:	8979      	ldrh	r1, [r7, #10]
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_I2C_Mem_Read+0x22c>)
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fb06 	bl	8002c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	2200      	movs	r2, #0
 8002690:	2104      	movs	r1, #4
 8002692:	68f8      	ldr	r0, [r7, #12]
 8002694:	f000 f956 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e07c      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d034      	beq.n	8002748 <HAL_I2C_Mem_Read+0x1d0>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d130      	bne.n	8002748 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	2200      	movs	r2, #0
 80026ee:	2180      	movs	r1, #128	; 0x80
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f927 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e04d      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d90e      	bls.n	8002728 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	22ff      	movs	r2, #255	; 0xff
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	b2da      	uxtb	r2, r3
 8002716:	8979      	ldrh	r1, [r7, #10]
 8002718:	2300      	movs	r3, #0
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fab7 	bl	8002c94 <I2C_TransferConfig>
 8002726:	e00f      	b.n	8002748 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	b2da      	uxtb	r2, r3
 8002738:	8979      	ldrh	r1, [r7, #10]
 800273a:	2300      	movs	r3, #0
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 faa6 	bl	8002c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d19a      	bne.n	8002688 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f974 	bl	8002a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e01a      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2220      	movs	r2, #32
 800276c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <HAL_I2C_Mem_Read+0x230>)
 800277a:	400b      	ands	r3, r1
 800277c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	80002400 	.word	0x80002400
 80027a8:	fe00e800 	.word	0xfe00e800

080027ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	460b      	mov	r3, r1
 80027c0:	813b      	strh	r3, [r7, #8]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <I2C_RequestMemoryWrite+0xa4>)
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fa5d 	bl	8002c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	69b9      	ldr	r1, [r7, #24]
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f8f0 	bl	80029c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e02c      	b.n	8002848 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027ee:	88fb      	ldrh	r3, [r7, #6]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f4:	893b      	ldrh	r3, [r7, #8]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
 80027fe:	e015      	b.n	800282c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002800:	893b      	ldrh	r3, [r7, #8]
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	b29b      	uxth	r3, r3
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	69b9      	ldr	r1, [r7, #24]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f8d6 	bl	80029c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e012      	b.n	8002848 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002822:	893b      	ldrh	r3, [r7, #8]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2200      	movs	r2, #0
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f000 f884 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	80002000 	.word	0x80002000

08002854 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	4608      	mov	r0, r1
 800285e:	4611      	mov	r1, r2
 8002860:	461a      	mov	r2, r3
 8002862:	4603      	mov	r3, r0
 8002864:	817b      	strh	r3, [r7, #10]
 8002866:	460b      	mov	r3, r1
 8002868:	813b      	strh	r3, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	8979      	ldrh	r1, [r7, #10]
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <I2C_RequestMemoryRead+0xa4>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2300      	movs	r3, #0
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 fa0a 	bl	8002c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 f89d 	bl	80029c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e02c      	b.n	80028ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800289a:	893b      	ldrh	r3, [r7, #8]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
 80028a4:	e015      	b.n	80028d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028a6:	893b      	ldrh	r3, [r7, #8]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	69b9      	ldr	r1, [r7, #24]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f883 	bl	80029c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e012      	b.n	80028ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	2200      	movs	r2, #0
 80028da:	2140      	movs	r1, #64	; 0x40
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f831 	bl	8002944 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e000      	b.n	80028ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	80002000 	.word	0x80002000

080028fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b02      	cmp	r3, #2
 8002910:	d103      	bne.n	800291a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d007      	beq.n	8002938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	619a      	str	r2, [r3, #24]
  }
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002954:	e022      	b.n	800299c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295c:	d01e      	beq.n	800299c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7ff f8af 	bl	8001ac0 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d113      	bne.n	800299c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e00f      	b.n	80029bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	4013      	ands	r3, r2
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	bf0c      	ite	eq
 80029ac:	2301      	moveq	r3, #1
 80029ae:	2300      	movne	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d0cd      	beq.n	8002956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029d0:	e02c      	b.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f870 	bl	8002abc <I2C_IsErrorOccurred>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e02a      	b.n	8002a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ec:	d01e      	beq.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7ff f867 	bl	8001ac0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d113      	bne.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d1cb      	bne.n	80029d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a50:	e028      	b.n	8002aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f830 	bl	8002abc <I2C_IsErrorOccurred>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e026      	b.n	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7ff f82b 	bl	8001ac0 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d113      	bne.n	8002aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e007      	b.n	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d1cf      	bne.n	8002a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d075      	beq.n	8002bd4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2210      	movs	r2, #16
 8002aee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002af0:	e056      	b.n	8002ba0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af8:	d052      	beq.n	8002ba0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe ffe1 	bl	8001ac0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_IsErrorOccurred+0x54>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d147      	bne.n	8002ba0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b32:	d12e      	bne.n	8002b92 <I2C_IsErrorOccurred+0xd6>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3a:	d02a      	beq.n	8002b92 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d027      	beq.n	8002b92 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b52:	f7fe ffb5 	bl	8001ac0 <HAL_GetTick>
 8002b56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b58:	e01b      	b.n	8002b92 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b5a:	f7fe ffb1 	bl	8001ac0 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b19      	cmp	r3, #25
 8002b66:	d914      	bls.n	8002b92 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d1dc      	bne.n	8002b5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d003      	beq.n	8002bb6 <I2C_IsErrorOccurred+0xfa>
 8002bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d09d      	beq.n	8002af2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bf6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00b      	beq.n	8002c20 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c18:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00b      	beq.n	8002c42 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01c      	beq.n	8002c84 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff fe56 	bl	80028fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6859      	ldr	r1, [r3, #4]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	; (8002c90 <I2C_IsErrorOccurred+0x1d4>)
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	fe00e800 	.word	0xfe00e800

08002c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	817b      	strh	r3, [r7, #10]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ca6:	897b      	ldrh	r3, [r7, #10]
 8002ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cac:	7a7b      	ldrb	r3, [r7, #9]
 8002cae:	041b      	lsls	r3, r3, #16
 8002cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cba:	6a3b      	ldr	r3, [r7, #32]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	0d5b      	lsrs	r3, r3, #21
 8002cce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cd2:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <I2C_TransferConfig+0x60>)
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	ea02 0103 	and.w	r1, r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	03ff63ff 	.word	0x03ff63ff

08002cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d138      	bne.n	8002d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e032      	b.n	8002d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2224      	movs	r2, #36	; 0x24
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0201 	bic.w	r2, r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6819      	ldr	r1, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d139      	bne.n	8002e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e033      	b.n	8002e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2224      	movs	r2, #36	; 0x24
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3714      	adds	r7, #20
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d102      	bne.n	8002e40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3e:	e00b      	b.n	8002e58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4e:	d102      	bne.n	8002e56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002e50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e54:	e000      	b.n	8002e58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002e56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40007000 	.word	0x40007000

08002e68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d141      	bne.n	8002efa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e76:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e82:	d131      	bne.n	8002ee8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e84:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8a:	4a46      	ldr	r2, [pc, #280]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e9c:	4a41      	ldr	r2, [pc, #260]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2232      	movs	r2, #50	; 0x32
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	0c9b      	lsrs	r3, r3, #18
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eba:	e002      	b.n	8002ec2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec2:	4b38      	ldr	r3, [pc, #224]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	d102      	bne.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f2      	bne.n	8002ebc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed6:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee2:	d158      	bne.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e057      	b.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee8:	4b2e      	ldr	r3, [pc, #184]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eee:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ef8:	e04d      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f00:	d141      	bne.n	8002f86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0e:	d131      	bne.n	8002f74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f10:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2232      	movs	r2, #50	; 0x32
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	4a1c      	ldr	r2, [pc, #112]	; (8002fac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f40:	0c9b      	lsrs	r3, r3, #18
 8002f42:	3301      	adds	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f46:	e002      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d102      	bne.n	8002f62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f2      	bne.n	8002f48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d112      	bne.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e011      	b.n	8002f98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f84:	e007      	b.n	8002f96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f86:	4b07      	ldr	r3, [pc, #28]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f8e:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	20000090 	.word	0x20000090
 8002fac:	431bde83 	.word	0x431bde83

08002fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f000 bc08 	b.w	80037d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc4:	4b96      	ldr	r3, [pc, #600]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fce:	4b94      	ldr	r3, [pc, #592]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80e4 	beq.w	80031ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4c>
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	f040 808b 	bne.w	800310a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	f040 8087 	bne.w	800310a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ffc:	4b88      	ldr	r3, [pc, #544]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <HAL_RCC_OscConfig+0x64>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e3df      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1a      	ldr	r2, [r3, #32]
 8003018:	4b81      	ldr	r3, [pc, #516]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_RCC_OscConfig+0x7e>
 8003024:	4b7e      	ldr	r3, [pc, #504]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800302c:	e005      	b.n	800303a <HAL_RCC_OscConfig+0x8a>
 800302e:	4b7c      	ldr	r3, [pc, #496]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800303a:	4293      	cmp	r3, r2
 800303c:	d223      	bcs.n	8003086 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4618      	mov	r0, r3
 8003044:	f000 fdfe 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e3c0      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a72      	ldr	r2, [pc, #456]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003058:	f043 0308 	orr.w	r3, r3, #8
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	496d      	ldr	r1, [pc, #436]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003070:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	4968      	ldr	r1, [pc, #416]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
 8003084:	e025      	b.n	80030d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003086:	4b66      	ldr	r3, [pc, #408]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a65      	ldr	r2, [pc, #404]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800308c:	f043 0308 	orr.w	r3, r3, #8
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4b63      	ldr	r3, [pc, #396]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4960      	ldr	r1, [pc, #384]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030a4:	4b5e      	ldr	r3, [pc, #376]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	495b      	ldr	r1, [pc, #364]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fdbe 	bl	8003c44 <RCC_SetFlashLatencyFromMSIRange>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e380      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d2:	f000 fcc1 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b51      	ldr	r3, [pc, #324]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	4950      	ldr	r1, [pc, #320]	; (8003224 <HAL_RCC_OscConfig+0x274>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a4e      	ldr	r2, [pc, #312]	; (8003228 <HAL_RCC_OscConfig+0x278>)
 80030f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030f2:	4b4e      	ldr	r3, [pc, #312]	; (800322c <HAL_RCC_OscConfig+0x27c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f005 f85a 	bl	80081b0 <HAL_InitTick>
 80030fc:	4603      	mov	r3, r0
 80030fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d052      	beq.n	80031ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	e364      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d032      	beq.n	8003178 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a42      	ldr	r2, [pc, #264]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800311e:	f7fe fccf 	bl	8001ac0 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003126:	f7fe fccb 	bl	8001ac0 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e34d      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003144:	4b36      	ldr	r3, [pc, #216]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a35      	ldr	r2, [pc, #212]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800314a:	f043 0308 	orr.w	r3, r3, #8
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b33      	ldr	r3, [pc, #204]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4930      	ldr	r1, [pc, #192]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003162:	4b2f      	ldr	r3, [pc, #188]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	492b      	ldr	r1, [pc, #172]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003172:	4313      	orrs	r3, r2
 8003174:	604b      	str	r3, [r1, #4]
 8003176:	e01a      	b.n	80031ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003178:	4b29      	ldr	r3, [pc, #164]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a28      	ldr	r2, [pc, #160]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003184:	f7fe fc9c 	bl	8001ac0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318c:	f7fe fc98 	bl	8001ac0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e31a      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800319e:	4b20      	ldr	r3, [pc, #128]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x1dc>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d073      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d005      	beq.n	80031cc <HAL_RCC_OscConfig+0x21c>
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	d10e      	bne.n	80031e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b14      	ldr	r3, [pc, #80]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d063      	beq.n	80032a0 <HAL_RCC_OscConfig+0x2f0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d15f      	bne.n	80032a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e2f7      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x24c>
 80031ee:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e025      	b.n	8003248 <HAL_RCC_OscConfig+0x298>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d114      	bne.n	8003230 <HAL_RCC_OscConfig+0x280>
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a02      	ldr	r2, [pc, #8]	; (8003220 <HAL_RCC_OscConfig+0x270>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e013      	b.n	8003248 <HAL_RCC_OscConfig+0x298>
 8003220:	40021000 	.word	0x40021000
 8003224:	0800b188 	.word	0x0800b188
 8003228:	20000090 	.word	0x20000090
 800322c:	20000084 	.word	0x20000084
 8003230:	4ba0      	ldr	r3, [pc, #640]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a9f      	ldr	r2, [pc, #636]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4b9d      	ldr	r3, [pc, #628]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a9c      	ldr	r2, [pc, #624]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d013      	beq.n	8003278 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fc36 	bl	8001ac0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe fc32 	bl	8001ac0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e2b4      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800326a:	4b92      	ldr	r3, [pc, #584]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x2a8>
 8003276:	e014      	b.n	80032a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe fc22 	bl	8001ac0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003280:	f7fe fc1e 	bl	8001ac0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e2a0      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003292:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x2d0>
 800329e:	e000      	b.n	80032a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d060      	beq.n	8003370 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_OscConfig+0x310>
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d119      	bne.n	80032ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d116      	bne.n	80032ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c0:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_OscConfig+0x328>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e27d      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	4973      	ldr	r1, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ec:	e040      	b.n	8003370 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d023      	beq.n	800333e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f6:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6e      	ldr	r2, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fe fbdd 	bl	8001ac0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe fbd9 	bl	8001ac0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e25b      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331c:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003328:	4b62      	ldr	r3, [pc, #392]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	495f      	ldr	r1, [pc, #380]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
 800333c:	e018      	b.n	8003370 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b5d      	ldr	r3, [pc, #372]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a5c      	ldr	r2, [pc, #368]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003344:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fe fbb9 	bl	8001ac0 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe fbb5 	bl	8001ac0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e237      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003364:	4b53      	ldr	r3, [pc, #332]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d03c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01c      	beq.n	80033be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003384:	4b4b      	ldr	r3, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800338a:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe fb94 	bl	8001ac0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe fb90 	bl	8001ac0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e212      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <HAL_RCC_OscConfig+0x3ec>
 80033bc:	e01b      	b.n	80033f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033be:	4b3d      	ldr	r3, [pc, #244]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c4:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe fb77 	bl	8001ac0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fe fb73 	bl	8001ac0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1f5      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e8:	4b32      	ldr	r3, [pc, #200]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80033ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ef      	bne.n	80033d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a6 	beq.w	8003550 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10d      	bne.n	8003430 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800341a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341e:	6593      	str	r3, [r2, #88]	; 0x58
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342c:	2301      	movs	r3, #1
 800342e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d118      	bne.n	800346e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800343c:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1d      	ldr	r2, [pc, #116]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 8003442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003446:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003448:	f7fe fb3a 	bl	8001ac0 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003450:	f7fe fb36 	bl	8001ac0 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1b8      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCC_OscConfig+0x508>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <HAL_RCC_OscConfig+0x4d8>
 8003476:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003486:	e029      	b.n	80034dc <HAL_RCC_OscConfig+0x52c>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b05      	cmp	r3, #5
 800348e:	d115      	bne.n	80034bc <HAL_RCC_OscConfig+0x50c>
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003496:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 8003498:	f043 0304 	orr.w	r3, r3, #4
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034a0:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	4a03      	ldr	r2, [pc, #12]	; (80034b4 <HAL_RCC_OscConfig+0x504>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b0:	e014      	b.n	80034dc <HAL_RCC_OscConfig+0x52c>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
 80034bc:	4b9d      	ldr	r3, [pc, #628]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80034be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c2:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034cc:	4b99      	ldr	r3, [pc, #612]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	4a98      	ldr	r2, [pc, #608]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80034d4:	f023 0304 	bic.w	r3, r3, #4
 80034d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d016      	beq.n	8003512 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e4:	f7fe faec 	bl	8001ac0 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ec:	f7fe fae8 	bl	8001ac0 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e168      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	4b8c      	ldr	r3, [pc, #560]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ed      	beq.n	80034ec <HAL_RCC_OscConfig+0x53c>
 8003510:	e015      	b.n	800353e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fe fad5 	bl	8001ac0 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003518:	e00a      	b.n	8003530 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fad1 	bl	8001ac0 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	; 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e151      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003530:	4b80      	ldr	r3, [pc, #512]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ed      	bne.n	800351a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7ffb      	ldrb	r3, [r7, #31]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	4a7a      	ldr	r2, [pc, #488]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d03c      	beq.n	80035d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01c      	beq.n	800359e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003564:	4b73      	ldr	r3, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356a:	4a72      	ldr	r2, [pc, #456]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fe faa4 	bl	8001ac0 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357c:	f7fe faa0 	bl	8001ac0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e122      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800358e:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <HAL_RCC_OscConfig+0x5cc>
 800359c:	e01b      	b.n	80035d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800359e:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80035a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a4:	4a63      	ldr	r2, [pc, #396]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ae:	f7fe fa87 	bl	8001ac0 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035b6:	f7fe fa83 	bl	8001ac0 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e105      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c8:	4b5a      	ldr	r3, [pc, #360]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80035ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1ef      	bne.n	80035b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80f9 	beq.w	80037d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	f040 80cf 	bne.w	8003788 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035ea:	4b52      	ldr	r3, [pc, #328]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d12c      	bne.n	8003658 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	3b01      	subs	r3, #1
 800360a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d123      	bne.n	8003658 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d11b      	bne.n	8003658 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d113      	bne.n	8003658 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	085b      	lsrs	r3, r3, #1
 800363c:	3b01      	subs	r3, #1
 800363e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d109      	bne.n	8003658 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d071      	beq.n	800373c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b0c      	cmp	r3, #12
 800365c:	d068      	beq.n	8003730 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800365e:	4b35      	ldr	r3, [pc, #212]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d105      	bne.n	8003676 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800366a:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e0ac      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003684:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003686:	f7fe fa1b 	bl	8001ac0 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe fa17 	bl	8001ac0 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e099      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ac:	4b21      	ldr	r3, [pc, #132]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x788>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036bc:	3a01      	subs	r2, #1
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	4311      	orrs	r1, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036c6:	0212      	lsls	r2, r2, #8
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036ce:	0852      	lsrs	r2, r2, #1
 80036d0:	3a01      	subs	r2, #1
 80036d2:	0552      	lsls	r2, r2, #21
 80036d4:	4311      	orrs	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036da:	0852      	lsrs	r2, r2, #1
 80036dc:	3a01      	subs	r2, #1
 80036de:	0652      	lsls	r2, r2, #25
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e6:	06d2      	lsls	r2, r2, #27
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4912      	ldr	r1, [pc, #72]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f0:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036fc:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003708:	f7fe f9da 	bl	8001ac0 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003710:	f7fe f9d6 	bl	8001ac0 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e058      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_OscConfig+0x784>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800372e:	e050      	b.n	80037d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e04f      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
 8003734:	40021000 	.word	0x40021000
 8003738:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b27      	ldr	r3, [pc, #156]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d144      	bne.n	80037d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003748:	4b24      	ldr	r3, [pc, #144]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a23      	ldr	r2, [pc, #140]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003760:	f7fe f9ae 	bl	8001ac0 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe f9aa 	bl	8001ac0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e02c      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x7b8>
 8003786:	e024      	b.n	80037d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d01f      	beq.n	80037ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379a:	f7fe f991 	bl	8001ac0 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe f98d 	bl	8001ac0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e00f      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037b4:	4b09      	ldr	r3, [pc, #36]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037c0:	4b06      	ldr	r3, [pc, #24]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	4905      	ldr	r1, [pc, #20]	; (80037dc <HAL_RCC_OscConfig+0x82c>)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCC_OscConfig+0x830>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	60cb      	str	r3, [r1, #12]
 80037cc:	e001      	b.n	80037d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40021000 	.word	0x40021000
 80037e0:	feeefffc 	.word	0xfeeefffc

080037e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e11d      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 020f 	bic.w	r2, r3, #15
 8003812:	498b      	ldr	r1, [pc, #556]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e105      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d010      	beq.n	800385a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	4b81      	ldr	r3, [pc, #516]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003844:	429a      	cmp	r2, r3
 8003846:	d908      	bls.n	800385a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003848:	4b7e      	ldr	r3, [pc, #504]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	497b      	ldr	r1, [pc, #492]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003856:	4313      	orrs	r3, r2
 8003858:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d079      	beq.n	800395a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b03      	cmp	r3, #3
 800386c:	d11e      	bne.n	80038ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386e:	4b75      	ldr	r3, [pc, #468]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e0dc      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800387e:	f000 fa3b 	bl	8003cf8 <RCC_GetSysClockFreqFromPLLSource>
 8003882:	4603      	mov	r3, r0
 8003884:	4a70      	ldr	r2, [pc, #448]	; (8003a48 <HAL_RCC_ClockConfig+0x264>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d946      	bls.n	8003918 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800388a:	4b6e      	ldr	r3, [pc, #440]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d140      	bne.n	8003918 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003896:	4b6b      	ldr	r3, [pc, #428]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800389e:	4a69      	ldr	r2, [pc, #420]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e035      	b.n	8003918 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b4:	4b63      	ldr	r3, [pc, #396]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d115      	bne.n	80038ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b9      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038cc:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0ad      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0a5      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80038ec:	f000 f8b4 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a55      	ldr	r2, [pc, #340]	; (8003a48 <HAL_RCC_ClockConfig+0x264>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d90f      	bls.n	8003918 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038f8:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390c:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800390e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003912:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003918:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 0203 	bic.w	r2, r3, #3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4947      	ldr	r1, [pc, #284]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800392a:	f7fe f8c9 	bl	8001ac0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003930:	e00a      	b.n	8003948 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003932:	f7fe f8c5 	bl	8001ac0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e077      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003948:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 020c 	and.w	r2, r3, #12
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	429a      	cmp	r2, r3
 8003958:	d1eb      	bne.n	8003932 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b80      	cmp	r3, #128	; 0x80
 800395e:	d105      	bne.n	800396c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003960:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a37      	ldr	r2, [pc, #220]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d010      	beq.n	800399a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003984:	429a      	cmp	r2, r3
 8003986:	d208      	bcs.n	800399a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	492b      	ldr	r1, [pc, #172]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399a:	4b29      	ldr	r3, [pc, #164]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d210      	bcs.n	80039ca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 020f 	bic.w	r2, r3, #15
 80039b0:	4923      	ldr	r1, [pc, #140]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b8:	4b21      	ldr	r3, [pc, #132]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e036      	b.n	8003a38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d008      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	4918      	ldr	r1, [pc, #96]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d009      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f4:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4910      	ldr	r1, [pc, #64]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a08:	f000 f826 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	490c      	ldr	r1, [pc, #48]	; (8003a4c <HAL_RCC_ClockConfig+0x268>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
 8003a24:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x26c>)
 8003a26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f004 fbbf 	bl	80081b0 <HAL_InitTick>
 8003a32:	4603      	mov	r3, r0
 8003a34:	73fb      	strb	r3, [r7, #15]

  return status;
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40021000 	.word	0x40021000
 8003a48:	04c4b400 	.word	0x04c4b400
 8003a4c:	0800b188 	.word	0x0800b188
 8003a50:	20000090 	.word	0x20000090
 8003a54:	20000084 	.word	0x20000084

08003a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a66:	4b3e      	ldr	r3, [pc, #248]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x34>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d121      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d11e      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a8c:	4b34      	ldr	r3, [pc, #208]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a98:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ab4:	4a2b      	ldr	r2, [pc, #172]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003adc:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d134      	bne.n	8003b50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_GetSysClockFreq+0xa6>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d003      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0xac>
 8003afc:	e005      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b00:	617b      	str	r3, [r7, #20]
      break;
 8003b02:	e005      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003b06:	617b      	str	r3, [r7, #20]
      break;
 8003b08:	e002      	b.n	8003b10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	617b      	str	r3, [r7, #20]
      break;
 8003b0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b10:	4b13      	ldr	r3, [pc, #76]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	091b      	lsrs	r3, r3, #4
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	fb03 f202 	mul.w	r2, r3, r2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	0e5b      	lsrs	r3, r3, #25
 8003b3c:	f003 0303 	and.w	r3, r3, #3
 8003b40:	3301      	adds	r3, #1
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b50:	69bb      	ldr	r3, [r7, #24]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3724      	adds	r7, #36	; 0x24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40021000 	.word	0x40021000
 8003b64:	0800b1a0 	.word	0x0800b1a0
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000090 	.word	0x20000090

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b8c:	f7ff fff0 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800b198 	.word	0x0800b198

08003bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bb8:	f7ff ffda 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0adb      	lsrs	r3, r3, #11
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4904      	ldr	r1, [pc, #16]	; (8003bdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	0800b198 	.word	0x0800b198

08003be0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	220f      	movs	r2, #15
 8003bee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 0203 	and.w	r2, r3, #3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_GetClockConfig+0x5c>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <HAL_RCC_GetClockConfig+0x60>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	601a      	str	r2, [r3, #0]
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40022000 	.word	0x40022000

08003c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff f8e4 	bl	8002e28 <HAL_PWREx_GetVoltageRange>
 8003c60:	6178      	str	r0, [r7, #20]
 8003c62:	e014      	b.n	8003c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c68:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c7c:	f7ff f8d4 	bl	8002e28 <HAL_PWREx_GetVoltageRange>
 8003c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c94:	d10b      	bne.n	8003cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b80      	cmp	r3, #128	; 0x80
 8003c9a:	d913      	bls.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003ca0:	d902      	bls.n	8003ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	e00d      	b.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ca8:	2301      	movs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e00a      	b.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cb2:	d902      	bls.n	8003cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	e004      	b.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d101      	bne.n	8003cc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 020f 	bic.w	r2, r3, #15
 8003ccc:	4909      	ldr	r1, [pc, #36]	; (8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003cd4:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d001      	beq.n	8003ce6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40022000 	.word	0x40022000

08003cf8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfe:	4b2d      	ldr	r3, [pc, #180]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d00b      	beq.n	8003d26 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d825      	bhi.n	8003d60 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d008      	beq.n	8003d2c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d11f      	bne.n	8003d60 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003d22:	613b      	str	r3, [r7, #16]
    break;
 8003d24:	e01f      	b.n	8003d66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003d26:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003d28:	613b      	str	r3, [r7, #16]
    break;
 8003d2a:	e01c      	b.n	8003d66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d2c:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d107      	bne.n	8003d48 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	e005      	b.n	8003d54 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	613b      	str	r3, [r7, #16]
    break;
 8003d5e:	e002      	b.n	8003d66 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
    break;
 8003d64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d66:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	3301      	adds	r3, #1
 8003d72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	fb03 f202 	mul.w	r2, r3, r2
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	0e5b      	lsrs	r3, r3, #25
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	3301      	adds	r3, #1
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003da6:	683b      	ldr	r3, [r7, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	40021000 	.word	0x40021000
 8003db8:	00f42400 	.word	0x00f42400
 8003dbc:	007a1200 	.word	0x007a1200
 8003dc0:	0800b1a0 	.word	0x0800b1a0

08003dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dcc:	2300      	movs	r3, #0
 8003dce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d040      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d02a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003de8:	2b80      	cmp	r3, #128	; 0x80
 8003dea:	d825      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dec:	2b60      	cmp	r3, #96	; 0x60
 8003dee:	d026      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003df0:	2b60      	cmp	r3, #96	; 0x60
 8003df2:	d821      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d006      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d81d      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d010      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003e04:	e018      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e06:	4b89      	ldr	r3, [pc, #548]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	4a88      	ldr	r2, [pc, #544]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e10:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e12:	e015      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fb02 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e24:	e00c      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3320      	adds	r3, #32
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fbed 	bl	800460c <RCCEx_PLLSAI2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e36:	e003      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	74fb      	strb	r3, [r7, #19]
      break;
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e40:	7cfb      	ldrb	r3, [r7, #19]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10b      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e46:	4b79      	ldr	r3, [pc, #484]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e4c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e54:	4975      	ldr	r1, [pc, #468]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e5c:	e001      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d047      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e76:	d030      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7c:	d82a      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e82:	d02a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e88:	d824      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8e:	d008      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e94:	d81e      	bhi.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e9e:	d010      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003ea0:	e018      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea2:	4b62      	ldr	r3, [pc, #392]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4a61      	ldr	r2, [pc, #388]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eae:	e015      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fab4 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ec0:	e00c      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3320      	adds	r3, #32
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fb9f 	bl	800460c <RCCEx_PLLSAI2_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ed2:	e003      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	74fb      	strb	r3, [r7, #19]
      break;
 8003ed8:	e000      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003edc:	7cfb      	ldrb	r3, [r7, #19]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10b      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ee2:	4b52      	ldr	r3, [pc, #328]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	494e      	ldr	r1, [pc, #312]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ef8:	e001      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efa:	7cfb      	ldrb	r3, [r7, #19]
 8003efc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 809f 	beq.w	800404a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f10:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b41      	ldr	r3, [pc, #260]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
 8003f32:	4b3e      	ldr	r3, [pc, #248]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a3a      	ldr	r2, [pc, #232]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f4e:	f7fd fdb7 	bl	8001ac0 <HAL_GetTick>
 8003f52:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f54:	e009      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f56:	f7fd fdb3 	bl	8001ac0 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d902      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	74fb      	strb	r3, [r7, #19]
        break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f6a:	4b31      	ldr	r3, [pc, #196]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ef      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d15b      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01f      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d019      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f9a:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa6:	4b21      	ldr	r3, [pc, #132]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	4a1f      	ldr	r2, [pc, #124]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb6:	4b1d      	ldr	r3, [pc, #116]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	4a1b      	ldr	r2, [pc, #108]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc6:	4a19      	ldr	r2, [pc, #100]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d016      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fd72 	bl	8001ac0 <HAL_GetTick>
 8003fdc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fd6e 	bl	8001ac0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d902      	bls.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff6:	e006      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ec      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004006:	7cfb      	ldrb	r3, [r7, #19]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10c      	bne.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004012:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	4903      	ldr	r1, [pc, #12]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004024:	e008      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	74bb      	strb	r3, [r7, #18]
 800402a:	e005      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800402c:	40021000 	.word	0x40021000
 8004030:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004038:	7c7b      	ldrb	r3, [r7, #17]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d105      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403e:	4ba0      	ldr	r3, [pc, #640]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	4a9f      	ldr	r2, [pc, #636]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004048:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004056:	4b9a      	ldr	r3, [pc, #616]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f023 0203 	bic.w	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	4996      	ldr	r1, [pc, #600]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004078:	4b91      	ldr	r3, [pc, #580]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f023 020c 	bic.w	r2, r3, #12
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	498e      	ldr	r1, [pc, #568]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800409a:	4b89      	ldr	r3, [pc, #548]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	4985      	ldr	r1, [pc, #532]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040bc:	4b80      	ldr	r3, [pc, #512]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ca:	497d      	ldr	r1, [pc, #500]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0310 	and.w	r3, r3, #16
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040de:	4b78      	ldr	r3, [pc, #480]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ec:	4974      	ldr	r1, [pc, #464]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	496c      	ldr	r1, [pc, #432]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004110:	4313      	orrs	r3, r2
 8004112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004130:	4963      	ldr	r1, [pc, #396]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004152:	495b      	ldr	r1, [pc, #364]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004166:	4b56      	ldr	r3, [pc, #344]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004174:	4952      	ldr	r1, [pc, #328]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004188:	4b4d      	ldr	r3, [pc, #308]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	494a      	ldr	r1, [pc, #296]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041aa:	4b45      	ldr	r3, [pc, #276]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b8:	4941      	ldr	r1, [pc, #260]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041cc:	4b3c      	ldr	r3, [pc, #240]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041d2:	f023 0203 	bic.w	r2, r3, #3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041da:	4939      	ldr	r1, [pc, #228]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d028      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ee:	4b34      	ldr	r3, [pc, #208]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fc:	4930      	ldr	r1, [pc, #192]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800420c:	d106      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420e:	4b2c      	ldr	r3, [pc, #176]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4a2b      	ldr	r2, [pc, #172]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004218:	60d3      	str	r3, [r2, #12]
 800421a:	e011      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004224:	d10c      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f8f9 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d04d      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d108      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004256:	4b1a      	ldr	r3, [pc, #104]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004258:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800425c:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004262:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004266:	e012      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004268:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800426e:	4a14      	ldr	r2, [pc, #80]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004274:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004286:	490e      	ldr	r1, [pc, #56]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004292:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004296:	d106      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004298:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800429e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042a2:	60d3      	str	r3, [r2, #12]
 80042a4:	e020      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ae:	d109      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a02      	ldr	r2, [pc, #8]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ba:	60d3      	str	r3, [r2, #12]
 80042bc:	e014      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80042be:	bf00      	nop
 80042c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f8a5 	bl	8004424 <RCCEx_PLLSAI1_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80042e4:	7cfb      	ldrb	r3, [r7, #19]
 80042e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d028      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f4:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004302:	4947      	ldr	r1, [pc, #284]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004312:	d106      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b42      	ldr	r3, [pc, #264]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a41      	ldr	r2, [pc, #260]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
 8004320:	e011      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800432a:	d10c      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3304      	adds	r3, #4
 8004330:	2101      	movs	r1, #1
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f876 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004358:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004362:	492f      	ldr	r1, [pc, #188]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004374:	d10c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3304      	adds	r3, #4
 800437a:	2102      	movs	r1, #2
 800437c:	4618      	mov	r0, r3
 800437e:	f000 f851 	bl	8004424 <RCCEx_PLLSAI1_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004386:	7cfb      	ldrb	r3, [r7, #19]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00b      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800439e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043a2:	f023 0204 	bic.w	r2, r3, #4
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	491c      	ldr	r1, [pc, #112]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043c0:	4b17      	ldr	r3, [pc, #92]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c6:	f023 0218 	bic.w	r2, r3, #24
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d0:	4913      	ldr	r1, [pc, #76]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d017      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80043e4:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f4:	490a      	ldr	r1, [pc, #40]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a04      	ldr	r2, [pc, #16]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800440e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004412:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004414:	7cbb      	ldrb	r3, [r7, #18]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40021000 	.word	0x40021000

08004424 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004432:	4b72      	ldr	r3, [pc, #456]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00e      	beq.n	800445c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800443e:	4b6f      	ldr	r3, [pc, #444]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0203 	and.w	r2, r3, #3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d103      	bne.n	8004456 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
       ||
 8004452:	2b00      	cmp	r3, #0
 8004454:	d142      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	e03f      	b.n	80044dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d018      	beq.n	8004496 <RCCEx_PLLSAI1_Config+0x72>
 8004464:	2b03      	cmp	r3, #3
 8004466:	d825      	bhi.n	80044b4 <RCCEx_PLLSAI1_Config+0x90>
 8004468:	2b01      	cmp	r3, #1
 800446a:	d002      	beq.n	8004472 <RCCEx_PLLSAI1_Config+0x4e>
 800446c:	2b02      	cmp	r3, #2
 800446e:	d009      	beq.n	8004484 <RCCEx_PLLSAI1_Config+0x60>
 8004470:	e020      	b.n	80044b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004472:	4b62      	ldr	r3, [pc, #392]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0302 	and.w	r3, r3, #2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11d      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004482:	e01a      	b.n	80044ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004484:	4b5d      	ldr	r3, [pc, #372]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448c:	2b00      	cmp	r3, #0
 800448e:	d116      	bne.n	80044be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004494:	e013      	b.n	80044be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004496:	4b59      	ldr	r3, [pc, #356]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044a2:	4b56      	ldr	r3, [pc, #344]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044b2:	e006      	b.n	80044c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      break;
 80044b8:	e004      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044ba:	bf00      	nop
 80044bc:	e002      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80044c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80044ca:	4b4c      	ldr	r3, [pc, #304]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f023 0203 	bic.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4949      	ldr	r1, [pc, #292]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 8086 	bne.w	80045f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044e4:	4b45      	ldr	r3, [pc, #276]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a44      	ldr	r2, [pc, #272]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80044ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f0:	f7fd fae6 	bl	8001ac0 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044f6:	e009      	b.n	800450c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f8:	f7fd fae2 	bl	8001ac0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d902      	bls.n	800450c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	73fb      	strb	r3, [r7, #15]
        break;
 800450a:	e005      	b.n	8004518 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800450c:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ef      	bne.n	80044f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d168      	bne.n	80045f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d113      	bne.n	800454c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004524:	4b35      	ldr	r3, [pc, #212]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <RCCEx_PLLSAI1_Config+0x1dc>)
 800452a:	4013      	ands	r3, r2
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6892      	ldr	r2, [r2, #8]
 8004530:	0211      	lsls	r1, r2, #8
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	06d2      	lsls	r2, r2, #27
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6852      	ldr	r2, [r2, #4]
 800453e:	3a01      	subs	r2, #1
 8004540:	0112      	lsls	r2, r2, #4
 8004542:	430a      	orrs	r2, r1
 8004544:	492d      	ldr	r1, [pc, #180]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004546:	4313      	orrs	r3, r2
 8004548:	610b      	str	r3, [r1, #16]
 800454a:	e02d      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d115      	bne.n	800457e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004554:	691a      	ldr	r2, [r3, #16]
 8004556:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6892      	ldr	r2, [r2, #8]
 800455e:	0211      	lsls	r1, r2, #8
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6912      	ldr	r2, [r2, #16]
 8004564:	0852      	lsrs	r2, r2, #1
 8004566:	3a01      	subs	r2, #1
 8004568:	0552      	lsls	r2, r2, #21
 800456a:	4311      	orrs	r1, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6852      	ldr	r2, [r2, #4]
 8004570:	3a01      	subs	r2, #1
 8004572:	0112      	lsls	r2, r2, #4
 8004574:	430a      	orrs	r2, r1
 8004576:	4921      	ldr	r1, [pc, #132]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004578:	4313      	orrs	r3, r2
 800457a:	610b      	str	r3, [r1, #16]
 800457c:	e014      	b.n	80045a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800457e:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	4b21      	ldr	r3, [pc, #132]	; (8004608 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004584:	4013      	ands	r3, r2
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6892      	ldr	r2, [r2, #8]
 800458a:	0211      	lsls	r1, r2, #8
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6952      	ldr	r2, [r2, #20]
 8004590:	0852      	lsrs	r2, r2, #1
 8004592:	3a01      	subs	r2, #1
 8004594:	0652      	lsls	r2, r2, #25
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6852      	ldr	r2, [r2, #4]
 800459c:	3a01      	subs	r2, #1
 800459e:	0112      	lsls	r2, r2, #4
 80045a0:	430a      	orrs	r2, r1
 80045a2:	4916      	ldr	r1, [pc, #88]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045a8:	4b14      	ldr	r3, [pc, #80]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b4:	f7fd fa84 	bl	8001ac0 <HAL_GetTick>
 80045b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045ba:	e009      	b.n	80045d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045bc:	f7fd fa80 	bl	8001ac0 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d902      	bls.n	80045d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	73fb      	strb	r3, [r7, #15]
          break;
 80045ce:	e005      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d0:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0ef      	beq.n	80045bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	07ff800f 	.word	0x07ff800f
 8004604:	ff9f800f 	.word	0xff9f800f
 8004608:	f9ff800f 	.word	0xf9ff800f

0800460c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004626:	4b6f      	ldr	r3, [pc, #444]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0203 	and.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d103      	bne.n	800463e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
       ||
 800463a:	2b00      	cmp	r3, #0
 800463c:	d142      	bne.n	80046c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	e03f      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d018      	beq.n	800467e <RCCEx_PLLSAI2_Config+0x72>
 800464c:	2b03      	cmp	r3, #3
 800464e:	d825      	bhi.n	800469c <RCCEx_PLLSAI2_Config+0x90>
 8004650:	2b01      	cmp	r3, #1
 8004652:	d002      	beq.n	800465a <RCCEx_PLLSAI2_Config+0x4e>
 8004654:	2b02      	cmp	r3, #2
 8004656:	d009      	beq.n	800466c <RCCEx_PLLSAI2_Config+0x60>
 8004658:	e020      	b.n	800469c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800465a:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11d      	bne.n	80046a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466a:	e01a      	b.n	80046a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800466c:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d116      	bne.n	80046a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467c:	e013      	b.n	80046a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467e:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800468a:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800469a:	e006      	b.n	80046aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      break;
 80046a0:	e004      	b.n	80046ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80046aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80046b2:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4949      	ldr	r1, [pc, #292]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 8086 	bne.w	80047d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046cc:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a44      	ldr	r2, [pc, #272]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d8:	f7fd f9f2 	bl	8001ac0 <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046de:	e009      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046e0:	f7fd f9ee 	bl	8001ac0 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	73fb      	strb	r3, [r7, #15]
        break;
 80046f2:	e005      	b.n	8004700 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f4:	4b3b      	ldr	r3, [pc, #236]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ef      	bne.n	80046e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d168      	bne.n	80047d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800470e:	695a      	ldr	r2, [r3, #20]
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004712:	4013      	ands	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6892      	ldr	r2, [r2, #8]
 8004718:	0211      	lsls	r1, r2, #8
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	06d2      	lsls	r2, r2, #27
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6852      	ldr	r2, [r2, #4]
 8004726:	3a01      	subs	r2, #1
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	430a      	orrs	r2, r1
 800472c:	492d      	ldr	r1, [pc, #180]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	614b      	str	r3, [r1, #20]
 8004732:	e02d      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d115      	bne.n	8004766 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800473a:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6892      	ldr	r2, [r2, #8]
 8004746:	0211      	lsls	r1, r2, #8
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6912      	ldr	r2, [r2, #16]
 800474c:	0852      	lsrs	r2, r2, #1
 800474e:	3a01      	subs	r2, #1
 8004750:	0552      	lsls	r2, r2, #21
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6852      	ldr	r2, [r2, #4]
 8004758:	3a01      	subs	r2, #1
 800475a:	0112      	lsls	r2, r2, #4
 800475c:	430a      	orrs	r2, r1
 800475e:	4921      	ldr	r1, [pc, #132]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004760:	4313      	orrs	r3, r2
 8004762:	614b      	str	r3, [r1, #20]
 8004764:	e014      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004766:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	0211      	lsls	r1, r2, #8
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6952      	ldr	r2, [r2, #20]
 8004778:	0852      	lsrs	r2, r2, #1
 800477a:	3a01      	subs	r2, #1
 800477c:	0652      	lsls	r2, r2, #25
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6852      	ldr	r2, [r2, #4]
 8004784:	3a01      	subs	r2, #1
 8004786:	0112      	lsls	r2, r2, #4
 8004788:	430a      	orrs	r2, r1
 800478a:	4916      	ldr	r1, [pc, #88]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fd f990 	bl	8001ac0 <HAL_GetTick>
 80047a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047a2:	e009      	b.n	80047b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047a4:	f7fd f98c 	bl	8001ac0 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	73fb      	strb	r3, [r7, #15]
          break;
 80047b6:	e005      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	4904      	ldr	r1, [pc, #16]	; (80047e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	07ff800f 	.word	0x07ff800f
 80047ec:	ff9f800f 	.word	0xff9f800f
 80047f0:	f9ff800f 	.word	0xf9ff800f

080047f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e049      	b.n	800489a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f841 	bl	80048a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	4619      	mov	r1, r3
 8004832:	4610      	mov	r0, r2
 8004834:	f000 f9f8 	bl	8004c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d001      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04f      	b.n	8004970 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a23      	ldr	r2, [pc, #140]	; (800497c <HAL_TIM_Base_Start_IT+0xc4>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x76>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048fa:	d018      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x76>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1f      	ldr	r2, [pc, #124]	; (8004980 <HAL_TIM_Base_Start_IT+0xc8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x76>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <HAL_TIM_Base_Start_IT+0xcc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x76>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1c      	ldr	r2, [pc, #112]	; (8004988 <HAL_TIM_Base_Start_IT+0xd0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x76>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1b      	ldr	r2, [pc, #108]	; (800498c <HAL_TIM_Base_Start_IT+0xd4>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_Base_Start_IT+0x76>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_TIM_Base_Start_IT+0xd8>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d115      	bne.n	800495a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	4b17      	ldr	r3, [pc, #92]	; (8004994 <HAL_TIM_Base_Start_IT+0xdc>)
 8004936:	4013      	ands	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d015      	beq.n	800496c <HAL_TIM_Base_Start_IT+0xb4>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004946:	d011      	beq.n	800496c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004958:	e008      	b.n	800496c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e000      	b.n	800496e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40000400 	.word	0x40000400
 8004984:	40000800 	.word	0x40000800
 8004988:	40000c00 	.word	0x40000c00
 800498c:	40013400 	.word	0x40013400
 8004990:	40014000 	.word	0x40014000
 8004994:	00010007 	.word	0x00010007

08004998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d122      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d11b      	bne.n	80049f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0202 	mvn.w	r2, #2
 80049c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0303 	and.w	r3, r3, #3
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f905 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 80049e0:	e005      	b.n	80049ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f8f7 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f908 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d122      	bne.n	8004a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d11b      	bne.n	8004a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0204 	mvn.w	r2, #4
 8004a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f8db 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004a34:	e005      	b.n	8004a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f8cd 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8de 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d122      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d11b      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0208 	mvn.w	r2, #8
 8004a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2204      	movs	r2, #4
 8004a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 f8b1 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004a88:	e005      	b.n	8004a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f8a3 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f8b4 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0310 	and.w	r3, r3, #16
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d122      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d11b      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0210 	mvn.w	r2, #16
 8004ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f887 	bl	8004bea <HAL_TIM_IC_CaptureCallback>
 8004adc:	e005      	b.n	8004aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f879 	bl	8004bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f88a 	bl	8004bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d10e      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d107      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0201 	mvn.w	r2, #1
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f003 fa2a 	bl	8007f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b26:	2b80      	cmp	r3, #128	; 0x80
 8004b28:	d10e      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d107      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f914 	bl	8004d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b56:	d10e      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d107      	bne.n	8004b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f907 	bl	8004d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d10e      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f838 	bl	8004c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f003 0320 	and.w	r3, r3, #32
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d10e      	bne.n	8004bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f06f 0220 	mvn.w	r2, #32
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8c7 	bl	8004d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a40      	ldr	r2, [pc, #256]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d00f      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3d      	ldr	r2, [pc, #244]	; (8004d40 <TIM_Base_SetConfig+0x118>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3c      	ldr	r2, [pc, #240]	; (8004d44 <TIM_Base_SetConfig+0x11c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d007      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3b      	ldr	r2, [pc, #236]	; (8004d48 <TIM_Base_SetConfig+0x120>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d003      	beq.n	8004c68 <TIM_Base_SetConfig+0x40>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a3a      	ldr	r2, [pc, #232]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d108      	bne.n	8004c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2f      	ldr	r2, [pc, #188]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01f      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c88:	d01b      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2c      	ldr	r2, [pc, #176]	; (8004d40 <TIM_Base_SetConfig+0x118>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d017      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <TIM_Base_SetConfig+0x11c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a2a      	ldr	r2, [pc, #168]	; (8004d48 <TIM_Base_SetConfig+0x120>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00f      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a29      	ldr	r2, [pc, #164]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00b      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a28      	ldr	r2, [pc, #160]	; (8004d50 <TIM_Base_SetConfig+0x128>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a27      	ldr	r2, [pc, #156]	; (8004d54 <TIM_Base_SetConfig+0x12c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_Base_SetConfig+0x9a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a26      	ldr	r2, [pc, #152]	; (8004d58 <TIM_Base_SetConfig+0x130>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d108      	bne.n	8004cd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <TIM_Base_SetConfig+0x114>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00f      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a12      	ldr	r2, [pc, #72]	; (8004d4c <TIM_Base_SetConfig+0x124>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a11      	ldr	r2, [pc, #68]	; (8004d50 <TIM_Base_SetConfig+0x128>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a10      	ldr	r2, [pc, #64]	; (8004d54 <TIM_Base_SetConfig+0x12c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_Base_SetConfig+0xf8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a0f      	ldr	r2, [pc, #60]	; (8004d58 <TIM_Base_SetConfig+0x130>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40012c00 	.word	0x40012c00
 8004d40:	40000400 	.word	0x40000400
 8004d44:	40000800 	.word	0x40000800
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40014000 	.word	0x40014000
 8004d54:	40014400 	.word	0x40014400
 8004d58:	40014800 	.word	0x40014800

08004d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e042      	b.n	8004e30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f003 f999 	bl	80080f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2224      	movs	r2, #36	; 0x24
 8004dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8c4 	bl	8004f68 <UART_SetConfig>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e022      	b.n	8004e30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fbb4 	bl	8005560 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f042 0201 	orr.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fc3b 	bl	80056a4 <UART_CheckIdleState>
 8004e2e:	4603      	mov	r3, r0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	; 0x28
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	f040 8084 	bne.w	8004f5c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Transmit+0x28>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e07c      	b.n	8004f5e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Transmit+0x3a>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e075      	b.n	8004f5e <HAL_UART_Transmit+0x126>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2221      	movs	r2, #33	; 0x21
 8004e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fe19 	bl	8001ac0 <HAL_GetTick>
 8004e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	88fa      	ldrh	r2, [r7, #6]
 8004e94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ea8:	d108      	bne.n	8004ebc <HAL_UART_Transmit+0x84>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d104      	bne.n	8004ebc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	61bb      	str	r3, [r7, #24]
 8004eba:	e003      	b.n	8004ec4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004ecc:	e02d      	b.n	8004f2a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fc2e 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e03a      	b.n	8004f5e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	881a      	ldrh	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004efa:	b292      	uxth	r2, r2
 8004efc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	3302      	adds	r3, #2
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e008      	b.n	8004f18 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	781a      	ldrb	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	b292      	uxth	r2, r2
 8004f10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	3301      	adds	r3, #1
 8004f16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b01      	subs	r3, #1
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1cb      	bne.n	8004ece <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2140      	movs	r1, #64	; 0x40
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fbfa 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e006      	b.n	8004f5e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f6c:	b08c      	sub	sp, #48	; 0x30
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	431a      	orrs	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	431a      	orrs	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4baa      	ldr	r3, [pc, #680]	; (8005240 <UART_SetConfig+0x2d8>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a9f      	ldr	r2, [pc, #636]	; (8005244 <UART_SetConfig+0x2dc>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004fde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff2:	f023 010f 	bic.w	r1, r3, #15
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a90      	ldr	r2, [pc, #576]	; (8005248 <UART_SetConfig+0x2e0>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d125      	bne.n	8005058 <UART_SetConfig+0xf0>
 800500c:	4b8f      	ldr	r3, [pc, #572]	; (800524c <UART_SetConfig+0x2e4>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b03      	cmp	r3, #3
 8005018:	d81a      	bhi.n	8005050 <UART_SetConfig+0xe8>
 800501a:	a201      	add	r2, pc, #4	; (adr r2, 8005020 <UART_SetConfig+0xb8>)
 800501c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005020:	08005031 	.word	0x08005031
 8005024:	08005041 	.word	0x08005041
 8005028:	08005039 	.word	0x08005039
 800502c:	08005049 	.word	0x08005049
 8005030:	2301      	movs	r3, #1
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005036:	e116      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800503e:	e112      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005046:	e10e      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800504e:	e10a      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005056:	e106      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7c      	ldr	r2, [pc, #496]	; (8005250 <UART_SetConfig+0x2e8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d138      	bne.n	80050d4 <UART_SetConfig+0x16c>
 8005062:	4b7a      	ldr	r3, [pc, #488]	; (800524c <UART_SetConfig+0x2e4>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d82d      	bhi.n	80050cc <UART_SetConfig+0x164>
 8005070:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x110>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050cd 	.word	0x080050cd
 8005080:	080050cd 	.word	0x080050cd
 8005084:	080050cd 	.word	0x080050cd
 8005088:	080050bd 	.word	0x080050bd
 800508c:	080050cd 	.word	0x080050cd
 8005090:	080050cd 	.word	0x080050cd
 8005094:	080050cd 	.word	0x080050cd
 8005098:	080050b5 	.word	0x080050b5
 800509c:	080050cd 	.word	0x080050cd
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	080050cd 	.word	0x080050cd
 80050a8:	080050c5 	.word	0x080050c5
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050b2:	e0d8      	b.n	8005266 <UART_SetConfig+0x2fe>
 80050b4:	2302      	movs	r3, #2
 80050b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ba:	e0d4      	b.n	8005266 <UART_SetConfig+0x2fe>
 80050bc:	2304      	movs	r3, #4
 80050be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050c2:	e0d0      	b.n	8005266 <UART_SetConfig+0x2fe>
 80050c4:	2308      	movs	r3, #8
 80050c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ca:	e0cc      	b.n	8005266 <UART_SetConfig+0x2fe>
 80050cc:	2310      	movs	r3, #16
 80050ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050d2:	e0c8      	b.n	8005266 <UART_SetConfig+0x2fe>
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <UART_SetConfig+0x2ec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d125      	bne.n	800512a <UART_SetConfig+0x1c2>
 80050de:	4b5b      	ldr	r3, [pc, #364]	; (800524c <UART_SetConfig+0x2e4>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80050e8:	2b30      	cmp	r3, #48	; 0x30
 80050ea:	d016      	beq.n	800511a <UART_SetConfig+0x1b2>
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d818      	bhi.n	8005122 <UART_SetConfig+0x1ba>
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d00a      	beq.n	800510a <UART_SetConfig+0x1a2>
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d814      	bhi.n	8005122 <UART_SetConfig+0x1ba>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <UART_SetConfig+0x19a>
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d008      	beq.n	8005112 <UART_SetConfig+0x1aa>
 8005100:	e00f      	b.n	8005122 <UART_SetConfig+0x1ba>
 8005102:	2300      	movs	r3, #0
 8005104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005108:	e0ad      	b.n	8005266 <UART_SetConfig+0x2fe>
 800510a:	2302      	movs	r3, #2
 800510c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005110:	e0a9      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005112:	2304      	movs	r3, #4
 8005114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005118:	e0a5      	b.n	8005266 <UART_SetConfig+0x2fe>
 800511a:	2308      	movs	r3, #8
 800511c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005120:	e0a1      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005122:	2310      	movs	r3, #16
 8005124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005128:	e09d      	b.n	8005266 <UART_SetConfig+0x2fe>
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a4a      	ldr	r2, [pc, #296]	; (8005258 <UART_SetConfig+0x2f0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d125      	bne.n	8005180 <UART_SetConfig+0x218>
 8005134:	4b45      	ldr	r3, [pc, #276]	; (800524c <UART_SetConfig+0x2e4>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800513e:	2bc0      	cmp	r3, #192	; 0xc0
 8005140:	d016      	beq.n	8005170 <UART_SetConfig+0x208>
 8005142:	2bc0      	cmp	r3, #192	; 0xc0
 8005144:	d818      	bhi.n	8005178 <UART_SetConfig+0x210>
 8005146:	2b80      	cmp	r3, #128	; 0x80
 8005148:	d00a      	beq.n	8005160 <UART_SetConfig+0x1f8>
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d814      	bhi.n	8005178 <UART_SetConfig+0x210>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <UART_SetConfig+0x1f0>
 8005152:	2b40      	cmp	r3, #64	; 0x40
 8005154:	d008      	beq.n	8005168 <UART_SetConfig+0x200>
 8005156:	e00f      	b.n	8005178 <UART_SetConfig+0x210>
 8005158:	2300      	movs	r3, #0
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e082      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005160:	2302      	movs	r3, #2
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005166:	e07e      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005168:	2304      	movs	r3, #4
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e07a      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005170:	2308      	movs	r3, #8
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005176:	e076      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005178:	2310      	movs	r3, #16
 800517a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800517e:	e072      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a35      	ldr	r2, [pc, #212]	; (800525c <UART_SetConfig+0x2f4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d12a      	bne.n	80051e0 <UART_SetConfig+0x278>
 800518a:	4b30      	ldr	r3, [pc, #192]	; (800524c <UART_SetConfig+0x2e4>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005194:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005198:	d01a      	beq.n	80051d0 <UART_SetConfig+0x268>
 800519a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519e:	d81b      	bhi.n	80051d8 <UART_SetConfig+0x270>
 80051a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a4:	d00c      	beq.n	80051c0 <UART_SetConfig+0x258>
 80051a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051aa:	d815      	bhi.n	80051d8 <UART_SetConfig+0x270>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <UART_SetConfig+0x250>
 80051b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b4:	d008      	beq.n	80051c8 <UART_SetConfig+0x260>
 80051b6:	e00f      	b.n	80051d8 <UART_SetConfig+0x270>
 80051b8:	2300      	movs	r3, #0
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051be:	e052      	b.n	8005266 <UART_SetConfig+0x2fe>
 80051c0:	2302      	movs	r3, #2
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c6:	e04e      	b.n	8005266 <UART_SetConfig+0x2fe>
 80051c8:	2304      	movs	r3, #4
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ce:	e04a      	b.n	8005266 <UART_SetConfig+0x2fe>
 80051d0:	2308      	movs	r3, #8
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051d6:	e046      	b.n	8005266 <UART_SetConfig+0x2fe>
 80051d8:	2310      	movs	r3, #16
 80051da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051de:	e042      	b.n	8005266 <UART_SetConfig+0x2fe>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a17      	ldr	r2, [pc, #92]	; (8005244 <UART_SetConfig+0x2dc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d13a      	bne.n	8005260 <UART_SetConfig+0x2f8>
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <UART_SetConfig+0x2e4>)
 80051ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051f8:	d01a      	beq.n	8005230 <UART_SetConfig+0x2c8>
 80051fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051fe:	d81b      	bhi.n	8005238 <UART_SetConfig+0x2d0>
 8005200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005204:	d00c      	beq.n	8005220 <UART_SetConfig+0x2b8>
 8005206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520a:	d815      	bhi.n	8005238 <UART_SetConfig+0x2d0>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <UART_SetConfig+0x2b0>
 8005210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005214:	d008      	beq.n	8005228 <UART_SetConfig+0x2c0>
 8005216:	e00f      	b.n	8005238 <UART_SetConfig+0x2d0>
 8005218:	2300      	movs	r3, #0
 800521a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800521e:	e022      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005220:	2302      	movs	r3, #2
 8005222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005226:	e01e      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005228:	2304      	movs	r3, #4
 800522a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800522e:	e01a      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005230:	2308      	movs	r3, #8
 8005232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005236:	e016      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005238:	2310      	movs	r3, #16
 800523a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800523e:	e012      	b.n	8005266 <UART_SetConfig+0x2fe>
 8005240:	cfff69f3 	.word	0xcfff69f3
 8005244:	40008000 	.word	0x40008000
 8005248:	40013800 	.word	0x40013800
 800524c:	40021000 	.word	0x40021000
 8005250:	40004400 	.word	0x40004400
 8005254:	40004800 	.word	0x40004800
 8005258:	40004c00 	.word	0x40004c00
 800525c:	40005000 	.word	0x40005000
 8005260:	2310      	movs	r3, #16
 8005262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4aae      	ldr	r2, [pc, #696]	; (8005524 <UART_SetConfig+0x5bc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	f040 8097 	bne.w	80053a0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005276:	2b08      	cmp	r3, #8
 8005278:	d823      	bhi.n	80052c2 <UART_SetConfig+0x35a>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0x318>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052c3 	.word	0x080052c3
 8005288:	080052ad 	.word	0x080052ad
 800528c:	080052c3 	.word	0x080052c3
 8005290:	080052b3 	.word	0x080052b3
 8005294:	080052c3 	.word	0x080052c3
 8005298:	080052c3 	.word	0x080052c3
 800529c:	080052c3 	.word	0x080052c3
 80052a0:	080052bb 	.word	0x080052bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7fe fc70 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052aa:	e010      	b.n	80052ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052ac:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <UART_SetConfig+0x5c0>)
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052b0:	e00d      	b.n	80052ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052b2:	f7fe fbd1 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80052b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80052b8:	e009      	b.n	80052ce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80052c0:	e005      	b.n	80052ce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80052cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8130 	beq.w	8005536 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	4a94      	ldr	r2, [pc, #592]	; (800552c <UART_SetConfig+0x5c4>)
 80052dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052e0:	461a      	mov	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	685a      	ldr	r2, [r3, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d305      	bcc.n	8005306 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	429a      	cmp	r2, r3
 8005304:	d903      	bls.n	800530e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800530c:	e113      	b.n	8005536 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	2200      	movs	r2, #0
 8005312:	60bb      	str	r3, [r7, #8]
 8005314:	60fa      	str	r2, [r7, #12]
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	4a84      	ldr	r2, [pc, #528]	; (800552c <UART_SetConfig+0x5c4>)
 800531c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005320:	b29b      	uxth	r3, r3
 8005322:	2200      	movs	r2, #0
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	607a      	str	r2, [r7, #4]
 8005328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800532c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005330:	f7fb fc52 	bl	8000bd8 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4610      	mov	r0, r2
 800533a:	4619      	mov	r1, r3
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	020b      	lsls	r3, r1, #8
 8005346:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800534a:	0202      	lsls	r2, r0, #8
 800534c:	6979      	ldr	r1, [r7, #20]
 800534e:	6849      	ldr	r1, [r1, #4]
 8005350:	0849      	lsrs	r1, r1, #1
 8005352:	2000      	movs	r0, #0
 8005354:	460c      	mov	r4, r1
 8005356:	4605      	mov	r5, r0
 8005358:	eb12 0804 	adds.w	r8, r2, r4
 800535c:	eb43 0905 	adc.w	r9, r3, r5
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	469a      	mov	sl, r3
 8005368:	4693      	mov	fp, r2
 800536a:	4652      	mov	r2, sl
 800536c:	465b      	mov	r3, fp
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fb fc31 	bl	8000bd8 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4613      	mov	r3, r2
 800537c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005384:	d308      	bcc.n	8005398 <UART_SetConfig+0x430>
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800538c:	d204      	bcs.n	8005398 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	e0ce      	b.n	8005536 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800539e:	e0ca      	b.n	8005536 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a8:	d166      	bne.n	8005478 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80053aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d827      	bhi.n	8005402 <UART_SetConfig+0x49a>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0x450>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	08005403 	.word	0x08005403
 80053c8:	080053f3 	.word	0x080053f3
 80053cc:	08005403 	.word	0x08005403
 80053d0:	08005403 	.word	0x08005403
 80053d4:	08005403 	.word	0x08005403
 80053d8:	080053fb 	.word	0x080053fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053dc:	f7fe fbd4 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053e2:	e014      	b.n	800540e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053e4:	f7fe fbe6 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 80053e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053ea:	e010      	b.n	800540e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053ec:	4b4e      	ldr	r3, [pc, #312]	; (8005528 <UART_SetConfig+0x5c0>)
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80053f0:	e00d      	b.n	800540e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053f2:	f7fe fb31 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80053f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80053f8:	e009      	b.n	800540e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005400:	e005      	b.n	800540e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800540c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8090 	beq.w	8005536 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	4a44      	ldr	r2, [pc, #272]	; (800552c <UART_SetConfig+0x5c4>)
 800541c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005420:	461a      	mov	r2, r3
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	fbb3 f3f2 	udiv	r3, r3, r2
 8005428:	005a      	lsls	r2, r3, #1
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	085b      	lsrs	r3, r3, #1
 8005430:	441a      	add	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	fbb2 f3f3 	udiv	r3, r2, r3
 800543a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b0f      	cmp	r3, #15
 8005440:	d916      	bls.n	8005470 <UART_SetConfig+0x508>
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005448:	d212      	bcs.n	8005470 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	b29b      	uxth	r3, r3
 800544e:	f023 030f 	bic.w	r3, r3, #15
 8005452:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	b29b      	uxth	r3, r3
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	b29a      	uxth	r2, r3
 8005460:	8bfb      	ldrh	r3, [r7, #30]
 8005462:	4313      	orrs	r3, r2
 8005464:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	8bfa      	ldrh	r2, [r7, #30]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	e062      	b.n	8005536 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005476:	e05e      	b.n	8005536 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005478:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800547c:	2b08      	cmp	r3, #8
 800547e:	d828      	bhi.n	80054d2 <UART_SetConfig+0x56a>
 8005480:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0x520>)
 8005482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005486:	bf00      	nop
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054b5 	.word	0x080054b5
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054d3 	.word	0x080054d3
 8005498:	080054c3 	.word	0x080054c3
 800549c:	080054d3 	.word	0x080054d3
 80054a0:	080054d3 	.word	0x080054d3
 80054a4:	080054d3 	.word	0x080054d3
 80054a8:	080054cb 	.word	0x080054cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ac:	f7fe fb6c 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 80054b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054b2:	e014      	b.n	80054de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054b4:	f7fe fb7e 	bl	8003bb4 <HAL_RCC_GetPCLK2Freq>
 80054b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054ba:	e010      	b.n	80054de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054bc:	4b1a      	ldr	r3, [pc, #104]	; (8005528 <UART_SetConfig+0x5c0>)
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054c0:	e00d      	b.n	80054de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054c2:	f7fe fac9 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054c8:	e009      	b.n	80054de <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054d0:	e005      	b.n	80054de <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80054dc:	bf00      	nop
    }

    if (pclk != 0U)
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d028      	beq.n	8005536 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	4a10      	ldr	r2, [pc, #64]	; (800552c <UART_SetConfig+0x5c4>)
 80054ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	441a      	add	r2, r3
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	fbb2 f3f3 	udiv	r3, r2, r3
 8005506:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d910      	bls.n	8005530 <UART_SetConfig+0x5c8>
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005514:	d20c      	bcs.n	8005530 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	b29a      	uxth	r2, r3
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60da      	str	r2, [r3, #12]
 8005520:	e009      	b.n	8005536 <UART_SetConfig+0x5ce>
 8005522:	bf00      	nop
 8005524:	40008000 	.word	0x40008000
 8005528:	00f42400 	.word	0x00f42400
 800552c:	0800b160 	.word	0x0800b160
      }
      else
      {
        ret = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2201      	movs	r2, #1
 800553a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2201      	movs	r2, #1
 8005542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2200      	movs	r2, #0
 800554a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2200      	movs	r2, #0
 8005550:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005552:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005556:	4618      	mov	r0, r3
 8005558:	3730      	adds	r7, #48	; 0x30
 800555a:	46bd      	mov	sp, r7
 800555c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005560 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f003 0310 	and.w	r3, r3, #16
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01a      	beq.n	8005676 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565e:	d10a      	bne.n	8005676 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	605a      	str	r2, [r3, #4]
  }
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af02      	add	r7, sp, #8
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056b4:	f7fc fa04 	bl	8001ac0 <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0308 	and.w	r3, r3, #8
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d10e      	bne.n	80056e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f82f 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e025      	b.n	8005732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d10e      	bne.n	8005712 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f819 	bl	800573a <UART_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e00f      	b.n	8005732 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b09c      	sub	sp, #112	; 0x70
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	603b      	str	r3, [r7, #0]
 8005746:	4613      	mov	r3, r2
 8005748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574a:	e0a9      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800574c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005752:	f000 80a5 	beq.w	80058a0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005756:	f7fc f9b3 	bl	8001ac0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <UART_WaitOnFlagUntilTimeout+0x32>
 8005766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005768:	2b00      	cmp	r3, #0
 800576a:	d140      	bne.n	80057ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005774:	e853 3f00 	ldrex	r3, [r3]
 8005778:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800577a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005780:	667b      	str	r3, [r7, #100]	; 0x64
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800578a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800578c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005790:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1e6      	bne.n	800576c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	3308      	adds	r3, #8
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	663b      	str	r3, [r7, #96]	; 0x60
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057be:	64ba      	str	r2, [r7, #72]	; 0x48
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e5      	bne.n	800579e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e069      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d051      	beq.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800580a:	d149      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005814:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800582a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
 8005836:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800583a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	613b      	str	r3, [r7, #16]
   return(result);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005868:	623a      	str	r2, [r7, #32]
 800586a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	69f9      	ldr	r1, [r7, #28]
 800586e:	6a3a      	ldr	r2, [r7, #32]
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	61bb      	str	r3, [r7, #24]
   return(result);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e010      	b.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4013      	ands	r3, r2
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	bf0c      	ite	eq
 80058b0:	2301      	moveq	r3, #1
 80058b2:	2300      	movne	r3, #0
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	461a      	mov	r2, r3
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	f43f af46 	beq.w	800574c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3770      	adds	r7, #112	; 0x70
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d101      	bne.n	80058e0 <HAL_UARTEx_DisableFifoMode+0x16>
 80058dc:	2302      	movs	r3, #2
 80058de:	e027      	b.n	8005930 <HAL_UARTEx_DisableFifoMode+0x66>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2224      	movs	r2, #36	; 0x24
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800590e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e02d      	b.n	80059b0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2224      	movs	r2, #36	; 0x24
 8005960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0201 	bic.w	r2, r2, #1
 800597a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f84f 	bl	8005a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059cc:	2302      	movs	r3, #2
 80059ce:	e02d      	b.n	8005a2c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	; 0x24
 80059dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 0201 	bic.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f811 	bl	8005a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2220      	movs	r2, #32
 8005a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d108      	bne.n	8005a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a54:	e031      	b.n	8005aba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a56:	2308      	movs	r3, #8
 8005a58:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	0e5b      	lsrs	r3, r3, #25
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0307 	and.w	r3, r3, #7
 8005a6c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	0f5b      	lsrs	r3, r3, #29
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	7b3a      	ldrb	r2, [r7, #12]
 8005a82:	4911      	ldr	r1, [pc, #68]	; (8005ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a84:	5c8a      	ldrb	r2, [r1, r2]
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a8a:	7b3a      	ldrb	r2, [r7, #12]
 8005a8c:	490f      	ldr	r1, [pc, #60]	; (8005acc <UARTEx_SetNbDataToProcess+0x98>)
 8005a8e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a90:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	7b7a      	ldrb	r2, [r7, #13]
 8005aa0:	4909      	ldr	r1, [pc, #36]	; (8005ac8 <UARTEx_SetNbDataToProcess+0x94>)
 8005aa2:	5c8a      	ldrb	r2, [r1, r2]
 8005aa4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aa8:	7b7a      	ldrb	r2, [r7, #13]
 8005aaa:	4908      	ldr	r1, [pc, #32]	; (8005acc <UARTEx_SetNbDataToProcess+0x98>)
 8005aac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	0800b178 	.word	0x0800b178
 8005acc:	0800b180 	.word	0x0800b180

08005ad0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae2:	2b84      	cmp	r3, #132	; 0x84
 8005ae4:	d005      	beq.n	8005af2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005ae6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	3303      	adds	r3, #3
 8005af0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005af2:	68fb      	ldr	r3, [r7, #12]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b04:	f000 fe50 	bl	80067a8 <vTaskStartScheduler>
  
  return osOK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b10:	b089      	sub	sp, #36	; 0x24
 8005b12:	af04      	add	r7, sp, #16
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d020      	beq.n	8005b62 <osThreadCreate+0x54>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01c      	beq.n	8005b62 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685c      	ldr	r4, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681d      	ldr	r5, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691e      	ldr	r6, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ffc8 	bl	8005ad0 <makeFreeRtosPriority>
 8005b40:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b4a:	9202      	str	r2, [sp, #8]
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	9100      	str	r1, [sp, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4632      	mov	r2, r6
 8005b54:	4629      	mov	r1, r5
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 fc5e 	bl	8006418 <xTaskCreateStatic>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e01c      	b.n	8005b9c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685c      	ldr	r4, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005b6e:	b29e      	uxth	r6, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff ffaa 	bl	8005ad0 <makeFreeRtosPriority>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f107 030c 	add.w	r3, r7, #12
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	9200      	str	r2, [sp, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 fca0 	bl	80064d2 <xTaskCreate>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d001      	beq.n	8005b9c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e000      	b.n	8005b9e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ba6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b084      	sub	sp, #16
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <osDelay+0x16>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	e000      	b.n	8005bbe <osDelay+0x18>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fdbe 	bl	8006740 <vTaskDelay>
  
  return osOK;
 8005bc4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b082      	sub	sp, #8
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4619      	mov	r1, r3
 8005be4:	2001      	movs	r0, #1
 8005be6:	f000 fa2a 	bl	800603e <xQueueCreateMutexStatic>
 8005bea:	4603      	mov	r3, r0
 8005bec:	e003      	b.n	8005bf6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f000 fa0d 	bl	800600e <xQueueCreateMutex>
 8005bf4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3708      	adds	r7, #8
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f103 0208 	add.w	r2, r3, #8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c16:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f103 0208 	add.w	r2, r3, #8
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f103 0208 	add.w	r2, r3, #8
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	683a      	ldr	r2, [r7, #0]
 8005c82:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	601a      	str	r2, [r3, #0]
}
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cb6:	d103      	bne.n	8005cc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	e00c      	b.n	8005cda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	e002      	b.n	8005cce <vListInsert+0x2e>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d2f6      	bcs.n	8005cc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	601a      	str	r2, [r3, #0]
}
 8005d06:	bf00      	nop
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	6892      	ldr	r2, [r2, #8]
 8005d28:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6852      	ldr	r2, [r2, #4]
 8005d32:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d103      	bne.n	8005d46 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	1e5a      	subs	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d92:	f001 fb3f 	bl	8007414 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	68f9      	ldr	r1, [r7, #12]
 8005da0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005da2:	fb01 f303 	mul.w	r3, r1, r3
 8005da6:	441a      	add	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	68f9      	ldr	r1, [r7, #12]
 8005dc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dc8:	fb01 f303 	mul.w	r3, r1, r3
 8005dcc:	441a      	add	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	22ff      	movs	r2, #255	; 0xff
 8005dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	22ff      	movs	r2, #255	; 0xff
 8005dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d114      	bne.n	8005e12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01a      	beq.n	8005e26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3310      	adds	r3, #16
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 ff19 	bl	8006c2c <xTaskRemoveFromEventList>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d012      	beq.n	8005e26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <xQueueGenericReset+0xcc>)
 8005e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	e009      	b.n	8005e26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3310      	adds	r3, #16
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fef1 	bl	8005bfe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3324      	adds	r3, #36	; 0x24
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7ff feec 	bl	8005bfe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e26:	f001 fb25 	bl	8007474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e2a:	2301      	movs	r3, #1
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08e      	sub	sp, #56	; 0x38
 8005e3c:	af02      	add	r7, sp, #8
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d002      	beq.n	8005e8a <xQueueGenericCreateStatic+0x52>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <xQueueGenericCreateStatic+0x56>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <xQueueGenericCreateStatic+0x58>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	623b      	str	r3, [r7, #32]
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <xQueueGenericCreateStatic+0x7e>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <xQueueGenericCreateStatic+0x82>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueGenericCreateStatic+0x84>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61fb      	str	r3, [r7, #28]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005ed6:	2348      	movs	r3, #72	; 0x48
 8005ed8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b48      	cmp	r3, #72	; 0x48
 8005ede:	d00a      	beq.n	8005ef6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	61bb      	str	r3, [r7, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005ef6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00d      	beq.n	8005f1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 f83f 	bl	8005f9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3730      	adds	r7, #48	; 0x30
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b08a      	sub	sp, #40	; 0x28
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10a      	bne.n	8005f52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f40:	f383 8811 	msr	BASEPRI, r3
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	f3bf 8f4f 	dsb	sy
 8005f4c:	613b      	str	r3, [r7, #16]
}
 8005f4e:	bf00      	nop
 8005f50:	e7fe      	b.n	8005f50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	3348      	adds	r3, #72	; 0x48
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fb39 	bl	80075d8 <pvPortMalloc>
 8005f66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d011      	beq.n	8005f92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	3348      	adds	r3, #72	; 0x48
 8005f76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f80:	79fa      	ldrb	r2, [r7, #7]
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4613      	mov	r3, r2
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f805 	bl	8005f9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f92:	69bb      	ldr	r3, [r7, #24]
	}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d103      	bne.n	8005fb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	e002      	b.n	8005fbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fca:	2101      	movs	r1, #1
 8005fcc:	69b8      	ldr	r0, [r7, #24]
 8005fce:	f7ff fecb 	bl	8005d68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00e      	beq.n	8006006 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2100      	movs	r1, #0
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f837 	bl	8006074 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	4603      	mov	r3, r0
 8006016:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006018:	2301      	movs	r3, #1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	461a      	mov	r2, r3
 8006024:	6939      	ldr	r1, [r7, #16]
 8006026:	6978      	ldr	r0, [r7, #20]
 8006028:	f7ff ff7e 	bl	8005f28 <xQueueGenericCreate>
 800602c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f7ff ffd3 	bl	8005fda <prvInitialiseMutex>

		return xNewQueue;
 8006034:	68fb      	ldr	r3, [r7, #12]
	}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800603e:	b580      	push	{r7, lr}
 8006040:	b088      	sub	sp, #32
 8006042:	af02      	add	r7, sp, #8
 8006044:	4603      	mov	r3, r0
 8006046:	6039      	str	r1, [r7, #0]
 8006048:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800604a:	2301      	movs	r3, #1
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2200      	movs	r2, #0
 800605a:	6939      	ldr	r1, [r7, #16]
 800605c:	6978      	ldr	r0, [r7, #20]
 800605e:	f7ff feeb 	bl	8005e38 <xQueueGenericCreateStatic>
 8006062:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f7ff ffb8 	bl	8005fda <prvInitialiseMutex>

		return xNewQueue;
 800606a:	68fb      	ldr	r3, [r7, #12]
	}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b08e      	sub	sp, #56	; 0x38
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
 8006080:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006082:	2300      	movs	r3, #0
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xQueueGenericSend+0x32>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d103      	bne.n	80060b4 <xQueueGenericSend+0x40>
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <xQueueGenericSend+0x44>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <xQueueGenericSend+0x46>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <xQueueGenericSend+0x60>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d103      	bne.n	80060e2 <xQueueGenericSend+0x6e>
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d101      	bne.n	80060e6 <xQueueGenericSend+0x72>
 80060e2:	2301      	movs	r3, #1
 80060e4:	e000      	b.n	80060e8 <xQueueGenericSend+0x74>
 80060e6:	2300      	movs	r3, #0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xQueueGenericSend+0x8e>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	623b      	str	r3, [r7, #32]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006102:	f000 ff4f 	bl	8006fa4 <xTaskGetSchedulerState>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d102      	bne.n	8006112 <xQueueGenericSend+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <xQueueGenericSend+0xa2>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xQueueGenericSend+0xa4>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xQueueGenericSend+0xbe>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	61fb      	str	r3, [r7, #28]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006132:	f001 f96f 	bl	8007414 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800613a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	429a      	cmp	r2, r3
 8006140:	d302      	bcc.n	8006148 <xQueueGenericSend+0xd4>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d129      	bne.n	800619c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800614e:	f000 f88f 	bl	8006270 <prvCopyDataToQueue>
 8006152:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d010      	beq.n	800617e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	3324      	adds	r3, #36	; 0x24
 8006160:	4618      	mov	r0, r3
 8006162:	f000 fd63 	bl	8006c2c <xTaskRemoveFromEventList>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d013      	beq.n	8006194 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800616c:	4b3f      	ldr	r3, [pc, #252]	; (800626c <xQueueGenericSend+0x1f8>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	e00a      	b.n	8006194 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d007      	beq.n	8006194 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006184:	4b39      	ldr	r3, [pc, #228]	; (800626c <xQueueGenericSend+0x1f8>)
 8006186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006194:	f001 f96e 	bl	8007474 <vPortExitCritical>
				return pdPASS;
 8006198:	2301      	movs	r3, #1
 800619a:	e063      	b.n	8006264 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061a2:	f001 f967 	bl	8007474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e05c      	b.n	8006264 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d106      	bne.n	80061be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b0:	f107 0314 	add.w	r3, r7, #20
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fd9b 	bl	8006cf0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ba:	2301      	movs	r3, #1
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061be:	f001 f959 	bl	8007474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061c2:	f000 fb51 	bl	8006868 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061c6:	f001 f925 	bl	8007414 <vPortEnterCritical>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d0:	b25b      	sxtb	r3, r3
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061d6:	d103      	bne.n	80061e0 <xQueueGenericSend+0x16c>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ec:	d103      	bne.n	80061f6 <xQueueGenericSend+0x182>
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061f6:	f001 f93d 	bl	8007474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061fa:	1d3a      	adds	r2, r7, #4
 80061fc:	f107 0314 	add.w	r3, r7, #20
 8006200:	4611      	mov	r1, r2
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fd8a 	bl	8006d1c <xTaskCheckForTimeOut>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d124      	bne.n	8006258 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800620e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006210:	f000 f8ea 	bl	80063e8 <prvIsQueueFull>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621c:	3310      	adds	r3, #16
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	4611      	mov	r1, r2
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fcde 	bl	8006be4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800622a:	f000 f88b 	bl	8006344 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800622e:	f000 fb29 	bl	8006884 <xTaskResumeAll>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f af7c 	bne.w	8006132 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <xQueueGenericSend+0x1f8>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	e772      	b.n	8006132 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800624c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800624e:	f000 f879 	bl	8006344 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006252:	f000 fb17 	bl	8006884 <xTaskResumeAll>
 8006256:	e76c      	b.n	8006132 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625a:	f000 f873 	bl	8006344 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800625e:	f000 fb11 	bl	8006884 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006262:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006264:	4618      	mov	r0, r3
 8006266:	3738      	adds	r7, #56	; 0x38
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	e000ed04 	.word	0xe000ed04

08006270 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006284:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10d      	bne.n	80062aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d14d      	bne.n	8006332 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fea0 	bl	8006fe0 <xTaskPriorityDisinherit>
 80062a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	609a      	str	r2, [r3, #8]
 80062a8:	e043      	b.n	8006332 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d119      	bne.n	80062e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6858      	ldr	r0, [r3, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	461a      	mov	r2, r3
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	f002 f93e 	bl	800853c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d32b      	bcc.n	8006332 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e026      	b.n	8006332 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	68d8      	ldr	r0, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	461a      	mov	r2, r3
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	f002 f924 	bl	800853c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	425b      	negs	r3, r3
 80062fe:	441a      	add	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d207      	bcs.n	8006320 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	425b      	negs	r3, r3
 800631a:	441a      	add	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d105      	bne.n	8006332 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	3b01      	subs	r3, #1
 8006330:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800633a:	697b      	ldr	r3, [r7, #20]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800634c:	f001 f862 	bl	8007414 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006356:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006358:	e011      	b.n	800637e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d012      	beq.n	8006388 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3324      	adds	r3, #36	; 0x24
 8006366:	4618      	mov	r0, r3
 8006368:	f000 fc60 	bl	8006c2c <xTaskRemoveFromEventList>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006372:	f000 fd35 	bl	8006de0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	3b01      	subs	r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800637e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006382:	2b00      	cmp	r3, #0
 8006384:	dce9      	bgt.n	800635a <prvUnlockQueue+0x16>
 8006386:	e000      	b.n	800638a <prvUnlockQueue+0x46>
					break;
 8006388:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	22ff      	movs	r2, #255	; 0xff
 800638e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006392:	f001 f86f 	bl	8007474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006396:	f001 f83d 	bl	8007414 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063a2:	e011      	b.n	80063c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d012      	beq.n	80063d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3310      	adds	r3, #16
 80063b0:	4618      	mov	r0, r3
 80063b2:	f000 fc3b 	bl	8006c2c <xTaskRemoveFromEventList>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80063bc:	f000 fd10 	bl	8006de0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80063c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dce9      	bgt.n	80063a4 <prvUnlockQueue+0x60>
 80063d0:	e000      	b.n	80063d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80063d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	22ff      	movs	r2, #255	; 0xff
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80063dc:	f001 f84a 	bl	8007474 <vPortExitCritical>
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80063f0:	f001 f810 	bl	8007414 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d102      	bne.n	8006406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006400:	2301      	movs	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e001      	b.n	800640a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800640a:	f001 f833 	bl	8007474 <vPortExitCritical>

	return xReturn;
 800640e:	68fb      	ldr	r3, [r7, #12]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08e      	sub	sp, #56	; 0x38
 800641c:	af04      	add	r7, sp, #16
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xTaskCreateStatic+0x2a>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	623b      	str	r3, [r7, #32]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xTaskCreateStatic+0x46>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61fb      	str	r3, [r7, #28]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800645e:	2354      	movs	r3, #84	; 0x54
 8006460:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	2b54      	cmp	r3, #84	; 0x54
 8006466:	d00a      	beq.n	800647e <xTaskCreateStatic+0x66>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646c:	f383 8811 	msr	BASEPRI, r3
 8006470:	f3bf 8f6f 	isb	sy
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	61bb      	str	r3, [r7, #24]
}
 800647a:	bf00      	nop
 800647c:	e7fe      	b.n	800647c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800647e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	2b00      	cmp	r3, #0
 8006484:	d01e      	beq.n	80064c4 <xTaskCreateStatic+0xac>
 8006486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006488:	2b00      	cmp	r3, #0
 800648a:	d01b      	beq.n	80064c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006494:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	2202      	movs	r2, #2
 800649a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800649e:	2300      	movs	r3, #0
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	9302      	str	r3, [sp, #8]
 80064a6:	f107 0314 	add.w	r3, r7, #20
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f850 	bl	800655c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064be:	f000 f8d5 	bl	800666c <prvAddNewTaskToReadyList>
 80064c2:	e001      	b.n	80064c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064c8:	697b      	ldr	r3, [r7, #20]
	}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3728      	adds	r7, #40	; 0x28
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b08c      	sub	sp, #48	; 0x30
 80064d6:	af04      	add	r7, sp, #16
 80064d8:	60f8      	str	r0, [r7, #12]
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f876 	bl	80075d8 <pvPortMalloc>
 80064ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064f4:	2054      	movs	r0, #84	; 0x54
 80064f6:	f001 f86f 	bl	80075d8 <pvPortMalloc>
 80064fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
 8006508:	e005      	b.n	8006516 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800650a:	6978      	ldr	r0, [r7, #20]
 800650c:	f001 f930 	bl	8007770 <vPortFree>
 8006510:	e001      	b.n	8006516 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d017      	beq.n	800654c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006524:	88fa      	ldrh	r2, [r7, #6]
 8006526:	2300      	movs	r3, #0
 8006528:	9303      	str	r3, [sp, #12]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	9302      	str	r3, [sp, #8]
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	9301      	str	r3, [sp, #4]
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 f80e 	bl	800655c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006540:	69f8      	ldr	r0, [r7, #28]
 8006542:	f000 f893 	bl	800666c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006546:	2301      	movs	r3, #1
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e002      	b.n	8006552 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800654c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006550:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006552:	69bb      	ldr	r3, [r7, #24]
	}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006574:	3b01      	subs	r3, #1
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f023 0307 	bic.w	r3, r3, #7
 8006582:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006584:	69bb      	ldr	r3, [r7, #24]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	617b      	str	r3, [r7, #20]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d01f      	beq.n	80065ea <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e012      	b.n	80065d6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	7819      	ldrb	r1, [r3, #0]
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	4413      	add	r3, r2
 80065be:	3334      	adds	r3, #52	; 0x34
 80065c0:	460a      	mov	r2, r1
 80065c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d006      	beq.n	80065de <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b0f      	cmp	r3, #15
 80065da:	d9e9      	bls.n	80065b0 <prvInitialiseNewTask+0x54>
 80065dc:	e000      	b.n	80065e0 <prvInitialiseNewTask+0x84>
			{
				break;
 80065de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065e8:	e003      	b.n	80065f2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	2b06      	cmp	r3, #6
 80065f6:	d901      	bls.n	80065fc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065f8:	2306      	movs	r3, #6
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006600:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006606:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	2200      	movs	r2, #0
 800660c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	3304      	adds	r3, #4
 8006612:	4618      	mov	r0, r3
 8006614:	f7ff fb13 	bl	8005c3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661a:	3318      	adds	r3, #24
 800661c:	4618      	mov	r0, r3
 800661e:	f7ff fb0e 	bl	8005c3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	f1c3 0207 	rsb	r2, r3, #7
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006636:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2200      	movs	r2, #0
 800663c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	68f9      	ldr	r1, [r7, #12]
 800664a:	69b8      	ldr	r0, [r7, #24]
 800664c:	f000 fdb4 	bl	80071b8 <pxPortInitialiseStack>
 8006650:	4602      	mov	r2, r0
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006662:	bf00      	nop
 8006664:	3720      	adds	r7, #32
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
	...

0800666c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006674:	f000 fece 	bl	8007414 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006678:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <prvAddNewTaskToReadyList+0xb8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	4a29      	ldr	r2, [pc, #164]	; (8006724 <prvAddNewTaskToReadyList+0xb8>)
 8006680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006682:	4b29      	ldr	r3, [pc, #164]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800668a:	4a27      	ldr	r2, [pc, #156]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006690:	4b24      	ldr	r3, [pc, #144]	; (8006724 <prvAddNewTaskToReadyList+0xb8>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d110      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006698:	f000 fbc6 	bl	8006e28 <prvInitialiseTaskLists>
 800669c:	e00d      	b.n	80066ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800669e:	4b23      	ldr	r3, [pc, #140]	; (800672c <prvAddNewTaskToReadyList+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066a6:	4b20      	ldr	r3, [pc, #128]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d802      	bhi.n	80066ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066b4:	4a1c      	ldr	r2, [pc, #112]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066ba:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <prvAddNewTaskToReadyList+0xc4>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a1b      	ldr	r2, [pc, #108]	; (8006730 <prvAddNewTaskToReadyList+0xc4>)
 80066c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c8:	2201      	movs	r2, #1
 80066ca:	409a      	lsls	r2, r3
 80066cc:	4b19      	ldr	r3, [pc, #100]	; (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	4a18      	ldr	r2, [pc, #96]	; (8006734 <prvAddNewTaskToReadyList+0xc8>)
 80066d4:	6013      	str	r3, [r2, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <prvAddNewTaskToReadyList+0xcc>)
 80066e4:	441a      	add	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3304      	adds	r3, #4
 80066ea:	4619      	mov	r1, r3
 80066ec:	4610      	mov	r0, r2
 80066ee:	f7ff fab3 	bl	8005c58 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066f2:	f000 febf 	bl	8007474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066f6:	4b0d      	ldr	r3, [pc, #52]	; (800672c <prvAddNewTaskToReadyList+0xc0>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00e      	beq.n	800671c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <prvAddNewTaskToReadyList+0xbc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	429a      	cmp	r2, r3
 800670a:	d207      	bcs.n	800671c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <prvAddNewTaskToReadyList+0xd0>)
 800670e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006712:	601a      	str	r2, [r3, #0]
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	200003e8 	.word	0x200003e8
 8006728:	200002e8 	.word	0x200002e8
 800672c:	200003f4 	.word	0x200003f4
 8006730:	20000404 	.word	0x20000404
 8006734:	200003f0 	.word	0x200003f0
 8006738:	200002ec 	.word	0x200002ec
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006748:	2300      	movs	r3, #0
 800674a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d017      	beq.n	8006782 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006752:	4b13      	ldr	r3, [pc, #76]	; (80067a0 <vTaskDelay+0x60>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00a      	beq.n	8006770 <vTaskDelay+0x30>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	60bb      	str	r3, [r7, #8]
}
 800676c:	bf00      	nop
 800676e:	e7fe      	b.n	800676e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006770:	f000 f87a 	bl	8006868 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006774:	2100      	movs	r1, #0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fcb8 	bl	80070ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800677c:	f000 f882 	bl	8006884 <xTaskResumeAll>
 8006780:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d107      	bne.n	8006798 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006788:	4b06      	ldr	r3, [pc, #24]	; (80067a4 <vTaskDelay+0x64>)
 800678a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000410 	.word	0x20000410
 80067a4:	e000ed04 	.word	0xe000ed04

080067a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067b6:	463a      	mov	r2, r7
 80067b8:	1d39      	adds	r1, r7, #4
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f001 f8f4 	bl	80079ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	9202      	str	r2, [sp, #8]
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	460a      	mov	r2, r1
 80067d6:	491e      	ldr	r1, [pc, #120]	; (8006850 <vTaskStartScheduler+0xa8>)
 80067d8:	481e      	ldr	r0, [pc, #120]	; (8006854 <vTaskStartScheduler+0xac>)
 80067da:	f7ff fe1d 	bl	8006418 <xTaskCreateStatic>
 80067de:	4603      	mov	r3, r0
 80067e0:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <vTaskStartScheduler+0xb0>)
 80067e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067e4:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <vTaskStartScheduler+0xb0>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067ec:	2301      	movs	r3, #1
 80067ee:	617b      	str	r3, [r7, #20]
 80067f0:	e001      	b.n	80067f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d116      	bne.n	800682a <vTaskStartScheduler+0x82>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
}
 800680e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006810:	4b12      	ldr	r3, [pc, #72]	; (800685c <vTaskStartScheduler+0xb4>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006816:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006818:	4b11      	ldr	r3, [pc, #68]	; (8006860 <vTaskStartScheduler+0xb8>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <vTaskStartScheduler+0xbc>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006824:	f000 fd54 	bl	80072d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006828:	e00e      	b.n	8006848 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006830:	d10a      	bne.n	8006848 <vTaskStartScheduler+0xa0>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60fb      	str	r3, [r7, #12]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <vTaskStartScheduler+0x9e>
}
 8006848:	bf00      	nop
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	0800afc8 	.word	0x0800afc8
 8006854:	08006df9 	.word	0x08006df9
 8006858:	2000040c 	.word	0x2000040c
 800685c:	20000408 	.word	0x20000408
 8006860:	200003f4 	.word	0x200003f4
 8006864:	200003ec 	.word	0x200003ec

08006868 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <vTaskSuspendAll+0x18>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a03      	ldr	r2, [pc, #12]	; (8006880 <vTaskSuspendAll+0x18>)
 8006874:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006876:	bf00      	nop
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000410 	.word	0x20000410

08006884 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006892:	4b41      	ldr	r3, [pc, #260]	; (8006998 <xTaskResumeAll+0x114>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d10a      	bne.n	80068b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	603b      	str	r3, [r7, #0]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068b0:	f000 fdb0 	bl	8007414 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068b4:	4b38      	ldr	r3, [pc, #224]	; (8006998 <xTaskResumeAll+0x114>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3b01      	subs	r3, #1
 80068ba:	4a37      	ldr	r2, [pc, #220]	; (8006998 <xTaskResumeAll+0x114>)
 80068bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068be:	4b36      	ldr	r3, [pc, #216]	; (8006998 <xTaskResumeAll+0x114>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d161      	bne.n	800698a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068c6:	4b35      	ldr	r3, [pc, #212]	; (800699c <xTaskResumeAll+0x118>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d05d      	beq.n	800698a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068ce:	e02e      	b.n	800692e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d0:	4b33      	ldr	r3, [pc, #204]	; (80069a0 <xTaskResumeAll+0x11c>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3318      	adds	r3, #24
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fa18 	bl	8005d12 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fa13 	bl	8005d12 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <xTaskResumeAll+0x120>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	4a2a      	ldr	r2, [pc, #168]	; (80069a4 <xTaskResumeAll+0x120>)
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4a27      	ldr	r2, [pc, #156]	; (80069a8 <xTaskResumeAll+0x124>)
 800690c:	441a      	add	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3304      	adds	r3, #4
 8006912:	4619      	mov	r1, r3
 8006914:	4610      	mov	r0, r2
 8006916:	f7ff f99f 	bl	8005c58 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691e:	4b23      	ldr	r3, [pc, #140]	; (80069ac <xTaskResumeAll+0x128>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006928:	4b21      	ldr	r3, [pc, #132]	; (80069b0 <xTaskResumeAll+0x12c>)
 800692a:	2201      	movs	r2, #1
 800692c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <xTaskResumeAll+0x11c>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1cc      	bne.n	80068d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800693c:	f000 fb12 	bl	8006f64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006940:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <xTaskResumeAll+0x130>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d010      	beq.n	800696e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800694c:	f000 f836 	bl	80069bc <xTaskIncrementTick>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006956:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <xTaskResumeAll+0x12c>)
 8006958:	2201      	movs	r2, #1
 800695a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3b01      	subs	r3, #1
 8006960:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1f1      	bne.n	800694c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006968:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <xTaskResumeAll+0x130>)
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800696e:	4b10      	ldr	r3, [pc, #64]	; (80069b0 <xTaskResumeAll+0x12c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d009      	beq.n	800698a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006976:	2301      	movs	r3, #1
 8006978:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800697a:	4b0f      	ldr	r3, [pc, #60]	; (80069b8 <xTaskResumeAll+0x134>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800698a:	f000 fd73 	bl	8007474 <vPortExitCritical>

	return xAlreadyYielded;
 800698e:	68bb      	ldr	r3, [r7, #8]
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	20000410 	.word	0x20000410
 800699c:	200003e8 	.word	0x200003e8
 80069a0:	200003a8 	.word	0x200003a8
 80069a4:	200003f0 	.word	0x200003f0
 80069a8:	200002ec 	.word	0x200002ec
 80069ac:	200002e8 	.word	0x200002e8
 80069b0:	200003fc 	.word	0x200003fc
 80069b4:	200003f8 	.word	0x200003f8
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069c6:	4b4e      	ldr	r3, [pc, #312]	; (8006b00 <xTaskIncrementTick+0x144>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 808e 	bne.w	8006aec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80069d0:	4b4c      	ldr	r3, [pc, #304]	; (8006b04 <xTaskIncrementTick+0x148>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3301      	adds	r3, #1
 80069d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80069d8:	4a4a      	ldr	r2, [pc, #296]	; (8006b04 <xTaskIncrementTick+0x148>)
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d120      	bne.n	8006a26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80069e4:	4b48      	ldr	r3, [pc, #288]	; (8006b08 <xTaskIncrementTick+0x14c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <xTaskIncrementTick+0x48>
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	603b      	str	r3, [r7, #0]
}
 8006a00:	bf00      	nop
 8006a02:	e7fe      	b.n	8006a02 <xTaskIncrementTick+0x46>
 8006a04:	4b40      	ldr	r3, [pc, #256]	; (8006b08 <xTaskIncrementTick+0x14c>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	4b40      	ldr	r3, [pc, #256]	; (8006b0c <xTaskIncrementTick+0x150>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a3e      	ldr	r2, [pc, #248]	; (8006b08 <xTaskIncrementTick+0x14c>)
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4a3e      	ldr	r2, [pc, #248]	; (8006b0c <xTaskIncrementTick+0x150>)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	4b3d      	ldr	r3, [pc, #244]	; (8006b10 <xTaskIncrementTick+0x154>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	4a3c      	ldr	r2, [pc, #240]	; (8006b10 <xTaskIncrementTick+0x154>)
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	f000 fa9f 	bl	8006f64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a26:	4b3b      	ldr	r3, [pc, #236]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d348      	bcc.n	8006ac2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a30:	4b35      	ldr	r3, [pc, #212]	; (8006b08 <xTaskIncrementTick+0x14c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3a:	4b36      	ldr	r3, [pc, #216]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a40:	601a      	str	r2, [r3, #0]
					break;
 8006a42:	e03e      	b.n	8006ac2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a44:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <xTaskIncrementTick+0x14c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d203      	bcs.n	8006a64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006a5c:	4a2d      	ldr	r2, [pc, #180]	; (8006b14 <xTaskIncrementTick+0x158>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006a62:	e02e      	b.n	8006ac2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff f952 	bl	8005d12 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	3318      	adds	r3, #24
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff f949 	bl	8005d12 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	2201      	movs	r2, #1
 8006a86:	409a      	lsls	r2, r3
 8006a88:	4b23      	ldr	r3, [pc, #140]	; (8006b18 <xTaskIncrementTick+0x15c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	4a22      	ldr	r2, [pc, #136]	; (8006b18 <xTaskIncrementTick+0x15c>)
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	4613      	mov	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <xTaskIncrementTick+0x160>)
 8006aa0:	441a      	add	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7ff f8d5 	bl	8005c58 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab2:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <xTaskIncrementTick+0x164>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d3b9      	bcc.n	8006a30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006abc:	2301      	movs	r3, #1
 8006abe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac0:	e7b6      	b.n	8006a30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <xTaskIncrementTick+0x164>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4914      	ldr	r1, [pc, #80]	; (8006b1c <xTaskIncrementTick+0x160>)
 8006aca:	4613      	mov	r3, r2
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	4413      	add	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d901      	bls.n	8006ade <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006ada:	2301      	movs	r3, #1
 8006adc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ade:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <xTaskIncrementTick+0x168>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d007      	beq.n	8006af6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e004      	b.n	8006af6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006aec:	4b0e      	ldr	r3, [pc, #56]	; (8006b28 <xTaskIncrementTick+0x16c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a0d      	ldr	r2, [pc, #52]	; (8006b28 <xTaskIncrementTick+0x16c>)
 8006af4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006af6:	697b      	ldr	r3, [r7, #20]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000410 	.word	0x20000410
 8006b04:	200003ec 	.word	0x200003ec
 8006b08:	200003a0 	.word	0x200003a0
 8006b0c:	200003a4 	.word	0x200003a4
 8006b10:	20000400 	.word	0x20000400
 8006b14:	20000408 	.word	0x20000408
 8006b18:	200003f0 	.word	0x200003f0
 8006b1c:	200002ec 	.word	0x200002ec
 8006b20:	200002e8 	.word	0x200002e8
 8006b24:	200003fc 	.word	0x200003fc
 8006b28:	200003f8 	.word	0x200003f8

08006b2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b32:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <vTaskSwitchContext+0xa4>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b3a:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <vTaskSwitchContext+0xa8>)
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b40:	e03f      	b.n	8006bc2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006b42:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <vTaskSwitchContext+0xa8>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b48:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <vTaskSwitchContext+0xac>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	fab3 f383 	clz	r3, r3
 8006b54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	f1c3 031f 	rsb	r3, r3, #31
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	491f      	ldr	r1, [pc, #124]	; (8006bdc <vTaskSwitchContext+0xb0>)
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	607b      	str	r3, [r7, #4]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <vTaskSwitchContext+0x5a>
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <vTaskSwitchContext+0xb0>)
 8006b94:	4413      	add	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d104      	bne.n	8006bb8 <vTaskSwitchContext+0x8c>
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	605a      	str	r2, [r3, #4]
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	4a08      	ldr	r2, [pc, #32]	; (8006be0 <vTaskSwitchContext+0xb4>)
 8006bc0:	6013      	str	r3, [r2, #0]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20000410 	.word	0x20000410
 8006bd4:	200003fc 	.word	0x200003fc
 8006bd8:	200003f0 	.word	0x200003f0
 8006bdc:	200002ec 	.word	0x200002ec
 8006be0:	200002e8 	.word	0x200002e8

08006be4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	60fb      	str	r3, [r7, #12]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c0a:	4b07      	ldr	r3, [pc, #28]	; (8006c28 <vTaskPlaceOnEventList+0x44>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3318      	adds	r3, #24
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7ff f844 	bl	8005ca0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c18:	2101      	movs	r1, #1
 8006c1a:	6838      	ldr	r0, [r7, #0]
 8006c1c:	f000 fa66 	bl	80070ec <prvAddCurrentTaskToDelayedList>
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	200002e8 	.word	0x200002e8

08006c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	60fb      	str	r3, [r7, #12]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	3318      	adds	r3, #24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff f858 	bl	8005d12 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c62:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <xTaskRemoveFromEventList+0xac>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d11c      	bne.n	8006ca4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff f84f 	bl	8005d12 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c78:	2201      	movs	r2, #1
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <xTaskRemoveFromEventList+0xb0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <xTaskRemoveFromEventList+0xb0>)
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <xTaskRemoveFromEventList+0xb4>)
 8006c94:	441a      	add	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f7fe ffdb 	bl	8005c58 <vListInsertEnd>
 8006ca2:	e005      	b.n	8006cb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4619      	mov	r1, r3
 8006caa:	480e      	ldr	r0, [pc, #56]	; (8006ce4 <xTaskRemoveFromEventList+0xb8>)
 8006cac:	f7fe ffd4 	bl	8005c58 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <xTaskRemoveFromEventList+0xbc>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d905      	bls.n	8006cca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <xTaskRemoveFromEventList+0xc0>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]
 8006cc8:	e001      	b.n	8006cce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000410 	.word	0x20000410
 8006cdc:	200003f0 	.word	0x200003f0
 8006ce0:	200002ec 	.word	0x200002ec
 8006ce4:	200003a8 	.word	0x200003a8
 8006ce8:	200002e8 	.word	0x200002e8
 8006cec:	200003fc 	.word	0x200003fc

08006cf0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <vTaskInternalSetTimeOutState+0x24>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <vTaskInternalSetTimeOutState+0x28>)
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	605a      	str	r2, [r3, #4]
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	20000400 	.word	0x20000400
 8006d18:	200003ec 	.word	0x200003ec

08006d1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	60fb      	str	r3, [r7, #12]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006d5e:	f000 fb59 	bl	8007414 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006d62:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <xTaskCheckForTimeOut+0xbc>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d7a:	d102      	bne.n	8006d82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61fb      	str	r3, [r7, #28]
 8006d80:	e023      	b.n	8006dca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	4b15      	ldr	r3, [pc, #84]	; (8006ddc <xTaskCheckForTimeOut+0xc0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d007      	beq.n	8006d9e <xTaskCheckForTimeOut+0x82>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
 8006d9c:	e015      	b.n	8006dca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d20b      	bcs.n	8006dc0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	1ad2      	subs	r2, r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ff9b 	bl	8006cf0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	e004      	b.n	8006dca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006dca:	f000 fb53 	bl	8007474 <vPortExitCritical>

	return xReturn;
 8006dce:	69fb      	ldr	r3, [r7, #28]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	200003ec 	.word	0x200003ec
 8006ddc:	20000400 	.word	0x20000400

08006de0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006de4:	4b03      	ldr	r3, [pc, #12]	; (8006df4 <vTaskMissedYield+0x14>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	601a      	str	r2, [r3, #0]
}
 8006dea:	bf00      	nop
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	200003fc 	.word	0x200003fc

08006df8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006e00:	f000 f852 	bl	8006ea8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <prvIdleTask+0x28>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d9f9      	bls.n	8006e00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006e0c:	4b05      	ldr	r3, [pc, #20]	; (8006e24 <prvIdleTask+0x2c>)
 8006e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006e1c:	e7f0      	b.n	8006e00 <prvIdleTask+0x8>
 8006e1e:	bf00      	nop
 8006e20:	200002ec 	.word	0x200002ec
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e2e:	2300      	movs	r3, #0
 8006e30:	607b      	str	r3, [r7, #4]
 8006e32:	e00c      	b.n	8006e4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4a12      	ldr	r2, [pc, #72]	; (8006e88 <prvInitialiseTaskLists+0x60>)
 8006e40:	4413      	add	r3, r2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7fe fedb 	bl	8005bfe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	607b      	str	r3, [r7, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2b06      	cmp	r3, #6
 8006e52:	d9ef      	bls.n	8006e34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006e54:	480d      	ldr	r0, [pc, #52]	; (8006e8c <prvInitialiseTaskLists+0x64>)
 8006e56:	f7fe fed2 	bl	8005bfe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006e5a:	480d      	ldr	r0, [pc, #52]	; (8006e90 <prvInitialiseTaskLists+0x68>)
 8006e5c:	f7fe fecf 	bl	8005bfe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006e60:	480c      	ldr	r0, [pc, #48]	; (8006e94 <prvInitialiseTaskLists+0x6c>)
 8006e62:	f7fe fecc 	bl	8005bfe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006e66:	480c      	ldr	r0, [pc, #48]	; (8006e98 <prvInitialiseTaskLists+0x70>)
 8006e68:	f7fe fec9 	bl	8005bfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006e6c:	480b      	ldr	r0, [pc, #44]	; (8006e9c <prvInitialiseTaskLists+0x74>)
 8006e6e:	f7fe fec6 	bl	8005bfe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006e72:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <prvInitialiseTaskLists+0x78>)
 8006e74:	4a05      	ldr	r2, [pc, #20]	; (8006e8c <prvInitialiseTaskLists+0x64>)
 8006e76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006e78:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <prvInitialiseTaskLists+0x7c>)
 8006e7a:	4a05      	ldr	r2, [pc, #20]	; (8006e90 <prvInitialiseTaskLists+0x68>)
 8006e7c:	601a      	str	r2, [r3, #0]
}
 8006e7e:	bf00      	nop
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200002ec 	.word	0x200002ec
 8006e8c:	20000378 	.word	0x20000378
 8006e90:	2000038c 	.word	0x2000038c
 8006e94:	200003a8 	.word	0x200003a8
 8006e98:	200003bc 	.word	0x200003bc
 8006e9c:	200003d4 	.word	0x200003d4
 8006ea0:	200003a0 	.word	0x200003a0
 8006ea4:	200003a4 	.word	0x200003a4

08006ea8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006eae:	e019      	b.n	8006ee4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006eb0:	f000 fab0 	bl	8007414 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb4:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <prvCheckTasksWaitingTermination+0x50>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3304      	adds	r3, #4
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe ff26 	bl	8005d12 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <prvCheckTasksWaitingTermination+0x54>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	4a0b      	ldr	r2, [pc, #44]	; (8006efc <prvCheckTasksWaitingTermination+0x54>)
 8006ece:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <prvCheckTasksWaitingTermination+0x58>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	4a0a      	ldr	r2, [pc, #40]	; (8006f00 <prvCheckTasksWaitingTermination+0x58>)
 8006ed8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006eda:	f000 facb 	bl	8007474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f810 	bl	8006f04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ee4:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <prvCheckTasksWaitingTermination+0x58>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1e1      	bne.n	8006eb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	200003bc 	.word	0x200003bc
 8006efc:	200003e8 	.word	0x200003e8
 8006f00:	200003d0 	.word	0x200003d0

08006f04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d108      	bne.n	8006f28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fc28 	bl	8007770 <vPortFree>
				vPortFree( pxTCB );
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fc25 	bl	8007770 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006f26:	e018      	b.n	8006f5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d103      	bne.n	8006f3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fc1c 	bl	8007770 <vPortFree>
	}
 8006f38:	e00f      	b.n	8006f5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d00a      	beq.n	8006f5a <prvDeleteTCB+0x56>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60fb      	str	r3, [r7, #12]
}
 8006f56:	bf00      	nop
 8006f58:	e7fe      	b.n	8006f58 <prvDeleteTCB+0x54>
	}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f6a:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <prvResetNextTaskUnblockTime+0x38>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006f74:	4b0a      	ldr	r3, [pc, #40]	; (8006fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8006f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006f7c:	e008      	b.n	8006f90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <prvResetNextTaskUnblockTime+0x38>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a04      	ldr	r2, [pc, #16]	; (8006fa0 <prvResetNextTaskUnblockTime+0x3c>)
 8006f8e:	6013      	str	r3, [r2, #0]
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	200003a0 	.word	0x200003a0
 8006fa0:	20000408 	.word	0x20000408

08006fa4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <xTaskGetSchedulerState+0x34>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	607b      	str	r3, [r7, #4]
 8006fb6:	e008      	b.n	8006fca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fb8:	4b08      	ldr	r3, [pc, #32]	; (8006fdc <xTaskGetSchedulerState+0x38>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d102      	bne.n	8006fc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	607b      	str	r3, [r7, #4]
 8006fc4:	e001      	b.n	8006fca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006fca:	687b      	ldr	r3, [r7, #4]
	}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	200003f4 	.word	0x200003f4
 8006fdc:	20000410 	.word	0x20000410

08006fe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d06e      	beq.n	80070d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ff6:	4b3a      	ldr	r3, [pc, #232]	; (80070e0 <xTaskPriorityDisinherit+0x100>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d00a      	beq.n	8007016 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60bb      	str	r3, [r7, #8]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007038:	1e5a      	subs	r2, r3, #1
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	429a      	cmp	r2, r3
 8007048:	d044      	beq.n	80070d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704e:	2b00      	cmp	r3, #0
 8007050:	d140      	bne.n	80070d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	3304      	adds	r3, #4
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fe5b 	bl	8005d12 <uxListRemove>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d115      	bne.n	800708e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	491f      	ldr	r1, [pc, #124]	; (80070e4 <xTaskPriorityDisinherit+0x104>)
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	440b      	add	r3, r1
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10a      	bne.n	800708e <xTaskPriorityDisinherit+0xae>
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	2201      	movs	r2, #1
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	43da      	mvns	r2, r3
 8007084:	4b18      	ldr	r3, [pc, #96]	; (80070e8 <xTaskPriorityDisinherit+0x108>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4013      	ands	r3, r2
 800708a:	4a17      	ldr	r2, [pc, #92]	; (80070e8 <xTaskPriorityDisinherit+0x108>)
 800708c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	f1c3 0207 	rsb	r2, r3, #7
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	2201      	movs	r2, #1
 80070a8:	409a      	lsls	r2, r3
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <xTaskPriorityDisinherit+0x108>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	4a0d      	ldr	r2, [pc, #52]	; (80070e8 <xTaskPriorityDisinherit+0x108>)
 80070b2:	6013      	str	r3, [r2, #0]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4613      	mov	r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4a08      	ldr	r2, [pc, #32]	; (80070e4 <xTaskPriorityDisinherit+0x104>)
 80070c2:	441a      	add	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	3304      	adds	r3, #4
 80070c8:	4619      	mov	r1, r3
 80070ca:	4610      	mov	r0, r2
 80070cc:	f7fe fdc4 	bl	8005c58 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80070d0:	2301      	movs	r3, #1
 80070d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070d4:	697b      	ldr	r3, [r7, #20]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	200002e8 	.word	0x200002e8
 80070e4:	200002ec 	.word	0x200002ec
 80070e8:	200003f0 	.word	0x200003f0

080070ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070f6:	4b29      	ldr	r3, [pc, #164]	; (800719c <prvAddCurrentTaskToDelayedList+0xb0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070fc:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3304      	adds	r3, #4
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fe05 	bl	8005d12 <uxListRemove>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10b      	bne.n	8007126 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800710e:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	2201      	movs	r2, #1
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43da      	mvns	r2, r3
 800711c:	4b21      	ldr	r3, [pc, #132]	; (80071a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4013      	ands	r3, r2
 8007122:	4a20      	ldr	r2, [pc, #128]	; (80071a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007124:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712c:	d10a      	bne.n	8007144 <prvAddCurrentTaskToDelayedList+0x58>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	481a      	ldr	r0, [pc, #104]	; (80071a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800713e:	f7fe fd8b 	bl	8005c58 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007142:	e026      	b.n	8007192 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4413      	add	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800714c:	4b14      	ldr	r3, [pc, #80]	; (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	429a      	cmp	r2, r3
 800715a:	d209      	bcs.n	8007170 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800715c:	4b13      	ldr	r3, [pc, #76]	; (80071ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3304      	adds	r3, #4
 8007166:	4619      	mov	r1, r3
 8007168:	4610      	mov	r0, r2
 800716a:	f7fe fd99 	bl	8005ca0 <vListInsert>
}
 800716e:	e010      	b.n	8007192 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007170:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b0a      	ldr	r3, [pc, #40]	; (80071a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3304      	adds	r3, #4
 800717a:	4619      	mov	r1, r3
 800717c:	4610      	mov	r0, r2
 800717e:	f7fe fd8f 	bl	8005ca0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007182:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	429a      	cmp	r2, r3
 800718a:	d202      	bcs.n	8007192 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800718c:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6013      	str	r3, [r2, #0]
}
 8007192:	bf00      	nop
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	200003ec 	.word	0x200003ec
 80071a0:	200002e8 	.word	0x200002e8
 80071a4:	200003f0 	.word	0x200003f0
 80071a8:	200003d4 	.word	0x200003d4
 80071ac:	200003a4 	.word	0x200003a4
 80071b0:	200003a0 	.word	0x200003a0
 80071b4:	20000408 	.word	0x20000408

080071b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b04      	subs	r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071e8:	4a0c      	ldr	r2, [pc, #48]	; (800721c <pxPortInitialiseStack+0x64>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b14      	subs	r3, #20
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f06f 0202 	mvn.w	r2, #2
 8007206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3b20      	subs	r3, #32
 800720c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	08007221 	.word	0x08007221

08007220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800722a:	4b12      	ldr	r3, [pc, #72]	; (8007274 <prvTaskExitError+0x54>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007232:	d00a      	beq.n	800724a <prvTaskExitError+0x2a>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	e7fe      	b.n	8007248 <prvTaskExitError+0x28>
	__asm volatile
 800724a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	60bb      	str	r3, [r7, #8]
}
 800725c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800725e:	bf00      	nop
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0fc      	beq.n	8007260 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007266:	bf00      	nop
 8007268:	bf00      	nop
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	2000008c 	.word	0x2000008c
	...

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst2>:
 80072a0:	200002e8 	.word	0x200002e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072a8:	4808      	ldr	r0, [pc, #32]	; (80072cc <prvPortStartFirstTask+0x24>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8814 	msr	CONTROL, r0
 80072ba:	b662      	cpsie	i
 80072bc:	b661      	cpsie	f
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	df00      	svc	0
 80072c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ca:	bf00      	nop
 80072cc:	e000ed08 	.word	0xe000ed08

080072d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072d6:	4b46      	ldr	r3, [pc, #280]	; (80073f0 <xPortStartScheduler+0x120>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a46      	ldr	r2, [pc, #280]	; (80073f4 <xPortStartScheduler+0x124>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10a      	bne.n	80072f6 <xPortStartScheduler+0x26>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072f6:	4b3e      	ldr	r3, [pc, #248]	; (80073f0 <xPortStartScheduler+0x120>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3f      	ldr	r2, [pc, #252]	; (80073f8 <xPortStartScheduler+0x128>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d10a      	bne.n	8007316 <xPortStartScheduler+0x46>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	60fb      	str	r3, [r7, #12]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007316:	4b39      	ldr	r3, [pc, #228]	; (80073fc <xPortStartScheduler+0x12c>)
 8007318:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	22ff      	movs	r2, #255	; 0xff
 8007326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007338:	b2da      	uxtb	r2, r3
 800733a:	4b31      	ldr	r3, [pc, #196]	; (8007400 <xPortStartScheduler+0x130>)
 800733c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800733e:	4b31      	ldr	r3, [pc, #196]	; (8007404 <xPortStartScheduler+0x134>)
 8007340:	2207      	movs	r2, #7
 8007342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007344:	e009      	b.n	800735a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007346:	4b2f      	ldr	r3, [pc, #188]	; (8007404 <xPortStartScheduler+0x134>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3b01      	subs	r3, #1
 800734c:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <xPortStartScheduler+0x134>)
 800734e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007350:	78fb      	ldrb	r3, [r7, #3]
 8007352:	b2db      	uxtb	r3, r3
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b80      	cmp	r3, #128	; 0x80
 8007364:	d0ef      	beq.n	8007346 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007366:	4b27      	ldr	r3, [pc, #156]	; (8007404 <xPortStartScheduler+0x134>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1c3 0307 	rsb	r3, r3, #7
 800736e:	2b04      	cmp	r3, #4
 8007370:	d00a      	beq.n	8007388 <xPortStartScheduler+0xb8>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	60bb      	str	r3, [r7, #8]
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007388:	4b1e      	ldr	r3, [pc, #120]	; (8007404 <xPortStartScheduler+0x134>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	021b      	lsls	r3, r3, #8
 800738e:	4a1d      	ldr	r2, [pc, #116]	; (8007404 <xPortStartScheduler+0x134>)
 8007390:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <xPortStartScheduler+0x134>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800739a:	4a1a      	ldr	r2, [pc, #104]	; (8007404 <xPortStartScheduler+0x134>)
 800739c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073a6:	4b18      	ldr	r3, [pc, #96]	; (8007408 <xPortStartScheduler+0x138>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <xPortStartScheduler+0x138>)
 80073ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073b2:	4b15      	ldr	r3, [pc, #84]	; (8007408 <xPortStartScheduler+0x138>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a14      	ldr	r2, [pc, #80]	; (8007408 <xPortStartScheduler+0x138>)
 80073b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80073bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073be:	f000 f8dd 	bl	800757c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <xPortStartScheduler+0x13c>)
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073c8:	f000 f8fc 	bl	80075c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073cc:	4b10      	ldr	r3, [pc, #64]	; (8007410 <xPortStartScheduler+0x140>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <xPortStartScheduler+0x140>)
 80073d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073d8:	f7ff ff66 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073dc:	f7ff fba6 	bl	8006b2c <vTaskSwitchContext>
	prvTaskExitError();
 80073e0:	f7ff ff1e 	bl	8007220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	e000ed00 	.word	0xe000ed00
 80073f4:	410fc271 	.word	0x410fc271
 80073f8:	410fc270 	.word	0x410fc270
 80073fc:	e000e400 	.word	0xe000e400
 8007400:	20000414 	.word	0x20000414
 8007404:	20000418 	.word	0x20000418
 8007408:	e000ed20 	.word	0xe000ed20
 800740c:	2000008c 	.word	0x2000008c
 8007410:	e000ef34 	.word	0xe000ef34

08007414 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	607b      	str	r3, [r7, #4]
}
 800742c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800742e:	4b0f      	ldr	r3, [pc, #60]	; (800746c <vPortEnterCritical+0x58>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	3301      	adds	r3, #1
 8007434:	4a0d      	ldr	r2, [pc, #52]	; (800746c <vPortEnterCritical+0x58>)
 8007436:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007438:	4b0c      	ldr	r3, [pc, #48]	; (800746c <vPortEnterCritical+0x58>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d10f      	bne.n	8007460 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <vPortEnterCritical+0x5c>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <vPortEnterCritical+0x4c>
	__asm volatile
 800744a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744e:	f383 8811 	msr	BASEPRI, r3
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	f3bf 8f4f 	dsb	sy
 800745a:	603b      	str	r3, [r7, #0]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <vPortEnterCritical+0x4a>
	}
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr
 800746c:	2000008c 	.word	0x2000008c
 8007470:	e000ed04 	.word	0xe000ed04

08007474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <vPortExitCritical+0x50>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <vPortExitCritical+0x24>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	607b      	str	r3, [r7, #4]
}
 8007494:	bf00      	nop
 8007496:	e7fe      	b.n	8007496 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <vPortExitCritical+0x50>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3b01      	subs	r3, #1
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <vPortExitCritical+0x50>)
 80074a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074a2:	4b08      	ldr	r3, [pc, #32]	; (80074c4 <vPortExitCritical+0x50>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d105      	bne.n	80074b6 <vPortExitCritical+0x42>
 80074aa:	2300      	movs	r3, #0
 80074ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	2000008c 	.word	0x2000008c
	...

080074d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074d0:	f3ef 8009 	mrs	r0, PSP
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4b15      	ldr	r3, [pc, #84]	; (8007530 <pxCurrentTCBConst>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	f01e 0f10 	tst.w	lr, #16
 80074e0:	bf08      	it	eq
 80074e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074f4:	f380 8811 	msr	BASEPRI, r0
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f7ff fb14 	bl	8006b2c <vTaskSwitchContext>
 8007504:	f04f 0000 	mov.w	r0, #0
 8007508:	f380 8811 	msr	BASEPRI, r0
 800750c:	bc09      	pop	{r0, r3}
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	6808      	ldr	r0, [r1, #0]
 8007512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007516:	f01e 0f10 	tst.w	lr, #16
 800751a:	bf08      	it	eq
 800751c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007520:	f380 8809 	msr	PSP, r0
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w

08007530 <pxCurrentTCBConst>:
 8007530:	200002e8 	.word	0x200002e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
}
 8007550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007552:	f7ff fa33 	bl	80069bc <xTaskIncrementTick>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <SysTick_Handler+0x40>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f383 8811 	msr	BASEPRI, r3
}
 800756e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <vPortSetupTimerInterrupt+0x34>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007586:	4b0b      	ldr	r3, [pc, #44]	; (80075b4 <vPortSetupTimerInterrupt+0x38>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800758c:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <vPortSetupTimerInterrupt+0x3c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <vPortSetupTimerInterrupt+0x40>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <vPortSetupTimerInterrupt+0x44>)
 800759a:	3b01      	subs	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800759e:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <vPortSetupTimerInterrupt+0x34>)
 80075a0:	2207      	movs	r2, #7
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	e000e010 	.word	0xe000e010
 80075b4:	e000e018 	.word	0xe000e018
 80075b8:	20000090 	.word	0x20000090
 80075bc:	10624dd3 	.word	0x10624dd3
 80075c0:	e000e014 	.word	0xe000e014

080075c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075d4 <vPortEnableVFP+0x10>
 80075c8:	6801      	ldr	r1, [r0, #0]
 80075ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80075ce:	6001      	str	r1, [r0, #0]
 80075d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075d2:	bf00      	nop
 80075d4:	e000ed88 	.word	0xe000ed88

080075d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08a      	sub	sp, #40	; 0x28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075e4:	f7ff f940 	bl	8006868 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075e8:	4b5b      	ldr	r3, [pc, #364]	; (8007758 <pvPortMalloc+0x180>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075f0:	f000 f920 	bl	8007834 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <pvPortMalloc+0x184>)
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f040 8093 	bne.w	8007728 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d01d      	beq.n	8007644 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007608:	2208      	movs	r2, #8
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	2b00      	cmp	r3, #0
 8007618:	d014      	beq.n	8007644 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	3308      	adds	r3, #8
 8007622:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <pvPortMalloc+0x6c>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	617b      	str	r3, [r7, #20]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d06e      	beq.n	8007728 <pvPortMalloc+0x150>
 800764a:	4b45      	ldr	r3, [pc, #276]	; (8007760 <pvPortMalloc+0x188>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d869      	bhi.n	8007728 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007654:	4b43      	ldr	r3, [pc, #268]	; (8007764 <pvPortMalloc+0x18c>)
 8007656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007658:	4b42      	ldr	r3, [pc, #264]	; (8007764 <pvPortMalloc+0x18c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800765e:	e004      	b.n	800766a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	429a      	cmp	r2, r3
 8007672:	d903      	bls.n	800767c <pvPortMalloc+0xa4>
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f1      	bne.n	8007660 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800767c:	4b36      	ldr	r3, [pc, #216]	; (8007758 <pvPortMalloc+0x180>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	429a      	cmp	r2, r3
 8007684:	d050      	beq.n	8007728 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2208      	movs	r2, #8
 800768c:	4413      	add	r3, r2
 800768e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	2308      	movs	r3, #8
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d91f      	bls.n	80076e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f003 0307 	and.w	r3, r3, #7
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <pvPortMalloc+0xf8>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	613b      	str	r3, [r7, #16]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	1ad2      	subs	r2, r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076e2:	69b8      	ldr	r0, [r7, #24]
 80076e4:	f000 f908 	bl	80078f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076e8:	4b1d      	ldr	r3, [pc, #116]	; (8007760 <pvPortMalloc+0x188>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <pvPortMalloc+0x188>)
 80076f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076f6:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <pvPortMalloc+0x188>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b1b      	ldr	r3, [pc, #108]	; (8007768 <pvPortMalloc+0x190>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d203      	bcs.n	800770a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007702:	4b17      	ldr	r3, [pc, #92]	; (8007760 <pvPortMalloc+0x188>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a18      	ldr	r2, [pc, #96]	; (8007768 <pvPortMalloc+0x190>)
 8007708:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	4b13      	ldr	r3, [pc, #76]	; (800775c <pvPortMalloc+0x184>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	431a      	orrs	r2, r3
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <pvPortMalloc+0x194>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3301      	adds	r3, #1
 8007724:	4a11      	ldr	r2, [pc, #68]	; (800776c <pvPortMalloc+0x194>)
 8007726:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007728:	f7ff f8ac 	bl	8006884 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	f003 0307 	and.w	r3, r3, #7
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <pvPortMalloc+0x174>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	60fb      	str	r3, [r7, #12]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <pvPortMalloc+0x172>
	return pvReturn;
 800774c:	69fb      	ldr	r3, [r7, #28]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3728      	adds	r7, #40	; 0x28
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20000fdc 	.word	0x20000fdc
 800775c:	20000ff0 	.word	0x20000ff0
 8007760:	20000fe0 	.word	0x20000fe0
 8007764:	20000fd4 	.word	0x20000fd4
 8007768:	20000fe4 	.word	0x20000fe4
 800776c:	20000fe8 	.word	0x20000fe8

08007770 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d04d      	beq.n	800781e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007782:	2308      	movs	r3, #8
 8007784:	425b      	negs	r3, r3
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	4413      	add	r3, r2
 800778a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	685a      	ldr	r2, [r3, #4]
 8007794:	4b24      	ldr	r3, [pc, #144]	; (8007828 <vPortFree+0xb8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10a      	bne.n	80077b4 <vPortFree+0x44>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	60fb      	str	r3, [r7, #12]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <vPortFree+0x62>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60bb      	str	r3, [r7, #8]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	4b14      	ldr	r3, [pc, #80]	; (8007828 <vPortFree+0xb8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4013      	ands	r3, r2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01e      	beq.n	800781e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11a      	bne.n	800781e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <vPortFree+0xb8>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	43db      	mvns	r3, r3
 80077f2:	401a      	ands	r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077f8:	f7ff f836 	bl	8006868 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	4b0a      	ldr	r3, [pc, #40]	; (800782c <vPortFree+0xbc>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4413      	add	r3, r2
 8007806:	4a09      	ldr	r2, [pc, #36]	; (800782c <vPortFree+0xbc>)
 8007808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800780a:	6938      	ldr	r0, [r7, #16]
 800780c:	f000 f874 	bl	80078f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <vPortFree+0xc0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	3301      	adds	r3, #1
 8007816:	4a06      	ldr	r2, [pc, #24]	; (8007830 <vPortFree+0xc0>)
 8007818:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800781a:	f7ff f833 	bl	8006884 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800781e:	bf00      	nop
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000ff0 	.word	0x20000ff0
 800782c:	20000fe0 	.word	0x20000fe0
 8007830:	20000fec 	.word	0x20000fec

08007834 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800783a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800783e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007840:	4b27      	ldr	r3, [pc, #156]	; (80078e0 <prvHeapInit+0xac>)
 8007842:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00c      	beq.n	8007868 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0307 	bic.w	r3, r3, #7
 800785a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <prvHeapInit+0xac>)
 8007864:	4413      	add	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800786c:	4a1d      	ldr	r2, [pc, #116]	; (80078e4 <prvHeapInit+0xb0>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007872:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <prvHeapInit+0xb0>)
 8007874:	2200      	movs	r2, #0
 8007876:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	4413      	add	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007880:	2208      	movs	r2, #8
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <prvHeapInit+0xb4>)
 8007894:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007896:	4b14      	ldr	r3, [pc, #80]	; (80078e8 <prvHeapInit+0xb4>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2200      	movs	r2, #0
 800789c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <prvHeapInit+0xb4>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2200      	movs	r2, #0
 80078a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	1ad2      	subs	r2, r2, r3
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078b4:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <prvHeapInit+0xb4>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	4a0a      	ldr	r2, [pc, #40]	; (80078ec <prvHeapInit+0xb8>)
 80078c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	4a09      	ldr	r2, [pc, #36]	; (80078f0 <prvHeapInit+0xbc>)
 80078ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80078cc:	4b09      	ldr	r3, [pc, #36]	; (80078f4 <prvHeapInit+0xc0>)
 80078ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078d2:	601a      	str	r2, [r3, #0]
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	2000041c 	.word	0x2000041c
 80078e4:	20000fd4 	.word	0x20000fd4
 80078e8:	20000fdc 	.word	0x20000fdc
 80078ec:	20000fe4 	.word	0x20000fe4
 80078f0:	20000fe0 	.word	0x20000fe0
 80078f4:	20000ff0 	.word	0x20000ff0

080078f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <prvInsertBlockIntoFreeList+0xac>)
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e002      	b.n	800790c <prvInsertBlockIntoFreeList+0x14>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d8f7      	bhi.n	8007906 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	4413      	add	r3, r2
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	d108      	bne.n	800793a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	441a      	add	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	441a      	add	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d118      	bne.n	8007980 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d00d      	beq.n	8007976 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	441a      	add	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e008      	b.n	8007988 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007976:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <prvInsertBlockIntoFreeList+0xb0>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e003      	b.n	8007988 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	429a      	cmp	r2, r3
 800798e:	d002      	beq.n	8007996 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	20000fd4 	.word	0x20000fd4
 80079a8:	20000fdc 	.word	0x20000fdc

080079ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4a07      	ldr	r2, [pc, #28]	; (80079d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80079bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4a06      	ldr	r2, [pc, #24]	; (80079dc <vApplicationGetIdleTaskMemory+0x30>)
 80079c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2280      	movs	r2, #128	; 0x80
 80079c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20000ff4 	.word	0x20000ff4
 80079dc:	20001048 	.word	0x20001048

080079e0 <__io_putchar>:
#endif

#define MAX_BUF 50

PUTCHAR_PROTOTYPE
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80079e8:	1d39      	adds	r1, r7, #4
 80079ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ee:	2201      	movs	r2, #1
 80079f0:	4803      	ldr	r0, [pc, #12]	; (8007a00 <__io_putchar+0x20>)
 80079f2:	f7fd fa21 	bl	8004e38 <HAL_UART_Transmit>
  return ch;
 80079f6:	687b      	ldr	r3, [r7, #4]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	2000129c 	.word	0x2000129c

08007a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a04:	b5b0      	push	{r4, r5, r7, lr}
 8007a06:	b09a      	sub	sp, #104	; 0x68
 8007a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	mode = 0;
 8007a0a:	4b3c      	ldr	r3, [pc, #240]	; (8007afc <main+0xf8>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
	button_pressed = 0;
 8007a10:	4b3b      	ldr	r3, [pc, #236]	; (8007b00 <main+0xfc>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a16:	f7fa f827 	bl	8001a68 <HAL_Init>

  /* USER CODE BEGIN Init */
  // I2C initializations
  BSP_TSENSOR_Init(); 	// Temperature sensor
 8007a1a:	f7f9 fc7b 	bl	8001314 <BSP_TSENSOR_Init>
  BSP_MAGNETO_Init(); 	// Magnetometer
 8007a1e:	f7f9 fc07 	bl	8001230 <BSP_MAGNETO_Init>
  BSP_GYRO_Init();		// Gyroscope
 8007a22:	f7f9 fbab 	bl	800117c <BSP_GYRO_Init>
  BSP_PSENSOR_Init();	// Barometer
 8007a26:	f7f9 fc47 	bl	80012b8 <BSP_PSENSOR_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a2a:	f000 f87d 	bl	8007b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a2e:	f000 f959 	bl	8007ce4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8007a32:	f000 f8cb 	bl	8007bcc <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8007a36:	f000 f909 	bl	8007c4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  printf("OS Starting\n\r");
 8007a3a:	4832      	ldr	r0, [pc, #200]	; (8007b04 <main+0x100>)
 8007a3c:	f001 f9fe 	bl	8008e3c <iprintf>
  printf("OS Starting\n\r");
 8007a40:	4830      	ldr	r0, [pc, #192]	; (8007b04 <main+0x100>)
 8007a42:	f001 f9fb 	bl	8008e3c <iprintf>
  printf("OS Starting\n\r");
 8007a46:	482f      	ldr	r0, [pc, #188]	; (8007b04 <main+0x100>)
 8007a48:	f001 f9f8 	bl	8008e3c <iprintf>
  printf("OS Starting\n\r");
 8007a4c:	482d      	ldr	r0, [pc, #180]	; (8007b04 <main+0x100>)
 8007a4e:	f001 f9f5 	bl	8008e3c <iprintf>
  printf("OS Starting\n\r");
 8007a52:	482c      	ldr	r0, [pc, #176]	; (8007b04 <main+0x100>)
 8007a54:	f001 f9f2 	bl	8008e3c <iprintf>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of bufMutex */
  osMutexDef(bufMutex);
 8007a58:	2300      	movs	r3, #0
 8007a5a:	663b      	str	r3, [r7, #96]	; 0x60
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	667b      	str	r3, [r7, #100]	; 0x64
  bufMutexHandle = osMutexCreate(osMutex(bufMutex));
 8007a60:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7fe f8b2 	bl	8005bce <osMutexCreate>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <main+0x104>)
 8007a6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of sensorMutex */
  osMutexDef(sensorMutex);
 8007a70:	2300      	movs	r3, #0
 8007a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a74:	2300      	movs	r3, #0
 8007a76:	65fb      	str	r3, [r7, #92]	; 0x5c
  sensorMutexHandle = osMutexCreate(osMutex(sensorMutex));
 8007a78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe f8a6 	bl	8005bce <osMutexCreate>
 8007a82:	4603      	mov	r3, r0
 8007a84:	4a21      	ldr	r2, [pc, #132]	; (8007b0c <main+0x108>)
 8007a86:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readSensor */
  osThreadDef(readSensor, StartReadSensor, osPriorityNormal, 0, 128);
 8007a88:	4b21      	ldr	r3, [pc, #132]	; (8007b10 <main+0x10c>)
 8007a8a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8007a8e:	461d      	mov	r5, r3
 8007a90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007a98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorHandle = osThreadCreate(osThread(readSensor), NULL);
 8007a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe f833 	bl	8005b0e <osThreadCreate>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <main+0x110>)
 8007aac:	6013      	str	r3, [r2, #0]

  /* definition and creation of handleButton */
  osThreadDef(handleButton, StartHandleButton, osPriorityNormal, 0, 128);
 8007aae:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <main+0x114>)
 8007ab0:	f107 0420 	add.w	r4, r7, #32
 8007ab4:	461d      	mov	r5, r3
 8007ab6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  handleButtonHandle = osThreadCreate(osThread(handleButton), NULL);
 8007ac2:	f107 0320 	add.w	r3, r7, #32
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7fe f820 	bl	8005b0e <osThreadCreate>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	4a12      	ldr	r2, [pc, #72]	; (8007b1c <main+0x118>)
 8007ad2:	6013      	str	r3, [r2, #0]

  /* definition and creation of printSerial */
  osThreadDef(printSerial, StartPrintSerial, osPriorityNormal, 0, 128);
 8007ad4:	4b12      	ldr	r3, [pc, #72]	; (8007b20 <main+0x11c>)
 8007ad6:	1d3c      	adds	r4, r7, #4
 8007ad8:	461d      	mov	r5, r3
 8007ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  printSerialHandle = osThreadCreate(osThread(printSerial), NULL);
 8007ae6:	1d3b      	adds	r3, r7, #4
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fe f80f 	bl	8005b0e <osThreadCreate>
 8007af0:	4603      	mov	r3, r0
 8007af2:	4a0c      	ldr	r2, [pc, #48]	; (8007b24 <main+0x120>)
 8007af4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8007af6:	f7fe f803 	bl	8005b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007afa:	e7fe      	b.n	8007afa <main+0xf6>
 8007afc:	20001340 	.word	0x20001340
 8007b00:	20001360 	.word	0x20001360
 8007b04:	0800b00c 	.word	0x0800b00c
 8007b08:	20001338 	.word	0x20001338
 8007b0c:	2000133c 	.word	0x2000133c
 8007b10:	0800b01c 	.word	0x0800b01c
 8007b14:	2000132c 	.word	0x2000132c
 8007b18:	0800b038 	.word	0x0800b038
 8007b1c:	20001330 	.word	0x20001330
 8007b20:	0800b054 	.word	0x0800b054
 8007b24:	20001334 	.word	0x20001334

08007b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b096      	sub	sp, #88	; 0x58
 8007b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b2e:	f107 0314 	add.w	r3, r7, #20
 8007b32:	2244      	movs	r2, #68	; 0x44
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fd0e 	bl	8008558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b3c:	463b      	mov	r3, r7
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	605a      	str	r2, [r3, #4]
 8007b44:	609a      	str	r2, [r3, #8]
 8007b46:	60da      	str	r2, [r3, #12]
 8007b48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	f7fb f98c 	bl	8002e68 <HAL_PWREx_ControlVoltageScaling>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8007b56:	f000 fa1d 	bl	8007f94 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007b5a:	2310      	movs	r3, #16
 8007b5c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007b66:	2360      	movs	r3, #96	; 0x60
 8007b68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007b72:	2301      	movs	r3, #1
 8007b74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8007b76:	233c      	movs	r3, #60	; 0x3c
 8007b78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007b7e:	2302      	movs	r3, #2
 8007b80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007b82:	2302      	movs	r3, #2
 8007b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b86:	f107 0314 	add.w	r3, r7, #20
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fb fa10 	bl	8002fb0 <HAL_RCC_OscConfig>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8007b96:	f000 f9fd 	bl	8007f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b9a:	230f      	movs	r3, #15
 8007b9c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007bae:	463b      	mov	r3, r7
 8007bb0:	2105      	movs	r1, #5
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fb fe16 	bl	80037e4 <HAL_RCC_ClockConfig>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007bbe:	f000 f9e9 	bl	8007f94 <Error_Handler>
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3758      	adds	r7, #88	; 0x58
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bd2:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <MX_I2C2_Init+0x78>)
 8007bd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8007bd6:	4b1a      	ldr	r3, [pc, #104]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <MX_I2C2_Init+0x7c>)
 8007bda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007bdc:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007be2:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007be4:	2201      	movs	r2, #1
 8007be6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007be8:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007bee:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007bfa:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007c00:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007c06:	480e      	ldr	r0, [pc, #56]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007c08:	f7fa fae4 	bl	80021d4 <HAL_I2C_Init>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007c12:	f000 f9bf 	bl	8007f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007c16:	2100      	movs	r1, #0
 8007c18:	4809      	ldr	r0, [pc, #36]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007c1a:	f7fb f86d 	bl	8002cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007c24:	f000 f9b6 	bl	8007f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4805      	ldr	r0, [pc, #20]	; (8007c40 <MX_I2C2_Init+0x74>)
 8007c2c:	f7fb f8af 	bl	8002d8e <HAL_I2CEx_ConfigDigitalFilter>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007c36:	f000 f9ad 	bl	8007f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007c3a:	bf00      	nop
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	bf00      	nop
 8007c40:	20001248 	.word	0x20001248
 8007c44:	40005800 	.word	0x40005800
 8007c48:	307075b1 	.word	0x307075b1

08007c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c50:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c52:	4a23      	ldr	r2, [pc, #140]	; (8007ce0 <MX_USART1_UART_Init+0x94>)
 8007c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007c56:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c64:	4b1d      	ldr	r3, [pc, #116]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c6a:	4b1c      	ldr	r3, [pc, #112]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c70:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c72:	220c      	movs	r2, #12
 8007c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c76:	4b19      	ldr	r3, [pc, #100]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c7c:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007c88:	4b14      	ldr	r3, [pc, #80]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007c8e:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007c94:	4811      	ldr	r0, [pc, #68]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007c96:	f7fd f87f 	bl	8004d98 <HAL_UART_Init>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d001      	beq.n	8007ca4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007ca0:	f000 f978 	bl	8007f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	480d      	ldr	r0, [pc, #52]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007ca8:	f7fd fe48 	bl	800593c <HAL_UARTEx_SetTxFifoThreshold>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007cb2:	f000 f96f 	bl	8007f94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	4808      	ldr	r0, [pc, #32]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007cba:	f7fd fe7d 	bl	80059b8 <HAL_UARTEx_SetRxFifoThreshold>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007cc4:	f000 f966 	bl	8007f94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007cc8:	4804      	ldr	r0, [pc, #16]	; (8007cdc <MX_USART1_UART_Init+0x90>)
 8007cca:	f7fd fdfe 	bl	80058ca <HAL_UARTEx_DisableFifoMode>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007cd4:	f000 f95e 	bl	8007f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007cd8:	bf00      	nop
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	2000129c 	.word	0x2000129c
 8007ce0:	40013800 	.word	0x40013800

08007ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cea:	f107 030c 	add.w	r3, r7, #12
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	609a      	str	r2, [r3, #8]
 8007cf6:	60da      	str	r2, [r3, #12]
 8007cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cfa:	4b25      	ldr	r3, [pc, #148]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cfe:	4a24      	ldr	r2, [pc, #144]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d00:	f043 0304 	orr.w	r3, r3, #4
 8007d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d06:	4b22      	ldr	r3, [pc, #136]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d12:	4b1f      	ldr	r3, [pc, #124]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d16:	4a1e      	ldr	r2, [pc, #120]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d18:	f043 0302 	orr.w	r3, r3, #2
 8007d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d1e:	4b1c      	ldr	r3, [pc, #112]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d2a:	4b19      	ldr	r3, [pc, #100]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	4a18      	ldr	r2, [pc, #96]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d36:	4b16      	ldr	r3, [pc, #88]	; (8007d90 <MX_GPIO_Init+0xac>)
 8007d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8007d42:	2200      	movs	r2, #0
 8007d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d48:	4812      	ldr	r0, [pc, #72]	; (8007d94 <MX_GPIO_Init+0xb0>)
 8007d4a:	f7fa fa2b 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8007d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007d54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	4619      	mov	r1, r3
 8007d64:	480c      	ldr	r0, [pc, #48]	; (8007d98 <MX_GPIO_Init+0xb4>)
 8007d66:	f7f9 ff99 	bl	8001c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8007d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d70:	2301      	movs	r3, #1
 8007d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8007d7c:	f107 030c 	add.w	r3, r7, #12
 8007d80:	4619      	mov	r1, r3
 8007d82:	4804      	ldr	r0, [pc, #16]	; (8007d94 <MX_GPIO_Init+0xb0>)
 8007d84:	f7f9 ff8a 	bl	8001c9c <HAL_GPIO_Init>

}
 8007d88:	bf00      	nop
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	40021000 	.word	0x40021000
 8007d94:	48000400 	.word	0x48000400
 8007d98:	48000800 	.word	0x48000800

08007d9c <StartReadSensor>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadSensor */
void StartReadSensor(void const * argument)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;) {
		  osDelay(100); // 10 Hz sample rate
 8007da4:	2064      	movs	r0, #100	; 0x64
 8007da6:	f7fd fefe 	bl	8005ba6 <osDelay>


		  // Get new readings
		  if (mode == 0) {
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <StartReadSensor+0x60>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <StartReadSensor+0x2a>
			  //printf("Reading temp \n\r");
			  temp_read = BSP_TSENSOR_ReadTemp();
 8007db2:	f7f9 facb 	bl	800134c <BSP_TSENSOR_ReadTemp>
 8007db6:	ee07 0a90 	vmov	s15, r0
 8007dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dbe:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <StartReadSensor+0x64>)
 8007dc0:	edc3 7a00 	vstr	s15, [r3]
 8007dc4:	e7ee      	b.n	8007da4 <StartReadSensor+0x8>
		  } else if (mode == 1) {
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <StartReadSensor+0x60>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d103      	bne.n	8007dd6 <StartReadSensor+0x3a>
			  //printf("Reading magneto \n\r");
			  BSP_MAGNETO_GetXYZ(&mag_read);
 8007dce:	480d      	ldr	r0, [pc, #52]	; (8007e04 <StartReadSensor+0x68>)
 8007dd0:	f7f9 fa5a 	bl	8001288 <BSP_MAGNETO_GetXYZ>
 8007dd4:	e7e6      	b.n	8007da4 <StartReadSensor+0x8>
		  } else if (mode == 2) {
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <StartReadSensor+0x60>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d103      	bne.n	8007de6 <StartReadSensor+0x4a>
			  //printf("Reading gyro \n\r");
			  BSP_GYRO_GetXYZ(&gyro_read);
 8007dde:	480a      	ldr	r0, [pc, #40]	; (8007e08 <StartReadSensor+0x6c>)
 8007de0:	f7f9 fa0e 	bl	8001200 <BSP_GYRO_GetXYZ>
 8007de4:	e7de      	b.n	8007da4 <StartReadSensor+0x8>
		  } else {
			  //printf("Reading bsp \n\r");
			  bar_read = BSP_PSENSOR_ReadPressure();
 8007de6:	f7f9 fa87 	bl	80012f8 <BSP_PSENSOR_ReadPressure>
 8007dea:	ee07 0a90 	vmov	s15, r0
 8007dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007df2:	4b06      	ldr	r3, [pc, #24]	; (8007e0c <StartReadSensor+0x70>)
 8007df4:	edc3 7a00 	vstr	s15, [r3]
		  osDelay(100); // 10 Hz sample rate
 8007df8:	e7d4      	b.n	8007da4 <StartReadSensor+0x8>
 8007dfa:	bf00      	nop
 8007dfc:	20001340 	.word	0x20001340
 8007e00:	20001344 	.word	0x20001344
 8007e04:	20001348 	.word	0x20001348
 8007e08:	20001350 	.word	0x20001350
 8007e0c:	2000135c 	.word	0x2000135c

08007e10 <StartHandleButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHandleButton */
void StartHandleButton(void const * argument)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHandleButton */
  /* Infinite loop */
  for(;;) {
	  osDelay(1); //1kHz
 8007e18:	2001      	movs	r0, #1
 8007e1a:	f7fd fec4 	bl	8005ba6 <osDelay>


	  // check if button was pressed and change mode
  	  if (button_pressed == 1) {
 8007e1e:	4b18      	ldr	r3, [pc, #96]	; (8007e80 <StartHandleButton+0x70>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d1f8      	bne.n	8007e18 <StartHandleButton+0x8>
  		  mode = (mode + 1)%4;
 8007e26:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <StartHandleButton+0x74>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	425a      	negs	r2, r3
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	f002 0203 	and.w	r2, r2, #3
 8007e36:	bf58      	it	pl
 8007e38:	4253      	negpl	r3, r2
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	4b11      	ldr	r3, [pc, #68]	; (8007e84 <StartHandleButton+0x74>)
 8007e3e:	701a      	strb	r2, [r3, #0]

  		  switch (mode){
 8007e40:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <StartHandleButton+0x74>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d817      	bhi.n	8007e78 <StartHandleButton+0x68>
 8007e48:	a201      	add	r2, pc, #4	; (adr r2, 8007e50 <StartHandleButton+0x40>)
 8007e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4e:	bf00      	nop
 8007e50:	08007e61 	.word	0x08007e61
 8007e54:	08007e67 	.word	0x08007e67
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e73 	.word	0x08007e73
  		  case 0:
  			  printf("Now reading thermometer.\n\r");
 8007e60:	4809      	ldr	r0, [pc, #36]	; (8007e88 <StartHandleButton+0x78>)
 8007e62:	f000 ffeb 	bl	8008e3c <iprintf>
  		  case 1:
  			  printf("Now reading gyroscope.\n\r");
 8007e66:	4809      	ldr	r0, [pc, #36]	; (8007e8c <StartHandleButton+0x7c>)
 8007e68:	f000 ffe8 	bl	8008e3c <iprintf>
  		  case 2:
  			  printf("Now reading magnetometer.\n\r");
 8007e6c:	4808      	ldr	r0, [pc, #32]	; (8007e90 <StartHandleButton+0x80>)
 8007e6e:	f000 ffe5 	bl	8008e3c <iprintf>
  		  case 3:
  			  printf("Now reading barometer.\n\r");
 8007e72:	4808      	ldr	r0, [pc, #32]	; (8007e94 <StartHandleButton+0x84>)
 8007e74:	f000 ffe2 	bl	8008e3c <iprintf>
  		  }
  		  button_pressed = 0;
 8007e78:	4b01      	ldr	r3, [pc, #4]	; (8007e80 <StartHandleButton+0x70>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	701a      	strb	r2, [r3, #0]
	  osDelay(1); //1kHz
 8007e7e:	e7cb      	b.n	8007e18 <StartHandleButton+0x8>
 8007e80:	20001360 	.word	0x20001360
 8007e84:	20001340 	.word	0x20001340
 8007e88:	0800b070 	.word	0x0800b070
 8007e8c:	0800b08c 	.word	0x0800b08c
 8007e90:	0800b0a8 	.word	0x0800b0a8
 8007e94:	0800b0c4 	.word	0x0800b0c4

08007e98 <StartPrintSerial>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintSerial */
void StartPrintSerial(void const * argument)
{
 8007e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af04      	add	r7, sp, #16
 8007ea0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintSerial */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8007ea2:	2064      	movs	r0, #100	; 0x64
 8007ea4:	f7fd fe7f 	bl	8005ba6 <osDelay>
	  printf("Printing to serial terminal \n\r");
 8007ea8:	4827      	ldr	r0, [pc, #156]	; (8007f48 <StartPrintSerial+0xb0>)
 8007eaa:	f000 ffc7 	bl	8008e3c <iprintf>

	  	// Send to serial terminal
//	    osMutexWait(bufMutexHandle, osWaitForever);

	    if (mode == 0) {
 8007eae:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <StartPrintSerial+0xb4>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <StartPrintSerial+0x34>
	    	printf("Thermometer: %f\n\r", temp_read);
 8007eb6:	4b26      	ldr	r3, [pc, #152]	; (8007f50 <StartPrintSerial+0xb8>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7f8 fb5c 	bl	8000578 <__aeabi_f2d>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4823      	ldr	r0, [pc, #140]	; (8007f54 <StartPrintSerial+0xbc>)
 8007ec6:	f000 ffb9 	bl	8008e3c <iprintf>
 8007eca:	e7ea      	b.n	8007ea2 <StartPrintSerial+0xa>
	    } else if (mode == 1) {
 8007ecc:	4b1f      	ldr	r3, [pc, #124]	; (8007f4c <StartPrintSerial+0xb4>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d10b      	bne.n	8007eec <StartPrintSerial+0x54>
	    	printf("Magnetometer: [%d, %d, %d]\n\r", mag_read[0], mag_read[1], mag_read[2]);
 8007ed4:	4b20      	ldr	r3, [pc, #128]	; (8007f58 <StartPrintSerial+0xc0>)
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4b1f      	ldr	r3, [pc, #124]	; (8007f58 <StartPrintSerial+0xc0>)
 8007edc:	885b      	ldrh	r3, [r3, #2]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	4b1d      	ldr	r3, [pc, #116]	; (8007f58 <StartPrintSerial+0xc0>)
 8007ee2:	889b      	ldrh	r3, [r3, #4]
 8007ee4:	481d      	ldr	r0, [pc, #116]	; (8007f5c <StartPrintSerial+0xc4>)
 8007ee6:	f000 ffa9 	bl	8008e3c <iprintf>
 8007eea:	e7da      	b.n	8007ea2 <StartPrintSerial+0xa>
	    } else if (mode == 2) {
 8007eec:	4b17      	ldr	r3, [pc, #92]	; (8007f4c <StartPrintSerial+0xb4>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d11e      	bne.n	8007f32 <StartPrintSerial+0x9a>
	    	printf("Gyroscope: [%f, %f, %f]\n\r", gyro_read[0], gyro_read[1], gyro_read[2]);
 8007ef4:	4b1a      	ldr	r3, [pc, #104]	; (8007f60 <StartPrintSerial+0xc8>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f8 fb3d 	bl	8000578 <__aeabi_f2d>
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <StartPrintSerial+0xc8>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7f8 fb36 	bl	8000578 <__aeabi_f2d>
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	4b13      	ldr	r3, [pc, #76]	; (8007f60 <StartPrintSerial+0xc8>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7f8 fb2f 	bl	8000578 <__aeabi_f2d>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f22:	e9cd 4500 	strd	r4, r5, [sp]
 8007f26:	4642      	mov	r2, r8
 8007f28:	464b      	mov	r3, r9
 8007f2a:	480e      	ldr	r0, [pc, #56]	; (8007f64 <StartPrintSerial+0xcc>)
 8007f2c:	f000 ff86 	bl	8008e3c <iprintf>
 8007f30:	e7b7      	b.n	8007ea2 <StartPrintSerial+0xa>
	    } else {
	    	printf("Barometer: %f\n\r", bar_read);
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <StartPrintSerial+0xd0>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f8 fb1e 	bl	8000578 <__aeabi_f2d>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	460b      	mov	r3, r1
 8007f40:	480a      	ldr	r0, [pc, #40]	; (8007f6c <StartPrintSerial+0xd4>)
 8007f42:	f000 ff7b 	bl	8008e3c <iprintf>
	  osDelay(100);
 8007f46:	e7ac      	b.n	8007ea2 <StartPrintSerial+0xa>
 8007f48:	0800b0e0 	.word	0x0800b0e0
 8007f4c:	20001340 	.word	0x20001340
 8007f50:	20001344 	.word	0x20001344
 8007f54:	0800b100 	.word	0x0800b100
 8007f58:	20001348 	.word	0x20001348
 8007f5c:	0800b114 	.word	0x0800b114
 8007f60:	20001350 	.word	0x20001350
 8007f64:	0800b134 	.word	0x0800b134
 8007f68:	2000135c 	.word	0x2000135c
 8007f6c:	0800b150 	.word	0x0800b150

08007f70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a04      	ldr	r2, [pc, #16]	; (8007f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007f82:	f7f9 fd89 	bl	8001a98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40001000 	.word	0x40001000

08007f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007f98:	b672      	cpsid	i
}
 8007f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007f9c:	e7fe      	b.n	8007f9c <Error_Handler+0x8>
	...

08007fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fa6:	4b11      	ldr	r3, [pc, #68]	; (8007fec <HAL_MspInit+0x4c>)
 8007fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007faa:	4a10      	ldr	r2, [pc, #64]	; (8007fec <HAL_MspInit+0x4c>)
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8007fb2:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <HAL_MspInit+0x4c>)
 8007fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fbe:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <HAL_MspInit+0x4c>)
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	4a0a      	ldr	r2, [pc, #40]	; (8007fec <HAL_MspInit+0x4c>)
 8007fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8007fca:	4b08      	ldr	r3, [pc, #32]	; (8007fec <HAL_MspInit+0x4c>)
 8007fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	603b      	str	r3, [r7, #0]
 8007fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	210f      	movs	r1, #15
 8007fda:	f06f 0001 	mvn.w	r0, #1
 8007fde:	f7f9 fe33 	bl	8001c48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	40021000 	.word	0x40021000

08007ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b0ae      	sub	sp, #184	; 0xb8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	605a      	str	r2, [r3, #4]
 8008002:	609a      	str	r2, [r3, #8]
 8008004:	60da      	str	r2, [r3, #12]
 8008006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008008:	f107 0310 	add.w	r3, r7, #16
 800800c:	2294      	movs	r2, #148	; 0x94
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f000 faa1 	bl	8008558 <memset>
  if(hi2c->Instance==I2C2)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a21      	ldr	r2, [pc, #132]	; (80080a0 <HAL_I2C_MspInit+0xb0>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d13b      	bne.n	8008098 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8008020:	2380      	movs	r3, #128	; 0x80
 8008022:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8008024:	2300      	movs	r3, #0
 8008026:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008028:	f107 0310 	add.w	r3, r7, #16
 800802c:	4618      	mov	r0, r3
 800802e:	f7fb fec9 	bl	8003dc4 <HAL_RCCEx_PeriphCLKConfig>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8008038:	f7ff ffac 	bl	8007f94 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800803c:	4b19      	ldr	r3, [pc, #100]	; (80080a4 <HAL_I2C_MspInit+0xb4>)
 800803e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008040:	4a18      	ldr	r2, [pc, #96]	; (80080a4 <HAL_I2C_MspInit+0xb4>)
 8008042:	f043 0302 	orr.w	r3, r3, #2
 8008046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008048:	4b16      	ldr	r3, [pc, #88]	; (80080a4 <HAL_I2C_MspInit+0xb4>)
 800804a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008054:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800805c:	2312      	movs	r3, #18
 800805e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008062:	2300      	movs	r3, #0
 8008064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008068:	2303      	movs	r3, #3
 800806a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800806e:	2304      	movs	r3, #4
 8008070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008074:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008078:	4619      	mov	r1, r3
 800807a:	480b      	ldr	r0, [pc, #44]	; (80080a8 <HAL_I2C_MspInit+0xb8>)
 800807c:	f7f9 fe0e 	bl	8001c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <HAL_I2C_MspInit+0xb4>)
 8008082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008084:	4a07      	ldr	r2, [pc, #28]	; (80080a4 <HAL_I2C_MspInit+0xb4>)
 8008086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800808a:	6593      	str	r3, [r2, #88]	; 0x58
 800808c:	4b05      	ldr	r3, [pc, #20]	; (80080a4 <HAL_I2C_MspInit+0xb4>)
 800808e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008094:	60bb      	str	r3, [r7, #8]
 8008096:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8008098:	bf00      	nop
 800809a:	37b8      	adds	r7, #184	; 0xb8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	40005800 	.word	0x40005800
 80080a4:	40021000 	.word	0x40021000
 80080a8:	48000400 	.word	0x48000400

080080ac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a0b      	ldr	r2, [pc, #44]	; (80080e8 <HAL_I2C_MspDeInit+0x3c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d10f      	bne.n	80080de <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80080be:	4b0b      	ldr	r3, [pc, #44]	; (80080ec <HAL_I2C_MspDeInit+0x40>)
 80080c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <HAL_I2C_MspDeInit+0x40>)
 80080c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80080c8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80080ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080ce:	4808      	ldr	r0, [pc, #32]	; (80080f0 <HAL_I2C_MspDeInit+0x44>)
 80080d0:	f7f9 ff76 	bl	8001fc0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80080d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080d8:	4805      	ldr	r0, [pc, #20]	; (80080f0 <HAL_I2C_MspDeInit+0x44>)
 80080da:	f7f9 ff71 	bl	8001fc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40005800 	.word	0x40005800
 80080ec:	40021000 	.word	0x40021000
 80080f0:	48000400 	.word	0x48000400

080080f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b0ae      	sub	sp, #184	; 0xb8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	605a      	str	r2, [r3, #4]
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	60da      	str	r2, [r3, #12]
 800810a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800810c:	f107 0310 	add.w	r3, r7, #16
 8008110:	2294      	movs	r2, #148	; 0x94
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fa1f 	bl	8008558 <memset>
  if(huart->Instance==USART1)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <HAL_UART_MspInit+0xb0>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d13a      	bne.n	800819a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008124:	2301      	movs	r3, #1
 8008126:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008128:	2300      	movs	r3, #0
 800812a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800812c:	f107 0310 	add.w	r3, r7, #16
 8008130:	4618      	mov	r0, r3
 8008132:	f7fb fe47 	bl	8003dc4 <HAL_RCCEx_PeriphCLKConfig>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800813c:	f7ff ff2a 	bl	8007f94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008140:	4b19      	ldr	r3, [pc, #100]	; (80081a8 <HAL_UART_MspInit+0xb4>)
 8008142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008144:	4a18      	ldr	r2, [pc, #96]	; (80081a8 <HAL_UART_MspInit+0xb4>)
 8008146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800814a:	6613      	str	r3, [r2, #96]	; 0x60
 800814c:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <HAL_UART_MspInit+0xb4>)
 800814e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008158:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <HAL_UART_MspInit+0xb4>)
 800815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815c:	4a12      	ldr	r2, [pc, #72]	; (80081a8 <HAL_UART_MspInit+0xb4>)
 800815e:	f043 0302 	orr.w	r3, r3, #2
 8008162:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008164:	4b10      	ldr	r3, [pc, #64]	; (80081a8 <HAL_UART_MspInit+0xb4>)
 8008166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	60bb      	str	r3, [r7, #8]
 800816e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008170:	23c0      	movs	r3, #192	; 0xc0
 8008172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008176:	2302      	movs	r3, #2
 8008178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800817c:	2300      	movs	r3, #0
 800817e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008182:	2303      	movs	r3, #3
 8008184:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008188:	2307      	movs	r3, #7
 800818a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800818e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008192:	4619      	mov	r1, r3
 8008194:	4805      	ldr	r0, [pc, #20]	; (80081ac <HAL_UART_MspInit+0xb8>)
 8008196:	f7f9 fd81 	bl	8001c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800819a:	bf00      	nop
 800819c:	37b8      	adds	r7, #184	; 0xb8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40013800 	.word	0x40013800
 80081a8:	40021000 	.word	0x40021000
 80081ac:	48000400 	.word	0x48000400

080081b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08e      	sub	sp, #56	; 0x38
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80081be:	4b34      	ldr	r3, [pc, #208]	; (8008290 <HAL_InitTick+0xe0>)
 80081c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c2:	4a33      	ldr	r2, [pc, #204]	; (8008290 <HAL_InitTick+0xe0>)
 80081c4:	f043 0310 	orr.w	r3, r3, #16
 80081c8:	6593      	str	r3, [r2, #88]	; 0x58
 80081ca:	4b31      	ldr	r3, [pc, #196]	; (8008290 <HAL_InitTick+0xe0>)
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	f003 0310 	and.w	r3, r3, #16
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80081d6:	f107 0210 	add.w	r2, r7, #16
 80081da:	f107 0314 	add.w	r3, r7, #20
 80081de:	4611      	mov	r1, r2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fb fcfd 	bl	8003be0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d103      	bne.n	80081f8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80081f0:	f7fb fcca 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 80081f4:	6378      	str	r0, [r7, #52]	; 0x34
 80081f6:	e004      	b.n	8008202 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80081f8:	f7fb fcc6 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 80081fc:	4603      	mov	r3, r0
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008204:	4a23      	ldr	r2, [pc, #140]	; (8008294 <HAL_InitTick+0xe4>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	0c9b      	lsrs	r3, r3, #18
 800820c:	3b01      	subs	r3, #1
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008210:	4b21      	ldr	r3, [pc, #132]	; (8008298 <HAL_InitTick+0xe8>)
 8008212:	4a22      	ldr	r2, [pc, #136]	; (800829c <HAL_InitTick+0xec>)
 8008214:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008216:	4b20      	ldr	r3, [pc, #128]	; (8008298 <HAL_InitTick+0xe8>)
 8008218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800821c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800821e:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <HAL_InitTick+0xe8>)
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008224:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <HAL_InitTick+0xe8>)
 8008226:	2200      	movs	r2, #0
 8008228:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <HAL_InitTick+0xe8>)
 800822c:	2200      	movs	r2, #0
 800822e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008230:	4b19      	ldr	r3, [pc, #100]	; (8008298 <HAL_InitTick+0xe8>)
 8008232:	2200      	movs	r2, #0
 8008234:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8008236:	4818      	ldr	r0, [pc, #96]	; (8008298 <HAL_InitTick+0xe8>)
 8008238:	f7fc fadc 	bl	80047f4 <HAL_TIM_Base_Init>
 800823c:	4603      	mov	r3, r0
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8008242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008246:	2b00      	cmp	r3, #0
 8008248:	d11b      	bne.n	8008282 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800824a:	4813      	ldr	r0, [pc, #76]	; (8008298 <HAL_InitTick+0xe8>)
 800824c:	f7fc fb34 	bl	80048b8 <HAL_TIM_Base_Start_IT>
 8008250:	4603      	mov	r3, r0
 8008252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8008256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800825a:	2b00      	cmp	r3, #0
 800825c:	d111      	bne.n	8008282 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800825e:	2036      	movs	r0, #54	; 0x36
 8008260:	f7f9 fd0e 	bl	8001c80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b0f      	cmp	r3, #15
 8008268:	d808      	bhi.n	800827c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800826a:	2200      	movs	r2, #0
 800826c:	6879      	ldr	r1, [r7, #4]
 800826e:	2036      	movs	r0, #54	; 0x36
 8008270:	f7f9 fcea 	bl	8001c48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008274:	4a0a      	ldr	r2, [pc, #40]	; (80082a0 <HAL_InitTick+0xf0>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6013      	str	r3, [r2, #0]
 800827a:	e002      	b.n	8008282 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8008282:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008286:	4618      	mov	r0, r3
 8008288:	3738      	adds	r7, #56	; 0x38
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40021000 	.word	0x40021000
 8008294:	431bde83 	.word	0x431bde83
 8008298:	20001364 	.word	0x20001364
 800829c:	40001000 	.word	0x40001000
 80082a0:	20000084 	.word	0x20000084

080082a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082a8:	e7fe      	b.n	80082a8 <NMI_Handler+0x4>

080082aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082aa:	b480      	push	{r7}
 80082ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082ae:	e7fe      	b.n	80082ae <HardFault_Handler+0x4>

080082b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082b4:	e7fe      	b.n	80082b4 <MemManage_Handler+0x4>

080082b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082b6:	b480      	push	{r7}
 80082b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082ba:	e7fe      	b.n	80082ba <BusFault_Handler+0x4>

080082bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082c0:	e7fe      	b.n	80082c0 <UsageFault_Handler+0x4>

080082c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082c2:	b480      	push	{r7}
 80082c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082c6:	bf00      	nop
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80082d4:	4802      	ldr	r0, [pc, #8]	; (80082e0 <TIM6_DAC_IRQHandler+0x10>)
 80082d6:	f7fc fb5f 	bl	8004998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80082da:	bf00      	nop
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20001364 	.word	0x20001364

080082e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80082e4:	b480      	push	{r7}
 80082e6:	af00      	add	r7, sp, #0
  return 1;
 80082e8:	2301      	movs	r3, #1
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <_kill>:

int _kill(int pid, int sig)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80082fe:	f000 f8f3 	bl	80084e8 <__errno>
 8008302:	4603      	mov	r3, r0
 8008304:	2216      	movs	r2, #22
 8008306:	601a      	str	r2, [r3, #0]
  return -1;
 8008308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <_exit>:

void _exit (int status)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800831c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ffe7 	bl	80082f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008326:	e7fe      	b.n	8008326 <_exit+0x12>

08008328 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e00a      	b.n	8008350 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800833a:	f3af 8000 	nop.w
 800833e:	4601      	mov	r1, r0
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	60ba      	str	r2, [r7, #8]
 8008346:	b2ca      	uxtb	r2, r1
 8008348:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	3301      	adds	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	dbf0      	blt.n	800833a <_read+0x12>
  }

  return len;
 8008358:	687b      	ldr	r3, [r7, #4]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b086      	sub	sp, #24
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800836e:	2300      	movs	r3, #0
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	e009      	b.n	8008388 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	1c5a      	adds	r2, r3, #1
 8008378:	60ba      	str	r2, [r7, #8]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fb2f 	bl	80079e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	3301      	adds	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	dbf1      	blt.n	8008374 <_write+0x12>
  }
  return len;
 8008390:	687b      	ldr	r3, [r7, #4]
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <_close>:

int _close(int file)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80083a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80083c2:	605a      	str	r2, [r3, #4]
  return 0;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <_isatty>:

int _isatty(int file)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80083da:	2301      	movs	r3, #1
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr

080083e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b085      	sub	sp, #20
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800840c:	4a14      	ldr	r2, [pc, #80]	; (8008460 <_sbrk+0x5c>)
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <_sbrk+0x60>)
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008418:	4b13      	ldr	r3, [pc, #76]	; (8008468 <_sbrk+0x64>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008420:	4b11      	ldr	r3, [pc, #68]	; (8008468 <_sbrk+0x64>)
 8008422:	4a12      	ldr	r2, [pc, #72]	; (800846c <_sbrk+0x68>)
 8008424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <_sbrk+0x64>)
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4413      	add	r3, r2
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	429a      	cmp	r2, r3
 8008432:	d207      	bcs.n	8008444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008434:	f000 f858 	bl	80084e8 <__errno>
 8008438:	4603      	mov	r3, r0
 800843a:	220c      	movs	r2, #12
 800843c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800843e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008442:	e009      	b.n	8008458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008444:	4b08      	ldr	r3, [pc, #32]	; (8008468 <_sbrk+0x64>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800844a:	4b07      	ldr	r3, [pc, #28]	; (8008468 <_sbrk+0x64>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4413      	add	r3, r2
 8008452:	4a05      	ldr	r2, [pc, #20]	; (8008468 <_sbrk+0x64>)
 8008454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008456:	68fb      	ldr	r3, [r7, #12]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	200a0000 	.word	0x200a0000
 8008464:	00000400 	.word	0x00000400
 8008468:	200013b0 	.word	0x200013b0
 800846c:	200013c8 	.word	0x200013c8

08008470 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008474:	4b06      	ldr	r3, [pc, #24]	; (8008490 <SystemInit+0x20>)
 8008476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847a:	4a05      	ldr	r2, [pc, #20]	; (8008490 <SystemInit+0x20>)
 800847c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008480:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008484:	bf00      	nop
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	e000ed00 	.word	0xe000ed00

08008494 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008498:	f7ff ffea 	bl	8008470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800849c:	480c      	ldr	r0, [pc, #48]	; (80084d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800849e:	490d      	ldr	r1, [pc, #52]	; (80084d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80084a0:	4a0d      	ldr	r2, [pc, #52]	; (80084d8 <LoopForever+0xe>)
  movs r3, #0
 80084a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084a4:	e002      	b.n	80084ac <LoopCopyDataInit>

080084a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084aa:	3304      	adds	r3, #4

080084ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084b0:	d3f9      	bcc.n	80084a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084b2:	4a0a      	ldr	r2, [pc, #40]	; (80084dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80084b4:	4c0a      	ldr	r4, [pc, #40]	; (80084e0 <LoopForever+0x16>)
  movs r3, #0
 80084b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80084b8:	e001      	b.n	80084be <LoopFillZerobss>

080084ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80084ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80084bc:	3204      	adds	r2, #4

080084be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80084be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80084c0:	d3fb      	bcc.n	80084ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80084c2:	f000 f817 	bl	80084f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80084c6:	f7ff fa9d 	bl	8007a04 <main>

080084ca <LoopForever>:

LoopForever:
    b LoopForever
 80084ca:	e7fe      	b.n	80084ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80084cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80084d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80084d4:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80084d8:	0800b5bc 	.word	0x0800b5bc
  ldr r2, =_sbss
 80084dc:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80084e0:	200013c4 	.word	0x200013c4

080084e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80084e4:	e7fe      	b.n	80084e4 <ADC1_IRQHandler>
	...

080084e8 <__errno>:
 80084e8:	4b01      	ldr	r3, [pc, #4]	; (80084f0 <__errno+0x8>)
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	20000094 	.word	0x20000094

080084f4 <__libc_init_array>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	4d0d      	ldr	r5, [pc, #52]	; (800852c <__libc_init_array+0x38>)
 80084f8:	4c0d      	ldr	r4, [pc, #52]	; (8008530 <__libc_init_array+0x3c>)
 80084fa:	1b64      	subs	r4, r4, r5
 80084fc:	10a4      	asrs	r4, r4, #2
 80084fe:	2600      	movs	r6, #0
 8008500:	42a6      	cmp	r6, r4
 8008502:	d109      	bne.n	8008518 <__libc_init_array+0x24>
 8008504:	4d0b      	ldr	r5, [pc, #44]	; (8008534 <__libc_init_array+0x40>)
 8008506:	4c0c      	ldr	r4, [pc, #48]	; (8008538 <__libc_init_array+0x44>)
 8008508:	f002 fd50 	bl	800afac <_init>
 800850c:	1b64      	subs	r4, r4, r5
 800850e:	10a4      	asrs	r4, r4, #2
 8008510:	2600      	movs	r6, #0
 8008512:	42a6      	cmp	r6, r4
 8008514:	d105      	bne.n	8008522 <__libc_init_array+0x2e>
 8008516:	bd70      	pop	{r4, r5, r6, pc}
 8008518:	f855 3b04 	ldr.w	r3, [r5], #4
 800851c:	4798      	blx	r3
 800851e:	3601      	adds	r6, #1
 8008520:	e7ee      	b.n	8008500 <__libc_init_array+0xc>
 8008522:	f855 3b04 	ldr.w	r3, [r5], #4
 8008526:	4798      	blx	r3
 8008528:	3601      	adds	r6, #1
 800852a:	e7f2      	b.n	8008512 <__libc_init_array+0x1e>
 800852c:	0800b5b4 	.word	0x0800b5b4
 8008530:	0800b5b4 	.word	0x0800b5b4
 8008534:	0800b5b4 	.word	0x0800b5b4
 8008538:	0800b5b8 	.word	0x0800b5b8

0800853c <memcpy>:
 800853c:	440a      	add	r2, r1
 800853e:	4291      	cmp	r1, r2
 8008540:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008544:	d100      	bne.n	8008548 <memcpy+0xc>
 8008546:	4770      	bx	lr
 8008548:	b510      	push	{r4, lr}
 800854a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008552:	4291      	cmp	r1, r2
 8008554:	d1f9      	bne.n	800854a <memcpy+0xe>
 8008556:	bd10      	pop	{r4, pc}

08008558 <memset>:
 8008558:	4402      	add	r2, r0
 800855a:	4603      	mov	r3, r0
 800855c:	4293      	cmp	r3, r2
 800855e:	d100      	bne.n	8008562 <memset+0xa>
 8008560:	4770      	bx	lr
 8008562:	f803 1b01 	strb.w	r1, [r3], #1
 8008566:	e7f9      	b.n	800855c <memset+0x4>

08008568 <__cvt>:
 8008568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800856c:	ec55 4b10 	vmov	r4, r5, d0
 8008570:	2d00      	cmp	r5, #0
 8008572:	460e      	mov	r6, r1
 8008574:	4619      	mov	r1, r3
 8008576:	462b      	mov	r3, r5
 8008578:	bfbb      	ittet	lt
 800857a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800857e:	461d      	movlt	r5, r3
 8008580:	2300      	movge	r3, #0
 8008582:	232d      	movlt	r3, #45	; 0x2d
 8008584:	700b      	strb	r3, [r1, #0]
 8008586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008588:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800858c:	4691      	mov	r9, r2
 800858e:	f023 0820 	bic.w	r8, r3, #32
 8008592:	bfbc      	itt	lt
 8008594:	4622      	movlt	r2, r4
 8008596:	4614      	movlt	r4, r2
 8008598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800859c:	d005      	beq.n	80085aa <__cvt+0x42>
 800859e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085a2:	d100      	bne.n	80085a6 <__cvt+0x3e>
 80085a4:	3601      	adds	r6, #1
 80085a6:	2102      	movs	r1, #2
 80085a8:	e000      	b.n	80085ac <__cvt+0x44>
 80085aa:	2103      	movs	r1, #3
 80085ac:	ab03      	add	r3, sp, #12
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	ab02      	add	r3, sp, #8
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	ec45 4b10 	vmov	d0, r4, r5
 80085b8:	4653      	mov	r3, sl
 80085ba:	4632      	mov	r2, r6
 80085bc:	f000 fce4 	bl	8008f88 <_dtoa_r>
 80085c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80085c4:	4607      	mov	r7, r0
 80085c6:	d102      	bne.n	80085ce <__cvt+0x66>
 80085c8:	f019 0f01 	tst.w	r9, #1
 80085cc:	d022      	beq.n	8008614 <__cvt+0xac>
 80085ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085d2:	eb07 0906 	add.w	r9, r7, r6
 80085d6:	d110      	bne.n	80085fa <__cvt+0x92>
 80085d8:	783b      	ldrb	r3, [r7, #0]
 80085da:	2b30      	cmp	r3, #48	; 0x30
 80085dc:	d10a      	bne.n	80085f4 <__cvt+0x8c>
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	4620      	mov	r0, r4
 80085e4:	4629      	mov	r1, r5
 80085e6:	f7f8 fa87 	bl	8000af8 <__aeabi_dcmpeq>
 80085ea:	b918      	cbnz	r0, 80085f4 <__cvt+0x8c>
 80085ec:	f1c6 0601 	rsb	r6, r6, #1
 80085f0:	f8ca 6000 	str.w	r6, [sl]
 80085f4:	f8da 3000 	ldr.w	r3, [sl]
 80085f8:	4499      	add	r9, r3
 80085fa:	2200      	movs	r2, #0
 80085fc:	2300      	movs	r3, #0
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	f7f8 fa79 	bl	8000af8 <__aeabi_dcmpeq>
 8008606:	b108      	cbz	r0, 800860c <__cvt+0xa4>
 8008608:	f8cd 900c 	str.w	r9, [sp, #12]
 800860c:	2230      	movs	r2, #48	; 0x30
 800860e:	9b03      	ldr	r3, [sp, #12]
 8008610:	454b      	cmp	r3, r9
 8008612:	d307      	bcc.n	8008624 <__cvt+0xbc>
 8008614:	9b03      	ldr	r3, [sp, #12]
 8008616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008618:	1bdb      	subs	r3, r3, r7
 800861a:	4638      	mov	r0, r7
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	b004      	add	sp, #16
 8008620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008624:	1c59      	adds	r1, r3, #1
 8008626:	9103      	str	r1, [sp, #12]
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e7f0      	b.n	800860e <__cvt+0xa6>

0800862c <__exponent>:
 800862c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862e:	4603      	mov	r3, r0
 8008630:	2900      	cmp	r1, #0
 8008632:	bfb8      	it	lt
 8008634:	4249      	neglt	r1, r1
 8008636:	f803 2b02 	strb.w	r2, [r3], #2
 800863a:	bfb4      	ite	lt
 800863c:	222d      	movlt	r2, #45	; 0x2d
 800863e:	222b      	movge	r2, #43	; 0x2b
 8008640:	2909      	cmp	r1, #9
 8008642:	7042      	strb	r2, [r0, #1]
 8008644:	dd2a      	ble.n	800869c <__exponent+0x70>
 8008646:	f10d 0407 	add.w	r4, sp, #7
 800864a:	46a4      	mov	ip, r4
 800864c:	270a      	movs	r7, #10
 800864e:	46a6      	mov	lr, r4
 8008650:	460a      	mov	r2, r1
 8008652:	fb91 f6f7 	sdiv	r6, r1, r7
 8008656:	fb07 1516 	mls	r5, r7, r6, r1
 800865a:	3530      	adds	r5, #48	; 0x30
 800865c:	2a63      	cmp	r2, #99	; 0x63
 800865e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008666:	4631      	mov	r1, r6
 8008668:	dcf1      	bgt.n	800864e <__exponent+0x22>
 800866a:	3130      	adds	r1, #48	; 0x30
 800866c:	f1ae 0502 	sub.w	r5, lr, #2
 8008670:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008674:	1c44      	adds	r4, r0, #1
 8008676:	4629      	mov	r1, r5
 8008678:	4561      	cmp	r1, ip
 800867a:	d30a      	bcc.n	8008692 <__exponent+0x66>
 800867c:	f10d 0209 	add.w	r2, sp, #9
 8008680:	eba2 020e 	sub.w	r2, r2, lr
 8008684:	4565      	cmp	r5, ip
 8008686:	bf88      	it	hi
 8008688:	2200      	movhi	r2, #0
 800868a:	4413      	add	r3, r2
 800868c:	1a18      	subs	r0, r3, r0
 800868e:	b003      	add	sp, #12
 8008690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008696:	f804 2f01 	strb.w	r2, [r4, #1]!
 800869a:	e7ed      	b.n	8008678 <__exponent+0x4c>
 800869c:	2330      	movs	r3, #48	; 0x30
 800869e:	3130      	adds	r1, #48	; 0x30
 80086a0:	7083      	strb	r3, [r0, #2]
 80086a2:	70c1      	strb	r1, [r0, #3]
 80086a4:	1d03      	adds	r3, r0, #4
 80086a6:	e7f1      	b.n	800868c <__exponent+0x60>

080086a8 <_printf_float>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	ed2d 8b02 	vpush	{d8}
 80086b0:	b08d      	sub	sp, #52	; 0x34
 80086b2:	460c      	mov	r4, r1
 80086b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80086b8:	4616      	mov	r6, r2
 80086ba:	461f      	mov	r7, r3
 80086bc:	4605      	mov	r5, r0
 80086be:	f001 fb47 	bl	8009d50 <_localeconv_r>
 80086c2:	f8d0 a000 	ldr.w	sl, [r0]
 80086c6:	4650      	mov	r0, sl
 80086c8:	f7f7 fd9a 	bl	8000200 <strlen>
 80086cc:	2300      	movs	r3, #0
 80086ce:	930a      	str	r3, [sp, #40]	; 0x28
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	9305      	str	r3, [sp, #20]
 80086d4:	f8d8 3000 	ldr.w	r3, [r8]
 80086d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80086dc:	3307      	adds	r3, #7
 80086de:	f023 0307 	bic.w	r3, r3, #7
 80086e2:	f103 0208 	add.w	r2, r3, #8
 80086e6:	f8c8 2000 	str.w	r2, [r8]
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80086f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80086f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086fa:	9307      	str	r3, [sp, #28]
 80086fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008700:	ee08 0a10 	vmov	s16, r0
 8008704:	4b9f      	ldr	r3, [pc, #636]	; (8008984 <_printf_float+0x2dc>)
 8008706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800870a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800870e:	f7f8 fa25 	bl	8000b5c <__aeabi_dcmpun>
 8008712:	bb88      	cbnz	r0, 8008778 <_printf_float+0xd0>
 8008714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008718:	4b9a      	ldr	r3, [pc, #616]	; (8008984 <_printf_float+0x2dc>)
 800871a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800871e:	f7f8 f9ff 	bl	8000b20 <__aeabi_dcmple>
 8008722:	bb48      	cbnz	r0, 8008778 <_printf_float+0xd0>
 8008724:	2200      	movs	r2, #0
 8008726:	2300      	movs	r3, #0
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f8 f9ee 	bl	8000b0c <__aeabi_dcmplt>
 8008730:	b110      	cbz	r0, 8008738 <_printf_float+0x90>
 8008732:	232d      	movs	r3, #45	; 0x2d
 8008734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008738:	4b93      	ldr	r3, [pc, #588]	; (8008988 <_printf_float+0x2e0>)
 800873a:	4894      	ldr	r0, [pc, #592]	; (800898c <_printf_float+0x2e4>)
 800873c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008740:	bf94      	ite	ls
 8008742:	4698      	movls	r8, r3
 8008744:	4680      	movhi	r8, r0
 8008746:	2303      	movs	r3, #3
 8008748:	6123      	str	r3, [r4, #16]
 800874a:	9b05      	ldr	r3, [sp, #20]
 800874c:	f023 0204 	bic.w	r2, r3, #4
 8008750:	6022      	str	r2, [r4, #0]
 8008752:	f04f 0900 	mov.w	r9, #0
 8008756:	9700      	str	r7, [sp, #0]
 8008758:	4633      	mov	r3, r6
 800875a:	aa0b      	add	r2, sp, #44	; 0x2c
 800875c:	4621      	mov	r1, r4
 800875e:	4628      	mov	r0, r5
 8008760:	f000 f9d8 	bl	8008b14 <_printf_common>
 8008764:	3001      	adds	r0, #1
 8008766:	f040 8090 	bne.w	800888a <_printf_float+0x1e2>
 800876a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800876e:	b00d      	add	sp, #52	; 0x34
 8008770:	ecbd 8b02 	vpop	{d8}
 8008774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008778:	4642      	mov	r2, r8
 800877a:	464b      	mov	r3, r9
 800877c:	4640      	mov	r0, r8
 800877e:	4649      	mov	r1, r9
 8008780:	f7f8 f9ec 	bl	8000b5c <__aeabi_dcmpun>
 8008784:	b140      	cbz	r0, 8008798 <_printf_float+0xf0>
 8008786:	464b      	mov	r3, r9
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfbc      	itt	lt
 800878c:	232d      	movlt	r3, #45	; 0x2d
 800878e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008792:	487f      	ldr	r0, [pc, #508]	; (8008990 <_printf_float+0x2e8>)
 8008794:	4b7f      	ldr	r3, [pc, #508]	; (8008994 <_printf_float+0x2ec>)
 8008796:	e7d1      	b.n	800873c <_printf_float+0x94>
 8008798:	6863      	ldr	r3, [r4, #4]
 800879a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800879e:	9206      	str	r2, [sp, #24]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	d13f      	bne.n	8008824 <_printf_float+0x17c>
 80087a4:	2306      	movs	r3, #6
 80087a6:	6063      	str	r3, [r4, #4]
 80087a8:	9b05      	ldr	r3, [sp, #20]
 80087aa:	6861      	ldr	r1, [r4, #4]
 80087ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087b0:	2300      	movs	r3, #0
 80087b2:	9303      	str	r3, [sp, #12]
 80087b4:	ab0a      	add	r3, sp, #40	; 0x28
 80087b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80087ba:	ab09      	add	r3, sp, #36	; 0x24
 80087bc:	ec49 8b10 	vmov	d0, r8, r9
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087c8:	4628      	mov	r0, r5
 80087ca:	f7ff fecd 	bl	8008568 <__cvt>
 80087ce:	9b06      	ldr	r3, [sp, #24]
 80087d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d2:	2b47      	cmp	r3, #71	; 0x47
 80087d4:	4680      	mov	r8, r0
 80087d6:	d108      	bne.n	80087ea <_printf_float+0x142>
 80087d8:	1cc8      	adds	r0, r1, #3
 80087da:	db02      	blt.n	80087e2 <_printf_float+0x13a>
 80087dc:	6863      	ldr	r3, [r4, #4]
 80087de:	4299      	cmp	r1, r3
 80087e0:	dd41      	ble.n	8008866 <_printf_float+0x1be>
 80087e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80087e6:	fa5f fb8b 	uxtb.w	fp, fp
 80087ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087ee:	d820      	bhi.n	8008832 <_printf_float+0x18a>
 80087f0:	3901      	subs	r1, #1
 80087f2:	465a      	mov	r2, fp
 80087f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087f8:	9109      	str	r1, [sp, #36]	; 0x24
 80087fa:	f7ff ff17 	bl	800862c <__exponent>
 80087fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008800:	1813      	adds	r3, r2, r0
 8008802:	2a01      	cmp	r2, #1
 8008804:	4681      	mov	r9, r0
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	dc02      	bgt.n	8008810 <_printf_float+0x168>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	07d2      	lsls	r2, r2, #31
 800880e:	d501      	bpl.n	8008814 <_printf_float+0x16c>
 8008810:	3301      	adds	r3, #1
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008818:	2b00      	cmp	r3, #0
 800881a:	d09c      	beq.n	8008756 <_printf_float+0xae>
 800881c:	232d      	movs	r3, #45	; 0x2d
 800881e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008822:	e798      	b.n	8008756 <_printf_float+0xae>
 8008824:	9a06      	ldr	r2, [sp, #24]
 8008826:	2a47      	cmp	r2, #71	; 0x47
 8008828:	d1be      	bne.n	80087a8 <_printf_float+0x100>
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1bc      	bne.n	80087a8 <_printf_float+0x100>
 800882e:	2301      	movs	r3, #1
 8008830:	e7b9      	b.n	80087a6 <_printf_float+0xfe>
 8008832:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008836:	d118      	bne.n	800886a <_printf_float+0x1c2>
 8008838:	2900      	cmp	r1, #0
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	dd0b      	ble.n	8008856 <_printf_float+0x1ae>
 800883e:	6121      	str	r1, [r4, #16]
 8008840:	b913      	cbnz	r3, 8008848 <_printf_float+0x1a0>
 8008842:	6822      	ldr	r2, [r4, #0]
 8008844:	07d0      	lsls	r0, r2, #31
 8008846:	d502      	bpl.n	800884e <_printf_float+0x1a6>
 8008848:	3301      	adds	r3, #1
 800884a:	440b      	add	r3, r1
 800884c:	6123      	str	r3, [r4, #16]
 800884e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008850:	f04f 0900 	mov.w	r9, #0
 8008854:	e7de      	b.n	8008814 <_printf_float+0x16c>
 8008856:	b913      	cbnz	r3, 800885e <_printf_float+0x1b6>
 8008858:	6822      	ldr	r2, [r4, #0]
 800885a:	07d2      	lsls	r2, r2, #31
 800885c:	d501      	bpl.n	8008862 <_printf_float+0x1ba>
 800885e:	3302      	adds	r3, #2
 8008860:	e7f4      	b.n	800884c <_printf_float+0x1a4>
 8008862:	2301      	movs	r3, #1
 8008864:	e7f2      	b.n	800884c <_printf_float+0x1a4>
 8008866:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800886a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800886c:	4299      	cmp	r1, r3
 800886e:	db05      	blt.n	800887c <_printf_float+0x1d4>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	6121      	str	r1, [r4, #16]
 8008874:	07d8      	lsls	r0, r3, #31
 8008876:	d5ea      	bpl.n	800884e <_printf_float+0x1a6>
 8008878:	1c4b      	adds	r3, r1, #1
 800887a:	e7e7      	b.n	800884c <_printf_float+0x1a4>
 800887c:	2900      	cmp	r1, #0
 800887e:	bfd4      	ite	le
 8008880:	f1c1 0202 	rsble	r2, r1, #2
 8008884:	2201      	movgt	r2, #1
 8008886:	4413      	add	r3, r2
 8008888:	e7e0      	b.n	800884c <_printf_float+0x1a4>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	055a      	lsls	r2, r3, #21
 800888e:	d407      	bmi.n	80088a0 <_printf_float+0x1f8>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	4642      	mov	r2, r8
 8008894:	4631      	mov	r1, r6
 8008896:	4628      	mov	r0, r5
 8008898:	47b8      	blx	r7
 800889a:	3001      	adds	r0, #1
 800889c:	d12c      	bne.n	80088f8 <_printf_float+0x250>
 800889e:	e764      	b.n	800876a <_printf_float+0xc2>
 80088a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088a4:	f240 80e0 	bls.w	8008a68 <_printf_float+0x3c0>
 80088a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ac:	2200      	movs	r2, #0
 80088ae:	2300      	movs	r3, #0
 80088b0:	f7f8 f922 	bl	8000af8 <__aeabi_dcmpeq>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d034      	beq.n	8008922 <_printf_float+0x27a>
 80088b8:	4a37      	ldr	r2, [pc, #220]	; (8008998 <_printf_float+0x2f0>)
 80088ba:	2301      	movs	r3, #1
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	47b8      	blx	r7
 80088c2:	3001      	adds	r0, #1
 80088c4:	f43f af51 	beq.w	800876a <_printf_float+0xc2>
 80088c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088cc:	429a      	cmp	r2, r3
 80088ce:	db02      	blt.n	80088d6 <_printf_float+0x22e>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	07d8      	lsls	r0, r3, #31
 80088d4:	d510      	bpl.n	80088f8 <_printf_float+0x250>
 80088d6:	ee18 3a10 	vmov	r3, s16
 80088da:	4652      	mov	r2, sl
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af41 	beq.w	800876a <_printf_float+0xc2>
 80088e8:	f04f 0800 	mov.w	r8, #0
 80088ec:	f104 091a 	add.w	r9, r4, #26
 80088f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f2:	3b01      	subs	r3, #1
 80088f4:	4543      	cmp	r3, r8
 80088f6:	dc09      	bgt.n	800890c <_printf_float+0x264>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	079b      	lsls	r3, r3, #30
 80088fc:	f100 8105 	bmi.w	8008b0a <_printf_float+0x462>
 8008900:	68e0      	ldr	r0, [r4, #12]
 8008902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008904:	4298      	cmp	r0, r3
 8008906:	bfb8      	it	lt
 8008908:	4618      	movlt	r0, r3
 800890a:	e730      	b.n	800876e <_printf_float+0xc6>
 800890c:	2301      	movs	r3, #1
 800890e:	464a      	mov	r2, r9
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f af27 	beq.w	800876a <_printf_float+0xc2>
 800891c:	f108 0801 	add.w	r8, r8, #1
 8008920:	e7e6      	b.n	80088f0 <_printf_float+0x248>
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	dc39      	bgt.n	800899c <_printf_float+0x2f4>
 8008928:	4a1b      	ldr	r2, [pc, #108]	; (8008998 <_printf_float+0x2f0>)
 800892a:	2301      	movs	r3, #1
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f43f af19 	beq.w	800876a <_printf_float+0xc2>
 8008938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800893c:	4313      	orrs	r3, r2
 800893e:	d102      	bne.n	8008946 <_printf_float+0x29e>
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	07d9      	lsls	r1, r3, #31
 8008944:	d5d8      	bpl.n	80088f8 <_printf_float+0x250>
 8008946:	ee18 3a10 	vmov	r3, s16
 800894a:	4652      	mov	r2, sl
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	f43f af09 	beq.w	800876a <_printf_float+0xc2>
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	f104 0a1a 	add.w	sl, r4, #26
 8008960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008962:	425b      	negs	r3, r3
 8008964:	454b      	cmp	r3, r9
 8008966:	dc01      	bgt.n	800896c <_printf_float+0x2c4>
 8008968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800896a:	e792      	b.n	8008892 <_printf_float+0x1ea>
 800896c:	2301      	movs	r3, #1
 800896e:	4652      	mov	r2, sl
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	f43f aef7 	beq.w	800876a <_printf_float+0xc2>
 800897c:	f109 0901 	add.w	r9, r9, #1
 8008980:	e7ee      	b.n	8008960 <_printf_float+0x2b8>
 8008982:	bf00      	nop
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	0800b1d4 	.word	0x0800b1d4
 800898c:	0800b1d8 	.word	0x0800b1d8
 8008990:	0800b1e0 	.word	0x0800b1e0
 8008994:	0800b1dc 	.word	0x0800b1dc
 8008998:	0800b1e4 	.word	0x0800b1e4
 800899c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800899e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089a0:	429a      	cmp	r2, r3
 80089a2:	bfa8      	it	ge
 80089a4:	461a      	movge	r2, r3
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	4691      	mov	r9, r2
 80089aa:	dc37      	bgt.n	8008a1c <_printf_float+0x374>
 80089ac:	f04f 0b00 	mov.w	fp, #0
 80089b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b4:	f104 021a 	add.w	r2, r4, #26
 80089b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ba:	9305      	str	r3, [sp, #20]
 80089bc:	eba3 0309 	sub.w	r3, r3, r9
 80089c0:	455b      	cmp	r3, fp
 80089c2:	dc33      	bgt.n	8008a2c <_printf_float+0x384>
 80089c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089c8:	429a      	cmp	r2, r3
 80089ca:	db3b      	blt.n	8008a44 <_printf_float+0x39c>
 80089cc:	6823      	ldr	r3, [r4, #0]
 80089ce:	07da      	lsls	r2, r3, #31
 80089d0:	d438      	bmi.n	8008a44 <_printf_float+0x39c>
 80089d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d4:	9a05      	ldr	r2, [sp, #20]
 80089d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d8:	1a9a      	subs	r2, r3, r2
 80089da:	eba3 0901 	sub.w	r9, r3, r1
 80089de:	4591      	cmp	r9, r2
 80089e0:	bfa8      	it	ge
 80089e2:	4691      	movge	r9, r2
 80089e4:	f1b9 0f00 	cmp.w	r9, #0
 80089e8:	dc35      	bgt.n	8008a56 <_printf_float+0x3ae>
 80089ea:	f04f 0800 	mov.w	r8, #0
 80089ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089f2:	f104 0a1a 	add.w	sl, r4, #26
 80089f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089fa:	1a9b      	subs	r3, r3, r2
 80089fc:	eba3 0309 	sub.w	r3, r3, r9
 8008a00:	4543      	cmp	r3, r8
 8008a02:	f77f af79 	ble.w	80088f8 <_printf_float+0x250>
 8008a06:	2301      	movs	r3, #1
 8008a08:	4652      	mov	r2, sl
 8008a0a:	4631      	mov	r1, r6
 8008a0c:	4628      	mov	r0, r5
 8008a0e:	47b8      	blx	r7
 8008a10:	3001      	adds	r0, #1
 8008a12:	f43f aeaa 	beq.w	800876a <_printf_float+0xc2>
 8008a16:	f108 0801 	add.w	r8, r8, #1
 8008a1a:	e7ec      	b.n	80089f6 <_printf_float+0x34e>
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4642      	mov	r2, r8
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	d1c0      	bne.n	80089ac <_printf_float+0x304>
 8008a2a:	e69e      	b.n	800876a <_printf_float+0xc2>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4631      	mov	r1, r6
 8008a30:	4628      	mov	r0, r5
 8008a32:	9205      	str	r2, [sp, #20]
 8008a34:	47b8      	blx	r7
 8008a36:	3001      	adds	r0, #1
 8008a38:	f43f ae97 	beq.w	800876a <_printf_float+0xc2>
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	f10b 0b01 	add.w	fp, fp, #1
 8008a42:	e7b9      	b.n	80089b8 <_printf_float+0x310>
 8008a44:	ee18 3a10 	vmov	r3, s16
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	47b8      	blx	r7
 8008a50:	3001      	adds	r0, #1
 8008a52:	d1be      	bne.n	80089d2 <_printf_float+0x32a>
 8008a54:	e689      	b.n	800876a <_printf_float+0xc2>
 8008a56:	9a05      	ldr	r2, [sp, #20]
 8008a58:	464b      	mov	r3, r9
 8008a5a:	4442      	add	r2, r8
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4628      	mov	r0, r5
 8008a60:	47b8      	blx	r7
 8008a62:	3001      	adds	r0, #1
 8008a64:	d1c1      	bne.n	80089ea <_printf_float+0x342>
 8008a66:	e680      	b.n	800876a <_printf_float+0xc2>
 8008a68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a6a:	2a01      	cmp	r2, #1
 8008a6c:	dc01      	bgt.n	8008a72 <_printf_float+0x3ca>
 8008a6e:	07db      	lsls	r3, r3, #31
 8008a70:	d538      	bpl.n	8008ae4 <_printf_float+0x43c>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4642      	mov	r2, r8
 8008a76:	4631      	mov	r1, r6
 8008a78:	4628      	mov	r0, r5
 8008a7a:	47b8      	blx	r7
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	f43f ae74 	beq.w	800876a <_printf_float+0xc2>
 8008a82:	ee18 3a10 	vmov	r3, s16
 8008a86:	4652      	mov	r2, sl
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f43f ae6b 	beq.w	800876a <_printf_float+0xc2>
 8008a94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f7f8 f82c 	bl	8000af8 <__aeabi_dcmpeq>
 8008aa0:	b9d8      	cbnz	r0, 8008ada <_printf_float+0x432>
 8008aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008aa4:	f108 0201 	add.w	r2, r8, #1
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d10e      	bne.n	8008ad2 <_printf_float+0x42a>
 8008ab4:	e659      	b.n	800876a <_printf_float+0xc2>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4631      	mov	r1, r6
 8008abc:	4628      	mov	r0, r5
 8008abe:	47b8      	blx	r7
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	f43f ae52 	beq.w	800876a <_printf_float+0xc2>
 8008ac6:	f108 0801 	add.w	r8, r8, #1
 8008aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008acc:	3b01      	subs	r3, #1
 8008ace:	4543      	cmp	r3, r8
 8008ad0:	dcf1      	bgt.n	8008ab6 <_printf_float+0x40e>
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ad8:	e6dc      	b.n	8008894 <_printf_float+0x1ec>
 8008ada:	f04f 0800 	mov.w	r8, #0
 8008ade:	f104 0a1a 	add.w	sl, r4, #26
 8008ae2:	e7f2      	b.n	8008aca <_printf_float+0x422>
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	4642      	mov	r2, r8
 8008ae8:	e7df      	b.n	8008aaa <_printf_float+0x402>
 8008aea:	2301      	movs	r3, #1
 8008aec:	464a      	mov	r2, r9
 8008aee:	4631      	mov	r1, r6
 8008af0:	4628      	mov	r0, r5
 8008af2:	47b8      	blx	r7
 8008af4:	3001      	adds	r0, #1
 8008af6:	f43f ae38 	beq.w	800876a <_printf_float+0xc2>
 8008afa:	f108 0801 	add.w	r8, r8, #1
 8008afe:	68e3      	ldr	r3, [r4, #12]
 8008b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b02:	1a5b      	subs	r3, r3, r1
 8008b04:	4543      	cmp	r3, r8
 8008b06:	dcf0      	bgt.n	8008aea <_printf_float+0x442>
 8008b08:	e6fa      	b.n	8008900 <_printf_float+0x258>
 8008b0a:	f04f 0800 	mov.w	r8, #0
 8008b0e:	f104 0919 	add.w	r9, r4, #25
 8008b12:	e7f4      	b.n	8008afe <_printf_float+0x456>

08008b14 <_printf_common>:
 8008b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b18:	4616      	mov	r6, r2
 8008b1a:	4699      	mov	r9, r3
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	690b      	ldr	r3, [r1, #16]
 8008b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b24:	4293      	cmp	r3, r2
 8008b26:	bfb8      	it	lt
 8008b28:	4613      	movlt	r3, r2
 8008b2a:	6033      	str	r3, [r6, #0]
 8008b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b30:	4607      	mov	r7, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b10a      	cbz	r2, 8008b3a <_printf_common+0x26>
 8008b36:	3301      	adds	r3, #1
 8008b38:	6033      	str	r3, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	0699      	lsls	r1, r3, #26
 8008b3e:	bf42      	ittt	mi
 8008b40:	6833      	ldrmi	r3, [r6, #0]
 8008b42:	3302      	addmi	r3, #2
 8008b44:	6033      	strmi	r3, [r6, #0]
 8008b46:	6825      	ldr	r5, [r4, #0]
 8008b48:	f015 0506 	ands.w	r5, r5, #6
 8008b4c:	d106      	bne.n	8008b5c <_printf_common+0x48>
 8008b4e:	f104 0a19 	add.w	sl, r4, #25
 8008b52:	68e3      	ldr	r3, [r4, #12]
 8008b54:	6832      	ldr	r2, [r6, #0]
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	42ab      	cmp	r3, r5
 8008b5a:	dc26      	bgt.n	8008baa <_printf_common+0x96>
 8008b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b60:	1e13      	subs	r3, r2, #0
 8008b62:	6822      	ldr	r2, [r4, #0]
 8008b64:	bf18      	it	ne
 8008b66:	2301      	movne	r3, #1
 8008b68:	0692      	lsls	r2, r2, #26
 8008b6a:	d42b      	bmi.n	8008bc4 <_printf_common+0xb0>
 8008b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b70:	4649      	mov	r1, r9
 8008b72:	4638      	mov	r0, r7
 8008b74:	47c0      	blx	r8
 8008b76:	3001      	adds	r0, #1
 8008b78:	d01e      	beq.n	8008bb8 <_printf_common+0xa4>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68e5      	ldr	r5, [r4, #12]
 8008b7e:	6832      	ldr	r2, [r6, #0]
 8008b80:	f003 0306 	and.w	r3, r3, #6
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	bf08      	it	eq
 8008b88:	1aad      	subeq	r5, r5, r2
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	6922      	ldr	r2, [r4, #16]
 8008b8e:	bf0c      	ite	eq
 8008b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b94:	2500      	movne	r5, #0
 8008b96:	4293      	cmp	r3, r2
 8008b98:	bfc4      	itt	gt
 8008b9a:	1a9b      	subgt	r3, r3, r2
 8008b9c:	18ed      	addgt	r5, r5, r3
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	341a      	adds	r4, #26
 8008ba2:	42b5      	cmp	r5, r6
 8008ba4:	d11a      	bne.n	8008bdc <_printf_common+0xc8>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e008      	b.n	8008bbc <_printf_common+0xa8>
 8008baa:	2301      	movs	r3, #1
 8008bac:	4652      	mov	r2, sl
 8008bae:	4649      	mov	r1, r9
 8008bb0:	4638      	mov	r0, r7
 8008bb2:	47c0      	blx	r8
 8008bb4:	3001      	adds	r0, #1
 8008bb6:	d103      	bne.n	8008bc0 <_printf_common+0xac>
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc0:	3501      	adds	r5, #1
 8008bc2:	e7c6      	b.n	8008b52 <_printf_common+0x3e>
 8008bc4:	18e1      	adds	r1, r4, r3
 8008bc6:	1c5a      	adds	r2, r3, #1
 8008bc8:	2030      	movs	r0, #48	; 0x30
 8008bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bce:	4422      	add	r2, r4
 8008bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bd8:	3302      	adds	r3, #2
 8008bda:	e7c7      	b.n	8008b6c <_printf_common+0x58>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	4622      	mov	r2, r4
 8008be0:	4649      	mov	r1, r9
 8008be2:	4638      	mov	r0, r7
 8008be4:	47c0      	blx	r8
 8008be6:	3001      	adds	r0, #1
 8008be8:	d0e6      	beq.n	8008bb8 <_printf_common+0xa4>
 8008bea:	3601      	adds	r6, #1
 8008bec:	e7d9      	b.n	8008ba2 <_printf_common+0x8e>
	...

08008bf0 <_printf_i>:
 8008bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	7e0f      	ldrb	r7, [r1, #24]
 8008bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bf8:	2f78      	cmp	r7, #120	; 0x78
 8008bfa:	4691      	mov	r9, r2
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	469a      	mov	sl, r3
 8008c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c06:	d807      	bhi.n	8008c18 <_printf_i+0x28>
 8008c08:	2f62      	cmp	r7, #98	; 0x62
 8008c0a:	d80a      	bhi.n	8008c22 <_printf_i+0x32>
 8008c0c:	2f00      	cmp	r7, #0
 8008c0e:	f000 80d8 	beq.w	8008dc2 <_printf_i+0x1d2>
 8008c12:	2f58      	cmp	r7, #88	; 0x58
 8008c14:	f000 80a3 	beq.w	8008d5e <_printf_i+0x16e>
 8008c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c20:	e03a      	b.n	8008c98 <_printf_i+0xa8>
 8008c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c26:	2b15      	cmp	r3, #21
 8008c28:	d8f6      	bhi.n	8008c18 <_printf_i+0x28>
 8008c2a:	a101      	add	r1, pc, #4	; (adr r1, 8008c30 <_printf_i+0x40>)
 8008c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c9d 	.word	0x08008c9d
 8008c38:	08008c19 	.word	0x08008c19
 8008c3c:	08008c19 	.word	0x08008c19
 8008c40:	08008c19 	.word	0x08008c19
 8008c44:	08008c19 	.word	0x08008c19
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008c19 	.word	0x08008c19
 8008c50:	08008c19 	.word	0x08008c19
 8008c54:	08008c19 	.word	0x08008c19
 8008c58:	08008c19 	.word	0x08008c19
 8008c5c:	08008da9 	.word	0x08008da9
 8008c60:	08008ccd 	.word	0x08008ccd
 8008c64:	08008d8b 	.word	0x08008d8b
 8008c68:	08008c19 	.word	0x08008c19
 8008c6c:	08008c19 	.word	0x08008c19
 8008c70:	08008dcb 	.word	0x08008dcb
 8008c74:	08008c19 	.word	0x08008c19
 8008c78:	08008ccd 	.word	0x08008ccd
 8008c7c:	08008c19 	.word	0x08008c19
 8008c80:	08008c19 	.word	0x08008c19
 8008c84:	08008d93 	.word	0x08008d93
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	602a      	str	r2, [r5, #0]
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c98:	2301      	movs	r3, #1
 8008c9a:	e0a3      	b.n	8008de4 <_printf_i+0x1f4>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	6829      	ldr	r1, [r5, #0]
 8008ca0:	0606      	lsls	r6, r0, #24
 8008ca2:	f101 0304 	add.w	r3, r1, #4
 8008ca6:	d50a      	bpl.n	8008cbe <_printf_i+0xce>
 8008ca8:	680e      	ldr	r6, [r1, #0]
 8008caa:	602b      	str	r3, [r5, #0]
 8008cac:	2e00      	cmp	r6, #0
 8008cae:	da03      	bge.n	8008cb8 <_printf_i+0xc8>
 8008cb0:	232d      	movs	r3, #45	; 0x2d
 8008cb2:	4276      	negs	r6, r6
 8008cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cb8:	485e      	ldr	r0, [pc, #376]	; (8008e34 <_printf_i+0x244>)
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e019      	b.n	8008cf2 <_printf_i+0x102>
 8008cbe:	680e      	ldr	r6, [r1, #0]
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008cc6:	bf18      	it	ne
 8008cc8:	b236      	sxthne	r6, r6
 8008cca:	e7ef      	b.n	8008cac <_printf_i+0xbc>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	6820      	ldr	r0, [r4, #0]
 8008cd0:	1d19      	adds	r1, r3, #4
 8008cd2:	6029      	str	r1, [r5, #0]
 8008cd4:	0601      	lsls	r1, r0, #24
 8008cd6:	d501      	bpl.n	8008cdc <_printf_i+0xec>
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	e002      	b.n	8008ce2 <_printf_i+0xf2>
 8008cdc:	0646      	lsls	r6, r0, #25
 8008cde:	d5fb      	bpl.n	8008cd8 <_printf_i+0xe8>
 8008ce0:	881e      	ldrh	r6, [r3, #0]
 8008ce2:	4854      	ldr	r0, [pc, #336]	; (8008e34 <_printf_i+0x244>)
 8008ce4:	2f6f      	cmp	r7, #111	; 0x6f
 8008ce6:	bf0c      	ite	eq
 8008ce8:	2308      	moveq	r3, #8
 8008cea:	230a      	movne	r3, #10
 8008cec:	2100      	movs	r1, #0
 8008cee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf2:	6865      	ldr	r5, [r4, #4]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	2d00      	cmp	r5, #0
 8008cf8:	bfa2      	ittt	ge
 8008cfa:	6821      	ldrge	r1, [r4, #0]
 8008cfc:	f021 0104 	bicge.w	r1, r1, #4
 8008d00:	6021      	strge	r1, [r4, #0]
 8008d02:	b90e      	cbnz	r6, 8008d08 <_printf_i+0x118>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d04d      	beq.n	8008da4 <_printf_i+0x1b4>
 8008d08:	4615      	mov	r5, r2
 8008d0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d0e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d12:	5dc7      	ldrb	r7, [r0, r7]
 8008d14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d18:	4637      	mov	r7, r6
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	d9f4      	bls.n	8008d0a <_printf_i+0x11a>
 8008d20:	2b08      	cmp	r3, #8
 8008d22:	d10b      	bne.n	8008d3c <_printf_i+0x14c>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	07de      	lsls	r6, r3, #31
 8008d28:	d508      	bpl.n	8008d3c <_printf_i+0x14c>
 8008d2a:	6923      	ldr	r3, [r4, #16]
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	4299      	cmp	r1, r3
 8008d30:	bfde      	ittt	le
 8008d32:	2330      	movle	r3, #48	; 0x30
 8008d34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d3c:	1b52      	subs	r2, r2, r5
 8008d3e:	6122      	str	r2, [r4, #16]
 8008d40:	f8cd a000 	str.w	sl, [sp]
 8008d44:	464b      	mov	r3, r9
 8008d46:	aa03      	add	r2, sp, #12
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4640      	mov	r0, r8
 8008d4c:	f7ff fee2 	bl	8008b14 <_printf_common>
 8008d50:	3001      	adds	r0, #1
 8008d52:	d14c      	bne.n	8008dee <_printf_i+0x1fe>
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d58:	b004      	add	sp, #16
 8008d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5e:	4835      	ldr	r0, [pc, #212]	; (8008e34 <_printf_i+0x244>)
 8008d60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	6823      	ldr	r3, [r4, #0]
 8008d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d6c:	6029      	str	r1, [r5, #0]
 8008d6e:	061d      	lsls	r5, r3, #24
 8008d70:	d514      	bpl.n	8008d9c <_printf_i+0x1ac>
 8008d72:	07df      	lsls	r7, r3, #31
 8008d74:	bf44      	itt	mi
 8008d76:	f043 0320 	orrmi.w	r3, r3, #32
 8008d7a:	6023      	strmi	r3, [r4, #0]
 8008d7c:	b91e      	cbnz	r6, 8008d86 <_printf_i+0x196>
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	f023 0320 	bic.w	r3, r3, #32
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	2310      	movs	r3, #16
 8008d88:	e7b0      	b.n	8008cec <_printf_i+0xfc>
 8008d8a:	6823      	ldr	r3, [r4, #0]
 8008d8c:	f043 0320 	orr.w	r3, r3, #32
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	2378      	movs	r3, #120	; 0x78
 8008d94:	4828      	ldr	r0, [pc, #160]	; (8008e38 <_printf_i+0x248>)
 8008d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d9a:	e7e3      	b.n	8008d64 <_printf_i+0x174>
 8008d9c:	0659      	lsls	r1, r3, #25
 8008d9e:	bf48      	it	mi
 8008da0:	b2b6      	uxthmi	r6, r6
 8008da2:	e7e6      	b.n	8008d72 <_printf_i+0x182>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bb      	b.n	8008d20 <_printf_i+0x130>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1cc>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1d2>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c8>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7ba      	b.n	8008d40 <_printf_i+0x150>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 fa1a 	bl	8000210 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1f2>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7a8      	b.n	8008d40 <_printf_i+0x150>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ab      	beq.n	8008d54 <_printf_i+0x164>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x23a>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a4      	b.n	8008d58 <_printf_i+0x168>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09b      	beq.n	8008d54 <_printf_i+0x164>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x21e>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x212>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x22e>
 8008e32:	bf00      	nop
 8008e34:	0800b1e6 	.word	0x0800b1e6
 8008e38:	0800b1f7 	.word	0x0800b1f7

08008e3c <iprintf>:
 8008e3c:	b40f      	push	{r0, r1, r2, r3}
 8008e3e:	4b0a      	ldr	r3, [pc, #40]	; (8008e68 <iprintf+0x2c>)
 8008e40:	b513      	push	{r0, r1, r4, lr}
 8008e42:	681c      	ldr	r4, [r3, #0]
 8008e44:	b124      	cbz	r4, 8008e50 <iprintf+0x14>
 8008e46:	69a3      	ldr	r3, [r4, #24]
 8008e48:	b913      	cbnz	r3, 8008e50 <iprintf+0x14>
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 fee2 	bl	8009c14 <__sinit>
 8008e50:	ab05      	add	r3, sp, #20
 8008e52:	9a04      	ldr	r2, [sp, #16]
 8008e54:	68a1      	ldr	r1, [r4, #8]
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	4620      	mov	r0, r4
 8008e5a:	f001 fc2d 	bl	800a6b8 <_vfiprintf_r>
 8008e5e:	b002      	add	sp, #8
 8008e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e64:	b004      	add	sp, #16
 8008e66:	4770      	bx	lr
 8008e68:	20000094 	.word	0x20000094

08008e6c <quorem>:
 8008e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	6903      	ldr	r3, [r0, #16]
 8008e72:	690c      	ldr	r4, [r1, #16]
 8008e74:	42a3      	cmp	r3, r4
 8008e76:	4607      	mov	r7, r0
 8008e78:	f2c0 8081 	blt.w	8008f7e <quorem+0x112>
 8008e7c:	3c01      	subs	r4, #1
 8008e7e:	f101 0814 	add.w	r8, r1, #20
 8008e82:	f100 0514 	add.w	r5, r0, #20
 8008e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e8a:	9301      	str	r3, [sp, #4]
 8008e8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e94:	3301      	adds	r3, #1
 8008e96:	429a      	cmp	r2, r3
 8008e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ea4:	d331      	bcc.n	8008f0a <quorem+0x9e>
 8008ea6:	f04f 0e00 	mov.w	lr, #0
 8008eaa:	4640      	mov	r0, r8
 8008eac:	46ac      	mov	ip, r5
 8008eae:	46f2      	mov	sl, lr
 8008eb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008eb4:	b293      	uxth	r3, r2
 8008eb6:	fb06 e303 	mla	r3, r6, r3, lr
 8008eba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	ebaa 0303 	sub.w	r3, sl, r3
 8008ec4:	f8dc a000 	ldr.w	sl, [ip]
 8008ec8:	0c12      	lsrs	r2, r2, #16
 8008eca:	fa13 f38a 	uxtah	r3, r3, sl
 8008ece:	fb06 e202 	mla	r2, r6, r2, lr
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008eda:	b292      	uxth	r2, r2
 8008edc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ee4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ee8:	4581      	cmp	r9, r0
 8008eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eee:	f84c 3b04 	str.w	r3, [ip], #4
 8008ef2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ef6:	d2db      	bcs.n	8008eb0 <quorem+0x44>
 8008ef8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008efc:	b92b      	cbnz	r3, 8008f0a <quorem+0x9e>
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	3b04      	subs	r3, #4
 8008f02:	429d      	cmp	r5, r3
 8008f04:	461a      	mov	r2, r3
 8008f06:	d32e      	bcc.n	8008f66 <quorem+0xfa>
 8008f08:	613c      	str	r4, [r7, #16]
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	f001 f9b2 	bl	800a274 <__mcmp>
 8008f10:	2800      	cmp	r0, #0
 8008f12:	db24      	blt.n	8008f5e <quorem+0xf2>
 8008f14:	3601      	adds	r6, #1
 8008f16:	4628      	mov	r0, r5
 8008f18:	f04f 0c00 	mov.w	ip, #0
 8008f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f20:	f8d0 e000 	ldr.w	lr, [r0]
 8008f24:	b293      	uxth	r3, r2
 8008f26:	ebac 0303 	sub.w	r3, ip, r3
 8008f2a:	0c12      	lsrs	r2, r2, #16
 8008f2c:	fa13 f38e 	uxtah	r3, r3, lr
 8008f30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f3e:	45c1      	cmp	r9, r8
 8008f40:	f840 3b04 	str.w	r3, [r0], #4
 8008f44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f48:	d2e8      	bcs.n	8008f1c <quorem+0xb0>
 8008f4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f52:	b922      	cbnz	r2, 8008f5e <quorem+0xf2>
 8008f54:	3b04      	subs	r3, #4
 8008f56:	429d      	cmp	r5, r3
 8008f58:	461a      	mov	r2, r3
 8008f5a:	d30a      	bcc.n	8008f72 <quorem+0x106>
 8008f5c:	613c      	str	r4, [r7, #16]
 8008f5e:	4630      	mov	r0, r6
 8008f60:	b003      	add	sp, #12
 8008f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f66:	6812      	ldr	r2, [r2, #0]
 8008f68:	3b04      	subs	r3, #4
 8008f6a:	2a00      	cmp	r2, #0
 8008f6c:	d1cc      	bne.n	8008f08 <quorem+0x9c>
 8008f6e:	3c01      	subs	r4, #1
 8008f70:	e7c7      	b.n	8008f02 <quorem+0x96>
 8008f72:	6812      	ldr	r2, [r2, #0]
 8008f74:	3b04      	subs	r3, #4
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	d1f0      	bne.n	8008f5c <quorem+0xf0>
 8008f7a:	3c01      	subs	r4, #1
 8008f7c:	e7eb      	b.n	8008f56 <quorem+0xea>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e7ee      	b.n	8008f60 <quorem+0xf4>
 8008f82:	0000      	movs	r0, r0
 8008f84:	0000      	movs	r0, r0
	...

08008f88 <_dtoa_r>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	ed2d 8b04 	vpush	{d8-d9}
 8008f90:	ec57 6b10 	vmov	r6, r7, d0
 8008f94:	b093      	sub	sp, #76	; 0x4c
 8008f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f9c:	9106      	str	r1, [sp, #24]
 8008f9e:	ee10 aa10 	vmov	sl, s0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa8:	46bb      	mov	fp, r7
 8008faa:	b975      	cbnz	r5, 8008fca <_dtoa_r+0x42>
 8008fac:	2010      	movs	r0, #16
 8008fae:	f000 fed7 	bl	8009d60 <malloc>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb6:	b920      	cbnz	r0, 8008fc2 <_dtoa_r+0x3a>
 8008fb8:	4ba7      	ldr	r3, [pc, #668]	; (8009258 <_dtoa_r+0x2d0>)
 8008fba:	21ea      	movs	r1, #234	; 0xea
 8008fbc:	48a7      	ldr	r0, [pc, #668]	; (800925c <_dtoa_r+0x2d4>)
 8008fbe:	f001 fdd1 	bl	800ab64 <__assert_func>
 8008fc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fc6:	6005      	str	r5, [r0, #0]
 8008fc8:	60c5      	str	r5, [r0, #12]
 8008fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fcc:	6819      	ldr	r1, [r3, #0]
 8008fce:	b151      	cbz	r1, 8008fe6 <_dtoa_r+0x5e>
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	604a      	str	r2, [r1, #4]
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4093      	lsls	r3, r2
 8008fd8:	608b      	str	r3, [r1, #8]
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 ff08 	bl	8009df0 <_Bfree>
 8008fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	1e3b      	subs	r3, r7, #0
 8008fe8:	bfaa      	itet	ge
 8008fea:	2300      	movge	r3, #0
 8008fec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008ff0:	f8c8 3000 	strge.w	r3, [r8]
 8008ff4:	4b9a      	ldr	r3, [pc, #616]	; (8009260 <_dtoa_r+0x2d8>)
 8008ff6:	bfbc      	itt	lt
 8008ff8:	2201      	movlt	r2, #1
 8008ffa:	f8c8 2000 	strlt.w	r2, [r8]
 8008ffe:	ea33 030b 	bics.w	r3, r3, fp
 8009002:	d11b      	bne.n	800903c <_dtoa_r+0xb4>
 8009004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009006:	f242 730f 	movw	r3, #9999	; 0x270f
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009010:	4333      	orrs	r3, r6
 8009012:	f000 8592 	beq.w	8009b3a <_dtoa_r+0xbb2>
 8009016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009018:	b963      	cbnz	r3, 8009034 <_dtoa_r+0xac>
 800901a:	4b92      	ldr	r3, [pc, #584]	; (8009264 <_dtoa_r+0x2dc>)
 800901c:	e022      	b.n	8009064 <_dtoa_r+0xdc>
 800901e:	4b92      	ldr	r3, [pc, #584]	; (8009268 <_dtoa_r+0x2e0>)
 8009020:	9301      	str	r3, [sp, #4]
 8009022:	3308      	adds	r3, #8
 8009024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009026:	6013      	str	r3, [r2, #0]
 8009028:	9801      	ldr	r0, [sp, #4]
 800902a:	b013      	add	sp, #76	; 0x4c
 800902c:	ecbd 8b04 	vpop	{d8-d9}
 8009030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009034:	4b8b      	ldr	r3, [pc, #556]	; (8009264 <_dtoa_r+0x2dc>)
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	3303      	adds	r3, #3
 800903a:	e7f3      	b.n	8009024 <_dtoa_r+0x9c>
 800903c:	2200      	movs	r2, #0
 800903e:	2300      	movs	r3, #0
 8009040:	4650      	mov	r0, sl
 8009042:	4659      	mov	r1, fp
 8009044:	f7f7 fd58 	bl	8000af8 <__aeabi_dcmpeq>
 8009048:	ec4b ab19 	vmov	d9, sl, fp
 800904c:	4680      	mov	r8, r0
 800904e:	b158      	cbz	r0, 8009068 <_dtoa_r+0xe0>
 8009050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009052:	2301      	movs	r3, #1
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 856b 	beq.w	8009b34 <_dtoa_r+0xbac>
 800905e:	4883      	ldr	r0, [pc, #524]	; (800926c <_dtoa_r+0x2e4>)
 8009060:	6018      	str	r0, [r3, #0]
 8009062:	1e43      	subs	r3, r0, #1
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	e7df      	b.n	8009028 <_dtoa_r+0xa0>
 8009068:	ec4b ab10 	vmov	d0, sl, fp
 800906c:	aa10      	add	r2, sp, #64	; 0x40
 800906e:	a911      	add	r1, sp, #68	; 0x44
 8009070:	4620      	mov	r0, r4
 8009072:	f001 f9a5 	bl	800a3c0 <__d2b>
 8009076:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800907a:	ee08 0a10 	vmov	s16, r0
 800907e:	2d00      	cmp	r5, #0
 8009080:	f000 8084 	beq.w	800918c <_dtoa_r+0x204>
 8009084:	ee19 3a90 	vmov	r3, s19
 8009088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800908c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009090:	4656      	mov	r6, sl
 8009092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800909a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800909e:	4b74      	ldr	r3, [pc, #464]	; (8009270 <_dtoa_r+0x2e8>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4630      	mov	r0, r6
 80090a4:	4639      	mov	r1, r7
 80090a6:	f7f7 f907 	bl	80002b8 <__aeabi_dsub>
 80090aa:	a365      	add	r3, pc, #404	; (adr r3, 8009240 <_dtoa_r+0x2b8>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 faba 	bl	8000628 <__aeabi_dmul>
 80090b4:	a364      	add	r3, pc, #400	; (adr r3, 8009248 <_dtoa_r+0x2c0>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8ff 	bl	80002bc <__adddf3>
 80090be:	4606      	mov	r6, r0
 80090c0:	4628      	mov	r0, r5
 80090c2:	460f      	mov	r7, r1
 80090c4:	f7f7 fa46 	bl	8000554 <__aeabi_i2d>
 80090c8:	a361      	add	r3, pc, #388	; (adr r3, 8009250 <_dtoa_r+0x2c8>)
 80090ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ce:	f7f7 faab 	bl	8000628 <__aeabi_dmul>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	4630      	mov	r0, r6
 80090d8:	4639      	mov	r1, r7
 80090da:	f7f7 f8ef 	bl	80002bc <__adddf3>
 80090de:	4606      	mov	r6, r0
 80090e0:	460f      	mov	r7, r1
 80090e2:	f7f7 fd51 	bl	8000b88 <__aeabi_d2iz>
 80090e6:	2200      	movs	r2, #0
 80090e8:	9000      	str	r0, [sp, #0]
 80090ea:	2300      	movs	r3, #0
 80090ec:	4630      	mov	r0, r6
 80090ee:	4639      	mov	r1, r7
 80090f0:	f7f7 fd0c 	bl	8000b0c <__aeabi_dcmplt>
 80090f4:	b150      	cbz	r0, 800910c <_dtoa_r+0x184>
 80090f6:	9800      	ldr	r0, [sp, #0]
 80090f8:	f7f7 fa2c 	bl	8000554 <__aeabi_i2d>
 80090fc:	4632      	mov	r2, r6
 80090fe:	463b      	mov	r3, r7
 8009100:	f7f7 fcfa 	bl	8000af8 <__aeabi_dcmpeq>
 8009104:	b910      	cbnz	r0, 800910c <_dtoa_r+0x184>
 8009106:	9b00      	ldr	r3, [sp, #0]
 8009108:	3b01      	subs	r3, #1
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	2b16      	cmp	r3, #22
 8009110:	d85a      	bhi.n	80091c8 <_dtoa_r+0x240>
 8009112:	9a00      	ldr	r2, [sp, #0]
 8009114:	4b57      	ldr	r3, [pc, #348]	; (8009274 <_dtoa_r+0x2ec>)
 8009116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800911a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911e:	ec51 0b19 	vmov	r0, r1, d9
 8009122:	f7f7 fcf3 	bl	8000b0c <__aeabi_dcmplt>
 8009126:	2800      	cmp	r0, #0
 8009128:	d050      	beq.n	80091cc <_dtoa_r+0x244>
 800912a:	9b00      	ldr	r3, [sp, #0]
 800912c:	3b01      	subs	r3, #1
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	2300      	movs	r3, #0
 8009132:	930b      	str	r3, [sp, #44]	; 0x2c
 8009134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009136:	1b5d      	subs	r5, r3, r5
 8009138:	1e6b      	subs	r3, r5, #1
 800913a:	9305      	str	r3, [sp, #20]
 800913c:	bf45      	ittet	mi
 800913e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009142:	9304      	strmi	r3, [sp, #16]
 8009144:	2300      	movpl	r3, #0
 8009146:	2300      	movmi	r3, #0
 8009148:	bf4c      	ite	mi
 800914a:	9305      	strmi	r3, [sp, #20]
 800914c:	9304      	strpl	r3, [sp, #16]
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	db3d      	blt.n	80091d0 <_dtoa_r+0x248>
 8009154:	9b05      	ldr	r3, [sp, #20]
 8009156:	9a00      	ldr	r2, [sp, #0]
 8009158:	920a      	str	r2, [sp, #40]	; 0x28
 800915a:	4413      	add	r3, r2
 800915c:	9305      	str	r3, [sp, #20]
 800915e:	2300      	movs	r3, #0
 8009160:	9307      	str	r3, [sp, #28]
 8009162:	9b06      	ldr	r3, [sp, #24]
 8009164:	2b09      	cmp	r3, #9
 8009166:	f200 8089 	bhi.w	800927c <_dtoa_r+0x2f4>
 800916a:	2b05      	cmp	r3, #5
 800916c:	bfc4      	itt	gt
 800916e:	3b04      	subgt	r3, #4
 8009170:	9306      	strgt	r3, [sp, #24]
 8009172:	9b06      	ldr	r3, [sp, #24]
 8009174:	f1a3 0302 	sub.w	r3, r3, #2
 8009178:	bfcc      	ite	gt
 800917a:	2500      	movgt	r5, #0
 800917c:	2501      	movle	r5, #1
 800917e:	2b03      	cmp	r3, #3
 8009180:	f200 8087 	bhi.w	8009292 <_dtoa_r+0x30a>
 8009184:	e8df f003 	tbb	[pc, r3]
 8009188:	59383a2d 	.word	0x59383a2d
 800918c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009190:	441d      	add	r5, r3
 8009192:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009196:	2b20      	cmp	r3, #32
 8009198:	bfc1      	itttt	gt
 800919a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800919e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80091a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091aa:	bfda      	itte	le
 80091ac:	f1c3 0320 	rsble	r3, r3, #32
 80091b0:	fa06 f003 	lslle.w	r0, r6, r3
 80091b4:	4318      	orrgt	r0, r3
 80091b6:	f7f7 f9bd 	bl	8000534 <__aeabi_ui2d>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4606      	mov	r6, r0
 80091be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80091c2:	3d01      	subs	r5, #1
 80091c4:	930e      	str	r3, [sp, #56]	; 0x38
 80091c6:	e76a      	b.n	800909e <_dtoa_r+0x116>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e7b2      	b.n	8009132 <_dtoa_r+0x1aa>
 80091cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80091ce:	e7b1      	b.n	8009134 <_dtoa_r+0x1ac>
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	9a00      	ldr	r2, [sp, #0]
 80091d4:	1a9b      	subs	r3, r3, r2
 80091d6:	9304      	str	r3, [sp, #16]
 80091d8:	4253      	negs	r3, r2
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	2300      	movs	r3, #0
 80091de:	930a      	str	r3, [sp, #40]	; 0x28
 80091e0:	e7bf      	b.n	8009162 <_dtoa_r+0x1da>
 80091e2:	2300      	movs	r3, #0
 80091e4:	9308      	str	r3, [sp, #32]
 80091e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dc55      	bgt.n	8009298 <_dtoa_r+0x310>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091f2:	461a      	mov	r2, r3
 80091f4:	9209      	str	r2, [sp, #36]	; 0x24
 80091f6:	e00c      	b.n	8009212 <_dtoa_r+0x28a>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e7f3      	b.n	80091e4 <_dtoa_r+0x25c>
 80091fc:	2300      	movs	r3, #0
 80091fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009200:	9308      	str	r3, [sp, #32]
 8009202:	9b00      	ldr	r3, [sp, #0]
 8009204:	4413      	add	r3, r2
 8009206:	9302      	str	r3, [sp, #8]
 8009208:	3301      	adds	r3, #1
 800920a:	2b01      	cmp	r3, #1
 800920c:	9303      	str	r3, [sp, #12]
 800920e:	bfb8      	it	lt
 8009210:	2301      	movlt	r3, #1
 8009212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009214:	2200      	movs	r2, #0
 8009216:	6042      	str	r2, [r0, #4]
 8009218:	2204      	movs	r2, #4
 800921a:	f102 0614 	add.w	r6, r2, #20
 800921e:	429e      	cmp	r6, r3
 8009220:	6841      	ldr	r1, [r0, #4]
 8009222:	d93d      	bls.n	80092a0 <_dtoa_r+0x318>
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fda3 	bl	8009d70 <_Balloc>
 800922a:	9001      	str	r0, [sp, #4]
 800922c:	2800      	cmp	r0, #0
 800922e:	d13b      	bne.n	80092a8 <_dtoa_r+0x320>
 8009230:	4b11      	ldr	r3, [pc, #68]	; (8009278 <_dtoa_r+0x2f0>)
 8009232:	4602      	mov	r2, r0
 8009234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009238:	e6c0      	b.n	8008fbc <_dtoa_r+0x34>
 800923a:	2301      	movs	r3, #1
 800923c:	e7df      	b.n	80091fe <_dtoa_r+0x276>
 800923e:	bf00      	nop
 8009240:	636f4361 	.word	0x636f4361
 8009244:	3fd287a7 	.word	0x3fd287a7
 8009248:	8b60c8b3 	.word	0x8b60c8b3
 800924c:	3fc68a28 	.word	0x3fc68a28
 8009250:	509f79fb 	.word	0x509f79fb
 8009254:	3fd34413 	.word	0x3fd34413
 8009258:	0800b215 	.word	0x0800b215
 800925c:	0800b22c 	.word	0x0800b22c
 8009260:	7ff00000 	.word	0x7ff00000
 8009264:	0800b211 	.word	0x0800b211
 8009268:	0800b208 	.word	0x0800b208
 800926c:	0800b1e5 	.word	0x0800b1e5
 8009270:	3ff80000 	.word	0x3ff80000
 8009274:	0800b380 	.word	0x0800b380
 8009278:	0800b287 	.word	0x0800b287
 800927c:	2501      	movs	r5, #1
 800927e:	2300      	movs	r3, #0
 8009280:	9306      	str	r3, [sp, #24]
 8009282:	9508      	str	r5, [sp, #32]
 8009284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009288:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800928c:	2200      	movs	r2, #0
 800928e:	2312      	movs	r3, #18
 8009290:	e7b0      	b.n	80091f4 <_dtoa_r+0x26c>
 8009292:	2301      	movs	r3, #1
 8009294:	9308      	str	r3, [sp, #32]
 8009296:	e7f5      	b.n	8009284 <_dtoa_r+0x2fc>
 8009298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800929e:	e7b8      	b.n	8009212 <_dtoa_r+0x28a>
 80092a0:	3101      	adds	r1, #1
 80092a2:	6041      	str	r1, [r0, #4]
 80092a4:	0052      	lsls	r2, r2, #1
 80092a6:	e7b8      	b.n	800921a <_dtoa_r+0x292>
 80092a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092aa:	9a01      	ldr	r2, [sp, #4]
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	2b0e      	cmp	r3, #14
 80092b2:	f200 809d 	bhi.w	80093f0 <_dtoa_r+0x468>
 80092b6:	2d00      	cmp	r5, #0
 80092b8:	f000 809a 	beq.w	80093f0 <_dtoa_r+0x468>
 80092bc:	9b00      	ldr	r3, [sp, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	dd32      	ble.n	8009328 <_dtoa_r+0x3a0>
 80092c2:	4ab7      	ldr	r2, [pc, #732]	; (80095a0 <_dtoa_r+0x618>)
 80092c4:	f003 030f 	and.w	r3, r3, #15
 80092c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092d0:	9b00      	ldr	r3, [sp, #0]
 80092d2:	05d8      	lsls	r0, r3, #23
 80092d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80092d8:	d516      	bpl.n	8009308 <_dtoa_r+0x380>
 80092da:	4bb2      	ldr	r3, [pc, #712]	; (80095a4 <_dtoa_r+0x61c>)
 80092dc:	ec51 0b19 	vmov	r0, r1, d9
 80092e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092e4:	f7f7 faca 	bl	800087c <__aeabi_ddiv>
 80092e8:	f007 070f 	and.w	r7, r7, #15
 80092ec:	4682      	mov	sl, r0
 80092ee:	468b      	mov	fp, r1
 80092f0:	2503      	movs	r5, #3
 80092f2:	4eac      	ldr	r6, [pc, #688]	; (80095a4 <_dtoa_r+0x61c>)
 80092f4:	b957      	cbnz	r7, 800930c <_dtoa_r+0x384>
 80092f6:	4642      	mov	r2, r8
 80092f8:	464b      	mov	r3, r9
 80092fa:	4650      	mov	r0, sl
 80092fc:	4659      	mov	r1, fp
 80092fe:	f7f7 fabd 	bl	800087c <__aeabi_ddiv>
 8009302:	4682      	mov	sl, r0
 8009304:	468b      	mov	fp, r1
 8009306:	e028      	b.n	800935a <_dtoa_r+0x3d2>
 8009308:	2502      	movs	r5, #2
 800930a:	e7f2      	b.n	80092f2 <_dtoa_r+0x36a>
 800930c:	07f9      	lsls	r1, r7, #31
 800930e:	d508      	bpl.n	8009322 <_dtoa_r+0x39a>
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009318:	f7f7 f986 	bl	8000628 <__aeabi_dmul>
 800931c:	3501      	adds	r5, #1
 800931e:	4680      	mov	r8, r0
 8009320:	4689      	mov	r9, r1
 8009322:	107f      	asrs	r7, r7, #1
 8009324:	3608      	adds	r6, #8
 8009326:	e7e5      	b.n	80092f4 <_dtoa_r+0x36c>
 8009328:	f000 809b 	beq.w	8009462 <_dtoa_r+0x4da>
 800932c:	9b00      	ldr	r3, [sp, #0]
 800932e:	4f9d      	ldr	r7, [pc, #628]	; (80095a4 <_dtoa_r+0x61c>)
 8009330:	425e      	negs	r6, r3
 8009332:	4b9b      	ldr	r3, [pc, #620]	; (80095a0 <_dtoa_r+0x618>)
 8009334:	f006 020f 	and.w	r2, r6, #15
 8009338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	ec51 0b19 	vmov	r0, r1, d9
 8009344:	f7f7 f970 	bl	8000628 <__aeabi_dmul>
 8009348:	1136      	asrs	r6, r6, #4
 800934a:	4682      	mov	sl, r0
 800934c:	468b      	mov	fp, r1
 800934e:	2300      	movs	r3, #0
 8009350:	2502      	movs	r5, #2
 8009352:	2e00      	cmp	r6, #0
 8009354:	d17a      	bne.n	800944c <_dtoa_r+0x4c4>
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1d3      	bne.n	8009302 <_dtoa_r+0x37a>
 800935a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8082 	beq.w	8009466 <_dtoa_r+0x4de>
 8009362:	4b91      	ldr	r3, [pc, #580]	; (80095a8 <_dtoa_r+0x620>)
 8009364:	2200      	movs	r2, #0
 8009366:	4650      	mov	r0, sl
 8009368:	4659      	mov	r1, fp
 800936a:	f7f7 fbcf 	bl	8000b0c <__aeabi_dcmplt>
 800936e:	2800      	cmp	r0, #0
 8009370:	d079      	beq.n	8009466 <_dtoa_r+0x4de>
 8009372:	9b03      	ldr	r3, [sp, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d076      	beq.n	8009466 <_dtoa_r+0x4de>
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	dd36      	ble.n	80093ec <_dtoa_r+0x464>
 800937e:	9b00      	ldr	r3, [sp, #0]
 8009380:	4650      	mov	r0, sl
 8009382:	4659      	mov	r1, fp
 8009384:	1e5f      	subs	r7, r3, #1
 8009386:	2200      	movs	r2, #0
 8009388:	4b88      	ldr	r3, [pc, #544]	; (80095ac <_dtoa_r+0x624>)
 800938a:	f7f7 f94d 	bl	8000628 <__aeabi_dmul>
 800938e:	9e02      	ldr	r6, [sp, #8]
 8009390:	4682      	mov	sl, r0
 8009392:	468b      	mov	fp, r1
 8009394:	3501      	adds	r5, #1
 8009396:	4628      	mov	r0, r5
 8009398:	f7f7 f8dc 	bl	8000554 <__aeabi_i2d>
 800939c:	4652      	mov	r2, sl
 800939e:	465b      	mov	r3, fp
 80093a0:	f7f7 f942 	bl	8000628 <__aeabi_dmul>
 80093a4:	4b82      	ldr	r3, [pc, #520]	; (80095b0 <_dtoa_r+0x628>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	f7f6 ff88 	bl	80002bc <__adddf3>
 80093ac:	46d0      	mov	r8, sl
 80093ae:	46d9      	mov	r9, fp
 80093b0:	4682      	mov	sl, r0
 80093b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80093b6:	2e00      	cmp	r6, #0
 80093b8:	d158      	bne.n	800946c <_dtoa_r+0x4e4>
 80093ba:	4b7e      	ldr	r3, [pc, #504]	; (80095b4 <_dtoa_r+0x62c>)
 80093bc:	2200      	movs	r2, #0
 80093be:	4640      	mov	r0, r8
 80093c0:	4649      	mov	r1, r9
 80093c2:	f7f6 ff79 	bl	80002b8 <__aeabi_dsub>
 80093c6:	4652      	mov	r2, sl
 80093c8:	465b      	mov	r3, fp
 80093ca:	4680      	mov	r8, r0
 80093cc:	4689      	mov	r9, r1
 80093ce:	f7f7 fbbb 	bl	8000b48 <__aeabi_dcmpgt>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	f040 8295 	bne.w	8009902 <_dtoa_r+0x97a>
 80093d8:	4652      	mov	r2, sl
 80093da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093de:	4640      	mov	r0, r8
 80093e0:	4649      	mov	r1, r9
 80093e2:	f7f7 fb93 	bl	8000b0c <__aeabi_dcmplt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f040 8289 	bne.w	80098fe <_dtoa_r+0x976>
 80093ec:	ec5b ab19 	vmov	sl, fp, d9
 80093f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f2c0 8148 	blt.w	8009688 <_dtoa_r+0x700>
 80093f8:	9a00      	ldr	r2, [sp, #0]
 80093fa:	2a0e      	cmp	r2, #14
 80093fc:	f300 8144 	bgt.w	8009688 <_dtoa_r+0x700>
 8009400:	4b67      	ldr	r3, [pc, #412]	; (80095a0 <_dtoa_r+0x618>)
 8009402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	f280 80d5 	bge.w	80095bc <_dtoa_r+0x634>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	f300 80d1 	bgt.w	80095bc <_dtoa_r+0x634>
 800941a:	f040 826f 	bne.w	80098fc <_dtoa_r+0x974>
 800941e:	4b65      	ldr	r3, [pc, #404]	; (80095b4 <_dtoa_r+0x62c>)
 8009420:	2200      	movs	r2, #0
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 f8ff 	bl	8000628 <__aeabi_dmul>
 800942a:	4652      	mov	r2, sl
 800942c:	465b      	mov	r3, fp
 800942e:	f7f7 fb81 	bl	8000b34 <__aeabi_dcmpge>
 8009432:	9e03      	ldr	r6, [sp, #12]
 8009434:	4637      	mov	r7, r6
 8009436:	2800      	cmp	r0, #0
 8009438:	f040 8245 	bne.w	80098c6 <_dtoa_r+0x93e>
 800943c:	9d01      	ldr	r5, [sp, #4]
 800943e:	2331      	movs	r3, #49	; 0x31
 8009440:	f805 3b01 	strb.w	r3, [r5], #1
 8009444:	9b00      	ldr	r3, [sp, #0]
 8009446:	3301      	adds	r3, #1
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	e240      	b.n	80098ce <_dtoa_r+0x946>
 800944c:	07f2      	lsls	r2, r6, #31
 800944e:	d505      	bpl.n	800945c <_dtoa_r+0x4d4>
 8009450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009454:	f7f7 f8e8 	bl	8000628 <__aeabi_dmul>
 8009458:	3501      	adds	r5, #1
 800945a:	2301      	movs	r3, #1
 800945c:	1076      	asrs	r6, r6, #1
 800945e:	3708      	adds	r7, #8
 8009460:	e777      	b.n	8009352 <_dtoa_r+0x3ca>
 8009462:	2502      	movs	r5, #2
 8009464:	e779      	b.n	800935a <_dtoa_r+0x3d2>
 8009466:	9f00      	ldr	r7, [sp, #0]
 8009468:	9e03      	ldr	r6, [sp, #12]
 800946a:	e794      	b.n	8009396 <_dtoa_r+0x40e>
 800946c:	9901      	ldr	r1, [sp, #4]
 800946e:	4b4c      	ldr	r3, [pc, #304]	; (80095a0 <_dtoa_r+0x618>)
 8009470:	4431      	add	r1, r6
 8009472:	910d      	str	r1, [sp, #52]	; 0x34
 8009474:	9908      	ldr	r1, [sp, #32]
 8009476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800947a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800947e:	2900      	cmp	r1, #0
 8009480:	d043      	beq.n	800950a <_dtoa_r+0x582>
 8009482:	494d      	ldr	r1, [pc, #308]	; (80095b8 <_dtoa_r+0x630>)
 8009484:	2000      	movs	r0, #0
 8009486:	f7f7 f9f9 	bl	800087c <__aeabi_ddiv>
 800948a:	4652      	mov	r2, sl
 800948c:	465b      	mov	r3, fp
 800948e:	f7f6 ff13 	bl	80002b8 <__aeabi_dsub>
 8009492:	9d01      	ldr	r5, [sp, #4]
 8009494:	4682      	mov	sl, r0
 8009496:	468b      	mov	fp, r1
 8009498:	4649      	mov	r1, r9
 800949a:	4640      	mov	r0, r8
 800949c:	f7f7 fb74 	bl	8000b88 <__aeabi_d2iz>
 80094a0:	4606      	mov	r6, r0
 80094a2:	f7f7 f857 	bl	8000554 <__aeabi_i2d>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f6 ff03 	bl	80002b8 <__aeabi_dsub>
 80094b2:	3630      	adds	r6, #48	; 0x30
 80094b4:	f805 6b01 	strb.w	r6, [r5], #1
 80094b8:	4652      	mov	r2, sl
 80094ba:	465b      	mov	r3, fp
 80094bc:	4680      	mov	r8, r0
 80094be:	4689      	mov	r9, r1
 80094c0:	f7f7 fb24 	bl	8000b0c <__aeabi_dcmplt>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d163      	bne.n	8009590 <_dtoa_r+0x608>
 80094c8:	4642      	mov	r2, r8
 80094ca:	464b      	mov	r3, r9
 80094cc:	4936      	ldr	r1, [pc, #216]	; (80095a8 <_dtoa_r+0x620>)
 80094ce:	2000      	movs	r0, #0
 80094d0:	f7f6 fef2 	bl	80002b8 <__aeabi_dsub>
 80094d4:	4652      	mov	r2, sl
 80094d6:	465b      	mov	r3, fp
 80094d8:	f7f7 fb18 	bl	8000b0c <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f040 80b5 	bne.w	800964c <_dtoa_r+0x6c4>
 80094e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e4:	429d      	cmp	r5, r3
 80094e6:	d081      	beq.n	80093ec <_dtoa_r+0x464>
 80094e8:	4b30      	ldr	r3, [pc, #192]	; (80095ac <_dtoa_r+0x624>)
 80094ea:	2200      	movs	r2, #0
 80094ec:	4650      	mov	r0, sl
 80094ee:	4659      	mov	r1, fp
 80094f0:	f7f7 f89a 	bl	8000628 <__aeabi_dmul>
 80094f4:	4b2d      	ldr	r3, [pc, #180]	; (80095ac <_dtoa_r+0x624>)
 80094f6:	4682      	mov	sl, r0
 80094f8:	468b      	mov	fp, r1
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	2200      	movs	r2, #0
 8009500:	f7f7 f892 	bl	8000628 <__aeabi_dmul>
 8009504:	4680      	mov	r8, r0
 8009506:	4689      	mov	r9, r1
 8009508:	e7c6      	b.n	8009498 <_dtoa_r+0x510>
 800950a:	4650      	mov	r0, sl
 800950c:	4659      	mov	r1, fp
 800950e:	f7f7 f88b 	bl	8000628 <__aeabi_dmul>
 8009512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009514:	9d01      	ldr	r5, [sp, #4]
 8009516:	930f      	str	r3, [sp, #60]	; 0x3c
 8009518:	4682      	mov	sl, r0
 800951a:	468b      	mov	fp, r1
 800951c:	4649      	mov	r1, r9
 800951e:	4640      	mov	r0, r8
 8009520:	f7f7 fb32 	bl	8000b88 <__aeabi_d2iz>
 8009524:	4606      	mov	r6, r0
 8009526:	f7f7 f815 	bl	8000554 <__aeabi_i2d>
 800952a:	3630      	adds	r6, #48	; 0x30
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f6 fec0 	bl	80002b8 <__aeabi_dsub>
 8009538:	f805 6b01 	strb.w	r6, [r5], #1
 800953c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800953e:	429d      	cmp	r5, r3
 8009540:	4680      	mov	r8, r0
 8009542:	4689      	mov	r9, r1
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	d124      	bne.n	8009594 <_dtoa_r+0x60c>
 800954a:	4b1b      	ldr	r3, [pc, #108]	; (80095b8 <_dtoa_r+0x630>)
 800954c:	4650      	mov	r0, sl
 800954e:	4659      	mov	r1, fp
 8009550:	f7f6 feb4 	bl	80002bc <__adddf3>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f7 faf4 	bl	8000b48 <__aeabi_dcmpgt>
 8009560:	2800      	cmp	r0, #0
 8009562:	d173      	bne.n	800964c <_dtoa_r+0x6c4>
 8009564:	4652      	mov	r2, sl
 8009566:	465b      	mov	r3, fp
 8009568:	4913      	ldr	r1, [pc, #76]	; (80095b8 <_dtoa_r+0x630>)
 800956a:	2000      	movs	r0, #0
 800956c:	f7f6 fea4 	bl	80002b8 <__aeabi_dsub>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4640      	mov	r0, r8
 8009576:	4649      	mov	r1, r9
 8009578:	f7f7 fac8 	bl	8000b0c <__aeabi_dcmplt>
 800957c:	2800      	cmp	r0, #0
 800957e:	f43f af35 	beq.w	80093ec <_dtoa_r+0x464>
 8009582:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009584:	1e6b      	subs	r3, r5, #1
 8009586:	930f      	str	r3, [sp, #60]	; 0x3c
 8009588:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800958c:	2b30      	cmp	r3, #48	; 0x30
 800958e:	d0f8      	beq.n	8009582 <_dtoa_r+0x5fa>
 8009590:	9700      	str	r7, [sp, #0]
 8009592:	e049      	b.n	8009628 <_dtoa_r+0x6a0>
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <_dtoa_r+0x624>)
 8009596:	f7f7 f847 	bl	8000628 <__aeabi_dmul>
 800959a:	4680      	mov	r8, r0
 800959c:	4689      	mov	r9, r1
 800959e:	e7bd      	b.n	800951c <_dtoa_r+0x594>
 80095a0:	0800b380 	.word	0x0800b380
 80095a4:	0800b358 	.word	0x0800b358
 80095a8:	3ff00000 	.word	0x3ff00000
 80095ac:	40240000 	.word	0x40240000
 80095b0:	401c0000 	.word	0x401c0000
 80095b4:	40140000 	.word	0x40140000
 80095b8:	3fe00000 	.word	0x3fe00000
 80095bc:	9d01      	ldr	r5, [sp, #4]
 80095be:	4656      	mov	r6, sl
 80095c0:	465f      	mov	r7, fp
 80095c2:	4642      	mov	r2, r8
 80095c4:	464b      	mov	r3, r9
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f7 f957 	bl	800087c <__aeabi_ddiv>
 80095ce:	f7f7 fadb 	bl	8000b88 <__aeabi_d2iz>
 80095d2:	4682      	mov	sl, r0
 80095d4:	f7f6 ffbe 	bl	8000554 <__aeabi_i2d>
 80095d8:	4642      	mov	r2, r8
 80095da:	464b      	mov	r3, r9
 80095dc:	f7f7 f824 	bl	8000628 <__aeabi_dmul>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80095ec:	f7f6 fe64 	bl	80002b8 <__aeabi_dsub>
 80095f0:	f805 6b01 	strb.w	r6, [r5], #1
 80095f4:	9e01      	ldr	r6, [sp, #4]
 80095f6:	9f03      	ldr	r7, [sp, #12]
 80095f8:	1bae      	subs	r6, r5, r6
 80095fa:	42b7      	cmp	r7, r6
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	d135      	bne.n	800966e <_dtoa_r+0x6e6>
 8009602:	f7f6 fe5b 	bl	80002bc <__adddf3>
 8009606:	4642      	mov	r2, r8
 8009608:	464b      	mov	r3, r9
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	f7f7 fa9b 	bl	8000b48 <__aeabi_dcmpgt>
 8009612:	b9d0      	cbnz	r0, 800964a <_dtoa_r+0x6c2>
 8009614:	4642      	mov	r2, r8
 8009616:	464b      	mov	r3, r9
 8009618:	4630      	mov	r0, r6
 800961a:	4639      	mov	r1, r7
 800961c:	f7f7 fa6c 	bl	8000af8 <__aeabi_dcmpeq>
 8009620:	b110      	cbz	r0, 8009628 <_dtoa_r+0x6a0>
 8009622:	f01a 0f01 	tst.w	sl, #1
 8009626:	d110      	bne.n	800964a <_dtoa_r+0x6c2>
 8009628:	4620      	mov	r0, r4
 800962a:	ee18 1a10 	vmov	r1, s16
 800962e:	f000 fbdf 	bl	8009df0 <_Bfree>
 8009632:	2300      	movs	r3, #0
 8009634:	9800      	ldr	r0, [sp, #0]
 8009636:	702b      	strb	r3, [r5, #0]
 8009638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800963a:	3001      	adds	r0, #1
 800963c:	6018      	str	r0, [r3, #0]
 800963e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009640:	2b00      	cmp	r3, #0
 8009642:	f43f acf1 	beq.w	8009028 <_dtoa_r+0xa0>
 8009646:	601d      	str	r5, [r3, #0]
 8009648:	e4ee      	b.n	8009028 <_dtoa_r+0xa0>
 800964a:	9f00      	ldr	r7, [sp, #0]
 800964c:	462b      	mov	r3, r5
 800964e:	461d      	mov	r5, r3
 8009650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009654:	2a39      	cmp	r2, #57	; 0x39
 8009656:	d106      	bne.n	8009666 <_dtoa_r+0x6de>
 8009658:	9a01      	ldr	r2, [sp, #4]
 800965a:	429a      	cmp	r2, r3
 800965c:	d1f7      	bne.n	800964e <_dtoa_r+0x6c6>
 800965e:	9901      	ldr	r1, [sp, #4]
 8009660:	2230      	movs	r2, #48	; 0x30
 8009662:	3701      	adds	r7, #1
 8009664:	700a      	strb	r2, [r1, #0]
 8009666:	781a      	ldrb	r2, [r3, #0]
 8009668:	3201      	adds	r2, #1
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e790      	b.n	8009590 <_dtoa_r+0x608>
 800966e:	4ba6      	ldr	r3, [pc, #664]	; (8009908 <_dtoa_r+0x980>)
 8009670:	2200      	movs	r2, #0
 8009672:	f7f6 ffd9 	bl	8000628 <__aeabi_dmul>
 8009676:	2200      	movs	r2, #0
 8009678:	2300      	movs	r3, #0
 800967a:	4606      	mov	r6, r0
 800967c:	460f      	mov	r7, r1
 800967e:	f7f7 fa3b 	bl	8000af8 <__aeabi_dcmpeq>
 8009682:	2800      	cmp	r0, #0
 8009684:	d09d      	beq.n	80095c2 <_dtoa_r+0x63a>
 8009686:	e7cf      	b.n	8009628 <_dtoa_r+0x6a0>
 8009688:	9a08      	ldr	r2, [sp, #32]
 800968a:	2a00      	cmp	r2, #0
 800968c:	f000 80d7 	beq.w	800983e <_dtoa_r+0x8b6>
 8009690:	9a06      	ldr	r2, [sp, #24]
 8009692:	2a01      	cmp	r2, #1
 8009694:	f300 80ba 	bgt.w	800980c <_dtoa_r+0x884>
 8009698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800969a:	2a00      	cmp	r2, #0
 800969c:	f000 80b2 	beq.w	8009804 <_dtoa_r+0x87c>
 80096a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096a4:	9e07      	ldr	r6, [sp, #28]
 80096a6:	9d04      	ldr	r5, [sp, #16]
 80096a8:	9a04      	ldr	r2, [sp, #16]
 80096aa:	441a      	add	r2, r3
 80096ac:	9204      	str	r2, [sp, #16]
 80096ae:	9a05      	ldr	r2, [sp, #20]
 80096b0:	2101      	movs	r1, #1
 80096b2:	441a      	add	r2, r3
 80096b4:	4620      	mov	r0, r4
 80096b6:	9205      	str	r2, [sp, #20]
 80096b8:	f000 fc52 	bl	8009f60 <__i2b>
 80096bc:	4607      	mov	r7, r0
 80096be:	2d00      	cmp	r5, #0
 80096c0:	dd0c      	ble.n	80096dc <_dtoa_r+0x754>
 80096c2:	9b05      	ldr	r3, [sp, #20]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dd09      	ble.n	80096dc <_dtoa_r+0x754>
 80096c8:	42ab      	cmp	r3, r5
 80096ca:	9a04      	ldr	r2, [sp, #16]
 80096cc:	bfa8      	it	ge
 80096ce:	462b      	movge	r3, r5
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	9204      	str	r2, [sp, #16]
 80096d4:	9a05      	ldr	r2, [sp, #20]
 80096d6:	1aed      	subs	r5, r5, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	9305      	str	r3, [sp, #20]
 80096dc:	9b07      	ldr	r3, [sp, #28]
 80096de:	b31b      	cbz	r3, 8009728 <_dtoa_r+0x7a0>
 80096e0:	9b08      	ldr	r3, [sp, #32]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 80af 	beq.w	8009846 <_dtoa_r+0x8be>
 80096e8:	2e00      	cmp	r6, #0
 80096ea:	dd13      	ble.n	8009714 <_dtoa_r+0x78c>
 80096ec:	4639      	mov	r1, r7
 80096ee:	4632      	mov	r2, r6
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 fcf5 	bl	800a0e0 <__pow5mult>
 80096f6:	ee18 2a10 	vmov	r2, s16
 80096fa:	4601      	mov	r1, r0
 80096fc:	4607      	mov	r7, r0
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 fc44 	bl	8009f8c <__multiply>
 8009704:	ee18 1a10 	vmov	r1, s16
 8009708:	4680      	mov	r8, r0
 800970a:	4620      	mov	r0, r4
 800970c:	f000 fb70 	bl	8009df0 <_Bfree>
 8009710:	ee08 8a10 	vmov	s16, r8
 8009714:	9b07      	ldr	r3, [sp, #28]
 8009716:	1b9a      	subs	r2, r3, r6
 8009718:	d006      	beq.n	8009728 <_dtoa_r+0x7a0>
 800971a:	ee18 1a10 	vmov	r1, s16
 800971e:	4620      	mov	r0, r4
 8009720:	f000 fcde 	bl	800a0e0 <__pow5mult>
 8009724:	ee08 0a10 	vmov	s16, r0
 8009728:	2101      	movs	r1, #1
 800972a:	4620      	mov	r0, r4
 800972c:	f000 fc18 	bl	8009f60 <__i2b>
 8009730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009732:	2b00      	cmp	r3, #0
 8009734:	4606      	mov	r6, r0
 8009736:	f340 8088 	ble.w	800984a <_dtoa_r+0x8c2>
 800973a:	461a      	mov	r2, r3
 800973c:	4601      	mov	r1, r0
 800973e:	4620      	mov	r0, r4
 8009740:	f000 fcce 	bl	800a0e0 <__pow5mult>
 8009744:	9b06      	ldr	r3, [sp, #24]
 8009746:	2b01      	cmp	r3, #1
 8009748:	4606      	mov	r6, r0
 800974a:	f340 8081 	ble.w	8009850 <_dtoa_r+0x8c8>
 800974e:	f04f 0800 	mov.w	r8, #0
 8009752:	6933      	ldr	r3, [r6, #16]
 8009754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009758:	6918      	ldr	r0, [r3, #16]
 800975a:	f000 fbb1 	bl	8009ec0 <__hi0bits>
 800975e:	f1c0 0020 	rsb	r0, r0, #32
 8009762:	9b05      	ldr	r3, [sp, #20]
 8009764:	4418      	add	r0, r3
 8009766:	f010 001f 	ands.w	r0, r0, #31
 800976a:	f000 8092 	beq.w	8009892 <_dtoa_r+0x90a>
 800976e:	f1c0 0320 	rsb	r3, r0, #32
 8009772:	2b04      	cmp	r3, #4
 8009774:	f340 808a 	ble.w	800988c <_dtoa_r+0x904>
 8009778:	f1c0 001c 	rsb	r0, r0, #28
 800977c:	9b04      	ldr	r3, [sp, #16]
 800977e:	4403      	add	r3, r0
 8009780:	9304      	str	r3, [sp, #16]
 8009782:	9b05      	ldr	r3, [sp, #20]
 8009784:	4403      	add	r3, r0
 8009786:	4405      	add	r5, r0
 8009788:	9305      	str	r3, [sp, #20]
 800978a:	9b04      	ldr	r3, [sp, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	dd07      	ble.n	80097a0 <_dtoa_r+0x818>
 8009790:	ee18 1a10 	vmov	r1, s16
 8009794:	461a      	mov	r2, r3
 8009796:	4620      	mov	r0, r4
 8009798:	f000 fcfc 	bl	800a194 <__lshift>
 800979c:	ee08 0a10 	vmov	s16, r0
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dd05      	ble.n	80097b2 <_dtoa_r+0x82a>
 80097a6:	4631      	mov	r1, r6
 80097a8:	461a      	mov	r2, r3
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fcf2 	bl	800a194 <__lshift>
 80097b0:	4606      	mov	r6, r0
 80097b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d06e      	beq.n	8009896 <_dtoa_r+0x90e>
 80097b8:	ee18 0a10 	vmov	r0, s16
 80097bc:	4631      	mov	r1, r6
 80097be:	f000 fd59 	bl	800a274 <__mcmp>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	da67      	bge.n	8009896 <_dtoa_r+0x90e>
 80097c6:	9b00      	ldr	r3, [sp, #0]
 80097c8:	3b01      	subs	r3, #1
 80097ca:	ee18 1a10 	vmov	r1, s16
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	220a      	movs	r2, #10
 80097d2:	2300      	movs	r3, #0
 80097d4:	4620      	mov	r0, r4
 80097d6:	f000 fb2d 	bl	8009e34 <__multadd>
 80097da:	9b08      	ldr	r3, [sp, #32]
 80097dc:	ee08 0a10 	vmov	s16, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 81b1 	beq.w	8009b48 <_dtoa_r+0xbc0>
 80097e6:	2300      	movs	r3, #0
 80097e8:	4639      	mov	r1, r7
 80097ea:	220a      	movs	r2, #10
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 fb21 	bl	8009e34 <__multadd>
 80097f2:	9b02      	ldr	r3, [sp, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	4607      	mov	r7, r0
 80097f8:	f300 808e 	bgt.w	8009918 <_dtoa_r+0x990>
 80097fc:	9b06      	ldr	r3, [sp, #24]
 80097fe:	2b02      	cmp	r3, #2
 8009800:	dc51      	bgt.n	80098a6 <_dtoa_r+0x91e>
 8009802:	e089      	b.n	8009918 <_dtoa_r+0x990>
 8009804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800980a:	e74b      	b.n	80096a4 <_dtoa_r+0x71c>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1e5e      	subs	r6, r3, #1
 8009810:	9b07      	ldr	r3, [sp, #28]
 8009812:	42b3      	cmp	r3, r6
 8009814:	bfbf      	itttt	lt
 8009816:	9b07      	ldrlt	r3, [sp, #28]
 8009818:	9607      	strlt	r6, [sp, #28]
 800981a:	1af2      	sublt	r2, r6, r3
 800981c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800981e:	bfb6      	itet	lt
 8009820:	189b      	addlt	r3, r3, r2
 8009822:	1b9e      	subge	r6, r3, r6
 8009824:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009826:	9b03      	ldr	r3, [sp, #12]
 8009828:	bfb8      	it	lt
 800982a:	2600      	movlt	r6, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	bfb7      	itett	lt
 8009830:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009834:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009838:	1a9d      	sublt	r5, r3, r2
 800983a:	2300      	movlt	r3, #0
 800983c:	e734      	b.n	80096a8 <_dtoa_r+0x720>
 800983e:	9e07      	ldr	r6, [sp, #28]
 8009840:	9d04      	ldr	r5, [sp, #16]
 8009842:	9f08      	ldr	r7, [sp, #32]
 8009844:	e73b      	b.n	80096be <_dtoa_r+0x736>
 8009846:	9a07      	ldr	r2, [sp, #28]
 8009848:	e767      	b.n	800971a <_dtoa_r+0x792>
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b01      	cmp	r3, #1
 800984e:	dc18      	bgt.n	8009882 <_dtoa_r+0x8fa>
 8009850:	f1ba 0f00 	cmp.w	sl, #0
 8009854:	d115      	bne.n	8009882 <_dtoa_r+0x8fa>
 8009856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800985a:	b993      	cbnz	r3, 8009882 <_dtoa_r+0x8fa>
 800985c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009860:	0d1b      	lsrs	r3, r3, #20
 8009862:	051b      	lsls	r3, r3, #20
 8009864:	b183      	cbz	r3, 8009888 <_dtoa_r+0x900>
 8009866:	9b04      	ldr	r3, [sp, #16]
 8009868:	3301      	adds	r3, #1
 800986a:	9304      	str	r3, [sp, #16]
 800986c:	9b05      	ldr	r3, [sp, #20]
 800986e:	3301      	adds	r3, #1
 8009870:	9305      	str	r3, [sp, #20]
 8009872:	f04f 0801 	mov.w	r8, #1
 8009876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009878:	2b00      	cmp	r3, #0
 800987a:	f47f af6a 	bne.w	8009752 <_dtoa_r+0x7ca>
 800987e:	2001      	movs	r0, #1
 8009880:	e76f      	b.n	8009762 <_dtoa_r+0x7da>
 8009882:	f04f 0800 	mov.w	r8, #0
 8009886:	e7f6      	b.n	8009876 <_dtoa_r+0x8ee>
 8009888:	4698      	mov	r8, r3
 800988a:	e7f4      	b.n	8009876 <_dtoa_r+0x8ee>
 800988c:	f43f af7d 	beq.w	800978a <_dtoa_r+0x802>
 8009890:	4618      	mov	r0, r3
 8009892:	301c      	adds	r0, #28
 8009894:	e772      	b.n	800977c <_dtoa_r+0x7f4>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	2b00      	cmp	r3, #0
 800989a:	dc37      	bgt.n	800990c <_dtoa_r+0x984>
 800989c:	9b06      	ldr	r3, [sp, #24]
 800989e:	2b02      	cmp	r3, #2
 80098a0:	dd34      	ble.n	800990c <_dtoa_r+0x984>
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	b96b      	cbnz	r3, 80098c6 <_dtoa_r+0x93e>
 80098aa:	4631      	mov	r1, r6
 80098ac:	2205      	movs	r2, #5
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 fac0 	bl	8009e34 <__multadd>
 80098b4:	4601      	mov	r1, r0
 80098b6:	4606      	mov	r6, r0
 80098b8:	ee18 0a10 	vmov	r0, s16
 80098bc:	f000 fcda 	bl	800a274 <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	f73f adbb 	bgt.w	800943c <_dtoa_r+0x4b4>
 80098c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c8:	9d01      	ldr	r5, [sp, #4]
 80098ca:	43db      	mvns	r3, r3
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	4631      	mov	r1, r6
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 fa8b 	bl	8009df0 <_Bfree>
 80098da:	2f00      	cmp	r7, #0
 80098dc:	f43f aea4 	beq.w	8009628 <_dtoa_r+0x6a0>
 80098e0:	f1b8 0f00 	cmp.w	r8, #0
 80098e4:	d005      	beq.n	80098f2 <_dtoa_r+0x96a>
 80098e6:	45b8      	cmp	r8, r7
 80098e8:	d003      	beq.n	80098f2 <_dtoa_r+0x96a>
 80098ea:	4641      	mov	r1, r8
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 fa7f 	bl	8009df0 <_Bfree>
 80098f2:	4639      	mov	r1, r7
 80098f4:	4620      	mov	r0, r4
 80098f6:	f000 fa7b 	bl	8009df0 <_Bfree>
 80098fa:	e695      	b.n	8009628 <_dtoa_r+0x6a0>
 80098fc:	2600      	movs	r6, #0
 80098fe:	4637      	mov	r7, r6
 8009900:	e7e1      	b.n	80098c6 <_dtoa_r+0x93e>
 8009902:	9700      	str	r7, [sp, #0]
 8009904:	4637      	mov	r7, r6
 8009906:	e599      	b.n	800943c <_dtoa_r+0x4b4>
 8009908:	40240000 	.word	0x40240000
 800990c:	9b08      	ldr	r3, [sp, #32]
 800990e:	2b00      	cmp	r3, #0
 8009910:	f000 80ca 	beq.w	8009aa8 <_dtoa_r+0xb20>
 8009914:	9b03      	ldr	r3, [sp, #12]
 8009916:	9302      	str	r3, [sp, #8]
 8009918:	2d00      	cmp	r5, #0
 800991a:	dd05      	ble.n	8009928 <_dtoa_r+0x9a0>
 800991c:	4639      	mov	r1, r7
 800991e:	462a      	mov	r2, r5
 8009920:	4620      	mov	r0, r4
 8009922:	f000 fc37 	bl	800a194 <__lshift>
 8009926:	4607      	mov	r7, r0
 8009928:	f1b8 0f00 	cmp.w	r8, #0
 800992c:	d05b      	beq.n	80099e6 <_dtoa_r+0xa5e>
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fa1d 	bl	8009d70 <_Balloc>
 8009936:	4605      	mov	r5, r0
 8009938:	b928      	cbnz	r0, 8009946 <_dtoa_r+0x9be>
 800993a:	4b87      	ldr	r3, [pc, #540]	; (8009b58 <_dtoa_r+0xbd0>)
 800993c:	4602      	mov	r2, r0
 800993e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009942:	f7ff bb3b 	b.w	8008fbc <_dtoa_r+0x34>
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	3202      	adds	r2, #2
 800994a:	0092      	lsls	r2, r2, #2
 800994c:	f107 010c 	add.w	r1, r7, #12
 8009950:	300c      	adds	r0, #12
 8009952:	f7fe fdf3 	bl	800853c <memcpy>
 8009956:	2201      	movs	r2, #1
 8009958:	4629      	mov	r1, r5
 800995a:	4620      	mov	r0, r4
 800995c:	f000 fc1a 	bl	800a194 <__lshift>
 8009960:	9b01      	ldr	r3, [sp, #4]
 8009962:	f103 0901 	add.w	r9, r3, #1
 8009966:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800996a:	4413      	add	r3, r2
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	f00a 0301 	and.w	r3, sl, #1
 8009972:	46b8      	mov	r8, r7
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	4607      	mov	r7, r0
 8009978:	4631      	mov	r1, r6
 800997a:	ee18 0a10 	vmov	r0, s16
 800997e:	f7ff fa75 	bl	8008e6c <quorem>
 8009982:	4641      	mov	r1, r8
 8009984:	9002      	str	r0, [sp, #8]
 8009986:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800998a:	ee18 0a10 	vmov	r0, s16
 800998e:	f000 fc71 	bl	800a274 <__mcmp>
 8009992:	463a      	mov	r2, r7
 8009994:	9003      	str	r0, [sp, #12]
 8009996:	4631      	mov	r1, r6
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fc87 	bl	800a2ac <__mdiff>
 800999e:	68c2      	ldr	r2, [r0, #12]
 80099a0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 80099a4:	4605      	mov	r5, r0
 80099a6:	bb02      	cbnz	r2, 80099ea <_dtoa_r+0xa62>
 80099a8:	4601      	mov	r1, r0
 80099aa:	ee18 0a10 	vmov	r0, s16
 80099ae:	f000 fc61 	bl	800a274 <__mcmp>
 80099b2:	4602      	mov	r2, r0
 80099b4:	4629      	mov	r1, r5
 80099b6:	4620      	mov	r0, r4
 80099b8:	9207      	str	r2, [sp, #28]
 80099ba:	f000 fa19 	bl	8009df0 <_Bfree>
 80099be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80099c2:	ea43 0102 	orr.w	r1, r3, r2
 80099c6:	9b04      	ldr	r3, [sp, #16]
 80099c8:	430b      	orrs	r3, r1
 80099ca:	464d      	mov	r5, r9
 80099cc:	d10f      	bne.n	80099ee <_dtoa_r+0xa66>
 80099ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099d2:	d02a      	beq.n	8009a2a <_dtoa_r+0xaa2>
 80099d4:	9b03      	ldr	r3, [sp, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dd02      	ble.n	80099e0 <_dtoa_r+0xa58>
 80099da:	9b02      	ldr	r3, [sp, #8]
 80099dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80099e0:	f88b a000 	strb.w	sl, [fp]
 80099e4:	e775      	b.n	80098d2 <_dtoa_r+0x94a>
 80099e6:	4638      	mov	r0, r7
 80099e8:	e7ba      	b.n	8009960 <_dtoa_r+0x9d8>
 80099ea:	2201      	movs	r2, #1
 80099ec:	e7e2      	b.n	80099b4 <_dtoa_r+0xa2c>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	db04      	blt.n	80099fe <_dtoa_r+0xa76>
 80099f4:	9906      	ldr	r1, [sp, #24]
 80099f6:	430b      	orrs	r3, r1
 80099f8:	9904      	ldr	r1, [sp, #16]
 80099fa:	430b      	orrs	r3, r1
 80099fc:	d122      	bne.n	8009a44 <_dtoa_r+0xabc>
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	ddee      	ble.n	80099e0 <_dtoa_r+0xa58>
 8009a02:	ee18 1a10 	vmov	r1, s16
 8009a06:	2201      	movs	r2, #1
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f000 fbc3 	bl	800a194 <__lshift>
 8009a0e:	4631      	mov	r1, r6
 8009a10:	ee08 0a10 	vmov	s16, r0
 8009a14:	f000 fc2e 	bl	800a274 <__mcmp>
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	dc03      	bgt.n	8009a24 <_dtoa_r+0xa9c>
 8009a1c:	d1e0      	bne.n	80099e0 <_dtoa_r+0xa58>
 8009a1e:	f01a 0f01 	tst.w	sl, #1
 8009a22:	d0dd      	beq.n	80099e0 <_dtoa_r+0xa58>
 8009a24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a28:	d1d7      	bne.n	80099da <_dtoa_r+0xa52>
 8009a2a:	2339      	movs	r3, #57	; 0x39
 8009a2c:	f88b 3000 	strb.w	r3, [fp]
 8009a30:	462b      	mov	r3, r5
 8009a32:	461d      	mov	r5, r3
 8009a34:	3b01      	subs	r3, #1
 8009a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a3a:	2a39      	cmp	r2, #57	; 0x39
 8009a3c:	d071      	beq.n	8009b22 <_dtoa_r+0xb9a>
 8009a3e:	3201      	adds	r2, #1
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e746      	b.n	80098d2 <_dtoa_r+0x94a>
 8009a44:	2a00      	cmp	r2, #0
 8009a46:	dd07      	ble.n	8009a58 <_dtoa_r+0xad0>
 8009a48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a4c:	d0ed      	beq.n	8009a2a <_dtoa_r+0xaa2>
 8009a4e:	f10a 0301 	add.w	r3, sl, #1
 8009a52:	f88b 3000 	strb.w	r3, [fp]
 8009a56:	e73c      	b.n	80098d2 <_dtoa_r+0x94a>
 8009a58:	9b05      	ldr	r3, [sp, #20]
 8009a5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009a5e:	4599      	cmp	r9, r3
 8009a60:	d047      	beq.n	8009af2 <_dtoa_r+0xb6a>
 8009a62:	ee18 1a10 	vmov	r1, s16
 8009a66:	2300      	movs	r3, #0
 8009a68:	220a      	movs	r2, #10
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 f9e2 	bl	8009e34 <__multadd>
 8009a70:	45b8      	cmp	r8, r7
 8009a72:	ee08 0a10 	vmov	s16, r0
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	f04f 020a 	mov.w	r2, #10
 8009a7e:	4641      	mov	r1, r8
 8009a80:	4620      	mov	r0, r4
 8009a82:	d106      	bne.n	8009a92 <_dtoa_r+0xb0a>
 8009a84:	f000 f9d6 	bl	8009e34 <__multadd>
 8009a88:	4680      	mov	r8, r0
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	f109 0901 	add.w	r9, r9, #1
 8009a90:	e772      	b.n	8009978 <_dtoa_r+0x9f0>
 8009a92:	f000 f9cf 	bl	8009e34 <__multadd>
 8009a96:	4639      	mov	r1, r7
 8009a98:	4680      	mov	r8, r0
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f000 f9c8 	bl	8009e34 <__multadd>
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	e7f1      	b.n	8009a8c <_dtoa_r+0xb04>
 8009aa8:	9b03      	ldr	r3, [sp, #12]
 8009aaa:	9302      	str	r3, [sp, #8]
 8009aac:	9d01      	ldr	r5, [sp, #4]
 8009aae:	ee18 0a10 	vmov	r0, s16
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	f7ff f9da 	bl	8008e6c <quorem>
 8009ab8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009abc:	9b01      	ldr	r3, [sp, #4]
 8009abe:	f805 ab01 	strb.w	sl, [r5], #1
 8009ac2:	1aea      	subs	r2, r5, r3
 8009ac4:	9b02      	ldr	r3, [sp, #8]
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	dd09      	ble.n	8009ade <_dtoa_r+0xb56>
 8009aca:	ee18 1a10 	vmov	r1, s16
 8009ace:	2300      	movs	r3, #0
 8009ad0:	220a      	movs	r2, #10
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 f9ae 	bl	8009e34 <__multadd>
 8009ad8:	ee08 0a10 	vmov	s16, r0
 8009adc:	e7e7      	b.n	8009aae <_dtoa_r+0xb26>
 8009ade:	9b02      	ldr	r3, [sp, #8]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bfc8      	it	gt
 8009ae4:	461d      	movgt	r5, r3
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	bfd8      	it	le
 8009aea:	2501      	movle	r5, #1
 8009aec:	441d      	add	r5, r3
 8009aee:	f04f 0800 	mov.w	r8, #0
 8009af2:	ee18 1a10 	vmov	r1, s16
 8009af6:	2201      	movs	r2, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fb4b 	bl	800a194 <__lshift>
 8009afe:	4631      	mov	r1, r6
 8009b00:	ee08 0a10 	vmov	s16, r0
 8009b04:	f000 fbb6 	bl	800a274 <__mcmp>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	dc91      	bgt.n	8009a30 <_dtoa_r+0xaa8>
 8009b0c:	d102      	bne.n	8009b14 <_dtoa_r+0xb8c>
 8009b0e:	f01a 0f01 	tst.w	sl, #1
 8009b12:	d18d      	bne.n	8009a30 <_dtoa_r+0xaa8>
 8009b14:	462b      	mov	r3, r5
 8009b16:	461d      	mov	r5, r3
 8009b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b1c:	2a30      	cmp	r2, #48	; 0x30
 8009b1e:	d0fa      	beq.n	8009b16 <_dtoa_r+0xb8e>
 8009b20:	e6d7      	b.n	80098d2 <_dtoa_r+0x94a>
 8009b22:	9a01      	ldr	r2, [sp, #4]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d184      	bne.n	8009a32 <_dtoa_r+0xaaa>
 8009b28:	9b00      	ldr	r3, [sp, #0]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	2331      	movs	r3, #49	; 0x31
 8009b30:	7013      	strb	r3, [r2, #0]
 8009b32:	e6ce      	b.n	80098d2 <_dtoa_r+0x94a>
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <_dtoa_r+0xbd4>)
 8009b36:	f7ff ba95 	b.w	8009064 <_dtoa_r+0xdc>
 8009b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f47f aa6e 	bne.w	800901e <_dtoa_r+0x96>
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <_dtoa_r+0xbd8>)
 8009b44:	f7ff ba8e 	b.w	8009064 <_dtoa_r+0xdc>
 8009b48:	9b02      	ldr	r3, [sp, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dcae      	bgt.n	8009aac <_dtoa_r+0xb24>
 8009b4e:	9b06      	ldr	r3, [sp, #24]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	f73f aea8 	bgt.w	80098a6 <_dtoa_r+0x91e>
 8009b56:	e7a9      	b.n	8009aac <_dtoa_r+0xb24>
 8009b58:	0800b287 	.word	0x0800b287
 8009b5c:	0800b1e4 	.word	0x0800b1e4
 8009b60:	0800b208 	.word	0x0800b208

08009b64 <std>:
 8009b64:	2300      	movs	r3, #0
 8009b66:	b510      	push	{r4, lr}
 8009b68:	4604      	mov	r4, r0
 8009b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b72:	6083      	str	r3, [r0, #8]
 8009b74:	8181      	strh	r1, [r0, #12]
 8009b76:	6643      	str	r3, [r0, #100]	; 0x64
 8009b78:	81c2      	strh	r2, [r0, #14]
 8009b7a:	6183      	str	r3, [r0, #24]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	2208      	movs	r2, #8
 8009b80:	305c      	adds	r0, #92	; 0x5c
 8009b82:	f7fe fce9 	bl	8008558 <memset>
 8009b86:	4b05      	ldr	r3, [pc, #20]	; (8009b9c <std+0x38>)
 8009b88:	6263      	str	r3, [r4, #36]	; 0x24
 8009b8a:	4b05      	ldr	r3, [pc, #20]	; (8009ba0 <std+0x3c>)
 8009b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <std+0x40>)
 8009b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b92:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <std+0x44>)
 8009b94:	6224      	str	r4, [r4, #32]
 8009b96:	6323      	str	r3, [r4, #48]	; 0x30
 8009b98:	bd10      	pop	{r4, pc}
 8009b9a:	bf00      	nop
 8009b9c:	0800a939 	.word	0x0800a939
 8009ba0:	0800a95b 	.word	0x0800a95b
 8009ba4:	0800a993 	.word	0x0800a993
 8009ba8:	0800a9b7 	.word	0x0800a9b7

08009bac <_cleanup_r>:
 8009bac:	4901      	ldr	r1, [pc, #4]	; (8009bb4 <_cleanup_r+0x8>)
 8009bae:	f000 b8af 	b.w	8009d10 <_fwalk_reent>
 8009bb2:	bf00      	nop
 8009bb4:	0800accd 	.word	0x0800accd

08009bb8 <__sfmoreglue>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	2268      	movs	r2, #104	; 0x68
 8009bbc:	1e4d      	subs	r5, r1, #1
 8009bbe:	4355      	muls	r5, r2
 8009bc0:	460e      	mov	r6, r1
 8009bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bc6:	f000 fcd9 	bl	800a57c <_malloc_r>
 8009bca:	4604      	mov	r4, r0
 8009bcc:	b140      	cbz	r0, 8009be0 <__sfmoreglue+0x28>
 8009bce:	2100      	movs	r1, #0
 8009bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8009bd4:	300c      	adds	r0, #12
 8009bd6:	60a0      	str	r0, [r4, #8]
 8009bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bdc:	f7fe fcbc 	bl	8008558 <memset>
 8009be0:	4620      	mov	r0, r4
 8009be2:	bd70      	pop	{r4, r5, r6, pc}

08009be4 <__sfp_lock_acquire>:
 8009be4:	4801      	ldr	r0, [pc, #4]	; (8009bec <__sfp_lock_acquire+0x8>)
 8009be6:	f000 b8b8 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 8009bea:	bf00      	nop
 8009bec:	200013b5 	.word	0x200013b5

08009bf0 <__sfp_lock_release>:
 8009bf0:	4801      	ldr	r0, [pc, #4]	; (8009bf8 <__sfp_lock_release+0x8>)
 8009bf2:	f000 b8b3 	b.w	8009d5c <__retarget_lock_release_recursive>
 8009bf6:	bf00      	nop
 8009bf8:	200013b5 	.word	0x200013b5

08009bfc <__sinit_lock_acquire>:
 8009bfc:	4801      	ldr	r0, [pc, #4]	; (8009c04 <__sinit_lock_acquire+0x8>)
 8009bfe:	f000 b8ac 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 8009c02:	bf00      	nop
 8009c04:	200013b6 	.word	0x200013b6

08009c08 <__sinit_lock_release>:
 8009c08:	4801      	ldr	r0, [pc, #4]	; (8009c10 <__sinit_lock_release+0x8>)
 8009c0a:	f000 b8a7 	b.w	8009d5c <__retarget_lock_release_recursive>
 8009c0e:	bf00      	nop
 8009c10:	200013b6 	.word	0x200013b6

08009c14 <__sinit>:
 8009c14:	b510      	push	{r4, lr}
 8009c16:	4604      	mov	r4, r0
 8009c18:	f7ff fff0 	bl	8009bfc <__sinit_lock_acquire>
 8009c1c:	69a3      	ldr	r3, [r4, #24]
 8009c1e:	b11b      	cbz	r3, 8009c28 <__sinit+0x14>
 8009c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c24:	f7ff bff0 	b.w	8009c08 <__sinit_lock_release>
 8009c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8009c2e:	4b13      	ldr	r3, [pc, #76]	; (8009c7c <__sinit+0x68>)
 8009c30:	4a13      	ldr	r2, [pc, #76]	; (8009c80 <__sinit+0x6c>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c36:	42a3      	cmp	r3, r4
 8009c38:	bf04      	itt	eq
 8009c3a:	2301      	moveq	r3, #1
 8009c3c:	61a3      	streq	r3, [r4, #24]
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 f820 	bl	8009c84 <__sfp>
 8009c44:	6060      	str	r0, [r4, #4]
 8009c46:	4620      	mov	r0, r4
 8009c48:	f000 f81c 	bl	8009c84 <__sfp>
 8009c4c:	60a0      	str	r0, [r4, #8]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 f818 	bl	8009c84 <__sfp>
 8009c54:	2200      	movs	r2, #0
 8009c56:	60e0      	str	r0, [r4, #12]
 8009c58:	2104      	movs	r1, #4
 8009c5a:	6860      	ldr	r0, [r4, #4]
 8009c5c:	f7ff ff82 	bl	8009b64 <std>
 8009c60:	68a0      	ldr	r0, [r4, #8]
 8009c62:	2201      	movs	r2, #1
 8009c64:	2109      	movs	r1, #9
 8009c66:	f7ff ff7d 	bl	8009b64 <std>
 8009c6a:	68e0      	ldr	r0, [r4, #12]
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	2112      	movs	r1, #18
 8009c70:	f7ff ff78 	bl	8009b64 <std>
 8009c74:	2301      	movs	r3, #1
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	e7d2      	b.n	8009c20 <__sinit+0xc>
 8009c7a:	bf00      	nop
 8009c7c:	0800b1d0 	.word	0x0800b1d0
 8009c80:	08009bad 	.word	0x08009bad

08009c84 <__sfp>:
 8009c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c86:	4607      	mov	r7, r0
 8009c88:	f7ff ffac 	bl	8009be4 <__sfp_lock_acquire>
 8009c8c:	4b1e      	ldr	r3, [pc, #120]	; (8009d08 <__sfp+0x84>)
 8009c8e:	681e      	ldr	r6, [r3, #0]
 8009c90:	69b3      	ldr	r3, [r6, #24]
 8009c92:	b913      	cbnz	r3, 8009c9a <__sfp+0x16>
 8009c94:	4630      	mov	r0, r6
 8009c96:	f7ff ffbd 	bl	8009c14 <__sinit>
 8009c9a:	3648      	adds	r6, #72	; 0x48
 8009c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	d503      	bpl.n	8009cac <__sfp+0x28>
 8009ca4:	6833      	ldr	r3, [r6, #0]
 8009ca6:	b30b      	cbz	r3, 8009cec <__sfp+0x68>
 8009ca8:	6836      	ldr	r6, [r6, #0]
 8009caa:	e7f7      	b.n	8009c9c <__sfp+0x18>
 8009cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cb0:	b9d5      	cbnz	r5, 8009ce8 <__sfp+0x64>
 8009cb2:	4b16      	ldr	r3, [pc, #88]	; (8009d0c <__sfp+0x88>)
 8009cb4:	60e3      	str	r3, [r4, #12]
 8009cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cba:	6665      	str	r5, [r4, #100]	; 0x64
 8009cbc:	f000 f84c 	bl	8009d58 <__retarget_lock_init_recursive>
 8009cc0:	f7ff ff96 	bl	8009bf0 <__sfp_lock_release>
 8009cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ccc:	6025      	str	r5, [r4, #0]
 8009cce:	61a5      	str	r5, [r4, #24]
 8009cd0:	2208      	movs	r2, #8
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cd8:	f7fe fc3e 	bl	8008558 <memset>
 8009cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ce8:	3468      	adds	r4, #104	; 0x68
 8009cea:	e7d9      	b.n	8009ca0 <__sfp+0x1c>
 8009cec:	2104      	movs	r1, #4
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7ff ff62 	bl	8009bb8 <__sfmoreglue>
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	6030      	str	r0, [r6, #0]
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d1d5      	bne.n	8009ca8 <__sfp+0x24>
 8009cfc:	f7ff ff78 	bl	8009bf0 <__sfp_lock_release>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	e7ee      	b.n	8009ce4 <__sfp+0x60>
 8009d06:	bf00      	nop
 8009d08:	0800b1d0 	.word	0x0800b1d0
 8009d0c:	ffff0001 	.word	0xffff0001

08009d10 <_fwalk_reent>:
 8009d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d14:	4606      	mov	r6, r0
 8009d16:	4688      	mov	r8, r1
 8009d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d1c:	2700      	movs	r7, #0
 8009d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d22:	f1b9 0901 	subs.w	r9, r9, #1
 8009d26:	d505      	bpl.n	8009d34 <_fwalk_reent+0x24>
 8009d28:	6824      	ldr	r4, [r4, #0]
 8009d2a:	2c00      	cmp	r4, #0
 8009d2c:	d1f7      	bne.n	8009d1e <_fwalk_reent+0xe>
 8009d2e:	4638      	mov	r0, r7
 8009d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d34:	89ab      	ldrh	r3, [r5, #12]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d907      	bls.n	8009d4a <_fwalk_reent+0x3a>
 8009d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	d003      	beq.n	8009d4a <_fwalk_reent+0x3a>
 8009d42:	4629      	mov	r1, r5
 8009d44:	4630      	mov	r0, r6
 8009d46:	47c0      	blx	r8
 8009d48:	4307      	orrs	r7, r0
 8009d4a:	3568      	adds	r5, #104	; 0x68
 8009d4c:	e7e9      	b.n	8009d22 <_fwalk_reent+0x12>
	...

08009d50 <_localeconv_r>:
 8009d50:	4800      	ldr	r0, [pc, #0]	; (8009d54 <_localeconv_r+0x4>)
 8009d52:	4770      	bx	lr
 8009d54:	200001e8 	.word	0x200001e8

08009d58 <__retarget_lock_init_recursive>:
 8009d58:	4770      	bx	lr

08009d5a <__retarget_lock_acquire_recursive>:
 8009d5a:	4770      	bx	lr

08009d5c <__retarget_lock_release_recursive>:
 8009d5c:	4770      	bx	lr
	...

08009d60 <malloc>:
 8009d60:	4b02      	ldr	r3, [pc, #8]	; (8009d6c <malloc+0xc>)
 8009d62:	4601      	mov	r1, r0
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f000 bc09 	b.w	800a57c <_malloc_r>
 8009d6a:	bf00      	nop
 8009d6c:	20000094 	.word	0x20000094

08009d70 <_Balloc>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009d74:	4604      	mov	r4, r0
 8009d76:	460d      	mov	r5, r1
 8009d78:	b976      	cbnz	r6, 8009d98 <_Balloc+0x28>
 8009d7a:	2010      	movs	r0, #16
 8009d7c:	f7ff fff0 	bl	8009d60 <malloc>
 8009d80:	4602      	mov	r2, r0
 8009d82:	6260      	str	r0, [r4, #36]	; 0x24
 8009d84:	b920      	cbnz	r0, 8009d90 <_Balloc+0x20>
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <_Balloc+0x78>)
 8009d88:	4818      	ldr	r0, [pc, #96]	; (8009dec <_Balloc+0x7c>)
 8009d8a:	2166      	movs	r1, #102	; 0x66
 8009d8c:	f000 feea 	bl	800ab64 <__assert_func>
 8009d90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d94:	6006      	str	r6, [r0, #0]
 8009d96:	60c6      	str	r6, [r0, #12]
 8009d98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d9a:	68f3      	ldr	r3, [r6, #12]
 8009d9c:	b183      	cbz	r3, 8009dc0 <_Balloc+0x50>
 8009d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009da6:	b9b8      	cbnz	r0, 8009dd8 <_Balloc+0x68>
 8009da8:	2101      	movs	r1, #1
 8009daa:	fa01 f605 	lsl.w	r6, r1, r5
 8009dae:	1d72      	adds	r2, r6, #5
 8009db0:	0092      	lsls	r2, r2, #2
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 fb60 	bl	800a478 <_calloc_r>
 8009db8:	b160      	cbz	r0, 8009dd4 <_Balloc+0x64>
 8009dba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dbe:	e00e      	b.n	8009dde <_Balloc+0x6e>
 8009dc0:	2221      	movs	r2, #33	; 0x21
 8009dc2:	2104      	movs	r1, #4
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	f000 fb57 	bl	800a478 <_calloc_r>
 8009dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dcc:	60f0      	str	r0, [r6, #12]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1e4      	bne.n	8009d9e <_Balloc+0x2e>
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	bd70      	pop	{r4, r5, r6, pc}
 8009dd8:	6802      	ldr	r2, [r0, #0]
 8009dda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dde:	2300      	movs	r3, #0
 8009de0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009de4:	e7f7      	b.n	8009dd6 <_Balloc+0x66>
 8009de6:	bf00      	nop
 8009de8:	0800b215 	.word	0x0800b215
 8009dec:	0800b2f8 	.word	0x0800b2f8

08009df0 <_Bfree>:
 8009df0:	b570      	push	{r4, r5, r6, lr}
 8009df2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b976      	cbnz	r6, 8009e18 <_Bfree+0x28>
 8009dfa:	2010      	movs	r0, #16
 8009dfc:	f7ff ffb0 	bl	8009d60 <malloc>
 8009e00:	4602      	mov	r2, r0
 8009e02:	6268      	str	r0, [r5, #36]	; 0x24
 8009e04:	b920      	cbnz	r0, 8009e10 <_Bfree+0x20>
 8009e06:	4b09      	ldr	r3, [pc, #36]	; (8009e2c <_Bfree+0x3c>)
 8009e08:	4809      	ldr	r0, [pc, #36]	; (8009e30 <_Bfree+0x40>)
 8009e0a:	218a      	movs	r1, #138	; 0x8a
 8009e0c:	f000 feaa 	bl	800ab64 <__assert_func>
 8009e10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e14:	6006      	str	r6, [r0, #0]
 8009e16:	60c6      	str	r6, [r0, #12]
 8009e18:	b13c      	cbz	r4, 8009e2a <_Bfree+0x3a>
 8009e1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009e1c:	6862      	ldr	r2, [r4, #4]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e24:	6021      	str	r1, [r4, #0]
 8009e26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	0800b215 	.word	0x0800b215
 8009e30:	0800b2f8 	.word	0x0800b2f8

08009e34 <__multadd>:
 8009e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e38:	690d      	ldr	r5, [r1, #16]
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	461e      	mov	r6, r3
 8009e40:	f101 0c14 	add.w	ip, r1, #20
 8009e44:	2000      	movs	r0, #0
 8009e46:	f8dc 3000 	ldr.w	r3, [ip]
 8009e4a:	b299      	uxth	r1, r3
 8009e4c:	fb02 6101 	mla	r1, r2, r1, r6
 8009e50:	0c1e      	lsrs	r6, r3, #16
 8009e52:	0c0b      	lsrs	r3, r1, #16
 8009e54:	fb02 3306 	mla	r3, r2, r6, r3
 8009e58:	b289      	uxth	r1, r1
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e60:	4285      	cmp	r5, r0
 8009e62:	f84c 1b04 	str.w	r1, [ip], #4
 8009e66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e6a:	dcec      	bgt.n	8009e46 <__multadd+0x12>
 8009e6c:	b30e      	cbz	r6, 8009eb2 <__multadd+0x7e>
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	42ab      	cmp	r3, r5
 8009e72:	dc19      	bgt.n	8009ea8 <__multadd+0x74>
 8009e74:	6861      	ldr	r1, [r4, #4]
 8009e76:	4638      	mov	r0, r7
 8009e78:	3101      	adds	r1, #1
 8009e7a:	f7ff ff79 	bl	8009d70 <_Balloc>
 8009e7e:	4680      	mov	r8, r0
 8009e80:	b928      	cbnz	r0, 8009e8e <__multadd+0x5a>
 8009e82:	4602      	mov	r2, r0
 8009e84:	4b0c      	ldr	r3, [pc, #48]	; (8009eb8 <__multadd+0x84>)
 8009e86:	480d      	ldr	r0, [pc, #52]	; (8009ebc <__multadd+0x88>)
 8009e88:	21b5      	movs	r1, #181	; 0xb5
 8009e8a:	f000 fe6b 	bl	800ab64 <__assert_func>
 8009e8e:	6922      	ldr	r2, [r4, #16]
 8009e90:	3202      	adds	r2, #2
 8009e92:	f104 010c 	add.w	r1, r4, #12
 8009e96:	0092      	lsls	r2, r2, #2
 8009e98:	300c      	adds	r0, #12
 8009e9a:	f7fe fb4f 	bl	800853c <memcpy>
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7ff ffa5 	bl	8009df0 <_Bfree>
 8009ea6:	4644      	mov	r4, r8
 8009ea8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009eac:	3501      	adds	r5, #1
 8009eae:	615e      	str	r6, [r3, #20]
 8009eb0:	6125      	str	r5, [r4, #16]
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	0800b287 	.word	0x0800b287
 8009ebc:	0800b2f8 	.word	0x0800b2f8

08009ec0 <__hi0bits>:
 8009ec0:	0c03      	lsrs	r3, r0, #16
 8009ec2:	041b      	lsls	r3, r3, #16
 8009ec4:	b9d3      	cbnz	r3, 8009efc <__hi0bits+0x3c>
 8009ec6:	0400      	lsls	r0, r0, #16
 8009ec8:	2310      	movs	r3, #16
 8009eca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009ece:	bf04      	itt	eq
 8009ed0:	0200      	lsleq	r0, r0, #8
 8009ed2:	3308      	addeq	r3, #8
 8009ed4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ed8:	bf04      	itt	eq
 8009eda:	0100      	lsleq	r0, r0, #4
 8009edc:	3304      	addeq	r3, #4
 8009ede:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ee2:	bf04      	itt	eq
 8009ee4:	0080      	lsleq	r0, r0, #2
 8009ee6:	3302      	addeq	r3, #2
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	db05      	blt.n	8009ef8 <__hi0bits+0x38>
 8009eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009ef0:	f103 0301 	add.w	r3, r3, #1
 8009ef4:	bf08      	it	eq
 8009ef6:	2320      	moveq	r3, #32
 8009ef8:	4618      	mov	r0, r3
 8009efa:	4770      	bx	lr
 8009efc:	2300      	movs	r3, #0
 8009efe:	e7e4      	b.n	8009eca <__hi0bits+0xa>

08009f00 <__lo0bits>:
 8009f00:	6803      	ldr	r3, [r0, #0]
 8009f02:	f013 0207 	ands.w	r2, r3, #7
 8009f06:	4601      	mov	r1, r0
 8009f08:	d00b      	beq.n	8009f22 <__lo0bits+0x22>
 8009f0a:	07da      	lsls	r2, r3, #31
 8009f0c:	d423      	bmi.n	8009f56 <__lo0bits+0x56>
 8009f0e:	0798      	lsls	r0, r3, #30
 8009f10:	bf49      	itett	mi
 8009f12:	085b      	lsrmi	r3, r3, #1
 8009f14:	089b      	lsrpl	r3, r3, #2
 8009f16:	2001      	movmi	r0, #1
 8009f18:	600b      	strmi	r3, [r1, #0]
 8009f1a:	bf5c      	itt	pl
 8009f1c:	600b      	strpl	r3, [r1, #0]
 8009f1e:	2002      	movpl	r0, #2
 8009f20:	4770      	bx	lr
 8009f22:	b298      	uxth	r0, r3
 8009f24:	b9a8      	cbnz	r0, 8009f52 <__lo0bits+0x52>
 8009f26:	0c1b      	lsrs	r3, r3, #16
 8009f28:	2010      	movs	r0, #16
 8009f2a:	b2da      	uxtb	r2, r3
 8009f2c:	b90a      	cbnz	r2, 8009f32 <__lo0bits+0x32>
 8009f2e:	3008      	adds	r0, #8
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	071a      	lsls	r2, r3, #28
 8009f34:	bf04      	itt	eq
 8009f36:	091b      	lsreq	r3, r3, #4
 8009f38:	3004      	addeq	r0, #4
 8009f3a:	079a      	lsls	r2, r3, #30
 8009f3c:	bf04      	itt	eq
 8009f3e:	089b      	lsreq	r3, r3, #2
 8009f40:	3002      	addeq	r0, #2
 8009f42:	07da      	lsls	r2, r3, #31
 8009f44:	d403      	bmi.n	8009f4e <__lo0bits+0x4e>
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	f100 0001 	add.w	r0, r0, #1
 8009f4c:	d005      	beq.n	8009f5a <__lo0bits+0x5a>
 8009f4e:	600b      	str	r3, [r1, #0]
 8009f50:	4770      	bx	lr
 8009f52:	4610      	mov	r0, r2
 8009f54:	e7e9      	b.n	8009f2a <__lo0bits+0x2a>
 8009f56:	2000      	movs	r0, #0
 8009f58:	4770      	bx	lr
 8009f5a:	2020      	movs	r0, #32
 8009f5c:	4770      	bx	lr
	...

08009f60 <__i2b>:
 8009f60:	b510      	push	{r4, lr}
 8009f62:	460c      	mov	r4, r1
 8009f64:	2101      	movs	r1, #1
 8009f66:	f7ff ff03 	bl	8009d70 <_Balloc>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	b928      	cbnz	r0, 8009f7a <__i2b+0x1a>
 8009f6e:	4b05      	ldr	r3, [pc, #20]	; (8009f84 <__i2b+0x24>)
 8009f70:	4805      	ldr	r0, [pc, #20]	; (8009f88 <__i2b+0x28>)
 8009f72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009f76:	f000 fdf5 	bl	800ab64 <__assert_func>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	6144      	str	r4, [r0, #20]
 8009f7e:	6103      	str	r3, [r0, #16]
 8009f80:	bd10      	pop	{r4, pc}
 8009f82:	bf00      	nop
 8009f84:	0800b287 	.word	0x0800b287
 8009f88:	0800b2f8 	.word	0x0800b2f8

08009f8c <__multiply>:
 8009f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f90:	4691      	mov	r9, r2
 8009f92:	690a      	ldr	r2, [r1, #16]
 8009f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	bfb8      	it	lt
 8009f9c:	460b      	movlt	r3, r1
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	bfbc      	itt	lt
 8009fa2:	464c      	movlt	r4, r9
 8009fa4:	4699      	movlt	r9, r3
 8009fa6:	6927      	ldr	r7, [r4, #16]
 8009fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fac:	68a3      	ldr	r3, [r4, #8]
 8009fae:	6861      	ldr	r1, [r4, #4]
 8009fb0:	eb07 060a 	add.w	r6, r7, sl
 8009fb4:	42b3      	cmp	r3, r6
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	bfb8      	it	lt
 8009fba:	3101      	addlt	r1, #1
 8009fbc:	f7ff fed8 	bl	8009d70 <_Balloc>
 8009fc0:	b930      	cbnz	r0, 8009fd0 <__multiply+0x44>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	4b44      	ldr	r3, [pc, #272]	; (800a0d8 <__multiply+0x14c>)
 8009fc6:	4845      	ldr	r0, [pc, #276]	; (800a0dc <__multiply+0x150>)
 8009fc8:	f240 115d 	movw	r1, #349	; 0x15d
 8009fcc:	f000 fdca 	bl	800ab64 <__assert_func>
 8009fd0:	f100 0514 	add.w	r5, r0, #20
 8009fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009fd8:	462b      	mov	r3, r5
 8009fda:	2200      	movs	r2, #0
 8009fdc:	4543      	cmp	r3, r8
 8009fde:	d321      	bcc.n	800a024 <__multiply+0x98>
 8009fe0:	f104 0314 	add.w	r3, r4, #20
 8009fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009fe8:	f109 0314 	add.w	r3, r9, #20
 8009fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009ff0:	9202      	str	r2, [sp, #8]
 8009ff2:	1b3a      	subs	r2, r7, r4
 8009ff4:	3a15      	subs	r2, #21
 8009ff6:	f022 0203 	bic.w	r2, r2, #3
 8009ffa:	3204      	adds	r2, #4
 8009ffc:	f104 0115 	add.w	r1, r4, #21
 800a000:	428f      	cmp	r7, r1
 800a002:	bf38      	it	cc
 800a004:	2204      	movcc	r2, #4
 800a006:	9201      	str	r2, [sp, #4]
 800a008:	9a02      	ldr	r2, [sp, #8]
 800a00a:	9303      	str	r3, [sp, #12]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d80c      	bhi.n	800a02a <__multiply+0x9e>
 800a010:	2e00      	cmp	r6, #0
 800a012:	dd03      	ble.n	800a01c <__multiply+0x90>
 800a014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d05a      	beq.n	800a0d2 <__multiply+0x146>
 800a01c:	6106      	str	r6, [r0, #16]
 800a01e:	b005      	add	sp, #20
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	f843 2b04 	str.w	r2, [r3], #4
 800a028:	e7d8      	b.n	8009fdc <__multiply+0x50>
 800a02a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a02e:	f1ba 0f00 	cmp.w	sl, #0
 800a032:	d024      	beq.n	800a07e <__multiply+0xf2>
 800a034:	f104 0e14 	add.w	lr, r4, #20
 800a038:	46a9      	mov	r9, r5
 800a03a:	f04f 0c00 	mov.w	ip, #0
 800a03e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a042:	f8d9 1000 	ldr.w	r1, [r9]
 800a046:	fa1f fb82 	uxth.w	fp, r2
 800a04a:	b289      	uxth	r1, r1
 800a04c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a054:	f8d9 2000 	ldr.w	r2, [r9]
 800a058:	4461      	add	r1, ip
 800a05a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a05e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a066:	b289      	uxth	r1, r1
 800a068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a06c:	4577      	cmp	r7, lr
 800a06e:	f849 1b04 	str.w	r1, [r9], #4
 800a072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a076:	d8e2      	bhi.n	800a03e <__multiply+0xb2>
 800a078:	9a01      	ldr	r2, [sp, #4]
 800a07a:	f845 c002 	str.w	ip, [r5, r2]
 800a07e:	9a03      	ldr	r2, [sp, #12]
 800a080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a084:	3304      	adds	r3, #4
 800a086:	f1b9 0f00 	cmp.w	r9, #0
 800a08a:	d020      	beq.n	800a0ce <__multiply+0x142>
 800a08c:	6829      	ldr	r1, [r5, #0]
 800a08e:	f104 0c14 	add.w	ip, r4, #20
 800a092:	46ae      	mov	lr, r5
 800a094:	f04f 0a00 	mov.w	sl, #0
 800a098:	f8bc b000 	ldrh.w	fp, [ip]
 800a09c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0a0:	fb09 220b 	mla	r2, r9, fp, r2
 800a0a4:	4492      	add	sl, r2
 800a0a6:	b289      	uxth	r1, r1
 800a0a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a0ac:	f84e 1b04 	str.w	r1, [lr], #4
 800a0b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a0b8:	0c12      	lsrs	r2, r2, #16
 800a0ba:	fb09 1102 	mla	r1, r9, r2, r1
 800a0be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a0c2:	4567      	cmp	r7, ip
 800a0c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0c8:	d8e6      	bhi.n	800a098 <__multiply+0x10c>
 800a0ca:	9a01      	ldr	r2, [sp, #4]
 800a0cc:	50a9      	str	r1, [r5, r2]
 800a0ce:	3504      	adds	r5, #4
 800a0d0:	e79a      	b.n	800a008 <__multiply+0x7c>
 800a0d2:	3e01      	subs	r6, #1
 800a0d4:	e79c      	b.n	800a010 <__multiply+0x84>
 800a0d6:	bf00      	nop
 800a0d8:	0800b287 	.word	0x0800b287
 800a0dc:	0800b2f8 	.word	0x0800b2f8

0800a0e0 <__pow5mult>:
 800a0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0e4:	4615      	mov	r5, r2
 800a0e6:	f012 0203 	ands.w	r2, r2, #3
 800a0ea:	4606      	mov	r6, r0
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	d007      	beq.n	800a100 <__pow5mult+0x20>
 800a0f0:	4c25      	ldr	r4, [pc, #148]	; (800a188 <__pow5mult+0xa8>)
 800a0f2:	3a01      	subs	r2, #1
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a0fa:	f7ff fe9b 	bl	8009e34 <__multadd>
 800a0fe:	4607      	mov	r7, r0
 800a100:	10ad      	asrs	r5, r5, #2
 800a102:	d03d      	beq.n	800a180 <__pow5mult+0xa0>
 800a104:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a106:	b97c      	cbnz	r4, 800a128 <__pow5mult+0x48>
 800a108:	2010      	movs	r0, #16
 800a10a:	f7ff fe29 	bl	8009d60 <malloc>
 800a10e:	4602      	mov	r2, r0
 800a110:	6270      	str	r0, [r6, #36]	; 0x24
 800a112:	b928      	cbnz	r0, 800a120 <__pow5mult+0x40>
 800a114:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <__pow5mult+0xac>)
 800a116:	481e      	ldr	r0, [pc, #120]	; (800a190 <__pow5mult+0xb0>)
 800a118:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a11c:	f000 fd22 	bl	800ab64 <__assert_func>
 800a120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a124:	6004      	str	r4, [r0, #0]
 800a126:	60c4      	str	r4, [r0, #12]
 800a128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a130:	b94c      	cbnz	r4, 800a146 <__pow5mult+0x66>
 800a132:	f240 2171 	movw	r1, #625	; 0x271
 800a136:	4630      	mov	r0, r6
 800a138:	f7ff ff12 	bl	8009f60 <__i2b>
 800a13c:	2300      	movs	r3, #0
 800a13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a142:	4604      	mov	r4, r0
 800a144:	6003      	str	r3, [r0, #0]
 800a146:	f04f 0900 	mov.w	r9, #0
 800a14a:	07eb      	lsls	r3, r5, #31
 800a14c:	d50a      	bpl.n	800a164 <__pow5mult+0x84>
 800a14e:	4639      	mov	r1, r7
 800a150:	4622      	mov	r2, r4
 800a152:	4630      	mov	r0, r6
 800a154:	f7ff ff1a 	bl	8009f8c <__multiply>
 800a158:	4639      	mov	r1, r7
 800a15a:	4680      	mov	r8, r0
 800a15c:	4630      	mov	r0, r6
 800a15e:	f7ff fe47 	bl	8009df0 <_Bfree>
 800a162:	4647      	mov	r7, r8
 800a164:	106d      	asrs	r5, r5, #1
 800a166:	d00b      	beq.n	800a180 <__pow5mult+0xa0>
 800a168:	6820      	ldr	r0, [r4, #0]
 800a16a:	b938      	cbnz	r0, 800a17c <__pow5mult+0x9c>
 800a16c:	4622      	mov	r2, r4
 800a16e:	4621      	mov	r1, r4
 800a170:	4630      	mov	r0, r6
 800a172:	f7ff ff0b 	bl	8009f8c <__multiply>
 800a176:	6020      	str	r0, [r4, #0]
 800a178:	f8c0 9000 	str.w	r9, [r0]
 800a17c:	4604      	mov	r4, r0
 800a17e:	e7e4      	b.n	800a14a <__pow5mult+0x6a>
 800a180:	4638      	mov	r0, r7
 800a182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a186:	bf00      	nop
 800a188:	0800b448 	.word	0x0800b448
 800a18c:	0800b215 	.word	0x0800b215
 800a190:	0800b2f8 	.word	0x0800b2f8

0800a194 <__lshift>:
 800a194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a198:	460c      	mov	r4, r1
 800a19a:	6849      	ldr	r1, [r1, #4]
 800a19c:	6923      	ldr	r3, [r4, #16]
 800a19e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1a2:	68a3      	ldr	r3, [r4, #8]
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	4691      	mov	r9, r2
 800a1a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1ac:	f108 0601 	add.w	r6, r8, #1
 800a1b0:	42b3      	cmp	r3, r6
 800a1b2:	db0b      	blt.n	800a1cc <__lshift+0x38>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	f7ff fddb 	bl	8009d70 <_Balloc>
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	b948      	cbnz	r0, 800a1d2 <__lshift+0x3e>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	4b2a      	ldr	r3, [pc, #168]	; (800a26c <__lshift+0xd8>)
 800a1c2:	482b      	ldr	r0, [pc, #172]	; (800a270 <__lshift+0xdc>)
 800a1c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a1c8:	f000 fccc 	bl	800ab64 <__assert_func>
 800a1cc:	3101      	adds	r1, #1
 800a1ce:	005b      	lsls	r3, r3, #1
 800a1d0:	e7ee      	b.n	800a1b0 <__lshift+0x1c>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f100 0114 	add.w	r1, r0, #20
 800a1d8:	f100 0210 	add.w	r2, r0, #16
 800a1dc:	4618      	mov	r0, r3
 800a1de:	4553      	cmp	r3, sl
 800a1e0:	db37      	blt.n	800a252 <__lshift+0xbe>
 800a1e2:	6920      	ldr	r0, [r4, #16]
 800a1e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1e8:	f104 0314 	add.w	r3, r4, #20
 800a1ec:	f019 091f 	ands.w	r9, r9, #31
 800a1f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a1f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a1f8:	d02f      	beq.n	800a25a <__lshift+0xc6>
 800a1fa:	f1c9 0e20 	rsb	lr, r9, #32
 800a1fe:	468a      	mov	sl, r1
 800a200:	f04f 0c00 	mov.w	ip, #0
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	fa02 f209 	lsl.w	r2, r2, r9
 800a20a:	ea42 020c 	orr.w	r2, r2, ip
 800a20e:	f84a 2b04 	str.w	r2, [sl], #4
 800a212:	f853 2b04 	ldr.w	r2, [r3], #4
 800a216:	4298      	cmp	r0, r3
 800a218:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a21c:	d8f2      	bhi.n	800a204 <__lshift+0x70>
 800a21e:	1b03      	subs	r3, r0, r4
 800a220:	3b15      	subs	r3, #21
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	3304      	adds	r3, #4
 800a228:	f104 0215 	add.w	r2, r4, #21
 800a22c:	4290      	cmp	r0, r2
 800a22e:	bf38      	it	cc
 800a230:	2304      	movcc	r3, #4
 800a232:	f841 c003 	str.w	ip, [r1, r3]
 800a236:	f1bc 0f00 	cmp.w	ip, #0
 800a23a:	d001      	beq.n	800a240 <__lshift+0xac>
 800a23c:	f108 0602 	add.w	r6, r8, #2
 800a240:	3e01      	subs	r6, #1
 800a242:	4638      	mov	r0, r7
 800a244:	612e      	str	r6, [r5, #16]
 800a246:	4621      	mov	r1, r4
 800a248:	f7ff fdd2 	bl	8009df0 <_Bfree>
 800a24c:	4628      	mov	r0, r5
 800a24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a252:	f842 0f04 	str.w	r0, [r2, #4]!
 800a256:	3301      	adds	r3, #1
 800a258:	e7c1      	b.n	800a1de <__lshift+0x4a>
 800a25a:	3904      	subs	r1, #4
 800a25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a260:	f841 2f04 	str.w	r2, [r1, #4]!
 800a264:	4298      	cmp	r0, r3
 800a266:	d8f9      	bhi.n	800a25c <__lshift+0xc8>
 800a268:	e7ea      	b.n	800a240 <__lshift+0xac>
 800a26a:	bf00      	nop
 800a26c:	0800b287 	.word	0x0800b287
 800a270:	0800b2f8 	.word	0x0800b2f8

0800a274 <__mcmp>:
 800a274:	b530      	push	{r4, r5, lr}
 800a276:	6902      	ldr	r2, [r0, #16]
 800a278:	690c      	ldr	r4, [r1, #16]
 800a27a:	1b12      	subs	r2, r2, r4
 800a27c:	d10e      	bne.n	800a29c <__mcmp+0x28>
 800a27e:	f100 0314 	add.w	r3, r0, #20
 800a282:	3114      	adds	r1, #20
 800a284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a28c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a294:	42a5      	cmp	r5, r4
 800a296:	d003      	beq.n	800a2a0 <__mcmp+0x2c>
 800a298:	d305      	bcc.n	800a2a6 <__mcmp+0x32>
 800a29a:	2201      	movs	r2, #1
 800a29c:	4610      	mov	r0, r2
 800a29e:	bd30      	pop	{r4, r5, pc}
 800a2a0:	4283      	cmp	r3, r0
 800a2a2:	d3f3      	bcc.n	800a28c <__mcmp+0x18>
 800a2a4:	e7fa      	b.n	800a29c <__mcmp+0x28>
 800a2a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2aa:	e7f7      	b.n	800a29c <__mcmp+0x28>

0800a2ac <__mdiff>:
 800a2ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	460c      	mov	r4, r1
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4690      	mov	r8, r2
 800a2ba:	f7ff ffdb 	bl	800a274 <__mcmp>
 800a2be:	1e05      	subs	r5, r0, #0
 800a2c0:	d110      	bne.n	800a2e4 <__mdiff+0x38>
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff fd53 	bl	8009d70 <_Balloc>
 800a2ca:	b930      	cbnz	r0, 800a2da <__mdiff+0x2e>
 800a2cc:	4b3a      	ldr	r3, [pc, #232]	; (800a3b8 <__mdiff+0x10c>)
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	f240 2132 	movw	r1, #562	; 0x232
 800a2d4:	4839      	ldr	r0, [pc, #228]	; (800a3bc <__mdiff+0x110>)
 800a2d6:	f000 fc45 	bl	800ab64 <__assert_func>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a2e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e4:	bfa4      	itt	ge
 800a2e6:	4643      	movge	r3, r8
 800a2e8:	46a0      	movge	r8, r4
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a2f0:	bfa6      	itte	ge
 800a2f2:	461c      	movge	r4, r3
 800a2f4:	2500      	movge	r5, #0
 800a2f6:	2501      	movlt	r5, #1
 800a2f8:	f7ff fd3a 	bl	8009d70 <_Balloc>
 800a2fc:	b920      	cbnz	r0, 800a308 <__mdiff+0x5c>
 800a2fe:	4b2e      	ldr	r3, [pc, #184]	; (800a3b8 <__mdiff+0x10c>)
 800a300:	4602      	mov	r2, r0
 800a302:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a306:	e7e5      	b.n	800a2d4 <__mdiff+0x28>
 800a308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a30c:	6926      	ldr	r6, [r4, #16]
 800a30e:	60c5      	str	r5, [r0, #12]
 800a310:	f104 0914 	add.w	r9, r4, #20
 800a314:	f108 0514 	add.w	r5, r8, #20
 800a318:	f100 0e14 	add.w	lr, r0, #20
 800a31c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a324:	f108 0210 	add.w	r2, r8, #16
 800a328:	46f2      	mov	sl, lr
 800a32a:	2100      	movs	r1, #0
 800a32c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a334:	fa1f f883 	uxth.w	r8, r3
 800a338:	fa11 f18b 	uxtah	r1, r1, fp
 800a33c:	0c1b      	lsrs	r3, r3, #16
 800a33e:	eba1 0808 	sub.w	r8, r1, r8
 800a342:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a346:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a34a:	fa1f f888 	uxth.w	r8, r8
 800a34e:	1419      	asrs	r1, r3, #16
 800a350:	454e      	cmp	r6, r9
 800a352:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a356:	f84a 3b04 	str.w	r3, [sl], #4
 800a35a:	d8e7      	bhi.n	800a32c <__mdiff+0x80>
 800a35c:	1b33      	subs	r3, r6, r4
 800a35e:	3b15      	subs	r3, #21
 800a360:	f023 0303 	bic.w	r3, r3, #3
 800a364:	3304      	adds	r3, #4
 800a366:	3415      	adds	r4, #21
 800a368:	42a6      	cmp	r6, r4
 800a36a:	bf38      	it	cc
 800a36c:	2304      	movcc	r3, #4
 800a36e:	441d      	add	r5, r3
 800a370:	4473      	add	r3, lr
 800a372:	469e      	mov	lr, r3
 800a374:	462e      	mov	r6, r5
 800a376:	4566      	cmp	r6, ip
 800a378:	d30e      	bcc.n	800a398 <__mdiff+0xec>
 800a37a:	f10c 0203 	add.w	r2, ip, #3
 800a37e:	1b52      	subs	r2, r2, r5
 800a380:	f022 0203 	bic.w	r2, r2, #3
 800a384:	3d03      	subs	r5, #3
 800a386:	45ac      	cmp	ip, r5
 800a388:	bf38      	it	cc
 800a38a:	2200      	movcc	r2, #0
 800a38c:	441a      	add	r2, r3
 800a38e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a392:	b17b      	cbz	r3, 800a3b4 <__mdiff+0x108>
 800a394:	6107      	str	r7, [r0, #16]
 800a396:	e7a3      	b.n	800a2e0 <__mdiff+0x34>
 800a398:	f856 8b04 	ldr.w	r8, [r6], #4
 800a39c:	fa11 f288 	uxtah	r2, r1, r8
 800a3a0:	1414      	asrs	r4, r2, #16
 800a3a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3a6:	b292      	uxth	r2, r2
 800a3a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3ac:	f84e 2b04 	str.w	r2, [lr], #4
 800a3b0:	1421      	asrs	r1, r4, #16
 800a3b2:	e7e0      	b.n	800a376 <__mdiff+0xca>
 800a3b4:	3f01      	subs	r7, #1
 800a3b6:	e7ea      	b.n	800a38e <__mdiff+0xe2>
 800a3b8:	0800b287 	.word	0x0800b287
 800a3bc:	0800b2f8 	.word	0x0800b2f8

0800a3c0 <__d2b>:
 800a3c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	ec57 6b10 	vmov	r6, r7, d0
 800a3cc:	4690      	mov	r8, r2
 800a3ce:	f7ff fccf 	bl	8009d70 <_Balloc>
 800a3d2:	4604      	mov	r4, r0
 800a3d4:	b930      	cbnz	r0, 800a3e4 <__d2b+0x24>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b25      	ldr	r3, [pc, #148]	; (800a470 <__d2b+0xb0>)
 800a3da:	4826      	ldr	r0, [pc, #152]	; (800a474 <__d2b+0xb4>)
 800a3dc:	f240 310a 	movw	r1, #778	; 0x30a
 800a3e0:	f000 fbc0 	bl	800ab64 <__assert_func>
 800a3e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a3ec:	bb35      	cbnz	r5, 800a43c <__d2b+0x7c>
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	d028      	beq.n	800a446 <__d2b+0x86>
 800a3f4:	4668      	mov	r0, sp
 800a3f6:	9600      	str	r6, [sp, #0]
 800a3f8:	f7ff fd82 	bl	8009f00 <__lo0bits>
 800a3fc:	9900      	ldr	r1, [sp, #0]
 800a3fe:	b300      	cbz	r0, 800a442 <__d2b+0x82>
 800a400:	9a01      	ldr	r2, [sp, #4]
 800a402:	f1c0 0320 	rsb	r3, r0, #32
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	430b      	orrs	r3, r1
 800a40c:	40c2      	lsrs	r2, r0
 800a40e:	6163      	str	r3, [r4, #20]
 800a410:	9201      	str	r2, [sp, #4]
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	61a3      	str	r3, [r4, #24]
 800a416:	2b00      	cmp	r3, #0
 800a418:	bf14      	ite	ne
 800a41a:	2202      	movne	r2, #2
 800a41c:	2201      	moveq	r2, #1
 800a41e:	6122      	str	r2, [r4, #16]
 800a420:	b1d5      	cbz	r5, 800a458 <__d2b+0x98>
 800a422:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a426:	4405      	add	r5, r0
 800a428:	f8c9 5000 	str.w	r5, [r9]
 800a42c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a430:	f8c8 0000 	str.w	r0, [r8]
 800a434:	4620      	mov	r0, r4
 800a436:	b003      	add	sp, #12
 800a438:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a43c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a440:	e7d5      	b.n	800a3ee <__d2b+0x2e>
 800a442:	6161      	str	r1, [r4, #20]
 800a444:	e7e5      	b.n	800a412 <__d2b+0x52>
 800a446:	a801      	add	r0, sp, #4
 800a448:	f7ff fd5a 	bl	8009f00 <__lo0bits>
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	6163      	str	r3, [r4, #20]
 800a450:	2201      	movs	r2, #1
 800a452:	6122      	str	r2, [r4, #16]
 800a454:	3020      	adds	r0, #32
 800a456:	e7e3      	b.n	800a420 <__d2b+0x60>
 800a458:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a45c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a460:	f8c9 0000 	str.w	r0, [r9]
 800a464:	6918      	ldr	r0, [r3, #16]
 800a466:	f7ff fd2b 	bl	8009ec0 <__hi0bits>
 800a46a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a46e:	e7df      	b.n	800a430 <__d2b+0x70>
 800a470:	0800b287 	.word	0x0800b287
 800a474:	0800b2f8 	.word	0x0800b2f8

0800a478 <_calloc_r>:
 800a478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a47a:	fba1 2402 	umull	r2, r4, r1, r2
 800a47e:	b94c      	cbnz	r4, 800a494 <_calloc_r+0x1c>
 800a480:	4611      	mov	r1, r2
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	f000 f87a 	bl	800a57c <_malloc_r>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	4605      	mov	r5, r0
 800a48c:	b930      	cbnz	r0, 800a49c <_calloc_r+0x24>
 800a48e:	4628      	mov	r0, r5
 800a490:	b003      	add	sp, #12
 800a492:	bd30      	pop	{r4, r5, pc}
 800a494:	220c      	movs	r2, #12
 800a496:	6002      	str	r2, [r0, #0]
 800a498:	2500      	movs	r5, #0
 800a49a:	e7f8      	b.n	800a48e <_calloc_r+0x16>
 800a49c:	4621      	mov	r1, r4
 800a49e:	f7fe f85b 	bl	8008558 <memset>
 800a4a2:	e7f4      	b.n	800a48e <_calloc_r+0x16>

0800a4a4 <_free_r>:
 800a4a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4a6:	2900      	cmp	r1, #0
 800a4a8:	d044      	beq.n	800a534 <_free_r+0x90>
 800a4aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ae:	9001      	str	r0, [sp, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f1a1 0404 	sub.w	r4, r1, #4
 800a4b6:	bfb8      	it	lt
 800a4b8:	18e4      	addlt	r4, r4, r3
 800a4ba:	f000 fcdf 	bl	800ae7c <__malloc_lock>
 800a4be:	4a1e      	ldr	r2, [pc, #120]	; (800a538 <_free_r+0x94>)
 800a4c0:	9801      	ldr	r0, [sp, #4]
 800a4c2:	6813      	ldr	r3, [r2, #0]
 800a4c4:	b933      	cbnz	r3, 800a4d4 <_free_r+0x30>
 800a4c6:	6063      	str	r3, [r4, #4]
 800a4c8:	6014      	str	r4, [r2, #0]
 800a4ca:	b003      	add	sp, #12
 800a4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4d0:	f000 bcda 	b.w	800ae88 <__malloc_unlock>
 800a4d4:	42a3      	cmp	r3, r4
 800a4d6:	d908      	bls.n	800a4ea <_free_r+0x46>
 800a4d8:	6825      	ldr	r5, [r4, #0]
 800a4da:	1961      	adds	r1, r4, r5
 800a4dc:	428b      	cmp	r3, r1
 800a4de:	bf01      	itttt	eq
 800a4e0:	6819      	ldreq	r1, [r3, #0]
 800a4e2:	685b      	ldreq	r3, [r3, #4]
 800a4e4:	1949      	addeq	r1, r1, r5
 800a4e6:	6021      	streq	r1, [r4, #0]
 800a4e8:	e7ed      	b.n	800a4c6 <_free_r+0x22>
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	b10b      	cbz	r3, 800a4f4 <_free_r+0x50>
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	d9fa      	bls.n	800a4ea <_free_r+0x46>
 800a4f4:	6811      	ldr	r1, [r2, #0]
 800a4f6:	1855      	adds	r5, r2, r1
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d10b      	bne.n	800a514 <_free_r+0x70>
 800a4fc:	6824      	ldr	r4, [r4, #0]
 800a4fe:	4421      	add	r1, r4
 800a500:	1854      	adds	r4, r2, r1
 800a502:	42a3      	cmp	r3, r4
 800a504:	6011      	str	r1, [r2, #0]
 800a506:	d1e0      	bne.n	800a4ca <_free_r+0x26>
 800a508:	681c      	ldr	r4, [r3, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	6053      	str	r3, [r2, #4]
 800a50e:	4421      	add	r1, r4
 800a510:	6011      	str	r1, [r2, #0]
 800a512:	e7da      	b.n	800a4ca <_free_r+0x26>
 800a514:	d902      	bls.n	800a51c <_free_r+0x78>
 800a516:	230c      	movs	r3, #12
 800a518:	6003      	str	r3, [r0, #0]
 800a51a:	e7d6      	b.n	800a4ca <_free_r+0x26>
 800a51c:	6825      	ldr	r5, [r4, #0]
 800a51e:	1961      	adds	r1, r4, r5
 800a520:	428b      	cmp	r3, r1
 800a522:	bf04      	itt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	bf04      	itt	eq
 800a52c:	1949      	addeq	r1, r1, r5
 800a52e:	6021      	streq	r1, [r4, #0]
 800a530:	6054      	str	r4, [r2, #4]
 800a532:	e7ca      	b.n	800a4ca <_free_r+0x26>
 800a534:	b003      	add	sp, #12
 800a536:	bd30      	pop	{r4, r5, pc}
 800a538:	200013b8 	.word	0x200013b8

0800a53c <sbrk_aligned>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4e0e      	ldr	r6, [pc, #56]	; (800a578 <sbrk_aligned+0x3c>)
 800a540:	460c      	mov	r4, r1
 800a542:	6831      	ldr	r1, [r6, #0]
 800a544:	4605      	mov	r5, r0
 800a546:	b911      	cbnz	r1, 800a54e <sbrk_aligned+0x12>
 800a548:	f000 f9e6 	bl	800a918 <_sbrk_r>
 800a54c:	6030      	str	r0, [r6, #0]
 800a54e:	4621      	mov	r1, r4
 800a550:	4628      	mov	r0, r5
 800a552:	f000 f9e1 	bl	800a918 <_sbrk_r>
 800a556:	1c43      	adds	r3, r0, #1
 800a558:	d00a      	beq.n	800a570 <sbrk_aligned+0x34>
 800a55a:	1cc4      	adds	r4, r0, #3
 800a55c:	f024 0403 	bic.w	r4, r4, #3
 800a560:	42a0      	cmp	r0, r4
 800a562:	d007      	beq.n	800a574 <sbrk_aligned+0x38>
 800a564:	1a21      	subs	r1, r4, r0
 800a566:	4628      	mov	r0, r5
 800a568:	f000 f9d6 	bl	800a918 <_sbrk_r>
 800a56c:	3001      	adds	r0, #1
 800a56e:	d101      	bne.n	800a574 <sbrk_aligned+0x38>
 800a570:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a574:	4620      	mov	r0, r4
 800a576:	bd70      	pop	{r4, r5, r6, pc}
 800a578:	200013bc 	.word	0x200013bc

0800a57c <_malloc_r>:
 800a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a580:	1ccd      	adds	r5, r1, #3
 800a582:	f025 0503 	bic.w	r5, r5, #3
 800a586:	3508      	adds	r5, #8
 800a588:	2d0c      	cmp	r5, #12
 800a58a:	bf38      	it	cc
 800a58c:	250c      	movcc	r5, #12
 800a58e:	2d00      	cmp	r5, #0
 800a590:	4607      	mov	r7, r0
 800a592:	db01      	blt.n	800a598 <_malloc_r+0x1c>
 800a594:	42a9      	cmp	r1, r5
 800a596:	d905      	bls.n	800a5a4 <_malloc_r+0x28>
 800a598:	230c      	movs	r3, #12
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	2600      	movs	r6, #0
 800a59e:	4630      	mov	r0, r6
 800a5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a4:	4e2e      	ldr	r6, [pc, #184]	; (800a660 <_malloc_r+0xe4>)
 800a5a6:	f000 fc69 	bl	800ae7c <__malloc_lock>
 800a5aa:	6833      	ldr	r3, [r6, #0]
 800a5ac:	461c      	mov	r4, r3
 800a5ae:	bb34      	cbnz	r4, 800a5fe <_malloc_r+0x82>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f7ff ffc2 	bl	800a53c <sbrk_aligned>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	d14d      	bne.n	800a65a <_malloc_r+0xde>
 800a5be:	6834      	ldr	r4, [r6, #0]
 800a5c0:	4626      	mov	r6, r4
 800a5c2:	2e00      	cmp	r6, #0
 800a5c4:	d140      	bne.n	800a648 <_malloc_r+0xcc>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4638      	mov	r0, r7
 800a5cc:	eb04 0803 	add.w	r8, r4, r3
 800a5d0:	f000 f9a2 	bl	800a918 <_sbrk_r>
 800a5d4:	4580      	cmp	r8, r0
 800a5d6:	d13a      	bne.n	800a64e <_malloc_r+0xd2>
 800a5d8:	6821      	ldr	r1, [r4, #0]
 800a5da:	3503      	adds	r5, #3
 800a5dc:	1a6d      	subs	r5, r5, r1
 800a5de:	f025 0503 	bic.w	r5, r5, #3
 800a5e2:	3508      	adds	r5, #8
 800a5e4:	2d0c      	cmp	r5, #12
 800a5e6:	bf38      	it	cc
 800a5e8:	250c      	movcc	r5, #12
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff ffa5 	bl	800a53c <sbrk_aligned>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d02b      	beq.n	800a64e <_malloc_r+0xd2>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	442b      	add	r3, r5
 800a5fa:	6023      	str	r3, [r4, #0]
 800a5fc:	e00e      	b.n	800a61c <_malloc_r+0xa0>
 800a5fe:	6822      	ldr	r2, [r4, #0]
 800a600:	1b52      	subs	r2, r2, r5
 800a602:	d41e      	bmi.n	800a642 <_malloc_r+0xc6>
 800a604:	2a0b      	cmp	r2, #11
 800a606:	d916      	bls.n	800a636 <_malloc_r+0xba>
 800a608:	1961      	adds	r1, r4, r5
 800a60a:	42a3      	cmp	r3, r4
 800a60c:	6025      	str	r5, [r4, #0]
 800a60e:	bf18      	it	ne
 800a610:	6059      	strne	r1, [r3, #4]
 800a612:	6863      	ldr	r3, [r4, #4]
 800a614:	bf08      	it	eq
 800a616:	6031      	streq	r1, [r6, #0]
 800a618:	5162      	str	r2, [r4, r5]
 800a61a:	604b      	str	r3, [r1, #4]
 800a61c:	4638      	mov	r0, r7
 800a61e:	f104 060b 	add.w	r6, r4, #11
 800a622:	f000 fc31 	bl	800ae88 <__malloc_unlock>
 800a626:	f026 0607 	bic.w	r6, r6, #7
 800a62a:	1d23      	adds	r3, r4, #4
 800a62c:	1af2      	subs	r2, r6, r3
 800a62e:	d0b6      	beq.n	800a59e <_malloc_r+0x22>
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	50a3      	str	r3, [r4, r2]
 800a634:	e7b3      	b.n	800a59e <_malloc_r+0x22>
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	42a3      	cmp	r3, r4
 800a63a:	bf0c      	ite	eq
 800a63c:	6032      	streq	r2, [r6, #0]
 800a63e:	605a      	strne	r2, [r3, #4]
 800a640:	e7ec      	b.n	800a61c <_malloc_r+0xa0>
 800a642:	4623      	mov	r3, r4
 800a644:	6864      	ldr	r4, [r4, #4]
 800a646:	e7b2      	b.n	800a5ae <_malloc_r+0x32>
 800a648:	4634      	mov	r4, r6
 800a64a:	6876      	ldr	r6, [r6, #4]
 800a64c:	e7b9      	b.n	800a5c2 <_malloc_r+0x46>
 800a64e:	230c      	movs	r3, #12
 800a650:	603b      	str	r3, [r7, #0]
 800a652:	4638      	mov	r0, r7
 800a654:	f000 fc18 	bl	800ae88 <__malloc_unlock>
 800a658:	e7a1      	b.n	800a59e <_malloc_r+0x22>
 800a65a:	6025      	str	r5, [r4, #0]
 800a65c:	e7de      	b.n	800a61c <_malloc_r+0xa0>
 800a65e:	bf00      	nop
 800a660:	200013b8 	.word	0x200013b8

0800a664 <__sfputc_r>:
 800a664:	6893      	ldr	r3, [r2, #8]
 800a666:	3b01      	subs	r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	b410      	push	{r4}
 800a66c:	6093      	str	r3, [r2, #8]
 800a66e:	da08      	bge.n	800a682 <__sfputc_r+0x1e>
 800a670:	6994      	ldr	r4, [r2, #24]
 800a672:	42a3      	cmp	r3, r4
 800a674:	db01      	blt.n	800a67a <__sfputc_r+0x16>
 800a676:	290a      	cmp	r1, #10
 800a678:	d103      	bne.n	800a682 <__sfputc_r+0x1e>
 800a67a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a67e:	f000 b99f 	b.w	800a9c0 <__swbuf_r>
 800a682:	6813      	ldr	r3, [r2, #0]
 800a684:	1c58      	adds	r0, r3, #1
 800a686:	6010      	str	r0, [r2, #0]
 800a688:	7019      	strb	r1, [r3, #0]
 800a68a:	4608      	mov	r0, r1
 800a68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <__sfputs_r>:
 800a692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a694:	4606      	mov	r6, r0
 800a696:	460f      	mov	r7, r1
 800a698:	4614      	mov	r4, r2
 800a69a:	18d5      	adds	r5, r2, r3
 800a69c:	42ac      	cmp	r4, r5
 800a69e:	d101      	bne.n	800a6a4 <__sfputs_r+0x12>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	e007      	b.n	800a6b4 <__sfputs_r+0x22>
 800a6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6a8:	463a      	mov	r2, r7
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ffda 	bl	800a664 <__sfputc_r>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d1f3      	bne.n	800a69c <__sfputs_r+0xa>
 800a6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6b8 <_vfiprintf_r>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	460d      	mov	r5, r1
 800a6be:	b09d      	sub	sp, #116	; 0x74
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	4698      	mov	r8, r3
 800a6c4:	4606      	mov	r6, r0
 800a6c6:	b118      	cbz	r0, 800a6d0 <_vfiprintf_r+0x18>
 800a6c8:	6983      	ldr	r3, [r0, #24]
 800a6ca:	b90b      	cbnz	r3, 800a6d0 <_vfiprintf_r+0x18>
 800a6cc:	f7ff faa2 	bl	8009c14 <__sinit>
 800a6d0:	4b89      	ldr	r3, [pc, #548]	; (800a8f8 <_vfiprintf_r+0x240>)
 800a6d2:	429d      	cmp	r5, r3
 800a6d4:	d11b      	bne.n	800a70e <_vfiprintf_r+0x56>
 800a6d6:	6875      	ldr	r5, [r6, #4]
 800a6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6da:	07d9      	lsls	r1, r3, #31
 800a6dc:	d405      	bmi.n	800a6ea <_vfiprintf_r+0x32>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	059a      	lsls	r2, r3, #22
 800a6e2:	d402      	bmi.n	800a6ea <_vfiprintf_r+0x32>
 800a6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e6:	f7ff fb38 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800a6ea:	89ab      	ldrh	r3, [r5, #12]
 800a6ec:	071b      	lsls	r3, r3, #28
 800a6ee:	d501      	bpl.n	800a6f4 <_vfiprintf_r+0x3c>
 800a6f0:	692b      	ldr	r3, [r5, #16]
 800a6f2:	b9eb      	cbnz	r3, 800a730 <_vfiprintf_r+0x78>
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f000 f9c6 	bl	800aa88 <__swsetup_r>
 800a6fc:	b1c0      	cbz	r0, 800a730 <_vfiprintf_r+0x78>
 800a6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a700:	07dc      	lsls	r4, r3, #31
 800a702:	d50e      	bpl.n	800a722 <_vfiprintf_r+0x6a>
 800a704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a708:	b01d      	add	sp, #116	; 0x74
 800a70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70e:	4b7b      	ldr	r3, [pc, #492]	; (800a8fc <_vfiprintf_r+0x244>)
 800a710:	429d      	cmp	r5, r3
 800a712:	d101      	bne.n	800a718 <_vfiprintf_r+0x60>
 800a714:	68b5      	ldr	r5, [r6, #8]
 800a716:	e7df      	b.n	800a6d8 <_vfiprintf_r+0x20>
 800a718:	4b79      	ldr	r3, [pc, #484]	; (800a900 <_vfiprintf_r+0x248>)
 800a71a:	429d      	cmp	r5, r3
 800a71c:	bf08      	it	eq
 800a71e:	68f5      	ldreq	r5, [r6, #12]
 800a720:	e7da      	b.n	800a6d8 <_vfiprintf_r+0x20>
 800a722:	89ab      	ldrh	r3, [r5, #12]
 800a724:	0598      	lsls	r0, r3, #22
 800a726:	d4ed      	bmi.n	800a704 <_vfiprintf_r+0x4c>
 800a728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72a:	f7ff fb17 	bl	8009d5c <__retarget_lock_release_recursive>
 800a72e:	e7e9      	b.n	800a704 <_vfiprintf_r+0x4c>
 800a730:	2300      	movs	r3, #0
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	2320      	movs	r3, #32
 800a736:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a73a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a73e:	2330      	movs	r3, #48	; 0x30
 800a740:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a904 <_vfiprintf_r+0x24c>
 800a744:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a748:	f04f 0901 	mov.w	r9, #1
 800a74c:	4623      	mov	r3, r4
 800a74e:	469a      	mov	sl, r3
 800a750:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a754:	b10a      	cbz	r2, 800a75a <_vfiprintf_r+0xa2>
 800a756:	2a25      	cmp	r2, #37	; 0x25
 800a758:	d1f9      	bne.n	800a74e <_vfiprintf_r+0x96>
 800a75a:	ebba 0b04 	subs.w	fp, sl, r4
 800a75e:	d00b      	beq.n	800a778 <_vfiprintf_r+0xc0>
 800a760:	465b      	mov	r3, fp
 800a762:	4622      	mov	r2, r4
 800a764:	4629      	mov	r1, r5
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ff93 	bl	800a692 <__sfputs_r>
 800a76c:	3001      	adds	r0, #1
 800a76e:	f000 80aa 	beq.w	800a8c6 <_vfiprintf_r+0x20e>
 800a772:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a774:	445a      	add	r2, fp
 800a776:	9209      	str	r2, [sp, #36]	; 0x24
 800a778:	f89a 3000 	ldrb.w	r3, [sl]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	f000 80a2 	beq.w	800a8c6 <_vfiprintf_r+0x20e>
 800a782:	2300      	movs	r3, #0
 800a784:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a788:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a78c:	f10a 0a01 	add.w	sl, sl, #1
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9307      	str	r3, [sp, #28]
 800a794:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a798:	931a      	str	r3, [sp, #104]	; 0x68
 800a79a:	4654      	mov	r4, sl
 800a79c:	2205      	movs	r2, #5
 800a79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a2:	4858      	ldr	r0, [pc, #352]	; (800a904 <_vfiprintf_r+0x24c>)
 800a7a4:	f7f5 fd34 	bl	8000210 <memchr>
 800a7a8:	9a04      	ldr	r2, [sp, #16]
 800a7aa:	b9d8      	cbnz	r0, 800a7e4 <_vfiprintf_r+0x12c>
 800a7ac:	06d1      	lsls	r1, r2, #27
 800a7ae:	bf44      	itt	mi
 800a7b0:	2320      	movmi	r3, #32
 800a7b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7b6:	0713      	lsls	r3, r2, #28
 800a7b8:	bf44      	itt	mi
 800a7ba:	232b      	movmi	r3, #43	; 0x2b
 800a7bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7c6:	d015      	beq.n	800a7f4 <_vfiprintf_r+0x13c>
 800a7c8:	9a07      	ldr	r2, [sp, #28]
 800a7ca:	4654      	mov	r4, sl
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f04f 0c0a 	mov.w	ip, #10
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7d8:	3b30      	subs	r3, #48	; 0x30
 800a7da:	2b09      	cmp	r3, #9
 800a7dc:	d94e      	bls.n	800a87c <_vfiprintf_r+0x1c4>
 800a7de:	b1b0      	cbz	r0, 800a80e <_vfiprintf_r+0x156>
 800a7e0:	9207      	str	r2, [sp, #28]
 800a7e2:	e014      	b.n	800a80e <_vfiprintf_r+0x156>
 800a7e4:	eba0 0308 	sub.w	r3, r0, r8
 800a7e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	9304      	str	r3, [sp, #16]
 800a7f0:	46a2      	mov	sl, r4
 800a7f2:	e7d2      	b.n	800a79a <_vfiprintf_r+0xe2>
 800a7f4:	9b03      	ldr	r3, [sp, #12]
 800a7f6:	1d19      	adds	r1, r3, #4
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	9103      	str	r1, [sp, #12]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bfbb      	ittet	lt
 800a800:	425b      	neglt	r3, r3
 800a802:	f042 0202 	orrlt.w	r2, r2, #2
 800a806:	9307      	strge	r3, [sp, #28]
 800a808:	9307      	strlt	r3, [sp, #28]
 800a80a:	bfb8      	it	lt
 800a80c:	9204      	strlt	r2, [sp, #16]
 800a80e:	7823      	ldrb	r3, [r4, #0]
 800a810:	2b2e      	cmp	r3, #46	; 0x2e
 800a812:	d10c      	bne.n	800a82e <_vfiprintf_r+0x176>
 800a814:	7863      	ldrb	r3, [r4, #1]
 800a816:	2b2a      	cmp	r3, #42	; 0x2a
 800a818:	d135      	bne.n	800a886 <_vfiprintf_r+0x1ce>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	9203      	str	r2, [sp, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfb8      	it	lt
 800a826:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a82a:	3402      	adds	r4, #2
 800a82c:	9305      	str	r3, [sp, #20]
 800a82e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a914 <_vfiprintf_r+0x25c>
 800a832:	7821      	ldrb	r1, [r4, #0]
 800a834:	2203      	movs	r2, #3
 800a836:	4650      	mov	r0, sl
 800a838:	f7f5 fcea 	bl	8000210 <memchr>
 800a83c:	b140      	cbz	r0, 800a850 <_vfiprintf_r+0x198>
 800a83e:	2340      	movs	r3, #64	; 0x40
 800a840:	eba0 000a 	sub.w	r0, r0, sl
 800a844:	fa03 f000 	lsl.w	r0, r3, r0
 800a848:	9b04      	ldr	r3, [sp, #16]
 800a84a:	4303      	orrs	r3, r0
 800a84c:	3401      	adds	r4, #1
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a854:	482c      	ldr	r0, [pc, #176]	; (800a908 <_vfiprintf_r+0x250>)
 800a856:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85a:	2206      	movs	r2, #6
 800a85c:	f7f5 fcd8 	bl	8000210 <memchr>
 800a860:	2800      	cmp	r0, #0
 800a862:	d03f      	beq.n	800a8e4 <_vfiprintf_r+0x22c>
 800a864:	4b29      	ldr	r3, [pc, #164]	; (800a90c <_vfiprintf_r+0x254>)
 800a866:	bb1b      	cbnz	r3, 800a8b0 <_vfiprintf_r+0x1f8>
 800a868:	9b03      	ldr	r3, [sp, #12]
 800a86a:	3307      	adds	r3, #7
 800a86c:	f023 0307 	bic.w	r3, r3, #7
 800a870:	3308      	adds	r3, #8
 800a872:	9303      	str	r3, [sp, #12]
 800a874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a876:	443b      	add	r3, r7
 800a878:	9309      	str	r3, [sp, #36]	; 0x24
 800a87a:	e767      	b.n	800a74c <_vfiprintf_r+0x94>
 800a87c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a880:	460c      	mov	r4, r1
 800a882:	2001      	movs	r0, #1
 800a884:	e7a5      	b.n	800a7d2 <_vfiprintf_r+0x11a>
 800a886:	2300      	movs	r3, #0
 800a888:	3401      	adds	r4, #1
 800a88a:	9305      	str	r3, [sp, #20]
 800a88c:	4619      	mov	r1, r3
 800a88e:	f04f 0c0a 	mov.w	ip, #10
 800a892:	4620      	mov	r0, r4
 800a894:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a898:	3a30      	subs	r2, #48	; 0x30
 800a89a:	2a09      	cmp	r2, #9
 800a89c:	d903      	bls.n	800a8a6 <_vfiprintf_r+0x1ee>
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d0c5      	beq.n	800a82e <_vfiprintf_r+0x176>
 800a8a2:	9105      	str	r1, [sp, #20]
 800a8a4:	e7c3      	b.n	800a82e <_vfiprintf_r+0x176>
 800a8a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e7f0      	b.n	800a892 <_vfiprintf_r+0x1da>
 800a8b0:	ab03      	add	r3, sp, #12
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	462a      	mov	r2, r5
 800a8b6:	4b16      	ldr	r3, [pc, #88]	; (800a910 <_vfiprintf_r+0x258>)
 800a8b8:	a904      	add	r1, sp, #16
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7fd fef4 	bl	80086a8 <_printf_float>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	1c78      	adds	r0, r7, #1
 800a8c4:	d1d6      	bne.n	800a874 <_vfiprintf_r+0x1bc>
 800a8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8c8:	07d9      	lsls	r1, r3, #31
 800a8ca:	d405      	bmi.n	800a8d8 <_vfiprintf_r+0x220>
 800a8cc:	89ab      	ldrh	r3, [r5, #12]
 800a8ce:	059a      	lsls	r2, r3, #22
 800a8d0:	d402      	bmi.n	800a8d8 <_vfiprintf_r+0x220>
 800a8d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d4:	f7ff fa42 	bl	8009d5c <__retarget_lock_release_recursive>
 800a8d8:	89ab      	ldrh	r3, [r5, #12]
 800a8da:	065b      	lsls	r3, r3, #25
 800a8dc:	f53f af12 	bmi.w	800a704 <_vfiprintf_r+0x4c>
 800a8e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8e2:	e711      	b.n	800a708 <_vfiprintf_r+0x50>
 800a8e4:	ab03      	add	r3, sp, #12
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4b09      	ldr	r3, [pc, #36]	; (800a910 <_vfiprintf_r+0x258>)
 800a8ec:	a904      	add	r1, sp, #16
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7fe f97e 	bl	8008bf0 <_printf_i>
 800a8f4:	e7e4      	b.n	800a8c0 <_vfiprintf_r+0x208>
 800a8f6:	bf00      	nop
 800a8f8:	0800b2b8 	.word	0x0800b2b8
 800a8fc:	0800b2d8 	.word	0x0800b2d8
 800a900:	0800b298 	.word	0x0800b298
 800a904:	0800b454 	.word	0x0800b454
 800a908:	0800b45e 	.word	0x0800b45e
 800a90c:	080086a9 	.word	0x080086a9
 800a910:	0800a693 	.word	0x0800a693
 800a914:	0800b45a 	.word	0x0800b45a

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7fd fd6e 	bl	8008404 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	200013c0 	.word	0x200013c0

0800a938 <__sread>:
 800a938:	b510      	push	{r4, lr}
 800a93a:	460c      	mov	r4, r1
 800a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a940:	f000 faa8 	bl	800ae94 <_read_r>
 800a944:	2800      	cmp	r0, #0
 800a946:	bfab      	itete	ge
 800a948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a94a:	89a3      	ldrhlt	r3, [r4, #12]
 800a94c:	181b      	addge	r3, r3, r0
 800a94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a952:	bfac      	ite	ge
 800a954:	6563      	strge	r3, [r4, #84]	; 0x54
 800a956:	81a3      	strhlt	r3, [r4, #12]
 800a958:	bd10      	pop	{r4, pc}

0800a95a <__swrite>:
 800a95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95e:	461f      	mov	r7, r3
 800a960:	898b      	ldrh	r3, [r1, #12]
 800a962:	05db      	lsls	r3, r3, #23
 800a964:	4605      	mov	r5, r0
 800a966:	460c      	mov	r4, r1
 800a968:	4616      	mov	r6, r2
 800a96a:	d505      	bpl.n	800a978 <__swrite+0x1e>
 800a96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a970:	2302      	movs	r3, #2
 800a972:	2200      	movs	r2, #0
 800a974:	f000 f9f8 	bl	800ad68 <_lseek_r>
 800a978:	89a3      	ldrh	r3, [r4, #12]
 800a97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a982:	81a3      	strh	r3, [r4, #12]
 800a984:	4632      	mov	r2, r6
 800a986:	463b      	mov	r3, r7
 800a988:	4628      	mov	r0, r5
 800a98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98e:	f000 b869 	b.w	800aa64 <_write_r>

0800a992 <__sseek>:
 800a992:	b510      	push	{r4, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a99a:	f000 f9e5 	bl	800ad68 <_lseek_r>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	bf15      	itete	ne
 800a9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9ae:	81a3      	strheq	r3, [r4, #12]
 800a9b0:	bf18      	it	ne
 800a9b2:	81a3      	strhne	r3, [r4, #12]
 800a9b4:	bd10      	pop	{r4, pc}

0800a9b6 <__sclose>:
 800a9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ba:	f000 b8f1 	b.w	800aba0 <_close_r>
	...

0800a9c0 <__swbuf_r>:
 800a9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c2:	460e      	mov	r6, r1
 800a9c4:	4614      	mov	r4, r2
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	b118      	cbz	r0, 800a9d2 <__swbuf_r+0x12>
 800a9ca:	6983      	ldr	r3, [r0, #24]
 800a9cc:	b90b      	cbnz	r3, 800a9d2 <__swbuf_r+0x12>
 800a9ce:	f7ff f921 	bl	8009c14 <__sinit>
 800a9d2:	4b21      	ldr	r3, [pc, #132]	; (800aa58 <__swbuf_r+0x98>)
 800a9d4:	429c      	cmp	r4, r3
 800a9d6:	d12b      	bne.n	800aa30 <__swbuf_r+0x70>
 800a9d8:	686c      	ldr	r4, [r5, #4]
 800a9da:	69a3      	ldr	r3, [r4, #24]
 800a9dc:	60a3      	str	r3, [r4, #8]
 800a9de:	89a3      	ldrh	r3, [r4, #12]
 800a9e0:	071a      	lsls	r2, r3, #28
 800a9e2:	d52f      	bpl.n	800aa44 <__swbuf_r+0x84>
 800a9e4:	6923      	ldr	r3, [r4, #16]
 800a9e6:	b36b      	cbz	r3, 800aa44 <__swbuf_r+0x84>
 800a9e8:	6923      	ldr	r3, [r4, #16]
 800a9ea:	6820      	ldr	r0, [r4, #0]
 800a9ec:	1ac0      	subs	r0, r0, r3
 800a9ee:	6963      	ldr	r3, [r4, #20]
 800a9f0:	b2f6      	uxtb	r6, r6
 800a9f2:	4283      	cmp	r3, r0
 800a9f4:	4637      	mov	r7, r6
 800a9f6:	dc04      	bgt.n	800aa02 <__swbuf_r+0x42>
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f000 f966 	bl	800accc <_fflush_r>
 800aa00:	bb30      	cbnz	r0, 800aa50 <__swbuf_r+0x90>
 800aa02:	68a3      	ldr	r3, [r4, #8]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	60a3      	str	r3, [r4, #8]
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	1c5a      	adds	r2, r3, #1
 800aa0c:	6022      	str	r2, [r4, #0]
 800aa0e:	701e      	strb	r6, [r3, #0]
 800aa10:	6963      	ldr	r3, [r4, #20]
 800aa12:	3001      	adds	r0, #1
 800aa14:	4283      	cmp	r3, r0
 800aa16:	d004      	beq.n	800aa22 <__swbuf_r+0x62>
 800aa18:	89a3      	ldrh	r3, [r4, #12]
 800aa1a:	07db      	lsls	r3, r3, #31
 800aa1c:	d506      	bpl.n	800aa2c <__swbuf_r+0x6c>
 800aa1e:	2e0a      	cmp	r6, #10
 800aa20:	d104      	bne.n	800aa2c <__swbuf_r+0x6c>
 800aa22:	4621      	mov	r1, r4
 800aa24:	4628      	mov	r0, r5
 800aa26:	f000 f951 	bl	800accc <_fflush_r>
 800aa2a:	b988      	cbnz	r0, 800aa50 <__swbuf_r+0x90>
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa30:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <__swbuf_r+0x9c>)
 800aa32:	429c      	cmp	r4, r3
 800aa34:	d101      	bne.n	800aa3a <__swbuf_r+0x7a>
 800aa36:	68ac      	ldr	r4, [r5, #8]
 800aa38:	e7cf      	b.n	800a9da <__swbuf_r+0x1a>
 800aa3a:	4b09      	ldr	r3, [pc, #36]	; (800aa60 <__swbuf_r+0xa0>)
 800aa3c:	429c      	cmp	r4, r3
 800aa3e:	bf08      	it	eq
 800aa40:	68ec      	ldreq	r4, [r5, #12]
 800aa42:	e7ca      	b.n	800a9da <__swbuf_r+0x1a>
 800aa44:	4621      	mov	r1, r4
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f81e 	bl	800aa88 <__swsetup_r>
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	d0cb      	beq.n	800a9e8 <__swbuf_r+0x28>
 800aa50:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800aa54:	e7ea      	b.n	800aa2c <__swbuf_r+0x6c>
 800aa56:	bf00      	nop
 800aa58:	0800b2b8 	.word	0x0800b2b8
 800aa5c:	0800b2d8 	.word	0x0800b2d8
 800aa60:	0800b298 	.word	0x0800b298

0800aa64 <_write_r>:
 800aa64:	b538      	push	{r3, r4, r5, lr}
 800aa66:	4d07      	ldr	r5, [pc, #28]	; (800aa84 <_write_r+0x20>)
 800aa68:	4604      	mov	r4, r0
 800aa6a:	4608      	mov	r0, r1
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	2200      	movs	r2, #0
 800aa70:	602a      	str	r2, [r5, #0]
 800aa72:	461a      	mov	r2, r3
 800aa74:	f7fd fc75 	bl	8008362 <_write>
 800aa78:	1c43      	adds	r3, r0, #1
 800aa7a:	d102      	bne.n	800aa82 <_write_r+0x1e>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	b103      	cbz	r3, 800aa82 <_write_r+0x1e>
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	bd38      	pop	{r3, r4, r5, pc}
 800aa84:	200013c0 	.word	0x200013c0

0800aa88 <__swsetup_r>:
 800aa88:	4b32      	ldr	r3, [pc, #200]	; (800ab54 <__swsetup_r+0xcc>)
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	681d      	ldr	r5, [r3, #0]
 800aa8e:	4606      	mov	r6, r0
 800aa90:	460c      	mov	r4, r1
 800aa92:	b125      	cbz	r5, 800aa9e <__swsetup_r+0x16>
 800aa94:	69ab      	ldr	r3, [r5, #24]
 800aa96:	b913      	cbnz	r3, 800aa9e <__swsetup_r+0x16>
 800aa98:	4628      	mov	r0, r5
 800aa9a:	f7ff f8bb 	bl	8009c14 <__sinit>
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	; (800ab58 <__swsetup_r+0xd0>)
 800aaa0:	429c      	cmp	r4, r3
 800aaa2:	d10f      	bne.n	800aac4 <__swsetup_r+0x3c>
 800aaa4:	686c      	ldr	r4, [r5, #4]
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaac:	0719      	lsls	r1, r3, #28
 800aaae:	d42c      	bmi.n	800ab0a <__swsetup_r+0x82>
 800aab0:	06dd      	lsls	r5, r3, #27
 800aab2:	d411      	bmi.n	800aad8 <__swsetup_r+0x50>
 800aab4:	2309      	movs	r3, #9
 800aab6:	6033      	str	r3, [r6, #0]
 800aab8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac2:	e03e      	b.n	800ab42 <__swsetup_r+0xba>
 800aac4:	4b25      	ldr	r3, [pc, #148]	; (800ab5c <__swsetup_r+0xd4>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d101      	bne.n	800aace <__swsetup_r+0x46>
 800aaca:	68ac      	ldr	r4, [r5, #8]
 800aacc:	e7eb      	b.n	800aaa6 <__swsetup_r+0x1e>
 800aace:	4b24      	ldr	r3, [pc, #144]	; (800ab60 <__swsetup_r+0xd8>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	bf08      	it	eq
 800aad4:	68ec      	ldreq	r4, [r5, #12]
 800aad6:	e7e6      	b.n	800aaa6 <__swsetup_r+0x1e>
 800aad8:	0758      	lsls	r0, r3, #29
 800aada:	d512      	bpl.n	800ab02 <__swsetup_r+0x7a>
 800aadc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aade:	b141      	cbz	r1, 800aaf2 <__swsetup_r+0x6a>
 800aae0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d002      	beq.n	800aaee <__swsetup_r+0x66>
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7ff fcdb 	bl	800a4a4 <_free_r>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	6363      	str	r3, [r4, #52]	; 0x34
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	2300      	movs	r3, #0
 800aafc:	6063      	str	r3, [r4, #4]
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f043 0308 	orr.w	r3, r3, #8
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	b94b      	cbnz	r3, 800ab22 <__swsetup_r+0x9a>
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab18:	d003      	beq.n	800ab22 <__swsetup_r+0x9a>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f000 f95b 	bl	800add8 <__smakebuf_r>
 800ab22:	89a0      	ldrh	r0, [r4, #12]
 800ab24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab28:	f010 0301 	ands.w	r3, r0, #1
 800ab2c:	d00a      	beq.n	800ab44 <__swsetup_r+0xbc>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60a3      	str	r3, [r4, #8]
 800ab32:	6963      	ldr	r3, [r4, #20]
 800ab34:	425b      	negs	r3, r3
 800ab36:	61a3      	str	r3, [r4, #24]
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	b943      	cbnz	r3, 800ab4e <__swsetup_r+0xc6>
 800ab3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab40:	d1ba      	bne.n	800aab8 <__swsetup_r+0x30>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	0781      	lsls	r1, r0, #30
 800ab46:	bf58      	it	pl
 800ab48:	6963      	ldrpl	r3, [r4, #20]
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	e7f4      	b.n	800ab38 <__swsetup_r+0xb0>
 800ab4e:	2000      	movs	r0, #0
 800ab50:	e7f7      	b.n	800ab42 <__swsetup_r+0xba>
 800ab52:	bf00      	nop
 800ab54:	20000094 	.word	0x20000094
 800ab58:	0800b2b8 	.word	0x0800b2b8
 800ab5c:	0800b2d8 	.word	0x0800b2d8
 800ab60:	0800b298 	.word	0x0800b298

0800ab64 <__assert_func>:
 800ab64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab66:	4614      	mov	r4, r2
 800ab68:	461a      	mov	r2, r3
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <__assert_func+0x2c>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4605      	mov	r5, r0
 800ab70:	68d8      	ldr	r0, [r3, #12]
 800ab72:	b14c      	cbz	r4, 800ab88 <__assert_func+0x24>
 800ab74:	4b07      	ldr	r3, [pc, #28]	; (800ab94 <__assert_func+0x30>)
 800ab76:	9100      	str	r1, [sp, #0]
 800ab78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab7c:	4906      	ldr	r1, [pc, #24]	; (800ab98 <__assert_func+0x34>)
 800ab7e:	462b      	mov	r3, r5
 800ab80:	f000 f8e0 	bl	800ad44 <fiprintf>
 800ab84:	f000 f9a5 	bl	800aed2 <abort>
 800ab88:	4b04      	ldr	r3, [pc, #16]	; (800ab9c <__assert_func+0x38>)
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	e7f3      	b.n	800ab76 <__assert_func+0x12>
 800ab8e:	bf00      	nop
 800ab90:	20000094 	.word	0x20000094
 800ab94:	0800b465 	.word	0x0800b465
 800ab98:	0800b472 	.word	0x0800b472
 800ab9c:	0800b4a0 	.word	0x0800b4a0

0800aba0 <_close_r>:
 800aba0:	b538      	push	{r3, r4, r5, lr}
 800aba2:	4d06      	ldr	r5, [pc, #24]	; (800abbc <_close_r+0x1c>)
 800aba4:	2300      	movs	r3, #0
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	602b      	str	r3, [r5, #0]
 800abac:	f7fd fbf5 	bl	800839a <_close>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d102      	bne.n	800abba <_close_r+0x1a>
 800abb4:	682b      	ldr	r3, [r5, #0]
 800abb6:	b103      	cbz	r3, 800abba <_close_r+0x1a>
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	200013c0 	.word	0x200013c0

0800abc0 <__sflush_r>:
 800abc0:	898a      	ldrh	r2, [r1, #12]
 800abc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc6:	4605      	mov	r5, r0
 800abc8:	0710      	lsls	r0, r2, #28
 800abca:	460c      	mov	r4, r1
 800abcc:	d458      	bmi.n	800ac80 <__sflush_r+0xc0>
 800abce:	684b      	ldr	r3, [r1, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dc05      	bgt.n	800abe0 <__sflush_r+0x20>
 800abd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	dc02      	bgt.n	800abe0 <__sflush_r+0x20>
 800abda:	2000      	movs	r0, #0
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abe2:	2e00      	cmp	r6, #0
 800abe4:	d0f9      	beq.n	800abda <__sflush_r+0x1a>
 800abe6:	2300      	movs	r3, #0
 800abe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abec:	682f      	ldr	r7, [r5, #0]
 800abee:	602b      	str	r3, [r5, #0]
 800abf0:	d032      	beq.n	800ac58 <__sflush_r+0x98>
 800abf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	075a      	lsls	r2, r3, #29
 800abf8:	d505      	bpl.n	800ac06 <__sflush_r+0x46>
 800abfa:	6863      	ldr	r3, [r4, #4]
 800abfc:	1ac0      	subs	r0, r0, r3
 800abfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac00:	b10b      	cbz	r3, 800ac06 <__sflush_r+0x46>
 800ac02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac04:	1ac0      	subs	r0, r0, r3
 800ac06:	2300      	movs	r3, #0
 800ac08:	4602      	mov	r2, r0
 800ac0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac0c:	6a21      	ldr	r1, [r4, #32]
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b0      	blx	r6
 800ac12:	1c43      	adds	r3, r0, #1
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	d106      	bne.n	800ac26 <__sflush_r+0x66>
 800ac18:	6829      	ldr	r1, [r5, #0]
 800ac1a:	291d      	cmp	r1, #29
 800ac1c:	d82c      	bhi.n	800ac78 <__sflush_r+0xb8>
 800ac1e:	4a2a      	ldr	r2, [pc, #168]	; (800acc8 <__sflush_r+0x108>)
 800ac20:	40ca      	lsrs	r2, r1
 800ac22:	07d6      	lsls	r6, r2, #31
 800ac24:	d528      	bpl.n	800ac78 <__sflush_r+0xb8>
 800ac26:	2200      	movs	r2, #0
 800ac28:	6062      	str	r2, [r4, #4]
 800ac2a:	04d9      	lsls	r1, r3, #19
 800ac2c:	6922      	ldr	r2, [r4, #16]
 800ac2e:	6022      	str	r2, [r4, #0]
 800ac30:	d504      	bpl.n	800ac3c <__sflush_r+0x7c>
 800ac32:	1c42      	adds	r2, r0, #1
 800ac34:	d101      	bne.n	800ac3a <__sflush_r+0x7a>
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	b903      	cbnz	r3, 800ac3c <__sflush_r+0x7c>
 800ac3a:	6560      	str	r0, [r4, #84]	; 0x54
 800ac3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac3e:	602f      	str	r7, [r5, #0]
 800ac40:	2900      	cmp	r1, #0
 800ac42:	d0ca      	beq.n	800abda <__sflush_r+0x1a>
 800ac44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	d002      	beq.n	800ac52 <__sflush_r+0x92>
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7ff fc29 	bl	800a4a4 <_free_r>
 800ac52:	2000      	movs	r0, #0
 800ac54:	6360      	str	r0, [r4, #52]	; 0x34
 800ac56:	e7c1      	b.n	800abdc <__sflush_r+0x1c>
 800ac58:	6a21      	ldr	r1, [r4, #32]
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b0      	blx	r6
 800ac60:	1c41      	adds	r1, r0, #1
 800ac62:	d1c7      	bne.n	800abf4 <__sflush_r+0x34>
 800ac64:	682b      	ldr	r3, [r5, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0c4      	beq.n	800abf4 <__sflush_r+0x34>
 800ac6a:	2b1d      	cmp	r3, #29
 800ac6c:	d001      	beq.n	800ac72 <__sflush_r+0xb2>
 800ac6e:	2b16      	cmp	r3, #22
 800ac70:	d101      	bne.n	800ac76 <__sflush_r+0xb6>
 800ac72:	602f      	str	r7, [r5, #0]
 800ac74:	e7b1      	b.n	800abda <__sflush_r+0x1a>
 800ac76:	89a3      	ldrh	r3, [r4, #12]
 800ac78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac7c:	81a3      	strh	r3, [r4, #12]
 800ac7e:	e7ad      	b.n	800abdc <__sflush_r+0x1c>
 800ac80:	690f      	ldr	r7, [r1, #16]
 800ac82:	2f00      	cmp	r7, #0
 800ac84:	d0a9      	beq.n	800abda <__sflush_r+0x1a>
 800ac86:	0793      	lsls	r3, r2, #30
 800ac88:	680e      	ldr	r6, [r1, #0]
 800ac8a:	bf08      	it	eq
 800ac8c:	694b      	ldreq	r3, [r1, #20]
 800ac8e:	600f      	str	r7, [r1, #0]
 800ac90:	bf18      	it	ne
 800ac92:	2300      	movne	r3, #0
 800ac94:	eba6 0807 	sub.w	r8, r6, r7
 800ac98:	608b      	str	r3, [r1, #8]
 800ac9a:	f1b8 0f00 	cmp.w	r8, #0
 800ac9e:	dd9c      	ble.n	800abda <__sflush_r+0x1a>
 800aca0:	6a21      	ldr	r1, [r4, #32]
 800aca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aca4:	4643      	mov	r3, r8
 800aca6:	463a      	mov	r2, r7
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b0      	blx	r6
 800acac:	2800      	cmp	r0, #0
 800acae:	dc06      	bgt.n	800acbe <__sflush_r+0xfe>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb6:	81a3      	strh	r3, [r4, #12]
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acbc:	e78e      	b.n	800abdc <__sflush_r+0x1c>
 800acbe:	4407      	add	r7, r0
 800acc0:	eba8 0800 	sub.w	r8, r8, r0
 800acc4:	e7e9      	b.n	800ac9a <__sflush_r+0xda>
 800acc6:	bf00      	nop
 800acc8:	20400001 	.word	0x20400001

0800accc <_fflush_r>:
 800accc:	b538      	push	{r3, r4, r5, lr}
 800acce:	690b      	ldr	r3, [r1, #16]
 800acd0:	4605      	mov	r5, r0
 800acd2:	460c      	mov	r4, r1
 800acd4:	b913      	cbnz	r3, 800acdc <_fflush_r+0x10>
 800acd6:	2500      	movs	r5, #0
 800acd8:	4628      	mov	r0, r5
 800acda:	bd38      	pop	{r3, r4, r5, pc}
 800acdc:	b118      	cbz	r0, 800ace6 <_fflush_r+0x1a>
 800acde:	6983      	ldr	r3, [r0, #24]
 800ace0:	b90b      	cbnz	r3, 800ace6 <_fflush_r+0x1a>
 800ace2:	f7fe ff97 	bl	8009c14 <__sinit>
 800ace6:	4b14      	ldr	r3, [pc, #80]	; (800ad38 <_fflush_r+0x6c>)
 800ace8:	429c      	cmp	r4, r3
 800acea:	d11b      	bne.n	800ad24 <_fflush_r+0x58>
 800acec:	686c      	ldr	r4, [r5, #4]
 800acee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0ef      	beq.n	800acd6 <_fflush_r+0xa>
 800acf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800acf8:	07d0      	lsls	r0, r2, #31
 800acfa:	d404      	bmi.n	800ad06 <_fflush_r+0x3a>
 800acfc:	0599      	lsls	r1, r3, #22
 800acfe:	d402      	bmi.n	800ad06 <_fflush_r+0x3a>
 800ad00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad02:	f7ff f82a 	bl	8009d5a <__retarget_lock_acquire_recursive>
 800ad06:	4628      	mov	r0, r5
 800ad08:	4621      	mov	r1, r4
 800ad0a:	f7ff ff59 	bl	800abc0 <__sflush_r>
 800ad0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad10:	07da      	lsls	r2, r3, #31
 800ad12:	4605      	mov	r5, r0
 800ad14:	d4e0      	bmi.n	800acd8 <_fflush_r+0xc>
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	059b      	lsls	r3, r3, #22
 800ad1a:	d4dd      	bmi.n	800acd8 <_fflush_r+0xc>
 800ad1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad1e:	f7ff f81d 	bl	8009d5c <__retarget_lock_release_recursive>
 800ad22:	e7d9      	b.n	800acd8 <_fflush_r+0xc>
 800ad24:	4b05      	ldr	r3, [pc, #20]	; (800ad3c <_fflush_r+0x70>)
 800ad26:	429c      	cmp	r4, r3
 800ad28:	d101      	bne.n	800ad2e <_fflush_r+0x62>
 800ad2a:	68ac      	ldr	r4, [r5, #8]
 800ad2c:	e7df      	b.n	800acee <_fflush_r+0x22>
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <_fflush_r+0x74>)
 800ad30:	429c      	cmp	r4, r3
 800ad32:	bf08      	it	eq
 800ad34:	68ec      	ldreq	r4, [r5, #12]
 800ad36:	e7da      	b.n	800acee <_fflush_r+0x22>
 800ad38:	0800b2b8 	.word	0x0800b2b8
 800ad3c:	0800b2d8 	.word	0x0800b2d8
 800ad40:	0800b298 	.word	0x0800b298

0800ad44 <fiprintf>:
 800ad44:	b40e      	push	{r1, r2, r3}
 800ad46:	b503      	push	{r0, r1, lr}
 800ad48:	4601      	mov	r1, r0
 800ad4a:	ab03      	add	r3, sp, #12
 800ad4c:	4805      	ldr	r0, [pc, #20]	; (800ad64 <fiprintf+0x20>)
 800ad4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad52:	6800      	ldr	r0, [r0, #0]
 800ad54:	9301      	str	r3, [sp, #4]
 800ad56:	f7ff fcaf 	bl	800a6b8 <_vfiprintf_r>
 800ad5a:	b002      	add	sp, #8
 800ad5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad60:	b003      	add	sp, #12
 800ad62:	4770      	bx	lr
 800ad64:	20000094 	.word	0x20000094

0800ad68 <_lseek_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d07      	ldr	r5, [pc, #28]	; (800ad88 <_lseek_r+0x20>)
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	4608      	mov	r0, r1
 800ad70:	4611      	mov	r1, r2
 800ad72:	2200      	movs	r2, #0
 800ad74:	602a      	str	r2, [r5, #0]
 800ad76:	461a      	mov	r2, r3
 800ad78:	f7fd fb36 	bl	80083e8 <_lseek>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_lseek_r+0x1e>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_lseek_r+0x1e>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	200013c0 	.word	0x200013c0

0800ad8c <__swhatbuf_r>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	460e      	mov	r6, r1
 800ad90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad94:	2900      	cmp	r1, #0
 800ad96:	b096      	sub	sp, #88	; 0x58
 800ad98:	4614      	mov	r4, r2
 800ad9a:	461d      	mov	r5, r3
 800ad9c:	da08      	bge.n	800adb0 <__swhatbuf_r+0x24>
 800ad9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	602a      	str	r2, [r5, #0]
 800ada6:	061a      	lsls	r2, r3, #24
 800ada8:	d410      	bmi.n	800adcc <__swhatbuf_r+0x40>
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	e00e      	b.n	800adce <__swhatbuf_r+0x42>
 800adb0:	466a      	mov	r2, sp
 800adb2:	f000 f895 	bl	800aee0 <_fstat_r>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	dbf1      	blt.n	800ad9e <__swhatbuf_r+0x12>
 800adba:	9a01      	ldr	r2, [sp, #4]
 800adbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adc4:	425a      	negs	r2, r3
 800adc6:	415a      	adcs	r2, r3
 800adc8:	602a      	str	r2, [r5, #0]
 800adca:	e7ee      	b.n	800adaa <__swhatbuf_r+0x1e>
 800adcc:	2340      	movs	r3, #64	; 0x40
 800adce:	2000      	movs	r0, #0
 800add0:	6023      	str	r3, [r4, #0]
 800add2:	b016      	add	sp, #88	; 0x58
 800add4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800add8 <__smakebuf_r>:
 800add8:	898b      	ldrh	r3, [r1, #12]
 800adda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800addc:	079d      	lsls	r5, r3, #30
 800adde:	4606      	mov	r6, r0
 800ade0:	460c      	mov	r4, r1
 800ade2:	d507      	bpl.n	800adf4 <__smakebuf_r+0x1c>
 800ade4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	6123      	str	r3, [r4, #16]
 800adec:	2301      	movs	r3, #1
 800adee:	6163      	str	r3, [r4, #20]
 800adf0:	b002      	add	sp, #8
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	ab01      	add	r3, sp, #4
 800adf6:	466a      	mov	r2, sp
 800adf8:	f7ff ffc8 	bl	800ad8c <__swhatbuf_r>
 800adfc:	9900      	ldr	r1, [sp, #0]
 800adfe:	4605      	mov	r5, r0
 800ae00:	4630      	mov	r0, r6
 800ae02:	f7ff fbbb 	bl	800a57c <_malloc_r>
 800ae06:	b948      	cbnz	r0, 800ae1c <__smakebuf_r+0x44>
 800ae08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae0c:	059a      	lsls	r2, r3, #22
 800ae0e:	d4ef      	bmi.n	800adf0 <__smakebuf_r+0x18>
 800ae10:	f023 0303 	bic.w	r3, r3, #3
 800ae14:	f043 0302 	orr.w	r3, r3, #2
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	e7e3      	b.n	800ade4 <__smakebuf_r+0xc>
 800ae1c:	4b0d      	ldr	r3, [pc, #52]	; (800ae54 <__smakebuf_r+0x7c>)
 800ae1e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae20:	89a3      	ldrh	r3, [r4, #12]
 800ae22:	6020      	str	r0, [r4, #0]
 800ae24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	9b00      	ldr	r3, [sp, #0]
 800ae2c:	6163      	str	r3, [r4, #20]
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	6120      	str	r0, [r4, #16]
 800ae32:	b15b      	cbz	r3, 800ae4c <__smakebuf_r+0x74>
 800ae34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f000 f863 	bl	800af04 <_isatty_r>
 800ae3e:	b128      	cbz	r0, 800ae4c <__smakebuf_r+0x74>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	f023 0303 	bic.w	r3, r3, #3
 800ae46:	f043 0301 	orr.w	r3, r3, #1
 800ae4a:	81a3      	strh	r3, [r4, #12]
 800ae4c:	89a0      	ldrh	r0, [r4, #12]
 800ae4e:	4305      	orrs	r5, r0
 800ae50:	81a5      	strh	r5, [r4, #12]
 800ae52:	e7cd      	b.n	800adf0 <__smakebuf_r+0x18>
 800ae54:	08009bad 	.word	0x08009bad

0800ae58 <__ascii_mbtowc>:
 800ae58:	b082      	sub	sp, #8
 800ae5a:	b901      	cbnz	r1, 800ae5e <__ascii_mbtowc+0x6>
 800ae5c:	a901      	add	r1, sp, #4
 800ae5e:	b142      	cbz	r2, 800ae72 <__ascii_mbtowc+0x1a>
 800ae60:	b14b      	cbz	r3, 800ae76 <__ascii_mbtowc+0x1e>
 800ae62:	7813      	ldrb	r3, [r2, #0]
 800ae64:	600b      	str	r3, [r1, #0]
 800ae66:	7812      	ldrb	r2, [r2, #0]
 800ae68:	1e10      	subs	r0, r2, #0
 800ae6a:	bf18      	it	ne
 800ae6c:	2001      	movne	r0, #1
 800ae6e:	b002      	add	sp, #8
 800ae70:	4770      	bx	lr
 800ae72:	4610      	mov	r0, r2
 800ae74:	e7fb      	b.n	800ae6e <__ascii_mbtowc+0x16>
 800ae76:	f06f 0001 	mvn.w	r0, #1
 800ae7a:	e7f8      	b.n	800ae6e <__ascii_mbtowc+0x16>

0800ae7c <__malloc_lock>:
 800ae7c:	4801      	ldr	r0, [pc, #4]	; (800ae84 <__malloc_lock+0x8>)
 800ae7e:	f7fe bf6c 	b.w	8009d5a <__retarget_lock_acquire_recursive>
 800ae82:	bf00      	nop
 800ae84:	200013b4 	.word	0x200013b4

0800ae88 <__malloc_unlock>:
 800ae88:	4801      	ldr	r0, [pc, #4]	; (800ae90 <__malloc_unlock+0x8>)
 800ae8a:	f7fe bf67 	b.w	8009d5c <__retarget_lock_release_recursive>
 800ae8e:	bf00      	nop
 800ae90:	200013b4 	.word	0x200013b4

0800ae94 <_read_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	; (800aeb4 <_read_r+0x20>)
 800ae98:	4604      	mov	r4, r0
 800ae9a:	4608      	mov	r0, r1
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	602a      	str	r2, [r5, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	f7fd fa40 	bl	8008328 <_read>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_read_r+0x1e>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_read_r+0x1e>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	200013c0 	.word	0x200013c0

0800aeb8 <__ascii_wctomb>:
 800aeb8:	b149      	cbz	r1, 800aece <__ascii_wctomb+0x16>
 800aeba:	2aff      	cmp	r2, #255	; 0xff
 800aebc:	bf85      	ittet	hi
 800aebe:	238a      	movhi	r3, #138	; 0x8a
 800aec0:	6003      	strhi	r3, [r0, #0]
 800aec2:	700a      	strbls	r2, [r1, #0]
 800aec4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800aec8:	bf98      	it	ls
 800aeca:	2001      	movls	r0, #1
 800aecc:	4770      	bx	lr
 800aece:	4608      	mov	r0, r1
 800aed0:	4770      	bx	lr

0800aed2 <abort>:
 800aed2:	b508      	push	{r3, lr}
 800aed4:	2006      	movs	r0, #6
 800aed6:	f000 f84d 	bl	800af74 <raise>
 800aeda:	2001      	movs	r0, #1
 800aedc:	f7fd fa1a 	bl	8008314 <_exit>

0800aee0 <_fstat_r>:
 800aee0:	b538      	push	{r3, r4, r5, lr}
 800aee2:	4d07      	ldr	r5, [pc, #28]	; (800af00 <_fstat_r+0x20>)
 800aee4:	2300      	movs	r3, #0
 800aee6:	4604      	mov	r4, r0
 800aee8:	4608      	mov	r0, r1
 800aeea:	4611      	mov	r1, r2
 800aeec:	602b      	str	r3, [r5, #0]
 800aeee:	f7fd fa60 	bl	80083b2 <_fstat>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	d102      	bne.n	800aefc <_fstat_r+0x1c>
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	b103      	cbz	r3, 800aefc <_fstat_r+0x1c>
 800aefa:	6023      	str	r3, [r4, #0]
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	200013c0 	.word	0x200013c0

0800af04 <_isatty_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d06      	ldr	r5, [pc, #24]	; (800af20 <_isatty_r+0x1c>)
 800af08:	2300      	movs	r3, #0
 800af0a:	4604      	mov	r4, r0
 800af0c:	4608      	mov	r0, r1
 800af0e:	602b      	str	r3, [r5, #0]
 800af10:	f7fd fa5f 	bl	80083d2 <_isatty>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	d102      	bne.n	800af1e <_isatty_r+0x1a>
 800af18:	682b      	ldr	r3, [r5, #0]
 800af1a:	b103      	cbz	r3, 800af1e <_isatty_r+0x1a>
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	200013c0 	.word	0x200013c0

0800af24 <_raise_r>:
 800af24:	291f      	cmp	r1, #31
 800af26:	b538      	push	{r3, r4, r5, lr}
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	d904      	bls.n	800af38 <_raise_r+0x14>
 800af2e:	2316      	movs	r3, #22
 800af30:	6003      	str	r3, [r0, #0]
 800af32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af36:	bd38      	pop	{r3, r4, r5, pc}
 800af38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af3a:	b112      	cbz	r2, 800af42 <_raise_r+0x1e>
 800af3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af40:	b94b      	cbnz	r3, 800af56 <_raise_r+0x32>
 800af42:	4620      	mov	r0, r4
 800af44:	f000 f830 	bl	800afa8 <_getpid_r>
 800af48:	462a      	mov	r2, r5
 800af4a:	4601      	mov	r1, r0
 800af4c:	4620      	mov	r0, r4
 800af4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af52:	f000 b817 	b.w	800af84 <_kill_r>
 800af56:	2b01      	cmp	r3, #1
 800af58:	d00a      	beq.n	800af70 <_raise_r+0x4c>
 800af5a:	1c59      	adds	r1, r3, #1
 800af5c:	d103      	bne.n	800af66 <_raise_r+0x42>
 800af5e:	2316      	movs	r3, #22
 800af60:	6003      	str	r3, [r0, #0]
 800af62:	2001      	movs	r0, #1
 800af64:	e7e7      	b.n	800af36 <_raise_r+0x12>
 800af66:	2400      	movs	r4, #0
 800af68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af6c:	4628      	mov	r0, r5
 800af6e:	4798      	blx	r3
 800af70:	2000      	movs	r0, #0
 800af72:	e7e0      	b.n	800af36 <_raise_r+0x12>

0800af74 <raise>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <raise+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f7ff bfd3 	b.w	800af24 <_raise_r>
 800af7e:	bf00      	nop
 800af80:	20000094 	.word	0x20000094

0800af84 <_kill_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	; (800afa4 <_kill_r+0x20>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	4611      	mov	r1, r2
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	f7fd f9af 	bl	80082f4 <_kill>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	d102      	bne.n	800afa0 <_kill_r+0x1c>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	b103      	cbz	r3, 800afa0 <_kill_r+0x1c>
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	bd38      	pop	{r3, r4, r5, pc}
 800afa2:	bf00      	nop
 800afa4:	200013c0 	.word	0x200013c0

0800afa8 <_getpid_r>:
 800afa8:	f7fd b99c 	b.w	80082e4 <_getpid>

0800afac <_init>:
 800afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afae:	bf00      	nop
 800afb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb2:	bc08      	pop	{r3}
 800afb4:	469e      	mov	lr, r3
 800afb6:	4770      	bx	lr

0800afb8 <_fini>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	bf00      	nop
 800afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afbe:	bc08      	pop	{r3}
 800afc0:	469e      	mov	lr, r3
 800afc2:	4770      	bx	lr
