
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056f4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005998  08005998  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a0  080059a0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080059a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200000a4  08005a4c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08005a4c  00020320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c9f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002598  00000000  00000000  00032d73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00035310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db8  00000000  00000000  000361c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a783  00000000  00000000  00036f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eea  00000000  00000000  000616fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106611  00000000  00000000  000745e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017abf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004004  00000000  00000000  0017ac48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800589c 	.word	0x0800589c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200000a8 	.word	0x200000a8
 80001fc:	0800589c 	.word	0x0800589c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80005bc:	4b27      	ldr	r3, [pc, #156]	; (800065c <I2Cx_MspInit+0xa8>)
 80005be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c0:	4a26      	ldr	r2, [pc, #152]	; (800065c <I2Cx_MspInit+0xa8>)
 80005c2:	f043 0302 	orr.w	r3, r3, #2
 80005c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005c8:	4b24      	ldr	r3, [pc, #144]	; (800065c <I2Cx_MspInit+0xa8>)
 80005ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005cc:	f003 0302 	and.w	r3, r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80005d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80005da:	2312      	movs	r3, #18
 80005dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e2:	2303      	movs	r3, #3
 80005e4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80005e6:	2304      	movs	r3, #4
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	481b      	ldr	r0, [pc, #108]	; (8000660 <I2Cx_MspInit+0xac>)
 80005f2:	f000 fc47 	bl	8000e84 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4619      	mov	r1, r3
 80005fc:	4818      	ldr	r0, [pc, #96]	; (8000660 <I2Cx_MspInit+0xac>)
 80005fe:	f000 fc41 	bl	8000e84 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <I2Cx_MspInit+0xa8>)
 8000604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000606:	4a15      	ldr	r2, [pc, #84]	; (800065c <I2Cx_MspInit+0xa8>)
 8000608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800060c:	6593      	str	r3, [r2, #88]	; 0x58
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <I2Cx_MspInit+0xa8>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <I2Cx_MspInit+0xa8>)
 800061c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800061e:	4a0f      	ldr	r2, [pc, #60]	; (800065c <I2Cx_MspInit+0xa8>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000624:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <I2Cx_MspInit+0xa8>)
 8000628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800062a:	4a0c      	ldr	r2, [pc, #48]	; (800065c <I2Cx_MspInit+0xa8>)
 800062c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000630:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	210f      	movs	r1, #15
 8000636:	2021      	movs	r0, #33	; 0x21
 8000638:	f000 fbed 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800063c:	2021      	movs	r0, #33	; 0x21
 800063e:	f000 fc06 	bl	8000e4e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	210f      	movs	r1, #15
 8000646:	2022      	movs	r0, #34	; 0x22
 8000648:	f000 fbe5 	bl	8000e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800064c:	2022      	movs	r0, #34	; 0x22
 800064e:	f000 fbfe 	bl	8000e4e <HAL_NVIC_EnableIRQ>
}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000
 8000660:	48000400 	.word	0x48000400

08000664 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <I2Cx_Init+0x54>)
 8000670:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a11      	ldr	r2, [pc, #68]	; (80006bc <I2Cx_Init+0x58>)
 8000676:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2201      	movs	r2, #1
 8000682:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2200      	movs	r2, #0
 800068e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	f7ff ff89 	bl	80005b4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 fe8a 	bl	80013bc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f001 fc18 	bl	8001ee0 <HAL_I2CEx_ConfigAnalogFilter>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40005800 	.word	0x40005800
 80006bc:	00702681 	.word	0x00702681

080006c0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	; 0x28
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	4608      	mov	r0, r1
 80006ca:	4611      	mov	r1, r2
 80006cc:	461a      	mov	r2, r3
 80006ce:	4603      	mov	r3, r0
 80006d0:	72fb      	strb	r3, [r7, #11]
 80006d2:	460b      	mov	r3, r1
 80006d4:	813b      	strh	r3, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80006da:	2300      	movs	r3, #0
 80006dc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	b299      	uxth	r1, r3
 80006e2:	88f8      	ldrh	r0, [r7, #6]
 80006e4:	893a      	ldrh	r2, [r7, #8]
 80006e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ea:	9302      	str	r3, [sp, #8]
 80006ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	9300      	str	r3, [sp, #0]
 80006f4:	4603      	mov	r3, r0
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f001 f832 	bl	8001760 <HAL_I2C_Mem_Read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8000700:	7dfb      	ldrb	r3, [r7, #23]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8000706:	7afb      	ldrb	r3, [r7, #11]
 8000708:	4619      	mov	r1, r3
 800070a:	68f8      	ldr	r0, [r7, #12]
 800070c:	f000 f832 	bl	8000774 <I2Cx_Error>
  }
  return status;
 8000710:	7dfb      	ldrb	r3, [r7, #23]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b08a      	sub	sp, #40	; 0x28
 800071e:	af04      	add	r7, sp, #16
 8000720:	60f8      	str	r0, [r7, #12]
 8000722:	4608      	mov	r0, r1
 8000724:	4611      	mov	r1, r2
 8000726:	461a      	mov	r2, r3
 8000728:	4603      	mov	r3, r0
 800072a:	72fb      	strb	r3, [r7, #11]
 800072c:	460b      	mov	r3, r1
 800072e:	813b      	strh	r3, [r7, #8]
 8000730:	4613      	mov	r3, r2
 8000732:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000734:	2300      	movs	r3, #0
 8000736:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	b299      	uxth	r1, r3
 800073c:	88f8      	ldrh	r0, [r7, #6]
 800073e:	893a      	ldrh	r2, [r7, #8]
 8000740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000744:	9302      	str	r3, [sp, #8]
 8000746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	6a3b      	ldr	r3, [r7, #32]
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4603      	mov	r3, r0
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 fef1 	bl	8001538 <HAL_I2C_Mem_Write>
 8000756:	4603      	mov	r3, r0
 8000758:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d004      	beq.n	800076a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8000760:	7afb      	ldrb	r3, [r7, #11]
 8000762:	4619      	mov	r1, r3
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f000 f805 	bl	8000774 <I2Cx_Error>
  }
  return status;
 800076a:	7dfb      	ldrb	r3, [r7, #23]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3718      	adds	r7, #24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 feaa 	bl	80014da <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff6c 	bl	8000664 <I2Cx_Init>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <SENSOR_IO_Init+0x10>)
 800079a:	f7ff ff63 	bl	8000664 <I2Cx_Init>
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000c0 	.word	0x200000c0

080007a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
 80007b2:	460b      	mov	r3, r1
 80007b4:	71bb      	strb	r3, [r7, #6]
 80007b6:	4613      	mov	r3, r2
 80007b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80007ba:	79bb      	ldrb	r3, [r7, #6]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	79f9      	ldrb	r1, [r7, #7]
 80007c0:	2301      	movs	r3, #1
 80007c2:	9301      	str	r3, [sp, #4]
 80007c4:	1d7b      	adds	r3, r7, #5
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <SENSOR_IO_Write+0x30>)
 80007cc:	f7ff ffa5 	bl	800071a <I2Cx_WriteMultiple>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000c0 	.word	0x200000c0

080007dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af02      	add	r7, sp, #8
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80007f0:	79bb      	ldrb	r3, [r7, #6]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	79f9      	ldrb	r1, [r7, #7]
 80007f6:	2301      	movs	r3, #1
 80007f8:	9301      	str	r3, [sp, #4]
 80007fa:	f107 030f 	add.w	r3, r7, #15
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2301      	movs	r3, #1
 8000802:	4804      	ldr	r0, [pc, #16]	; (8000814 <SENSOR_IO_Read+0x38>)
 8000804:	f7ff ff5c 	bl	80006c0 <I2Cx_ReadMultiple>

  return read_value;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000c0 	.word	0x200000c0

08000818 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af02      	add	r7, sp, #8
 800081e:	603a      	str	r2, [r7, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
 8000826:	460b      	mov	r3, r1
 8000828:	71bb      	strb	r3, [r7, #6]
 800082a:	4613      	mov	r3, r2
 800082c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	b29a      	uxth	r2, r3
 8000832:	79f9      	ldrb	r1, [r7, #7]
 8000834:	88bb      	ldrh	r3, [r7, #4]
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2301      	movs	r3, #1
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <SENSOR_IO_ReadMultiple+0x38>)
 8000840:	f7ff ff3e 	bl	80006c0 <I2Cx_ReadMultiple>
 8000844:	4603      	mov	r3, r0
 8000846:	b29b      	uxth	r3, r3
}
 8000848:	4618      	mov	r0, r3
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000c0 	.word	0x200000c0

08000854 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800085e:	2300      	movs	r3, #0
 8000860:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <BSP_ACCELERO_Init+0x74>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4798      	blx	r3
 8000868:	4603      	mov	r3, r0
 800086a:	2b6a      	cmp	r3, #106	; 0x6a
 800086c:	d002      	beq.n	8000874 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
 8000872:	e024      	b.n	80008be <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <BSP_ACCELERO_Init+0x78>)
 8000876:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <BSP_ACCELERO_Init+0x74>)
 8000878:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800087a:	2330      	movs	r3, #48	; 0x30
 800087c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8000882:	2300      	movs	r3, #0
 8000884:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8000886:	2340      	movs	r3, #64	; 0x40
 8000888:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8000892:	797a      	ldrb	r2, [r7, #5]
 8000894:	7abb      	ldrb	r3, [r7, #10]
 8000896:	4313      	orrs	r3, r2
 8000898:	b2db      	uxtb	r3, r3
 800089a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800089c:	7a3b      	ldrb	r3, [r7, #8]
 800089e:	f043 0304 	orr.w	r3, r3, #4
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <BSP_ACCELERO_Init+0x78>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	89ba      	ldrh	r2, [r7, #12]
 80008ba:	4610      	mov	r0, r2
 80008bc:	4798      	blx	r3
  }  

  return ret;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000
 80008cc:	20000114 	.word	0x20000114

080008d0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d009      	beq.n	80008f4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d004      	beq.n	80008f4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	4798      	blx	r3
    }
  }
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000114 	.word	0x20000114

08000900 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800090e:	2110      	movs	r1, #16
 8000910:	20d4      	movs	r0, #212	; 0xd4
 8000912:	f7ff ff63 	bl	80007dc <SENSOR_IO_Read>
 8000916:	4603      	mov	r3, r0
 8000918:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800091e:	7bbb      	ldrb	r3, [r7, #14]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8000926:	7bba      	ldrb	r2, [r7, #14]
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	4313      	orrs	r3, r2
 800092c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800092e:	7bbb      	ldrb	r3, [r7, #14]
 8000930:	461a      	mov	r2, r3
 8000932:	2110      	movs	r1, #16
 8000934:	20d4      	movs	r0, #212	; 0xd4
 8000936:	f7ff ff37 	bl	80007a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800093a:	2112      	movs	r1, #18
 800093c:	20d4      	movs	r0, #212	; 0xd4
 800093e:	f7ff ff4d 	bl	80007dc <SENSOR_IO_Read>
 8000942:	4603      	mov	r3, r0
 8000944:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800094e:	7bbb      	ldrb	r3, [r7, #14]
 8000950:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000954:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8000956:	7bba      	ldrb	r2, [r7, #14]
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	4313      	orrs	r3, r2
 800095c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	461a      	mov	r2, r3
 8000962:	2112      	movs	r1, #18
 8000964:	20d4      	movs	r0, #212	; 0xd4
 8000966:	f7ff ff1f 	bl	80007a8 <SENSOR_IO_Write>
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800097c:	2110      	movs	r1, #16
 800097e:	20d4      	movs	r0, #212	; 0xd4
 8000980:	f7ff ff2c 	bl	80007dc <SENSOR_IO_Read>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	f003 030f 	and.w	r3, r3, #15
 800098e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	461a      	mov	r2, r3
 8000994:	2110      	movs	r1, #16
 8000996:	20d4      	movs	r0, #212	; 0xd4
 8000998:	f7ff ff06 	bl	80007a8 <SENSOR_IO_Write>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80009a8:	f7ff fef4 	bl	8000794 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80009ac:	210f      	movs	r1, #15
 80009ae:	20d4      	movs	r0, #212	; 0xd4
 80009b0:	f7ff ff14 	bl	80007dc <SENSOR_IO_Read>
 80009b4:	4603      	mov	r3, r0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	bd80      	pop	{r7, pc}

080009ba <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80009c8:	2115      	movs	r1, #21
 80009ca:	20d4      	movs	r0, #212	; 0xd4
 80009cc:	f7ff ff06 	bl	80007dc <SENSOR_IO_Read>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f023 0310 	bic.w	r3, r3, #16
 80009da:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80009dc:	88fb      	ldrh	r3, [r7, #6]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	f043 0310 	orr.w	r3, r3, #16
 80009e8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	461a      	mov	r2, r3
 80009ee:	2115      	movs	r1, #21
 80009f0:	20d4      	movs	r0, #212	; 0xd4
 80009f2:	f7ff fed9 	bl	80007a8 <SENSOR_IO_Write>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8000a16:	2110      	movs	r1, #16
 8000a18:	20d4      	movs	r0, #212	; 0xd4
 8000a1a:	f7ff fedf 	bl	80007dc <SENSOR_IO_Read>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8000a22:	f107 0208 	add.w	r2, r7, #8
 8000a26:	2306      	movs	r3, #6
 8000a28:	2128      	movs	r1, #40	; 0x28
 8000a2a:	20d4      	movs	r0, #212	; 0xd4
 8000a2c:	f7ff fef4 	bl	8000818 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	77fb      	strb	r3, [r7, #31]
 8000a34:	e01c      	b.n	8000a70 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	3320      	adds	r3, #32
 8000a3e:	443b      	add	r3, r7
 8000a40:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	7ffb      	ldrb	r3, [r7, #31]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	3320      	adds	r3, #32
 8000a50:	443b      	add	r3, r7
 8000a52:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4413      	add	r3, r2
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	b212      	sxth	r2, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	3320      	adds	r3, #32
 8000a64:	443b      	add	r3, r7
 8000a66:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8000a6a:	7ffb      	ldrb	r3, [r7, #31]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	77fb      	strb	r3, [r7, #31]
 8000a70:	7ffb      	ldrb	r3, [r7, #31]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d9df      	bls.n	8000a36 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8000a76:	7dfb      	ldrb	r3, [r7, #23]
 8000a78:	f003 030c 	and.w	r3, r3, #12
 8000a7c:	2b0c      	cmp	r3, #12
 8000a7e:	d829      	bhi.n	8000ad4 <LSM6DSL_AccReadXYZ+0xd4>
 8000a80:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <LSM6DSL_AccReadXYZ+0x88>)
 8000a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a86:	bf00      	nop
 8000a88:	08000abd 	.word	0x08000abd
 8000a8c:	08000ad5 	.word	0x08000ad5
 8000a90:	08000ad5 	.word	0x08000ad5
 8000a94:	08000ad5 	.word	0x08000ad5
 8000a98:	08000acf 	.word	0x08000acf
 8000a9c:	08000ad5 	.word	0x08000ad5
 8000aa0:	08000ad5 	.word	0x08000ad5
 8000aa4:	08000ad5 	.word	0x08000ad5
 8000aa8:	08000ac3 	.word	0x08000ac3
 8000aac:	08000ad5 	.word	0x08000ad5
 8000ab0:	08000ad5 	.word	0x08000ad5
 8000ab4:	08000ad5 	.word	0x08000ad5
 8000ab8:	08000ac9 	.word	0x08000ac9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <LSM6DSL_AccReadXYZ+0x120>)
 8000abe:	61bb      	str	r3, [r7, #24]
    break;
 8000ac0:	e008      	b.n	8000ad4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <LSM6DSL_AccReadXYZ+0x124>)
 8000ac4:	61bb      	str	r3, [r7, #24]
    break;
 8000ac6:	e005      	b.n	8000ad4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <LSM6DSL_AccReadXYZ+0x128>)
 8000aca:	61bb      	str	r3, [r7, #24]
    break;
 8000acc:	e002      	b.n	8000ad4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <LSM6DSL_AccReadXYZ+0x12c>)
 8000ad0:	61bb      	str	r3, [r7, #24]
    break;    
 8000ad2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	77fb      	strb	r3, [r7, #31]
 8000ad8:	e01a      	b.n	8000b10 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8000ada:	7ffb      	ldrb	r3, [r7, #31]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	3320      	adds	r3, #32
 8000ae0:	443b      	add	r3, r7
 8000ae2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000ae6:	ee07 3a90 	vmov	s15, r3
 8000aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000aee:	edd7 7a06 	vldr	s15, [r7, #24]
 8000af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af6:	7ffb      	ldrb	r3, [r7, #31]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b02:	ee17 2a90 	vmov	r2, s15
 8000b06:	b212      	sxth	r2, r2
 8000b08:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	77fb      	strb	r3, [r7, #31]
 8000b10:	7ffb      	ldrb	r3, [r7, #31]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d9e1      	bls.n	8000ada <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	3d79db23 	.word	0x3d79db23
 8000b24:	3df9db23 	.word	0x3df9db23
 8000b28:	3e79db23 	.word	0x3e79db23
 8000b2c:	3ef9db23 	.word	0x3ef9db23

08000b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 f960 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f80d 	bl	8000b60 <HAL_InitTick>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	e001      	b.n	8000b56 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b52:	f003 ffab 	bl	8004aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d023      	beq.n	8000bbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_InitTick+0x70>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_InitTick+0x6c>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f96d 	bl	8000e6a <HAL_SYSTICK_Config>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d10f      	bne.n	8000bb6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d809      	bhi.n	8000bb0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 f937 	bl	8000e16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <HAL_InitTick+0x74>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e007      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e004      	b.n	8000bc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	73fb      	strb	r3, [r7, #15]
 8000bba:	e001      	b.n	8000bc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000038 	.word	0x20000038
 8000bd0:	2000003c 	.word	0x2000003c
 8000bd4:	20000034 	.word	0x20000034

08000bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_IncTick+0x20>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x24>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <HAL_IncTick+0x24>)
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000038 	.word	0x20000038
 8000bfc:	20000118 	.word	0x20000118

08000c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return uwTick;
 8000c04:	4b03      	ldr	r3, [pc, #12]	; (8000c14 <HAL_GetTick+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000118 	.word	0x20000118

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff ffee 	bl	8000c00 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffde 	bl	8000c00 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000038 	.word	0x20000038

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	; (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	; (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	; (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	; 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	; 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	e166      	b.n	8001162 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 8158 	beq.w	800115c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <HAL_GPIO_Init+0x40>
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	f003 0201 	and.w	r2, r3, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d123      	bne.n	8000fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	6939      	ldr	r1, [r7, #16]
 8000fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0203 	and.w	r2, r3, #3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80b2 	beq.w	800115c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b61      	ldr	r3, [pc, #388]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffc:	4a60      	ldr	r2, [pc, #384]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6613      	str	r3, [r2, #96]	; 0x60
 8001004:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001010:	4a5c      	ldr	r2, [pc, #368]	; (8001184 <HAL_GPIO_Init+0x300>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800103a:	d02b      	beq.n	8001094 <HAL_GPIO_Init+0x210>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <HAL_GPIO_Init+0x304>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d025      	beq.n	8001090 <HAL_GPIO_Init+0x20c>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a51      	ldr	r2, [pc, #324]	; (800118c <HAL_GPIO_Init+0x308>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d01f      	beq.n	800108c <HAL_GPIO_Init+0x208>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a50      	ldr	r2, [pc, #320]	; (8001190 <HAL_GPIO_Init+0x30c>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d019      	beq.n	8001088 <HAL_GPIO_Init+0x204>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4f      	ldr	r2, [pc, #316]	; (8001194 <HAL_GPIO_Init+0x310>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d013      	beq.n	8001084 <HAL_GPIO_Init+0x200>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4e      	ldr	r2, [pc, #312]	; (8001198 <HAL_GPIO_Init+0x314>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d00d      	beq.n	8001080 <HAL_GPIO_Init+0x1fc>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4d      	ldr	r2, [pc, #308]	; (800119c <HAL_GPIO_Init+0x318>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d007      	beq.n	800107c <HAL_GPIO_Init+0x1f8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a4c      	ldr	r2, [pc, #304]	; (80011a0 <HAL_GPIO_Init+0x31c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d101      	bne.n	8001078 <HAL_GPIO_Init+0x1f4>
 8001074:	2307      	movs	r3, #7
 8001076:	e00e      	b.n	8001096 <HAL_GPIO_Init+0x212>
 8001078:	2308      	movs	r3, #8
 800107a:	e00c      	b.n	8001096 <HAL_GPIO_Init+0x212>
 800107c:	2306      	movs	r3, #6
 800107e:	e00a      	b.n	8001096 <HAL_GPIO_Init+0x212>
 8001080:	2305      	movs	r3, #5
 8001082:	e008      	b.n	8001096 <HAL_GPIO_Init+0x212>
 8001084:	2304      	movs	r3, #4
 8001086:	e006      	b.n	8001096 <HAL_GPIO_Init+0x212>
 8001088:	2303      	movs	r3, #3
 800108a:	e004      	b.n	8001096 <HAL_GPIO_Init+0x212>
 800108c:	2302      	movs	r3, #2
 800108e:	e002      	b.n	8001096 <HAL_GPIO_Init+0x212>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_GPIO_Init+0x212>
 8001094:	2300      	movs	r3, #0
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	f002 0203 	and.w	r2, r2, #3
 800109c:	0092      	lsls	r2, r2, #2
 800109e:	4093      	lsls	r3, r2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a6:	4937      	ldr	r1, [pc, #220]	; (8001184 <HAL_GPIO_Init+0x300>)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010b4:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_GPIO_Init+0x320>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d8:	4a32      	ldr	r2, [pc, #200]	; (80011a4 <HAL_GPIO_Init+0x320>)
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <HAL_GPIO_Init+0x320>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001102:	4a28      	ldr	r2, [pc, #160]	; (80011a4 <HAL_GPIO_Init+0x320>)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001108:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <HAL_GPIO_Init+0x320>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d003      	beq.n	800112c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_GPIO_Init+0x320>)
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <HAL_GPIO_Init+0x320>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001156:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <HAL_GPIO_Init+0x320>)
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3301      	adds	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	fa22 f303 	lsr.w	r3, r2, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	f47f ae91 	bne.w	8000e94 <HAL_GPIO_Init+0x10>
  }
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	371c      	adds	r7, #28
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	40021000 	.word	0x40021000
 8001184:	40010000 	.word	0x40010000
 8001188:	48000400 	.word	0x48000400
 800118c:	48000800 	.word	0x48000800
 8001190:	48000c00 	.word	0x48000c00
 8001194:	48001000 	.word	0x48001000
 8001198:	48001400 	.word	0x48001400
 800119c:	48001800 	.word	0x48001800
 80011a0:	48001c00 	.word	0x48001c00
 80011a4:	40010400 	.word	0x40010400

080011a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80011b6:	e0c9      	b.n	800134c <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80011b8:	2201      	movs	r2, #1
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80bc 	beq.w	8001346 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80011ce:	4a66      	ldr	r2, [pc, #408]	; (8001368 <HAL_GPIO_DeInit+0x1c0>)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f6:	d02b      	beq.n	8001250 <HAL_GPIO_DeInit+0xa8>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a5c      	ldr	r2, [pc, #368]	; (800136c <HAL_GPIO_DeInit+0x1c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d025      	beq.n	800124c <HAL_GPIO_DeInit+0xa4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a5b      	ldr	r2, [pc, #364]	; (8001370 <HAL_GPIO_DeInit+0x1c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d01f      	beq.n	8001248 <HAL_GPIO_DeInit+0xa0>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <HAL_GPIO_DeInit+0x1cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d019      	beq.n	8001244 <HAL_GPIO_DeInit+0x9c>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a59      	ldr	r2, [pc, #356]	; (8001378 <HAL_GPIO_DeInit+0x1d0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d013      	beq.n	8001240 <HAL_GPIO_DeInit+0x98>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a58      	ldr	r2, [pc, #352]	; (800137c <HAL_GPIO_DeInit+0x1d4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d00d      	beq.n	800123c <HAL_GPIO_DeInit+0x94>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a57      	ldr	r2, [pc, #348]	; (8001380 <HAL_GPIO_DeInit+0x1d8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <HAL_GPIO_DeInit+0x90>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a56      	ldr	r2, [pc, #344]	; (8001384 <HAL_GPIO_DeInit+0x1dc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d101      	bne.n	8001234 <HAL_GPIO_DeInit+0x8c>
 8001230:	2307      	movs	r3, #7
 8001232:	e00e      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 8001234:	2308      	movs	r3, #8
 8001236:	e00c      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 8001238:	2306      	movs	r3, #6
 800123a:	e00a      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 800123c:	2305      	movs	r3, #5
 800123e:	e008      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 8001240:	2304      	movs	r3, #4
 8001242:	e006      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 8001244:	2303      	movs	r3, #3
 8001246:	e004      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 8001248:	2302      	movs	r3, #2
 800124a:	e002      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_GPIO_DeInit+0xaa>
 8001250:	2300      	movs	r3, #0
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	f002 0203 	and.w	r2, r2, #3
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	4093      	lsls	r3, r2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	429a      	cmp	r2, r3
 8001260:	d132      	bne.n	80012c8 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001262:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	4947      	ldr	r1, [pc, #284]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 800126c:	4013      	ands	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001270:	4b45      	ldr	r3, [pc, #276]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	43db      	mvns	r3, r3
 8001278:	4943      	ldr	r1, [pc, #268]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 800127a:	4013      	ands	r3, r2
 800127c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800127e:	4b42      	ldr	r3, [pc, #264]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 8001280:	68da      	ldr	r2, [r3, #12]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	4940      	ldr	r1, [pc, #256]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 8001288:	4013      	ands	r3, r2
 800128a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800128c:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	493c      	ldr	r1, [pc, #240]	; (8001388 <HAL_GPIO_DeInit+0x1e0>)
 8001296:	4013      	ands	r3, r2
 8001298:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80012aa:	4a2f      	ldr	r2, [pc, #188]	; (8001368 <HAL_GPIO_DeInit+0x1c0>)
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	43da      	mvns	r2, r3
 80012ba:	482b      	ldr	r0, [pc, #172]	; (8001368 <HAL_GPIO_DeInit+0x1c0>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	400a      	ands	r2, r1
 80012c2:	3302      	adds	r3, #2
 80012c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2103      	movs	r1, #3
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	08d2      	lsrs	r2, r2, #3
 80012fc:	4019      	ands	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2103      	movs	r1, #3
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68da      	ldr	r2, [r3, #12]
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2103      	movs	r1, #3
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	401a      	ands	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f47f af2f 	bne.w	80011b8 <HAL_GPIO_DeInit+0x10>
  }
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40010000 	.word	0x40010000
 800136c:	48000400 	.word	0x48000400
 8001370:	48000800 	.word	0x48000800
 8001374:	48000c00 	.word	0x48000c00
 8001378:	48001000 	.word	0x48001000
 800137c:	48001400 	.word	0x48001400
 8001380:	48001800 	.word	0x48001800
 8001384:	48001c00 	.word	0x48001c00
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e081      	b.n	80014d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 fb86 	bl	8004af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2224      	movs	r2, #36	; 0x24
 80013ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800140c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800141c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e006      	b.n	8001444 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001442:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d104      	bne.n	8001456 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001454:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001468:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001478:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69d9      	ldr	r1, [r3, #28]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e021      	b.n	8001530 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2224      	movs	r2, #36	; 0x24
 80014f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f003 fbdd 	bl	8004cc4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4603      	mov	r3, r0
 8001548:	817b      	strh	r3, [r7, #10]
 800154a:	460b      	mov	r3, r1
 800154c:	813b      	strh	r3, [r7, #8]
 800154e:	4613      	mov	r3, r2
 8001550:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b20      	cmp	r3, #32
 800155c:	f040 80f9 	bne.w	8001752 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <HAL_I2C_Mem_Write+0x34>
 8001566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001568:	2b00      	cmp	r3, #0
 800156a:	d105      	bne.n	8001578 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001572:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0ed      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_I2C_Mem_Write+0x4e>
 8001582:	2302      	movs	r3, #2
 8001584:	e0e6      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800158e:	f7ff fb37 	bl	8000c00 <HAL_GetTick>
 8001592:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2319      	movs	r3, #25
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fac3 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0d1      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2221      	movs	r2, #33	; 0x21
 80015b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2240      	movs	r2, #64	; 0x40
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6a3a      	ldr	r2, [r7, #32]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80015d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015d8:	88f8      	ldrh	r0, [r7, #6]
 80015da:	893a      	ldrh	r2, [r7, #8]
 80015dc:	8979      	ldrh	r1, [r7, #10]
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	4603      	mov	r3, r0
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f9d3 	bl	8001994 <I2C_RequestMemoryWrite>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0a9      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	2bff      	cmp	r3, #255	; 0xff
 8001608:	d90e      	bls.n	8001628 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	22ff      	movs	r2, #255	; 0xff
 800160e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001614:	b2da      	uxtb	r2, r3
 8001616:	8979      	ldrh	r1, [r7, #10]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fc2b 	bl	8001e7c <I2C_TransferConfig>
 8001626:	e00f      	b.n	8001648 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	b2da      	uxtb	r2, r3
 8001638:	8979      	ldrh	r1, [r7, #10]
 800163a:	2300      	movs	r3, #0
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 fc1a 	bl	8001e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 faad 	bl	8001bac <I2C_WaitOnTXISFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e07b      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	781a      	ldrb	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001676:	b29b      	uxth	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d034      	beq.n	8001700 <HAL_I2C_Mem_Write+0x1c8>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169a:	2b00      	cmp	r3, #0
 800169c:	d130      	bne.n	8001700 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a4:	2200      	movs	r2, #0
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 fa3f 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e04d      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	2bff      	cmp	r3, #255	; 0xff
 80016c0:	d90e      	bls.n	80016e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	22ff      	movs	r2, #255	; 0xff
 80016c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	8979      	ldrh	r1, [r7, #10]
 80016d0:	2300      	movs	r3, #0
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 fbcf 	bl	8001e7c <I2C_TransferConfig>
 80016de:	e00f      	b.n	8001700 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fbbe 	bl	8001e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d19e      	bne.n	8001648 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fa8c 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e01a      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2220      	movs	r2, #32
 8001724:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_I2C_Mem_Write+0x224>)
 8001732:	400b      	ands	r3, r1
 8001734:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2220      	movs	r2, #32
 800173a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e000      	b.n	8001754 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001752:	2302      	movs	r3, #2
  }
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	fe00e800 	.word	0xfe00e800

08001760 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	817b      	strh	r3, [r7, #10]
 8001772:	460b      	mov	r3, r1
 8001774:	813b      	strh	r3, [r7, #8]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	f040 80fd 	bne.w	8001982 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_I2C_Mem_Read+0x34>
 800178e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0f1      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_I2C_Mem_Read+0x4e>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e0ea      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017b6:	f7ff fa23 	bl	8000c00 <HAL_GetTick>
 80017ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2319      	movs	r3, #25
 80017c2:	2201      	movs	r2, #1
 80017c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 f9af 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0d5      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2222      	movs	r2, #34	; 0x22
 80017dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2240      	movs	r2, #64	; 0x40
 80017e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2200      	movs	r2, #0
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001800:	88f8      	ldrh	r0, [r7, #6]
 8001802:	893a      	ldrh	r2, [r7, #8]
 8001804:	8979      	ldrh	r1, [r7, #10]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	4603      	mov	r3, r0
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 f913 	bl	8001a3c <I2C_RequestMemoryRead>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0ad      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d90e      	bls.n	8001850 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	22ff      	movs	r2, #255	; 0xff
 8001836:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	b2da      	uxtb	r2, r3
 800183e:	8979      	ldrh	r1, [r7, #10]
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_I2C_Mem_Read+0x22c>)
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 fb17 	bl	8001e7c <I2C_TransferConfig>
 800184e:	e00f      	b.n	8001870 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	b2da      	uxtb	r2, r3
 8001860:	8979      	ldrh	r1, [r7, #10]
 8001862:	4b4a      	ldr	r3, [pc, #296]	; (800198c <HAL_I2C_Mem_Read+0x22c>)
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fb06 	bl	8001e7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	2200      	movs	r2, #0
 8001878:	2104      	movs	r1, #4
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 f956 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07c      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d034      	beq.n	8001930 <HAL_I2C_Mem_Read+0x1d0>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d130      	bne.n	8001930 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d4:	2200      	movs	r2, #0
 80018d6:	2180      	movs	r1, #128	; 0x80
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f000 f927 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e04d      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d90e      	bls.n	8001910 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	22ff      	movs	r2, #255	; 0xff
 80018f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	8979      	ldrh	r1, [r7, #10]
 8001900:	2300      	movs	r3, #0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fab7 	bl	8001e7c <I2C_TransferConfig>
 800190e:	e00f      	b.n	8001930 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29a      	uxth	r2, r3
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	b2da      	uxtb	r2, r3
 8001920:	8979      	ldrh	r1, [r7, #10]
 8001922:	2300      	movs	r3, #0
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 faa6 	bl	8001e7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29b      	uxth	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d19a      	bne.n	8001870 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 f974 	bl	8001c2c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e01a      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2220      	movs	r2, #32
 8001954:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <HAL_I2C_Mem_Read+0x230>)
 8001962:	400b      	ands	r3, r1
 8001964:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	80002400 	.word	0x80002400
 8001990:	fe00e800 	.word	0xfe00e800

08001994 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af02      	add	r7, sp, #8
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	460b      	mov	r3, r1
 80019a8:	813b      	strh	r3, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	8979      	ldrh	r1, [r7, #10]
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <I2C_RequestMemoryWrite+0xa4>)
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fa5d 	bl	8001e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c2:	69fa      	ldr	r2, [r7, #28]
 80019c4:	69b9      	ldr	r1, [r7, #24]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f8f0 	bl	8001bac <I2C_WaitOnTXISFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e02c      	b.n	8001a30 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	629a      	str	r2, [r3, #40]	; 0x28
 80019e6:	e015      	b.n	8001a14 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80019e8:	893b      	ldrh	r3, [r7, #8]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f6:	69fa      	ldr	r2, [r7, #28]
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f8d6 	bl	8001bac <I2C_WaitOnTXISFlagUntilTimeout>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e012      	b.n	8001a30 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a0a:	893b      	ldrh	r3, [r7, #8]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2180      	movs	r1, #128	; 0x80
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 f884 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	80002000 	.word	0x80002000

08001a3c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	817b      	strh	r3, [r7, #10]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	813b      	strh	r3, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	8979      	ldrh	r1, [r7, #10]
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <I2C_RequestMemoryRead+0xa4>)
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fa0a 	bl	8001e7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a68:	69fa      	ldr	r2, [r7, #28]
 8001a6a:	69b9      	ldr	r1, [r7, #24]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f89d 	bl	8001bac <I2C_WaitOnTXISFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e02c      	b.n	8001ad6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d105      	bne.n	8001a8e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001a82:	893b      	ldrh	r3, [r7, #8]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8001a8c:	e015      	b.n	8001aba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001a8e:	893b      	ldrh	r3, [r7, #8]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	69b9      	ldr	r1, [r7, #24]
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f000 f883 	bl	8001bac <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e012      	b.n	8001ad6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab0:	893b      	ldrh	r3, [r7, #8]
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2140      	movs	r1, #64	; 0x40
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 f831 	bl	8001b2c <I2C_WaitOnFlagUntilTimeout>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	80002000 	.word	0x80002000

08001ae4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d007      	beq.n	8001b20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0201 	orr.w	r2, r2, #1
 8001b1e:	619a      	str	r2, [r3, #24]
  }
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b3c:	e022      	b.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b44:	d01e      	beq.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b46:	f7ff f85b 	bl	8000c00 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d302      	bcc.n	8001b5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d113      	bne.n	8001b84 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	f043 0220 	orr.w	r2, r3, #32
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e00f      	b.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699a      	ldr	r2, [r3, #24]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	bf0c      	ite	eq
 8001b94:	2301      	moveq	r3, #1
 8001b96:	2300      	movne	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d0cd      	beq.n	8001b3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bb8:	e02c      	b.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	68b9      	ldr	r1, [r7, #8]
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f000 f870 	bl	8001ca4 <I2C_IsErrorOccurred>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e02a      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd4:	d01e      	beq.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd6:	f7ff f813 	bl	8000c00 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d302      	bcc.n	8001bec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	f043 0220 	orr.w	r2, r3, #32
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e007      	b.n	8001c24 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d1cb      	bne.n	8001bba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c38:	e028      	b.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 f830 	bl	8001ca4 <I2C_IsErrorOccurred>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e026      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4e:	f7fe ffd7 	bl	8000c00 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d302      	bcc.n	8001c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d113      	bne.n	8001c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0220 	orr.w	r2, r3, #32
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e007      	b.n	8001c9c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0320 	and.w	r3, r3, #32
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d1cf      	bne.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d075      	beq.n	8001dbc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cd8:	e056      	b.n	8001d88 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce0:	d052      	beq.n	8001d88 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ce2:	f7fe ff8d 	bl	8000c00 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d302      	bcc.n	8001cf8 <I2C_IsErrorOccurred+0x54>
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d147      	bne.n	8001d88 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d0a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1a:	d12e      	bne.n	8001d7a <I2C_IsErrorOccurred+0xd6>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d22:	d02a      	beq.n	8001d7a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d24:	7cfb      	ldrb	r3, [r7, #19]
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d027      	beq.n	8001d7a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d38:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d3a:	f7fe ff61 	bl	8000c00 <HAL_GetTick>
 8001d3e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d40:	e01b      	b.n	8001d7a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d42:	f7fe ff5d 	bl	8000c00 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b19      	cmp	r3, #25
 8001d4e:	d914      	bls.n	8001d7a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f043 0220 	orr.w	r2, r3, #32
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d1dc      	bne.n	8001d42 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d003      	beq.n	8001d9e <I2C_IsErrorOccurred+0xfa>
 8001d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d09d      	beq.n	8001cda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d103      	bne.n	8001dae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2220      	movs	r2, #32
 8001dac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e22:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01c      	beq.n	8001e6c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f7ff fe56 	bl	8001ae4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6859      	ldr	r1, [r3, #4]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <I2C_IsErrorOccurred+0x1d4>)
 8001e44:	400b      	ands	r3, r1
 8001e46:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3728      	adds	r7, #40	; 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	fe00e800 	.word	0xfe00e800

08001e7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	817b      	strh	r3, [r7, #10]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e94:	7a7b      	ldrb	r3, [r7, #9]
 8001e96:	041b      	lsls	r3, r3, #16
 8001e98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eaa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	0d5b      	lsrs	r3, r3, #21
 8001eb6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <I2C_TransferConfig+0x60>)
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	ea02 0103 	and.w	r1, r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	03ff63ff 	.word	0x03ff63ff

08001ee0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d138      	bne.n	8001f68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e032      	b.n	8001f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	; 0x24
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0201 	orr.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b20      	cmp	r3, #32
 8001f8a:	d139      	bne.n	8002000 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e033      	b.n	8002002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2224      	movs	r2, #36	; 0x24
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0201 	bic.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e000      	b.n	8002002 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002000:	2302      	movs	r3, #2
  }
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_PWREx_GetVoltageRange+0x3c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800201c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002020:	d102      	bne.n	8002028 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002026:	e00b      	b.n	8002040 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <HAL_PWREx_GetVoltageRange+0x3c>)
 800202a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002036:	d102      	bne.n	800203e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203c:	e000      	b.n	8002040 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800203e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40007000 	.word	0x40007000

08002050 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d141      	bne.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800205e:	4b4b      	ldr	r3, [pc, #300]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206a:	d131      	bne.n	80020d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800206c:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002072:	4a46      	ldr	r2, [pc, #280]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800207c:	4b43      	ldr	r3, [pc, #268]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002084:	4a41      	ldr	r2, [pc, #260]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2232      	movs	r2, #50	; 0x32
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	4a3f      	ldr	r2, [pc, #252]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	0c9b      	lsrs	r3, r3, #18
 800209e:	3301      	adds	r3, #1
 80020a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a2:	e002      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020aa:	4b38      	ldr	r3, [pc, #224]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d102      	bne.n	80020be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f2      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020be:	4b33      	ldr	r3, [pc, #204]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ca:	d158      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e057      	b.n	8002180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d0:	4b2e      	ldr	r3, [pc, #184]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020d6:	4a2d      	ldr	r2, [pc, #180]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020e0:	e04d      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e8:	d141      	bne.n	800216e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ea:	4b28      	ldr	r3, [pc, #160]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f6:	d131      	bne.n	800215c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f8:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020fe:	4a23      	ldr	r2, [pc, #140]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002110:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002116:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002118:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2232      	movs	r2, #50	; 0x32
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a1c      	ldr	r2, [pc, #112]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9b      	lsrs	r3, r3, #18
 800212a:	3301      	adds	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800212e:	e002      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	3b01      	subs	r3, #1
 8002134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d102      	bne.n	800214a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f2      	bne.n	8002130 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002156:	d112      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e011      	b.n	8002180 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002162:	4a0a      	ldr	r2, [pc, #40]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800216c:	e007      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002176:	4a05      	ldr	r2, [pc, #20]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002178:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40007000 	.word	0x40007000
 8002190:	2000003c 	.word	0x2000003c
 8002194:	431bde83 	.word	0x431bde83

08002198 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f000 bc08 	b.w	80029bc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4b96      	ldr	r3, [pc, #600]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b6:	4b94      	ldr	r3, [pc, #592]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80e4 	beq.w	8002396 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4c>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	f040 808b 	bne.w	80022f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	f040 8087 	bne.w	80022f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e4:	4b88      	ldr	r3, [pc, #544]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x64>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e3df      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1a      	ldr	r2, [r3, #32]
 8002200:	4b81      	ldr	r3, [pc, #516]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_RCC_OscConfig+0x7e>
 800220c:	4b7e      	ldr	r3, [pc, #504]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002214:	e005      	b.n	8002222 <HAL_RCC_OscConfig+0x8a>
 8002216:	4b7c      	ldr	r3, [pc, #496]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002222:	4293      	cmp	r3, r2
 8002224:	d223      	bcs.n	800226e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4618      	mov	r0, r3
 800222c:	f000 fdcc 	bl	8002dc8 <RCC_SetFlashLatencyFromMSIRange>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e3c0      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800223a:	4b73      	ldr	r3, [pc, #460]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b70      	ldr	r3, [pc, #448]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	496d      	ldr	r1, [pc, #436]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002258:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	021b      	lsls	r3, r3, #8
 8002266:	4968      	ldr	r1, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
 800226c:	e025      	b.n	80022ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226e:	4b66      	ldr	r3, [pc, #408]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a65      	ldr	r2, [pc, #404]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b63      	ldr	r3, [pc, #396]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4960      	ldr	r1, [pc, #384]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228c:	4b5e      	ldr	r3, [pc, #376]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	495b      	ldr	r1, [pc, #364]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d109      	bne.n	80022ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fd8c 	bl	8002dc8 <RCC_SetFlashLatencyFromMSIRange>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e380      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ba:	f000 fcc1 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	4950      	ldr	r1, [pc, #320]	; (800240c <HAL_RCC_OscConfig+0x274>)
 80022cc:	5ccb      	ldrb	r3, [r1, r3]
 80022ce:	f003 031f 	and.w	r3, r3, #31
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	4a4e      	ldr	r2, [pc, #312]	; (8002410 <HAL_RCC_OscConfig+0x278>)
 80022d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022da:	4b4e      	ldr	r3, [pc, #312]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fc3e 	bl	8000b60 <HAL_InitTick>
 80022e4:	4603      	mov	r3, r0
 80022e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d052      	beq.n	8002394 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	e364      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d032      	beq.n	8002360 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a42      	ldr	r2, [pc, #264]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002306:	f7fe fc7b 	bl	8000c00 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800230e:	f7fe fc77 	bl	8000c00 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e34d      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232c:	4b36      	ldr	r3, [pc, #216]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a35      	ldr	r2, [pc, #212]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b33      	ldr	r3, [pc, #204]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	4930      	ldr	r1, [pc, #192]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234a:	4b2f      	ldr	r3, [pc, #188]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	492b      	ldr	r1, [pc, #172]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
 800235e:	e01a      	b.n	8002396 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a28      	ldr	r2, [pc, #160]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236c:	f7fe fc48 	bl	8000c00 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002374:	f7fe fc44 	bl	8000c00 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e31a      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0x1dc>
 8002392:	e000      	b.n	8002396 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002394:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d073      	beq.n	800248a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x21c>
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d10e      	bne.n	80023cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d10b      	bne.n	80023cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b4:	4b14      	ldr	r3, [pc, #80]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d063      	beq.n	8002488 <HAL_RCC_OscConfig+0x2f0>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d15f      	bne.n	8002488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e2f7      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d4:	d106      	bne.n	80023e4 <HAL_RCC_OscConfig+0x24c>
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e025      	b.n	8002430 <HAL_RCC_OscConfig+0x298>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ec:	d114      	bne.n	8002418 <HAL_RCC_OscConfig+0x280>
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a02      	ldr	r2, [pc, #8]	; (8002408 <HAL_RCC_OscConfig+0x270>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e013      	b.n	8002430 <HAL_RCC_OscConfig+0x298>
 8002408:	40021000 	.word	0x40021000
 800240c:	0800591c 	.word	0x0800591c
 8002410:	2000003c 	.word	0x2000003c
 8002414:	20000034 	.word	0x20000034
 8002418:	4ba0      	ldr	r3, [pc, #640]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a9f      	ldr	r2, [pc, #636]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b9d      	ldr	r3, [pc, #628]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9c      	ldr	r2, [pc, #624]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe fbe2 	bl	8000c00 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe fbde 	bl	8000c00 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e2b4      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	4b92      	ldr	r3, [pc, #584]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x2a8>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fbce 	bl	8000c00 <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe fbca 	bl	8000c00 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e2a0      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	4b88      	ldr	r3, [pc, #544]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x2d0>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d060      	beq.n	8002558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x310>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d116      	bne.n	80024d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a8:	4b7c      	ldr	r3, [pc, #496]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x328>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e27d      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	4973      	ldr	r1, [pc, #460]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d4:	e040      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d023      	beq.n	8002526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024de:	4b6f      	ldr	r3, [pc, #444]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6e      	ldr	r2, [pc, #440]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7fe fb89 	bl	8000c00 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7fe fb85 	bl	8000c00 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e25b      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b62      	ldr	r3, [pc, #392]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	061b      	lsls	r3, r3, #24
 800251e:	495f      	ldr	r1, [pc, #380]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e018      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b5d      	ldr	r3, [pc, #372]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5c      	ldr	r2, [pc, #368]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800252c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fb65 	bl	8000c00 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253a:	f7fe fb61 	bl	8000c00 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e237      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800254c:	4b53      	ldr	r3, [pc, #332]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d03c      	beq.n	80025de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256c:	4b4b      	ldr	r3, [pc, #300]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002572:	4a4a      	ldr	r2, [pc, #296]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7fe fb40 	bl	8000c00 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7fe fb3c 	bl	8000c00 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e212      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002596:	4b41      	ldr	r3, [pc, #260]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ef      	beq.n	8002584 <HAL_RCC_OscConfig+0x3ec>
 80025a4:	e01b      	b.n	80025de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b3d      	ldr	r3, [pc, #244]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ac:	4a3b      	ldr	r2, [pc, #236]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe fb23 	bl	8000c00 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7fe fb1f 	bl	8000c00 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1f5      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ef      	bne.n	80025be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80a6 	beq.w	8002738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025f0:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10d      	bne.n	8002618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_OscConfig+0x504>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	4a26      	ldr	r2, [pc, #152]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	; 0x58
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002614:	2301      	movs	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002618:	4b21      	ldr	r3, [pc, #132]	; (80026a0 <HAL_RCC_OscConfig+0x508>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d118      	bne.n	8002656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002624:	4b1e      	ldr	r3, [pc, #120]	; (80026a0 <HAL_RCC_OscConfig+0x508>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <HAL_RCC_OscConfig+0x508>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002630:	f7fe fae6 	bl	8000c00 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe fae2 	bl	8000c00 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1b8      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCC_OscConfig+0x508>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x4d8>
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800266e:	e029      	b.n	80026c4 <HAL_RCC_OscConfig+0x52c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d115      	bne.n	80026a4 <HAL_RCC_OscConfig+0x50c>
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <HAL_RCC_OscConfig+0x504>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	4a03      	ldr	r2, [pc, #12]	; (800269c <HAL_RCC_OscConfig+0x504>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x52c>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	4b9d      	ldr	r3, [pc, #628]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	4a9c      	ldr	r2, [pc, #624]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b4:	4b99      	ldr	r3, [pc, #612]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	4a98      	ldr	r2, [pc, #608]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe fa98 	bl	8000c00 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe fa94 	bl	8000c00 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e168      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	4b8c      	ldr	r3, [pc, #560]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ed      	beq.n	80026d4 <HAL_RCC_OscConfig+0x53c>
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe fa81 	bl	8000c00 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fa7d 	bl	8000c00 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e151      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	4b80      	ldr	r3, [pc, #512]	; (800291c <HAL_RCC_OscConfig+0x784>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ed      	bne.n	8002702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b7b      	ldr	r3, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x784>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a7a      	ldr	r2, [pc, #488]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b00      	cmp	r3, #0
 8002742:	d03c      	beq.n	80027be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01c      	beq.n	8002786 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800274c:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x784>)
 800274e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002752:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275c:	f7fe fa50 	bl	8000c00 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002764:	f7fe fa4c 	bl	8000c00 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e122      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002776:	4b69      	ldr	r3, [pc, #420]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0ef      	beq.n	8002764 <HAL_RCC_OscConfig+0x5cc>
 8002784:	e01b      	b.n	80027be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002786:	4b65      	ldr	r3, [pc, #404]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800278c:	4a63      	ldr	r2, [pc, #396]	; (800291c <HAL_RCC_OscConfig+0x784>)
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002796:	f7fe fa33 	bl	8000c00 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800279e:	f7fe fa2f 	bl	8000c00 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e105      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80027b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ef      	bne.n	800279e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80f9 	beq.w	80029ba <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	f040 80cf 	bne.w	8002970 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027d2:	4b52      	ldr	r3, [pc, #328]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0203 	and.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d12c      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	3b01      	subs	r3, #1
 80027f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d123      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002802:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d11b      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002812:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002814:	429a      	cmp	r2, r3
 8002816:	d113      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002822:	085b      	lsrs	r3, r3, #1
 8002824:	3b01      	subs	r3, #1
 8002826:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d109      	bne.n	8002840 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d071      	beq.n	8002924 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d068      	beq.n	8002918 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002846:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002852:	4b32      	ldr	r3, [pc, #200]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e0ac      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a2d      	ldr	r2, [pc, #180]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800286e:	f7fe f9c7 	bl	8000c00 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe f9c3 	bl	8000c00 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e099      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <HAL_RCC_OscConfig+0x784>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1f0      	bne.n	8002876 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_RCC_OscConfig+0x784>)
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	4b21      	ldr	r3, [pc, #132]	; (8002920 <HAL_RCC_OscConfig+0x788>)
 800289a:	4013      	ands	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a4:	3a01      	subs	r2, #1
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	4311      	orrs	r1, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ae:	0212      	lsls	r2, r2, #8
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b6:	0852      	lsrs	r2, r2, #1
 80028b8:	3a01      	subs	r2, #1
 80028ba:	0552      	lsls	r2, r2, #21
 80028bc:	4311      	orrs	r1, r2
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c2:	0852      	lsrs	r2, r2, #1
 80028c4:	3a01      	subs	r2, #1
 80028c6:	0652      	lsls	r2, r2, #25
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028ce:	06d2      	lsls	r2, r2, #27
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4912      	ldr	r1, [pc, #72]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a0c      	ldr	r2, [pc, #48]	; (800291c <HAL_RCC_OscConfig+0x784>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f0:	f7fe f986 	bl	8000c00 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe f982 	bl	8000c00 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e058      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b04      	ldr	r3, [pc, #16]	; (800291c <HAL_RCC_OscConfig+0x784>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002916:	e050      	b.n	80029ba <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04f      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
 800291c:	40021000 	.word	0x40021000
 8002920:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d144      	bne.n	80029ba <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002946:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002948:	f7fe f95a 	bl	8000c00 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe f956 	bl	8000c00 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e02c      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x7b8>
 800296e:	e024      	b.n	80029ba <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d01f      	beq.n	80029b6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a12      	ldr	r2, [pc, #72]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002982:	f7fe f93d 	bl	8000c00 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7fe f939 	bl	8000c00 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e00f      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1f0      	bne.n	800298a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4905      	ldr	r1, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x82c>)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x830>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	feeefffc 	.word	0xfeeefffc

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e11d      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b90      	ldr	r3, [pc, #576]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b8d      	ldr	r3, [pc, #564]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 020f 	bic.w	r2, r3, #15
 80029fa:	498b      	ldr	r1, [pc, #556]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b89      	ldr	r3, [pc, #548]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e105      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	4b81      	ldr	r3, [pc, #516]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d908      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a30:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	497b      	ldr	r1, [pc, #492]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d079      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d11e      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a56:	4b75      	ldr	r3, [pc, #468]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e0dc      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a66:	f000 fa09 	bl	8002e7c <RCC_GetSysClockFreqFromPLLSource>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a70      	ldr	r2, [pc, #448]	; (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d946      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a72:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d140      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a7e:	4b6b      	ldr	r3, [pc, #428]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a86:	4a69      	ldr	r2, [pc, #420]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e035      	b.n	8002b00 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d107      	bne.n	8002aac <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9c:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d115      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b9      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab4:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d109      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0ad      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0a5      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002ad4:	f000 f8b4 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d90f      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002af4:	4a4d      	ldr	r2, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002afa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b00:	4b4a      	ldr	r3, [pc, #296]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 0203 	bic.w	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4947      	ldr	r1, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b12:	f7fe f875 	bl	8000c00 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b18:	e00a      	b.n	8002b30 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1a:	f7fe f871 	bl	8000c00 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e077      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b30:	4b3e      	ldr	r3, [pc, #248]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 020c 	and.w	r2, r3, #12
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d1eb      	bne.n	8002b1a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d105      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b48:	4b38      	ldr	r3, [pc, #224]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a37      	ldr	r2, [pc, #220]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b52:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d010      	beq.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d208      	bcs.n	8002b82 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	492b      	ldr	r1, [pc, #172]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b82:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d210      	bcs.n	8002bb2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 020f 	bic.w	r2, r3, #15
 8002b98:	4923      	ldr	r1, [pc, #140]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_RCC_ClockConfig+0x25c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e036      	b.n	8002c20 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bbe:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4918      	ldr	r1, [pc, #96]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4910      	ldr	r1, [pc, #64]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf0:	f000 f826 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCC_ClockConfig+0x260>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	490c      	ldr	r1, [pc, #48]	; (8002c34 <HAL_RCC_ClockConfig+0x268>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0c:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <HAL_RCC_ClockConfig+0x26c>)
 8002c0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c10:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <HAL_RCC_ClockConfig+0x270>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd ffa3 	bl	8000b60 <HAL_InitTick>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	04c4b400 	.word	0x04c4b400
 8002c34:	0800591c 	.word	0x0800591c
 8002c38:	2000003c 	.word	0x2000003c
 8002c3c:	20000034 	.word	0x20000034

08002c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c4e:	4b3e      	ldr	r3, [pc, #248]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x34>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d121      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d11e      	bne.n	8002cb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c74:	4b34      	ldr	r3, [pc, #208]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d107      	bne.n	8002c90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c80:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	e005      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c90:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	091b      	lsrs	r3, r3, #4
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c9c:	4a2b      	ldr	r2, [pc, #172]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10d      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d102      	bne.n	8002cbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cba:	61bb      	str	r3, [r7, #24]
 8002cbc:	e004      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cc4:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d134      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d003      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0xac>
 8002ce4:	e005      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ce8:	617b      	str	r3, [r7, #20]
      break;
 8002cea:	e005      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cee:	617b      	str	r3, [r7, #20]
      break;
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	617b      	str	r3, [r7, #20]
      break;
 8002cf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	3301      	adds	r3, #1
 8002d04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	0a1b      	lsrs	r3, r3, #8
 8002d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	fb03 f202 	mul.w	r2, r3, r2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	0e5b      	lsrs	r3, r3, #25
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d38:	69bb      	ldr	r3, [r7, #24]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	; 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	08005934 	.word	0x08005934
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000003c 	.word	0x2000003c

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d74:	f7ff fff0 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4904      	ldr	r1, [pc, #16]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40021000 	.word	0x40021000
 8002d98:	0800592c 	.word	0x0800592c

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002da0:	f7ff ffda 	bl	8002d58 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	0adb      	lsrs	r3, r3, #11
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	0800592c 	.word	0x0800592c

08002dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de0:	f7ff f916 	bl	8002010 <HAL_PWREx_GetVoltageRange>
 8002de4:	6178      	str	r0, [r7, #20]
 8002de6:	e014      	b.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002de8:	4b22      	ldr	r3, [pc, #136]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6593      	str	r3, [r2, #88]	; 0x58
 8002df4:	4b1f      	ldr	r3, [pc, #124]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e00:	f7ff f906 	bl	8002010 <HAL_PWREx_GetVoltageRange>
 8002e04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b1b      	ldr	r3, [pc, #108]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	4a1a      	ldr	r2, [pc, #104]	; (8002e74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e18:	d10b      	bne.n	8002e32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d913      	bls.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2ba0      	cmp	r3, #160	; 0xa0
 8002e24:	d902      	bls.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e26:	2302      	movs	r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	e00d      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	e00a      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b7f      	cmp	r3, #127	; 0x7f
 8002e36:	d902      	bls.n	8002e3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002e38:	2302      	movs	r3, #2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	e004      	b.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b70      	cmp	r3, #112	; 0x70
 8002e42:	d101      	bne.n	8002e48 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e44:	2301      	movs	r3, #1
 8002e46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 020f 	bic.w	r2, r3, #15
 8002e50:	4909      	ldr	r1, [pc, #36]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d001      	beq.n	8002e6a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40022000 	.word	0x40022000

08002e7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b03      	cmp	r3, #3
 8002e90:	d00b      	beq.n	8002eaa <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d825      	bhi.n	8002ee4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d008      	beq.n	8002eb0 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d11f      	bne.n	8002ee4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002ea6:	613b      	str	r3, [r7, #16]
    break;
 8002ea8:	e01f      	b.n	8002eea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002eaa:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002eac:	613b      	str	r3, [r7, #16]
    break;
 8002eae:	e01c      	b.n	8002eea <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e005      	b.n	8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ecc:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	613b      	str	r3, [r7, #16]
    break;
 8002ee2:	e002      	b.n	8002eea <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
    break;
 8002ee8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eea:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	fb03 f202 	mul.w	r2, r3, r2
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0e5b      	lsrs	r3, r3, #25
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002f2a:	683b      	ldr	r3, [r7, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	007a1200 	.word	0x007a1200
 8002f44:	08005934 	.word	0x08005934

08002f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f50:	2300      	movs	r3, #0
 8002f52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f54:	2300      	movs	r3, #0
 8002f56:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d040      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d02a      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d825      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f70:	2b60      	cmp	r3, #96	; 0x60
 8002f72:	d026      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f74:	2b60      	cmp	r3, #96	; 0x60
 8002f76:	d821      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d006      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d81d      	bhi.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d009      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d010      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f88:	e018      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f8a:	4b89      	ldr	r3, [pc, #548]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4a88      	ldr	r2, [pc, #544]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f96:	e015      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fb02 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fa8:	e00c      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3320      	adds	r3, #32
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fbed 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fba:	e003      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	74fb      	strb	r3, [r7, #19]
      break;
 8002fc0:	e000      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10b      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fca:	4b79      	ldr	r3, [pc, #484]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fd0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fd8:	4975      	ldr	r1, [pc, #468]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fe0:	e001      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d047      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffa:	d030      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d82a      	bhi.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003006:	d02a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d824      	bhi.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800300e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003012:	d008      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003018:	d81e      	bhi.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800301e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003022:	d010      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003024:	e018      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003026:	4b62      	ldr	r3, [pc, #392]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003030:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003032:	e015      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3304      	adds	r3, #4
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fab4 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003044:	e00c      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3320      	adds	r3, #32
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fb9f 	bl	8003790 <RCCEx_PLLSAI2_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	74fb      	strb	r3, [r7, #19]
      break;
 800305c:	e000      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800305e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10b      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003066:	4b52      	ldr	r3, [pc, #328]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003068:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800306c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	494e      	ldr	r1, [pc, #312]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800307c:	e001      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 809f 	beq.w	80031ce <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003094:	4b46      	ldr	r3, [pc, #280]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80030a0:	2301      	movs	r3, #1
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030a4:	2300      	movs	r3, #0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00d      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b41      	ldr	r3, [pc, #260]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	4a40      	ldr	r2, [pc, #256]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6593      	str	r3, [r2, #88]	; 0x58
 80030b6:	4b3e      	ldr	r3, [pc, #248]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a3a      	ldr	r2, [pc, #232]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030d2:	f7fd fd95 	bl	8000c00 <HAL_GetTick>
 80030d6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030d8:	e009      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fd fd91 	bl	8000c00 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d902      	bls.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	74fb      	strb	r3, [r7, #19]
        break;
 80030ec:	e005      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ee:	4b31      	ldr	r3, [pc, #196]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ef      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d15b      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003100:	4b2b      	ldr	r3, [pc, #172]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d01f      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	429a      	cmp	r2, r3
 800311c:	d019      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312a:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313a:	4b1d      	ldr	r3, [pc, #116]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800314a:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d016      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fd fd50 	bl	8000c00 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003162:	e00b      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fd fd4c 	bl	8000c00 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d902      	bls.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	74fb      	strb	r3, [r7, #19]
            break;
 800317a:	e006      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ec      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800318a:	7cfb      	ldrb	r3, [r7, #19]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10c      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003190:	4b07      	ldr	r3, [pc, #28]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a0:	4903      	ldr	r1, [pc, #12]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031a8:	e008      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	74bb      	strb	r3, [r7, #18]
 80031ae:	e005      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b8:	7cfb      	ldrb	r3, [r7, #19]
 80031ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031bc:	7c7b      	ldrb	r3, [r7, #17]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d105      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c2:	4ba0      	ldr	r3, [pc, #640]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a9f      	ldr	r2, [pc, #636]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031da:	4b9a      	ldr	r3, [pc, #616]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 0203 	bic.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e8:	4996      	ldr	r1, [pc, #600]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fc:	4b91      	ldr	r3, [pc, #580]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 020c 	bic.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	498e      	ldr	r1, [pc, #568]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0304 	and.w	r3, r3, #4
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800321e:	4b89      	ldr	r3, [pc, #548]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322c:	4985      	ldr	r1, [pc, #532]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003240:	4b80      	ldr	r3, [pc, #512]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	497d      	ldr	r1, [pc, #500]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003262:	4b78      	ldr	r3, [pc, #480]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	4974      	ldr	r1, [pc, #464]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003284:	4b6f      	ldr	r3, [pc, #444]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003292:	496c      	ldr	r1, [pc, #432]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b4:	4963      	ldr	r1, [pc, #396]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032c8:	4b5e      	ldr	r3, [pc, #376]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d6:	495b      	ldr	r1, [pc, #364]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ea:	4b56      	ldr	r3, [pc, #344]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	4952      	ldr	r1, [pc, #328]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	494a      	ldr	r1, [pc, #296]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800332e:	4b45      	ldr	r3, [pc, #276]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	4941      	ldr	r1, [pc, #260]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003350:	4b3c      	ldr	r3, [pc, #240]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	4939      	ldr	r1, [pc, #228]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d028      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003372:	4b34      	ldr	r3, [pc, #208]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003380:	4930      	ldr	r1, [pc, #192]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003390:	d106      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4a2b      	ldr	r2, [pc, #172]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800339c:	60d3      	str	r3, [r2, #12]
 800339e:	e011      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3304      	adds	r3, #4
 80033ae:	2101      	movs	r1, #1
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 f8f9 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033ba:	7cfb      	ldrb	r3, [r7, #19]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d04d      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d8:	d108      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80033da:	4b1a      	ldr	r3, [pc, #104]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033e6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033ea:	e012      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033ec:	4b15      	ldr	r3, [pc, #84]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033f2:	4a14      	ldr	r2, [pc, #80]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033f8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003402:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800340a:	490e      	ldr	r1, [pc, #56]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341a:	d106      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003426:	60d3      	str	r3, [r2, #12]
 8003428:	e020      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800342e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003432:	d109      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a02      	ldr	r2, [pc, #8]	; (8003444 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800343a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343e:	60d3      	str	r3, [r2, #12]
 8003440:	e014      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003450:	d10c      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3304      	adds	r3, #4
 8003456:	2101      	movs	r1, #1
 8003458:	4618      	mov	r0, r3
 800345a:	f000 f8a5 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d028      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003478:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003486:	4947      	ldr	r1, [pc, #284]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003496:	d106      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003498:	4b42      	ldr	r3, [pc, #264]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4a41      	ldr	r2, [pc, #260]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800349e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a2:	60d3      	str	r3, [r2, #12]
 80034a4:	e011      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034ae:	d10c      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	2101      	movs	r1, #1
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f876 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01e      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034e6:	492f      	ldr	r1, [pc, #188]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f851 	bl	80035a8 <RCCEx_PLLSAI1_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003526:	f023 0204 	bic.w	r2, r3, #4
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003530:	491c      	ldr	r1, [pc, #112]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00b      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003544:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800354a:	f023 0218 	bic.w	r2, r3, #24
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003554:	4913      	ldr	r1, [pc, #76]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003568:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800356e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003578:	490a      	ldr	r1, [pc, #40]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003586:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800358a:	d105      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358c:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003596:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003598:	7cbb      	ldrb	r3, [r7, #18]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40021000 	.word	0x40021000

080035a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035b6:	4b72      	ldr	r3, [pc, #456]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035c2:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0203 	and.w	r2, r3, #3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d103      	bne.n	80035da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
       ||
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d142      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e03f      	b.n	8003660 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d018      	beq.n	800361a <RCCEx_PLLSAI1_Config+0x72>
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d825      	bhi.n	8003638 <RCCEx_PLLSAI1_Config+0x90>
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d002      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x4e>
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d009      	beq.n	8003608 <RCCEx_PLLSAI1_Config+0x60>
 80035f4:	e020      	b.n	8003638 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035f6:	4b62      	ldr	r3, [pc, #392]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11d      	bne.n	800363e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003606:	e01a      	b.n	800363e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003608:	4b5d      	ldr	r3, [pc, #372]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e013      	b.n	8003642 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800361a:	4b59      	ldr	r3, [pc, #356]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10f      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003626:	4b56      	ldr	r3, [pc, #344]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003636:	e006      	b.n	8003646 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e004      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800363e:	bf00      	nop
 8003640:	e002      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003642:	bf00      	nop
 8003644:	e000      	b.n	8003648 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003646:	bf00      	nop
    }

    if(status == HAL_OK)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800364e:	4b4c      	ldr	r3, [pc, #304]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f023 0203 	bic.w	r2, r3, #3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4949      	ldr	r1, [pc, #292]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 800365c:	4313      	orrs	r3, r2
 800365e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 8086 	bne.w	8003774 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003668:	4b45      	ldr	r3, [pc, #276]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a44      	ldr	r2, [pc, #272]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003674:	f7fd fac4 	bl	8000c00 <HAL_GetTick>
 8003678:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800367a:	e009      	b.n	8003690 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800367c:	f7fd fac0 	bl	8000c00 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d902      	bls.n	8003690 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	73fb      	strb	r3, [r7, #15]
        break;
 800368e:	e005      	b.n	800369c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003690:	4b3b      	ldr	r3, [pc, #236]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ef      	bne.n	800367c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d168      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d113      	bne.n	80036d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	4b35      	ldr	r3, [pc, #212]	; (8003784 <RCCEx_PLLSAI1_Config+0x1dc>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	0211      	lsls	r1, r2, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	06d2      	lsls	r2, r2, #27
 80036bc:	4311      	orrs	r1, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6852      	ldr	r2, [r2, #4]
 80036c2:	3a01      	subs	r2, #1
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	430a      	orrs	r2, r1
 80036c8:	492d      	ldr	r1, [pc, #180]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	610b      	str	r3, [r1, #16]
 80036ce:	e02d      	b.n	800372c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d115      	bne.n	8003702 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6892      	ldr	r2, [r2, #8]
 80036e2:	0211      	lsls	r1, r2, #8
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6912      	ldr	r2, [r2, #16]
 80036e8:	0852      	lsrs	r2, r2, #1
 80036ea:	3a01      	subs	r2, #1
 80036ec:	0552      	lsls	r2, r2, #21
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6852      	ldr	r2, [r2, #4]
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	430a      	orrs	r2, r1
 80036fa:	4921      	ldr	r1, [pc, #132]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	610b      	str	r3, [r1, #16]
 8003700:	e014      	b.n	800372c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	4b21      	ldr	r3, [pc, #132]	; (800378c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	0211      	lsls	r1, r2, #8
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6952      	ldr	r2, [r2, #20]
 8003714:	0852      	lsrs	r2, r2, #1
 8003716:	3a01      	subs	r2, #1
 8003718:	0652      	lsls	r2, r2, #25
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6852      	ldr	r2, [r2, #4]
 8003720:	3a01      	subs	r2, #1
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	430a      	orrs	r2, r1
 8003726:	4916      	ldr	r1, [pc, #88]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003728:	4313      	orrs	r3, r2
 800372a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a13      	ldr	r2, [pc, #76]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003732:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003736:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003738:	f7fd fa62 	bl	8000c00 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800373e:	e009      	b.n	8003754 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003740:	f7fd fa5e 	bl	8000c00 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d902      	bls.n	8003754 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	73fb      	strb	r3, [r7, #15]
          break;
 8003752:	e005      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003754:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0ef      	beq.n	8003740 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	4904      	ldr	r1, [pc, #16]	; (8003780 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003770:	4313      	orrs	r3, r2
 8003772:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000
 8003784:	07ff800f 	.word	0x07ff800f
 8003788:	ff9f800f 	.word	0xff9f800f
 800378c:	f9ff800f 	.word	0xf9ff800f

08003790 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800379e:	4b72      	ldr	r3, [pc, #456]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037aa:	4b6f      	ldr	r3, [pc, #444]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0203 	and.w	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d103      	bne.n	80037c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
       ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d142      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	e03f      	b.n	8003848 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d018      	beq.n	8003802 <RCCEx_PLLSAI2_Config+0x72>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d825      	bhi.n	8003820 <RCCEx_PLLSAI2_Config+0x90>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d002      	beq.n	80037de <RCCEx_PLLSAI2_Config+0x4e>
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d009      	beq.n	80037f0 <RCCEx_PLLSAI2_Config+0x60>
 80037dc:	e020      	b.n	8003820 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037de:	4b62      	ldr	r3, [pc, #392]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11d      	bne.n	8003826 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ee:	e01a      	b.n	8003826 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037f0:	4b5d      	ldr	r3, [pc, #372]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d116      	bne.n	800382a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003800:	e013      	b.n	800382a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003802:	4b59      	ldr	r3, [pc, #356]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10f      	bne.n	800382e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800380e:	4b56      	ldr	r3, [pc, #344]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800381e:	e006      	b.n	800382e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
      break;
 8003824:	e004      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003826:	bf00      	nop
 8003828:	e002      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800382a:	bf00      	nop
 800382c:	e000      	b.n	8003830 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800382e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d108      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003836:	4b4c      	ldr	r3, [pc, #304]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 0203 	bic.w	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4949      	ldr	r1, [pc, #292]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003844:	4313      	orrs	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8086 	bne.w	800395c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003850:	4b45      	ldr	r3, [pc, #276]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a44      	ldr	r2, [pc, #272]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800385c:	f7fd f9d0 	bl	8000c00 <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003862:	e009      	b.n	8003878 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003864:	f7fd f9cc 	bl	8000c00 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d902      	bls.n	8003878 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	73fb      	strb	r3, [r7, #15]
        break;
 8003876:	e005      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003878:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ef      	bne.n	8003864 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d168      	bne.n	800395c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d113      	bne.n	80038b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	4b35      	ldr	r3, [pc, #212]	; (800396c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003896:	4013      	ands	r3, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	0211      	lsls	r1, r2, #8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	06d2      	lsls	r2, r2, #27
 80038a4:	4311      	orrs	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6852      	ldr	r2, [r2, #4]
 80038aa:	3a01      	subs	r2, #1
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	430a      	orrs	r2, r1
 80038b0:	492d      	ldr	r1, [pc, #180]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	614b      	str	r3, [r1, #20]
 80038b6:	e02d      	b.n	8003914 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d115      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038be:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <RCCEx_PLLSAI2_Config+0x1e0>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6892      	ldr	r2, [r2, #8]
 80038ca:	0211      	lsls	r1, r2, #8
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	6912      	ldr	r2, [r2, #16]
 80038d0:	0852      	lsrs	r2, r2, #1
 80038d2:	3a01      	subs	r2, #1
 80038d4:	0552      	lsls	r2, r2, #21
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6852      	ldr	r2, [r2, #4]
 80038dc:	3a01      	subs	r2, #1
 80038de:	0112      	lsls	r2, r2, #4
 80038e0:	430a      	orrs	r2, r1
 80038e2:	4921      	ldr	r1, [pc, #132]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	614b      	str	r3, [r1, #20]
 80038e8:	e014      	b.n	8003914 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ea:	4b1f      	ldr	r3, [pc, #124]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	4b21      	ldr	r3, [pc, #132]	; (8003974 <RCCEx_PLLSAI2_Config+0x1e4>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6892      	ldr	r2, [r2, #8]
 80038f6:	0211      	lsls	r1, r2, #8
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6952      	ldr	r2, [r2, #20]
 80038fc:	0852      	lsrs	r2, r2, #1
 80038fe:	3a01      	subs	r2, #1
 8003900:	0652      	lsls	r2, r2, #25
 8003902:	4311      	orrs	r1, r2
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6852      	ldr	r2, [r2, #4]
 8003908:	3a01      	subs	r2, #1
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	430a      	orrs	r2, r1
 800390e:	4916      	ldr	r1, [pc, #88]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003914:	4b14      	ldr	r3, [pc, #80]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a13      	ldr	r2, [pc, #76]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 800391a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd f96e 	bl	8000c00 <HAL_GetTick>
 8003924:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003926:	e009      	b.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003928:	f7fd f96a 	bl	8000c00 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d902      	bls.n	800393c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	73fb      	strb	r3, [r7, #15]
          break;
 800393a:	e005      	b.n	8003948 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ef      	beq.n	8003928 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003948:	7bfb      	ldrb	r3, [r7, #15]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003950:	695a      	ldr	r2, [r3, #20]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	4904      	ldr	r1, [pc, #16]	; (8003968 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003958:	4313      	orrs	r3, r2
 800395a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	07ff800f 	.word	0x07ff800f
 8003970:	ff9f800f 	.word	0xff9f800f
 8003974:	f9ff800f 	.word	0xf9ff800f

08003978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003990:	2b00      	cmp	r3, #0
 8003992:	d106      	bne.n	80039a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f001 f9e3 	bl	8004d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2224      	movs	r2, #36	; 0x24
 80039a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8c4 	bl	8003b48 <UART_SetConfig>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e022      	b.n	8003a10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fbb4 	bl	8004140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fc3b 	bl	8004284 <UART_CheckIdleState>
 8003a0e:	4603      	mov	r3, r0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	f040 8084 	bne.w	8003b3c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Transmit+0x28>
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e07c      	b.n	8003b3e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Transmit+0x3a>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e075      	b.n	8003b3e <HAL_UART_Transmit+0x126>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd f8c9 	bl	8000c00 <HAL_GetTick>
 8003a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	88fa      	ldrh	r2, [r7, #6]
 8003a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a88:	d108      	bne.n	8003a9c <HAL_UART_Transmit+0x84>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d104      	bne.n	8003a9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	61bb      	str	r3, [r7, #24]
 8003a9a:	e003      	b.n	8003aa4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003aac:	e02d      	b.n	8003b0a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2180      	movs	r1, #128	; 0x80
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 fc2e 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e03a      	b.n	8003b3e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	881a      	ldrh	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ada:	b292      	uxth	r2, r2
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e008      	b.n	8003af8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	781a      	ldrb	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	b292      	uxth	r2, r2
 8003af0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1cb      	bne.n	8003aae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2140      	movs	r1, #64	; 0x40
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 fbfa 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d001      	beq.n	8003b30 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e006      	b.n	8003b3e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e000      	b.n	8003b3e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b3c:	2302      	movs	r3, #2
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b4c:	b08c      	sub	sp, #48	; 0x30
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4baa      	ldr	r3, [pc, #680]	; (8003e20 <UART_SetConfig+0x2d8>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6812      	ldr	r2, [r2, #0]
 8003b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b80:	430b      	orrs	r3, r1
 8003b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a9f      	ldr	r2, [pc, #636]	; (8003e24 <UART_SetConfig+0x2dc>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d004      	beq.n	8003bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bbe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f023 010f 	bic.w	r1, r3, #15
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a90      	ldr	r2, [pc, #576]	; (8003e28 <UART_SetConfig+0x2e0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d125      	bne.n	8003c38 <UART_SetConfig+0xf0>
 8003bec:	4b8f      	ldr	r3, [pc, #572]	; (8003e2c <UART_SetConfig+0x2e4>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d81a      	bhi.n	8003c30 <UART_SetConfig+0xe8>
 8003bfa:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <UART_SetConfig+0xb8>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c21 	.word	0x08003c21
 8003c08:	08003c19 	.word	0x08003c19
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e116      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e112      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e10e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c2e:	e10a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c36:	e106      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a7c      	ldr	r2, [pc, #496]	; (8003e30 <UART_SetConfig+0x2e8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d138      	bne.n	8003cb4 <UART_SetConfig+0x16c>
 8003c42:	4b7a      	ldr	r3, [pc, #488]	; (8003e2c <UART_SetConfig+0x2e4>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b0c      	cmp	r3, #12
 8003c4e:	d82d      	bhi.n	8003cac <UART_SetConfig+0x164>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <UART_SetConfig+0x110>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cad 	.word	0x08003cad
 8003c68:	08003c9d 	.word	0x08003c9d
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003cad 	.word	0x08003cad
 8003c74:	08003cad 	.word	0x08003cad
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	08003cad 	.word	0x08003cad
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003ca5 	.word	0x08003ca5
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c92:	e0d8      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c94:	2302      	movs	r3, #2
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	e0d4      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003c9c:	2304      	movs	r3, #4
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e0d0      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003ca4:	2308      	movs	r3, #8
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003caa:	e0cc      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cac:	2310      	movs	r3, #16
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb2:	e0c8      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5e      	ldr	r2, [pc, #376]	; (8003e34 <UART_SetConfig+0x2ec>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d125      	bne.n	8003d0a <UART_SetConfig+0x1c2>
 8003cbe:	4b5b      	ldr	r3, [pc, #364]	; (8003e2c <UART_SetConfig+0x2e4>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d016      	beq.n	8003cfa <UART_SetConfig+0x1b2>
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d818      	bhi.n	8003d02 <UART_SetConfig+0x1ba>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d00a      	beq.n	8003cea <UART_SetConfig+0x1a2>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d814      	bhi.n	8003d02 <UART_SetConfig+0x1ba>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <UART_SetConfig+0x19a>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d008      	beq.n	8003cf2 <UART_SetConfig+0x1aa>
 8003ce0:	e00f      	b.n	8003d02 <UART_SetConfig+0x1ba>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce8:	e0ad      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cea:	2302      	movs	r3, #2
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf0:	e0a9      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf8:	e0a5      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d00:	e0a1      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d02:	2310      	movs	r3, #16
 8003d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d08:	e09d      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4a      	ldr	r2, [pc, #296]	; (8003e38 <UART_SetConfig+0x2f0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d125      	bne.n	8003d60 <UART_SetConfig+0x218>
 8003d14:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <UART_SetConfig+0x2e4>)
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d20:	d016      	beq.n	8003d50 <UART_SetConfig+0x208>
 8003d22:	2bc0      	cmp	r3, #192	; 0xc0
 8003d24:	d818      	bhi.n	8003d58 <UART_SetConfig+0x210>
 8003d26:	2b80      	cmp	r3, #128	; 0x80
 8003d28:	d00a      	beq.n	8003d40 <UART_SetConfig+0x1f8>
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d814      	bhi.n	8003d58 <UART_SetConfig+0x210>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d002      	beq.n	8003d38 <UART_SetConfig+0x1f0>
 8003d32:	2b40      	cmp	r3, #64	; 0x40
 8003d34:	d008      	beq.n	8003d48 <UART_SetConfig+0x200>
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x210>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	e082      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d40:	2302      	movs	r3, #2
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d46:	e07e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	e07a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d50:	2308      	movs	r3, #8
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d56:	e076      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d5e:	e072      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a35      	ldr	r2, [pc, #212]	; (8003e3c <UART_SetConfig+0x2f4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d12a      	bne.n	8003dc0 <UART_SetConfig+0x278>
 8003d6a:	4b30      	ldr	r3, [pc, #192]	; (8003e2c <UART_SetConfig+0x2e4>)
 8003d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d78:	d01a      	beq.n	8003db0 <UART_SetConfig+0x268>
 8003d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7e:	d81b      	bhi.n	8003db8 <UART_SetConfig+0x270>
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d00c      	beq.n	8003da0 <UART_SetConfig+0x258>
 8003d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8a:	d815      	bhi.n	8003db8 <UART_SetConfig+0x270>
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <UART_SetConfig+0x250>
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	d008      	beq.n	8003da8 <UART_SetConfig+0x260>
 8003d96:	e00f      	b.n	8003db8 <UART_SetConfig+0x270>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e052      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e04e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003da8:	2304      	movs	r3, #4
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e04a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003db0:	2308      	movs	r3, #8
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e046      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003db8:	2310      	movs	r3, #16
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e042      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <UART_SetConfig+0x2dc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d13a      	bne.n	8003e40 <UART_SetConfig+0x2f8>
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <UART_SetConfig+0x2e4>)
 8003dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dd8:	d01a      	beq.n	8003e10 <UART_SetConfig+0x2c8>
 8003dda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dde:	d81b      	bhi.n	8003e18 <UART_SetConfig+0x2d0>
 8003de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003de4:	d00c      	beq.n	8003e00 <UART_SetConfig+0x2b8>
 8003de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dea:	d815      	bhi.n	8003e18 <UART_SetConfig+0x2d0>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <UART_SetConfig+0x2b0>
 8003df0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df4:	d008      	beq.n	8003e08 <UART_SetConfig+0x2c0>
 8003df6:	e00f      	b.n	8003e18 <UART_SetConfig+0x2d0>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	e022      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e00:	2302      	movs	r3, #2
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e01e      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e01a      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e10:	2308      	movs	r3, #8
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e016      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e18:	2310      	movs	r3, #16
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1e:	e012      	b.n	8003e46 <UART_SetConfig+0x2fe>
 8003e20:	cfff69f3 	.word	0xcfff69f3
 8003e24:	40008000 	.word	0x40008000
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40004400 	.word	0x40004400
 8003e34:	40004800 	.word	0x40004800
 8003e38:	40004c00 	.word	0x40004c00
 8003e3c:	40005000 	.word	0x40005000
 8003e40:	2310      	movs	r3, #16
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4aae      	ldr	r2, [pc, #696]	; (8004104 <UART_SetConfig+0x5bc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	f040 8097 	bne.w	8003f80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d823      	bhi.n	8003ea2 <UART_SetConfig+0x35a>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <UART_SetConfig+0x318>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003ea3 	.word	0x08003ea3
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003ea3 	.word	0x08003ea3
 8003e70:	08003e93 	.word	0x08003e93
 8003e74:	08003ea3 	.word	0x08003ea3
 8003e78:	08003ea3 	.word	0x08003ea3
 8003e7c:	08003ea3 	.word	0x08003ea3
 8003e80:	08003e9b 	.word	0x08003e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e84:	f7fe ff74 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003e88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e8a:	e010      	b.n	8003eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e8c:	4b9e      	ldr	r3, [pc, #632]	; (8004108 <UART_SetConfig+0x5c0>)
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e90:	e00d      	b.n	8003eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e92:	f7fe fed5 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8003e96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e98:	e009      	b.n	8003eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ea0:	e005      	b.n	8003eae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8130 	beq.w	8004116 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	4a94      	ldr	r2, [pc, #592]	; (800410c <UART_SetConfig+0x5c4>)
 8003ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d305      	bcc.n	8003ee6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d903      	bls.n	8003eee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eec:	e113      	b.n	8004116 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	60fa      	str	r2, [r7, #12]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	4a84      	ldr	r2, [pc, #528]	; (800410c <UART_SetConfig+0x5c4>)
 8003efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	603b      	str	r3, [r7, #0]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f10:	f7fc f9ce 	bl	80002b0 <__aeabi_uldivmod>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	020b      	lsls	r3, r1, #8
 8003f26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f2a:	0202      	lsls	r2, r0, #8
 8003f2c:	6979      	ldr	r1, [r7, #20]
 8003f2e:	6849      	ldr	r1, [r1, #4]
 8003f30:	0849      	lsrs	r1, r1, #1
 8003f32:	2000      	movs	r0, #0
 8003f34:	460c      	mov	r4, r1
 8003f36:	4605      	mov	r5, r0
 8003f38:	eb12 0804 	adds.w	r8, r2, r4
 8003f3c:	eb43 0905 	adc.w	r9, r3, r5
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	469a      	mov	sl, r3
 8003f48:	4693      	mov	fp, r2
 8003f4a:	4652      	mov	r2, sl
 8003f4c:	465b      	mov	r3, fp
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4649      	mov	r1, r9
 8003f52:	f7fc f9ad 	bl	80002b0 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f64:	d308      	bcc.n	8003f78 <UART_SetConfig+0x430>
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f6c:	d204      	bcs.n	8003f78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e0ce      	b.n	8004116 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f7e:	e0ca      	b.n	8004116 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f88:	d166      	bne.n	8004058 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d827      	bhi.n	8003fe2 <UART_SetConfig+0x49a>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x450>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe fed8 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc2:	e014      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe feea 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8003fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fca:	e010      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b4e      	ldr	r3, [pc, #312]	; (8004108 <UART_SetConfig+0x5c0>)
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd0:	e00d      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe fe35 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8003fd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fd8:	e009      	b.n	8003fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8090 	beq.w	8004116 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	4a44      	ldr	r2, [pc, #272]	; (800410c <UART_SetConfig+0x5c4>)
 8003ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004000:	461a      	mov	r2, r3
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	fbb3 f3f2 	udiv	r3, r3, r2
 8004008:	005a      	lsls	r2, r3, #1
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	441a      	add	r2, r3
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	fbb2 f3f3 	udiv	r3, r2, r3
 800401a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d916      	bls.n	8004050 <UART_SetConfig+0x508>
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004028:	d212      	bcs.n	8004050 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f023 030f 	bic.w	r3, r3, #15
 8004032:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	b29b      	uxth	r3, r3
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	b29a      	uxth	r2, r3
 8004040:	8bfb      	ldrh	r3, [r7, #30]
 8004042:	4313      	orrs	r3, r2
 8004044:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	8bfa      	ldrh	r2, [r7, #30]
 800404c:	60da      	str	r2, [r3, #12]
 800404e:	e062      	b.n	8004116 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004056:	e05e      	b.n	8004116 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004058:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800405c:	2b08      	cmp	r3, #8
 800405e:	d828      	bhi.n	80040b2 <UART_SetConfig+0x56a>
 8004060:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x520>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004095 	.word	0x08004095
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040b3 	.word	0x080040b3
 8004078:	080040a3 	.word	0x080040a3
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040b3 	.word	0x080040b3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fe70 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004092:	e014      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fe82 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800409a:	e010      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <UART_SetConfig+0x5c0>)
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040a0:	e00d      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7fe fdcd 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80040a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040a8:	e009      	b.n	80040be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b0:	e005      	b.n	80040be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040bc:	bf00      	nop
    }

    if (pclk != 0U)
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d028      	beq.n	8004116 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	4a10      	ldr	r2, [pc, #64]	; (800410c <UART_SetConfig+0x5c4>)
 80040ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ce:	461a      	mov	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	441a      	add	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	d910      	bls.n	8004110 <UART_SetConfig+0x5c8>
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f4:	d20c      	bcs.n	8004110 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60da      	str	r2, [r3, #12]
 8004100:	e009      	b.n	8004116 <UART_SetConfig+0x5ce>
 8004102:	bf00      	nop
 8004104:	40008000 	.word	0x40008000
 8004108:	00f42400 	.word	0x00f42400
 800410c:	080058f4 	.word	0x080058f4
      }
      else
      {
        ret = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2201      	movs	r2, #1
 800411a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2201      	movs	r2, #1
 8004122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004132:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004136:	4618      	mov	r0, r3
 8004138:	3730      	adds	r7, #48	; 0x30
 800413a:	46bd      	mov	sp, r7
 800413c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01a      	beq.n	8004256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423e:	d10a      	bne.n	8004256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004294:	f7fc fcb4 	bl	8000c00 <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d10e      	bne.n	80042c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f82f 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e025      	b.n	8004312 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d10e      	bne.n	80042f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f819 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e00f      	b.n	8004312 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2220      	movs	r2, #32
 80042f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b09c      	sub	sp, #112	; 0x70
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	e0a9      	b.n	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004332:	f000 80a5 	beq.w	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fc fc63 	bl	8000c00 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <UART_WaitOnFlagUntilTimeout+0x32>
 8004346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004348:	2b00      	cmp	r3, #0
 800434a:	d140      	bne.n	80043ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800435a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004360:	667b      	str	r3, [r7, #100]	; 0x64
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004370:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e6      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3308      	adds	r3, #8
 8004384:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004388:	e853 3f00 	ldrex	r3, [r3]
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	f023 0301 	bic.w	r3, r3, #1
 8004394:	663b      	str	r3, [r7, #96]	; 0x60
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3308      	adds	r3, #8
 800439c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800439e:	64ba      	str	r2, [r7, #72]	; 0x48
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a6:	e841 2300 	strex	r3, r2, [r1]
 80043aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1e5      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2220      	movs	r2, #32
 80043b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e069      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d051      	beq.n	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ea:	d149      	bne.n	8004480 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800440a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3308      	adds	r3, #8
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004448:	623a      	str	r2, [r7, #32]
 800444a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	61bb      	str	r3, [r7, #24]
   return(result);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e5      	bne.n	8004428 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e010      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	429a      	cmp	r2, r3
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	429a      	cmp	r2, r3
 800449c:	f43f af46 	beq.w	800432c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3770      	adds	r7, #112	; 0x70
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80044bc:	2302      	movs	r3, #2
 80044be:	e027      	b.n	8004510 <HAL_UARTEx_DisableFifoMode+0x66>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e02d      	b.n	8004590 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f84f 	bl	8004614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e02d      	b.n	800460c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f811 	bl	8004614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004634:	e031      	b.n	800469a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004636:	2308      	movs	r3, #8
 8004638:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800463a:	2308      	movs	r3, #8
 800463c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	0e5b      	lsrs	r3, r3, #25
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	0f5b      	lsrs	r3, r3, #29
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800465e:	7bbb      	ldrb	r3, [r7, #14]
 8004660:	7b3a      	ldrb	r2, [r7, #12]
 8004662:	4911      	ldr	r1, [pc, #68]	; (80046a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004664:	5c8a      	ldrb	r2, [r1, r2]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800466a:	7b3a      	ldrb	r2, [r7, #12]
 800466c:	490f      	ldr	r1, [pc, #60]	; (80046ac <UARTEx_SetNbDataToProcess+0x98>)
 800466e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004670:	fb93 f3f2 	sdiv	r3, r3, r2
 8004674:	b29a      	uxth	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	7b7a      	ldrb	r2, [r7, #13]
 8004680:	4909      	ldr	r1, [pc, #36]	; (80046a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004682:	5c8a      	ldrb	r2, [r1, r2]
 8004684:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004688:	7b7a      	ldrb	r2, [r7, #13]
 800468a:	4908      	ldr	r1, [pc, #32]	; (80046ac <UARTEx_SetNbDataToProcess+0x98>)
 800468c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800468e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	0800590c 	.word	0x0800590c
 80046ac:	08005914 	.word	0x08005914

080046b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046b6:	f7fc fa3b 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046ba:	f000 f837 	bl	800472c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046be:	f000 f993 	bl	80049e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80046c2:	f000 f885 	bl	80047d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80046c6:	f000 f8c3 	bl	8004850 <MX_I2C2_Init>
  MX_I2C3_Init();
 80046ca:	f000 f901 	bl	80048d0 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80046ce:	f000 f93f 	bl	8004950 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // I2C initializations
  BSP_ACCELERO_Init();
 80046d2:	f7fc f8bf 	bl	8000854 <BSP_ACCELERO_Init>

  // UART initialization
//  HAL_StatusTypeDef UART_status;
  HAL_UART_Init(&huart1);
 80046d6:	4812      	ldr	r0, [pc, #72]	; (8004720 <main+0x70>)
 80046d8:	f7ff f94e 	bl	8003978 <HAL_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  BSP_ACCELERO_AccGetXYZ(accelerometer_xyz);
 80046dc:	463b      	mov	r3, r7
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fc f8f6 	bl	80008d0 <BSP_ACCELERO_AccGetXYZ>
	  sprintf(str, "\rAccelerometer X: %i, Accelerometer Y: %i, Accelerometer Z: %i", accelerometer_xyz[0], accelerometer_xyz[1], accelerometer_xyz[2]);
 80046e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80046e8:	461a      	mov	r2, r3
 80046ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046ee:	4619      	mov	r1, r3
 80046f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	460b      	mov	r3, r1
 80046f8:	490a      	ldr	r1, [pc, #40]	; (8004724 <main+0x74>)
 80046fa:	480b      	ldr	r0, [pc, #44]	; (8004728 <main+0x78>)
 80046fc:	f000 fc6e 	bl	8004fdc <siprintf>


	  HAL_UART_Transmit(&huart1, (uint8_t*) str, (uint16_t) strlen(str), 10000); // inputs HandleTypeDef, data, data size, timeout
 8004700:	4809      	ldr	r0, [pc, #36]	; (8004728 <main+0x78>)
 8004702:	f7fb fd7d 	bl	8000200 <strlen>
 8004706:	4603      	mov	r3, r0
 8004708:	b29a      	uxth	r2, r3
 800470a:	f242 7310 	movw	r3, #10000	; 0x2710
 800470e:	4906      	ldr	r1, [pc, #24]	; (8004728 <main+0x78>)
 8004710:	4803      	ldr	r0, [pc, #12]	; (8004720 <main+0x70>)
 8004712:	f7ff f981 	bl	8003a18 <HAL_UART_Transmit>
	  HAL_Delay(100); // for 10Hz sample rate
 8004716:	2064      	movs	r0, #100	; 0x64
 8004718:	f7fc fa7e 	bl	8000c18 <HAL_Delay>
	  BSP_ACCELERO_AccGetXYZ(accelerometer_xyz);
 800471c:	e7de      	b.n	80046dc <main+0x2c>
 800471e:	bf00      	nop
 8004720:	20000218 	.word	0x20000218
 8004724:	080058b4 	.word	0x080058b4
 8004728:	200002a8 	.word	0x200002a8

0800472c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b096      	sub	sp, #88	; 0x58
 8004730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	2244      	movs	r2, #68	; 0x44
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fc46 	bl	8004fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004740:	463b      	mov	r3, r7
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	60da      	str	r2, [r3, #12]
 800474c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800474e:	2000      	movs	r0, #0
 8004750:	f7fd fc7e 	bl	8002050 <HAL_PWREx_ControlVoltageScaling>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800475a:	f000 f9a1 	bl	8004aa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800475e:	2310      	movs	r3, #16
 8004760:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004762:	2301      	movs	r3, #1
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800476a:	2360      	movs	r3, #96	; 0x60
 800476c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800476e:	2302      	movs	r3, #2
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004772:	2301      	movs	r3, #1
 8004774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800477a:	233c      	movs	r3, #60	; 0x3c
 800477c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800477e:	2302      	movs	r3, #2
 8004780:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004782:	2302      	movs	r3, #2
 8004784:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004786:	2302      	movs	r3, #2
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	4618      	mov	r0, r3
 8004790:	f7fd fd02 	bl	8002198 <HAL_RCC_OscConfig>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800479a:	f000 f981 	bl	8004aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800479e:	230f      	movs	r3, #15
 80047a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047a2:	2303      	movs	r3, #3
 80047a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047ae:	2300      	movs	r3, #0
 80047b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047b2:	463b      	mov	r3, r7
 80047b4:	2105      	movs	r1, #5
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe f908 	bl	80029cc <HAL_RCC_ClockConfig>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80047c2:	f000 f96d 	bl	8004aa0 <Error_Handler>
  }
}
 80047c6:	bf00      	nop
 80047c8:	3758      	adds	r7, #88	; 0x58
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <MX_I2C1_Init+0x74>)
 80047d6:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <MX_I2C1_Init+0x78>)
 80047d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80047da:	4b1a      	ldr	r3, [pc, #104]	; (8004844 <MX_I2C1_Init+0x74>)
 80047dc:	4a1b      	ldr	r2, [pc, #108]	; (800484c <MX_I2C1_Init+0x7c>)
 80047de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80047e0:	4b18      	ldr	r3, [pc, #96]	; (8004844 <MX_I2C1_Init+0x74>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <MX_I2C1_Init+0x74>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047ec:	4b15      	ldr	r3, [pc, #84]	; (8004844 <MX_I2C1_Init+0x74>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80047f2:	4b14      	ldr	r3, [pc, #80]	; (8004844 <MX_I2C1_Init+0x74>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <MX_I2C1_Init+0x74>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <MX_I2C1_Init+0x74>)
 8004800:	2200      	movs	r2, #0
 8004802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004804:	4b0f      	ldr	r3, [pc, #60]	; (8004844 <MX_I2C1_Init+0x74>)
 8004806:	2200      	movs	r2, #0
 8004808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800480a:	480e      	ldr	r0, [pc, #56]	; (8004844 <MX_I2C1_Init+0x74>)
 800480c:	f7fc fdd6 	bl	80013bc <HAL_I2C_Init>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004816:	f000 f943 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800481a:	2100      	movs	r1, #0
 800481c:	4809      	ldr	r0, [pc, #36]	; (8004844 <MX_I2C1_Init+0x74>)
 800481e:	f7fd fb5f 	bl	8001ee0 <HAL_I2CEx_ConfigAnalogFilter>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004828:	f000 f93a 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800482c:	2100      	movs	r1, #0
 800482e:	4805      	ldr	r0, [pc, #20]	; (8004844 <MX_I2C1_Init+0x74>)
 8004830:	f7fd fba1 	bl	8001f76 <HAL_I2CEx_ConfigDigitalFilter>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800483a:	f000 f931 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800483e:	bf00      	nop
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	2000011c 	.word	0x2000011c
 8004848:	40005400 	.word	0x40005400
 800484c:	307075b1 	.word	0x307075b1

08004850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <MX_I2C2_Init+0x74>)
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <MX_I2C2_Init+0x78>)
 8004858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800485a:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <MX_I2C2_Init+0x74>)
 800485c:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <MX_I2C2_Init+0x7c>)
 800485e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <MX_I2C2_Init+0x74>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004866:	4b17      	ldr	r3, [pc, #92]	; (80048c4 <MX_I2C2_Init+0x74>)
 8004868:	2201      	movs	r2, #1
 800486a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800486c:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <MX_I2C2_Init+0x74>)
 800486e:	2200      	movs	r2, #0
 8004870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004872:	4b14      	ldr	r3, [pc, #80]	; (80048c4 <MX_I2C2_Init+0x74>)
 8004874:	2200      	movs	r2, #0
 8004876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004878:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <MX_I2C2_Init+0x74>)
 800487a:	2200      	movs	r2, #0
 800487c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <MX_I2C2_Init+0x74>)
 8004880:	2200      	movs	r2, #0
 8004882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004884:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <MX_I2C2_Init+0x74>)
 8004886:	2200      	movs	r2, #0
 8004888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800488a:	480e      	ldr	r0, [pc, #56]	; (80048c4 <MX_I2C2_Init+0x74>)
 800488c:	f7fc fd96 	bl	80013bc <HAL_I2C_Init>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004896:	f000 f903 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800489a:	2100      	movs	r1, #0
 800489c:	4809      	ldr	r0, [pc, #36]	; (80048c4 <MX_I2C2_Init+0x74>)
 800489e:	f7fd fb1f 	bl	8001ee0 <HAL_I2CEx_ConfigAnalogFilter>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80048a8:	f000 f8fa 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80048ac:	2100      	movs	r1, #0
 80048ae:	4805      	ldr	r0, [pc, #20]	; (80048c4 <MX_I2C2_Init+0x74>)
 80048b0:	f7fd fb61 	bl	8001f76 <HAL_I2CEx_ConfigDigitalFilter>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80048ba:	f000 f8f1 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80048be:	bf00      	nop
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000170 	.word	0x20000170
 80048c8:	40005800 	.word	0x40005800
 80048cc:	307075b1 	.word	0x307075b1

080048d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80048d4:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <MX_I2C3_Init+0x74>)
 80048d6:	4a1c      	ldr	r2, [pc, #112]	; (8004948 <MX_I2C3_Init+0x78>)
 80048d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x307075B1;
 80048da:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <MX_I2C3_Init+0x74>)
 80048dc:	4a1b      	ldr	r2, [pc, #108]	; (800494c <MX_I2C3_Init+0x7c>)
 80048de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80048e0:	4b18      	ldr	r3, [pc, #96]	; (8004944 <MX_I2C3_Init+0x74>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <MX_I2C3_Init+0x74>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048ec:	4b15      	ldr	r3, [pc, #84]	; (8004944 <MX_I2C3_Init+0x74>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80048f2:	4b14      	ldr	r3, [pc, #80]	; (8004944 <MX_I2C3_Init+0x74>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80048f8:	4b12      	ldr	r3, [pc, #72]	; (8004944 <MX_I2C3_Init+0x74>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048fe:	4b11      	ldr	r3, [pc, #68]	; (8004944 <MX_I2C3_Init+0x74>)
 8004900:	2200      	movs	r2, #0
 8004902:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <MX_I2C3_Init+0x74>)
 8004906:	2200      	movs	r2, #0
 8004908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800490a:	480e      	ldr	r0, [pc, #56]	; (8004944 <MX_I2C3_Init+0x74>)
 800490c:	f7fc fd56 	bl	80013bc <HAL_I2C_Init>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8004916:	f000 f8c3 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800491a:	2100      	movs	r1, #0
 800491c:	4809      	ldr	r0, [pc, #36]	; (8004944 <MX_I2C3_Init+0x74>)
 800491e:	f7fd fadf 	bl	8001ee0 <HAL_I2CEx_ConfigAnalogFilter>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8004928:	f000 f8ba 	bl	8004aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800492c:	2100      	movs	r1, #0
 800492e:	4805      	ldr	r0, [pc, #20]	; (8004944 <MX_I2C3_Init+0x74>)
 8004930:	f7fd fb21 	bl	8001f76 <HAL_I2CEx_ConfigDigitalFilter>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800493a:	f000 f8b1 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800493e:	bf00      	nop
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	200001c4 	.word	0x200001c4
 8004948:	40005c00 	.word	0x40005c00
 800494c:	307075b1 	.word	0x307075b1

08004950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004954:	4b22      	ldr	r3, [pc, #136]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004956:	4a23      	ldr	r2, [pc, #140]	; (80049e4 <MX_USART1_UART_Init+0x94>)
 8004958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 800495c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004962:	4b1f      	ldr	r3, [pc, #124]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 800496a:	2200      	movs	r2, #0
 800496c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800496e:	4b1c      	ldr	r3, [pc, #112]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004974:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004976:	220c      	movs	r2, #12
 8004978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800497a:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 800497c:	2200      	movs	r2, #0
 800497e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004980:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004982:	2200      	movs	r2, #0
 8004984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004986:	4b16      	ldr	r3, [pc, #88]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004988:	2200      	movs	r2, #0
 800498a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800498c:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 800498e:	2200      	movs	r2, #0
 8004990:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004992:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 8004994:	2200      	movs	r2, #0
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004998:	4811      	ldr	r0, [pc, #68]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 800499a:	f7fe ffed 	bl	8003978 <HAL_UART_Init>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80049a4:	f000 f87c 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049a8:	2100      	movs	r1, #0
 80049aa:	480d      	ldr	r0, [pc, #52]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 80049ac:	f7ff fdb6 	bl	800451c <HAL_UARTEx_SetTxFifoThreshold>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80049b6:	f000 f873 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80049ba:	2100      	movs	r1, #0
 80049bc:	4808      	ldr	r0, [pc, #32]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 80049be:	f7ff fdeb 	bl	8004598 <HAL_UARTEx_SetRxFifoThreshold>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80049c8:	f000 f86a 	bl	8004aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80049cc:	4804      	ldr	r0, [pc, #16]	; (80049e0 <MX_USART1_UART_Init+0x90>)
 80049ce:	f7ff fd6c 	bl	80044aa <HAL_UARTEx_DisableFifoMode>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80049d8:	f000 f862 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80049dc:	bf00      	nop
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000218 	.word	0x20000218
 80049e4:	40013800 	.word	0x40013800

080049e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	609a      	str	r2, [r3, #8]
 80049fa:	60da      	str	r2, [r3, #12]
 80049fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049fe:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	4a24      	ldr	r2, [pc, #144]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a04:	f043 0304 	orr.w	r3, r3, #4
 8004a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a0a:	4b22      	ldr	r3, [pc, #136]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a16:	4b1f      	ldr	r3, [pc, #124]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1a:	4a1e      	ldr	r2, [pc, #120]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a22:	4b1c      	ldr	r3, [pc, #112]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2e:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a32:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a34:	f043 0301 	orr.w	r3, r3, #1
 8004a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a3a:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <MX_GPIO_Init+0xac>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a4c:	4812      	ldr	r0, [pc, #72]	; (8004a98 <MX_GPIO_Init+0xb0>)
 8004a4e:	f7fc fc9d 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8004a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8004a62:	f107 030c 	add.w	r3, r7, #12
 8004a66:	4619      	mov	r1, r3
 8004a68:	480c      	ldr	r0, [pc, #48]	; (8004a9c <MX_GPIO_Init+0xb4>)
 8004a6a:	f7fc fa0b 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8004a6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a74:	2301      	movs	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8004a80:	f107 030c 	add.w	r3, r7, #12
 8004a84:	4619      	mov	r1, r3
 8004a86:	4804      	ldr	r0, [pc, #16]	; (8004a98 <MX_GPIO_Init+0xb0>)
 8004a88:	f7fc f9fc 	bl	8000e84 <HAL_GPIO_Init>

}
 8004a8c:	bf00      	nop
 8004a8e:	3720      	adds	r7, #32
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40021000 	.word	0x40021000
 8004a98:	48000400 	.word	0x48000400
 8004a9c:	48000800 	.word	0x48000800

08004aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004aa4:	b672      	cpsid	i
}
 8004aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004aa8:	e7fe      	b.n	8004aa8 <Error_Handler+0x8>
	...

08004aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab2:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <HAL_MspInit+0x44>)
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <HAL_MspInit+0x44>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6613      	str	r3, [r2, #96]	; 0x60
 8004abe:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <HAL_MspInit+0x44>)
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	607b      	str	r3, [r7, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_MspInit+0x44>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <HAL_MspInit+0x44>)
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_MspInit+0x44>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000

08004af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b0b2      	sub	sp, #200	; 0xc8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004afc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	609a      	str	r2, [r3, #8]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b0c:	f107 0320 	add.w	r3, r7, #32
 8004b10:	2294      	movs	r2, #148	; 0x94
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fa59 	bl	8004fcc <memset>
  if(hi2c->Instance==I2C1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a63      	ldr	r2, [pc, #396]	; (8004cac <HAL_I2C_MspInit+0x1b8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d13b      	bne.n	8004b9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b24:	2340      	movs	r3, #64	; 0x40
 8004b26:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b2c:	f107 0320 	add.w	r3, r7, #32
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fa09 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004b3c:	f7ff ffb0 	bl	8004aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b40:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b44:	4a5a      	ldr	r2, [pc, #360]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004b46:	f043 0302 	orr.w	r3, r3, #2
 8004b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b4c:	4b58      	ldr	r3, [pc, #352]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	61fb      	str	r3, [r7, #28]
 8004b56:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b58:	23c0      	movs	r3, #192	; 0xc0
 8004b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b5e:	2312      	movs	r3, #18
 8004b60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004b70:	2304      	movs	r3, #4
 8004b72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b76:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	484d      	ldr	r0, [pc, #308]	; (8004cb4 <HAL_I2C_MspInit+0x1c0>)
 8004b7e:	f7fc f981 	bl	8000e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b82:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	4a4a      	ldr	r2, [pc, #296]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004b88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8e:	4b48      	ldr	r3, [pc, #288]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004b9a:	e082      	b.n	8004ca2 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a45      	ldr	r2, [pc, #276]	; (8004cb8 <HAL_I2C_MspInit+0x1c4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d13c      	bne.n	8004c20 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8004ba6:	2380      	movs	r3, #128	; 0x80
 8004ba8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004baa:	2300      	movs	r3, #0
 8004bac:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bae:	f107 0320 	add.w	r3, r7, #32
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe f9c8 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8004bbe:	f7ff ff6f 	bl	8004aa0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	4a3a      	ldr	r2, [pc, #232]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004bc8:	f043 0302 	orr.w	r3, r3, #2
 8004bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bce:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004bda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004be2:	2312      	movs	r3, #18
 8004be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004bf4:	2304      	movs	r3, #4
 8004bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	482c      	ldr	r0, [pc, #176]	; (8004cb4 <HAL_I2C_MspInit+0x1c0>)
 8004c02:	f7fc f93f 	bl	8000e84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0a:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c10:	6593      	str	r3, [r2, #88]	; 0x58
 8004c12:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	693b      	ldr	r3, [r7, #16]
}
 8004c1e:	e040      	b.n	8004ca2 <HAL_I2C_MspInit+0x1ae>
  else if(hi2c->Instance==I2C3)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <HAL_I2C_MspInit+0x1c8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d13b      	bne.n	8004ca2 <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8004c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c2e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8004c30:	2300      	movs	r3, #0
 8004c32:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c34:	f107 0320 	add.w	r3, r7, #32
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fe f985 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8004c44:	f7ff ff2c 	bl	8004aa0 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c4c:	4a18      	ldr	r2, [pc, #96]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c54:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c60:	2303      	movs	r3, #3
 8004c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c66:	2312      	movs	r3, #18
 8004c68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c72:	2303      	movs	r3, #3
 8004c74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004c82:	4619      	mov	r1, r3
 8004c84:	480e      	ldr	r0, [pc, #56]	; (8004cc0 <HAL_I2C_MspInit+0x1cc>)
 8004c86:	f7fc f8fd 	bl	8000e84 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	4a08      	ldr	r2, [pc, #32]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c94:	6593      	str	r3, [r2, #88]	; 0x58
 8004c96:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_I2C_MspInit+0x1bc>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
}
 8004ca2:	bf00      	nop
 8004ca4:	37c8      	adds	r7, #200	; 0xc8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	40005400 	.word	0x40005400
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	48000400 	.word	0x48000400
 8004cb8:	40005800 	.word	0x40005800
 8004cbc:	40005c00 	.word	0x40005c00
 8004cc0:	48000800 	.word	0x48000800

08004cc4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <HAL_I2C_MspDeInit+0x8c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <HAL_I2C_MspDeInit+0x90>)
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <HAL_I2C_MspDeInit+0x90>)
 8004cdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ce0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8004ce2:	2140      	movs	r1, #64	; 0x40
 8004ce4:	481c      	ldr	r0, [pc, #112]	; (8004d58 <HAL_I2C_MspDeInit+0x94>)
 8004ce6:	f7fc fa5f 	bl	80011a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	481a      	ldr	r0, [pc, #104]	; (8004d58 <HAL_I2C_MspDeInit+0x94>)
 8004cee:	f7fc fa5b 	bl	80011a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8004cf2:	e028      	b.n	8004d46 <HAL_I2C_MspDeInit+0x82>
  else if(hi2c->Instance==I2C2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <HAL_I2C_MspDeInit+0x98>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d110      	bne.n	8004d20 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_I2C_MspDeInit+0x90>)
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <HAL_I2C_MspDeInit+0x90>)
 8004d04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004d08:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004d0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d0e:	4812      	ldr	r0, [pc, #72]	; (8004d58 <HAL_I2C_MspDeInit+0x94>)
 8004d10:	f7fc fa4a 	bl	80011a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8004d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d18:	480f      	ldr	r0, [pc, #60]	; (8004d58 <HAL_I2C_MspDeInit+0x94>)
 8004d1a:	f7fc fa45 	bl	80011a8 <HAL_GPIO_DeInit>
}
 8004d1e:	e012      	b.n	8004d46 <HAL_I2C_MspDeInit+0x82>
  else if(hi2c->Instance==I2C3)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0e      	ldr	r2, [pc, #56]	; (8004d60 <HAL_I2C_MspDeInit+0x9c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10d      	bne.n	8004d46 <HAL_I2C_MspDeInit+0x82>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004d2a:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <HAL_I2C_MspDeInit+0x90>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	4a09      	ldr	r2, [pc, #36]	; (8004d54 <HAL_I2C_MspDeInit+0x90>)
 8004d30:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d34:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8004d36:	2101      	movs	r1, #1
 8004d38:	480a      	ldr	r0, [pc, #40]	; (8004d64 <HAL_I2C_MspDeInit+0xa0>)
 8004d3a:	f7fc fa35 	bl	80011a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1);
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4808      	ldr	r0, [pc, #32]	; (8004d64 <HAL_I2C_MspDeInit+0xa0>)
 8004d42:	f7fc fa31 	bl	80011a8 <HAL_GPIO_DeInit>
}
 8004d46:	bf00      	nop
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40005400 	.word	0x40005400
 8004d54:	40021000 	.word	0x40021000
 8004d58:	48000400 	.word	0x48000400
 8004d5c:	40005800 	.word	0x40005800
 8004d60:	40005c00 	.word	0x40005c00
 8004d64:	48000800 	.word	0x48000800

08004d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b0ae      	sub	sp, #184	; 0xb8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	605a      	str	r2, [r3, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	2294      	movs	r2, #148	; 0x94
 8004d86:	2100      	movs	r1, #0
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 f91f 	bl	8004fcc <memset>
  if(huart->Instance==USART1)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_UART_MspInit+0xb4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d13c      	bne.n	8004e12 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe f8cf 	bl	8002f48 <HAL_RCCEx_PeriphCLKConfig>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004db0:	f7ff fe76 	bl	8004aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004db4:	4b1a      	ldr	r3, [pc, #104]	; (8004e20 <HAL_UART_MspInit+0xb8>)
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	4a19      	ldr	r2, [pc, #100]	; (8004e20 <HAL_UART_MspInit+0xb8>)
 8004dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <HAL_UART_MspInit+0xb8>)
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dcc:	4b14      	ldr	r3, [pc, #80]	; (8004e20 <HAL_UART_MspInit+0xb8>)
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <HAL_UART_MspInit+0xb8>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dd8:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <HAL_UART_MspInit+0xb8>)
 8004dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004de4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004de8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dec:	2302      	movs	r3, #2
 8004dee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dfe:	2307      	movs	r3, #7
 8004e00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e0e:	f7fc f839 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004e12:	bf00      	nop
 8004e14:	37b8      	adds	r7, #184	; 0xb8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40021000 	.word	0x40021000

08004e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e28:	e7fe      	b.n	8004e28 <NMI_Handler+0x4>

08004e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e2e:	e7fe      	b.n	8004e2e <HardFault_Handler+0x4>

08004e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e34:	e7fe      	b.n	8004e34 <MemManage_Handler+0x4>

08004e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e3a:	e7fe      	b.n	8004e3a <BusFault_Handler+0x4>

08004e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e40:	e7fe      	b.n	8004e40 <UsageFault_Handler+0x4>

08004e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e70:	f7fb feb2 	bl	8000bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e74:	bf00      	nop
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <_sbrk+0x5c>)
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <_sbrk+0x60>)
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <_sbrk+0x64>)
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <_sbrk+0x68>)
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <_sbrk+0x64>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d207      	bcs.n	8004eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ea8:	f000 f858 	bl	8004f5c <__errno>
 8004eac:	4603      	mov	r3, r0
 8004eae:	220c      	movs	r2, #12
 8004eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb6:	e009      	b.n	8004ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <_sbrk+0x64>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <_sbrk+0x64>)
 8004ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200a0000 	.word	0x200a0000
 8004ed8:	00000400 	.word	0x00000400
 8004edc:	2000030c 	.word	0x2000030c
 8004ee0:	20000320 	.word	0x20000320

08004ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <SystemInit+0x20>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <SystemInit+0x20>)
 8004ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f0c:	f7ff ffea 	bl	8004ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f10:	480c      	ldr	r0, [pc, #48]	; (8004f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f12:	490d      	ldr	r1, [pc, #52]	; (8004f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f14:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <LoopForever+0xe>)
  movs r3, #0
 8004f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f18:	e002      	b.n	8004f20 <LoopCopyDataInit>

08004f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f1e:	3304      	adds	r3, #4

08004f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f24:	d3f9      	bcc.n	8004f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f28:	4c0a      	ldr	r4, [pc, #40]	; (8004f54 <LoopForever+0x16>)
  movs r3, #0
 8004f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f2c:	e001      	b.n	8004f32 <LoopFillZerobss>

08004f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f30:	3204      	adds	r2, #4

08004f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f34:	d3fb      	bcc.n	8004f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f36:	f000 f817 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f3a:	f7ff fbb9 	bl	80046b0 <main>

08004f3e <LoopForever>:

LoopForever:
    b LoopForever
 8004f3e:	e7fe      	b.n	8004f3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004f40:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f48:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8004f4c:	080059a8 	.word	0x080059a8
  ldr r2, =_sbss
 8004f50:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8004f54:	20000320 	.word	0x20000320

08004f58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f58:	e7fe      	b.n	8004f58 <ADC1_IRQHandler>
	...

08004f5c <__errno>:
 8004f5c:	4b01      	ldr	r3, [pc, #4]	; (8004f64 <__errno+0x8>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000040 	.word	0x20000040

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4d0d      	ldr	r5, [pc, #52]	; (8004fa0 <__libc_init_array+0x38>)
 8004f6c:	4c0d      	ldr	r4, [pc, #52]	; (8004fa4 <__libc_init_array+0x3c>)
 8004f6e:	1b64      	subs	r4, r4, r5
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	2600      	movs	r6, #0
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	4d0b      	ldr	r5, [pc, #44]	; (8004fa8 <__libc_init_array+0x40>)
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	; (8004fac <__libc_init_array+0x44>)
 8004f7c:	f000 fc8e 	bl	800589c <_init>
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	2600      	movs	r6, #0
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	080059a0 	.word	0x080059a0
 8004fa4:	080059a0 	.word	0x080059a0
 8004fa8:	080059a0 	.word	0x080059a0
 8004fac:	080059a4 	.word	0x080059a4

08004fb0 <memcpy>:
 8004fb0:	440a      	add	r2, r1
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004fb8:	d100      	bne.n	8004fbc <memcpy+0xc>
 8004fba:	4770      	bx	lr
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	d1f9      	bne.n	8004fbe <memcpy+0xe>
 8004fca:	bd10      	pop	{r4, pc}

08004fcc <memset>:
 8004fcc:	4402      	add	r2, r0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d100      	bne.n	8004fd6 <memset+0xa>
 8004fd4:	4770      	bx	lr
 8004fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004fda:	e7f9      	b.n	8004fd0 <memset+0x4>

08004fdc <siprintf>:
 8004fdc:	b40e      	push	{r1, r2, r3}
 8004fde:	b500      	push	{lr}
 8004fe0:	b09c      	sub	sp, #112	; 0x70
 8004fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8004fe4:	9002      	str	r0, [sp, #8]
 8004fe6:	9006      	str	r0, [sp, #24]
 8004fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fec:	4809      	ldr	r0, [pc, #36]	; (8005014 <siprintf+0x38>)
 8004fee:	9107      	str	r1, [sp, #28]
 8004ff0:	9104      	str	r1, [sp, #16]
 8004ff2:	4909      	ldr	r1, [pc, #36]	; (8005018 <siprintf+0x3c>)
 8004ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff8:	9105      	str	r1, [sp, #20]
 8004ffa:	6800      	ldr	r0, [r0, #0]
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	a902      	add	r1, sp, #8
 8005000:	f000 f868 	bl	80050d4 <_svfiprintf_r>
 8005004:	9b02      	ldr	r3, [sp, #8]
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	b01c      	add	sp, #112	; 0x70
 800500c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005010:	b003      	add	sp, #12
 8005012:	4770      	bx	lr
 8005014:	20000040 	.word	0x20000040
 8005018:	ffff0208 	.word	0xffff0208

0800501c <__ssputs_r>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	688e      	ldr	r6, [r1, #8]
 8005022:	429e      	cmp	r6, r3
 8005024:	4682      	mov	sl, r0
 8005026:	460c      	mov	r4, r1
 8005028:	4690      	mov	r8, r2
 800502a:	461f      	mov	r7, r3
 800502c:	d838      	bhi.n	80050a0 <__ssputs_r+0x84>
 800502e:	898a      	ldrh	r2, [r1, #12]
 8005030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005034:	d032      	beq.n	800509c <__ssputs_r+0x80>
 8005036:	6825      	ldr	r5, [r4, #0]
 8005038:	6909      	ldr	r1, [r1, #16]
 800503a:	eba5 0901 	sub.w	r9, r5, r1
 800503e:	6965      	ldr	r5, [r4, #20]
 8005040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005048:	3301      	adds	r3, #1
 800504a:	444b      	add	r3, r9
 800504c:	106d      	asrs	r5, r5, #1
 800504e:	429d      	cmp	r5, r3
 8005050:	bf38      	it	cc
 8005052:	461d      	movcc	r5, r3
 8005054:	0553      	lsls	r3, r2, #21
 8005056:	d531      	bpl.n	80050bc <__ssputs_r+0xa0>
 8005058:	4629      	mov	r1, r5
 800505a:	f000 fb55 	bl	8005708 <_malloc_r>
 800505e:	4606      	mov	r6, r0
 8005060:	b950      	cbnz	r0, 8005078 <__ssputs_r+0x5c>
 8005062:	230c      	movs	r3, #12
 8005064:	f8ca 3000 	str.w	r3, [sl]
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005078:	6921      	ldr	r1, [r4, #16]
 800507a:	464a      	mov	r2, r9
 800507c:	f7ff ff98 	bl	8004fb0 <memcpy>
 8005080:	89a3      	ldrh	r3, [r4, #12]
 8005082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	6126      	str	r6, [r4, #16]
 800508e:	6165      	str	r5, [r4, #20]
 8005090:	444e      	add	r6, r9
 8005092:	eba5 0509 	sub.w	r5, r5, r9
 8005096:	6026      	str	r6, [r4, #0]
 8005098:	60a5      	str	r5, [r4, #8]
 800509a:	463e      	mov	r6, r7
 800509c:	42be      	cmp	r6, r7
 800509e:	d900      	bls.n	80050a2 <__ssputs_r+0x86>
 80050a0:	463e      	mov	r6, r7
 80050a2:	6820      	ldr	r0, [r4, #0]
 80050a4:	4632      	mov	r2, r6
 80050a6:	4641      	mov	r1, r8
 80050a8:	f000 faa8 	bl	80055fc <memmove>
 80050ac:	68a3      	ldr	r3, [r4, #8]
 80050ae:	1b9b      	subs	r3, r3, r6
 80050b0:	60a3      	str	r3, [r4, #8]
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	4433      	add	r3, r6
 80050b6:	6023      	str	r3, [r4, #0]
 80050b8:	2000      	movs	r0, #0
 80050ba:	e7db      	b.n	8005074 <__ssputs_r+0x58>
 80050bc:	462a      	mov	r2, r5
 80050be:	f000 fb97 	bl	80057f0 <_realloc_r>
 80050c2:	4606      	mov	r6, r0
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d1e1      	bne.n	800508c <__ssputs_r+0x70>
 80050c8:	6921      	ldr	r1, [r4, #16]
 80050ca:	4650      	mov	r0, sl
 80050cc:	f000 fab0 	bl	8005630 <_free_r>
 80050d0:	e7c7      	b.n	8005062 <__ssputs_r+0x46>
	...

080050d4 <_svfiprintf_r>:
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	4698      	mov	r8, r3
 80050da:	898b      	ldrh	r3, [r1, #12]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	b09d      	sub	sp, #116	; 0x74
 80050e0:	4607      	mov	r7, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	d50e      	bpl.n	8005106 <_svfiprintf_r+0x32>
 80050e8:	690b      	ldr	r3, [r1, #16]
 80050ea:	b963      	cbnz	r3, 8005106 <_svfiprintf_r+0x32>
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	f000 fb0b 	bl	8005708 <_malloc_r>
 80050f2:	6028      	str	r0, [r5, #0]
 80050f4:	6128      	str	r0, [r5, #16]
 80050f6:	b920      	cbnz	r0, 8005102 <_svfiprintf_r+0x2e>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005100:	e0d1      	b.n	80052a6 <_svfiprintf_r+0x1d2>
 8005102:	2340      	movs	r3, #64	; 0x40
 8005104:	616b      	str	r3, [r5, #20]
 8005106:	2300      	movs	r3, #0
 8005108:	9309      	str	r3, [sp, #36]	; 0x24
 800510a:	2320      	movs	r3, #32
 800510c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005110:	f8cd 800c 	str.w	r8, [sp, #12]
 8005114:	2330      	movs	r3, #48	; 0x30
 8005116:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052c0 <_svfiprintf_r+0x1ec>
 800511a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800511e:	f04f 0901 	mov.w	r9, #1
 8005122:	4623      	mov	r3, r4
 8005124:	469a      	mov	sl, r3
 8005126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800512a:	b10a      	cbz	r2, 8005130 <_svfiprintf_r+0x5c>
 800512c:	2a25      	cmp	r2, #37	; 0x25
 800512e:	d1f9      	bne.n	8005124 <_svfiprintf_r+0x50>
 8005130:	ebba 0b04 	subs.w	fp, sl, r4
 8005134:	d00b      	beq.n	800514e <_svfiprintf_r+0x7a>
 8005136:	465b      	mov	r3, fp
 8005138:	4622      	mov	r2, r4
 800513a:	4629      	mov	r1, r5
 800513c:	4638      	mov	r0, r7
 800513e:	f7ff ff6d 	bl	800501c <__ssputs_r>
 8005142:	3001      	adds	r0, #1
 8005144:	f000 80aa 	beq.w	800529c <_svfiprintf_r+0x1c8>
 8005148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800514a:	445a      	add	r2, fp
 800514c:	9209      	str	r2, [sp, #36]	; 0x24
 800514e:	f89a 3000 	ldrb.w	r3, [sl]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80a2 	beq.w	800529c <_svfiprintf_r+0x1c8>
 8005158:	2300      	movs	r3, #0
 800515a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800515e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005162:	f10a 0a01 	add.w	sl, sl, #1
 8005166:	9304      	str	r3, [sp, #16]
 8005168:	9307      	str	r3, [sp, #28]
 800516a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800516e:	931a      	str	r3, [sp, #104]	; 0x68
 8005170:	4654      	mov	r4, sl
 8005172:	2205      	movs	r2, #5
 8005174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005178:	4851      	ldr	r0, [pc, #324]	; (80052c0 <_svfiprintf_r+0x1ec>)
 800517a:	f7fb f849 	bl	8000210 <memchr>
 800517e:	9a04      	ldr	r2, [sp, #16]
 8005180:	b9d8      	cbnz	r0, 80051ba <_svfiprintf_r+0xe6>
 8005182:	06d0      	lsls	r0, r2, #27
 8005184:	bf44      	itt	mi
 8005186:	2320      	movmi	r3, #32
 8005188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800518c:	0711      	lsls	r1, r2, #28
 800518e:	bf44      	itt	mi
 8005190:	232b      	movmi	r3, #43	; 0x2b
 8005192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005196:	f89a 3000 	ldrb.w	r3, [sl]
 800519a:	2b2a      	cmp	r3, #42	; 0x2a
 800519c:	d015      	beq.n	80051ca <_svfiprintf_r+0xf6>
 800519e:	9a07      	ldr	r2, [sp, #28]
 80051a0:	4654      	mov	r4, sl
 80051a2:	2000      	movs	r0, #0
 80051a4:	f04f 0c0a 	mov.w	ip, #10
 80051a8:	4621      	mov	r1, r4
 80051aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ae:	3b30      	subs	r3, #48	; 0x30
 80051b0:	2b09      	cmp	r3, #9
 80051b2:	d94e      	bls.n	8005252 <_svfiprintf_r+0x17e>
 80051b4:	b1b0      	cbz	r0, 80051e4 <_svfiprintf_r+0x110>
 80051b6:	9207      	str	r2, [sp, #28]
 80051b8:	e014      	b.n	80051e4 <_svfiprintf_r+0x110>
 80051ba:	eba0 0308 	sub.w	r3, r0, r8
 80051be:	fa09 f303 	lsl.w	r3, r9, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	46a2      	mov	sl, r4
 80051c8:	e7d2      	b.n	8005170 <_svfiprintf_r+0x9c>
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	1d19      	adds	r1, r3, #4
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	9103      	str	r1, [sp, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bfbb      	ittet	lt
 80051d6:	425b      	neglt	r3, r3
 80051d8:	f042 0202 	orrlt.w	r2, r2, #2
 80051dc:	9307      	strge	r3, [sp, #28]
 80051de:	9307      	strlt	r3, [sp, #28]
 80051e0:	bfb8      	it	lt
 80051e2:	9204      	strlt	r2, [sp, #16]
 80051e4:	7823      	ldrb	r3, [r4, #0]
 80051e6:	2b2e      	cmp	r3, #46	; 0x2e
 80051e8:	d10c      	bne.n	8005204 <_svfiprintf_r+0x130>
 80051ea:	7863      	ldrb	r3, [r4, #1]
 80051ec:	2b2a      	cmp	r3, #42	; 0x2a
 80051ee:	d135      	bne.n	800525c <_svfiprintf_r+0x188>
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	9203      	str	r2, [sp, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bfb8      	it	lt
 80051fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005200:	3402      	adds	r4, #2
 8005202:	9305      	str	r3, [sp, #20]
 8005204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80052d0 <_svfiprintf_r+0x1fc>
 8005208:	7821      	ldrb	r1, [r4, #0]
 800520a:	2203      	movs	r2, #3
 800520c:	4650      	mov	r0, sl
 800520e:	f7fa ffff 	bl	8000210 <memchr>
 8005212:	b140      	cbz	r0, 8005226 <_svfiprintf_r+0x152>
 8005214:	2340      	movs	r3, #64	; 0x40
 8005216:	eba0 000a 	sub.w	r0, r0, sl
 800521a:	fa03 f000 	lsl.w	r0, r3, r0
 800521e:	9b04      	ldr	r3, [sp, #16]
 8005220:	4303      	orrs	r3, r0
 8005222:	3401      	adds	r4, #1
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800522a:	4826      	ldr	r0, [pc, #152]	; (80052c4 <_svfiprintf_r+0x1f0>)
 800522c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005230:	2206      	movs	r2, #6
 8005232:	f7fa ffed 	bl	8000210 <memchr>
 8005236:	2800      	cmp	r0, #0
 8005238:	d038      	beq.n	80052ac <_svfiprintf_r+0x1d8>
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <_svfiprintf_r+0x1f4>)
 800523c:	bb1b      	cbnz	r3, 8005286 <_svfiprintf_r+0x1b2>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	3307      	adds	r3, #7
 8005242:	f023 0307 	bic.w	r3, r3, #7
 8005246:	3308      	adds	r3, #8
 8005248:	9303      	str	r3, [sp, #12]
 800524a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524c:	4433      	add	r3, r6
 800524e:	9309      	str	r3, [sp, #36]	; 0x24
 8005250:	e767      	b.n	8005122 <_svfiprintf_r+0x4e>
 8005252:	fb0c 3202 	mla	r2, ip, r2, r3
 8005256:	460c      	mov	r4, r1
 8005258:	2001      	movs	r0, #1
 800525a:	e7a5      	b.n	80051a8 <_svfiprintf_r+0xd4>
 800525c:	2300      	movs	r3, #0
 800525e:	3401      	adds	r4, #1
 8005260:	9305      	str	r3, [sp, #20]
 8005262:	4619      	mov	r1, r3
 8005264:	f04f 0c0a 	mov.w	ip, #10
 8005268:	4620      	mov	r0, r4
 800526a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800526e:	3a30      	subs	r2, #48	; 0x30
 8005270:	2a09      	cmp	r2, #9
 8005272:	d903      	bls.n	800527c <_svfiprintf_r+0x1a8>
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0c5      	beq.n	8005204 <_svfiprintf_r+0x130>
 8005278:	9105      	str	r1, [sp, #20]
 800527a:	e7c3      	b.n	8005204 <_svfiprintf_r+0x130>
 800527c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005280:	4604      	mov	r4, r0
 8005282:	2301      	movs	r3, #1
 8005284:	e7f0      	b.n	8005268 <_svfiprintf_r+0x194>
 8005286:	ab03      	add	r3, sp, #12
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	462a      	mov	r2, r5
 800528c:	4b0f      	ldr	r3, [pc, #60]	; (80052cc <_svfiprintf_r+0x1f8>)
 800528e:	a904      	add	r1, sp, #16
 8005290:	4638      	mov	r0, r7
 8005292:	f3af 8000 	nop.w
 8005296:	1c42      	adds	r2, r0, #1
 8005298:	4606      	mov	r6, r0
 800529a:	d1d6      	bne.n	800524a <_svfiprintf_r+0x176>
 800529c:	89ab      	ldrh	r3, [r5, #12]
 800529e:	065b      	lsls	r3, r3, #25
 80052a0:	f53f af2c 	bmi.w	80050fc <_svfiprintf_r+0x28>
 80052a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052a6:	b01d      	add	sp, #116	; 0x74
 80052a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ac:	ab03      	add	r3, sp, #12
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	462a      	mov	r2, r5
 80052b2:	4b06      	ldr	r3, [pc, #24]	; (80052cc <_svfiprintf_r+0x1f8>)
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	4638      	mov	r0, r7
 80052b8:	f000 f87a 	bl	80053b0 <_printf_i>
 80052bc:	e7eb      	b.n	8005296 <_svfiprintf_r+0x1c2>
 80052be:	bf00      	nop
 80052c0:	08005964 	.word	0x08005964
 80052c4:	0800596e 	.word	0x0800596e
 80052c8:	00000000 	.word	0x00000000
 80052cc:	0800501d 	.word	0x0800501d
 80052d0:	0800596a 	.word	0x0800596a

080052d4 <_printf_common>:
 80052d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d8:	4616      	mov	r6, r2
 80052da:	4699      	mov	r9, r3
 80052dc:	688a      	ldr	r2, [r1, #8]
 80052de:	690b      	ldr	r3, [r1, #16]
 80052e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e4:	4293      	cmp	r3, r2
 80052e6:	bfb8      	it	lt
 80052e8:	4613      	movlt	r3, r2
 80052ea:	6033      	str	r3, [r6, #0]
 80052ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052f0:	4607      	mov	r7, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	b10a      	cbz	r2, 80052fa <_printf_common+0x26>
 80052f6:	3301      	adds	r3, #1
 80052f8:	6033      	str	r3, [r6, #0]
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	0699      	lsls	r1, r3, #26
 80052fe:	bf42      	ittt	mi
 8005300:	6833      	ldrmi	r3, [r6, #0]
 8005302:	3302      	addmi	r3, #2
 8005304:	6033      	strmi	r3, [r6, #0]
 8005306:	6825      	ldr	r5, [r4, #0]
 8005308:	f015 0506 	ands.w	r5, r5, #6
 800530c:	d106      	bne.n	800531c <_printf_common+0x48>
 800530e:	f104 0a19 	add.w	sl, r4, #25
 8005312:	68e3      	ldr	r3, [r4, #12]
 8005314:	6832      	ldr	r2, [r6, #0]
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	42ab      	cmp	r3, r5
 800531a:	dc26      	bgt.n	800536a <_printf_common+0x96>
 800531c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005320:	1e13      	subs	r3, r2, #0
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	bf18      	it	ne
 8005326:	2301      	movne	r3, #1
 8005328:	0692      	lsls	r2, r2, #26
 800532a:	d42b      	bmi.n	8005384 <_printf_common+0xb0>
 800532c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005330:	4649      	mov	r1, r9
 8005332:	4638      	mov	r0, r7
 8005334:	47c0      	blx	r8
 8005336:	3001      	adds	r0, #1
 8005338:	d01e      	beq.n	8005378 <_printf_common+0xa4>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	68e5      	ldr	r5, [r4, #12]
 800533e:	6832      	ldr	r2, [r6, #0]
 8005340:	f003 0306 	and.w	r3, r3, #6
 8005344:	2b04      	cmp	r3, #4
 8005346:	bf08      	it	eq
 8005348:	1aad      	subeq	r5, r5, r2
 800534a:	68a3      	ldr	r3, [r4, #8]
 800534c:	6922      	ldr	r2, [r4, #16]
 800534e:	bf0c      	ite	eq
 8005350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005354:	2500      	movne	r5, #0
 8005356:	4293      	cmp	r3, r2
 8005358:	bfc4      	itt	gt
 800535a:	1a9b      	subgt	r3, r3, r2
 800535c:	18ed      	addgt	r5, r5, r3
 800535e:	2600      	movs	r6, #0
 8005360:	341a      	adds	r4, #26
 8005362:	42b5      	cmp	r5, r6
 8005364:	d11a      	bne.n	800539c <_printf_common+0xc8>
 8005366:	2000      	movs	r0, #0
 8005368:	e008      	b.n	800537c <_printf_common+0xa8>
 800536a:	2301      	movs	r3, #1
 800536c:	4652      	mov	r2, sl
 800536e:	4649      	mov	r1, r9
 8005370:	4638      	mov	r0, r7
 8005372:	47c0      	blx	r8
 8005374:	3001      	adds	r0, #1
 8005376:	d103      	bne.n	8005380 <_printf_common+0xac>
 8005378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800537c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005380:	3501      	adds	r5, #1
 8005382:	e7c6      	b.n	8005312 <_printf_common+0x3e>
 8005384:	18e1      	adds	r1, r4, r3
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	2030      	movs	r0, #48	; 0x30
 800538a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800538e:	4422      	add	r2, r4
 8005390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005398:	3302      	adds	r3, #2
 800539a:	e7c7      	b.n	800532c <_printf_common+0x58>
 800539c:	2301      	movs	r3, #1
 800539e:	4622      	mov	r2, r4
 80053a0:	4649      	mov	r1, r9
 80053a2:	4638      	mov	r0, r7
 80053a4:	47c0      	blx	r8
 80053a6:	3001      	adds	r0, #1
 80053a8:	d0e6      	beq.n	8005378 <_printf_common+0xa4>
 80053aa:	3601      	adds	r6, #1
 80053ac:	e7d9      	b.n	8005362 <_printf_common+0x8e>
	...

080053b0 <_printf_i>:
 80053b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b4:	7e0f      	ldrb	r7, [r1, #24]
 80053b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b8:	2f78      	cmp	r7, #120	; 0x78
 80053ba:	4691      	mov	r9, r2
 80053bc:	4680      	mov	r8, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	469a      	mov	sl, r3
 80053c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053c6:	d807      	bhi.n	80053d8 <_printf_i+0x28>
 80053c8:	2f62      	cmp	r7, #98	; 0x62
 80053ca:	d80a      	bhi.n	80053e2 <_printf_i+0x32>
 80053cc:	2f00      	cmp	r7, #0
 80053ce:	f000 80d8 	beq.w	8005582 <_printf_i+0x1d2>
 80053d2:	2f58      	cmp	r7, #88	; 0x58
 80053d4:	f000 80a3 	beq.w	800551e <_printf_i+0x16e>
 80053d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053e0:	e03a      	b.n	8005458 <_printf_i+0xa8>
 80053e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053e6:	2b15      	cmp	r3, #21
 80053e8:	d8f6      	bhi.n	80053d8 <_printf_i+0x28>
 80053ea:	a101      	add	r1, pc, #4	; (adr r1, 80053f0 <_printf_i+0x40>)
 80053ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053f0:	08005449 	.word	0x08005449
 80053f4:	0800545d 	.word	0x0800545d
 80053f8:	080053d9 	.word	0x080053d9
 80053fc:	080053d9 	.word	0x080053d9
 8005400:	080053d9 	.word	0x080053d9
 8005404:	080053d9 	.word	0x080053d9
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080053d9 	.word	0x080053d9
 8005410:	080053d9 	.word	0x080053d9
 8005414:	080053d9 	.word	0x080053d9
 8005418:	080053d9 	.word	0x080053d9
 800541c:	08005569 	.word	0x08005569
 8005420:	0800548d 	.word	0x0800548d
 8005424:	0800554b 	.word	0x0800554b
 8005428:	080053d9 	.word	0x080053d9
 800542c:	080053d9 	.word	0x080053d9
 8005430:	0800558b 	.word	0x0800558b
 8005434:	080053d9 	.word	0x080053d9
 8005438:	0800548d 	.word	0x0800548d
 800543c:	080053d9 	.word	0x080053d9
 8005440:	080053d9 	.word	0x080053d9
 8005444:	08005553 	.word	0x08005553
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	1d1a      	adds	r2, r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	602a      	str	r2, [r5, #0]
 8005450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005458:	2301      	movs	r3, #1
 800545a:	e0a3      	b.n	80055a4 <_printf_i+0x1f4>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	6829      	ldr	r1, [r5, #0]
 8005460:	0606      	lsls	r6, r0, #24
 8005462:	f101 0304 	add.w	r3, r1, #4
 8005466:	d50a      	bpl.n	800547e <_printf_i+0xce>
 8005468:	680e      	ldr	r6, [r1, #0]
 800546a:	602b      	str	r3, [r5, #0]
 800546c:	2e00      	cmp	r6, #0
 800546e:	da03      	bge.n	8005478 <_printf_i+0xc8>
 8005470:	232d      	movs	r3, #45	; 0x2d
 8005472:	4276      	negs	r6, r6
 8005474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005478:	485e      	ldr	r0, [pc, #376]	; (80055f4 <_printf_i+0x244>)
 800547a:	230a      	movs	r3, #10
 800547c:	e019      	b.n	80054b2 <_printf_i+0x102>
 800547e:	680e      	ldr	r6, [r1, #0]
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005486:	bf18      	it	ne
 8005488:	b236      	sxthne	r6, r6
 800548a:	e7ef      	b.n	800546c <_printf_i+0xbc>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1d19      	adds	r1, r3, #4
 8005492:	6029      	str	r1, [r5, #0]
 8005494:	0601      	lsls	r1, r0, #24
 8005496:	d501      	bpl.n	800549c <_printf_i+0xec>
 8005498:	681e      	ldr	r6, [r3, #0]
 800549a:	e002      	b.n	80054a2 <_printf_i+0xf2>
 800549c:	0646      	lsls	r6, r0, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0xe8>
 80054a0:	881e      	ldrh	r6, [r3, #0]
 80054a2:	4854      	ldr	r0, [pc, #336]	; (80055f4 <_printf_i+0x244>)
 80054a4:	2f6f      	cmp	r7, #111	; 0x6f
 80054a6:	bf0c      	ite	eq
 80054a8:	2308      	moveq	r3, #8
 80054aa:	230a      	movne	r3, #10
 80054ac:	2100      	movs	r1, #0
 80054ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054b2:	6865      	ldr	r5, [r4, #4]
 80054b4:	60a5      	str	r5, [r4, #8]
 80054b6:	2d00      	cmp	r5, #0
 80054b8:	bfa2      	ittt	ge
 80054ba:	6821      	ldrge	r1, [r4, #0]
 80054bc:	f021 0104 	bicge.w	r1, r1, #4
 80054c0:	6021      	strge	r1, [r4, #0]
 80054c2:	b90e      	cbnz	r6, 80054c8 <_printf_i+0x118>
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	d04d      	beq.n	8005564 <_printf_i+0x1b4>
 80054c8:	4615      	mov	r5, r2
 80054ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80054ce:	fb03 6711 	mls	r7, r3, r1, r6
 80054d2:	5dc7      	ldrb	r7, [r0, r7]
 80054d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054d8:	4637      	mov	r7, r6
 80054da:	42bb      	cmp	r3, r7
 80054dc:	460e      	mov	r6, r1
 80054de:	d9f4      	bls.n	80054ca <_printf_i+0x11a>
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d10b      	bne.n	80054fc <_printf_i+0x14c>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	07de      	lsls	r6, r3, #31
 80054e8:	d508      	bpl.n	80054fc <_printf_i+0x14c>
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	6861      	ldr	r1, [r4, #4]
 80054ee:	4299      	cmp	r1, r3
 80054f0:	bfde      	ittt	le
 80054f2:	2330      	movle	r3, #48	; 0x30
 80054f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054f8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054fc:	1b52      	subs	r2, r2, r5
 80054fe:	6122      	str	r2, [r4, #16]
 8005500:	f8cd a000 	str.w	sl, [sp]
 8005504:	464b      	mov	r3, r9
 8005506:	aa03      	add	r2, sp, #12
 8005508:	4621      	mov	r1, r4
 800550a:	4640      	mov	r0, r8
 800550c:	f7ff fee2 	bl	80052d4 <_printf_common>
 8005510:	3001      	adds	r0, #1
 8005512:	d14c      	bne.n	80055ae <_printf_i+0x1fe>
 8005514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005518:	b004      	add	sp, #16
 800551a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800551e:	4835      	ldr	r0, [pc, #212]	; (80055f4 <_printf_i+0x244>)
 8005520:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005524:	6829      	ldr	r1, [r5, #0]
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f851 6b04 	ldr.w	r6, [r1], #4
 800552c:	6029      	str	r1, [r5, #0]
 800552e:	061d      	lsls	r5, r3, #24
 8005530:	d514      	bpl.n	800555c <_printf_i+0x1ac>
 8005532:	07df      	lsls	r7, r3, #31
 8005534:	bf44      	itt	mi
 8005536:	f043 0320 	orrmi.w	r3, r3, #32
 800553a:	6023      	strmi	r3, [r4, #0]
 800553c:	b91e      	cbnz	r6, 8005546 <_printf_i+0x196>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	f023 0320 	bic.w	r3, r3, #32
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	2310      	movs	r3, #16
 8005548:	e7b0      	b.n	80054ac <_printf_i+0xfc>
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	f043 0320 	orr.w	r3, r3, #32
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	2378      	movs	r3, #120	; 0x78
 8005554:	4828      	ldr	r0, [pc, #160]	; (80055f8 <_printf_i+0x248>)
 8005556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800555a:	e7e3      	b.n	8005524 <_printf_i+0x174>
 800555c:	0659      	lsls	r1, r3, #25
 800555e:	bf48      	it	mi
 8005560:	b2b6      	uxthmi	r6, r6
 8005562:	e7e6      	b.n	8005532 <_printf_i+0x182>
 8005564:	4615      	mov	r5, r2
 8005566:	e7bb      	b.n	80054e0 <_printf_i+0x130>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	6826      	ldr	r6, [r4, #0]
 800556c:	6961      	ldr	r1, [r4, #20]
 800556e:	1d18      	adds	r0, r3, #4
 8005570:	6028      	str	r0, [r5, #0]
 8005572:	0635      	lsls	r5, r6, #24
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	d501      	bpl.n	800557c <_printf_i+0x1cc>
 8005578:	6019      	str	r1, [r3, #0]
 800557a:	e002      	b.n	8005582 <_printf_i+0x1d2>
 800557c:	0670      	lsls	r0, r6, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0x1c8>
 8005580:	8019      	strh	r1, [r3, #0]
 8005582:	2300      	movs	r3, #0
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	4615      	mov	r5, r2
 8005588:	e7ba      	b.n	8005500 <_printf_i+0x150>
 800558a:	682b      	ldr	r3, [r5, #0]
 800558c:	1d1a      	adds	r2, r3, #4
 800558e:	602a      	str	r2, [r5, #0]
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	2100      	movs	r1, #0
 8005596:	4628      	mov	r0, r5
 8005598:	f7fa fe3a 	bl	8000210 <memchr>
 800559c:	b108      	cbz	r0, 80055a2 <_printf_i+0x1f2>
 800559e:	1b40      	subs	r0, r0, r5
 80055a0:	6060      	str	r0, [r4, #4]
 80055a2:	6863      	ldr	r3, [r4, #4]
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	2300      	movs	r3, #0
 80055a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ac:	e7a8      	b.n	8005500 <_printf_i+0x150>
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	462a      	mov	r2, r5
 80055b2:	4649      	mov	r1, r9
 80055b4:	4640      	mov	r0, r8
 80055b6:	47d0      	blx	sl
 80055b8:	3001      	adds	r0, #1
 80055ba:	d0ab      	beq.n	8005514 <_printf_i+0x164>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	079b      	lsls	r3, r3, #30
 80055c0:	d413      	bmi.n	80055ea <_printf_i+0x23a>
 80055c2:	68e0      	ldr	r0, [r4, #12]
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	4298      	cmp	r0, r3
 80055c8:	bfb8      	it	lt
 80055ca:	4618      	movlt	r0, r3
 80055cc:	e7a4      	b.n	8005518 <_printf_i+0x168>
 80055ce:	2301      	movs	r3, #1
 80055d0:	4632      	mov	r2, r6
 80055d2:	4649      	mov	r1, r9
 80055d4:	4640      	mov	r0, r8
 80055d6:	47d0      	blx	sl
 80055d8:	3001      	adds	r0, #1
 80055da:	d09b      	beq.n	8005514 <_printf_i+0x164>
 80055dc:	3501      	adds	r5, #1
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	9903      	ldr	r1, [sp, #12]
 80055e2:	1a5b      	subs	r3, r3, r1
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dcf2      	bgt.n	80055ce <_printf_i+0x21e>
 80055e8:	e7eb      	b.n	80055c2 <_printf_i+0x212>
 80055ea:	2500      	movs	r5, #0
 80055ec:	f104 0619 	add.w	r6, r4, #25
 80055f0:	e7f5      	b.n	80055de <_printf_i+0x22e>
 80055f2:	bf00      	nop
 80055f4:	08005975 	.word	0x08005975
 80055f8:	08005986 	.word	0x08005986

080055fc <memmove>:
 80055fc:	4288      	cmp	r0, r1
 80055fe:	b510      	push	{r4, lr}
 8005600:	eb01 0402 	add.w	r4, r1, r2
 8005604:	d902      	bls.n	800560c <memmove+0x10>
 8005606:	4284      	cmp	r4, r0
 8005608:	4623      	mov	r3, r4
 800560a:	d807      	bhi.n	800561c <memmove+0x20>
 800560c:	1e43      	subs	r3, r0, #1
 800560e:	42a1      	cmp	r1, r4
 8005610:	d008      	beq.n	8005624 <memmove+0x28>
 8005612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800561a:	e7f8      	b.n	800560e <memmove+0x12>
 800561c:	4402      	add	r2, r0
 800561e:	4601      	mov	r1, r0
 8005620:	428a      	cmp	r2, r1
 8005622:	d100      	bne.n	8005626 <memmove+0x2a>
 8005624:	bd10      	pop	{r4, pc}
 8005626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800562a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800562e:	e7f7      	b.n	8005620 <memmove+0x24>

08005630 <_free_r>:
 8005630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005632:	2900      	cmp	r1, #0
 8005634:	d044      	beq.n	80056c0 <_free_r+0x90>
 8005636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800563a:	9001      	str	r0, [sp, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	f1a1 0404 	sub.w	r4, r1, #4
 8005642:	bfb8      	it	lt
 8005644:	18e4      	addlt	r4, r4, r3
 8005646:	f000 f913 	bl	8005870 <__malloc_lock>
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <_free_r+0x94>)
 800564c:	9801      	ldr	r0, [sp, #4]
 800564e:	6813      	ldr	r3, [r2, #0]
 8005650:	b933      	cbnz	r3, 8005660 <_free_r+0x30>
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	6014      	str	r4, [r2, #0]
 8005656:	b003      	add	sp, #12
 8005658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800565c:	f000 b90e 	b.w	800587c <__malloc_unlock>
 8005660:	42a3      	cmp	r3, r4
 8005662:	d908      	bls.n	8005676 <_free_r+0x46>
 8005664:	6825      	ldr	r5, [r4, #0]
 8005666:	1961      	adds	r1, r4, r5
 8005668:	428b      	cmp	r3, r1
 800566a:	bf01      	itttt	eq
 800566c:	6819      	ldreq	r1, [r3, #0]
 800566e:	685b      	ldreq	r3, [r3, #4]
 8005670:	1949      	addeq	r1, r1, r5
 8005672:	6021      	streq	r1, [r4, #0]
 8005674:	e7ed      	b.n	8005652 <_free_r+0x22>
 8005676:	461a      	mov	r2, r3
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	b10b      	cbz	r3, 8005680 <_free_r+0x50>
 800567c:	42a3      	cmp	r3, r4
 800567e:	d9fa      	bls.n	8005676 <_free_r+0x46>
 8005680:	6811      	ldr	r1, [r2, #0]
 8005682:	1855      	adds	r5, r2, r1
 8005684:	42a5      	cmp	r5, r4
 8005686:	d10b      	bne.n	80056a0 <_free_r+0x70>
 8005688:	6824      	ldr	r4, [r4, #0]
 800568a:	4421      	add	r1, r4
 800568c:	1854      	adds	r4, r2, r1
 800568e:	42a3      	cmp	r3, r4
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	d1e0      	bne.n	8005656 <_free_r+0x26>
 8005694:	681c      	ldr	r4, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	6053      	str	r3, [r2, #4]
 800569a:	4421      	add	r1, r4
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	e7da      	b.n	8005656 <_free_r+0x26>
 80056a0:	d902      	bls.n	80056a8 <_free_r+0x78>
 80056a2:	230c      	movs	r3, #12
 80056a4:	6003      	str	r3, [r0, #0]
 80056a6:	e7d6      	b.n	8005656 <_free_r+0x26>
 80056a8:	6825      	ldr	r5, [r4, #0]
 80056aa:	1961      	adds	r1, r4, r5
 80056ac:	428b      	cmp	r3, r1
 80056ae:	bf04      	itt	eq
 80056b0:	6819      	ldreq	r1, [r3, #0]
 80056b2:	685b      	ldreq	r3, [r3, #4]
 80056b4:	6063      	str	r3, [r4, #4]
 80056b6:	bf04      	itt	eq
 80056b8:	1949      	addeq	r1, r1, r5
 80056ba:	6021      	streq	r1, [r4, #0]
 80056bc:	6054      	str	r4, [r2, #4]
 80056be:	e7ca      	b.n	8005656 <_free_r+0x26>
 80056c0:	b003      	add	sp, #12
 80056c2:	bd30      	pop	{r4, r5, pc}
 80056c4:	20000310 	.word	0x20000310

080056c8 <sbrk_aligned>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4e0e      	ldr	r6, [pc, #56]	; (8005704 <sbrk_aligned+0x3c>)
 80056cc:	460c      	mov	r4, r1
 80056ce:	6831      	ldr	r1, [r6, #0]
 80056d0:	4605      	mov	r5, r0
 80056d2:	b911      	cbnz	r1, 80056da <sbrk_aligned+0x12>
 80056d4:	f000 f8bc 	bl	8005850 <_sbrk_r>
 80056d8:	6030      	str	r0, [r6, #0]
 80056da:	4621      	mov	r1, r4
 80056dc:	4628      	mov	r0, r5
 80056de:	f000 f8b7 	bl	8005850 <_sbrk_r>
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	d00a      	beq.n	80056fc <sbrk_aligned+0x34>
 80056e6:	1cc4      	adds	r4, r0, #3
 80056e8:	f024 0403 	bic.w	r4, r4, #3
 80056ec:	42a0      	cmp	r0, r4
 80056ee:	d007      	beq.n	8005700 <sbrk_aligned+0x38>
 80056f0:	1a21      	subs	r1, r4, r0
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 f8ac 	bl	8005850 <_sbrk_r>
 80056f8:	3001      	adds	r0, #1
 80056fa:	d101      	bne.n	8005700 <sbrk_aligned+0x38>
 80056fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005700:	4620      	mov	r0, r4
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	20000314 	.word	0x20000314

08005708 <_malloc_r>:
 8005708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800570c:	1ccd      	adds	r5, r1, #3
 800570e:	f025 0503 	bic.w	r5, r5, #3
 8005712:	3508      	adds	r5, #8
 8005714:	2d0c      	cmp	r5, #12
 8005716:	bf38      	it	cc
 8005718:	250c      	movcc	r5, #12
 800571a:	2d00      	cmp	r5, #0
 800571c:	4607      	mov	r7, r0
 800571e:	db01      	blt.n	8005724 <_malloc_r+0x1c>
 8005720:	42a9      	cmp	r1, r5
 8005722:	d905      	bls.n	8005730 <_malloc_r+0x28>
 8005724:	230c      	movs	r3, #12
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	2600      	movs	r6, #0
 800572a:	4630      	mov	r0, r6
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	4e2e      	ldr	r6, [pc, #184]	; (80057ec <_malloc_r+0xe4>)
 8005732:	f000 f89d 	bl	8005870 <__malloc_lock>
 8005736:	6833      	ldr	r3, [r6, #0]
 8005738:	461c      	mov	r4, r3
 800573a:	bb34      	cbnz	r4, 800578a <_malloc_r+0x82>
 800573c:	4629      	mov	r1, r5
 800573e:	4638      	mov	r0, r7
 8005740:	f7ff ffc2 	bl	80056c8 <sbrk_aligned>
 8005744:	1c43      	adds	r3, r0, #1
 8005746:	4604      	mov	r4, r0
 8005748:	d14d      	bne.n	80057e6 <_malloc_r+0xde>
 800574a:	6834      	ldr	r4, [r6, #0]
 800574c:	4626      	mov	r6, r4
 800574e:	2e00      	cmp	r6, #0
 8005750:	d140      	bne.n	80057d4 <_malloc_r+0xcc>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	4631      	mov	r1, r6
 8005756:	4638      	mov	r0, r7
 8005758:	eb04 0803 	add.w	r8, r4, r3
 800575c:	f000 f878 	bl	8005850 <_sbrk_r>
 8005760:	4580      	cmp	r8, r0
 8005762:	d13a      	bne.n	80057da <_malloc_r+0xd2>
 8005764:	6821      	ldr	r1, [r4, #0]
 8005766:	3503      	adds	r5, #3
 8005768:	1a6d      	subs	r5, r5, r1
 800576a:	f025 0503 	bic.w	r5, r5, #3
 800576e:	3508      	adds	r5, #8
 8005770:	2d0c      	cmp	r5, #12
 8005772:	bf38      	it	cc
 8005774:	250c      	movcc	r5, #12
 8005776:	4629      	mov	r1, r5
 8005778:	4638      	mov	r0, r7
 800577a:	f7ff ffa5 	bl	80056c8 <sbrk_aligned>
 800577e:	3001      	adds	r0, #1
 8005780:	d02b      	beq.n	80057da <_malloc_r+0xd2>
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	442b      	add	r3, r5
 8005786:	6023      	str	r3, [r4, #0]
 8005788:	e00e      	b.n	80057a8 <_malloc_r+0xa0>
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	1b52      	subs	r2, r2, r5
 800578e:	d41e      	bmi.n	80057ce <_malloc_r+0xc6>
 8005790:	2a0b      	cmp	r2, #11
 8005792:	d916      	bls.n	80057c2 <_malloc_r+0xba>
 8005794:	1961      	adds	r1, r4, r5
 8005796:	42a3      	cmp	r3, r4
 8005798:	6025      	str	r5, [r4, #0]
 800579a:	bf18      	it	ne
 800579c:	6059      	strne	r1, [r3, #4]
 800579e:	6863      	ldr	r3, [r4, #4]
 80057a0:	bf08      	it	eq
 80057a2:	6031      	streq	r1, [r6, #0]
 80057a4:	5162      	str	r2, [r4, r5]
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	4638      	mov	r0, r7
 80057aa:	f104 060b 	add.w	r6, r4, #11
 80057ae:	f000 f865 	bl	800587c <__malloc_unlock>
 80057b2:	f026 0607 	bic.w	r6, r6, #7
 80057b6:	1d23      	adds	r3, r4, #4
 80057b8:	1af2      	subs	r2, r6, r3
 80057ba:	d0b6      	beq.n	800572a <_malloc_r+0x22>
 80057bc:	1b9b      	subs	r3, r3, r6
 80057be:	50a3      	str	r3, [r4, r2]
 80057c0:	e7b3      	b.n	800572a <_malloc_r+0x22>
 80057c2:	6862      	ldr	r2, [r4, #4]
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	bf0c      	ite	eq
 80057c8:	6032      	streq	r2, [r6, #0]
 80057ca:	605a      	strne	r2, [r3, #4]
 80057cc:	e7ec      	b.n	80057a8 <_malloc_r+0xa0>
 80057ce:	4623      	mov	r3, r4
 80057d0:	6864      	ldr	r4, [r4, #4]
 80057d2:	e7b2      	b.n	800573a <_malloc_r+0x32>
 80057d4:	4634      	mov	r4, r6
 80057d6:	6876      	ldr	r6, [r6, #4]
 80057d8:	e7b9      	b.n	800574e <_malloc_r+0x46>
 80057da:	230c      	movs	r3, #12
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	4638      	mov	r0, r7
 80057e0:	f000 f84c 	bl	800587c <__malloc_unlock>
 80057e4:	e7a1      	b.n	800572a <_malloc_r+0x22>
 80057e6:	6025      	str	r5, [r4, #0]
 80057e8:	e7de      	b.n	80057a8 <_malloc_r+0xa0>
 80057ea:	bf00      	nop
 80057ec:	20000310 	.word	0x20000310

080057f0 <_realloc_r>:
 80057f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f4:	4680      	mov	r8, r0
 80057f6:	4614      	mov	r4, r2
 80057f8:	460e      	mov	r6, r1
 80057fa:	b921      	cbnz	r1, 8005806 <_realloc_r+0x16>
 80057fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005800:	4611      	mov	r1, r2
 8005802:	f7ff bf81 	b.w	8005708 <_malloc_r>
 8005806:	b92a      	cbnz	r2, 8005814 <_realloc_r+0x24>
 8005808:	f7ff ff12 	bl	8005630 <_free_r>
 800580c:	4625      	mov	r5, r4
 800580e:	4628      	mov	r0, r5
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	f000 f838 	bl	8005888 <_malloc_usable_size_r>
 8005818:	4284      	cmp	r4, r0
 800581a:	4607      	mov	r7, r0
 800581c:	d802      	bhi.n	8005824 <_realloc_r+0x34>
 800581e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005822:	d812      	bhi.n	800584a <_realloc_r+0x5a>
 8005824:	4621      	mov	r1, r4
 8005826:	4640      	mov	r0, r8
 8005828:	f7ff ff6e 	bl	8005708 <_malloc_r>
 800582c:	4605      	mov	r5, r0
 800582e:	2800      	cmp	r0, #0
 8005830:	d0ed      	beq.n	800580e <_realloc_r+0x1e>
 8005832:	42bc      	cmp	r4, r7
 8005834:	4622      	mov	r2, r4
 8005836:	4631      	mov	r1, r6
 8005838:	bf28      	it	cs
 800583a:	463a      	movcs	r2, r7
 800583c:	f7ff fbb8 	bl	8004fb0 <memcpy>
 8005840:	4631      	mov	r1, r6
 8005842:	4640      	mov	r0, r8
 8005844:	f7ff fef4 	bl	8005630 <_free_r>
 8005848:	e7e1      	b.n	800580e <_realloc_r+0x1e>
 800584a:	4635      	mov	r5, r6
 800584c:	e7df      	b.n	800580e <_realloc_r+0x1e>
	...

08005850 <_sbrk_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d06      	ldr	r5, [pc, #24]	; (800586c <_sbrk_r+0x1c>)
 8005854:	2300      	movs	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	f7ff fb0c 	bl	8004e78 <_sbrk>
 8005860:	1c43      	adds	r3, r0, #1
 8005862:	d102      	bne.n	800586a <_sbrk_r+0x1a>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	b103      	cbz	r3, 800586a <_sbrk_r+0x1a>
 8005868:	6023      	str	r3, [r4, #0]
 800586a:	bd38      	pop	{r3, r4, r5, pc}
 800586c:	20000318 	.word	0x20000318

08005870 <__malloc_lock>:
 8005870:	4801      	ldr	r0, [pc, #4]	; (8005878 <__malloc_lock+0x8>)
 8005872:	f000 b811 	b.w	8005898 <__retarget_lock_acquire_recursive>
 8005876:	bf00      	nop
 8005878:	2000031c 	.word	0x2000031c

0800587c <__malloc_unlock>:
 800587c:	4801      	ldr	r0, [pc, #4]	; (8005884 <__malloc_unlock+0x8>)
 800587e:	f000 b80c 	b.w	800589a <__retarget_lock_release_recursive>
 8005882:	bf00      	nop
 8005884:	2000031c 	.word	0x2000031c

08005888 <_malloc_usable_size_r>:
 8005888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588c:	1f18      	subs	r0, r3, #4
 800588e:	2b00      	cmp	r3, #0
 8005890:	bfbc      	itt	lt
 8005892:	580b      	ldrlt	r3, [r1, r0]
 8005894:	18c0      	addlt	r0, r0, r3
 8005896:	4770      	bx	lr

08005898 <__retarget_lock_acquire_recursive>:
 8005898:	4770      	bx	lr

0800589a <__retarget_lock_release_recursive>:
 800589a:	4770      	bx	lr

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
