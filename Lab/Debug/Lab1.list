
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016d0  080016d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080016d0  080016d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016d0  080016d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016d4  080016d4  000116d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080016e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080016e4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004355  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ea8  00000000  00000000  00024391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  00025240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004d0  00000000  00000000  000257b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000297b1  00000000  00000000  00025c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005760  00000000  00000000  0004f439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc5b4  00000000  00000000  00054b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015114d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013b4  00000000  00000000  001511a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08001664 	.word	0x08001664

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08001664 	.word	0x08001664

080001fc <kalman>:
Kalman function updates values of a Kalman object based on it's current state and a current measurement
Called with the address of the Kalman object (integer - R0) and the current measurement (single-percision float - S0)
*/
kalman:
	// Push and pop non-scratch registers to prevent clobbering (I think that's the term)
	VPUSH {S1-S6} // Can prevent use of S6 by storing r after calculation and using that, but cannot then use store multiple
 80001fc:	ed6d 0a06 	vpush	{s1-s6}

	// Load single precision floating point registers with variables from structure
	VLDM.F32 R0, {S1-S5}
 8000200:	ecd0 0a05 	vldmia	r0, {s1-s5}



	// Start Kalman algorithm: *****************************************
	// p = p + q -- potential overflow
	VADD.F32 S5, S5, S1
 8000204:	ee72 2aa0 	vadd.f32	s5, s5, s1
	// k = p/(p + r)-- potential overflow and div by 0
	VADD.F32 S4, S5, S2
 8000208:	ee32 2a81 	vadd.f32	s4, s5, s2
	VDIV.F32 S4, S5, S4
 800020c:	ee82 2a82 	vdiv.f32	s4, s5, s4
	// x = x + k*(measurement - x) -- potential overflow and underflow
	VMLA.F32 S3, S4, S6
 8000210:	ee42 1a03 	vmla.f32	s3, s4, s6
	// p = (1 - k) * p -- potential overflow and underflow
	VMOV.F32 S6, #1.0
 8000214:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	VSUB.F32 S6, S6, S4
 8000218:	ee33 3a42 	vsub.f32	s6, s6, s4
	VMUL.F32 S5, S5, S6
 800021c:	ee62 2a83 	vmul.f32	s5, s5, s6
	// End Kalman algorithm ********************************************


	// Check for overflow, underflow, division by 0
	VMRS R1, FPSCR
 8000220:	eef1 1a10 	vmrs	r1, fpscr
	MOV R2, #0b1111
 8000224:	220f      	movs	r2, #15
	ORR R1, R2
 8000226:	4311      	orrs	r1, r2
	CMP R1, #1
 8000228:	2901      	cmp	r1, #1
	BEQ no_store
 800022a:	d001      	beq.n	8000230 <no_store>

	// Update structure values (store register values in memory)
	VSTM.F32 R0, {S1-S5}
 800022c:	ecc0 0a05 	vstmia	r0, {s1-s5}

08000230 <no_store>:
	no_store:

	// Restore non-scratch registers then leave function
	VPOP {S1-S6}
 8000230:	ecfd 0a06 	vpop	{s1-s6}
	BX LR
 8000234:	4770      	bx	lr

08000236 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	b082      	sub	sp, #8
 800023a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800023c:	2300      	movs	r3, #0
 800023e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000240:	2003      	movs	r0, #3
 8000242:	f000 f91f 	bl	8000484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f80e 	bl	8000268 <HAL_InitTick>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d002      	beq.n	8000258 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000252:	2301      	movs	r3, #1
 8000254:	71fb      	strb	r3, [r7, #7]
 8000256:	e001      	b.n	800025c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000258:	f001 f94e 	bl	80014f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800025c:	79fb      	ldrb	r3, [r7, #7]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000270:	2300      	movs	r3, #0
 8000272:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <HAL_InitTick+0x6c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d023      	beq.n	80002c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800027c:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <HAL_InitTick+0x70>)
 800027e:	681a      	ldr	r2, [r3, #0]
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <HAL_InitTick+0x6c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	4619      	mov	r1, r3
 8000286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800028a:	fbb3 f3f1 	udiv	r3, r3, r1
 800028e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f91d 	bl	80004d2 <HAL_SYSTICK_Config>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d10f      	bne.n	80002be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b0f      	cmp	r3, #15
 80002a2:	d809      	bhi.n	80002b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002a4:	2200      	movs	r2, #0
 80002a6:	6879      	ldr	r1, [r7, #4]
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002ac:	f000 f8f5 	bl	800049a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002b0:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <HAL_InitTick+0x74>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	6013      	str	r3, [r2, #0]
 80002b6:	e007      	b.n	80002c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
 80002bc:	e004      	b.n	80002c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002be:	2301      	movs	r3, #1
 80002c0:	73fb      	strb	r3, [r7, #15]
 80002c2:	e001      	b.n	80002c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002c4:	2301      	movs	r3, #1
 80002c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000004 	.word	0x20000004
 80002d8:	20000008 	.word	0x20000008
 80002dc:	20000000 	.word	0x20000000

080002e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002e4:	4b06      	ldr	r3, [pc, #24]	; (8000300 <HAL_IncTick+0x20>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <HAL_IncTick+0x24>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4413      	add	r3, r2
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <HAL_IncTick+0x24>)
 80002f2:	6013      	str	r3, [r2, #0]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000004 	.word	0x20000004
 8000304:	20000028 	.word	0x20000028

08000308 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return uwTick;
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <HAL_GetTick+0x14>)
 800030e:	681b      	ldr	r3, [r3, #0]
}
 8000310:	4618      	mov	r0, r3
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	20000028 	.word	0x20000028

08000320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	f003 0307 	and.w	r3, r3, #7
 800032e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <__NVIC_SetPriorityGrouping+0x44>)
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800033c:	4013      	ands	r3, r2
 800033e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800034c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000352:	4a04      	ldr	r2, [pc, #16]	; (8000364 <__NVIC_SetPriorityGrouping+0x44>)
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	60d3      	str	r3, [r2, #12]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <__NVIC_GetPriorityGrouping+0x18>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	0a1b      	lsrs	r3, r3, #8
 8000372:	f003 0307 	and.w	r3, r3, #7
}
 8000376:	4618      	mov	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	db0a      	blt.n	80003ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	b2da      	uxtb	r2, r3
 800039c:	490c      	ldr	r1, [pc, #48]	; (80003d0 <__NVIC_SetPriority+0x4c>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ac:	e00a      	b.n	80003c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4908      	ldr	r1, [pc, #32]	; (80003d4 <__NVIC_SetPriority+0x50>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	3b04      	subs	r3, #4
 80003bc:	0112      	lsls	r2, r2, #4
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	761a      	strb	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	e000e100 	.word	0xe000e100
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b089      	sub	sp, #36	; 0x24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	60f8      	str	r0, [r7, #12]
 80003e0:	60b9      	str	r1, [r7, #8]
 80003e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f003 0307 	and.w	r3, r3, #7
 80003ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003ec:	69fb      	ldr	r3, [r7, #28]
 80003ee:	f1c3 0307 	rsb	r3, r3, #7
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	bf28      	it	cs
 80003f6:	2304      	movcs	r3, #4
 80003f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003fa:	69fb      	ldr	r3, [r7, #28]
 80003fc:	3304      	adds	r3, #4
 80003fe:	2b06      	cmp	r3, #6
 8000400:	d902      	bls.n	8000408 <NVIC_EncodePriority+0x30>
 8000402:	69fb      	ldr	r3, [r7, #28]
 8000404:	3b03      	subs	r3, #3
 8000406:	e000      	b.n	800040a <NVIC_EncodePriority+0x32>
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800040c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	43da      	mvns	r2, r3
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	401a      	ands	r2, r3
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000420:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	43d9      	mvns	r1, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000430:	4313      	orrs	r3, r2
         );
}
 8000432:	4618      	mov	r0, r3
 8000434:	3724      	adds	r7, #36	; 0x24
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000450:	d301      	bcc.n	8000456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000452:	2301      	movs	r3, #1
 8000454:	e00f      	b.n	8000476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000456:	4a0a      	ldr	r2, [pc, #40]	; (8000480 <SysTick_Config+0x40>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800045e:	210f      	movs	r1, #15
 8000460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000464:	f7ff ff8e 	bl	8000384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <SysTick_Config+0x40>)
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800046e:	4b04      	ldr	r3, [pc, #16]	; (8000480 <SysTick_Config+0x40>)
 8000470:	2207      	movs	r2, #7
 8000472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000474:	2300      	movs	r3, #0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	e000e010 	.word	0xe000e010

08000484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ff47 	bl	8000320 <__NVIC_SetPriorityGrouping>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	4603      	mov	r3, r0
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
 80004a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004ac:	f7ff ff5c 	bl	8000368 <__NVIC_GetPriorityGrouping>
 80004b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	68b9      	ldr	r1, [r7, #8]
 80004b6:	6978      	ldr	r0, [r7, #20]
 80004b8:	f7ff ff8e 	bl	80003d8 <NVIC_EncodePriority>
 80004bc:	4602      	mov	r2, r0
 80004be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c2:	4611      	mov	r1, r2
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff5d 	bl	8000384 <__NVIC_SetPriority>
}
 80004ca:	bf00      	nop
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b082      	sub	sp, #8
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ffb0 	bl	8000440 <SysTick_Config>
 80004e0:	4603      	mov	r3, r0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80004f0:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <HAL_PWREx_GetVoltageRange+0x3c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80004f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004fc:	d102      	bne.n	8000504 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80004fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000502:	e00b      	b.n	800051c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000506:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800050a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800050e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000512:	d102      	bne.n	800051a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000514:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000518:	e000      	b.n	800051c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800051a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800051c:	4618      	mov	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40007000 	.word	0x40007000

0800052c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d141      	bne.n	80005be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800053a:	4b4b      	ldr	r3, [pc, #300]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000546:	d131      	bne.n	80005ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000548:	4b47      	ldr	r3, [pc, #284]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800054a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800054e:	4a46      	ldr	r2, [pc, #280]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000550:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000554:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	4b43      	ldr	r3, [pc, #268]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000560:	4a41      	ldr	r2, [pc, #260]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000562:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000566:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000568:	4b40      	ldr	r3, [pc, #256]	; (800066c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2232      	movs	r2, #50	; 0x32
 800056e:	fb02 f303 	mul.w	r3, r2, r3
 8000572:	4a3f      	ldr	r2, [pc, #252]	; (8000670 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	0c9b      	lsrs	r3, r3, #18
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800057e:	e002      	b.n	8000586 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	3b01      	subs	r3, #1
 8000584:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800058e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000592:	d102      	bne.n	800059a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f2      	bne.n	8000580 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005a6:	d158      	bne.n	800065a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80005a8:	2303      	movs	r3, #3
 80005aa:	e057      	b.n	800065c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005ac:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80005bc:	e04d      	b.n	800065a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c4:	d141      	bne.n	800064a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005d2:	d131      	bne.n	8000638 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005ec:	4a1e      	ldr	r2, [pc, #120]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2232      	movs	r2, #50	; 0x32
 80005fa:	fb02 f303 	mul.w	r3, r2, r3
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000600:	fba2 2303 	umull	r2, r3, r2, r3
 8000604:	0c9b      	lsrs	r3, r3, #18
 8000606:	3301      	adds	r3, #1
 8000608:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800060a:	e002      	b.n	8000612 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3b01      	subs	r3, #1
 8000610:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800061a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061e:	d102      	bne.n	8000626 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d1f2      	bne.n	800060c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800062e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000632:	d112      	bne.n	800065a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000634:	2303      	movs	r3, #3
 8000636:	e011      	b.n	800065c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800063a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000648:	e007      	b.n	800065a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000658:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40007000 	.word	0x40007000
 800066c:	20000008 	.word	0x20000008
 8000670:	431bde83 	.word	0x431bde83

08000674 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	f000 bc08 	b.w	8000e98 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000688:	4b96      	ldr	r3, [pc, #600]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	f003 030c 	and.w	r3, r3, #12
 8000690:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000692:	4b94      	ldr	r3, [pc, #592]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	f003 0303 	and.w	r3, r3, #3
 800069a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 80e4 	beq.w	8000872 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d007      	beq.n	80006c0 <HAL_RCC_OscConfig+0x4c>
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	2b0c      	cmp	r3, #12
 80006b4:	f040 808b 	bne.w	80007ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	f040 8087 	bne.w	80007ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80006c0:	4b88      	ldr	r3, [pc, #544]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0302 	and.w	r3, r3, #2
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <HAL_RCC_OscConfig+0x64>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d101      	bne.n	80006d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80006d4:	2301      	movs	r3, #1
 80006d6:	e3df      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6a1a      	ldr	r2, [r3, #32]
 80006dc:	4b81      	ldr	r3, [pc, #516]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f003 0308 	and.w	r3, r3, #8
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d004      	beq.n	80006f2 <HAL_RCC_OscConfig+0x7e>
 80006e8:	4b7e      	ldr	r3, [pc, #504]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006f0:	e005      	b.n	80006fe <HAL_RCC_OscConfig+0x8a>
 80006f2:	4b7c      	ldr	r3, [pc, #496]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80006f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006f8:	091b      	lsrs	r3, r3, #4
 80006fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80006fe:	4293      	cmp	r3, r2
 8000700:	d223      	bcs.n	800074a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6a1b      	ldr	r3, [r3, #32]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fd94 	bl	8001234 <RCC_SetFlashLatencyFromMSIRange>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e3c0      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000716:	4b73      	ldr	r3, [pc, #460]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a72      	ldr	r2, [pc, #456]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800071c:	f043 0308 	orr.w	r3, r3, #8
 8000720:	6013      	str	r3, [r2, #0]
 8000722:	4b70      	ldr	r3, [pc, #448]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	496d      	ldr	r1, [pc, #436]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000730:	4313      	orrs	r3, r2
 8000732:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000734:	4b6b      	ldr	r3, [pc, #428]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	4968      	ldr	r1, [pc, #416]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000744:	4313      	orrs	r3, r2
 8000746:	604b      	str	r3, [r1, #4]
 8000748:	e025      	b.n	8000796 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800074a:	4b66      	ldr	r3, [pc, #408]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a65      	ldr	r2, [pc, #404]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6013      	str	r3, [r2, #0]
 8000756:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	4960      	ldr	r1, [pc, #384]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000764:	4313      	orrs	r3, r2
 8000766:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000768:	4b5e      	ldr	r3, [pc, #376]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	69db      	ldr	r3, [r3, #28]
 8000774:	021b      	lsls	r3, r3, #8
 8000776:	495b      	ldr	r1, [pc, #364]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000778:	4313      	orrs	r3, r2
 800077a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d109      	bne.n	8000796 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fd54 	bl	8001234 <RCC_SetFlashLatencyFromMSIRange>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e380      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000796:	f000 fcc1 	bl	800111c <HAL_RCC_GetSysClockFreq>
 800079a:	4602      	mov	r2, r0
 800079c:	4b51      	ldr	r3, [pc, #324]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800079e:	689b      	ldr	r3, [r3, #8]
 80007a0:	091b      	lsrs	r3, r3, #4
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	4950      	ldr	r1, [pc, #320]	; (80008e8 <HAL_RCC_OscConfig+0x274>)
 80007a8:	5ccb      	ldrb	r3, [r1, r3]
 80007aa:	f003 031f 	and.w	r3, r3, #31
 80007ae:	fa22 f303 	lsr.w	r3, r2, r3
 80007b2:	4a4e      	ldr	r2, [pc, #312]	; (80008ec <HAL_RCC_OscConfig+0x278>)
 80007b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80007b6:	4b4e      	ldr	r3, [pc, #312]	; (80008f0 <HAL_RCC_OscConfig+0x27c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd54 	bl	8000268 <HAL_InitTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d052      	beq.n	8000870 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80007ca:	7bfb      	ldrb	r3, [r7, #15]
 80007cc:	e364      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d032      	beq.n	800083c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80007d6:	4b43      	ldr	r3, [pc, #268]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a42      	ldr	r2, [pc, #264]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80007e2:	f7ff fd91 	bl	8000308 <HAL_GetTick>
 80007e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80007e8:	e008      	b.n	80007fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007ea:	f7ff fd8d 	bl	8000308 <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	693b      	ldr	r3, [r7, #16]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d901      	bls.n	80007fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80007f8:	2303      	movs	r3, #3
 80007fa:	e34d      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80007fc:	4b39      	ldr	r3, [pc, #228]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f003 0302 	and.w	r3, r3, #2
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0f0      	beq.n	80007ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000808:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a35      	ldr	r2, [pc, #212]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a1b      	ldr	r3, [r3, #32]
 8000820:	4930      	ldr	r1, [pc, #192]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000822:	4313      	orrs	r3, r2
 8000824:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	021b      	lsls	r3, r3, #8
 8000834:	492b      	ldr	r1, [pc, #172]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000836:	4313      	orrs	r3, r2
 8000838:	604b      	str	r3, [r1, #4]
 800083a:	e01a      	b.n	8000872 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000842:	f023 0301 	bic.w	r3, r3, #1
 8000846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000848:	f7ff fd5e 	bl	8000308 <HAL_GetTick>
 800084c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800084e:	e008      	b.n	8000862 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000850:	f7ff fd5a 	bl	8000308 <HAL_GetTick>
 8000854:	4602      	mov	r2, r0
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	2b02      	cmp	r3, #2
 800085c:	d901      	bls.n	8000862 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800085e:	2303      	movs	r3, #3
 8000860:	e31a      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000862:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f0      	bne.n	8000850 <HAL_RCC_OscConfig+0x1dc>
 800086e:	e000      	b.n	8000872 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	2b00      	cmp	r3, #0
 800087c:	d073      	beq.n	8000966 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	2b08      	cmp	r3, #8
 8000882:	d005      	beq.n	8000890 <HAL_RCC_OscConfig+0x21c>
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	2b0c      	cmp	r3, #12
 8000888:	d10e      	bne.n	80008a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	2b03      	cmp	r3, #3
 800088e:	d10b      	bne.n	80008a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000898:	2b00      	cmp	r3, #0
 800089a:	d063      	beq.n	8000964 <HAL_RCC_OscConfig+0x2f0>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d15f      	bne.n	8000964 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e2f7      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008b0:	d106      	bne.n	80008c0 <HAL_RCC_OscConfig+0x24c>
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80008b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008bc:	6013      	str	r3, [r2, #0]
 80008be:	e025      	b.n	800090c <HAL_RCC_OscConfig+0x298>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008c8:	d114      	bne.n	80008f4 <HAL_RCC_OscConfig+0x280>
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	6013      	str	r3, [r2, #0]
 80008d6:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a02      	ldr	r2, [pc, #8]	; (80008e4 <HAL_RCC_OscConfig+0x270>)
 80008dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e0:	6013      	str	r3, [r2, #0]
 80008e2:	e013      	b.n	800090c <HAL_RCC_OscConfig+0x298>
 80008e4:	40021000 	.word	0x40021000
 80008e8:	08001690 	.word	0x08001690
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	4ba0      	ldr	r3, [pc, #640]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a9f      	ldr	r2, [pc, #636]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80008fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b9d      	ldr	r3, [pc, #628]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a9c      	ldr	r2, [pc, #624]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d013      	beq.n	800093c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000914:	f7ff fcf8 	bl	8000308 <HAL_GetTick>
 8000918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800091a:	e008      	b.n	800092e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800091c:	f7ff fcf4 	bl	8000308 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	2b64      	cmp	r3, #100	; 0x64
 8000928:	d901      	bls.n	800092e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800092a:	2303      	movs	r3, #3
 800092c:	e2b4      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800092e:	4b92      	ldr	r3, [pc, #584]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f0      	beq.n	800091c <HAL_RCC_OscConfig+0x2a8>
 800093a:	e014      	b.n	8000966 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800093c:	f7ff fce4 	bl	8000308 <HAL_GetTick>
 8000940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000942:	e008      	b.n	8000956 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000944:	f7ff fce0 	bl	8000308 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	2b64      	cmp	r3, #100	; 0x64
 8000950:	d901      	bls.n	8000956 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000952:	2303      	movs	r3, #3
 8000954:	e2a0      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000956:	4b88      	ldr	r3, [pc, #544]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d1f0      	bne.n	8000944 <HAL_RCC_OscConfig+0x2d0>
 8000962:	e000      	b.n	8000966 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	2b00      	cmp	r3, #0
 8000970:	d060      	beq.n	8000a34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	2b04      	cmp	r3, #4
 8000976:	d005      	beq.n	8000984 <HAL_RCC_OscConfig+0x310>
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2b0c      	cmp	r3, #12
 800097c:	d119      	bne.n	80009b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d116      	bne.n	80009b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000984:	4b7c      	ldr	r3, [pc, #496]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800098c:	2b00      	cmp	r3, #0
 800098e:	d005      	beq.n	800099c <HAL_RCC_OscConfig+0x328>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d101      	bne.n	800099c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	e27d      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800099c:	4b76      	ldr	r3, [pc, #472]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	061b      	lsls	r3, r3, #24
 80009aa:	4973      	ldr	r1, [pc, #460]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80009ac:	4313      	orrs	r3, r2
 80009ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80009b0:	e040      	b.n	8000a34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d023      	beq.n	8000a02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ba:	4b6f      	ldr	r3, [pc, #444]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a6e      	ldr	r2, [pc, #440]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009c6:	f7ff fc9f 	bl	8000308 <HAL_GetTick>
 80009ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009cc:	e008      	b.n	80009e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009ce:	f7ff fc9b 	bl	8000308 <HAL_GetTick>
 80009d2:	4602      	mov	r2, r0
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d901      	bls.n	80009e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80009dc:	2303      	movs	r3, #3
 80009de:	e25b      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009e0:	4b65      	ldr	r3, [pc, #404]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f0      	beq.n	80009ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009ec:	4b62      	ldr	r3, [pc, #392]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	691b      	ldr	r3, [r3, #16]
 80009f8:	061b      	lsls	r3, r3, #24
 80009fa:	495f      	ldr	r1, [pc, #380]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 80009fc:	4313      	orrs	r3, r2
 80009fe:	604b      	str	r3, [r1, #4]
 8000a00:	e018      	b.n	8000a34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a02:	4b5d      	ldr	r3, [pc, #372]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a5c      	ldr	r2, [pc, #368]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a0e:	f7ff fc7b 	bl	8000308 <HAL_GetTick>
 8000a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a14:	e008      	b.n	8000a28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a16:	f7ff fc77 	bl	8000308 <HAL_GetTick>
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d901      	bls.n	8000a28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e237      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a28:	4b53      	ldr	r3, [pc, #332]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f0      	bne.n	8000a16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d03c      	beq.n	8000aba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d01c      	beq.n	8000a82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a48:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a4e:	4a4a      	ldr	r2, [pc, #296]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a58:	f7ff fc56 	bl	8000308 <HAL_GetTick>
 8000a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a5e:	e008      	b.n	8000a72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a60:	f7ff fc52 	bl	8000308 <HAL_GetTick>
 8000a64:	4602      	mov	r2, r0
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d901      	bls.n	8000a72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e212      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d0ef      	beq.n	8000a60 <HAL_RCC_OscConfig+0x3ec>
 8000a80:	e01b      	b.n	8000aba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a82:	4b3d      	ldr	r3, [pc, #244]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a88:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a92:	f7ff fc39 	bl	8000308 <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000a98:	e008      	b.n	8000aac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fc35 	bl	8000308 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d901      	bls.n	8000aac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e1f5      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1ef      	bne.n	8000a9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 80a6 	beq.w	8000c14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10d      	bne.n	8000af4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000af0:	2301      	movs	r3, #1
 8000af2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000af4:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HAL_RCC_OscConfig+0x508>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d118      	bne.n	8000b32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b00:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <HAL_RCC_OscConfig+0x508>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <HAL_RCC_OscConfig+0x508>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b0c:	f7ff fbfc 	bl	8000308 <HAL_GetTick>
 8000b10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b12:	e008      	b.n	8000b26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b14:	f7ff fbf8 	bl	8000308 <HAL_GetTick>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d901      	bls.n	8000b26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e1b8      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <HAL_RCC_OscConfig+0x508>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f0      	beq.n	8000b14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d108      	bne.n	8000b4c <HAL_RCC_OscConfig+0x4d8>
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b4a:	e029      	b.n	8000ba0 <HAL_RCC_OscConfig+0x52c>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b05      	cmp	r3, #5
 8000b52:	d115      	bne.n	8000b80 <HAL_RCC_OscConfig+0x50c>
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b5a:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b6a:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_RCC_OscConfig+0x504>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b74:	e014      	b.n	8000ba0 <HAL_RCC_OscConfig+0x52c>
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40007000 	.word	0x40007000
 8000b80:	4b9d      	ldr	r3, [pc, #628]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b86:	4a9c      	ldr	r2, [pc, #624]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000b88:	f023 0301 	bic.w	r3, r3, #1
 8000b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b90:	4b99      	ldr	r3, [pc, #612]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b96:	4a98      	ldr	r2, [pc, #608]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000b98:	f023 0304 	bic.w	r3, r3, #4
 8000b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d016      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ba8:	f7ff fbae 	bl	8000308 <HAL_GetTick>
 8000bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000bae:	e00a      	b.n	8000bc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fbaa 	bl	8000308 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e168      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000bc6:	4b8c      	ldr	r3, [pc, #560]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0ed      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x53c>
 8000bd4:	e015      	b.n	8000c02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bd6:	f7ff fb97 	bl	8000308 <HAL_GetTick>
 8000bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000bdc:	e00a      	b.n	8000bf4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bde:	f7ff fb93 	bl	8000308 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d901      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e151      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000bf4:	4b80      	ldr	r3, [pc, #512]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1ed      	bne.n	8000bde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c02:	7ffb      	ldrb	r3, [r7, #31]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d105      	bne.n	8000c14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c08:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	4a7a      	ldr	r2, [pc, #488]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0320 	and.w	r3, r3, #32
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d03c      	beq.n	8000c9a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d01c      	beq.n	8000c62 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000c28:	4b73      	ldr	r3, [pc, #460]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c2e:	4a72      	ldr	r2, [pc, #456]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c38:	f7ff fb66 	bl	8000308 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c40:	f7ff fb62 	bl	8000308 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e122      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000c52:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c58:	f003 0302 	and.w	r3, r3, #2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0ef      	beq.n	8000c40 <HAL_RCC_OscConfig+0x5cc>
 8000c60:	e01b      	b.n	8000c9a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000c62:	4b65      	ldr	r3, [pc, #404]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c68:	4a63      	ldr	r2, [pc, #396]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c6a:	f023 0301 	bic.w	r3, r3, #1
 8000c6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c72:	f7ff fb49 	bl	8000308 <HAL_GetTick>
 8000c76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000c78:	e008      	b.n	8000c8c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c7a:	f7ff fb45 	bl	8000308 <HAL_GetTick>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e105      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000c8c:	4b5a      	ldr	r3, [pc, #360]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1ef      	bne.n	8000c7a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80f9 	beq.w	8000e96 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	f040 80cf 	bne.w	8000e4c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000cae:	4b52      	ldr	r3, [pc, #328]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d12c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d123      	bne.n	8000d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cde:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d11b      	bne.n	8000d1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d113      	bne.n	8000d1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfe:	085b      	lsrs	r3, r3, #1
 8000d00:	3b01      	subs	r3, #1
 8000d02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d109      	bne.n	8000d1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	085b      	lsrs	r3, r3, #1
 8000d14:	3b01      	subs	r3, #1
 8000d16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d071      	beq.n	8000e00 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2b0c      	cmp	r3, #12
 8000d20:	d068      	beq.n	8000df4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000d22:	4b35      	ldr	r3, [pc, #212]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d105      	bne.n	8000d3a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000d2e:	4b32      	ldr	r3, [pc, #200]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e0ac      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000d3e:	4b2e      	ldr	r3, [pc, #184]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a2d      	ldr	r2, [pc, #180]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000d4a:	f7ff fadd 	bl	8000308 <HAL_GetTick>
 8000d4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d50:	e008      	b.n	8000d64 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d52:	f7ff fad9 	bl	8000308 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d901      	bls.n	8000d64 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e099      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f0      	bne.n	8000d52 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_RCC_OscConfig+0x788>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d80:	3a01      	subs	r2, #1
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	4311      	orrs	r1, r2
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d8a:	0212      	lsls	r2, r2, #8
 8000d8c:	4311      	orrs	r1, r2
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000d92:	0852      	lsrs	r2, r2, #1
 8000d94:	3a01      	subs	r2, #1
 8000d96:	0552      	lsls	r2, r2, #21
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d9e:	0852      	lsrs	r2, r2, #1
 8000da0:	3a01      	subs	r2, #1
 8000da2:	0652      	lsls	r2, r2, #25
 8000da4:	4311      	orrs	r1, r2
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000daa:	06d2      	lsls	r2, r2, #27
 8000dac:	430a      	orrs	r2, r1
 8000dae:	4912      	ldr	r1, [pc, #72]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000db4:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0f      	ldr	r2, [pc, #60]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dc0:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000dcc:	f7ff fa9c 	bl	8000308 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dd4:	f7ff fa98 	bl	8000308 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e058      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_RCC_OscConfig+0x784>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f0      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000df2:	e050      	b.n	8000e96 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e04f      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d144      	bne.n	8000e96 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000e24:	f7ff fa70 	bl	8000308 <HAL_GetTick>
 8000e28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e2a:	e008      	b.n	8000e3e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2c:	f7ff fa6c 	bl	8000308 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e02c      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e3e:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x7b8>
 8000e4a:	e024      	b.n	8000e96 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b0c      	cmp	r3, #12
 8000e50:	d01f      	beq.n	8000e92 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fa53 	bl	8000308 <HAL_GetTick>
 8000e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e66:	f7ff fa4f 	bl	8000308 <HAL_GetTick>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e00f      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f0      	bne.n	8000e66 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <HAL_RCC_OscConfig+0x82c>)
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_RCC_OscConfig+0x830>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
 8000e90:	e001      	b.n	8000e96 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	feeefffc 	.word	0xfeeefffc

08000ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e11d      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ec0:	4b90      	ldr	r3, [pc, #576]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d910      	bls.n	8000ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ece:	4b8d      	ldr	r3, [pc, #564]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f023 020f 	bic.w	r2, r3, #15
 8000ed6:	498b      	ldr	r1, [pc, #556]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ede:	4b89      	ldr	r3, [pc, #548]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d001      	beq.n	8000ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e105      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d010      	beq.n	8000f1e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	4b81      	ldr	r3, [pc, #516]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d908      	bls.n	8000f1e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f0c:	4b7e      	ldr	r3, [pc, #504]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	497b      	ldr	r1, [pc, #492]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d079      	beq.n	800101e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d11e      	bne.n	8000f70 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f32:	4b75      	ldr	r3, [pc, #468]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0dc      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8000f42:	f000 f9d1 	bl	80012e8 <RCC_GetSysClockFreqFromPLLSource>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a70      	ldr	r2, [pc, #448]	; (800110c <HAL_RCC_ClockConfig+0x264>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d946      	bls.n	8000fdc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d140      	bne.n	8000fdc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f62:	4a69      	ldr	r2, [pc, #420]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f68:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	617b      	str	r3, [r7, #20]
 8000f6e:	e035      	b.n	8000fdc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d107      	bne.n	8000f88 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f78:	4b63      	ldr	r3, [pc, #396]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d115      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0b9      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d107      	bne.n	8000fa0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f90:	4b5d      	ldr	r3, [pc, #372]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d109      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0ad      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa0:	4b59      	ldr	r3, [pc, #356]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0a5      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8000fb0:	f000 f8b4 	bl	800111c <HAL_RCC_GetSysClockFreq>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a55      	ldr	r2, [pc, #340]	; (800110c <HAL_RCC_ClockConfig+0x264>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d90f      	bls.n	8000fdc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000fbc:	4b52      	ldr	r3, [pc, #328]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d109      	bne.n	8000fdc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f023 0203 	bic.w	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4947      	ldr	r1, [pc, #284]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8000fea:	4313      	orrs	r3, r2
 8000fec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000fee:	f7ff f98b 	bl	8000308 <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff4:	e00a      	b.n	800100c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ff6:	f7ff f987 	bl	8000308 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	f241 3288 	movw	r2, #5000	; 0x1388
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e077      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100c:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 020c 	and.w	r2, r3, #12
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	429a      	cmp	r2, r3
 800101c:	d1eb      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	2b80      	cmp	r3, #128	; 0x80
 8001022:	d105      	bne.n	8001030 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a37      	ldr	r2, [pc, #220]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 800102a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800102e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d010      	beq.n	800105e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001048:	429a      	cmp	r2, r3
 800104a:	d208      	bcs.n	800105e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	492b      	ldr	r1, [pc, #172]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 800105a:	4313      	orrs	r3, r2
 800105c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d210      	bcs.n	800108e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106c:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 020f 	bic.w	r2, r3, #15
 8001074:	4923      	ldr	r1, [pc, #140]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_RCC_ClockConfig+0x25c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d001      	beq.n	800108e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e036      	b.n	80010fc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800109a:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4918      	ldr	r1, [pc, #96]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 80010a8:	4313      	orrs	r3, r2
 80010aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d009      	beq.n	80010cc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4910      	ldr	r1, [pc, #64]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010cc:	f000 f826 	bl	800111c <HAL_RCC_GetSysClockFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_RCC_ClockConfig+0x260>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <HAL_RCC_ClockConfig+0x268>)
 80010de:	5ccb      	ldrb	r3, [r1, r3]
 80010e0:	f003 031f 	and.w	r3, r3, #31
 80010e4:	fa22 f303 	lsr.w	r3, r2, r3
 80010e8:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <HAL_RCC_ClockConfig+0x26c>)
 80010ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_RCC_ClockConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f8b9 	bl	8000268 <HAL_InitTick>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]

  return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40022000 	.word	0x40022000
 8001108:	40021000 	.word	0x40021000
 800110c:	04c4b400 	.word	0x04c4b400
 8001110:	08001690 	.word	0x08001690
 8001114:	20000008 	.word	0x20000008
 8001118:	20000000 	.word	0x20000000

0800111c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b089      	sub	sp, #36	; 0x24
 8001120:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112a:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_GetSysClockFreq+0x34>
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b0c      	cmp	r3, #12
 8001148:	d121      	bne.n	800118e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d11e      	bne.n	800118e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 800115e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e005      	b.n	8001178 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001178:	4a2b      	ldr	r2, [pc, #172]	; (8001228 <HAL_RCC_GetSysClockFreq+0x10c>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d10d      	bne.n	80011a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d102      	bne.n	800119a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_RCC_GetSysClockFreq+0x110>)
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	e004      	b.n	80011a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2b08      	cmp	r3, #8
 800119e:	d101      	bne.n	80011a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <HAL_RCC_GetSysClockFreq+0x114>)
 80011a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2b0c      	cmp	r3, #12
 80011a8:	d134      	bne.n	8001214 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d003      	beq.n	80011c8 <HAL_RCC_GetSysClockFreq+0xac>
 80011c0:	e005      	b.n	80011ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_RCC_GetSysClockFreq+0x110>)
 80011c4:	617b      	str	r3, [r7, #20]
      break;
 80011c6:	e005      	b.n	80011d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <HAL_RCC_GetSysClockFreq+0x114>)
 80011ca:	617b      	str	r3, [r7, #20]
      break;
 80011cc:	e002      	b.n	80011d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	617b      	str	r3, [r7, #20]
      break;
 80011d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3301      	adds	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	0a1b      	lsrs	r3, r3, #8
 80011e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	fb03 f202 	mul.w	r2, r3, r2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <HAL_RCC_GetSysClockFreq+0x108>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	0e5b      	lsrs	r3, r3, #25
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	3301      	adds	r3, #1
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001214:	69bb      	ldr	r3, [r7, #24]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	080016a0 	.word	0x080016a0
 800122c:	00f42400 	.word	0x00f42400
 8001230:	007a1200 	.word	0x007a1200

08001234 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800124c:	f7ff f94e 	bl	80004ec <HAL_PWREx_GetVoltageRange>
 8001250:	6178      	str	r0, [r7, #20]
 8001252:	e014      	b.n	800127e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800125a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125e:	6593      	str	r3, [r2, #88]	; 0x58
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800126c:	f7ff f93e 	bl	80004ec <HAL_PWREx_GetVoltageRange>
 8001270:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001284:	d10b      	bne.n	800129e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b80      	cmp	r3, #128	; 0x80
 800128a:	d913      	bls.n	80012b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2ba0      	cmp	r3, #160	; 0xa0
 8001290:	d902      	bls.n	8001298 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001292:	2302      	movs	r3, #2
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	e00d      	b.n	80012b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	e00a      	b.n	80012b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b7f      	cmp	r3, #127	; 0x7f
 80012a2:	d902      	bls.n	80012aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80012a4:	2302      	movs	r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	e004      	b.n	80012b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b70      	cmp	r3, #112	; 0x70
 80012ae:	d101      	bne.n	80012b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012b0:	2301      	movs	r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80012b4:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 020f 	bic.w	r2, r3, #15
 80012bc:	4909      	ldr	r1, [pc, #36]	; (80012e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40022000 	.word	0x40022000

080012e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80012ee:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d00b      	beq.n	8001316 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d825      	bhi.n	8001350 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d008      	beq.n	800131c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d11f      	bne.n	8001350 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001312:	613b      	str	r3, [r7, #16]
    break;
 8001314:	e01f      	b.n	8001356 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001318:	613b      	str	r3, [r7, #16]
    break;
 800131a:	e01c      	b.n	8001356 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800132a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	f003 030f 	and.w	r3, r3, #15
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	e005      	b.n	8001344 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001338:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001344:	4a1a      	ldr	r2, [pc, #104]	; (80013b0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	613b      	str	r3, [r7, #16]
    break;
 800134e:	e002      	b.n	8001356 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
    break;
 8001354:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	091b      	lsrs	r3, r3, #4
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	3301      	adds	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	fb03 f202 	mul.w	r2, r3, r2
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0e5b      	lsrs	r3, r3, #25
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	3301      	adds	r3, #1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	fbb2 f3f3 	udiv	r3, r2, r3
 8001394:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001396:	683b      	ldr	r3, [r7, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	00f42400 	.word	0x00f42400
 80013ac:	007a1200 	.word	0x007a1200
 80013b0:	080016a0 	.word	0x080016a0

080013b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
		float k;
		float p;

	}KalmanFilter;

	struct KalmanFilter kf1 = {1.0, -5.0, 3.0, 4.0, 4.0};
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <main+0x40>)
 80013bc:	463c      	mov	r4, r7
 80013be:	461d      	mov	r5, r3
 80013c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	6023      	str	r3, [r4, #0]
	float measurement = 10.0;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <main+0x44>)
 80013ca:	617b      	str	r3, [r7, #20]

	kalman(&kf1, measurement); // calling kalman
 80013cc:	463b      	mov	r3, r7
 80013ce:	ed97 0a05 	vldr	s0, [r7, #20]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7fe ff12 	bl	80001fc <kalman>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d8:	f7fe ff2d 	bl	8000236 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013dc:	f000 f810 	bl	8001400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e0:	f000 f860 	bl	80014a4 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ITM_Port32(31) = 1;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <main+0x48>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
	  //put your code in here for monitoring execution time
	  ITM_Port32(31) = 2;
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <main+0x48>)
 80013ec:	2202      	movs	r2, #2
 80013ee:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 1;
 80013f0:	e7f8      	b.n	80013e4 <main+0x30>
 80013f2:	bf00      	nop
 80013f4:	0800167c 	.word	0x0800167c
 80013f8:	41200000 	.word	0x41200000
 80013fc:	e000007c 	.word	0xe000007c

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b096      	sub	sp, #88	; 0x58
 8001404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2244      	movs	r2, #68	; 0x44
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f920 	bl	8001654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff f882 	bl	800052c <HAL_PWREx_ControlVoltageScaling>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800142e:	f000 f85d 	bl	80014ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001432:	2310      	movs	r3, #16
 8001434:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001436:	2301      	movs	r3, #1
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800143e:	2360      	movs	r3, #96	; 0x60
 8001440:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001446:	2301      	movs	r3, #1
 8001448:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800144a:	2301      	movs	r3, #1
 800144c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800144e:	233c      	movs	r3, #60	; 0x3c
 8001450:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001452:	2302      	movs	r3, #2
 8001454:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800145a:	2302      	movs	r3, #2
 800145c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f906 	bl	8000674 <HAL_RCC_OscConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800146e:	f000 f83d 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2303      	movs	r3, #3
 8001478:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	2105      	movs	r1, #5
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fd0c 	bl	8000ea8 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001496:	f000 f829 	bl	80014ec <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3758      	adds	r7, #88	; 0x58
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_GPIO_Init+0x44>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <MX_GPIO_Init+0x44>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_GPIO_Init+0x44>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_GPIO_Init+0x44>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <MX_GPIO_Init+0x44>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_GPIO_Init+0x44>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]

}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>
	...

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_MspInit+0x44>)
 8001500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001502:	4a0e      	ldr	r2, [pc, #56]	; (800153c <HAL_MspInit+0x44>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6613      	str	r3, [r2, #96]	; 0x60
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_MspInit+0x44>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_MspInit+0x44>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f7fe fea8 	bl	80002e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <SystemInit+0x20>)
 800159a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159e:	4a05      	ldr	r2, [pc, #20]	; (80015b4 <SystemInit+0x20>)
 80015a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015bc:	f7ff ffea 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c0:	480c      	ldr	r0, [pc, #48]	; (80015f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80015c2:	490d      	ldr	r1, [pc, #52]	; (80015f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c4:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <LoopForever+0xe>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c8:	e002      	b.n	80015d0 <LoopCopyDataInit>

080015ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ce:	3304      	adds	r3, #4

080015d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d4:	d3f9      	bcc.n	80015ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d8:	4c0a      	ldr	r4, [pc, #40]	; (8001604 <LoopForever+0x16>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015dc:	e001      	b.n	80015e2 <LoopFillZerobss>

080015de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e0:	3204      	adds	r2, #4

080015e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e4:	d3fb      	bcc.n	80015de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e6:	f000 f811 	bl	800160c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ea:	f7ff fee3 	bl	80013b4 <main>

080015ee <LoopForever>:

LoopForever:
    b LoopForever
 80015ee:	e7fe      	b.n	80015ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015f0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015fc:	080016d8 	.word	0x080016d8
  ldr r2, =_sbss
 8001600:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001604:	2000002c 	.word	0x2000002c

08001608 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001608:	e7fe      	b.n	8001608 <ADC1_IRQHandler>
	...

0800160c <__libc_init_array>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	4d0d      	ldr	r5, [pc, #52]	; (8001644 <__libc_init_array+0x38>)
 8001610:	4c0d      	ldr	r4, [pc, #52]	; (8001648 <__libc_init_array+0x3c>)
 8001612:	1b64      	subs	r4, r4, r5
 8001614:	10a4      	asrs	r4, r4, #2
 8001616:	2600      	movs	r6, #0
 8001618:	42a6      	cmp	r6, r4
 800161a:	d109      	bne.n	8001630 <__libc_init_array+0x24>
 800161c:	4d0b      	ldr	r5, [pc, #44]	; (800164c <__libc_init_array+0x40>)
 800161e:	4c0c      	ldr	r4, [pc, #48]	; (8001650 <__libc_init_array+0x44>)
 8001620:	f000 f820 	bl	8001664 <_init>
 8001624:	1b64      	subs	r4, r4, r5
 8001626:	10a4      	asrs	r4, r4, #2
 8001628:	2600      	movs	r6, #0
 800162a:	42a6      	cmp	r6, r4
 800162c:	d105      	bne.n	800163a <__libc_init_array+0x2e>
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	f855 3b04 	ldr.w	r3, [r5], #4
 8001634:	4798      	blx	r3
 8001636:	3601      	adds	r6, #1
 8001638:	e7ee      	b.n	8001618 <__libc_init_array+0xc>
 800163a:	f855 3b04 	ldr.w	r3, [r5], #4
 800163e:	4798      	blx	r3
 8001640:	3601      	adds	r6, #1
 8001642:	e7f2      	b.n	800162a <__libc_init_array+0x1e>
 8001644:	080016d0 	.word	0x080016d0
 8001648:	080016d0 	.word	0x080016d0
 800164c:	080016d0 	.word	0x080016d0
 8001650:	080016d4 	.word	0x080016d4

08001654 <memset>:
 8001654:	4402      	add	r2, r0
 8001656:	4603      	mov	r3, r0
 8001658:	4293      	cmp	r3, r2
 800165a:	d100      	bne.n	800165e <memset+0xa>
 800165c:	4770      	bx	lr
 800165e:	f803 1b01 	strb.w	r1, [r3], #1
 8001662:	e7f9      	b.n	8001658 <memset+0x4>

08001664 <_init>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr

08001670 <_fini>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr
