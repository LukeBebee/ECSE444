
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036a8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  08003864  08003864  00013864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004218  08004218  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004218  08004218  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004218  08004218  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800421c  0800421c  0001421c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000070  08004290  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08004290  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009af6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df8  00000000  00000000  00029b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000680  00000000  00000000  0002b990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  0002c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028de8  00000000  00000000  0002c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e5c  00000000  00000000  00055378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb071  00000000  00000000  0005d1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00158245  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001938  00000000  00000000  0015830c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000341f  00000000  00000000  00159c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800384c 	.word	0x0800384c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	0800384c 	.word	0x0800384c

080001fc <kalman>:
Return int 0 if everything works, 1 if there is error
FPSCR bits [0,3] cleared at start of function to check for undesired arithmetic conditions
*/
kalman:
	// Push and pop non-scratch registers to prevent clobbering (I think that's the term)
	VPUSH {S1-S6} // S6 will be used for computation, the rest will be to store variables from kalman_state structure
 80001fc:	ed6d 0a06 	vpush	{s1-s6}

	// Load single precision floating point registers with variables from structure
	VLDM.F32 R0, {S1-S5}
 8000200:	ecd0 0a05 	vldmia	r0, {s1-s5}
	p: S4 estimation error covariance
	k: S5 kalman gain
	*/

	// Clear FPSCR exception bits that we will be checking later
	VMRS R1, FPSCR	// R1 has FPSCR contents
 8000204:	eef1 1a10 	vmrs	r1, fpscr
	MOV R2, #0b1111	// R2 has bits to clear (overflow, underflow, division by zero, invalid operation)
 8000208:	220f      	movs	r2, #15
	BIC R1, R1, R2	// Clear bits indicated by R2
 800020a:	4391      	bics	r1, r2
	VMSR FPSCR, R1	// Write to FPSCR with cleared bits
 800020c:	eee1 1a10 	vmsr	fpscr, r1


	// Start Kalman algorithm: *****************************************
	// p = p + q -- potential overflow
	VADD.F32 S4, S4, S1
 8000210:	ee32 2a20 	vadd.f32	s4, s4, s1
	// k = p/(p + r)-- potential overflow and div by 0
	VADD.F32 S5, S4, S2
 8000214:	ee72 2a01 	vadd.f32	s5, s4, s2
	VDIV.F32 S5, S4, S5
 8000218:	eec2 2a22 	vdiv.f32	s5, s4, s5
	// x = x + k*(measurement - x) -- potential overflow and underflow
	VSUB.F32 S6, S0, S3
 800021c:	ee30 3a61 	vsub.f32	s6, s0, s3
	VMLA.F32 S3, S5, S6
 8000220:	ee42 1a83 	vmla.f32	s3, s5, s6
	// p = (1 - k) * p -- potential overflow and underflow
	VMOV.F32 S6, #1.0
 8000224:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	VSUB.F32 S6, S6, S5
 8000228:	ee33 3a62 	vsub.f32	s6, s6, s5
	VMUL.F32 S4, S4, S6
 800022c:	ee22 2a03 	vmul.f32	s4, s4, s6
	// End Kalman algorithm ********************************************

	MOV R3, #1 // let R4 store output for now, assume error
 8000230:	2301      	movs	r3, #1

	// Check for overflow, underflow, division by 0
	VMRS R1, FPSCR	// R1 has FPSCR contents
 8000232:	eef1 1a10 	vmrs	r1, fpscr
	//MOV R2, #0b1111	// R2 has bits we are checking (this is done on line 38 so no need execute)
	AND R1, R1, R2	// R1 has the 4 bits that were possibly triggered by the arithmetic operations
 8000236:	4011      	ands	r1, r2
	CMP R1, #0
 8000238:	2900      	cmp	r1, #0
	BNE no_store	// If 0, no flags so we continue and store. If not zero, skip over store
 800023a:	d102      	bne.n	8000242 <no_store>

	// Update structure values (store register values in memory)
	VSTM.F32 R0, {S1-S5}
 800023c:	ecc0 0a05 	vstmia	r0, {s1-s5}
	MOV R3, #0	// only here if no errors, so return value should be 0
 8000240:	2300      	movs	r3, #0

08000242 <no_store>:
	no_store:

	MOV R0, R3 	// set output, will be 1 here if we skipped store (in case of error) and 0 if no error
 8000242:	1c18      	adds	r0, r3, #0

	// Restore non-scratch registers then leave function
	VPOP {S1-S6}
 8000244:	ecfd 0a06 	vpop	{s1-s6}
	BX LR
 8000248:	4770      	bx	lr
	...

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmpun>:
 8000af8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000afc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b00:	d102      	bne.n	8000b08 <__aeabi_dcmpun+0x10>
 8000b02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b06:	d10a      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b10:	d102      	bne.n	8000b18 <__aeabi_dcmpun+0x20>
 8000b12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b16:	d102      	bne.n	8000b1e <__aeabi_dcmpun+0x26>
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	f04f 0001 	mov.w	r0, #1
 8000b22:	4770      	bx	lr

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f91e 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f80d 	bl	8000bf4 <HAL_InitTick>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f001 fd41 	bl	800266c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d023      	beq.n	8000c50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_InitTick+0x70>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_InitTick+0x6c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f91d 	bl	8000e5e <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10f      	bne.n	8000c4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b0f      	cmp	r3, #15
 8000c2e:	d809      	bhi.n	8000c44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c30:	2200      	movs	r2, #0
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c38:	f000 f8f5 	bl	8000e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <HAL_InitTick+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
 8000c42:	e007      	b.n	8000c54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e004      	b.n	8000c54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
 8000c4e:	e001      	b.n	8000c54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000004 	.word	0x20000004
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000000 	.word	0x20000000

08000c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_IncTick+0x20>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x24>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <HAL_IncTick+0x24>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	20000004 	.word	0x20000004
 8000c90:	2000008c 	.word	0x2000008c

08000c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  return uwTick;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetTick+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000008c 	.word	0x2000008c

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff47 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff5c 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffb0 	bl	8000dcc <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e88:	d102      	bne.n	8000e90 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e8e:	e00b      	b.n	8000ea8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e9e:	d102      	bne.n	8000ea6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea4:	e000      	b.n	8000ea8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000ea6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40007000 	.word	0x40007000

08000eb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d141      	bne.n	8000f4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed2:	d131      	bne.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ed4:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eda:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	4b43      	ldr	r3, [pc, #268]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eec:	4a41      	ldr	r2, [pc, #260]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ef2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ef4:	4b40      	ldr	r3, [pc, #256]	; (8000ff8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a3f      	ldr	r2, [pc, #252]	; (8000ffc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f00:	fba2 2303 	umull	r2, r3, r2, r3
 8000f04:	0c9b      	lsrs	r3, r3, #18
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f0a:	e002      	b.n	8000f12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f12:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f1e:	d102      	bne.n	8000f26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d1f2      	bne.n	8000f0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f32:	d158      	bne.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e057      	b.n	8000fe8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f48:	e04d      	b.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f50:	d141      	bne.n	8000fd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5e:	d131      	bne.n	8000fc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f78:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2232      	movs	r2, #50	; 0x32
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	0c9b      	lsrs	r3, r3, #18
 8000f92:	3301      	adds	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f96:	e002      	b.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000faa:	d102      	bne.n	8000fb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f2      	bne.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fbe:	d112      	bne.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e011      	b.n	8000fe8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fd4:	e007      	b.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fd6:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fde:	4a05      	ldr	r2, [pc, #20]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	431bde83 	.word	0x431bde83

08001000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d102      	bne.n	8001014 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	f000 bc08 	b.w	8001824 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001014:	4b96      	ldr	r3, [pc, #600]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800101e:	4b94      	ldr	r3, [pc, #592]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0310 	and.w	r3, r3, #16
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80e4 	beq.w	80011fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d007      	beq.n	800104c <HAL_RCC_OscConfig+0x4c>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0c      	cmp	r3, #12
 8001040:	f040 808b 	bne.w	800115a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2b01      	cmp	r3, #1
 8001048:	f040 8087 	bne.w	800115a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800104c:	4b88      	ldr	r3, [pc, #544]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_OscConfig+0x64>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e3df      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1a      	ldr	r2, [r3, #32]
 8001068:	4b81      	ldr	r3, [pc, #516]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	2b00      	cmp	r3, #0
 8001072:	d004      	beq.n	800107e <HAL_RCC_OscConfig+0x7e>
 8001074:	4b7e      	ldr	r3, [pc, #504]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800107c:	e005      	b.n	800108a <HAL_RCC_OscConfig+0x8a>
 800107e:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800108a:	4293      	cmp	r3, r2
 800108c:	d223      	bcs.n	80010d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a1b      	ldr	r3, [r3, #32]
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fd94 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e3c0      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a2:	4b73      	ldr	r3, [pc, #460]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a72      	ldr	r2, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b70      	ldr	r3, [pc, #448]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	496d      	ldr	r1, [pc, #436]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c0:	4b6b      	ldr	r3, [pc, #428]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	4968      	ldr	r1, [pc, #416]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e025      	b.n	8001122 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010d6:	4b66      	ldr	r3, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a65      	ldr	r2, [pc, #404]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b63      	ldr	r3, [pc, #396]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4960      	ldr	r1, [pc, #384]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f4:	4b5e      	ldr	r3, [pc, #376]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	495b      	ldr	r1, [pc, #364]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d109      	bne.n	8001122 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fd54 	bl	8001bc0 <RCC_SetFlashLatencyFromMSIRange>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e380      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001122:	f000 fcc1 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001126:	4602      	mov	r2, r0
 8001128:	4b51      	ldr	r3, [pc, #324]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	4950      	ldr	r1, [pc, #320]	; (8001274 <HAL_RCC_OscConfig+0x274>)
 8001134:	5ccb      	ldrb	r3, [r1, r3]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	fa22 f303 	lsr.w	r3, r2, r3
 800113e:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_RCC_OscConfig+0x278>)
 8001140:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001142:	4b4e      	ldr	r3, [pc, #312]	; (800127c <HAL_RCC_OscConfig+0x27c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fd54 	bl	8000bf4 <HAL_InitTick>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d052      	beq.n	80011fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
 8001158:	e364      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d032      	beq.n	80011c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a42      	ldr	r2, [pc, #264]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800116e:	f7ff fd91 	bl	8000c94 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001176:	f7ff fd8d 	bl	8000c94 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e34d      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f0      	beq.n	8001176 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a35      	ldr	r2, [pc, #212]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	6013      	str	r3, [r2, #0]
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	4930      	ldr	r1, [pc, #192]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	492b      	ldr	r1, [pc, #172]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	604b      	str	r3, [r1, #4]
 80011c6:	e01a      	b.n	80011fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a28      	ldr	r2, [pc, #160]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fd5e 	bl	8000c94 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011dc:	f7ff fd5a 	bl	8000c94 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e31a      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x1dc>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d073      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	2b08      	cmp	r3, #8
 800120e:	d005      	beq.n	800121c <HAL_RCC_OscConfig+0x21c>
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2b0c      	cmp	r3, #12
 8001214:	d10e      	bne.n	8001234 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d10b      	bne.n	8001234 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d063      	beq.n	80012f0 <HAL_RCC_OscConfig+0x2f0>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d15f      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e2f7      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d106      	bne.n	800124c <HAL_RCC_OscConfig+0x24c>
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	e025      	b.n	8001298 <HAL_RCC_OscConfig+0x298>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001254:	d114      	bne.n	8001280 <HAL_RCC_OscConfig+0x280>
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 800125c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a02      	ldr	r2, [pc, #8]	; (8001270 <HAL_RCC_OscConfig+0x270>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e013      	b.n	8001298 <HAL_RCC_OscConfig+0x298>
 8001270:	40021000 	.word	0x40021000
 8001274:	080041d8 	.word	0x080041d8
 8001278:	20000008 	.word	0x20000008
 800127c:	20000000 	.word	0x20000000
 8001280:	4ba0      	ldr	r3, [pc, #640]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a9f      	ldr	r2, [pc, #636]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b9d      	ldr	r3, [pc, #628]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a9c      	ldr	r2, [pc, #624]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d013      	beq.n	80012c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a0:	f7ff fcf8 	bl	8000c94 <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a8:	f7ff fcf4 	bl	8000c94 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b64      	cmp	r3, #100	; 0x64
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e2b4      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ba:	4b92      	ldr	r3, [pc, #584]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d0f0      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2a8>
 80012c6:	e014      	b.n	80012f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fce4 	bl	8000c94 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d0:	f7ff fce0 	bl	8000c94 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b64      	cmp	r3, #100	; 0x64
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e2a0      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x2d0>
 80012ee:	e000      	b.n	80012f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d060      	beq.n	80013c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	2b04      	cmp	r3, #4
 8001302:	d005      	beq.n	8001310 <HAL_RCC_OscConfig+0x310>
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	2b0c      	cmp	r3, #12
 8001308:	d119      	bne.n	800133e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d116      	bne.n	800133e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001310:	4b7c      	ldr	r3, [pc, #496]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_OscConfig+0x328>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e27d      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b76      	ldr	r3, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	061b      	lsls	r3, r3, #24
 8001336:	4973      	ldr	r1, [pc, #460]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133c:	e040      	b.n	80013c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d023      	beq.n	800138e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6e      	ldr	r2, [pc, #440]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001352:	f7ff fc9f 	bl	8000c94 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001358:	e008      	b.n	800136c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135a:	f7ff fc9b 	bl	8000c94 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e25b      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800136c:	4b65      	ldr	r3, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0f0      	beq.n	800135a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001378:	4b62      	ldr	r3, [pc, #392]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	061b      	lsls	r3, r3, #24
 8001386:	495f      	ldr	r1, [pc, #380]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
 800138c:	e018      	b.n	80013c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138e:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a5c      	ldr	r2, [pc, #368]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800139a:	f7ff fc7b 	bl	8000c94 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc77 	bl	8000c94 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e237      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d03c      	beq.n	8001446 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d01c      	beq.n	800140e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d4:	4b4b      	ldr	r3, [pc, #300]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80013d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013da:	4a4a      	ldr	r2, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e4:	f7ff fc56 	bl	8000c94 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc52 	bl	8000c94 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e212      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001400:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0ef      	beq.n	80013ec <HAL_RCC_OscConfig+0x3ec>
 800140c:	e01b      	b.n	8001446 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001414:	4a3b      	ldr	r2, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141e:	f7ff fc39 	bl	8000c94 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001424:	e008      	b.n	8001438 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001426:	f7ff fc35 	bl	8000c94 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d901      	bls.n	8001438 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001434:	2303      	movs	r3, #3
 8001436:	e1f5      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800143a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ef      	bne.n	8001426 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80a6 	beq.w	80015a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001458:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10d      	bne.n	8001480 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	4a26      	ldr	r2, [pc, #152]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6593      	str	r3, [r2, #88]	; 0x58
 8001470:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147c:	2301      	movs	r3, #1
 800147e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001480:	4b21      	ldr	r3, [pc, #132]	; (8001508 <HAL_RCC_OscConfig+0x508>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d118      	bne.n	80014be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_RCC_OscConfig+0x508>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a1d      	ldr	r2, [pc, #116]	; (8001508 <HAL_RCC_OscConfig+0x508>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001498:	f7ff fbfc 	bl	8000c94 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff fbf8 	bl	8000c94 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e1b8      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_RCC_OscConfig+0x508>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d108      	bne.n	80014d8 <HAL_RCC_OscConfig+0x4d8>
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d6:	e029      	b.n	800152c <HAL_RCC_OscConfig+0x52c>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d115      	bne.n	800150c <HAL_RCC_OscConfig+0x50c>
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80014f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f6:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_RCC_OscConfig+0x504>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001500:	e014      	b.n	800152c <HAL_RCC_OscConfig+0x52c>
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	40007000 	.word	0x40007000
 800150c:	4b9d      	ldr	r3, [pc, #628]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	4a9c      	ldr	r2, [pc, #624]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800151c:	4b99      	ldr	r3, [pc, #612]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001522:	4a98      	ldr	r2, [pc, #608]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d016      	beq.n	8001562 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fbae 	bl	8000c94 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153a:	e00a      	b.n	8001552 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fbaa 	bl	8000c94 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f241 3288 	movw	r2, #5000	; 0x1388
 800154a:	4293      	cmp	r3, r2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e168      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001552:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0ed      	beq.n	800153c <HAL_RCC_OscConfig+0x53c>
 8001560:	e015      	b.n	800158e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fb97 	bl	8000c94 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb93 	bl	8000c94 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e151      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001580:	4b80      	ldr	r3, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1ed      	bne.n	800156a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800158e:	7ffb      	ldrb	r3, [r7, #31]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800159a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0320 	and.w	r3, r3, #32
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d03c      	beq.n	8001626 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01c      	beq.n	80015ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015b4:	4b73      	ldr	r3, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80015b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ba:	4a72      	ldr	r2, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fb66 	bl	8000c94 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015cc:	f7ff fb62 	bl	8000c94 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e122      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015de:	4b69      	ldr	r3, [pc, #420]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80015e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0ef      	beq.n	80015cc <HAL_RCC_OscConfig+0x5cc>
 80015ec:	e01b      	b.n	8001626 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ee:	4b65      	ldr	r3, [pc, #404]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80015f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f4:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fe:	f7ff fb49 	bl	8000c94 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001606:	f7ff fb45 	bl	8000c94 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e105      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001618:	4b5a      	ldr	r3, [pc, #360]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800161a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1ef      	bne.n	8001606 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 80f9 	beq.w	8001822 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	2b02      	cmp	r3, #2
 8001636:	f040 80cf 	bne.w	80017d8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800163a:	4b52      	ldr	r3, [pc, #328]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f003 0203 	and.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	429a      	cmp	r2, r3
 800164c:	d12c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	3b01      	subs	r3, #1
 800165a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d123      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800166c:	429a      	cmp	r2, r3
 800166e:	d11b      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800167c:	429a      	cmp	r2, r3
 800167e:	d113      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	3b01      	subs	r3, #1
 800168e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d109      	bne.n	80016a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d071      	beq.n	800178c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d068      	beq.n	8001780 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ba:	4b32      	ldr	r3, [pc, #200]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0ac      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016ca:	4b2e      	ldr	r3, [pc, #184]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a2d      	ldr	r2, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80016d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016d6:	f7ff fadd 	bl	8000c94 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fad9 	bl	8000c94 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e099      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d1f0      	bne.n	80016de <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	4b21      	ldr	r3, [pc, #132]	; (8001788 <HAL_RCC_OscConfig+0x788>)
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800170c:	3a01      	subs	r2, #1
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001716:	0212      	lsls	r2, r2, #8
 8001718:	4311      	orrs	r1, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800171e:	0852      	lsrs	r2, r2, #1
 8001720:	3a01      	subs	r2, #1
 8001722:	0552      	lsls	r2, r2, #21
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800172a:	0852      	lsrs	r2, r2, #1
 800172c:	3a01      	subs	r2, #1
 800172e:	0652      	lsls	r2, r2, #25
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001736:	06d2      	lsls	r2, r2, #27
 8001738:	430a      	orrs	r2, r1
 800173a:	4912      	ldr	r1, [pc, #72]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800173c:	4313      	orrs	r3, r2
 800173e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001756:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001758:	f7ff fa9c 	bl	8000c94 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff fa98 	bl	8000c94 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e058      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <HAL_RCC_OscConfig+0x784>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177e:	e050      	b.n	8001822 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e04f      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
 8001784:	40021000 	.word	0x40021000
 8001788:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d144      	bne.n	8001822 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001798:	4b24      	ldr	r3, [pc, #144]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a23      	ldr	r2, [pc, #140]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 800179e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017b0:	f7ff fa70 	bl	8000c94 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fa6c 	bl	8000c94 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e02c      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x7b8>
 80017d6:	e024      	b.n	8001822 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d01f      	beq.n	800181e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 80017e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff fa53 	bl	8000c94 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff fa4f 	bl	8000c94 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e00f      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4905      	ldr	r1, [pc, #20]	; (800182c <HAL_RCC_OscConfig+0x82c>)
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <HAL_RCC_OscConfig+0x830>)
 8001818:	4013      	ands	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e001      	b.n	8001822 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	feeefffc 	.word	0xfeeefffc

08001834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e11d      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800184c:	4b90      	ldr	r3, [pc, #576]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d910      	bls.n	800187c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 020f 	bic.w	r2, r3, #15
 8001862:	498b      	ldr	r1, [pc, #556]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e105      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001894:	429a      	cmp	r2, r3
 8001896:	d908      	bls.n	80018aa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	497b      	ldr	r1, [pc, #492]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d079      	beq.n	80019aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d11e      	bne.n	80018fc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0dc      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80018ce:	f000 f9d1 	bl	8001c74 <RCC_GetSysClockFreqFromPLLSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a70      	ldr	r2, [pc, #448]	; (8001a98 <HAL_RCC_ClockConfig+0x264>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d946      	bls.n	8001968 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018da:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d140      	bne.n	8001968 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018e6:	4b6b      	ldr	r3, [pc, #428]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ee:	4a69      	ldr	r2, [pc, #420]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e035      	b.n	8001968 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d107      	bne.n	8001914 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001904:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d115      	bne.n	800193c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0b9      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800191c:	4b5d      	ldr	r3, [pc, #372]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0ad      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0a5      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800193c:	f000 f8b4 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001940:	4603      	mov	r3, r0
 8001942:	4a55      	ldr	r2, [pc, #340]	; (8001a98 <HAL_RCC_ClockConfig+0x264>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d90f      	bls.n	8001968 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001948:	4b52      	ldr	r3, [pc, #328]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800195e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001962:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 0203 	bic.w	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4947      	ldr	r1, [pc, #284]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800197a:	f7ff f98b 	bl	8000c94 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001980:	e00a      	b.n	8001998 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001982:	f7ff f987 	bl	8000c94 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001990:	4293      	cmp	r3, r2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e077      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001998:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 020c 	and.w	r2, r3, #12
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d1eb      	bne.n	8001982 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ba:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d010      	beq.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689a      	ldr	r2, [r3, #8]
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d208      	bcs.n	80019ea <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	492b      	ldr	r1, [pc, #172]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d210      	bcs.n	8001a1a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f8:	4b25      	ldr	r3, [pc, #148]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f023 020f 	bic.w	r2, r3, #15
 8001a00:	4923      	ldr	r1, [pc, #140]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <HAL_RCC_ClockConfig+0x25c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e036      	b.n	8001a88 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	4918      	ldr	r1, [pc, #96]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d009      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4910      	ldr	r1, [pc, #64]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a58:	f000 f826 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_ClockConfig+0x260>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	490c      	ldr	r1, [pc, #48]	; (8001a9c <HAL_RCC_ClockConfig+0x268>)
 8001a6a:	5ccb      	ldrb	r3, [r1, r3]
 8001a6c:	f003 031f 	and.w	r3, r3, #31
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x26c>)
 8001a76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a78:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff f8b9 	bl	8000bf4 <HAL_InitTick>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]

  return status;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	04c4b400 	.word	0x04c4b400
 8001a9c:	080041d8 	.word	0x080041d8
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	; 0x24
 8001aac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ab6:	4b3e      	ldr	r3, [pc, #248]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x34>
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d121      	bne.n	8001b1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d11e      	bne.n	8001b1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001adc:	4b34      	ldr	r3, [pc, #208]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e005      	b.n	8001b04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b04:	4a2b      	ldr	r2, [pc, #172]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10d      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b18:	e00a      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d102      	bne.n	8001b26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b20:	4b25      	ldr	r3, [pc, #148]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	e004      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d134      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b36:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d003      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d003      	beq.n	8001b54 <HAL_RCC_GetSysClockFreq+0xac>
 8001b4c:	e005      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b50:	617b      	str	r3, [r7, #20]
      break;
 8001b52:	e005      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b54:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b56:	617b      	str	r3, [r7, #20]
      break;
 8001b58:	e002      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	617b      	str	r3, [r7, #20]
      break;
 8001b5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	0a1b      	lsrs	r3, r3, #8
 8001b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	fb03 f202 	mul.w	r2, r3, r2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	0e5b      	lsrs	r3, r3, #25
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	3301      	adds	r3, #1
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	; 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080041e8 	.word	0x080041e8
 8001bb8:	00f42400 	.word	0x00f42400
 8001bbc:	007a1200 	.word	0x007a1200

08001bc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bd8:	f7ff f94e 	bl	8000e78 <HAL_PWREx_GetVoltageRange>
 8001bdc:	6178      	str	r0, [r7, #20]
 8001bde:	e014      	b.n	8001c0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	; 0x58
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bf8:	f7ff f93e 	bl	8000e78 <HAL_PWREx_GetVoltageRange>
 8001bfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	4a1a      	ldr	r2, [pc, #104]	; (8001c6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c10:	d10b      	bne.n	8001c2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b80      	cmp	r3, #128	; 0x80
 8001c16:	d913      	bls.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2ba0      	cmp	r3, #160	; 0xa0
 8001c1c:	d902      	bls.n	8001c24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c1e:	2302      	movs	r3, #2
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e00d      	b.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c24:	2301      	movs	r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	e00a      	b.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2e:	d902      	bls.n	8001c36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	e004      	b.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b70      	cmp	r3, #112	; 0x70
 8001c3a:	d101      	bne.n	8001c40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 020f 	bic.w	r2, r3, #15
 8001c48:	4909      	ldr	r1, [pc, #36]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 030f 	and.w	r3, r3, #15
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40022000 	.word	0x40022000

08001c74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d00b      	beq.n	8001ca2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d825      	bhi.n	8001cdc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d008      	beq.n	8001ca8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d11f      	bne.n	8001cdc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001c9c:	4b25      	ldr	r3, [pc, #148]	; (8001d34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001c9e:	613b      	str	r3, [r7, #16]
    break;
 8001ca0:	e01f      	b.n	8001ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001ca2:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001ca4:	613b      	str	r3, [r7, #16]
    break;
 8001ca6:	e01c      	b.n	8001ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e005      	b.n	8001cd0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001cd0:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	613b      	str	r3, [r7, #16]
    break;
 8001cda:	e002      	b.n	8001ce2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
    break;
 8001ce0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	091b      	lsrs	r3, r3, #4
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	3301      	adds	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	fb03 f202 	mul.w	r2, r3, r2
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0e5b      	lsrs	r3, r3, #25
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	3301      	adds	r3, #1
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001d22:	683b      	ldr	r3, [r7, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	007a1200 	.word	0x007a1200
 8001d3c:	080041e8 	.word	0x080041e8

08001d40 <Kalmanfilter_assembly>:
 * @Param float* OutputArray address of array to load with x values from updatting the kalman_state
 * @Param kalman_state* kstate is initial state
 * @Param int Length is the length of InputArray
 * @Return int 0 if function ran as expected, -1 if error
 */
int Kalmanfilter_assembly(float* InputArray, float* OutputArray, kalman_state* kstate, int Length)  {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++){ // loop through input array of measurements
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e01a      	b.n	8001d8a <Kalmanfilter_assembly+0x4a>
		float measurement = InputArray[i];
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	613b      	str	r3, [r7, #16]
		if (kalman(kstate, measurement) == 1) { // run kalman function, check for overflow, underflow, and division by zero
 8001d60:	ed97 0a04 	vldr	s0, [r7, #16]
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7fe fa49 	bl	80001fc <kalman>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <Kalmanfilter_assembly+0x36>
			return -1; // return 1 if kalman returns -1 (happens if arithmetic condition in computations)
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d74:	e00e      	b.n	8001d94 <Kalmanfilter_assembly+0x54>
		}
		OutputArray[i] = kstate->x; // Add x to output array
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6892      	ldr	r2, [r2, #8]
 8001d82:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++){ // loop through input array of measurements
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	3301      	adds	r3, #1
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	dbe0      	blt.n	8001d54 <Kalmanfilter_assembly+0x14>
	}
	return 0; // return 0 if all goes well
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <Kalmanfilter_C>:
 * @Param float* OutputArray address of array to load with x values from updatting the kalman_state
 * @Param kalman_state* kstate is initial state
 * @Param int Length is the length of InputArray
 * @Return int 0 if function ran as expected, -1 if error
 */
int Kalmanfilter_C(float* InputArray, float* OutputArray, kalman_state* kstate, int Length)  {
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++){  // loop through input array of measurements
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e062      	b.n	8001e76 <Kalmanfilter_C+0xda>
		float measurement = InputArray[i];
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]

		// kalman arithmetic
		kstate->p = kstate->p + kstate->q;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edc3 7a03 	vstr	s15, [r3, #12]
		kstate->k = kstate->p / (kstate->p +kstate->r);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	ed93 7a03 	vldr	s14, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	edc3 7a04 	vstr	s15, [r3, #16]
		kstate->x = kstate->x + (kstate->k * (measurement - kstate->x));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 6a04 	vldr	s13, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e04:	ed97 6a04 	vldr	s12, [r7, #16]
 8001e08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	edc3 7a02 	vstr	s15, [r3, #8]
		kstate->p = (1.0 - kstate->k) * kstate->p;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb78 	bl	8000514 <__aeabi_f2d>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	492c      	ldr	r1, [pc, #176]	; (8001ee0 <Kalmanfilter_C+0x144>)
 8001e2e:	f7fe fa11 	bl	8000254 <__aeabi_dsub>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb68 	bl	8000514 <__aeabi_f2d>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe fbba 	bl	80005c4 <__aeabi_dmul>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	f7fe fe64 	bl	8000b24 <__aeabi_d2f>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60da      	str	r2, [r3, #12]

		OutputArray[i] = kstate->x; // Add x to output array
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	4413      	add	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6892      	ldr	r2, [r2, #8]
 8001e6e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++){  // loop through input array of measurements
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	3301      	adds	r3, #1
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	db98      	blt.n	8001db0 <Kalmanfilter_C+0x14>
	}
		//Checking for overflow, underflow, and division by 0 via checking for inf or NaN
		if (isnan(kstate->p) || isnan(kstate->k) || isnan(kstate->q) || isnan(kstate->x) || isnan(kstate->r)) {
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e84:	eef4 7a67 	vcmp.f32	s15, s15
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	d61f      	bvs.n	8001ece <Kalmanfilter_C+0x132>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e94:	eef4 7a67 	vcmp.f32	s15, s15
 8001e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9c:	d617      	bvs.n	8001ece <Kalmanfilter_C+0x132>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eef4 7a67 	vcmp.f32	s15, s15
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	d60f      	bvs.n	8001ece <Kalmanfilter_C+0x132>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001eb4:	eef4 7a67 	vcmp.f32	s15, s15
 8001eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ebc:	d607      	bvs.n	8001ece <Kalmanfilter_C+0x132>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ec4:	eef4 7a67 	vcmp.f32	s15, s15
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	d702      	bvc.n	8001ed4 <Kalmanfilter_C+0x138>
			return -1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed2:	e000      	b.n	8001ed6 <Kalmanfilter_C+0x13a>
		}
		return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	3ff00000 	.word	0x3ff00000

08001ee4 <Kalmanfilter_CMSIS>:
 * @Param float* OutputArray address of array to load with x values from updatting the kalman_state
 * @Param kalman_state* kstate is initial state
 * @Param integer Length is the length of InputArray
 * @Return integer 0 if function ran as expected, -1 if error
 */
int Kalmanfilter_CMSIS(float* InputArray, float* OutputArray, kalman_state* kstate, int Length)  {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++){  // loop through input array of measurements
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e066      	b.n	8001fc6 <Kalmanfilter_CMSIS+0xe2>
		float measurement = InputArray[i];
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
		float temp;

		// kalman arithmetic
		//kstate->p = kstate->p + kstate->q;
		arm_add_f32(&kstate->p, &kstate->q, &kstate->p, 1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f103 000c 	add.w	r0, r3, #12
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f103 020c 	add.w	r2, r3, #12
 8001f12:	2301      	movs	r3, #1
 8001f14:	f001 fb00 	bl	8003518 <arm_add_f32>

		//kstate->k = kstate->p / (kstate->p +kstate->r);
		arm_add_f32(&kstate->p, &kstate->r, &kstate->k, 1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f103 000c 	add.w	r0, r3, #12
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	1d19      	adds	r1, r3, #4
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f103 0210 	add.w	r2, r3, #16
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f001 faf5 	bl	8003518 <arm_add_f32>
		kstate->k = kstate->p/kstate->k;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	edd3 6a03 	vldr	s13, [r3, #12]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	edc3 7a04 	vstr	s15, [r3, #16]

		//kstate->x = kstate->x + (kstate->k * (measurement - kstate->x));
		arm_sub_f32(&measurement, &kstate->x, &temp, 1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f103 0108 	add.w	r1, r3, #8
 8001f4a:	f107 0214 	add.w	r2, r7, #20
 8001f4e:	f107 0018 	add.w	r0, r7, #24
 8001f52:	2301      	movs	r3, #1
 8001f54:	f001 fa2c 	bl	80033b0 <arm_sub_f32>
		arm_mult_f32(&kstate->k, &temp, &temp, 1);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f103 0010 	add.w	r0, r3, #16
 8001f5e:	f107 0214 	add.w	r2, r7, #20
 8001f62:	f107 0114 	add.w	r1, r7, #20
 8001f66:	2301      	movs	r3, #1
 8001f68:	f001 fa7c 	bl	8003464 <arm_mult_f32>
		arm_add_f32(&kstate->x, &temp, &kstate->x, 1);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f103 0008 	add.w	r0, r3, #8
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f103 0208 	add.w	r2, r3, #8
 8001f78:	f107 0114 	add.w	r1, r7, #20
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f001 facb 	bl	8003518 <arm_add_f32>

		//kstate->p = (1.0 - kstate->k) * kstate->p;
		temp = 1.0;
 8001f82:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f86:	617b      	str	r3, [r7, #20]
		arm_sub_f32(&temp, &kstate->k, &temp, 1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f103 0110 	add.w	r1, r3, #16
 8001f8e:	f107 0214 	add.w	r2, r7, #20
 8001f92:	f107 0014 	add.w	r0, r7, #20
 8001f96:	2301      	movs	r3, #1
 8001f98:	f001 fa0a 	bl	80033b0 <arm_sub_f32>
		arm_mult_f32(&kstate->p, &temp, &kstate->p, 1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f103 000c 	add.w	r0, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f103 020c 	add.w	r2, r3, #12
 8001fa8:	f107 0114 	add.w	r1, r7, #20
 8001fac:	2301      	movs	r3, #1
 8001fae:	f001 fa59 	bl	8003464 <arm_mult_f32>

		OutputArray[i] = kstate->x; // Add x to output array
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4413      	add	r3, r2
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6892      	ldr	r2, [r2, #8]
 8001fbe:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++){  // loop through input array of measurements
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	69fa      	ldr	r2, [r7, #28]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	db94      	blt.n	8001ef8 <Kalmanfilter_CMSIS+0x14>
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8001fce:	eef1 3a10 	vmrs	r3, fpscr
	}
		//Checking for overflow, underflow, and division by 0 via checking for inf or NaN
		if ((__get_FPSCR() & 0x0000000F) != 0) { // if flags, return -1
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <Kalmanfilter_CMSIS+0xfc>
			//TODO clear FPSCR?
			return -1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fde:	e000      	b.n	8001fe2 <Kalmanfilter_CMSIS+0xfe>
		}
		return 0; // if no flags, return 0
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3720      	adds	r7, #32
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <data_processing_C>:
 * @Param data_processed* data structure to put values into
 * @Param float* original is original measurements
 * @Param float* x_values  are x values found by kalman
 * @Param int length is the length of the original and x_values arrays
 */
void data_processing_C(data_processed* data, float* original, float* x_values, int length) {
 8001fea:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fee:	b090      	sub	sp, #64	; 0x40
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
	// Subtraction of original and data obtained by Kalman filter tracking.
	for (int i = 0; i<length; i++) {
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffe:	e017      	b.n	8002030 <data_processing_C+0x46>
		data->difference[i] = original[i] - x_values[i];
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	4413      	add	r3, r2
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	3302      	adds	r3, #2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i<length; i++) {
 800202a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202c:	3301      	adds	r3, #1
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
 8002030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	dbe3      	blt.n	8002000 <data_processing_C+0x16>
	}

	// Calculation of the standard deviation and the average of the difference.
	float sum = 0;
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i<length; i++) {
 800203e:	2300      	movs	r3, #0
 8002040:	63bb      	str	r3, [r7, #56]	; 0x38
 8002042:	e00f      	b.n	8002064 <data_processing_C+0x7a>
			sum = sum + data->difference[i];
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	3302      	adds	r3, #2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800205a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for (int i = 0; i<length; i++) {
 800205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002060:	3301      	adds	r3, #1
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
 8002064:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	dbeb      	blt.n	8002044 <data_processing_C+0x5a>
	}
	data->average = (sum / length);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002076:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800207a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	edc3 7a01 	vstr	s15, [r3, #4]

	sum = 0;
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i<length; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208e:	e022      	b.n	80020d6 <data_processing_C+0xec>
				sum += (data->difference[i] - data->average)*(data->difference[i] - data->average);
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002094:	3302      	adds	r3, #2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	ed93 7a00 	vldr	s14, [r3]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80020a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ac:	3302      	adds	r3, #2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	edd3 6a00 	vldr	s13, [r3]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80020bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80020c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	for (int i = 0; i<length; i++) {
 80020d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d2:	3301      	adds	r3, #1
 80020d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbd8      	blt.n	8002090 <data_processing_C+0xa6>
	}
	sum = sum / length;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80020ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	data->standard_deviation = sqrt(sum);
 80020f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020f6:	f7fe fa0d 	bl	8000514 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	ec43 2b10 	vmov	d0, r2, r3
 8002102:	f001 faa3 	bl	800364c <sqrt>
 8002106:	ec53 2b10 	vmov	r2, r3, d0
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fd09 	bl	8000b24 <__aeabi_d2f>
 8002112:	4602      	mov	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]


	// Calculation of the convolution between the two vectors.
	int conv_length = 2*length - 1; // length of both vectors combined
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	3b01      	subs	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
		int i, j, i1;
		float tmp;

		//convolution process
		for (i=0; i<conv_length; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002124:	e037      	b.n	8002196 <data_processing_C+0x1ac>
		{
			i1 = i;
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
			tmp = 0.0;
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
			for (j=0; j<length; j++)
 8002130:	2300      	movs	r3, #0
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
 8002134:	e028      	b.n	8002188 <data_processing_C+0x19e>
			{
				if(i1>=0 && i1<length)
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	2b00      	cmp	r3, #0
 800213a:	db17      	blt.n	800216c <data_processing_C+0x182>
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	da13      	bge.n	800216c <data_processing_C+0x182>
					tmp = tmp + (original[i1]*x_values[j]);
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	4413      	add	r3, r2
 800214c:	ed93 7a00 	vldr	s14, [r3]
 8002150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	4413      	add	r3, r2
 8002158:	edd3 7a00 	vldr	s15, [r3]
 800215c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002160:	ed97 7a08 	vldr	s14, [r7, #32]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	edc7 7a08 	vstr	s15, [r7, #32]

				i1 = i1-1;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3b01      	subs	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
				data->convolution[i] = tmp;
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	f203 235a 	addw	r3, r3, #602	; 0x25a
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	6a3a      	ldr	r2, [r7, #32]
 8002180:	601a      	str	r2, [r3, #0]
			for (j=0; j<length; j++)
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	3301      	adds	r3, #1
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
 8002188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	dbd2      	blt.n	8002136 <data_processing_C+0x14c>
		for (i=0; i<conv_length; i++)
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	3301      	adds	r3, #1
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	429a      	cmp	r2, r3
 800219c:	dbc3      	blt.n	8002126 <data_processing_C+0x13c>
		}


	// Calculation of the correlation between the original and tracked vectors.
	// This is a duplicate of the convolution loop but with one vector backwards in time.
		float x_backwards[length];
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	466b      	mov	r3, sp
 80021a2:	4618      	mov	r0, r3
 80021a4:	1e4b      	subs	r3, r1, #1
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	460a      	mov	r2, r1
 80021aa:	2300      	movs	r3, #0
 80021ac:	4690      	mov	r8, r2
 80021ae:	4699      	mov	r9, r3
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80021bc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80021c0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80021c4:	460a      	mov	r2, r1
 80021c6:	2300      	movs	r3, #0
 80021c8:	4614      	mov	r4, r2
 80021ca:	461d      	mov	r5, r3
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	016b      	lsls	r3, r5, #5
 80021d6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80021da:	0162      	lsls	r2, r4, #5
 80021dc:	460b      	mov	r3, r1
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	3307      	adds	r3, #7
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	ebad 0d03 	sub.w	sp, sp, r3
 80021ea:	466b      	mov	r3, sp
 80021ec:	3303      	adds	r3, #3
 80021ee:	089b      	lsrs	r3, r3, #2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	617b      	str	r3, [r7, #20]
		for (i=0; i<length; i++) {
 80021f4:	2300      	movs	r3, #0
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f8:	e00f      	b.n	800221a <data_processing_C+0x230>
			x_backwards[i] = x_values[length-1 - i];
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	6979      	ldr	r1, [r7, #20]
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	601a      	str	r2, [r3, #0]
		for (i=0; i<length; i++) {
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	3301      	adds	r3, #1
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800221a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	dbeb      	blt.n	80021fa <data_processing_C+0x210>
		}

		for (i=0; i<conv_length; i++)
 8002222:	2300      	movs	r3, #0
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002226:	e038      	b.n	800229a <data_processing_C+0x2b0>
			{
				i1 = i;
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
				tmp = 0.0;
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	623b      	str	r3, [r7, #32]
				for (j=0; j<length; j++)
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
 8002236:	e029      	b.n	800228c <data_processing_C+0x2a2>
				{
					if(i1>=0 && i1<length)
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	db17      	blt.n	800226e <data_processing_C+0x284>
 800223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	da13      	bge.n	800226e <data_processing_C+0x284>
						tmp = tmp + (original[i1]*x_backwards[j]);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	4413      	add	r3, r2
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	ed97 7a08 	vldr	s14, [r7, #32]
 8002266:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226a:	edc7 7a08 	vstr	s15, [r7, #32]

					i1 = i1-1;
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	3b01      	subs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
					data->correlation[i] = tmp;
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3304      	adds	r3, #4
 8002282:	6a3a      	ldr	r2, [r7, #32]
 8002284:	601a      	str	r2, [r3, #0]
				for (j=0; j<length; j++)
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	3301      	adds	r3, #1
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
 800228c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbd1      	blt.n	8002238 <data_processing_C+0x24e>
		for (i=0; i<conv_length; i++)
 8002294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002296:	3301      	adds	r3, #1
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800229a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbc2      	blt.n	8002228 <data_processing_C+0x23e>
 80022a2:	4685      	mov	sp, r0
				}
		}
}
 80022a4:	bf00      	nop
 80022a6:	3740      	adds	r7, #64	; 0x40
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080022ae <data_processing_CMSIS>:
 * @Param data_processed* data structure to put values into
 * @Param float* original is original measurements
 * @Param float* x_values  are x values found by kalman
 * @Param int length is the length of the original and x_values arrays
 */
void data_processing_CMSIS(data_processed* data, float* original, float* x_values, int length) {
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	603b      	str	r3, [r7, #0]
	// Subtraction of original and data obtained by Kalman filter tracking.
	arm_sub_f32(original, x_values, data->difference, length);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f103 0208 	add.w	r2, r3, #8
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	68b8      	ldr	r0, [r7, #8]
 80022c8:	f001 f872 	bl	80033b0 <arm_sub_f32>

	// Calculation of the standard deviation and the average of the difference.
	arm_std_f32(data->difference, length, &data->standard_deviation);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3308      	adds	r3, #8
 80022d0:	6839      	ldr	r1, [r7, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fa53 	bl	8002780 <arm_std_f32>
	arm_mean_f32(data->difference, length, &data->average);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f103 0008 	add.w	r0, r3, #8
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3304      	adds	r3, #4
 80022e6:	461a      	mov	r2, r3
 80022e8:	f000 fad4 	bl	8002894 <arm_mean_f32>

	// Calculation of the correlation between the original and tracked vectors.
	arm_correlate_f32(original, length, x_values, length, data->correlation);
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f503 53e1 	add.w	r3, r3, #7200	; 0x1c20
 80022f6:	3304      	adds	r3, #4
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	4613      	mov	r3, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b8      	ldr	r0, [r7, #8]
 8002300:	f000 fb06 	bl	8002910 <arm_correlate_f32>

	// Calculation of the convolution between the two vectors.
	arm_conv_f32(original, length, x_values, length, data->convolution);
 8002304:	6839      	ldr	r1, [r7, #0]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f603 1368 	addw	r3, r3, #2408	; 0x968
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	4613      	mov	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68b8      	ldr	r0, [r7, #8]
 8002316:	f000 fdb1 	bl	8002e7c <arm_conv_f32>
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	f5ad 3d9f 	sub.w	sp, sp, #81408	; 0x13e00
 800232a:	b0c4      	sub	sp, #272	; 0x110
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800232e:	f7fe fc49 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002332:	f000 f91f 	bl	8002574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002336:	f000 f96f 	bl	8002618 <MX_GPIO_Init>


	  // Below is code for part 2 ---------------------------------------------------------------------------------
	  // -----------------------------------------------------------------------------------------------------------

	  	int length = 600;
 800233a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800233e:	f507 329f 	add.w	r2, r7, #81408	; 0x13e00
 8002342:	f502 7286 	add.w	r2, r2, #268	; 0x10c
 8002346:	6013      	str	r3, [r2, #0]
	  	float measurements[600] = // measurements from myCourses
 8002348:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800234c:	f6a3 730c 	subw	r3, r3, #3852	; 0xf0c
 8002350:	4a85      	ldr	r2, [pc, #532]	; (8002568 <main+0x244>)
 8002352:	4618      	mov	r0, r3
 8002354:	4611      	mov	r1, r2
 8002356:	f44f 6316 	mov.w	r3, #2400	; 0x960
 800235a:	461a      	mov	r2, r3
 800235c:	f001 f960 	bl	8003620 <memcpy>
	  	};


	  	// Try all 3 implementations of kalman filter (assembly, C, CMSIS) ------------------------------------------------
	  	float x_values_asm[600];
	  	struct kalman_state kstate_asm = {0.1, 0.1, 5.0, 0.1, 0.0};
 8002360:	4b82      	ldr	r3, [pc, #520]	; (800256c <main+0x248>)
 8002362:	f507 349f 	add.w	r4, r7, #81408	; 0x13e00
 8002366:	f104 04ec 	add.w	r4, r4, #236	; 0xec
 800236a:	461d      	mov	r5, r3
 800236c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800236e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	6023      	str	r3, [r4, #0]
	  	ITM_Port32(31) = 1;
 8002374:	4b7e      	ldr	r3, [pc, #504]	; (8002570 <main+0x24c>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
	  	int asm_success = Kalmanfilter_assembly(measurements, x_values_asm, &kstate_asm, length);
 800237a:	f507 329f 	add.w	r2, r7, #81408	; 0x13e00
 800237e:	f102 02ec 	add.w	r2, r2, #236	; 0xec
 8002382:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 8002386:	f5a1 71d6 	sub.w	r1, r1, #428	; 0x1ac
 800238a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800238e:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8002392:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 8002396:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f7ff fcd0 	bl	8001d40 <Kalmanfilter_assembly>
 80023a0:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 80023a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80023a8:	6018      	str	r0, [r3, #0]
	  	ITM_Port32(31) = 2;
 80023aa:	4b71      	ldr	r3, [pc, #452]	; (8002570 <main+0x24c>)
 80023ac:	2202      	movs	r2, #2
 80023ae:	601a      	str	r2, [r3, #0]

	  	float x_values_C[600];
	  	struct kalman_state kstate_C = {0.1, 0.1, 5.0, 0.1, 0.0};
 80023b0:	4b6e      	ldr	r3, [pc, #440]	; (800256c <main+0x248>)
 80023b2:	f507 349f 	add.w	r4, r7, #81408	; 0x13e00
 80023b6:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80023ba:	461d      	mov	r5, r3
 80023bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c0:	682b      	ldr	r3, [r5, #0]
 80023c2:	6023      	str	r3, [r4, #0]
	  	ITM_Port32(31) = 3;
 80023c4:	4b6a      	ldr	r3, [pc, #424]	; (8002570 <main+0x24c>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	601a      	str	r2, [r3, #0]
	  	int C_success = Kalmanfilter_C(measurements, x_values_C, &kstate_C, length);
 80023ca:	f507 329f 	add.w	r2, r7, #81408	; 0x13e00
 80023ce:	f102 02d8 	add.w	r2, r2, #216	; 0xd8
 80023d2:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 80023d6:	f101 0110 	add.w	r1, r1, #16
 80023da:	394c      	subs	r1, #76	; 0x4c
 80023dc:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80023e0:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 80023e4:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 80023e8:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f7ff fcd5 	bl	8001d9c <Kalmanfilter_C>
 80023f2:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 80023f6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80023fa:	6018      	str	r0, [r3, #0]
	  	ITM_Port32(31) = 4;
 80023fc:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <main+0x24c>)
 80023fe:	2204      	movs	r2, #4
 8002400:	601a      	str	r2, [r3, #0]

	  	float x_values_CMSIS[600];
	  	struct kalman_state kstate_CMSIS = {0.1, 0.1, 5.0, 0.1, 0.0};
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <main+0x248>)
 8002404:	f507 349f 	add.w	r4, r7, #81408	; 0x13e00
 8002408:	f104 04c4 	add.w	r4, r4, #196	; 0xc4
 800240c:	461d      	mov	r5, r3
 800240e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002412:	682b      	ldr	r3, [r5, #0]
 8002414:	6023      	str	r3, [r4, #0]
	  	ITM_Port32(31) = 5;
 8002416:	4b56      	ldr	r3, [pc, #344]	; (8002570 <main+0x24c>)
 8002418:	2205      	movs	r2, #5
 800241a:	601a      	str	r2, [r3, #0]
	  	int CMSIS_success = Kalmanfilter_CMSIS(measurements, x_values_CMSIS, &kstate_CMSIS, length);
 800241c:	f507 329f 	add.w	r2, r7, #81408	; 0x13e00
 8002420:	f102 02c4 	add.w	r2, r2, #196	; 0xc4
 8002424:	f507 51e8 	add.w	r1, r7, #7424	; 0x1d00
 8002428:	f101 0110 	add.w	r1, r1, #16
 800242c:	39ec      	subs	r1, #236	; 0xec
 800242e:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8002432:	f5a0 7086 	sub.w	r0, r0, #268	; 0x10c
 8002436:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 800243a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f7ff fd50 	bl	8001ee4 <Kalmanfilter_CMSIS>
 8002444:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 8002448:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800244c:	6018      	str	r0, [r3, #0]
	  	ITM_Port32(31) = 6;
 800244e:	4b48      	ldr	r3, [pc, #288]	; (8002570 <main+0x24c>)
 8002450:	2206      	movs	r2, #6
 8002452:	601a      	str	r2, [r3, #0]


	  	// Try processing data with CMSIS implementation ------------------------------------------------------------------
	  	ITM_Port32(31) = 7;
 8002454:	4b46      	ldr	r3, [pc, #280]	; (8002570 <main+0x24c>)
 8002456:	2207      	movs	r2, #7
 8002458:	601a      	str	r2, [r3, #0]
	  	struct data_processed data_asm_CMSIS;
	  	data_processing_CMSIS(&data_asm_CMSIS, measurements, x_values_asm, length);
 800245a:	f507 6231 	add.w	r2, r7, #2832	; 0xb10
 800245e:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 8002462:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002466:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800246a:	f507 501c 	add.w	r0, r7, #9984	; 0x2700
 800246e:	f100 0010 	add.w	r0, r0, #16
 8002472:	f5a0 70c6 	sub.w	r0, r0, #396	; 0x18c
 8002476:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 800247a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f7ff ff15 	bl	80022ae <data_processing_CMSIS>
	  	struct data_processed data_C_CMSIS;
	  	data_processing_CMSIS(&data_C_CMSIS, measurements, x_values_C, length);
 8002484:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8002488:	f102 0210 	add.w	r2, r2, #16
 800248c:	3a4c      	subs	r2, #76	; 0x4c
 800248e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002492:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002496:	f507 40aa 	add.w	r0, r7, #21760	; 0x5500
 800249a:	f100 0010 	add.w	r0, r0, #16
 800249e:	38ac      	subs	r0, #172	; 0xac
 80024a0:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 80024a4:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f7ff ff00 	bl	80022ae <data_processing_CMSIS>
	  	struct data_processed data_CMSIS_CMSIS;
	  	data_processing_CMSIS(&data_CMSIS_CMSIS, measurements, x_values_CMSIS, length);
 80024ae:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80024b2:	f102 0210 	add.w	r2, r2, #16
 80024b6:	3aec      	subs	r2, #236	; 0xec
 80024b8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80024bc:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80024c0:	f507 4004 	add.w	r0, r7, #33792	; 0x8400
 80024c4:	f100 0010 	add.w	r0, r0, #16
 80024c8:	38cc      	subs	r0, #204	; 0xcc
 80024ca:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 80024ce:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f7ff feeb 	bl	80022ae <data_processing_CMSIS>
	  	ITM_Port32(31) = 8;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <main+0x24c>)
 80024da:	2208      	movs	r2, #8
 80024dc:	601a      	str	r2, [r3, #0]


	  	// Try processing data with C implementation ----------------------------------------------------------------------
	  	ITM_Port32(31) = 9;
 80024de:	4b24      	ldr	r3, [pc, #144]	; (8002570 <main+0x24c>)
 80024e0:	2209      	movs	r2, #9
 80024e2:	601a      	str	r2, [r3, #0]
	  	struct data_processed data_asm_C;
	  	data_processing_C(&data_asm_C, measurements, x_values_asm, length);
 80024e4:	f507 6231 	add.w	r2, r7, #2832	; 0xb10
 80024e8:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 80024ec:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80024f0:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80024f4:	f507 4033 	add.w	r0, r7, #45824	; 0xb300
 80024f8:	f100 0010 	add.w	r0, r0, #16
 80024fc:	38ec      	subs	r0, #236	; 0xec
 80024fe:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 8002502:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f7ff fd6f 	bl	8001fea <data_processing_C>
	  	struct data_processed data_C_C;
	  	data_processing_C(&data_C_C, measurements, x_values_C, length);
 800250c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8002510:	f102 0210 	add.w	r2, r2, #16
 8002514:	3a4c      	subs	r2, #76	; 0x4c
 8002516:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800251a:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800251e:	f507 4061 	add.w	r0, r7, #57600	; 0xe100
 8002522:	f100 0010 	add.w	r0, r0, #16
 8002526:	380c      	subs	r0, #12
 8002528:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 800252c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f7ff fd5a 	bl	8001fea <data_processing_C>
	  	struct data_processed data_CMSIS_C;
	  	data_processing_C(&data_CMSIS_C, measurements, x_values_CMSIS, length);
 8002536:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 800253a:	f102 0210 	add.w	r2, r2, #16
 800253e:	3aec      	subs	r2, #236	; 0xec
 8002540:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002544:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002548:	f507 3088 	add.w	r0, r7, #69632	; 0x11000
 800254c:	f100 0010 	add.w	r0, r0, #16
 8002550:	382c      	subs	r0, #44	; 0x2c
 8002552:	f507 339f 	add.w	r3, r7, #81408	; 0x13e00
 8002556:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f7ff fd45 	bl	8001fea <data_processing_C>
	  	ITM_Port32(31) = 10;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <main+0x24c>)
 8002562:	220a      	movs	r2, #10
 8002564:	601a      	str	r2, [r3, #0]
  {
 8002566:	e6e8      	b.n	800233a <main+0x16>
 8002568:	08003864 	.word	0x08003864
 800256c:	080041c4 	.word	0x080041c4
 8002570:	e000007c 	.word	0xe000007c

08002574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b096      	sub	sp, #88	; 0x58
 8002578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	2244      	movs	r2, #68	; 0x44
 8002580:	2100      	movs	r1, #0
 8002582:	4618      	mov	r0, r3
 8002584:	f001 f85a 	bl	800363c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fc8e 	bl	8000eb8 <HAL_PWREx_ControlVoltageScaling>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80025a2:	f000 f85d 	bl	8002660 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80025a6:	2310      	movs	r3, #16
 80025a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80025aa:	2301      	movs	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80025ae:	2300      	movs	r3, #0
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80025b2:	2360      	movs	r3, #96	; 0x60
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025b6:	2302      	movs	r3, #2
 80025b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80025ba:	2301      	movs	r3, #1
 80025bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80025c2:	233c      	movs	r3, #60	; 0x3c
 80025c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025c6:	2302      	movs	r3, #2
 80025c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80025ca:	2302      	movs	r3, #2
 80025cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fd12 	bl	8001000 <HAL_RCC_OscConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80025e2:	f000 f83d 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	230f      	movs	r3, #15
 80025e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025ea:	2303      	movs	r3, #3
 80025ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025fa:	463b      	mov	r3, r7
 80025fc:	2105      	movs	r1, #5
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f918 	bl	8001834 <HAL_RCC_ClockConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800260a:	f000 f829 	bl	8002660 <Error_Handler>
  }
}
 800260e:	bf00      	nop
 8002610:	3758      	adds	r7, #88	; 0x58
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261e:	4b0f      	ldr	r3, [pc, #60]	; (800265c <MX_GPIO_Init+0x44>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a0e      	ldr	r2, [pc, #56]	; (800265c <MX_GPIO_Init+0x44>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <MX_GPIO_Init+0x44>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <MX_GPIO_Init+0x44>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	4a08      	ldr	r2, [pc, #32]	; (800265c <MX_GPIO_Init+0x44>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <MX_GPIO_Init+0x44>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	603b      	str	r3, [r7, #0]
 800264c:	683b      	ldr	r3, [r7, #0]

}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002668:	e7fe      	b.n	8002668 <Error_Handler+0x8>
	...

0800266c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_MspInit+0x44>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	4a0e      	ldr	r2, [pc, #56]	; (80026b0 <HAL_MspInit+0x44>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6613      	str	r3, [r2, #96]	; 0x60
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <HAL_MspInit+0x44>)
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_MspInit+0x44>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_MspInit+0x44>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_MspInit+0x44>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40021000 	.word	0x40021000

080026b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <NMI_Handler+0x4>

080026ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ba:	b480      	push	{r7}
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026be:	e7fe      	b.n	80026be <HardFault_Handler+0x4>

080026c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <MemManage_Handler+0x4>

080026c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c6:	b480      	push	{r7}
 80026c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ca:	e7fe      	b.n	80026ca <BusFault_Handler+0x4>

080026cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <UsageFault_Handler+0x4>

080026d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026d2:	b480      	push	{r7}
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026ee:	b480      	push	{r7}
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002700:	f7fe fab4 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}

08002708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <SystemInit+0x20>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <SystemInit+0x20>)
 8002714:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002718:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff ffea 	bl	8002708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <LoopForever+0x6>)
  ldr r1, =_edata
 8002736:	490d      	ldr	r1, [pc, #52]	; (800276c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <LoopForever+0xe>)
  movs r3, #0
 800273a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800273c:	e002      	b.n	8002744 <LoopCopyDataInit>

0800273e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800273e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002742:	3304      	adds	r3, #4

08002744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002748:	d3f9      	bcc.n	800273e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800274c:	4c0a      	ldr	r4, [pc, #40]	; (8002778 <LoopForever+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002750:	e001      	b.n	8002756 <LoopFillZerobss>

08002752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002754:	3204      	adds	r2, #4

08002756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002758:	d3fb      	bcc.n	8002752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f000 ff3d 	bl	80035d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7ff fde1 	bl	8002324 <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002764:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800276c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002770:	08004220 	.word	0x08004220
  ldr r2, =_sbss
 8002774:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002778:	20000090 	.word	0x20000090

0800277c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_IRQHandler>
	...

08002780 <arm_std_f32>:
 8002780:	2901      	cmp	r1, #1
 8002782:	d97d      	bls.n	8002880 <arm_std_f32+0x100>
 8002784:	b530      	push	{r4, r5, lr}
 8002786:	ed2d 8b02 	vpush	{d8}
 800278a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002890 <arm_std_f32+0x110>
 800278e:	088d      	lsrs	r5, r1, #2
 8002790:	b083      	sub	sp, #12
 8002792:	eef0 4a47 	vmov.f32	s9, s14
 8002796:	d028      	beq.n	80027ea <arm_std_f32+0x6a>
 8002798:	f100 0310 	add.w	r3, r0, #16
 800279c:	462c      	mov	r4, r5
 800279e:	ed53 7a04 	vldr	s15, [r3, #-16]
 80027a2:	ed13 5a03 	vldr	s10, [r3, #-12]
 80027a6:	ed53 5a02 	vldr	s11, [r3, #-8]
 80027aa:	ed13 6a01 	vldr	s12, [r3, #-4]
 80027ae:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80027b2:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80027b6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80027ba:	ee65 6a05 	vmul.f32	s13, s10, s10
 80027be:	ee77 7a85 	vadd.f32	s15, s15, s10
 80027c2:	ee76 6a87 	vadd.f32	s13, s13, s14
 80027c6:	ee25 7aa5 	vmul.f32	s14, s11, s11
 80027ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80027ce:	ee77 6a26 	vadd.f32	s13, s14, s13
 80027d2:	ee26 7a06 	vmul.f32	s14, s12, s12
 80027d6:	3c01      	subs	r4, #1
 80027d8:	ee77 4a86 	vadd.f32	s9, s15, s12
 80027dc:	ee37 7a26 	vadd.f32	s14, s14, s13
 80027e0:	f103 0310 	add.w	r3, r3, #16
 80027e4:	d1db      	bne.n	800279e <arm_std_f32+0x1e>
 80027e6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80027ea:	f011 0303 	ands.w	r3, r1, #3
 80027ee:	d01b      	beq.n	8002828 <arm_std_f32+0xa8>
 80027f0:	edd0 7a00 	vldr	s15, [r0]
 80027f4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80027f8:	3b01      	subs	r3, #1
 80027fa:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80027fe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002802:	d011      	beq.n	8002828 <arm_std_f32+0xa8>
 8002804:	edd0 7a01 	vldr	s15, [r0, #4]
 8002808:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800280c:	2b01      	cmp	r3, #1
 800280e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002812:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002816:	d007      	beq.n	8002828 <arm_std_f32+0xa8>
 8002818:	edd0 7a02 	vldr	s15, [r0, #8]
 800281c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002820:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002824:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002828:	ee07 1a90 	vmov	s15, r1
 800282c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002830:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002834:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8002838:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 800283c:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002840:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002844:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8002848:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800284c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8002850:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	db0c      	blt.n	8002874 <arm_std_f32+0xf4>
 800285a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8002866:	d40e      	bmi.n	8002886 <arm_std_f32+0x106>
 8002868:	ed82 8a00 	vstr	s16, [r2]
 800286c:	b003      	add	sp, #12
 800286e:	ecbd 8b02 	vpop	{d8}
 8002872:	bd30      	pop	{r4, r5, pc}
 8002874:	2300      	movs	r3, #0
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	b003      	add	sp, #12
 800287a:	ecbd 8b02 	vpop	{d8}
 800287e:	bd30      	pop	{r4, r5, pc}
 8002880:	2300      	movs	r3, #0
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4770      	bx	lr
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	f000 ff0c 	bl	80036a4 <sqrtf>
 800288c:	9a01      	ldr	r2, [sp, #4]
 800288e:	e7eb      	b.n	8002868 <arm_std_f32+0xe8>
 8002890:	00000000 	.word	0x00000000

08002894 <arm_mean_f32>:
 8002894:	b430      	push	{r4, r5}
 8002896:	088d      	lsrs	r5, r1, #2
 8002898:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800290c <arm_mean_f32+0x78>
 800289c:	d018      	beq.n	80028d0 <arm_mean_f32+0x3c>
 800289e:	f100 0310 	add.w	r3, r0, #16
 80028a2:	462c      	mov	r4, r5
 80028a4:	ed53 5a04 	vldr	s11, [r3, #-16]
 80028a8:	ed13 6a03 	vldr	s12, [r3, #-12]
 80028ac:	ed53 6a02 	vldr	s13, [r3, #-8]
 80028b0:	ed13 7a01 	vldr	s14, [r3, #-4]
 80028b4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80028b8:	3c01      	subs	r4, #1
 80028ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80028be:	f103 0310 	add.w	r3, r3, #16
 80028c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ca:	d1eb      	bne.n	80028a4 <arm_mean_f32+0x10>
 80028cc:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80028d0:	f011 0303 	ands.w	r3, r1, #3
 80028d4:	d00f      	beq.n	80028f6 <arm_mean_f32+0x62>
 80028d6:	ed90 7a00 	vldr	s14, [r0]
 80028da:	3b01      	subs	r3, #1
 80028dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028e0:	d009      	beq.n	80028f6 <arm_mean_f32+0x62>
 80028e2:	ed90 7a01 	vldr	s14, [r0, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ec:	bf1c      	itt	ne
 80028ee:	ed90 7a02 	vldrne	s14, [r0, #8]
 80028f2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80028f6:	ee07 1a10 	vmov	s14, r1
 80028fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80028fe:	bc30      	pop	{r4, r5}
 8002900:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002904:	edc2 6a00 	vstr	s13, [r2]
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	00000000 	.word	0x00000000

08002910 <arm_correlate_f32>:
 8002910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002914:	4299      	cmp	r1, r3
 8002916:	b08d      	sub	sp, #52	; 0x34
 8002918:	f0c0 824c 	bcc.w	8002db4 <arm_correlate_f32+0x4a4>
 800291c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800291e:	eba1 0c03 	sub.w	ip, r1, r3
 8002922:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8002926:	f04f 0e04 	mov.w	lr, #4
 800292a:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800292e:	3101      	adds	r1, #1
 8002930:	1ac9      	subs	r1, r1, r3
 8002932:	3c01      	subs	r4, #1
 8002934:	1e5e      	subs	r6, r3, #1
 8002936:	9102      	str	r1, [sp, #8]
 8002938:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800293c:	f000 8294 	beq.w	8002e68 <arm_correlate_f32+0x558>
 8002940:	eddf 7a53 	vldr	s15, [pc, #332]	; 8002a90 <arm_correlate_f32+0x180>
 8002944:	f1a1 0804 	sub.w	r8, r1, #4
 8002948:	46e1      	mov	r9, ip
 800294a:	4605      	mov	r5, r0
 800294c:	2401      	movs	r4, #1
 800294e:	f014 0703 	ands.w	r7, r4, #3
 8002952:	d01b      	beq.n	800298c <arm_correlate_f32+0x7c>
 8002954:	ed91 7a00 	vldr	s14, [r1]
 8002958:	edd5 6a00 	vldr	s13, [r5]
 800295c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002960:	3f01      	subs	r7, #1
 8002962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002966:	d011      	beq.n	800298c <arm_correlate_f32+0x7c>
 8002968:	ed91 7a01 	vldr	s14, [r1, #4]
 800296c:	edd5 6a01 	vldr	s13, [r5, #4]
 8002970:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002974:	2f01      	cmp	r7, #1
 8002976:	ee77 7a87 	vadd.f32	s15, s15, s14
 800297a:	d007      	beq.n	800298c <arm_correlate_f32+0x7c>
 800297c:	ed95 7a02 	vldr	s14, [r5, #8]
 8002980:	edd1 6a02 	vldr	s13, [r1, #8]
 8002984:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002988:	ee77 7a87 	vadd.f32	s15, s15, s14
 800298c:	1c67      	adds	r7, r4, #1
 800298e:	42bb      	cmp	r3, r7
 8002990:	edc9 7a00 	vstr	s15, [r9]
 8002994:	4641      	mov	r1, r8
 8002996:	44f1      	add	r9, lr
 8002998:	d03a      	beq.n	8002a10 <arm_correlate_f32+0x100>
 800299a:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 800299e:	f000 8267 	beq.w	8002e70 <arm_correlate_f32+0x560>
 80029a2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 80029a6:	f100 0110 	add.w	r1, r0, #16
 80029aa:	eddf 7a39 	vldr	s15, [pc, #228]	; 8002a90 <arm_correlate_f32+0x180>
 80029ae:	eb01 050a 	add.w	r5, r1, sl
 80029b2:	f108 0410 	add.w	r4, r8, #16
 80029b6:	ed11 7a04 	vldr	s14, [r1, #-16]
 80029ba:	ed54 3a04 	vldr	s7, [r4, #-16]
 80029be:	ed11 6a03 	vldr	s12, [r1, #-12]
 80029c2:	ed14 4a03 	vldr	s8, [r4, #-12]
 80029c6:	ed51 6a02 	vldr	s13, [r1, #-8]
 80029ca:	ed54 4a02 	vldr	s9, [r4, #-8]
 80029ce:	ed51 5a01 	vldr	s11, [r1, #-4]
 80029d2:	ed14 5a01 	vldr	s10, [r4, #-4]
 80029d6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80029da:	ee26 6a04 	vmul.f32	s12, s12, s8
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80029e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80029ea:	ee65 6a85 	vmul.f32	s13, s11, s10
 80029ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f2:	3110      	adds	r1, #16
 80029f4:	428d      	cmp	r5, r1
 80029f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029fa:	f104 0410 	add.w	r4, r4, #16
 80029fe:	d1da      	bne.n	80029b6 <arm_correlate_f32+0xa6>
 8002a00:	eb00 050a 	add.w	r5, r0, sl
 8002a04:	eb08 010a 	add.w	r1, r8, sl
 8002a08:	f1a8 0804 	sub.w	r8, r8, #4
 8002a0c:	463c      	mov	r4, r7
 8002a0e:	e79e      	b.n	800294e <arm_correlate_f32+0x3e>
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	fb0e cc04 	mla	ip, lr, r4, ip
 8002a16:	f240 81dd 	bls.w	8002dd4 <arm_correlate_f32+0x4c4>
 8002a1a:	9b02      	ldr	r3, [sp, #8]
 8002a1c:	0899      	lsrs	r1, r3, #2
 8002a1e:	9103      	str	r1, [sp, #12]
 8002a20:	f000 8220 	beq.w	8002e64 <arm_correlate_f32+0x554>
 8002a24:	08bb      	lsrs	r3, r7, #2
 8002a26:	f007 0403 	and.w	r4, r7, #3
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	f103 0b0c 	add.w	fp, r3, #12
 8002a32:	18d5      	adds	r5, r2, r3
 8002a34:	1e63      	subs	r3, r4, #1
 8002a36:	0109      	lsls	r1, r1, #4
 8002a38:	9306      	str	r3, [sp, #24]
 8002a3a:	f100 080c 	add.w	r8, r0, #12
 8002a3e:	9401      	str	r4, [sp, #4]
 8002a40:	9104      	str	r1, [sp, #16]
 8002a42:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8002a46:	4441      	add	r1, r8
 8002a48:	f102 0310 	add.w	r3, r2, #16
 8002a4c:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8002a50:	9e06      	ldr	r6, [sp, #24]
 8002a52:	9405      	str	r4, [sp, #20]
 8002a54:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8002a58:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8002a5c:	46e1      	mov	r9, ip
 8002a5e:	4483      	add	fp, r0
 8002a60:	460f      	mov	r7, r1
 8002a62:	920b      	str	r2, [sp, #44]	; 0x2c
 8002a64:	469c      	mov	ip, r3
 8002a66:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8002a90 <arm_correlate_f32+0x180>
 8002a6a:	ed58 1a03 	vldr	s3, [r8, #-12]
 8002a6e:	ed18 2a02 	vldr	s4, [r8, #-8]
 8002a72:	ed58 2a01 	vldr	s5, [r8, #-4]
 8002a76:	ed98 0a00 	vldr	s0, [r8]
 8002a7a:	9900      	ldr	r1, [sp, #0]
 8002a7c:	eef0 5a46 	vmov.f32	s11, s12
 8002a80:	eeb0 5a46 	vmov.f32	s10, s12
 8002a84:	eef0 4a46 	vmov.f32	s9, s12
 8002a88:	4663      	mov	r3, ip
 8002a8a:	4642      	mov	r2, r8
 8002a8c:	e005      	b.n	8002a9a <arm_correlate_f32+0x18a>
 8002a8e:	bf00      	nop
 8002a90:	00000000 	.word	0x00000000
 8002a94:	ed90 0a04 	vldr	s0, [r0, #16]
 8002a98:	3210      	adds	r2, #16
 8002a9a:	ed53 6a04 	vldr	s13, [r3, #-16]
 8002a9e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8002aa2:	ed53 7a02 	vldr	s15, [r3, #-8]
 8002aa6:	ed13 1a01 	vldr	s2, [r3, #-4]
 8002aaa:	ee62 3a26 	vmul.f32	s7, s4, s13
 8002aae:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8002ab2:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8002ab6:	edd2 1a01 	vldr	s3, [r2, #4]
 8002aba:	ee66 6a80 	vmul.f32	s13, s13, s0
 8002abe:	ee22 3a07 	vmul.f32	s6, s4, s14
 8002ac2:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002ac6:	ee74 5a25 	vadd.f32	s11, s8, s11
 8002aca:	ee62 3a87 	vmul.f32	s7, s5, s14
 8002ace:	ee20 4a07 	vmul.f32	s8, s0, s14
 8002ad2:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8002ad6:	ee36 6a86 	vadd.f32	s12, s13, s12
 8002ada:	ed92 2a02 	vldr	s4, [r2, #8]
 8002ade:	ee27 7a21 	vmul.f32	s14, s14, s3
 8002ae2:	ee73 3a85 	vadd.f32	s7, s7, s10
 8002ae6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002aea:	ee20 5a27 	vmul.f32	s10, s0, s15
 8002aee:	ee33 3a24 	vadd.f32	s6, s6, s9
 8002af2:	ee34 4a25 	vadd.f32	s8, s8, s11
 8002af6:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8002afa:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8002afe:	edd2 2a03 	vldr	s5, [r2, #12]
 8002b02:	ee67 7a82 	vmul.f32	s15, s15, s4
 8002b06:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b0e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8002b12:	ee20 0a01 	vmul.f32	s0, s0, s2
 8002b16:	ee61 3a81 	vmul.f32	s7, s3, s2
 8002b1a:	ee75 5a84 	vadd.f32	s11, s11, s8
 8002b1e:	ee22 7a01 	vmul.f32	s14, s4, s2
 8002b22:	ee21 6a22 	vmul.f32	s12, s2, s5
 8002b26:	3901      	subs	r1, #1
 8002b28:	f103 0310 	add.w	r3, r3, #16
 8002b2c:	ee70 4a24 	vadd.f32	s9, s0, s9
 8002b30:	ee33 5a85 	vadd.f32	s10, s7, s10
 8002b34:	ee77 5a25 	vadd.f32	s11, s14, s11
 8002b38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	d1a9      	bne.n	8002a94 <arm_correlate_f32+0x184>
 8002b40:	9b01      	ldr	r3, [sp, #4]
 8002b42:	b3f3      	cbz	r3, 8002bc2 <arm_correlate_f32+0x2b2>
 8002b44:	edd5 7a00 	vldr	s15, [r5]
 8002b48:	ed9b 4a00 	vldr	s8, [fp]
 8002b4c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8002b50:	ee62 3a27 	vmul.f32	s7, s4, s15
 8002b54:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8002b58:	ee64 7a27 	vmul.f32	s15, s8, s15
 8002b5c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8002b60:	ee35 5a23 	vadd.f32	s10, s10, s7
 8002b64:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002b68:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b6c:	b34e      	cbz	r6, 8002bc2 <arm_correlate_f32+0x2b2>
 8002b6e:	edd5 7a01 	vldr	s15, [r5, #4]
 8002b72:	eddb 6a01 	vldr	s13, [fp, #4]
 8002b76:	ee22 7a27 	vmul.f32	s14, s4, s15
 8002b7a:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8002b7e:	ee67 3a84 	vmul.f32	s7, s15, s8
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	2e01      	cmp	r6, #1
 8002b88:	ee74 4a87 	vadd.f32	s9, s9, s14
 8002b8c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8002b90:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8002b94:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b98:	d013      	beq.n	8002bc2 <arm_correlate_f32+0x2b2>
 8002b9a:	ed95 7a02 	vldr	s14, [r5, #8]
 8002b9e:	eddb 3a02 	vldr	s7, [fp, #8]
 8002ba2:	ee62 7a87 	vmul.f32	s15, s5, s14
 8002ba6:	ee27 4a04 	vmul.f32	s8, s14, s8
 8002baa:	ee67 6a26 	vmul.f32	s13, s14, s13
 8002bae:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002bb2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002bb6:	ee35 5a04 	vadd.f32	s10, s10, s8
 8002bba:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002bbe:	ee36 6a07 	vadd.f32	s12, s12, s14
 8002bc2:	f108 0810 	add.w	r8, r8, #16
 8002bc6:	eb09 020e 	add.w	r2, r9, lr
 8002bca:	eb0a 030e 	add.w	r3, sl, lr
 8002bce:	4547      	cmp	r7, r8
 8002bd0:	edc9 4a00 	vstr	s9, [r9]
 8002bd4:	f10b 0b10 	add.w	fp, fp, #16
 8002bd8:	ed82 5a00 	vstr	s10, [r2]
 8002bdc:	44a1      	add	r9, r4
 8002bde:	edca 5a00 	vstr	s11, [sl]
 8002be2:	ed83 6a00 	vstr	s12, [r3]
 8002be6:	44a2      	add	sl, r4
 8002be8:	f47f af3d 	bne.w	8002a66 <arm_correlate_f32+0x156>
 8002bec:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8002bf0:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8002bf4:	9b03      	ldr	r3, [sp, #12]
 8002bf6:	9c05      	ldr	r4, [sp, #20]
 8002bf8:	9904      	ldr	r1, [sp, #16]
 8002bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002bfc:	fb04 cc03 	mla	ip, r4, r3, ip
 8002c00:	4401      	add	r1, r0
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	460d      	mov	r5, r1
 8002c06:	9303      	str	r3, [sp, #12]
 8002c08:	9b02      	ldr	r3, [sp, #8]
 8002c0a:	f013 0303 	ands.w	r3, r3, #3
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	d071      	beq.n	8002cf6 <arm_correlate_f32+0x3e6>
 8002c12:	9903      	ldr	r1, [sp, #12]
 8002c14:	9205      	str	r2, [sp, #20]
 8002c16:	f007 0403 	and.w	r4, r7, #3
 8002c1a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8002c1e:	1c4f      	adds	r7, r1, #1
 8002c20:	1859      	adds	r1, r3, r1
 8002c22:	1d03      	adds	r3, r0, #4
 8002c24:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002c28:	9400      	str	r4, [sp, #0]
 8002c2a:	f102 0110 	add.w	r1, r2, #16
 8002c2e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8002c32:	3c01      	subs	r4, #1
 8002c34:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8002c38:	eb02 090a 	add.w	r9, r2, sl
 8002c3c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002c40:	46e0      	mov	r8, ip
 8002c42:	4618      	mov	r0, r3
 8002c44:	460e      	mov	r6, r1
 8002c46:	4622      	mov	r2, r4
 8002c48:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8002a90 <arm_correlate_f32+0x180>
 8002c4c:	f105 0110 	add.w	r1, r5, #16
 8002c50:	4633      	mov	r3, r6
 8002c52:	465c      	mov	r4, fp
 8002c54:	ed11 7a04 	vldr	s14, [r1, #-16]
 8002c58:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002c5c:	ed11 6a03 	vldr	s12, [r1, #-12]
 8002c60:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002c64:	ed51 6a02 	vldr	s13, [r1, #-8]
 8002c68:	ed53 4a02 	vldr	s9, [r3, #-8]
 8002c6c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8002c70:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002c74:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002c78:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c80:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002c84:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002c88:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	3c01      	subs	r4, #1
 8002c92:	f101 0110 	add.w	r1, r1, #16
 8002c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c9a:	f103 0310 	add.w	r3, r3, #16
 8002c9e:	d1d9      	bne.n	8002c54 <arm_correlate_f32+0x344>
 8002ca0:	9b00      	ldr	r3, [sp, #0]
 8002ca2:	4455      	add	r5, sl
 8002ca4:	b1d3      	cbz	r3, 8002cdc <arm_correlate_f32+0x3cc>
 8002ca6:	ed99 7a00 	vldr	s14, [r9]
 8002caa:	edd5 6a00 	vldr	s13, [r5]
 8002cae:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002cb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cb6:	b18a      	cbz	r2, 8002cdc <arm_correlate_f32+0x3cc>
 8002cb8:	ed99 7a01 	vldr	s14, [r9, #4]
 8002cbc:	edd5 6a01 	vldr	s13, [r5, #4]
 8002cc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002cc4:	2a01      	cmp	r2, #1
 8002cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cca:	d007      	beq.n	8002cdc <arm_correlate_f32+0x3cc>
 8002ccc:	ed95 7a02 	vldr	s14, [r5, #8]
 8002cd0:	edd9 6a02 	vldr	s13, [r9, #8]
 8002cd4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cdc:	463d      	mov	r5, r7
 8002cde:	3704      	adds	r7, #4
 8002ce0:	42b8      	cmp	r0, r7
 8002ce2:	edc8 7a00 	vstr	s15, [r8]
 8002ce6:	44f0      	add	r8, lr
 8002ce8:	d1ae      	bne.n	8002c48 <arm_correlate_f32+0x338>
 8002cea:	9b01      	ldr	r3, [sp, #4]
 8002cec:	9a05      	ldr	r2, [sp, #20]
 8002cee:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8002cf2:	fb0e cc03 	mla	ip, lr, r3, ip
 8002cf6:	9b02      	ldr	r3, [sp, #8]
 8002cf8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002cfc:	08b5      	lsrs	r5, r6, #2
 8002cfe:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8002a90 <arm_correlate_f32+0x180>
 8002d02:	f000 80ac 	beq.w	8002e5e <arm_correlate_f32+0x54e>
 8002d06:	f100 0110 	add.w	r1, r0, #16
 8002d0a:	f102 0310 	add.w	r3, r2, #16
 8002d0e:	462c      	mov	r4, r5
 8002d10:	ed51 6a04 	vldr	s13, [r1, #-16]
 8002d14:	ed53 3a04 	vldr	s7, [r3, #-16]
 8002d18:	ed11 7a03 	vldr	s14, [r1, #-12]
 8002d1c:	ed13 4a03 	vldr	s8, [r3, #-12]
 8002d20:	ed51 7a02 	vldr	s15, [r1, #-8]
 8002d24:	ed53 4a02 	vldr	s9, [r3, #-8]
 8002d28:	ed11 6a01 	vldr	s12, [r1, #-4]
 8002d2c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002d30:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8002d34:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002d38:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002d3c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8002d40:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002d44:	ee66 6a05 	vmul.f32	s13, s12, s10
 8002d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d4c:	3c01      	subs	r4, #1
 8002d4e:	f101 0110 	add.w	r1, r1, #16
 8002d52:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8002d56:	f103 0310 	add.w	r3, r3, #16
 8002d5a:	d1d9      	bne.n	8002d10 <arm_correlate_f32+0x400>
 8002d5c:	012d      	lsls	r5, r5, #4
 8002d5e:	1941      	adds	r1, r0, r5
 8002d60:	4415      	add	r5, r2
 8002d62:	f016 0303 	ands.w	r3, r6, #3
 8002d66:	d01b      	beq.n	8002da0 <arm_correlate_f32+0x490>
 8002d68:	edd5 7a00 	vldr	s15, [r5]
 8002d6c:	ed91 7a00 	vldr	s14, [r1]
 8002d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d74:	3b01      	subs	r3, #1
 8002d76:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002d7a:	d011      	beq.n	8002da0 <arm_correlate_f32+0x490>
 8002d7c:	edd5 7a01 	vldr	s15, [r5, #4]
 8002d80:	ed91 7a01 	vldr	s14, [r1, #4]
 8002d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002d8e:	d007      	beq.n	8002da0 <arm_correlate_f32+0x490>
 8002d90:	edd1 7a02 	vldr	s15, [r1, #8]
 8002d94:	ed95 7a02 	vldr	s14, [r5, #8]
 8002d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002da0:	3e01      	subs	r6, #1
 8002da2:	edcc 5a00 	vstr	s11, [ip]
 8002da6:	f100 0004 	add.w	r0, r0, #4
 8002daa:	44f4      	add	ip, lr
 8002dac:	d1a6      	bne.n	8002cfc <arm_correlate_f32+0x3ec>
 8002dae:	b00d      	add	sp, #52	; 0x34
 8002db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db4:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8002db8:	4606      	mov	r6, r0
 8002dba:	3c02      	subs	r4, #2
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002dc0:	440c      	add	r4, r1
 8002dc2:	460d      	mov	r5, r1
 8002dc4:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4632      	mov	r2, r6
 8002dcc:	f06f 0e03 	mvn.w	lr, #3
 8002dd0:	462b      	mov	r3, r5
 8002dd2:	e5aa      	b.n	800292a <arm_correlate_f32+0x1a>
 8002dd4:	9902      	ldr	r1, [sp, #8]
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d090      	beq.n	8002cfc <arm_correlate_f32+0x3ec>
 8002dda:	9902      	ldr	r1, [sp, #8]
 8002ddc:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8002a90 <arm_correlate_f32+0x180>
 8002de0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8002de4:	eb00 0708 	add.w	r7, r0, r8
 8002de8:	4601      	mov	r1, r0
 8002dea:	4665      	mov	r5, ip
 8002dec:	e020      	b.n	8002e30 <arm_correlate_f32+0x520>
 8002dee:	edd2 7a00 	vldr	s15, [r2]
 8002df2:	ecb4 7a01 	vldmia	r4!, {s14}
 8002df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002dfe:	b18e      	cbz	r6, 8002e24 <arm_correlate_f32+0x514>
 8002e00:	ed92 7a01 	vldr	s14, [r2, #4]
 8002e04:	edd1 6a01 	vldr	s13, [r1, #4]
 8002e08:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e12:	d007      	beq.n	8002e24 <arm_correlate_f32+0x514>
 8002e14:	ed91 7a02 	vldr	s14, [r1, #8]
 8002e18:	edd2 6a02 	vldr	s13, [r2, #8]
 8002e1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002e20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e24:	42bc      	cmp	r4, r7
 8002e26:	edc5 7a00 	vstr	s15, [r5]
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	4475      	add	r5, lr
 8002e2e:	d00b      	beq.n	8002e48 <arm_correlate_f32+0x538>
 8002e30:	460c      	mov	r4, r1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1db      	bne.n	8002dee <arm_correlate_f32+0x4de>
 8002e36:	1d0c      	adds	r4, r1, #4
 8002e38:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002e78 <arm_correlate_f32+0x568>
 8002e3c:	42bc      	cmp	r4, r7
 8002e3e:	edc5 7a00 	vstr	s15, [r5]
 8002e42:	4621      	mov	r1, r4
 8002e44:	4475      	add	r5, lr
 8002e46:	d1f3      	bne.n	8002e30 <arm_correlate_f32+0x520>
 8002e48:	9b02      	ldr	r3, [sp, #8]
 8002e4a:	4440      	add	r0, r8
 8002e4c:	fb0e cc03 	mla	ip, lr, r3, ip
 8002e50:	2e00      	cmp	r6, #0
 8002e52:	d0ac      	beq.n	8002dae <arm_correlate_f32+0x49e>
 8002e54:	08b5      	lsrs	r5, r6, #2
 8002e56:	eddf 5a08 	vldr	s11, [pc, #32]	; 8002e78 <arm_correlate_f32+0x568>
 8002e5a:	f47f af54 	bne.w	8002d06 <arm_correlate_f32+0x3f6>
 8002e5e:	4615      	mov	r5, r2
 8002e60:	4601      	mov	r1, r0
 8002e62:	e77e      	b.n	8002d62 <arm_correlate_f32+0x452>
 8002e64:	4605      	mov	r5, r0
 8002e66:	e6cf      	b.n	8002c08 <arm_correlate_f32+0x2f8>
 8002e68:	9902      	ldr	r1, [sp, #8]
 8002e6a:	2900      	cmp	r1, #0
 8002e6c:	d1b5      	bne.n	8002dda <arm_correlate_f32+0x4ca>
 8002e6e:	e79e      	b.n	8002dae <arm_correlate_f32+0x49e>
 8002e70:	eddf 7a01 	vldr	s15, [pc, #4]	; 8002e78 <arm_correlate_f32+0x568>
 8002e74:	4605      	mov	r5, r0
 8002e76:	e5c7      	b.n	8002a08 <arm_correlate_f32+0xf8>
 8002e78:	00000000 	.word	0x00000000

08002e7c <arm_conv_f32>:
 8002e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e80:	b08b      	sub	sp, #44	; 0x2c
 8002e82:	4299      	cmp	r1, r3
 8002e84:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002e86:	d205      	bcs.n	8002e94 <arm_conv_f32+0x18>
 8002e88:	4606      	mov	r6, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4632      	mov	r2, r6
 8002e92:	4623      	mov	r3, r4
 8002e94:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8002e98:	3101      	adds	r1, #1
 8002e9a:	1ac9      	subs	r1, r1, r3
 8002e9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8002ea0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002ea4:	9101      	str	r1, [sp, #4]
 8002ea6:	1e59      	subs	r1, r3, #1
 8002ea8:	eb02 070b 	add.w	r7, r2, fp
 8002eac:	f000 8277 	beq.w	800339e <arm_conv_f32+0x522>
 8002eb0:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8003170 <arm_conv_f32+0x2f4>
 8002eb4:	f102 0904 	add.w	r9, r2, #4
 8002eb8:	46aa      	mov	sl, r5
 8002eba:	4680      	mov	r8, r0
 8002ebc:	2401      	movs	r4, #1
 8002ebe:	f014 0603 	ands.w	r6, r4, #3
 8002ec2:	d01b      	beq.n	8002efc <arm_conv_f32+0x80>
 8002ec4:	ed92 7a00 	vldr	s14, [r2]
 8002ec8:	edd8 6a00 	vldr	s13, [r8]
 8002ecc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ed0:	3e01      	subs	r6, #1
 8002ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ed6:	d011      	beq.n	8002efc <arm_conv_f32+0x80>
 8002ed8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002edc:	edd8 6a01 	vldr	s13, [r8, #4]
 8002ee0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ee4:	2e01      	cmp	r6, #1
 8002ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002eea:	d007      	beq.n	8002efc <arm_conv_f32+0x80>
 8002eec:	ed98 7a02 	vldr	s14, [r8, #8]
 8002ef0:	ed52 6a02 	vldr	s13, [r2, #-8]
 8002ef4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ef8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002efc:	3401      	adds	r4, #1
 8002efe:	42a3      	cmp	r3, r4
 8002f00:	ecea 7a01 	vstmia	sl!, {s15}
 8002f04:	464a      	mov	r2, r9
 8002f06:	d03a      	beq.n	8002f7e <arm_conv_f32+0x102>
 8002f08:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8002f0c:	f000 824c 	beq.w	80033a8 <arm_conv_f32+0x52c>
 8002f10:	f100 0210 	add.w	r2, r0, #16
 8002f14:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8002f18:	eddf 7a95 	vldr	s15, [pc, #596]	; 8003170 <arm_conv_f32+0x2f4>
 8002f1c:	eb02 0c08 	add.w	ip, r2, r8
 8002f20:	f1a9 0610 	sub.w	r6, r9, #16
 8002f24:	ed12 7a04 	vldr	s14, [r2, #-16]
 8002f28:	edd6 3a04 	vldr	s7, [r6, #16]
 8002f2c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8002f30:	ed96 4a03 	vldr	s8, [r6, #12]
 8002f34:	ed52 6a02 	vldr	s13, [r2, #-8]
 8002f38:	edd6 4a02 	vldr	s9, [r6, #8]
 8002f3c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8002f40:	ed96 5a01 	vldr	s10, [r6, #4]
 8002f44:	ee27 7a23 	vmul.f32	s14, s14, s7
 8002f48:	ee26 6a04 	vmul.f32	s12, s12, s8
 8002f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f50:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8002f54:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002f58:	ee65 6a85 	vmul.f32	s13, s11, s10
 8002f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f60:	3210      	adds	r2, #16
 8002f62:	4594      	cmp	ip, r2
 8002f64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f68:	f1a6 0610 	sub.w	r6, r6, #16
 8002f6c:	d1da      	bne.n	8002f24 <arm_conv_f32+0xa8>
 8002f6e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8002f72:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8002f76:	4480      	add	r8, r0
 8002f78:	f109 0904 	add.w	r9, r9, #4
 8002f7c:	e79f      	b.n	8002ebe <arm_conv_f32+0x42>
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	445d      	add	r5, fp
 8002f82:	f240 80e9 	bls.w	8003158 <arm_conv_f32+0x2dc>
 8002f86:	9b01      	ldr	r3, [sp, #4]
 8002f88:	089a      	lsrs	r2, r3, #2
 8002f8a:	9202      	str	r2, [sp, #8]
 8002f8c:	f000 8203 	beq.w	8003396 <arm_conv_f32+0x51a>
 8002f90:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8002f94:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	f004 0603 	and.w	r6, r4, #3
 8002f9e:	9203      	str	r2, [sp, #12]
 8002fa0:	f1a3 0a10 	sub.w	sl, r3, #16
 8002fa4:	f1a3 020c 	sub.w	r2, r3, #12
 8002fa8:	3b08      	subs	r3, #8
 8002faa:	9204      	str	r2, [sp, #16]
 8002fac:	9305      	str	r3, [sp, #20]
 8002fae:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8002fb2:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8002fb6:	9a03      	ldr	r2, [sp, #12]
 8002fb8:	f100 0c1c 	add.w	ip, r0, #28
 8002fbc:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8002fc0:	464c      	mov	r4, r9
 8002fc2:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8002fc6:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8002fca:	f1a7 0310 	sub.w	r3, r7, #16
 8002fce:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8002fd2:	eb05 0b02 	add.w	fp, r5, r2
 8002fd6:	461f      	mov	r7, r3
 8002fd8:	3510      	adds	r5, #16
 8002fda:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8003170 <arm_conv_f32+0x2f4>
 8002fde:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8002fe2:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8002fe6:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8002fea:	eeb0 5a46 	vmov.f32	s10, s12
 8002fee:	eef0 4a46 	vmov.f32	s9, s12
 8002ff2:	eef0 5a46 	vmov.f32	s11, s12
 8002ff6:	463a      	mov	r2, r7
 8002ff8:	4663      	mov	r3, ip
 8002ffa:	4641      	mov	r1, r8
 8002ffc:	edd2 6a04 	vldr	s13, [r2, #16]
 8003000:	ed13 0a04 	vldr	s0, [r3, #-16]
 8003004:	ed92 7a03 	vldr	s14, [r2, #12]
 8003008:	edd2 7a02 	vldr	s15, [r2, #8]
 800300c:	edd2 0a01 	vldr	s1, [r2, #4]
 8003010:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8003014:	ee62 3a26 	vmul.f32	s7, s4, s13
 8003018:	ee61 2a26 	vmul.f32	s5, s2, s13
 800301c:	ed13 1a03 	vldr	s2, [r3, #-12]
 8003020:	ee66 6a80 	vmul.f32	s13, s13, s0
 8003024:	ee21 4a87 	vmul.f32	s8, s3, s14
 8003028:	ee73 4a24 	vadd.f32	s9, s6, s9
 800302c:	ee33 5a85 	vadd.f32	s10, s7, s10
 8003030:	ee22 3a07 	vmul.f32	s6, s4, s14
 8003034:	ed53 1a02 	vldr	s3, [r3, #-8]
 8003038:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800303c:	ee36 6a86 	vadd.f32	s12, s13, s12
 8003040:	ee60 3a07 	vmul.f32	s7, s0, s14
 8003044:	ee27 7a01 	vmul.f32	s14, s14, s2
 8003048:	ee33 3a24 	vadd.f32	s6, s6, s9
 800304c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003050:	ee74 2a22 	vadd.f32	s5, s8, s5
 8003054:	ee60 4a27 	vmul.f32	s9, s0, s15
 8003058:	ee22 4a27 	vmul.f32	s8, s4, s15
 800305c:	ee73 3a85 	vadd.f32	s7, s7, s10
 8003060:	ed13 2a01 	vldr	s4, [r3, #-4]
 8003064:	ee21 5a27 	vmul.f32	s10, s2, s15
 8003068:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800306c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003074:	ee34 4a22 	vadd.f32	s8, s8, s5
 8003078:	ee60 5a20 	vmul.f32	s11, s0, s1
 800307c:	ee21 3a20 	vmul.f32	s6, s2, s1
 8003080:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003084:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8003088:	ee20 6a82 	vmul.f32	s12, s1, s4
 800308c:	3901      	subs	r1, #1
 800308e:	f1a2 0210 	sub.w	r2, r2, #16
 8003092:	ee75 5a84 	vadd.f32	s11, s11, s8
 8003096:	ee73 4a24 	vadd.f32	s9, s6, s9
 800309a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800309e:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030a2:	f103 0310 	add.w	r3, r3, #16
 80030a6:	d1a9      	bne.n	8002ffc <arm_conv_f32+0x180>
 80030a8:	eb0a 030c 	add.w	r3, sl, ip
 80030ac:	2e00      	cmp	r6, #0
 80030ae:	d042      	beq.n	8003136 <arm_conv_f32+0x2ba>
 80030b0:	edde 7a00 	vldr	s15, [lr]
 80030b4:	ed93 4a00 	vldr	s8, [r3]
 80030b8:	ee61 6a27 	vmul.f32	s13, s2, s15
 80030bc:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80030c0:	ee22 7a27 	vmul.f32	s14, s4, s15
 80030c4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80030c8:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80030cc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80030d0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80030d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80030d8:	eb09 030c 	add.w	r3, r9, ip
 80030dc:	b35c      	cbz	r4, 8003136 <arm_conv_f32+0x2ba>
 80030de:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80030e2:	edd3 6a00 	vldr	s13, [r3]
 80030e6:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80030ea:	ee22 3a27 	vmul.f32	s6, s4, s15
 80030ee:	ee67 3a84 	vmul.f32	s7, s15, s8
 80030f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f6:	2c01      	cmp	r4, #1
 80030f8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80030fc:	ee74 4a83 	vadd.f32	s9, s9, s6
 8003100:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003104:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003108:	eb00 030c 	add.w	r3, r0, ip
 800310c:	d013      	beq.n	8003136 <arm_conv_f32+0x2ba>
 800310e:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8003112:	edd3 3a00 	vldr	s7, [r3]
 8003116:	ee62 7a07 	vmul.f32	s15, s4, s14
 800311a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800311e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003122:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003126:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800312a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800312e:	ee35 5a26 	vadd.f32	s10, s10, s13
 8003132:	ee36 6a07 	vadd.f32	s12, s12, s14
 8003136:	45ab      	cmp	fp, r5
 8003138:	ed45 5a04 	vstr	s11, [r5, #-16]
 800313c:	ed45 4a03 	vstr	s9, [r5, #-12]
 8003140:	ed05 5a02 	vstr	s10, [r5, #-8]
 8003144:	ed05 6a01 	vstr	s12, [r5, #-4]
 8003148:	f10c 0c10 	add.w	ip, ip, #16
 800314c:	f105 0310 	add.w	r3, r5, #16
 8003150:	f000 809e 	beq.w	8003290 <arm_conv_f32+0x414>
 8003154:	461d      	mov	r5, r3
 8003156:	e740      	b.n	8002fda <arm_conv_f32+0x15e>
 8003158:	9a01      	ldr	r2, [sp, #4]
 800315a:	46ac      	mov	ip, r5
 800315c:	2a00      	cmp	r2, #0
 800315e:	d037      	beq.n	80031d0 <arm_conv_f32+0x354>
 8003160:	9a01      	ldr	r2, [sp, #4]
 8003162:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8003170 <arm_conv_f32+0x2f4>
 8003166:	0096      	lsls	r6, r2, #2
 8003168:	eb05 0c06 	add.w	ip, r5, r6
 800316c:	4604      	mov	r4, r0
 800316e:	e021      	b.n	80031b4 <arm_conv_f32+0x338>
 8003170:	00000000 	.word	0x00000000
 8003174:	edd7 7a00 	vldr	s15, [r7]
 8003178:	ecb2 7a01 	vldmia	r2!, {s14}
 800317c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003180:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003184:	b189      	cbz	r1, 80031aa <arm_conv_f32+0x32e>
 8003186:	ed17 7a01 	vldr	s14, [r7, #-4]
 800318a:	edd4 6a01 	vldr	s13, [r4, #4]
 800318e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003192:	2b02      	cmp	r3, #2
 8003194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003198:	d007      	beq.n	80031aa <arm_conv_f32+0x32e>
 800319a:	ed94 7a02 	vldr	s14, [r4, #8]
 800319e:	ed57 6a02 	vldr	s13, [r7, #-8]
 80031a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80031a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031aa:	ece5 7a01 	vstmia	r5!, {s15}
 80031ae:	4565      	cmp	r5, ip
 80031b0:	4614      	mov	r4, r2
 80031b2:	d00a      	beq.n	80031ca <arm_conv_f32+0x34e>
 80031b4:	4622      	mov	r2, r4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1dc      	bne.n	8003174 <arm_conv_f32+0x2f8>
 80031ba:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8003170 <arm_conv_f32+0x2f4>
 80031be:	ece5 7a01 	vstmia	r5!, {s15}
 80031c2:	1d22      	adds	r2, r4, #4
 80031c4:	4565      	cmp	r5, ip
 80031c6:	4614      	mov	r4, r2
 80031c8:	d1f4      	bne.n	80031b4 <arm_conv_f32+0x338>
 80031ca:	4430      	add	r0, r6
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d059      	beq.n	8003284 <arm_conv_f32+0x408>
 80031d0:	088d      	lsrs	r5, r1, #2
 80031d2:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8003170 <arm_conv_f32+0x2f4>
 80031d6:	d058      	beq.n	800328a <arm_conv_f32+0x40e>
 80031d8:	f100 0210 	add.w	r2, r0, #16
 80031dc:	f1a7 0310 	sub.w	r3, r7, #16
 80031e0:	462c      	mov	r4, r5
 80031e2:	ed52 6a04 	vldr	s13, [r2, #-16]
 80031e6:	edd3 3a04 	vldr	s7, [r3, #16]
 80031ea:	ed12 7a03 	vldr	s14, [r2, #-12]
 80031ee:	ed93 4a03 	vldr	s8, [r3, #12]
 80031f2:	ed52 7a02 	vldr	s15, [r2, #-8]
 80031f6:	edd3 4a02 	vldr	s9, [r3, #8]
 80031fa:	ed12 6a01 	vldr	s12, [r2, #-4]
 80031fe:	ed93 5a01 	vldr	s10, [r3, #4]
 8003202:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8003206:	ee27 7a04 	vmul.f32	s14, s14, s8
 800320a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800320e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8003212:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003216:	ee66 6a05 	vmul.f32	s13, s12, s10
 800321a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800321e:	3c01      	subs	r4, #1
 8003220:	f102 0210 	add.w	r2, r2, #16
 8003224:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8003228:	f1a3 0310 	sub.w	r3, r3, #16
 800322c:	d1d9      	bne.n	80031e2 <arm_conv_f32+0x366>
 800322e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8003232:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8003236:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800323a:	f011 0203 	ands.w	r2, r1, #3
 800323e:	d01b      	beq.n	8003278 <arm_conv_f32+0x3fc>
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	ed95 7a00 	vldr	s14, [r5]
 8003248:	ee67 7a87 	vmul.f32	s15, s15, s14
 800324c:	3a01      	subs	r2, #1
 800324e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003252:	d011      	beq.n	8003278 <arm_conv_f32+0x3fc>
 8003254:	ed53 7a01 	vldr	s15, [r3, #-4]
 8003258:	ed95 7a01 	vldr	s14, [r5, #4]
 800325c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003260:	2a01      	cmp	r2, #1
 8003262:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003266:	d007      	beq.n	8003278 <arm_conv_f32+0x3fc>
 8003268:	edd5 7a02 	vldr	s15, [r5, #8]
 800326c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8003270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003274:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8003278:	3901      	subs	r1, #1
 800327a:	ecec 5a01 	vstmia	ip!, {s11}
 800327e:	f100 0004 	add.w	r0, r0, #4
 8003282:	d1a5      	bne.n	80031d0 <arm_conv_f32+0x354>
 8003284:	b00b      	add	sp, #44	; 0x2c
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	463b      	mov	r3, r7
 800328c:	4605      	mov	r5, r0
 800328e:	e7d4      	b.n	800323a <arm_conv_f32+0x3be>
 8003290:	9b02      	ldr	r3, [sp, #8]
 8003292:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	9302      	str	r3, [sp, #8]
 800329a:	9b03      	ldr	r3, [sp, #12]
 800329c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 80032a0:	4403      	add	r3, r0
 80032a2:	465d      	mov	r5, fp
 80032a4:	469e      	mov	lr, r3
 80032a6:	9b01      	ldr	r3, [sp, #4]
 80032a8:	f013 0c03 	ands.w	ip, r3, #3
 80032ac:	d075      	beq.n	800339a <arm_conv_f32+0x51e>
 80032ae:	9b02      	ldr	r3, [sp, #8]
 80032b0:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 80032b4:	f004 0403 	and.w	r4, r4, #3
 80032b8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80032bc:	f103 0801 	add.w	r8, r3, #1
 80032c0:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80032c4:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80032c8:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80032cc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80032d0:	f1a7 0210 	sub.w	r2, r7, #16
 80032d4:	4618      	mov	r0, r3
 80032d6:	465b      	mov	r3, fp
 80032d8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80032dc:	468b      	mov	fp, r1
 80032de:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80032e2:	4621      	mov	r1, r4
 80032e4:	4617      	mov	r7, r2
 80032e6:	461c      	mov	r4, r3
 80032e8:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8003170 <arm_conv_f32+0x2f4>
 80032ec:	f10e 0210 	add.w	r2, lr, #16
 80032f0:	463b      	mov	r3, r7
 80032f2:	4656      	mov	r6, sl
 80032f4:	ed12 7a04 	vldr	s14, [r2, #-16]
 80032f8:	edd3 3a04 	vldr	s7, [r3, #16]
 80032fc:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003300:	ed93 4a03 	vldr	s8, [r3, #12]
 8003304:	ed52 6a02 	vldr	s13, [r2, #-8]
 8003308:	edd3 4a02 	vldr	s9, [r3, #8]
 800330c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8003310:	ed93 5a01 	vldr	s10, [r3, #4]
 8003314:	ee27 7a23 	vmul.f32	s14, s14, s7
 8003318:	ee26 6a04 	vmul.f32	s12, s12, s8
 800331c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003320:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8003324:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003328:	ee65 6a85 	vmul.f32	s13, s11, s10
 800332c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003330:	3e01      	subs	r6, #1
 8003332:	f102 0210 	add.w	r2, r2, #16
 8003336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333a:	f1a3 0310 	sub.w	r3, r3, #16
 800333e:	d1d9      	bne.n	80032f4 <arm_conv_f32+0x478>
 8003340:	4486      	add	lr, r0
 8003342:	b1d1      	cbz	r1, 800337a <arm_conv_f32+0x4fe>
 8003344:	ed99 7a00 	vldr	s14, [r9]
 8003348:	edde 6a00 	vldr	s13, [lr]
 800334c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003350:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003354:	b18c      	cbz	r4, 800337a <arm_conv_f32+0x4fe>
 8003356:	ed19 7a01 	vldr	s14, [r9, #-4]
 800335a:	edde 6a01 	vldr	s13, [lr, #4]
 800335e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003362:	2c01      	cmp	r4, #1
 8003364:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003368:	d007      	beq.n	800337a <arm_conv_f32+0x4fe>
 800336a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800336e:	ed59 6a02 	vldr	s13, [r9, #-8]
 8003372:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800337a:	ece5 7a01 	vstmia	r5!, {s15}
 800337e:	4565      	cmp	r5, ip
 8003380:	46c6      	mov	lr, r8
 8003382:	f108 0804 	add.w	r8, r8, #4
 8003386:	d1af      	bne.n	80032e8 <arm_conv_f32+0x46c>
 8003388:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800338c:	4659      	mov	r1, fp
 800338e:	9b01      	ldr	r3, [sp, #4]
 8003390:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003394:	e71c      	b.n	80031d0 <arm_conv_f32+0x354>
 8003396:	4686      	mov	lr, r0
 8003398:	e785      	b.n	80032a6 <arm_conv_f32+0x42a>
 800339a:	46ac      	mov	ip, r5
 800339c:	e7f7      	b.n	800338e <arm_conv_f32+0x512>
 800339e:	9a01      	ldr	r2, [sp, #4]
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	f47f aedd 	bne.w	8003160 <arm_conv_f32+0x2e4>
 80033a6:	e76d      	b.n	8003284 <arm_conv_f32+0x408>
 80033a8:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8003170 <arm_conv_f32+0x2f4>
 80033ac:	4680      	mov	r8, r0
 80033ae:	e5e3      	b.n	8002f78 <arm_conv_f32+0xfc>

080033b0 <arm_sub_f32>:
 80033b0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80033b4:	b4f0      	push	{r4, r5, r6, r7}
 80033b6:	d033      	beq.n	8003420 <arm_sub_f32+0x70>
 80033b8:	f100 0610 	add.w	r6, r0, #16
 80033bc:	f101 0510 	add.w	r5, r1, #16
 80033c0:	f102 0410 	add.w	r4, r2, #16
 80033c4:	4667      	mov	r7, ip
 80033c6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80033ca:	ed56 7a04 	vldr	s15, [r6, #-16]
 80033ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033d2:	3f01      	subs	r7, #1
 80033d4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80033d8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80033dc:	ed56 7a03 	vldr	s15, [r6, #-12]
 80033e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033e4:	f106 0610 	add.w	r6, r6, #16
 80033e8:	ed44 7a03 	vstr	s15, [r4, #-12]
 80033ec:	ed15 7a02 	vldr	s14, [r5, #-8]
 80033f0:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80033f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033f8:	f105 0510 	add.w	r5, r5, #16
 80033fc:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003400:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8003404:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003408:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800340c:	f104 0410 	add.w	r4, r4, #16
 8003410:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8003414:	d1d7      	bne.n	80033c6 <arm_sub_f32+0x16>
 8003416:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800341a:	4420      	add	r0, r4
 800341c:	4421      	add	r1, r4
 800341e:	4422      	add	r2, r4
 8003420:	f013 0303 	ands.w	r3, r3, #3
 8003424:	d01b      	beq.n	800345e <arm_sub_f32+0xae>
 8003426:	edd0 7a00 	vldr	s15, [r0]
 800342a:	ed91 7a00 	vldr	s14, [r1]
 800342e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003432:	3b01      	subs	r3, #1
 8003434:	edc2 7a00 	vstr	s15, [r2]
 8003438:	d011      	beq.n	800345e <arm_sub_f32+0xae>
 800343a:	edd0 7a01 	vldr	s15, [r0, #4]
 800343e:	ed91 7a01 	vldr	s14, [r1, #4]
 8003442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003446:	2b01      	cmp	r3, #1
 8003448:	edc2 7a01 	vstr	s15, [r2, #4]
 800344c:	d007      	beq.n	800345e <arm_sub_f32+0xae>
 800344e:	edd0 7a02 	vldr	s15, [r0, #8]
 8003452:	ed91 7a02 	vldr	s14, [r1, #8]
 8003456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800345a:	edc2 7a02 	vstr	s15, [r2, #8]
 800345e:	bcf0      	pop	{r4, r5, r6, r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <arm_mult_f32>:
 8003464:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8003468:	b4f0      	push	{r4, r5, r6, r7}
 800346a:	d033      	beq.n	80034d4 <arm_mult_f32+0x70>
 800346c:	f100 0610 	add.w	r6, r0, #16
 8003470:	f101 0510 	add.w	r5, r1, #16
 8003474:	f102 0410 	add.w	r4, r2, #16
 8003478:	4667      	mov	r7, ip
 800347a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800347e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003486:	3f01      	subs	r7, #1
 8003488:	ed44 7a04 	vstr	s15, [r4, #-16]
 800348c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003490:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003498:	f106 0610 	add.w	r6, r6, #16
 800349c:	ed44 7a03 	vstr	s15, [r4, #-12]
 80034a0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80034a4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80034a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034ac:	f105 0510 	add.w	r5, r5, #16
 80034b0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80034b4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80034b8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80034bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c0:	f104 0410 	add.w	r4, r4, #16
 80034c4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80034c8:	d1d7      	bne.n	800347a <arm_mult_f32+0x16>
 80034ca:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80034ce:	4420      	add	r0, r4
 80034d0:	4421      	add	r1, r4
 80034d2:	4422      	add	r2, r4
 80034d4:	f013 0303 	ands.w	r3, r3, #3
 80034d8:	d01b      	beq.n	8003512 <arm_mult_f32+0xae>
 80034da:	edd1 7a00 	vldr	s15, [r1]
 80034de:	ed90 7a00 	vldr	s14, [r0]
 80034e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034e6:	3b01      	subs	r3, #1
 80034e8:	edc2 7a00 	vstr	s15, [r2]
 80034ec:	d011      	beq.n	8003512 <arm_mult_f32+0xae>
 80034ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80034f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80034f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	edc2 7a01 	vstr	s15, [r2, #4]
 8003500:	d007      	beq.n	8003512 <arm_mult_f32+0xae>
 8003502:	edd0 7a02 	vldr	s15, [r0, #8]
 8003506:	ed91 7a02 	vldr	s14, [r1, #8]
 800350a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350e:	edc2 7a02 	vstr	s15, [r2, #8]
 8003512:	bcf0      	pop	{r4, r5, r6, r7}
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop

08003518 <arm_add_f32>:
 8003518:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800351c:	b4f0      	push	{r4, r5, r6, r7}
 800351e:	d033      	beq.n	8003588 <arm_add_f32+0x70>
 8003520:	f100 0610 	add.w	r6, r0, #16
 8003524:	f101 0510 	add.w	r5, r1, #16
 8003528:	f102 0410 	add.w	r4, r2, #16
 800352c:	4667      	mov	r7, ip
 800352e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8003532:	ed56 7a04 	vldr	s15, [r6, #-16]
 8003536:	ee77 7a87 	vadd.f32	s15, s15, s14
 800353a:	3f01      	subs	r7, #1
 800353c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8003540:	ed15 7a03 	vldr	s14, [r5, #-12]
 8003544:	ed56 7a03 	vldr	s15, [r6, #-12]
 8003548:	ee77 7a87 	vadd.f32	s15, s15, s14
 800354c:	f106 0610 	add.w	r6, r6, #16
 8003550:	ed44 7a03 	vstr	s15, [r4, #-12]
 8003554:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003558:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800355c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003560:	f105 0510 	add.w	r5, r5, #16
 8003564:	ed44 7a02 	vstr	s15, [r4, #-8]
 8003568:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800356c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8003570:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003574:	f104 0410 	add.w	r4, r4, #16
 8003578:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800357c:	d1d7      	bne.n	800352e <arm_add_f32+0x16>
 800357e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8003582:	4420      	add	r0, r4
 8003584:	4421      	add	r1, r4
 8003586:	4422      	add	r2, r4
 8003588:	f013 0303 	ands.w	r3, r3, #3
 800358c:	d01b      	beq.n	80035c6 <arm_add_f32+0xae>
 800358e:	edd1 7a00 	vldr	s15, [r1]
 8003592:	ed90 7a00 	vldr	s14, [r0]
 8003596:	ee77 7a87 	vadd.f32	s15, s15, s14
 800359a:	3b01      	subs	r3, #1
 800359c:	edc2 7a00 	vstr	s15, [r2]
 80035a0:	d011      	beq.n	80035c6 <arm_add_f32+0xae>
 80035a2:	edd0 7a01 	vldr	s15, [r0, #4]
 80035a6:	ed91 7a01 	vldr	s14, [r1, #4]
 80035aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	edc2 7a01 	vstr	s15, [r2, #4]
 80035b4:	d007      	beq.n	80035c6 <arm_add_f32+0xae>
 80035b6:	edd0 7a02 	vldr	s15, [r0, #8]
 80035ba:	ed91 7a02 	vldr	s14, [r1, #8]
 80035be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035c2:	edc2 7a02 	vstr	s15, [r2, #8]
 80035c6:	bcf0      	pop	{r4, r5, r6, r7}
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop

080035cc <__errno>:
 80035cc:	4b01      	ldr	r3, [pc, #4]	; (80035d4 <__errno+0x8>)
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	2000000c 	.word	0x2000000c

080035d8 <__libc_init_array>:
 80035d8:	b570      	push	{r4, r5, r6, lr}
 80035da:	4d0d      	ldr	r5, [pc, #52]	; (8003610 <__libc_init_array+0x38>)
 80035dc:	4c0d      	ldr	r4, [pc, #52]	; (8003614 <__libc_init_array+0x3c>)
 80035de:	1b64      	subs	r4, r4, r5
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	2600      	movs	r6, #0
 80035e4:	42a6      	cmp	r6, r4
 80035e6:	d109      	bne.n	80035fc <__libc_init_array+0x24>
 80035e8:	4d0b      	ldr	r5, [pc, #44]	; (8003618 <__libc_init_array+0x40>)
 80035ea:	4c0c      	ldr	r4, [pc, #48]	; (800361c <__libc_init_array+0x44>)
 80035ec:	f000 f92e 	bl	800384c <_init>
 80035f0:	1b64      	subs	r4, r4, r5
 80035f2:	10a4      	asrs	r4, r4, #2
 80035f4:	2600      	movs	r6, #0
 80035f6:	42a6      	cmp	r6, r4
 80035f8:	d105      	bne.n	8003606 <__libc_init_array+0x2e>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003600:	4798      	blx	r3
 8003602:	3601      	adds	r6, #1
 8003604:	e7ee      	b.n	80035e4 <__libc_init_array+0xc>
 8003606:	f855 3b04 	ldr.w	r3, [r5], #4
 800360a:	4798      	blx	r3
 800360c:	3601      	adds	r6, #1
 800360e:	e7f2      	b.n	80035f6 <__libc_init_array+0x1e>
 8003610:	08004218 	.word	0x08004218
 8003614:	08004218 	.word	0x08004218
 8003618:	08004218 	.word	0x08004218
 800361c:	0800421c 	.word	0x0800421c

08003620 <memcpy>:
 8003620:	440a      	add	r2, r1
 8003622:	4291      	cmp	r1, r2
 8003624:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003628:	d100      	bne.n	800362c <memcpy+0xc>
 800362a:	4770      	bx	lr
 800362c:	b510      	push	{r4, lr}
 800362e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003636:	4291      	cmp	r1, r2
 8003638:	d1f9      	bne.n	800362e <memcpy+0xe>
 800363a:	bd10      	pop	{r4, pc}

0800363c <memset>:
 800363c:	4402      	add	r2, r0
 800363e:	4603      	mov	r3, r0
 8003640:	4293      	cmp	r3, r2
 8003642:	d100      	bne.n	8003646 <memset+0xa>
 8003644:	4770      	bx	lr
 8003646:	f803 1b01 	strb.w	r1, [r3], #1
 800364a:	e7f9      	b.n	8003640 <memset+0x4>

0800364c <sqrt>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	ed2d 8b02 	vpush	{d8}
 8003652:	ec55 4b10 	vmov	r4, r5, d0
 8003656:	f000 f843 	bl	80036e0 <__ieee754_sqrt>
 800365a:	4622      	mov	r2, r4
 800365c:	462b      	mov	r3, r5
 800365e:	4620      	mov	r0, r4
 8003660:	4629      	mov	r1, r5
 8003662:	eeb0 8a40 	vmov.f32	s16, s0
 8003666:	eef0 8a60 	vmov.f32	s17, s1
 800366a:	f7fd fa45 	bl	8000af8 <__aeabi_dcmpun>
 800366e:	b990      	cbnz	r0, 8003696 <sqrt+0x4a>
 8003670:	2200      	movs	r2, #0
 8003672:	2300      	movs	r3, #0
 8003674:	4620      	mov	r0, r4
 8003676:	4629      	mov	r1, r5
 8003678:	f7fd fa16 	bl	8000aa8 <__aeabi_dcmplt>
 800367c:	b158      	cbz	r0, 8003696 <sqrt+0x4a>
 800367e:	f7ff ffa5 	bl	80035cc <__errno>
 8003682:	2321      	movs	r3, #33	; 0x21
 8003684:	6003      	str	r3, [r0, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	2300      	movs	r3, #0
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	f7fd f8c3 	bl	8000818 <__aeabi_ddiv>
 8003692:	ec41 0b18 	vmov	d8, r0, r1
 8003696:	eeb0 0a48 	vmov.f32	s0, s16
 800369a:	eef0 0a68 	vmov.f32	s1, s17
 800369e:	ecbd 8b02 	vpop	{d8}
 80036a2:	bd38      	pop	{r3, r4, r5, pc}

080036a4 <sqrtf>:
 80036a4:	b508      	push	{r3, lr}
 80036a6:	ed2d 8b02 	vpush	{d8}
 80036aa:	eeb0 8a40 	vmov.f32	s16, s0
 80036ae:	f000 f8c9 	bl	8003844 <__ieee754_sqrtf>
 80036b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	d60c      	bvs.n	80036d6 <sqrtf+0x32>
 80036bc:	eddf 8a07 	vldr	s17, [pc, #28]	; 80036dc <sqrtf+0x38>
 80036c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80036c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c8:	d505      	bpl.n	80036d6 <sqrtf+0x32>
 80036ca:	f7ff ff7f 	bl	80035cc <__errno>
 80036ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80036d2:	2321      	movs	r3, #33	; 0x21
 80036d4:	6003      	str	r3, [r0, #0]
 80036d6:	ecbd 8b02 	vpop	{d8}
 80036da:	bd08      	pop	{r3, pc}
 80036dc:	00000000 	.word	0x00000000

080036e0 <__ieee754_sqrt>:
 80036e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e4:	ec55 4b10 	vmov	r4, r5, d0
 80036e8:	4e55      	ldr	r6, [pc, #340]	; (8003840 <__ieee754_sqrt+0x160>)
 80036ea:	43ae      	bics	r6, r5
 80036ec:	ee10 0a10 	vmov	r0, s0
 80036f0:	ee10 3a10 	vmov	r3, s0
 80036f4:	462a      	mov	r2, r5
 80036f6:	4629      	mov	r1, r5
 80036f8:	d110      	bne.n	800371c <__ieee754_sqrt+0x3c>
 80036fa:	ee10 2a10 	vmov	r2, s0
 80036fe:	462b      	mov	r3, r5
 8003700:	f7fc ff60 	bl	80005c4 <__aeabi_dmul>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4620      	mov	r0, r4
 800370a:	4629      	mov	r1, r5
 800370c:	f7fc fda4 	bl	8000258 <__adddf3>
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
 8003714:	ec45 4b10 	vmov	d0, r4, r5
 8003718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371c:	2d00      	cmp	r5, #0
 800371e:	dc10      	bgt.n	8003742 <__ieee754_sqrt+0x62>
 8003720:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003724:	4330      	orrs	r0, r6
 8003726:	d0f5      	beq.n	8003714 <__ieee754_sqrt+0x34>
 8003728:	b15d      	cbz	r5, 8003742 <__ieee754_sqrt+0x62>
 800372a:	ee10 2a10 	vmov	r2, s0
 800372e:	462b      	mov	r3, r5
 8003730:	ee10 0a10 	vmov	r0, s0
 8003734:	f7fc fd8e 	bl	8000254 <__aeabi_dsub>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	f7fd f86c 	bl	8000818 <__aeabi_ddiv>
 8003740:	e7e6      	b.n	8003710 <__ieee754_sqrt+0x30>
 8003742:	1512      	asrs	r2, r2, #20
 8003744:	d074      	beq.n	8003830 <__ieee754_sqrt+0x150>
 8003746:	07d4      	lsls	r4, r2, #31
 8003748:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800374c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8003750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003754:	bf5e      	ittt	pl
 8003756:	0fda      	lsrpl	r2, r3, #31
 8003758:	005b      	lslpl	r3, r3, #1
 800375a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800375e:	2400      	movs	r4, #0
 8003760:	0fda      	lsrs	r2, r3, #31
 8003762:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003766:	107f      	asrs	r7, r7, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	2516      	movs	r5, #22
 800376c:	4620      	mov	r0, r4
 800376e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003772:	1886      	adds	r6, r0, r2
 8003774:	428e      	cmp	r6, r1
 8003776:	bfde      	ittt	le
 8003778:	1b89      	suble	r1, r1, r6
 800377a:	18b0      	addle	r0, r6, r2
 800377c:	18a4      	addle	r4, r4, r2
 800377e:	0049      	lsls	r1, r1, #1
 8003780:	3d01      	subs	r5, #1
 8003782:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003786:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800378a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800378e:	d1f0      	bne.n	8003772 <__ieee754_sqrt+0x92>
 8003790:	462a      	mov	r2, r5
 8003792:	f04f 0e20 	mov.w	lr, #32
 8003796:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800379a:	4281      	cmp	r1, r0
 800379c:	eb06 0c05 	add.w	ip, r6, r5
 80037a0:	dc02      	bgt.n	80037a8 <__ieee754_sqrt+0xc8>
 80037a2:	d113      	bne.n	80037cc <__ieee754_sqrt+0xec>
 80037a4:	459c      	cmp	ip, r3
 80037a6:	d811      	bhi.n	80037cc <__ieee754_sqrt+0xec>
 80037a8:	f1bc 0f00 	cmp.w	ip, #0
 80037ac:	eb0c 0506 	add.w	r5, ip, r6
 80037b0:	da43      	bge.n	800383a <__ieee754_sqrt+0x15a>
 80037b2:	2d00      	cmp	r5, #0
 80037b4:	db41      	blt.n	800383a <__ieee754_sqrt+0x15a>
 80037b6:	f100 0801 	add.w	r8, r0, #1
 80037ba:	1a09      	subs	r1, r1, r0
 80037bc:	459c      	cmp	ip, r3
 80037be:	bf88      	it	hi
 80037c0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80037c4:	eba3 030c 	sub.w	r3, r3, ip
 80037c8:	4432      	add	r2, r6
 80037ca:	4640      	mov	r0, r8
 80037cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80037d0:	f1be 0e01 	subs.w	lr, lr, #1
 80037d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80037d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80037dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80037e0:	d1db      	bne.n	800379a <__ieee754_sqrt+0xba>
 80037e2:	430b      	orrs	r3, r1
 80037e4:	d006      	beq.n	80037f4 <__ieee754_sqrt+0x114>
 80037e6:	1c50      	adds	r0, r2, #1
 80037e8:	bf13      	iteet	ne
 80037ea:	3201      	addne	r2, #1
 80037ec:	3401      	addeq	r4, #1
 80037ee:	4672      	moveq	r2, lr
 80037f0:	f022 0201 	bicne.w	r2, r2, #1
 80037f4:	1063      	asrs	r3, r4, #1
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	07e1      	lsls	r1, r4, #31
 80037fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80037fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003802:	bf48      	it	mi
 8003804:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003808:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800380c:	4614      	mov	r4, r2
 800380e:	e781      	b.n	8003714 <__ieee754_sqrt+0x34>
 8003810:	0ad9      	lsrs	r1, r3, #11
 8003812:	3815      	subs	r0, #21
 8003814:	055b      	lsls	r3, r3, #21
 8003816:	2900      	cmp	r1, #0
 8003818:	d0fa      	beq.n	8003810 <__ieee754_sqrt+0x130>
 800381a:	02cd      	lsls	r5, r1, #11
 800381c:	d50a      	bpl.n	8003834 <__ieee754_sqrt+0x154>
 800381e:	f1c2 0420 	rsb	r4, r2, #32
 8003822:	fa23 f404 	lsr.w	r4, r3, r4
 8003826:	1e55      	subs	r5, r2, #1
 8003828:	4093      	lsls	r3, r2
 800382a:	4321      	orrs	r1, r4
 800382c:	1b42      	subs	r2, r0, r5
 800382e:	e78a      	b.n	8003746 <__ieee754_sqrt+0x66>
 8003830:	4610      	mov	r0, r2
 8003832:	e7f0      	b.n	8003816 <__ieee754_sqrt+0x136>
 8003834:	0049      	lsls	r1, r1, #1
 8003836:	3201      	adds	r2, #1
 8003838:	e7ef      	b.n	800381a <__ieee754_sqrt+0x13a>
 800383a:	4680      	mov	r8, r0
 800383c:	e7bd      	b.n	80037ba <__ieee754_sqrt+0xda>
 800383e:	bf00      	nop
 8003840:	7ff00000 	.word	0x7ff00000

08003844 <__ieee754_sqrtf>:
 8003844:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003848:	4770      	bx	lr
	...

0800384c <_init>:
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384e:	bf00      	nop
 8003850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003852:	bc08      	pop	{r3}
 8003854:	469e      	mov	lr, r3
 8003856:	4770      	bx	lr

08003858 <_fini>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr
