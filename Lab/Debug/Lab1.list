
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000230c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002580  08002580  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002580  08002580  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002580  08002580  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000070  080025f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080025f8  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000824c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019e2  00000000  00000000  000282ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000638  00000000  00000000  00029cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  0002a308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028de8  00000000  00000000  0002a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007522  00000000  00000000  00053648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf28  00000000  00000000  0005ab6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00155a92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001630  00000000  00000000  00155b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002ff5  00000000  00000000  00157188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080024b0 	.word	0x080024b0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	080024b0 	.word	0x080024b0

080001fc <kalman>:
Return int 0 if everything works, 1 if there is error
FPSCR bits [0,3] cleared at start of function to check for undesired arithmetic conditions
*/
kalman:
	// Push and pop non-scratch registers to prevent clobbering (I think that's the term)
	VPUSH {S1-S6} // S6 will be used for computation, the rest will be to store variables from kalman_state structure
 80001fc:	ed6d 0a06 	vpush	{s1-s6}

	// Load single precision floating point registers with variables from structure
	VLDM.F32 R0, {S1-S5}
 8000200:	ecd0 0a05 	vldmia	r0, {s1-s5}
	p: S4 estimation error covariance
	k: S5 kalman gain
	*/

	// Clear FPSCR exception bits that we will be checking later
	VMRS R1, FPSCR	// R1 has FPSCR contents
 8000204:	eef1 1a10 	vmrs	r1, fpscr
	MOV R2, #0b1111	// R2 has bits to clear (overflow, underflow, division by zero, invalid operation)
 8000208:	220f      	movs	r2, #15
	BIC R1, R1, R2	// Clear bits indicated by R2
 800020a:	4391      	bics	r1, r2
	VMSR FPSCR, R1	// Write to FPSCR with cleared bits
 800020c:	eee1 1a10 	vmsr	fpscr, r1


	// Start Kalman algorithm: *****************************************
	// p = p + q -- potential overflow
	VADD.F32 S4, S4, S1
 8000210:	ee32 2a20 	vadd.f32	s4, s4, s1
	// k = p/(p + r)-- potential overflow and div by 0
	VADD.F32 S5, S4, S2
 8000214:	ee72 2a01 	vadd.f32	s5, s4, s2
	VDIV.F32 S5, S4, S5
 8000218:	eec2 2a22 	vdiv.f32	s5, s4, s5
	// x = x + k*(measurement - x) -- potential overflow and underflow
	VSUB.F32 S6, S0, S3
 800021c:	ee30 3a61 	vsub.f32	s6, s0, s3
	VMLA.F32 S3, S5, S6
 8000220:	ee42 1a83 	vmla.f32	s3, s5, s6
	// p = (1 - k) * p -- potential overflow and underflow
	VMOV.F32 S6, #1.0
 8000224:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
	VSUB.F32 S6, S6, S5
 8000228:	ee33 3a62 	vsub.f32	s6, s6, s5
	VMUL.F32 S4, S4, S6
 800022c:	ee22 2a03 	vmul.f32	s4, s4, s6
	// End Kalman algorithm ********************************************

	MOV R3, #1 // let R4 store output for now, assume error
 8000230:	2301      	movs	r3, #1

	// Check for overflow, underflow, division by 0
	VMRS R1, FPSCR	// R1 has FPSCR contents
 8000232:	eef1 1a10 	vmrs	r1, fpscr
	//MOV R2, #0b1111	// R2 has bits we are checking (this is done on line 38 so no need execute)
	AND R1, R1, R2	// R1 has the 4 bits that were possibly triggered by the arithmetic operations
 8000236:	4011      	ands	r1, r2
	CMP R1, #0
 8000238:	2900      	cmp	r1, #0
	BNE no_store	// If 0, no flags so we continue and store. If not zero, skip over store
 800023a:	d102      	bne.n	8000242 <no_store>

	// Update structure values (store register values in memory)
	VSTM.F32 R0, {S1-S5}
 800023c:	ecc0 0a05 	vstmia	r0, {s1-s5}
	MOV R3, #0	// only here if no errors, so return value should be 0
 8000240:	2300      	movs	r3, #0

08000242 <no_store>:
	no_store:

	MOV R0, R3 	// set output, will be 1 here if we skipped store (in case of error) and 0 if no error
 8000242:	1c18      	adds	r0, r3, #0

	// Restore non-scratch registers then leave function
	VPOP {S1-S6}
 8000244:	ecfd 0a06 	vpop	{s1-s6}
	BX LR
 8000248:	4770      	bx	lr

0800024a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000254:	2003      	movs	r0, #3
 8000256:	f000 f91f 	bl	8000498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f80e 	bl	800027c <HAL_InitTick>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d002      	beq.n	800026c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000266:	2301      	movs	r3, #1
 8000268:	71fb      	strb	r3, [r7, #7]
 800026a:	e001      	b.n	8000270 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800026c:	f001 f9c2 	bl	80015f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000270:	79fb      	ldrb	r3, [r7, #7]
}
 8000272:	4618      	mov	r0, r3
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000284:	2300      	movs	r3, #0
 8000286:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <HAL_InitTick+0x6c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d023      	beq.n	80002d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000290:	4b16      	ldr	r3, [pc, #88]	; (80002ec <HAL_InitTick+0x70>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <HAL_InitTick+0x6c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4619      	mov	r1, r3
 800029a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029e:	fbb3 f3f1 	udiv	r3, r3, r1
 80002a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f91d 	bl	80004e6 <HAL_SYSTICK_Config>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d10f      	bne.n	80002d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b0f      	cmp	r3, #15
 80002b6:	d809      	bhi.n	80002cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002b8:	2200      	movs	r2, #0
 80002ba:	6879      	ldr	r1, [r7, #4]
 80002bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80002c0:	f000 f8f5 	bl	80004ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002c4:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <HAL_InitTick+0x74>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e007      	b.n	80002dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80002cc:	2301      	movs	r3, #1
 80002ce:	73fb      	strb	r3, [r7, #15]
 80002d0:	e004      	b.n	80002dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80002d2:	2301      	movs	r3, #1
 80002d4:	73fb      	strb	r3, [r7, #15]
 80002d6:	e001      	b.n	80002dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002d8:	2301      	movs	r3, #1
 80002da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000004 	.word	0x20000004
 80002ec:	20000008 	.word	0x20000008
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_IncTick+0x20>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <HAL_IncTick+0x24>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4413      	add	r3, r2
 8000304:	4a04      	ldr	r2, [pc, #16]	; (8000318 <HAL_IncTick+0x24>)
 8000306:	6013      	str	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000004 	.word	0x20000004
 8000318:	2000008c 	.word	0x2000008c

0800031c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  return uwTick;
 8000320:	4b03      	ldr	r3, [pc, #12]	; (8000330 <HAL_GetTick+0x14>)
 8000322:	681b      	ldr	r3, [r3, #0]
}
 8000324:	4618      	mov	r0, r3
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	2000008c 	.word	0x2000008c

08000334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	f003 0307 	and.w	r3, r3, #7
 8000342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000344:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <__NVIC_SetPriorityGrouping+0x44>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800034a:	68ba      	ldr	r2, [r7, #8]
 800034c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000350:	4013      	ands	r3, r2
 8000352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800035c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000366:	4a04      	ldr	r2, [pc, #16]	; (8000378 <__NVIC_SetPriorityGrouping+0x44>)
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	60d3      	str	r3, [r2, #12]
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <__NVIC_GetPriorityGrouping+0x18>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	0a1b      	lsrs	r3, r3, #8
 8000386:	f003 0307 	and.w	r3, r3, #7
}
 800038a:	4618      	mov	r0, r3
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db0a      	blt.n	80003c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	490c      	ldr	r1, [pc, #48]	; (80003e4 <__NVIC_SetPriority+0x4c>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c0:	e00a      	b.n	80003d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <__NVIC_SetPriority+0x50>)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 030f 	and.w	r3, r3, #15
 80003ce:	3b04      	subs	r3, #4
 80003d0:	0112      	lsls	r2, r2, #4
 80003d2:	b2d2      	uxtb	r2, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	761a      	strb	r2, [r3, #24]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	f1c3 0307 	rsb	r3, r3, #7
 8000406:	2b04      	cmp	r3, #4
 8000408:	bf28      	it	cs
 800040a:	2304      	movcs	r3, #4
 800040c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3304      	adds	r3, #4
 8000412:	2b06      	cmp	r3, #6
 8000414:	d902      	bls.n	800041c <NVIC_EncodePriority+0x30>
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3b03      	subs	r3, #3
 800041a:	e000      	b.n	800041e <NVIC_EncodePriority+0x32>
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	43da      	mvns	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	401a      	ands	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43d9      	mvns	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000444:	4313      	orrs	r3, r2
         );
}
 8000446:	4618      	mov	r0, r3
 8000448:	3724      	adds	r7, #36	; 0x24
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	210f      	movs	r1, #15
 8000474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000478:	f7ff ff8e 	bl	8000398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ff47 	bl	8000334 <__NVIC_SetPriorityGrouping>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004c0:	f7ff ff5c 	bl	800037c <__NVIC_GetPriorityGrouping>
 80004c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	68b9      	ldr	r1, [r7, #8]
 80004ca:	6978      	ldr	r0, [r7, #20]
 80004cc:	f7ff ff8e 	bl	80003ec <NVIC_EncodePriority>
 80004d0:	4602      	mov	r2, r0
 80004d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff5d 	bl	8000398 <__NVIC_SetPriority>
}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b082      	sub	sp, #8
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f7ff ffb0 	bl	8000454 <SysTick_Config>
 80004f4:	4603      	mov	r3, r0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800050c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000510:	d102      	bne.n	8000518 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000516:	e00b      	b.n	8000530 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <HAL_PWREx_GetVoltageRange+0x3c>)
 800051a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800051e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000526:	d102      	bne.n	800052e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800052c:	e000      	b.n	8000530 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800052e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	40007000 	.word	0x40007000

08000540 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d141      	bne.n	80005d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800054e:	4b4b      	ldr	r3, [pc, #300]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800055a:	d131      	bne.n	80005c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800055c:	4b47      	ldr	r3, [pc, #284]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800055e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000562:	4a46      	ldr	r2, [pc, #280]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000568:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	4b43      	ldr	r3, [pc, #268]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000574:	4a41      	ldr	r2, [pc, #260]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800057c:	4b40      	ldr	r3, [pc, #256]	; (8000680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2232      	movs	r2, #50	; 0x32
 8000582:	fb02 f303 	mul.w	r3, r2, r3
 8000586:	4a3f      	ldr	r2, [pc, #252]	; (8000684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000588:	fba2 2303 	umull	r2, r3, r2, r3
 800058c:	0c9b      	lsrs	r3, r3, #18
 800058e:	3301      	adds	r3, #1
 8000590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000592:	e002      	b.n	800059a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3b01      	subs	r3, #1
 8000598:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800059a:	4b38      	ldr	r3, [pc, #224]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005a6:	d102      	bne.n	80005ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1f2      	bne.n	8000594 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ba:	d158      	bne.n	800066e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80005bc:	2303      	movs	r3, #3
 80005be:	e057      	b.n	8000670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005c0:	4b2e      	ldr	r3, [pc, #184]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005c6:	4a2d      	ldr	r2, [pc, #180]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80005d0:	e04d      	b.n	800066e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005d8:	d141      	bne.n	800065e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005e6:	d131      	bne.n	800064c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005ee:	4a23      	ldr	r2, [pc, #140]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	4b20      	ldr	r3, [pc, #128]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000600:	4a1e      	ldr	r2, [pc, #120]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2232      	movs	r2, #50	; 0x32
 800060e:	fb02 f303 	mul.w	r3, r2, r3
 8000612:	4a1c      	ldr	r2, [pc, #112]	; (8000684 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000614:	fba2 2303 	umull	r2, r3, r2, r3
 8000618:	0c9b      	lsrs	r3, r3, #18
 800061a:	3301      	adds	r3, #1
 800061c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800061e:	e002      	b.n	8000626 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3b01      	subs	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800062e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000632:	d102      	bne.n	800063a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1f2      	bne.n	8000620 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000646:	d112      	bne.n	800066e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000648:	2303      	movs	r3, #3
 800064a:	e011      	b.n	8000670 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800064e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000652:	4a0a      	ldr	r2, [pc, #40]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800065c:	e007      	b.n	800066e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800065e:	4b07      	ldr	r3, [pc, #28]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000666:	4a05      	ldr	r2, [pc, #20]	; (800067c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000668:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	40007000 	.word	0x40007000
 8000680:	20000008 	.word	0x20000008
 8000684:	431bde83 	.word	0x431bde83

08000688 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d102      	bne.n	800069c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	f000 bc08 	b.w	8000eac <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800069c:	4b96      	ldr	r3, [pc, #600]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f003 030c 	and.w	r3, r3, #12
 80006a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80006a6:	4b94      	ldr	r3, [pc, #592]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f003 0303 	and.w	r3, r3, #3
 80006ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f000 80e4 	beq.w	8000886 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d007      	beq.n	80006d4 <HAL_RCC_OscConfig+0x4c>
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	2b0c      	cmp	r3, #12
 80006c8:	f040 808b 	bne.w	80007e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	f040 8087 	bne.w	80007e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80006d4:	4b88      	ldr	r3, [pc, #544]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 0302 	and.w	r3, r3, #2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d005      	beq.n	80006ec <HAL_RCC_OscConfig+0x64>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	e3df      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	4b81      	ldr	r3, [pc, #516]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d004      	beq.n	8000706 <HAL_RCC_OscConfig+0x7e>
 80006fc:	4b7e      	ldr	r3, [pc, #504]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000704:	e005      	b.n	8000712 <HAL_RCC_OscConfig+0x8a>
 8000706:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800070c:	091b      	lsrs	r3, r3, #4
 800070e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000712:	4293      	cmp	r3, r2
 8000714:	d223      	bcs.n	800075e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	4618      	mov	r0, r3
 800071c:	f000 fd94 	bl	8001248 <RCC_SetFlashLatencyFromMSIRange>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e3c0      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800072a:	4b73      	ldr	r3, [pc, #460]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a72      	ldr	r2, [pc, #456]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6013      	str	r3, [r2, #0]
 8000736:	4b70      	ldr	r3, [pc, #448]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	496d      	ldr	r1, [pc, #436]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000744:	4313      	orrs	r3, r2
 8000746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000748:	4b6b      	ldr	r3, [pc, #428]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800074a:	685b      	ldr	r3, [r3, #4]
 800074c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	021b      	lsls	r3, r3, #8
 8000756:	4968      	ldr	r1, [pc, #416]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000758:	4313      	orrs	r3, r2
 800075a:	604b      	str	r3, [r1, #4]
 800075c:	e025      	b.n	80007aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800075e:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6013      	str	r3, [r2, #0]
 800076a:	4b63      	ldr	r3, [pc, #396]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6a1b      	ldr	r3, [r3, #32]
 8000776:	4960      	ldr	r1, [pc, #384]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000778:	4313      	orrs	r3, r2
 800077a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800077c:	4b5e      	ldr	r3, [pc, #376]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	69db      	ldr	r3, [r3, #28]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	495b      	ldr	r1, [pc, #364]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800078c:	4313      	orrs	r3, r2
 800078e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d109      	bne.n	80007aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fd54 	bl	8001248 <RCC_SetFlashLatencyFromMSIRange>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e380      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80007aa:	f000 fcc1 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80007ae:	4602      	mov	r2, r0
 80007b0:	4b51      	ldr	r3, [pc, #324]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	091b      	lsrs	r3, r3, #4
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	4950      	ldr	r1, [pc, #320]	; (80008fc <HAL_RCC_OscConfig+0x274>)
 80007bc:	5ccb      	ldrb	r3, [r1, r3]
 80007be:	f003 031f 	and.w	r3, r3, #31
 80007c2:	fa22 f303 	lsr.w	r3, r2, r3
 80007c6:	4a4e      	ldr	r2, [pc, #312]	; (8000900 <HAL_RCC_OscConfig+0x278>)
 80007c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80007ca:	4b4e      	ldr	r3, [pc, #312]	; (8000904 <HAL_RCC_OscConfig+0x27c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fd54 	bl	800027c <HAL_InitTick>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d052      	beq.n	8000884 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	e364      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d032      	beq.n	8000850 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80007ea:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a42      	ldr	r2, [pc, #264]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80007f6:	f7ff fd91 	bl	800031c <HAL_GetTick>
 80007fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80007fc:	e008      	b.n	8000810 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80007fe:	f7ff fd8d 	bl	800031c <HAL_GetTick>
 8000802:	4602      	mov	r2, r0
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	2b02      	cmp	r3, #2
 800080a:	d901      	bls.n	8000810 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800080c:	2303      	movs	r3, #3
 800080e:	e34d      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000810:	4b39      	ldr	r3, [pc, #228]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f0      	beq.n	80007fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a35      	ldr	r2, [pc, #212]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000822:	f043 0308 	orr.w	r3, r3, #8
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6a1b      	ldr	r3, [r3, #32]
 8000834:	4930      	ldr	r1, [pc, #192]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000836:	4313      	orrs	r3, r2
 8000838:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800083a:	4b2f      	ldr	r3, [pc, #188]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	492b      	ldr	r1, [pc, #172]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 800084a:	4313      	orrs	r3, r2
 800084c:	604b      	str	r3, [r1, #4]
 800084e:	e01a      	b.n	8000886 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000850:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000856:	f023 0301 	bic.w	r3, r3, #1
 800085a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800085c:	f7ff fd5e 	bl	800031c <HAL_GetTick>
 8000860:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000862:	e008      	b.n	8000876 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000864:	f7ff fd5a 	bl	800031c <HAL_GetTick>
 8000868:	4602      	mov	r2, r0
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d901      	bls.n	8000876 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e31a      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f0      	bne.n	8000864 <HAL_RCC_OscConfig+0x1dc>
 8000882:	e000      	b.n	8000886 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000884:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	2b00      	cmp	r3, #0
 8000890:	d073      	beq.n	800097a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000892:	69bb      	ldr	r3, [r7, #24]
 8000894:	2b08      	cmp	r3, #8
 8000896:	d005      	beq.n	80008a4 <HAL_RCC_OscConfig+0x21c>
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	2b0c      	cmp	r3, #12
 800089c:	d10e      	bne.n	80008bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d10b      	bne.n	80008bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d063      	beq.n	8000978 <HAL_RCC_OscConfig+0x2f0>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d15f      	bne.n	8000978 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80008b8:	2301      	movs	r3, #1
 80008ba:	e2f7      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c4:	d106      	bne.n	80008d4 <HAL_RCC_OscConfig+0x24c>
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008d0:	6013      	str	r3, [r2, #0]
 80008d2:	e025      	b.n	8000920 <HAL_RCC_OscConfig+0x298>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008dc:	d114      	bne.n	8000908 <HAL_RCC_OscConfig+0x280>
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a05      	ldr	r2, [pc, #20]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e8:	6013      	str	r3, [r2, #0]
 80008ea:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a02      	ldr	r2, [pc, #8]	; (80008f8 <HAL_RCC_OscConfig+0x270>)
 80008f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	e013      	b.n	8000920 <HAL_RCC_OscConfig+0x298>
 80008f8:	40021000 	.word	0x40021000
 80008fc:	08002540 	.word	0x08002540
 8000900:	20000008 	.word	0x20000008
 8000904:	20000000 	.word	0x20000000
 8000908:	4ba0      	ldr	r3, [pc, #640]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a9f      	ldr	r2, [pc, #636]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 800090e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b9d      	ldr	r3, [pc, #628]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a9c      	ldr	r2, [pc, #624]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 800091a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800091e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d013      	beq.n	8000950 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000928:	f7ff fcf8 	bl	800031c <HAL_GetTick>
 800092c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800092e:	e008      	b.n	8000942 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000930:	f7ff fcf4 	bl	800031c <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b64      	cmp	r3, #100	; 0x64
 800093c:	d901      	bls.n	8000942 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800093e:	2303      	movs	r3, #3
 8000940:	e2b4      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000942:	4b92      	ldr	r3, [pc, #584]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f0      	beq.n	8000930 <HAL_RCC_OscConfig+0x2a8>
 800094e:	e014      	b.n	800097a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000950:	f7ff fce4 	bl	800031c <HAL_GetTick>
 8000954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000956:	e008      	b.n	800096a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000958:	f7ff fce0 	bl	800031c <HAL_GetTick>
 800095c:	4602      	mov	r2, r0
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b64      	cmp	r3, #100	; 0x64
 8000964:	d901      	bls.n	800096a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000966:	2303      	movs	r3, #3
 8000968:	e2a0      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800096a:	4b88      	ldr	r3, [pc, #544]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f0      	bne.n	8000958 <HAL_RCC_OscConfig+0x2d0>
 8000976:	e000      	b.n	800097a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	2b00      	cmp	r3, #0
 8000984:	d060      	beq.n	8000a48 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000986:	69bb      	ldr	r3, [r7, #24]
 8000988:	2b04      	cmp	r3, #4
 800098a:	d005      	beq.n	8000998 <HAL_RCC_OscConfig+0x310>
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	2b0c      	cmp	r3, #12
 8000990:	d119      	bne.n	80009c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	2b02      	cmp	r3, #2
 8000996:	d116      	bne.n	80009c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000998:	4b7c      	ldr	r3, [pc, #496]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <HAL_RCC_OscConfig+0x328>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e27d      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b0:	4b76      	ldr	r3, [pc, #472]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	061b      	lsls	r3, r3, #24
 80009be:	4973      	ldr	r1, [pc, #460]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 80009c0:	4313      	orrs	r3, r2
 80009c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80009c4:	e040      	b.n	8000a48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d023      	beq.n	8000a16 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009ce:	4b6f      	ldr	r3, [pc, #444]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a6e      	ldr	r2, [pc, #440]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 80009d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009da:	f7ff fc9f 	bl	800031c <HAL_GetTick>
 80009de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009e0:	e008      	b.n	80009f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fc9b 	bl	800031c <HAL_GetTick>
 80009e6:	4602      	mov	r2, r0
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d901      	bls.n	80009f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80009f0:	2303      	movs	r3, #3
 80009f2:	e25b      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80009f4:	4b65      	ldr	r3, [pc, #404]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f0      	beq.n	80009e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	061b      	lsls	r3, r3, #24
 8000a0e:	495f      	ldr	r1, [pc, #380]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a10:	4313      	orrs	r3, r2
 8000a12:	604b      	str	r3, [r1, #4]
 8000a14:	e018      	b.n	8000a48 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a16:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a5c      	ldr	r2, [pc, #368]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a22:	f7ff fc7b 	bl	800031c <HAL_GetTick>
 8000a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a28:	e008      	b.n	8000a3c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000a2a:	f7ff fc77 	bl	800031c <HAL_GetTick>
 8000a2e:	4602      	mov	r2, r0
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d901      	bls.n	8000a3c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	e237      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000a3c:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f0      	bne.n	8000a2a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d03c      	beq.n	8000ace <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d01c      	beq.n	8000a96 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a5c:	4b4b      	ldr	r3, [pc, #300]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a62:	4a4a      	ldr	r2, [pc, #296]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a6c:	f7ff fc56 	bl	800031c <HAL_GetTick>
 8000a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a72:	e008      	b.n	8000a86 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a74:	f7ff fc52 	bl	800031c <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d901      	bls.n	8000a86 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000a82:	2303      	movs	r3, #3
 8000a84:	e212      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a8c:	f003 0302 	and.w	r3, r3, #2
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d0ef      	beq.n	8000a74 <HAL_RCC_OscConfig+0x3ec>
 8000a94:	e01b      	b.n	8000ace <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a9c:	4a3b      	ldr	r2, [pc, #236]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fc39 	bl	800031c <HAL_GetTick>
 8000aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000aac:	e008      	b.n	8000ac0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000aae:	f7ff fc35 	bl	800031c <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e1f5      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1ef      	bne.n	8000aae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 80a6 	beq.w	8000c28 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10d      	bne.n	8000b08 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6593      	str	r3, [r2, #88]	; 0x58
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b04:	2301      	movs	r3, #1
 8000b06:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_RCC_OscConfig+0x508>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d118      	bne.n	8000b46 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <HAL_RCC_OscConfig+0x508>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <HAL_RCC_OscConfig+0x508>)
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b20:	f7ff fbfc 	bl	800031c <HAL_GetTick>
 8000b24:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b26:	e008      	b.n	8000b3a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b28:	f7ff fbf8 	bl	800031c <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2b02      	cmp	r3, #2
 8000b34:	d901      	bls.n	8000b3a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000b36:	2303      	movs	r3, #3
 8000b38:	e1b8      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_RCC_OscConfig+0x508>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f0      	beq.n	8000b28 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d108      	bne.n	8000b60 <HAL_RCC_OscConfig+0x4d8>
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b5e:	e029      	b.n	8000bb4 <HAL_RCC_OscConfig+0x52c>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b05      	cmp	r3, #5
 8000b66:	d115      	bne.n	8000b94 <HAL_RCC_OscConfig+0x50c>
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_RCC_OscConfig+0x504>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000b88:	e014      	b.n	8000bb4 <HAL_RCC_OscConfig+0x52c>
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40007000 	.word	0x40007000
 8000b94:	4b9d      	ldr	r3, [pc, #628]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b9a:	4a9c      	ldr	r2, [pc, #624]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ba4:	4b99      	ldr	r3, [pc, #612]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000baa:	4a98      	ldr	r2, [pc, #608]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000bac:	f023 0304 	bic.w	r3, r3, #4
 8000bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d016      	beq.n	8000bea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fbae 	bl	800031c <HAL_GetTick>
 8000bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000bc2:	e00a      	b.n	8000bda <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bc4:	f7ff fbaa 	bl	800031c <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e168      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000bda:	4b8c      	ldr	r3, [pc, #560]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0ed      	beq.n	8000bc4 <HAL_RCC_OscConfig+0x53c>
 8000be8:	e015      	b.n	8000c16 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bea:	f7ff fb97 	bl	800031c <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000bf0:	e00a      	b.n	8000c08 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000bf2:	f7ff fb93 	bl	800031c <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d901      	bls.n	8000c08 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000c04:	2303      	movs	r3, #3
 8000c06:	e151      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000c08:	4b80      	ldr	r3, [pc, #512]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1ed      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c1c:	4b7b      	ldr	r3, [pc, #492]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c20:	4a7a      	ldr	r2, [pc, #488]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c26:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d03c      	beq.n	8000cae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d01c      	beq.n	8000c76 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000c3c:	4b73      	ldr	r3, [pc, #460]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c42:	4a72      	ldr	r2, [pc, #456]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fb66 	bl	800031c <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c54:	f7ff fb62 	bl	800031c <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e122      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8000c66:	4b69      	ldr	r3, [pc, #420]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0ef      	beq.n	8000c54 <HAL_RCC_OscConfig+0x5cc>
 8000c74:	e01b      	b.n	8000cae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000c76:	4b65      	ldr	r3, [pc, #404]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c7c:	4a63      	ldr	r2, [pc, #396]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000c7e:	f023 0301 	bic.w	r3, r3, #1
 8000c82:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c86:	f7ff fb49 	bl	800031c <HAL_GetTick>
 8000c8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000c8c:	e008      	b.n	8000ca0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c8e:	f7ff fb45 	bl	800031c <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d901      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	e105      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8000ca0:	4b5a      	ldr	r3, [pc, #360]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000ca2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1ef      	bne.n	8000c8e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80f9 	beq.w	8000eaa <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	f040 80cf 	bne.w	8000e60 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000cc2:	4b52      	ldr	r3, [pc, #328]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d12c      	bne.n	8000d30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d123      	bne.n	8000d30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d11b      	bne.n	8000d30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d113      	bne.n	8000d30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	085b      	lsrs	r3, r3, #1
 8000d14:	3b01      	subs	r3, #1
 8000d16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d109      	bne.n	8000d30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	085b      	lsrs	r3, r3, #1
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d071      	beq.n	8000e14 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b0c      	cmp	r3, #12
 8000d34:	d068      	beq.n	8000e08 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000d36:	4b35      	ldr	r3, [pc, #212]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d105      	bne.n	8000d4e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000d42:	4b32      	ldr	r3, [pc, #200]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0ac      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000d52:	4b2e      	ldr	r3, [pc, #184]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a2d      	ldr	r2, [pc, #180]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000d58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000d5e:	f7ff fadd 	bl	800031c <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d66:	f7ff fad9 	bl	800031c <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e099      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d1f0      	bne.n	8000d66 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <HAL_RCC_OscConfig+0x788>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000d94:	3a01      	subs	r2, #1
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	4311      	orrs	r1, r2
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000d9e:	0212      	lsls	r2, r2, #8
 8000da0:	4311      	orrs	r1, r2
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000da6:	0852      	lsrs	r2, r2, #1
 8000da8:	3a01      	subs	r2, #1
 8000daa:	0552      	lsls	r2, r2, #21
 8000dac:	4311      	orrs	r1, r2
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000db2:	0852      	lsrs	r2, r2, #1
 8000db4:	3a01      	subs	r2, #1
 8000db6:	0652      	lsls	r2, r2, #25
 8000db8:	4311      	orrs	r1, r2
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000dbe:	06d2      	lsls	r2, r2, #27
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	4912      	ldr	r1, [pc, #72]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0f      	ldr	r2, [pc, #60]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000dd4:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000de0:	f7ff fa9c 	bl	800031c <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000de8:	f7ff fa98 	bl	800031c <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e058      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_RCC_OscConfig+0x784>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e06:	e050      	b.n	8000eaa <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e04f      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d144      	bne.n	8000eaa <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a23      	ldr	r2, [pc, #140]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e2c:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a20      	ldr	r2, [pc, #128]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000e38:	f7ff fa70 	bl	800031c <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e40:	f7ff fa6c 	bl	800031c <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e02c      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f0      	beq.n	8000e40 <HAL_RCC_OscConfig+0x7b8>
 8000e5e:	e024      	b.n	8000eaa <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	d01f      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e72:	f7ff fa53 	bl	800031c <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e78:	e008      	b.n	8000e8c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e7a:	f7ff fa4f 	bl	800031c <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e00f      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1f0      	bne.n	8000e7a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	4905      	ldr	r1, [pc, #20]	; (8000eb4 <HAL_RCC_OscConfig+0x82c>)
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_RCC_OscConfig+0x830>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60cb      	str	r3, [r1, #12]
 8000ea4:	e001      	b.n	8000eaa <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3720      	adds	r7, #32
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	feeefffc 	.word	0xfeeefffc

08000ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e11d      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ed4:	4b90      	ldr	r3, [pc, #576]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	683a      	ldr	r2, [r7, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d910      	bls.n	8000f04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee2:	4b8d      	ldr	r3, [pc, #564]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 020f 	bic.w	r2, r3, #15
 8000eea:	498b      	ldr	r1, [pc, #556]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef2:	4b89      	ldr	r3, [pc, #548]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e105      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d010      	beq.n	8000f32 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	4b81      	ldr	r3, [pc, #516]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d908      	bls.n	8000f32 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f20:	4b7e      	ldr	r3, [pc, #504]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	497b      	ldr	r1, [pc, #492]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d079      	beq.n	8001032 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d11e      	bne.n	8000f84 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f46:	4b75      	ldr	r3, [pc, #468]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0dc      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8000f56:	f000 f9d1 	bl	80012fc <RCC_GetSysClockFreqFromPLLSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a70      	ldr	r2, [pc, #448]	; (8001120 <HAL_RCC_ClockConfig+0x264>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d946      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000f62:	4b6e      	ldr	r3, [pc, #440]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d140      	bne.n	8000ff0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000f6e:	4b6b      	ldr	r3, [pc, #428]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f76:	4a69      	ldr	r2, [pc, #420]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000f7e:	2380      	movs	r3, #128	; 0x80
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e035      	b.n	8000ff0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d107      	bne.n	8000f9c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f8c:	4b63      	ldr	r3, [pc, #396]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d115      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0b9      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d107      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000fa4:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d109      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0ad      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0a5      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8000fc4:	f000 f8b4 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a55      	ldr	r2, [pc, #340]	; (8001120 <HAL_RCC_ClockConfig+0x264>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d90f      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d109      	bne.n	8000ff0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8000fdc:	4b4f      	ldr	r3, [pc, #316]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fe4:	4a4d      	ldr	r2, [pc, #308]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000ff0:	4b4a      	ldr	r3, [pc, #296]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 0203 	bic.w	r2, r3, #3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4947      	ldr	r1, [pc, #284]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001002:	f7ff f98b 	bl	800031c <HAL_GetTick>
 8001006:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001008:	e00a      	b.n	8001020 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100a:	f7ff f987 	bl	800031c <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	f241 3288 	movw	r2, #5000	; 0x1388
 8001018:	4293      	cmp	r3, r2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e077      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001020:	4b3e      	ldr	r3, [pc, #248]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 020c 	and.w	r2, r3, #12
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	429a      	cmp	r2, r3
 8001030:	d1eb      	bne.n	800100a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	2b80      	cmp	r3, #128	; 0x80
 8001036:	d105      	bne.n	8001044 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 800103e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001042:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d010      	beq.n	8001072 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800105c:	429a      	cmp	r2, r3
 800105e:	d208      	bcs.n	8001072 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	492b      	ldr	r1, [pc, #172]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 800106e:	4313      	orrs	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001072:	4b29      	ldr	r3, [pc, #164]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d210      	bcs.n	80010a2 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 020f 	bic.w	r2, r3, #15
 8001088:	4923      	ldr	r1, [pc, #140]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_RCC_ClockConfig+0x25c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e036      	b.n	8001110 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	4918      	ldr	r1, [pc, #96]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d009      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4910      	ldr	r1, [pc, #64]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 80010dc:	4313      	orrs	r3, r2
 80010de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010e0:	f000 f826 	bl	8001130 <HAL_RCC_GetSysClockFreq>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_RCC_ClockConfig+0x260>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <HAL_RCC_ClockConfig+0x268>)
 80010f2:	5ccb      	ldrb	r3, [r1, r3]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	fa22 f303 	lsr.w	r3, r2, r3
 80010fc:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <HAL_RCC_ClockConfig+0x26c>)
 80010fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_RCC_ClockConfig+0x270>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f8b9 	bl	800027c <HAL_InitTick>
 800110a:	4603      	mov	r3, r0
 800110c:	73fb      	strb	r3, [r7, #15]

  return status;
 800110e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40022000 	.word	0x40022000
 800111c:	40021000 	.word	0x40021000
 8001120:	04c4b400 	.word	0x04c4b400
 8001124:	08002540 	.word	0x08002540
 8001128:	20000008 	.word	0x20000008
 800112c:	20000000 	.word	0x20000000

08001130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 030c 	and.w	r3, r3, #12
 8001146:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001148:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_GetSysClockFreq+0x34>
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	2b0c      	cmp	r3, #12
 800115c:	d121      	bne.n	80011a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d11e      	bne.n	80011a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d107      	bne.n	8001180 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001170:	4b31      	ldr	r3, [pc, #196]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 8001172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001176:	0a1b      	lsrs	r3, r3, #8
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	e005      	b.n	800118c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800118c:	4a2b      	ldr	r2, [pc, #172]	; (800123c <HAL_RCC_GetSysClockFreq+0x10c>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10d      	bne.n	80011b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011a0:	e00a      	b.n	80011b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b04      	cmp	r3, #4
 80011a6:	d102      	bne.n	80011ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80011a8:	4b25      	ldr	r3, [pc, #148]	; (8001240 <HAL_RCC_GetSysClockFreq+0x110>)
 80011aa:	61bb      	str	r3, [r7, #24]
 80011ac:	e004      	b.n	80011b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d101      	bne.n	80011b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <HAL_RCC_GetSysClockFreq+0x114>)
 80011b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2b0c      	cmp	r3, #12
 80011bc:	d134      	bne.n	8001228 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d003      	beq.n	80011d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d003      	beq.n	80011dc <HAL_RCC_GetSysClockFreq+0xac>
 80011d4:	e005      	b.n	80011e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_RCC_GetSysClockFreq+0x110>)
 80011d8:	617b      	str	r3, [r7, #20]
      break;
 80011da:	e005      	b.n	80011e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80011dc:	4b19      	ldr	r3, [pc, #100]	; (8001244 <HAL_RCC_GetSysClockFreq+0x114>)
 80011de:	617b      	str	r3, [r7, #20]
      break;
 80011e0:	e002      	b.n	80011e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	617b      	str	r3, [r7, #20]
      break;
 80011e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	091b      	lsrs	r3, r3, #4
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3301      	adds	r3, #1
 80011f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	fb03 f202 	mul.w	r2, r3, r2
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	fbb2 f3f3 	udiv	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <HAL_RCC_GetSysClockFreq+0x108>)
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	0e5b      	lsrs	r3, r3, #25
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	3301      	adds	r3, #1
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001228:	69bb      	ldr	r3, [r7, #24]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40021000 	.word	0x40021000
 800123c:	08002550 	.word	0x08002550
 8001240:	00f42400 	.word	0x00f42400
 8001244:	007a1200 	.word	0x007a1200

08001248 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001250:	2300      	movs	r3, #0
 8001252:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001260:	f7ff f94e 	bl	8000500 <HAL_PWREx_GetVoltageRange>
 8001264:	6178      	str	r0, [r7, #20]
 8001266:	e014      	b.n	8001292 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6593      	str	r3, [r2, #88]	; 0x58
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001280:	f7ff f93e 	bl	8000500 <HAL_PWREx_GetVoltageRange>
 8001284:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800128c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001290:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d10b      	bne.n	80012b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b80      	cmp	r3, #128	; 0x80
 800129e:	d913      	bls.n	80012c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2ba0      	cmp	r3, #160	; 0xa0
 80012a4:	d902      	bls.n	80012ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	e00d      	b.n	80012c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012ac:	2301      	movs	r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e00a      	b.n	80012c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b7f      	cmp	r3, #127	; 0x7f
 80012b6:	d902      	bls.n	80012be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	e004      	b.n	80012c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b70      	cmp	r3, #112	; 0x70
 80012c2:	d101      	bne.n	80012c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012c4:	2301      	movs	r3, #1
 80012c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 020f 	bic.w	r2, r3, #15
 80012d0:	4909      	ldr	r1, [pc, #36]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d001      	beq.n	80012ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40022000 	.word	0x40022000

080012fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b03      	cmp	r3, #3
 8001310:	d00b      	beq.n	800132a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2b03      	cmp	r3, #3
 8001316:	d825      	bhi.n	8001364 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d008      	beq.n	8001330 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d11f      	bne.n	8001364 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001324:	4b25      	ldr	r3, [pc, #148]	; (80013bc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001326:	613b      	str	r3, [r7, #16]
    break;
 8001328:	e01f      	b.n	800136a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800132c:	613b      	str	r3, [r7, #16]
    break;
 800132e:	e01c      	b.n	800136a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0308 	and.w	r3, r3, #8
 8001338:	2b00      	cmp	r3, #0
 800133a:	d107      	bne.n	800134c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800133e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001342:	0a1b      	lsrs	r3, r3, #8
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e005      	b.n	8001358 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800134c:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001358:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	613b      	str	r3, [r7, #16]
    break;
 8001362:	e002      	b.n	800136a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
    break;
 8001368:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	3301      	adds	r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	fb03 f202 	mul.w	r2, r3, r2
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0e5b      	lsrs	r3, r3, #25
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	3301      	adds	r3, #1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80013aa:	683b      	ldr	r3, [r7, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	371c      	adds	r7, #28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	00f42400 	.word	0x00f42400
 80013c0:	007a1200 	.word	0x007a1200
 80013c4:	08002550 	.word	0x08002550

080013c8 <Kalmanfilter_assembly>:
 * @Param float* OutputArray address of array to load with x values from updatting the kalman_state
 * @Param kalman_state* kstate is initial state
 * @Param int Length is the length of InputArray
 * @Return int 0 if function ran as expected, -1 if error
 */
int Kalmanfilter_assembly(float* InputArray, float* OutputArray, kalman_state* kstate, int Length)  {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < Length; i++){ // loop through input array of measurements
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e01a      	b.n	8001412 <Kalmanfilter_assembly+0x4a>
		float measurement = InputArray[i];
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4413      	add	r3, r2
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	613b      	str	r3, [r7, #16]
		if (kalman(kstate, measurement) == 1) { // run kalman function, check for overflow, underflow, and division by zero
 80013e8:	ed97 0a04 	vldr	s0, [r7, #16]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7fe ff05 	bl	80001fc <kalman>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d102      	bne.n	80013fe <Kalmanfilter_assembly+0x36>
			return -1; // return 1 if kalman returns -1 (happens if arithmetic condition in computations)
 80013f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013fc:	e00e      	b.n	800141c <Kalmanfilter_assembly+0x54>
		}
		OutputArray[i] = kstate->x; // Add x to output array
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	4413      	add	r3, r2
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6892      	ldr	r2, [r2, #8]
 800140a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < Length; i++){ // loop through input array of measurements
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbe0      	blt.n	80013dc <Kalmanfilter_assembly+0x14>
	}
	return 0; // return 0 if all goes well
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <data_processing_CMSIS>:
 * @Param data_processed* data structure to put values into
 * @Param float* original is original measurements
 * @Param float* x_values  are x values found by kalman
 * @Param int length is the length of the original and x_values arrays
 */
void data_processing_CMSIS(data_processed* data, float* original, float* x_values, int length) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af02      	add	r7, sp, #8
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
	// Subtraction of original and data obtained by Kalman filter tracking.
	arm_sub_f32(original, x_values, data->difference, length);
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	68b8      	ldr	r0, [r7, #8]
 800143a:	f000 ff7d 	bl	8002338 <arm_sub_f32>

	// Calculation of the standard deviation and the average of the difference.
	arm_std_f32(data->difference, length, data->standard_deviation);
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	6839      	ldr	r1, [r7, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3364      	adds	r3, #100	; 0x64
 8001446:	461a      	mov	r2, r3
 8001448:	f000 f95e 	bl	8001708 <arm_std_f32>
	arm_mean_f32(data->difference, length, data->average);
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	3368      	adds	r3, #104	; 0x68
 8001454:	461a      	mov	r2, r3
 8001456:	f000 f9e1 	bl	800181c <arm_mean_f32>

	// Calculation of the correlation between the original and tracked vectors.
	arm_correlate_f32(original, length, x_values, length, data->correlation);
 800145a:	6839      	ldr	r1, [r7, #0]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4613      	mov	r3, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	68b8      	ldr	r0, [r7, #8]
 800146c:	f000 fa14 	bl	8001898 <arm_correlate_f32>

	// Calculation of the convolution between the two vectors.
	arm_conv_f32(original, length, x_values, length, data->convolution);
 8001470:	6839      	ldr	r1, [r7, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	336c      	adds	r3, #108	; 0x6c
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b8      	ldr	r0, [r7, #8]
 8001480:	f000 fcc0 	bl	8001e04 <arm_conv_f32>
}
 8001484:	bf00      	nop
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


// Below is code for part 2 ---------------------------------------------------------------------------------

	float measurements[] =
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <main+0x64>)
 8001496:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 800149a:	4611      	mov	r1, r2
 800149c:	2264      	movs	r2, #100	; 0x64
 800149e:	4618      	mov	r0, r3
 80014a0:	f000 ffce 	bl	8002440 <memcpy>
	0.392204,
	0.204622};


	float x_values_asm[25];
	struct kalman_state kstate_asm = {0.1, 0.1, 5.0, 0.1, 0.0};
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <main+0x68>)
 80014a6:	f507 74fa 	add.w	r4, r7, #500	; 0x1f4
 80014aa:	461d      	mov	r5, r3
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	6023      	str	r3, [r4, #0]
	Kalmanfilter_assembly(measurements, x_values_asm, &kstate_asm, 25);
 80014b4:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 80014b8:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80014bc:	f507 701b 	add.w	r0, r7, #620	; 0x26c
 80014c0:	2319      	movs	r3, #25
 80014c2:	f7ff ff81 	bl	80013c8 <Kalmanfilter_assembly>

	struct data_processed data_asm;
	data_processing_CMSIS(&data_asm, measurements, x_values_asm, 25);
 80014c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80014ca:	f507 711b 	add.w	r1, r7, #620	; 0x26c
 80014ce:	4638      	mov	r0, r7
 80014d0:	2319      	movs	r3, #25
 80014d2:	f7ff ffa7 	bl	8001424 <data_processing_CMSIS>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f7fe feb8 	bl	800024a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014da:	f000 f80f 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014de:	f000 f85f 	bl	80015a0 <MX_GPIO_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Below is for SWV debugging
	  ITM_Port32(31) = 1;
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <main+0x6c>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
	  //put your code in here for monitoring execution time

	  ITM_Port32(31) = 2;
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <main+0x6c>)
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 1;
 80014ee:	e7f8      	b.n	80014e2 <main+0x56>
 80014f0:	080024c8 	.word	0x080024c8
 80014f4:	0800252c 	.word	0x0800252c
 80014f8:	e000007c 	.word	0xe000007c

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b096      	sub	sp, #88	; 0x58
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	2244      	movs	r2, #68	; 0x44
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f000 ffa6 	bl	800245c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff f80e 	bl	8000540 <HAL_PWREx_ControlVoltageScaling>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800152a:	f000 f85d 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800152e:	2310      	movs	r3, #16
 8001530:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001532:	2301      	movs	r3, #1
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800153a:	2360      	movs	r3, #96	; 0x60
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001542:	2301      	movs	r3, #1
 8001544:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800154a:	233c      	movs	r3, #60	; 0x3c
 800154c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff f892 	bl	8000688 <HAL_RCC_OscConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800156a:	f000 f83d 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2303      	movs	r3, #3
 8001574:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	2105      	movs	r1, #5
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fc98 	bl	8000ebc <HAL_RCC_ClockConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001592:	f000 f829 	bl	80015e8 <Error_Handler>
  }
}
 8001596:	bf00      	nop
 8001598:	3758      	adds	r7, #88	; 0x58
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_GPIO_Init+0x44>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <MX_GPIO_Init+0x44>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <MX_GPIO_Init+0x44>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <MX_GPIO_Init+0x44>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <MX_GPIO_Init+0x44>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <MX_GPIO_Init+0x44>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]

}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_MspInit+0x44>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <HAL_MspInit+0x44>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6613      	str	r3, [r2, #96]	; 0x60
 8001606:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <HAL_MspInit+0x44>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	; (8001638 <HAL_MspInit+0x44>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_MspInit+0x44>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	6593      	str	r3, [r2, #88]	; 0x58
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_MspInit+0x44>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001640:	e7fe      	b.n	8001640 <NMI_Handler+0x4>

08001642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001646:	e7fe      	b.n	8001646 <HardFault_Handler+0x4>

08001648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800164c:	e7fe      	b.n	800164c <MemManage_Handler+0x4>

0800164e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <BusFault_Handler+0x4>

08001654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <UsageFault_Handler+0x4>

0800165a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f7fe fe34 	bl	80002f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016b8:	f7ff ffea 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80016be:	490d      	ldr	r1, [pc, #52]	; (80016f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c0:	4a0d      	ldr	r2, [pc, #52]	; (80016f8 <LoopForever+0xe>)
  movs r3, #0
 80016c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c4:	e002      	b.n	80016cc <LoopCopyDataInit>

080016c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ca:	3304      	adds	r3, #4

080016cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d0:	d3f9      	bcc.n	80016c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d2:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d4:	4c0a      	ldr	r4, [pc, #40]	; (8001700 <LoopForever+0x16>)
  movs r3, #0
 80016d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d8:	e001      	b.n	80016de <LoopFillZerobss>

080016da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016dc:	3204      	adds	r2, #4

080016de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e0:	d3fb      	bcc.n	80016da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e2:	f000 fe89 	bl	80023f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e6:	f7ff fed1 	bl	800148c <main>

080016ea <LoopForever>:

LoopForever:
    b LoopForever
 80016ea:	e7fe      	b.n	80016ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016f8:	08002588 	.word	0x08002588
  ldr r2, =_sbss
 80016fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001700:	20000090 	.word	0x20000090

08001704 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC1_IRQHandler>
	...

08001708 <arm_std_f32>:
 8001708:	2901      	cmp	r1, #1
 800170a:	d97d      	bls.n	8001808 <arm_std_f32+0x100>
 800170c:	b530      	push	{r4, r5, lr}
 800170e:	ed2d 8b02 	vpush	{d8}
 8001712:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001818 <arm_std_f32+0x110>
 8001716:	088d      	lsrs	r5, r1, #2
 8001718:	b083      	sub	sp, #12
 800171a:	eef0 4a47 	vmov.f32	s9, s14
 800171e:	d028      	beq.n	8001772 <arm_std_f32+0x6a>
 8001720:	f100 0310 	add.w	r3, r0, #16
 8001724:	462c      	mov	r4, r5
 8001726:	ed53 7a04 	vldr	s15, [r3, #-16]
 800172a:	ed13 5a03 	vldr	s10, [r3, #-12]
 800172e:	ed53 5a02 	vldr	s11, [r3, #-8]
 8001732:	ed13 6a01 	vldr	s12, [r3, #-4]
 8001736:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800173a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800173e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8001742:	ee65 6a05 	vmul.f32	s13, s10, s10
 8001746:	ee77 7a85 	vadd.f32	s15, s15, s10
 800174a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800174e:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8001752:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001756:	ee77 6a26 	vadd.f32	s13, s14, s13
 800175a:	ee26 7a06 	vmul.f32	s14, s12, s12
 800175e:	3c01      	subs	r4, #1
 8001760:	ee77 4a86 	vadd.f32	s9, s15, s12
 8001764:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001768:	f103 0310 	add.w	r3, r3, #16
 800176c:	d1db      	bne.n	8001726 <arm_std_f32+0x1e>
 800176e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001772:	f011 0303 	ands.w	r3, r1, #3
 8001776:	d01b      	beq.n	80017b0 <arm_std_f32+0xa8>
 8001778:	edd0 7a00 	vldr	s15, [r0]
 800177c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001780:	3b01      	subs	r3, #1
 8001782:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001786:	ee37 7a26 	vadd.f32	s14, s14, s13
 800178a:	d011      	beq.n	80017b0 <arm_std_f32+0xa8>
 800178c:	edd0 7a01 	vldr	s15, [r0, #4]
 8001790:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001794:	2b01      	cmp	r3, #1
 8001796:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800179a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800179e:	d007      	beq.n	80017b0 <arm_std_f32+0xa8>
 80017a0:	edd0 7a02 	vldr	s15, [r0, #8]
 80017a4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80017a8:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80017ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80017b0:	ee07 1a90 	vmov	s15, r1
 80017b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80017bc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80017c0:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 80017c4:	eec7 5a86 	vdiv.f32	s11, s15, s12
 80017c8:	ee87 0a06 	vdiv.f32	s0, s14, s12
 80017cc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80017d0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80017d4:	ee30 0a66 	vsub.f32	s0, s0, s13
 80017d8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80017dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e0:	db0c      	blt.n	80017fc <arm_std_f32+0xf4>
 80017e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80017ee:	d40e      	bmi.n	800180e <arm_std_f32+0x106>
 80017f0:	ed82 8a00 	vstr	s16, [r2]
 80017f4:	b003      	add	sp, #12
 80017f6:	ecbd 8b02 	vpop	{d8}
 80017fa:	bd30      	pop	{r4, r5, pc}
 80017fc:	2300      	movs	r3, #0
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	b003      	add	sp, #12
 8001802:	ecbd 8b02 	vpop	{d8}
 8001806:	bd30      	pop	{r4, r5, pc}
 8001808:	2300      	movs	r3, #0
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4770      	bx	lr
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	f000 fe2c 	bl	800246c <sqrtf>
 8001814:	9a01      	ldr	r2, [sp, #4]
 8001816:	e7eb      	b.n	80017f0 <arm_std_f32+0xe8>
 8001818:	00000000 	.word	0x00000000

0800181c <arm_mean_f32>:
 800181c:	b430      	push	{r4, r5}
 800181e:	088d      	lsrs	r5, r1, #2
 8001820:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8001894 <arm_mean_f32+0x78>
 8001824:	d018      	beq.n	8001858 <arm_mean_f32+0x3c>
 8001826:	f100 0310 	add.w	r3, r0, #16
 800182a:	462c      	mov	r4, r5
 800182c:	ed53 5a04 	vldr	s11, [r3, #-16]
 8001830:	ed13 6a03 	vldr	s12, [r3, #-12]
 8001834:	ed53 6a02 	vldr	s13, [r3, #-8]
 8001838:	ed13 7a01 	vldr	s14, [r3, #-4]
 800183c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001840:	3c01      	subs	r4, #1
 8001842:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001846:	f103 0310 	add.w	r3, r3, #16
 800184a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800184e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001852:	d1eb      	bne.n	800182c <arm_mean_f32+0x10>
 8001854:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8001858:	f011 0303 	ands.w	r3, r1, #3
 800185c:	d00f      	beq.n	800187e <arm_mean_f32+0x62>
 800185e:	ed90 7a00 	vldr	s14, [r0]
 8001862:	3b01      	subs	r3, #1
 8001864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001868:	d009      	beq.n	800187e <arm_mean_f32+0x62>
 800186a:	ed90 7a01 	vldr	s14, [r0, #4]
 800186e:	2b01      	cmp	r3, #1
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	bf1c      	itt	ne
 8001876:	ed90 7a02 	vldrne	s14, [r0, #8]
 800187a:	ee77 7a87 	vaddne.f32	s15, s15, s14
 800187e:	ee07 1a10 	vmov	s14, r1
 8001882:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001886:	bc30      	pop	{r4, r5}
 8001888:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800188c:	edc2 6a00 	vstr	s13, [r2]
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	00000000 	.word	0x00000000

08001898 <arm_correlate_f32>:
 8001898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800189c:	4299      	cmp	r1, r3
 800189e:	b08d      	sub	sp, #52	; 0x34
 80018a0:	f0c0 824c 	bcc.w	8001d3c <arm_correlate_f32+0x4a4>
 80018a4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80018a6:	eba1 0c03 	sub.w	ip, r1, r3
 80018aa:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80018ae:	f04f 0e04 	mov.w	lr, #4
 80018b2:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80018b6:	3101      	adds	r1, #1
 80018b8:	1ac9      	subs	r1, r1, r3
 80018ba:	3c01      	subs	r4, #1
 80018bc:	1e5e      	subs	r6, r3, #1
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80018c4:	f000 8294 	beq.w	8001df0 <arm_correlate_f32+0x558>
 80018c8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8001a18 <arm_correlate_f32+0x180>
 80018cc:	f1a1 0804 	sub.w	r8, r1, #4
 80018d0:	46e1      	mov	r9, ip
 80018d2:	4605      	mov	r5, r0
 80018d4:	2401      	movs	r4, #1
 80018d6:	f014 0703 	ands.w	r7, r4, #3
 80018da:	d01b      	beq.n	8001914 <arm_correlate_f32+0x7c>
 80018dc:	ed91 7a00 	vldr	s14, [r1]
 80018e0:	edd5 6a00 	vldr	s13, [r5]
 80018e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018e8:	3f01      	subs	r7, #1
 80018ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018ee:	d011      	beq.n	8001914 <arm_correlate_f32+0x7c>
 80018f0:	ed91 7a01 	vldr	s14, [r1, #4]
 80018f4:	edd5 6a01 	vldr	s13, [r5, #4]
 80018f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80018fc:	2f01      	cmp	r7, #1
 80018fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001902:	d007      	beq.n	8001914 <arm_correlate_f32+0x7c>
 8001904:	ed95 7a02 	vldr	s14, [r5, #8]
 8001908:	edd1 6a02 	vldr	s13, [r1, #8]
 800190c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001910:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001914:	1c67      	adds	r7, r4, #1
 8001916:	42bb      	cmp	r3, r7
 8001918:	edc9 7a00 	vstr	s15, [r9]
 800191c:	4641      	mov	r1, r8
 800191e:	44f1      	add	r9, lr
 8001920:	d03a      	beq.n	8001998 <arm_correlate_f32+0x100>
 8001922:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8001926:	f000 8267 	beq.w	8001df8 <arm_correlate_f32+0x560>
 800192a:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800192e:	f100 0110 	add.w	r1, r0, #16
 8001932:	eddf 7a39 	vldr	s15, [pc, #228]	; 8001a18 <arm_correlate_f32+0x180>
 8001936:	eb01 050a 	add.w	r5, r1, sl
 800193a:	f108 0410 	add.w	r4, r8, #16
 800193e:	ed11 7a04 	vldr	s14, [r1, #-16]
 8001942:	ed54 3a04 	vldr	s7, [r4, #-16]
 8001946:	ed11 6a03 	vldr	s12, [r1, #-12]
 800194a:	ed14 4a03 	vldr	s8, [r4, #-12]
 800194e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8001952:	ed54 4a02 	vldr	s9, [r4, #-8]
 8001956:	ed51 5a01 	vldr	s11, [r1, #-4]
 800195a:	ed14 5a01 	vldr	s10, [r4, #-4]
 800195e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001962:	ee26 6a04 	vmul.f32	s12, s12, s8
 8001966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196a:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800196e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001972:	ee65 6a85 	vmul.f32	s13, s11, s10
 8001976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197a:	3110      	adds	r1, #16
 800197c:	428d      	cmp	r5, r1
 800197e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001982:	f104 0410 	add.w	r4, r4, #16
 8001986:	d1da      	bne.n	800193e <arm_correlate_f32+0xa6>
 8001988:	eb00 050a 	add.w	r5, r0, sl
 800198c:	eb08 010a 	add.w	r1, r8, sl
 8001990:	f1a8 0804 	sub.w	r8, r8, #4
 8001994:	463c      	mov	r4, r7
 8001996:	e79e      	b.n	80018d6 <arm_correlate_f32+0x3e>
 8001998:	2b03      	cmp	r3, #3
 800199a:	fb0e cc04 	mla	ip, lr, r4, ip
 800199e:	f240 81dd 	bls.w	8001d5c <arm_correlate_f32+0x4c4>
 80019a2:	9b02      	ldr	r3, [sp, #8]
 80019a4:	0899      	lsrs	r1, r3, #2
 80019a6:	9103      	str	r1, [sp, #12]
 80019a8:	f000 8220 	beq.w	8001dec <arm_correlate_f32+0x554>
 80019ac:	08bb      	lsrs	r3, r7, #2
 80019ae:	f007 0403 	and.w	r4, r7, #3
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	f103 0b0c 	add.w	fp, r3, #12
 80019ba:	18d5      	adds	r5, r2, r3
 80019bc:	1e63      	subs	r3, r4, #1
 80019be:	0109      	lsls	r1, r1, #4
 80019c0:	9306      	str	r3, [sp, #24]
 80019c2:	f100 080c 	add.w	r8, r0, #12
 80019c6:	9401      	str	r4, [sp, #4]
 80019c8:	9104      	str	r1, [sp, #16]
 80019ca:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80019ce:	4441      	add	r1, r8
 80019d0:	f102 0310 	add.w	r3, r2, #16
 80019d4:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 80019d8:	9e06      	ldr	r6, [sp, #24]
 80019da:	9405      	str	r4, [sp, #20]
 80019dc:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 80019e0:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 80019e4:	46e1      	mov	r9, ip
 80019e6:	4483      	add	fp, r0
 80019e8:	460f      	mov	r7, r1
 80019ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80019ec:	469c      	mov	ip, r3
 80019ee:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8001a18 <arm_correlate_f32+0x180>
 80019f2:	ed58 1a03 	vldr	s3, [r8, #-12]
 80019f6:	ed18 2a02 	vldr	s4, [r8, #-8]
 80019fa:	ed58 2a01 	vldr	s5, [r8, #-4]
 80019fe:	ed98 0a00 	vldr	s0, [r8]
 8001a02:	9900      	ldr	r1, [sp, #0]
 8001a04:	eef0 5a46 	vmov.f32	s11, s12
 8001a08:	eeb0 5a46 	vmov.f32	s10, s12
 8001a0c:	eef0 4a46 	vmov.f32	s9, s12
 8001a10:	4663      	mov	r3, ip
 8001a12:	4642      	mov	r2, r8
 8001a14:	e005      	b.n	8001a22 <arm_correlate_f32+0x18a>
 8001a16:	bf00      	nop
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	ed90 0a04 	vldr	s0, [r0, #16]
 8001a20:	3210      	adds	r2, #16
 8001a22:	ed53 6a04 	vldr	s13, [r3, #-16]
 8001a26:	ed13 7a03 	vldr	s14, [r3, #-12]
 8001a2a:	ed53 7a02 	vldr	s15, [r3, #-8]
 8001a2e:	ed13 1a01 	vldr	s2, [r3, #-4]
 8001a32:	ee62 3a26 	vmul.f32	s7, s4, s13
 8001a36:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8001a3a:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8001a3e:	edd2 1a01 	vldr	s3, [r2, #4]
 8001a42:	ee66 6a80 	vmul.f32	s13, s13, s0
 8001a46:	ee22 3a07 	vmul.f32	s6, s4, s14
 8001a4a:	ee33 5a85 	vadd.f32	s10, s7, s10
 8001a4e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8001a52:	ee62 3a87 	vmul.f32	s7, s5, s14
 8001a56:	ee20 4a07 	vmul.f32	s8, s0, s14
 8001a5a:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8001a5e:	ee36 6a86 	vadd.f32	s12, s13, s12
 8001a62:	ed92 2a02 	vldr	s4, [r2, #8]
 8001a66:	ee27 7a21 	vmul.f32	s14, s14, s3
 8001a6a:	ee73 3a85 	vadd.f32	s7, s7, s10
 8001a6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001a72:	ee20 5a27 	vmul.f32	s10, s0, s15
 8001a76:	ee33 3a24 	vadd.f32	s6, s6, s9
 8001a7a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8001a7e:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8001a82:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8001a86:	edd2 2a03 	vldr	s5, [r2, #12]
 8001a8a:	ee67 7a82 	vmul.f32	s15, s15, s4
 8001a8e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8001a92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a96:	ee74 4a83 	vadd.f32	s9, s9, s6
 8001a9a:	ee20 0a01 	vmul.f32	s0, s0, s2
 8001a9e:	ee61 3a81 	vmul.f32	s7, s3, s2
 8001aa2:	ee75 5a84 	vadd.f32	s11, s11, s8
 8001aa6:	ee22 7a01 	vmul.f32	s14, s4, s2
 8001aaa:	ee21 6a22 	vmul.f32	s12, s2, s5
 8001aae:	3901      	subs	r1, #1
 8001ab0:	f103 0310 	add.w	r3, r3, #16
 8001ab4:	ee70 4a24 	vadd.f32	s9, s0, s9
 8001ab8:	ee33 5a85 	vadd.f32	s10, s7, s10
 8001abc:	ee77 5a25 	vadd.f32	s11, s14, s11
 8001ac0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	d1a9      	bne.n	8001a1c <arm_correlate_f32+0x184>
 8001ac8:	9b01      	ldr	r3, [sp, #4]
 8001aca:	b3f3      	cbz	r3, 8001b4a <arm_correlate_f32+0x2b2>
 8001acc:	edd5 7a00 	vldr	s15, [r5]
 8001ad0:	ed9b 4a00 	vldr	s8, [fp]
 8001ad4:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8001ad8:	ee62 3a27 	vmul.f32	s7, s4, s15
 8001adc:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8001ae0:	ee64 7a27 	vmul.f32	s15, s8, s15
 8001ae4:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8001ae8:	ee35 5a23 	vadd.f32	s10, s10, s7
 8001aec:	ee75 5a87 	vadd.f32	s11, s11, s14
 8001af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af4:	b34e      	cbz	r6, 8001b4a <arm_correlate_f32+0x2b2>
 8001af6:	edd5 7a01 	vldr	s15, [r5, #4]
 8001afa:	eddb 6a01 	vldr	s13, [fp, #4]
 8001afe:	ee22 7a27 	vmul.f32	s14, s4, s15
 8001b02:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8001b06:	ee67 3a84 	vmul.f32	s7, s15, s8
 8001b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0e:	2e01      	cmp	r6, #1
 8001b10:	ee74 4a87 	vadd.f32	s9, s9, s14
 8001b14:	ee35 5a03 	vadd.f32	s10, s10, s6
 8001b18:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8001b1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b20:	d013      	beq.n	8001b4a <arm_correlate_f32+0x2b2>
 8001b22:	ed95 7a02 	vldr	s14, [r5, #8]
 8001b26:	eddb 3a02 	vldr	s7, [fp, #8]
 8001b2a:	ee62 7a87 	vmul.f32	s15, s5, s14
 8001b2e:	ee27 4a04 	vmul.f32	s8, s14, s8
 8001b32:	ee67 6a26 	vmul.f32	s13, s14, s13
 8001b36:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001b3a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8001b3e:	ee35 5a04 	vadd.f32	s10, s10, s8
 8001b42:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8001b46:	ee36 6a07 	vadd.f32	s12, s12, s14
 8001b4a:	f108 0810 	add.w	r8, r8, #16
 8001b4e:	eb09 020e 	add.w	r2, r9, lr
 8001b52:	eb0a 030e 	add.w	r3, sl, lr
 8001b56:	4547      	cmp	r7, r8
 8001b58:	edc9 4a00 	vstr	s9, [r9]
 8001b5c:	f10b 0b10 	add.w	fp, fp, #16
 8001b60:	ed82 5a00 	vstr	s10, [r2]
 8001b64:	44a1      	add	r9, r4
 8001b66:	edca 5a00 	vstr	s11, [sl]
 8001b6a:	ed83 6a00 	vstr	s12, [r3]
 8001b6e:	44a2      	add	sl, r4
 8001b70:	f47f af3d 	bne.w	80019ee <arm_correlate_f32+0x156>
 8001b74:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8001b78:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8001b7c:	9b03      	ldr	r3, [sp, #12]
 8001b7e:	9c05      	ldr	r4, [sp, #20]
 8001b80:	9904      	ldr	r1, [sp, #16]
 8001b82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b84:	fb04 cc03 	mla	ip, r4, r3, ip
 8001b88:	4401      	add	r1, r0
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	460d      	mov	r5, r1
 8001b8e:	9303      	str	r3, [sp, #12]
 8001b90:	9b02      	ldr	r3, [sp, #8]
 8001b92:	f013 0303 	ands.w	r3, r3, #3
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	d071      	beq.n	8001c7e <arm_correlate_f32+0x3e6>
 8001b9a:	9903      	ldr	r1, [sp, #12]
 8001b9c:	9205      	str	r2, [sp, #20]
 8001b9e:	f007 0403 	and.w	r4, r7, #3
 8001ba2:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8001ba6:	1c4f      	adds	r7, r1, #1
 8001ba8:	1859      	adds	r1, r3, r1
 8001baa:	1d03      	adds	r3, r0, #4
 8001bac:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001bb0:	9400      	str	r4, [sp, #0]
 8001bb2:	f102 0110 	add.w	r1, r2, #16
 8001bb6:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8001bba:	3c01      	subs	r4, #1
 8001bbc:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8001bc0:	eb02 090a 	add.w	r9, r2, sl
 8001bc4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001bc8:	46e0      	mov	r8, ip
 8001bca:	4618      	mov	r0, r3
 8001bcc:	460e      	mov	r6, r1
 8001bce:	4622      	mov	r2, r4
 8001bd0:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8001a18 <arm_correlate_f32+0x180>
 8001bd4:	f105 0110 	add.w	r1, r5, #16
 8001bd8:	4633      	mov	r3, r6
 8001bda:	465c      	mov	r4, fp
 8001bdc:	ed11 7a04 	vldr	s14, [r1, #-16]
 8001be0:	ed53 3a04 	vldr	s7, [r3, #-16]
 8001be4:	ed11 6a03 	vldr	s12, [r1, #-12]
 8001be8:	ed13 4a03 	vldr	s8, [r3, #-12]
 8001bec:	ed51 6a02 	vldr	s13, [r1, #-8]
 8001bf0:	ed53 4a02 	vldr	s9, [r3, #-8]
 8001bf4:	ed51 5a01 	vldr	s11, [r1, #-4]
 8001bf8:	ed13 5a01 	vldr	s10, [r3, #-4]
 8001bfc:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001c00:	ee26 6a04 	vmul.f32	s12, s12, s8
 8001c04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c08:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8001c0c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c10:	ee65 6a85 	vmul.f32	s13, s11, s10
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	3c01      	subs	r4, #1
 8001c1a:	f101 0110 	add.w	r1, r1, #16
 8001c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c22:	f103 0310 	add.w	r3, r3, #16
 8001c26:	d1d9      	bne.n	8001bdc <arm_correlate_f32+0x344>
 8001c28:	9b00      	ldr	r3, [sp, #0]
 8001c2a:	4455      	add	r5, sl
 8001c2c:	b1d3      	cbz	r3, 8001c64 <arm_correlate_f32+0x3cc>
 8001c2e:	ed99 7a00 	vldr	s14, [r9]
 8001c32:	edd5 6a00 	vldr	s13, [r5]
 8001c36:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c3e:	b18a      	cbz	r2, 8001c64 <arm_correlate_f32+0x3cc>
 8001c40:	ed99 7a01 	vldr	s14, [r9, #4]
 8001c44:	edd5 6a01 	vldr	s13, [r5, #4]
 8001c48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c4c:	2a01      	cmp	r2, #1
 8001c4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c52:	d007      	beq.n	8001c64 <arm_correlate_f32+0x3cc>
 8001c54:	ed95 7a02 	vldr	s14, [r5, #8]
 8001c58:	edd9 6a02 	vldr	s13, [r9, #8]
 8001c5c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001c60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c64:	463d      	mov	r5, r7
 8001c66:	3704      	adds	r7, #4
 8001c68:	42b8      	cmp	r0, r7
 8001c6a:	edc8 7a00 	vstr	s15, [r8]
 8001c6e:	44f0      	add	r8, lr
 8001c70:	d1ae      	bne.n	8001bd0 <arm_correlate_f32+0x338>
 8001c72:	9b01      	ldr	r3, [sp, #4]
 8001c74:	9a05      	ldr	r2, [sp, #20]
 8001c76:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8001c7a:	fb0e cc03 	mla	ip, lr, r3, ip
 8001c7e:	9b02      	ldr	r3, [sp, #8]
 8001c80:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c84:	08b5      	lsrs	r5, r6, #2
 8001c86:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8001a18 <arm_correlate_f32+0x180>
 8001c8a:	f000 80ac 	beq.w	8001de6 <arm_correlate_f32+0x54e>
 8001c8e:	f100 0110 	add.w	r1, r0, #16
 8001c92:	f102 0310 	add.w	r3, r2, #16
 8001c96:	462c      	mov	r4, r5
 8001c98:	ed51 6a04 	vldr	s13, [r1, #-16]
 8001c9c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8001ca0:	ed11 7a03 	vldr	s14, [r1, #-12]
 8001ca4:	ed13 4a03 	vldr	s8, [r3, #-12]
 8001ca8:	ed51 7a02 	vldr	s15, [r1, #-8]
 8001cac:	ed53 4a02 	vldr	s9, [r3, #-8]
 8001cb0:	ed11 6a01 	vldr	s12, [r1, #-4]
 8001cb4:	ed13 5a01 	vldr	s10, [r3, #-4]
 8001cb8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8001cbc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8001cc0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8001cc4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001cc8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8001ccc:	ee66 6a05 	vmul.f32	s13, s12, s10
 8001cd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cd4:	3c01      	subs	r4, #1
 8001cd6:	f101 0110 	add.w	r1, r1, #16
 8001cda:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8001cde:	f103 0310 	add.w	r3, r3, #16
 8001ce2:	d1d9      	bne.n	8001c98 <arm_correlate_f32+0x400>
 8001ce4:	012d      	lsls	r5, r5, #4
 8001ce6:	1941      	adds	r1, r0, r5
 8001ce8:	4415      	add	r5, r2
 8001cea:	f016 0303 	ands.w	r3, r6, #3
 8001cee:	d01b      	beq.n	8001d28 <arm_correlate_f32+0x490>
 8001cf0:	edd5 7a00 	vldr	s15, [r5]
 8001cf4:	ed91 7a00 	vldr	s14, [r1]
 8001cf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001d02:	d011      	beq.n	8001d28 <arm_correlate_f32+0x490>
 8001d04:	edd5 7a01 	vldr	s15, [r5, #4]
 8001d08:	ed91 7a01 	vldr	s14, [r1, #4]
 8001d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001d16:	d007      	beq.n	8001d28 <arm_correlate_f32+0x490>
 8001d18:	edd1 7a02 	vldr	s15, [r1, #8]
 8001d1c:	ed95 7a02 	vldr	s14, [r5, #8]
 8001d20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d24:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001d28:	3e01      	subs	r6, #1
 8001d2a:	edcc 5a00 	vstr	s11, [ip]
 8001d2e:	f100 0004 	add.w	r0, r0, #4
 8001d32:	44f4      	add	ip, lr
 8001d34:	d1a6      	bne.n	8001c84 <arm_correlate_f32+0x3ec>
 8001d36:	b00d      	add	sp, #52	; 0x34
 8001d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d3c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8001d40:	4606      	mov	r6, r0
 8001d42:	3c02      	subs	r4, #2
 8001d44:	4610      	mov	r0, r2
 8001d46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001d48:	440c      	add	r4, r1
 8001d4a:	460d      	mov	r5, r1
 8001d4c:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8001d50:	4619      	mov	r1, r3
 8001d52:	4632      	mov	r2, r6
 8001d54:	f06f 0e03 	mvn.w	lr, #3
 8001d58:	462b      	mov	r3, r5
 8001d5a:	e5aa      	b.n	80018b2 <arm_correlate_f32+0x1a>
 8001d5c:	9902      	ldr	r1, [sp, #8]
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	d090      	beq.n	8001c84 <arm_correlate_f32+0x3ec>
 8001d62:	9902      	ldr	r1, [sp, #8]
 8001d64:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8001a18 <arm_correlate_f32+0x180>
 8001d68:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8001d6c:	eb00 0708 	add.w	r7, r0, r8
 8001d70:	4601      	mov	r1, r0
 8001d72:	4665      	mov	r5, ip
 8001d74:	e020      	b.n	8001db8 <arm_correlate_f32+0x520>
 8001d76:	edd2 7a00 	vldr	s15, [r2]
 8001d7a:	ecb4 7a01 	vldmia	r4!, {s14}
 8001d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d82:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001d86:	b18e      	cbz	r6, 8001dac <arm_correlate_f32+0x514>
 8001d88:	ed92 7a01 	vldr	s14, [r2, #4]
 8001d8c:	edd1 6a01 	vldr	s13, [r1, #4]
 8001d90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d9a:	d007      	beq.n	8001dac <arm_correlate_f32+0x514>
 8001d9c:	ed91 7a02 	vldr	s14, [r1, #8]
 8001da0:	edd2 6a02 	vldr	s13, [r2, #8]
 8001da4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dac:	42bc      	cmp	r4, r7
 8001dae:	edc5 7a00 	vstr	s15, [r5]
 8001db2:	4621      	mov	r1, r4
 8001db4:	4475      	add	r5, lr
 8001db6:	d00b      	beq.n	8001dd0 <arm_correlate_f32+0x538>
 8001db8:	460c      	mov	r4, r1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1db      	bne.n	8001d76 <arm_correlate_f32+0x4de>
 8001dbe:	1d0c      	adds	r4, r1, #4
 8001dc0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001e00 <arm_correlate_f32+0x568>
 8001dc4:	42bc      	cmp	r4, r7
 8001dc6:	edc5 7a00 	vstr	s15, [r5]
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4475      	add	r5, lr
 8001dce:	d1f3      	bne.n	8001db8 <arm_correlate_f32+0x520>
 8001dd0:	9b02      	ldr	r3, [sp, #8]
 8001dd2:	4440      	add	r0, r8
 8001dd4:	fb0e cc03 	mla	ip, lr, r3, ip
 8001dd8:	2e00      	cmp	r6, #0
 8001dda:	d0ac      	beq.n	8001d36 <arm_correlate_f32+0x49e>
 8001ddc:	08b5      	lsrs	r5, r6, #2
 8001dde:	eddf 5a08 	vldr	s11, [pc, #32]	; 8001e00 <arm_correlate_f32+0x568>
 8001de2:	f47f af54 	bne.w	8001c8e <arm_correlate_f32+0x3f6>
 8001de6:	4615      	mov	r5, r2
 8001de8:	4601      	mov	r1, r0
 8001dea:	e77e      	b.n	8001cea <arm_correlate_f32+0x452>
 8001dec:	4605      	mov	r5, r0
 8001dee:	e6cf      	b.n	8001b90 <arm_correlate_f32+0x2f8>
 8001df0:	9902      	ldr	r1, [sp, #8]
 8001df2:	2900      	cmp	r1, #0
 8001df4:	d1b5      	bne.n	8001d62 <arm_correlate_f32+0x4ca>
 8001df6:	e79e      	b.n	8001d36 <arm_correlate_f32+0x49e>
 8001df8:	eddf 7a01 	vldr	s15, [pc, #4]	; 8001e00 <arm_correlate_f32+0x568>
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	e5c7      	b.n	8001990 <arm_correlate_f32+0xf8>
 8001e00:	00000000 	.word	0x00000000

08001e04 <arm_conv_f32>:
 8001e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e08:	b08b      	sub	sp, #44	; 0x2c
 8001e0a:	4299      	cmp	r1, r3
 8001e0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8001e0e:	d205      	bcs.n	8001e1c <arm_conv_f32+0x18>
 8001e10:	4606      	mov	r6, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4632      	mov	r2, r6
 8001e1a:	4623      	mov	r3, r4
 8001e1c:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8001e20:	3101      	adds	r1, #1
 8001e22:	1ac9      	subs	r1, r1, r3
 8001e24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8001e28:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001e2c:	9101      	str	r1, [sp, #4]
 8001e2e:	1e59      	subs	r1, r3, #1
 8001e30:	eb02 070b 	add.w	r7, r2, fp
 8001e34:	f000 8277 	beq.w	8002326 <arm_conv_f32+0x522>
 8001e38:	eddf 7aaf 	vldr	s15, [pc, #700]	; 80020f8 <arm_conv_f32+0x2f4>
 8001e3c:	f102 0904 	add.w	r9, r2, #4
 8001e40:	46aa      	mov	sl, r5
 8001e42:	4680      	mov	r8, r0
 8001e44:	2401      	movs	r4, #1
 8001e46:	f014 0603 	ands.w	r6, r4, #3
 8001e4a:	d01b      	beq.n	8001e84 <arm_conv_f32+0x80>
 8001e4c:	ed92 7a00 	vldr	s14, [r2]
 8001e50:	edd8 6a00 	vldr	s13, [r8]
 8001e54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001e58:	3e01      	subs	r6, #1
 8001e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e5e:	d011      	beq.n	8001e84 <arm_conv_f32+0x80>
 8001e60:	ed12 7a01 	vldr	s14, [r2, #-4]
 8001e64:	edd8 6a01 	vldr	s13, [r8, #4]
 8001e68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001e6c:	2e01      	cmp	r6, #1
 8001e6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e72:	d007      	beq.n	8001e84 <arm_conv_f32+0x80>
 8001e74:	ed98 7a02 	vldr	s14, [r8, #8]
 8001e78:	ed52 6a02 	vldr	s13, [r2, #-8]
 8001e7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e84:	3401      	adds	r4, #1
 8001e86:	42a3      	cmp	r3, r4
 8001e88:	ecea 7a01 	vstmia	sl!, {s15}
 8001e8c:	464a      	mov	r2, r9
 8001e8e:	d03a      	beq.n	8001f06 <arm_conv_f32+0x102>
 8001e90:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8001e94:	f000 824c 	beq.w	8002330 <arm_conv_f32+0x52c>
 8001e98:	f100 0210 	add.w	r2, r0, #16
 8001e9c:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8001ea0:	eddf 7a95 	vldr	s15, [pc, #596]	; 80020f8 <arm_conv_f32+0x2f4>
 8001ea4:	eb02 0c08 	add.w	ip, r2, r8
 8001ea8:	f1a9 0610 	sub.w	r6, r9, #16
 8001eac:	ed12 7a04 	vldr	s14, [r2, #-16]
 8001eb0:	edd6 3a04 	vldr	s7, [r6, #16]
 8001eb4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8001eb8:	ed96 4a03 	vldr	s8, [r6, #12]
 8001ebc:	ed52 6a02 	vldr	s13, [r2, #-8]
 8001ec0:	edd6 4a02 	vldr	s9, [r6, #8]
 8001ec4:	ed52 5a01 	vldr	s11, [r2, #-4]
 8001ec8:	ed96 5a01 	vldr	s10, [r6, #4]
 8001ecc:	ee27 7a23 	vmul.f32	s14, s14, s7
 8001ed0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8001ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8001edc:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001ee0:	ee65 6a85 	vmul.f32	s13, s11, s10
 8001ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee8:	3210      	adds	r2, #16
 8001eea:	4594      	cmp	ip, r2
 8001eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef0:	f1a6 0610 	sub.w	r6, r6, #16
 8001ef4:	d1da      	bne.n	8001eac <arm_conv_f32+0xa8>
 8001ef6:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8001efa:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8001efe:	4480      	add	r8, r0
 8001f00:	f109 0904 	add.w	r9, r9, #4
 8001f04:	e79f      	b.n	8001e46 <arm_conv_f32+0x42>
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	445d      	add	r5, fp
 8001f0a:	f240 80e9 	bls.w	80020e0 <arm_conv_f32+0x2dc>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	089a      	lsrs	r2, r3, #2
 8001f12:	9202      	str	r2, [sp, #8]
 8001f14:	f000 8203 	beq.w	800231e <arm_conv_f32+0x51a>
 8001f18:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8001f1c:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	f004 0603 	and.w	r6, r4, #3
 8001f26:	9203      	str	r2, [sp, #12]
 8001f28:	f1a3 0a10 	sub.w	sl, r3, #16
 8001f2c:	f1a3 020c 	sub.w	r2, r3, #12
 8001f30:	3b08      	subs	r3, #8
 8001f32:	9204      	str	r2, [sp, #16]
 8001f34:	9305      	str	r3, [sp, #20]
 8001f36:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8001f3a:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8001f3e:	9a03      	ldr	r2, [sp, #12]
 8001f40:	f100 0c1c 	add.w	ip, r0, #28
 8001f44:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8001f48:	464c      	mov	r4, r9
 8001f4a:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8001f4e:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8001f52:	f1a7 0310 	sub.w	r3, r7, #16
 8001f56:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8001f5a:	eb05 0b02 	add.w	fp, r5, r2
 8001f5e:	461f      	mov	r7, r3
 8001f60:	3510      	adds	r5, #16
 8001f62:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80020f8 <arm_conv_f32+0x2f4>
 8001f66:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8001f6a:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8001f6e:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8001f72:	eeb0 5a46 	vmov.f32	s10, s12
 8001f76:	eef0 4a46 	vmov.f32	s9, s12
 8001f7a:	eef0 5a46 	vmov.f32	s11, s12
 8001f7e:	463a      	mov	r2, r7
 8001f80:	4663      	mov	r3, ip
 8001f82:	4641      	mov	r1, r8
 8001f84:	edd2 6a04 	vldr	s13, [r2, #16]
 8001f88:	ed13 0a04 	vldr	s0, [r3, #-16]
 8001f8c:	ed92 7a03 	vldr	s14, [r2, #12]
 8001f90:	edd2 7a02 	vldr	s15, [r2, #8]
 8001f94:	edd2 0a01 	vldr	s1, [r2, #4]
 8001f98:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8001f9c:	ee62 3a26 	vmul.f32	s7, s4, s13
 8001fa0:	ee61 2a26 	vmul.f32	s5, s2, s13
 8001fa4:	ed13 1a03 	vldr	s2, [r3, #-12]
 8001fa8:	ee66 6a80 	vmul.f32	s13, s13, s0
 8001fac:	ee21 4a87 	vmul.f32	s8, s3, s14
 8001fb0:	ee73 4a24 	vadd.f32	s9, s6, s9
 8001fb4:	ee33 5a85 	vadd.f32	s10, s7, s10
 8001fb8:	ee22 3a07 	vmul.f32	s6, s4, s14
 8001fbc:	ed53 1a02 	vldr	s3, [r3, #-8]
 8001fc0:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8001fc4:	ee36 6a86 	vadd.f32	s12, s13, s12
 8001fc8:	ee60 3a07 	vmul.f32	s7, s0, s14
 8001fcc:	ee27 7a01 	vmul.f32	s14, s14, s2
 8001fd0:	ee33 3a24 	vadd.f32	s6, s6, s9
 8001fd4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8001fd8:	ee74 2a22 	vadd.f32	s5, s8, s5
 8001fdc:	ee60 4a27 	vmul.f32	s9, s0, s15
 8001fe0:	ee22 4a27 	vmul.f32	s8, s4, s15
 8001fe4:	ee73 3a85 	vadd.f32	s7, s7, s10
 8001fe8:	ed13 2a01 	vldr	s4, [r3, #-4]
 8001fec:	ee21 5a27 	vmul.f32	s10, s2, s15
 8001ff0:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8001ff4:	ee74 4a83 	vadd.f32	s9, s9, s6
 8001ff8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ffc:	ee34 4a22 	vadd.f32	s8, s8, s5
 8002000:	ee60 5a20 	vmul.f32	s11, s0, s1
 8002004:	ee21 3a20 	vmul.f32	s6, s2, s1
 8002008:	ee35 5a23 	vadd.f32	s10, s10, s7
 800200c:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8002010:	ee20 6a82 	vmul.f32	s12, s1, s4
 8002014:	3901      	subs	r1, #1
 8002016:	f1a2 0210 	sub.w	r2, r2, #16
 800201a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800201e:	ee73 4a24 	vadd.f32	s9, s6, s9
 8002022:	ee37 5a05 	vadd.f32	s10, s14, s10
 8002026:	ee36 6a27 	vadd.f32	s12, s12, s15
 800202a:	f103 0310 	add.w	r3, r3, #16
 800202e:	d1a9      	bne.n	8001f84 <arm_conv_f32+0x180>
 8002030:	eb0a 030c 	add.w	r3, sl, ip
 8002034:	2e00      	cmp	r6, #0
 8002036:	d042      	beq.n	80020be <arm_conv_f32+0x2ba>
 8002038:	edde 7a00 	vldr	s15, [lr]
 800203c:	ed93 4a00 	vldr	s8, [r3]
 8002040:	ee61 6a27 	vmul.f32	s13, s2, s15
 8002044:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8002048:	ee22 7a27 	vmul.f32	s14, s4, s15
 800204c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8002050:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8002054:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8002058:	ee35 5a07 	vadd.f32	s10, s10, s14
 800205c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002060:	eb09 030c 	add.w	r3, r9, ip
 8002064:	b35c      	cbz	r4, 80020be <arm_conv_f32+0x2ba>
 8002066:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800206a:	edd3 6a00 	vldr	s13, [r3]
 800206e:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8002072:	ee22 3a27 	vmul.f32	s6, s4, s15
 8002076:	ee67 3a84 	vmul.f32	s7, s15, s8
 800207a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800207e:	2c01      	cmp	r4, #1
 8002080:	ee75 5a87 	vadd.f32	s11, s11, s14
 8002084:	ee74 4a83 	vadd.f32	s9, s9, s6
 8002088:	ee35 5a23 	vadd.f32	s10, s10, s7
 800208c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002090:	eb00 030c 	add.w	r3, r0, ip
 8002094:	d013      	beq.n	80020be <arm_conv_f32+0x2ba>
 8002096:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800209a:	edd3 3a00 	vldr	s7, [r3]
 800209e:	ee62 7a07 	vmul.f32	s15, s4, s14
 80020a2:	ee27 4a04 	vmul.f32	s8, s14, s8
 80020a6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80020aa:	ee27 7a23 	vmul.f32	s14, s14, s7
 80020ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80020b2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80020b6:	ee35 5a26 	vadd.f32	s10, s10, s13
 80020ba:	ee36 6a07 	vadd.f32	s12, s12, s14
 80020be:	45ab      	cmp	fp, r5
 80020c0:	ed45 5a04 	vstr	s11, [r5, #-16]
 80020c4:	ed45 4a03 	vstr	s9, [r5, #-12]
 80020c8:	ed05 5a02 	vstr	s10, [r5, #-8]
 80020cc:	ed05 6a01 	vstr	s12, [r5, #-4]
 80020d0:	f10c 0c10 	add.w	ip, ip, #16
 80020d4:	f105 0310 	add.w	r3, r5, #16
 80020d8:	f000 809e 	beq.w	8002218 <arm_conv_f32+0x414>
 80020dc:	461d      	mov	r5, r3
 80020de:	e740      	b.n	8001f62 <arm_conv_f32+0x15e>
 80020e0:	9a01      	ldr	r2, [sp, #4]
 80020e2:	46ac      	mov	ip, r5
 80020e4:	2a00      	cmp	r2, #0
 80020e6:	d037      	beq.n	8002158 <arm_conv_f32+0x354>
 80020e8:	9a01      	ldr	r2, [sp, #4]
 80020ea:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80020f8 <arm_conv_f32+0x2f4>
 80020ee:	0096      	lsls	r6, r2, #2
 80020f0:	eb05 0c06 	add.w	ip, r5, r6
 80020f4:	4604      	mov	r4, r0
 80020f6:	e021      	b.n	800213c <arm_conv_f32+0x338>
 80020f8:	00000000 	.word	0x00000000
 80020fc:	edd7 7a00 	vldr	s15, [r7]
 8002100:	ecb2 7a01 	vldmia	r2!, {s14}
 8002104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002108:	ee77 7a86 	vadd.f32	s15, s15, s12
 800210c:	b189      	cbz	r1, 8002132 <arm_conv_f32+0x32e>
 800210e:	ed17 7a01 	vldr	s14, [r7, #-4]
 8002112:	edd4 6a01 	vldr	s13, [r4, #4]
 8002116:	ee27 7a26 	vmul.f32	s14, s14, s13
 800211a:	2b02      	cmp	r3, #2
 800211c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002120:	d007      	beq.n	8002132 <arm_conv_f32+0x32e>
 8002122:	ed94 7a02 	vldr	s14, [r4, #8]
 8002126:	ed57 6a02 	vldr	s13, [r7, #-8]
 800212a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800212e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002132:	ece5 7a01 	vstmia	r5!, {s15}
 8002136:	4565      	cmp	r5, ip
 8002138:	4614      	mov	r4, r2
 800213a:	d00a      	beq.n	8002152 <arm_conv_f32+0x34e>
 800213c:	4622      	mov	r2, r4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1dc      	bne.n	80020fc <arm_conv_f32+0x2f8>
 8002142:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80020f8 <arm_conv_f32+0x2f4>
 8002146:	ece5 7a01 	vstmia	r5!, {s15}
 800214a:	1d22      	adds	r2, r4, #4
 800214c:	4565      	cmp	r5, ip
 800214e:	4614      	mov	r4, r2
 8002150:	d1f4      	bne.n	800213c <arm_conv_f32+0x338>
 8002152:	4430      	add	r0, r6
 8002154:	2900      	cmp	r1, #0
 8002156:	d059      	beq.n	800220c <arm_conv_f32+0x408>
 8002158:	088d      	lsrs	r5, r1, #2
 800215a:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 80020f8 <arm_conv_f32+0x2f4>
 800215e:	d058      	beq.n	8002212 <arm_conv_f32+0x40e>
 8002160:	f100 0210 	add.w	r2, r0, #16
 8002164:	f1a7 0310 	sub.w	r3, r7, #16
 8002168:	462c      	mov	r4, r5
 800216a:	ed52 6a04 	vldr	s13, [r2, #-16]
 800216e:	edd3 3a04 	vldr	s7, [r3, #16]
 8002172:	ed12 7a03 	vldr	s14, [r2, #-12]
 8002176:	ed93 4a03 	vldr	s8, [r3, #12]
 800217a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800217e:	edd3 4a02 	vldr	s9, [r3, #8]
 8002182:	ed12 6a01 	vldr	s12, [r2, #-4]
 8002186:	ed93 5a01 	vldr	s10, [r3, #4]
 800218a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800218e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8002192:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8002196:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800219a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800219e:	ee66 6a05 	vmul.f32	s13, s12, s10
 80021a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021a6:	3c01      	subs	r4, #1
 80021a8:	f102 0210 	add.w	r2, r2, #16
 80021ac:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80021b0:	f1a3 0310 	sub.w	r3, r3, #16
 80021b4:	d1d9      	bne.n	800216a <arm_conv_f32+0x366>
 80021b6:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 80021ba:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80021be:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80021c2:	f011 0203 	ands.w	r2, r1, #3
 80021c6:	d01b      	beq.n	8002200 <arm_conv_f32+0x3fc>
 80021c8:	edd3 7a00 	vldr	s15, [r3]
 80021cc:	ed95 7a00 	vldr	s14, [r5]
 80021d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d4:	3a01      	subs	r2, #1
 80021d6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80021da:	d011      	beq.n	8002200 <arm_conv_f32+0x3fc>
 80021dc:	ed53 7a01 	vldr	s15, [r3, #-4]
 80021e0:	ed95 7a01 	vldr	s14, [r5, #4]
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e8:	2a01      	cmp	r2, #1
 80021ea:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80021ee:	d007      	beq.n	8002200 <arm_conv_f32+0x3fc>
 80021f0:	edd5 7a02 	vldr	s15, [r5, #8]
 80021f4:	ed13 7a02 	vldr	s14, [r3, #-8]
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002200:	3901      	subs	r1, #1
 8002202:	ecec 5a01 	vstmia	ip!, {s11}
 8002206:	f100 0004 	add.w	r0, r0, #4
 800220a:	d1a5      	bne.n	8002158 <arm_conv_f32+0x354>
 800220c:	b00b      	add	sp, #44	; 0x2c
 800220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002212:	463b      	mov	r3, r7
 8002214:	4605      	mov	r5, r0
 8002216:	e7d4      	b.n	80021c2 <arm_conv_f32+0x3be>
 8002218:	9b02      	ldr	r3, [sp, #8]
 800221a:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	9b03      	ldr	r3, [sp, #12]
 8002224:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8002228:	4403      	add	r3, r0
 800222a:	465d      	mov	r5, fp
 800222c:	469e      	mov	lr, r3
 800222e:	9b01      	ldr	r3, [sp, #4]
 8002230:	f013 0c03 	ands.w	ip, r3, #3
 8002234:	d075      	beq.n	8002322 <arm_conv_f32+0x51e>
 8002236:	9b02      	ldr	r3, [sp, #8]
 8002238:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800223c:	f004 0403 	and.w	r4, r4, #3
 8002240:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8002244:	f103 0801 	add.w	r8, r3, #1
 8002248:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800224c:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8002250:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8002254:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002258:	f1a7 0210 	sub.w	r2, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	465b      	mov	r3, fp
 8002260:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8002264:	468b      	mov	fp, r1
 8002266:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800226a:	4621      	mov	r1, r4
 800226c:	4617      	mov	r7, r2
 800226e:	461c      	mov	r4, r3
 8002270:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 80020f8 <arm_conv_f32+0x2f4>
 8002274:	f10e 0210 	add.w	r2, lr, #16
 8002278:	463b      	mov	r3, r7
 800227a:	4656      	mov	r6, sl
 800227c:	ed12 7a04 	vldr	s14, [r2, #-16]
 8002280:	edd3 3a04 	vldr	s7, [r3, #16]
 8002284:	ed12 6a03 	vldr	s12, [r2, #-12]
 8002288:	ed93 4a03 	vldr	s8, [r3, #12]
 800228c:	ed52 6a02 	vldr	s13, [r2, #-8]
 8002290:	edd3 4a02 	vldr	s9, [r3, #8]
 8002294:	ed52 5a01 	vldr	s11, [r2, #-4]
 8002298:	ed93 5a01 	vldr	s10, [r3, #4]
 800229c:	ee27 7a23 	vmul.f32	s14, s14, s7
 80022a0:	ee26 6a04 	vmul.f32	s12, s12, s8
 80022a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a8:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80022ac:	ee76 7a27 	vadd.f32	s15, s12, s15
 80022b0:	ee65 6a85 	vmul.f32	s13, s11, s10
 80022b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b8:	3e01      	subs	r6, #1
 80022ba:	f102 0210 	add.w	r2, r2, #16
 80022be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022c2:	f1a3 0310 	sub.w	r3, r3, #16
 80022c6:	d1d9      	bne.n	800227c <arm_conv_f32+0x478>
 80022c8:	4486      	add	lr, r0
 80022ca:	b1d1      	cbz	r1, 8002302 <arm_conv_f32+0x4fe>
 80022cc:	ed99 7a00 	vldr	s14, [r9]
 80022d0:	edde 6a00 	vldr	s13, [lr]
 80022d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022dc:	b18c      	cbz	r4, 8002302 <arm_conv_f32+0x4fe>
 80022de:	ed19 7a01 	vldr	s14, [r9, #-4]
 80022e2:	edde 6a01 	vldr	s13, [lr, #4]
 80022e6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022ea:	2c01      	cmp	r4, #1
 80022ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022f0:	d007      	beq.n	8002302 <arm_conv_f32+0x4fe>
 80022f2:	ed9e 7a02 	vldr	s14, [lr, #8]
 80022f6:	ed59 6a02 	vldr	s13, [r9, #-8]
 80022fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80022fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002302:	ece5 7a01 	vstmia	r5!, {s15}
 8002306:	4565      	cmp	r5, ip
 8002308:	46c6      	mov	lr, r8
 800230a:	f108 0804 	add.w	r8, r8, #4
 800230e:	d1af      	bne.n	8002270 <arm_conv_f32+0x46c>
 8002310:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8002314:	4659      	mov	r1, fp
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800231c:	e71c      	b.n	8002158 <arm_conv_f32+0x354>
 800231e:	4686      	mov	lr, r0
 8002320:	e785      	b.n	800222e <arm_conv_f32+0x42a>
 8002322:	46ac      	mov	ip, r5
 8002324:	e7f7      	b.n	8002316 <arm_conv_f32+0x512>
 8002326:	9a01      	ldr	r2, [sp, #4]
 8002328:	2a00      	cmp	r2, #0
 800232a:	f47f aedd 	bne.w	80020e8 <arm_conv_f32+0x2e4>
 800232e:	e76d      	b.n	800220c <arm_conv_f32+0x408>
 8002330:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 80020f8 <arm_conv_f32+0x2f4>
 8002334:	4680      	mov	r8, r0
 8002336:	e5e3      	b.n	8001f00 <arm_conv_f32+0xfc>

08002338 <arm_sub_f32>:
 8002338:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800233c:	b4f0      	push	{r4, r5, r6, r7}
 800233e:	d033      	beq.n	80023a8 <arm_sub_f32+0x70>
 8002340:	f100 0610 	add.w	r6, r0, #16
 8002344:	f101 0510 	add.w	r5, r1, #16
 8002348:	f102 0410 	add.w	r4, r2, #16
 800234c:	4667      	mov	r7, ip
 800234e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002352:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800235a:	3f01      	subs	r7, #1
 800235c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002360:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002364:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002368:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800236c:	f106 0610 	add.w	r6, r6, #16
 8002370:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002374:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002378:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800237c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002380:	f105 0510 	add.w	r5, r5, #16
 8002384:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002388:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800238c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002390:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002394:	f104 0410 	add.w	r4, r4, #16
 8002398:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800239c:	d1d7      	bne.n	800234e <arm_sub_f32+0x16>
 800239e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80023a2:	4420      	add	r0, r4
 80023a4:	4421      	add	r1, r4
 80023a6:	4422      	add	r2, r4
 80023a8:	f013 0303 	ands.w	r3, r3, #3
 80023ac:	d01b      	beq.n	80023e6 <arm_sub_f32+0xae>
 80023ae:	edd0 7a00 	vldr	s15, [r0]
 80023b2:	ed91 7a00 	vldr	s14, [r1]
 80023b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ba:	3b01      	subs	r3, #1
 80023bc:	edc2 7a00 	vstr	s15, [r2]
 80023c0:	d011      	beq.n	80023e6 <arm_sub_f32+0xae>
 80023c2:	edd0 7a01 	vldr	s15, [r0, #4]
 80023c6:	ed91 7a01 	vldr	s14, [r1, #4]
 80023ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80023d4:	d007      	beq.n	80023e6 <arm_sub_f32+0xae>
 80023d6:	edd0 7a02 	vldr	s15, [r0, #8]
 80023da:	ed91 7a02 	vldr	s14, [r1, #8]
 80023de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023e2:	edc2 7a02 	vstr	s15, [r2, #8]
 80023e6:	bcf0      	pop	{r4, r5, r6, r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop

080023ec <__errno>:
 80023ec:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <__errno+0x8>)
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	2000000c 	.word	0x2000000c

080023f8 <__libc_init_array>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	4d0d      	ldr	r5, [pc, #52]	; (8002430 <__libc_init_array+0x38>)
 80023fc:	4c0d      	ldr	r4, [pc, #52]	; (8002434 <__libc_init_array+0x3c>)
 80023fe:	1b64      	subs	r4, r4, r5
 8002400:	10a4      	asrs	r4, r4, #2
 8002402:	2600      	movs	r6, #0
 8002404:	42a6      	cmp	r6, r4
 8002406:	d109      	bne.n	800241c <__libc_init_array+0x24>
 8002408:	4d0b      	ldr	r5, [pc, #44]	; (8002438 <__libc_init_array+0x40>)
 800240a:	4c0c      	ldr	r4, [pc, #48]	; (800243c <__libc_init_array+0x44>)
 800240c:	f000 f850 	bl	80024b0 <_init>
 8002410:	1b64      	subs	r4, r4, r5
 8002412:	10a4      	asrs	r4, r4, #2
 8002414:	2600      	movs	r6, #0
 8002416:	42a6      	cmp	r6, r4
 8002418:	d105      	bne.n	8002426 <__libc_init_array+0x2e>
 800241a:	bd70      	pop	{r4, r5, r6, pc}
 800241c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002420:	4798      	blx	r3
 8002422:	3601      	adds	r6, #1
 8002424:	e7ee      	b.n	8002404 <__libc_init_array+0xc>
 8002426:	f855 3b04 	ldr.w	r3, [r5], #4
 800242a:	4798      	blx	r3
 800242c:	3601      	adds	r6, #1
 800242e:	e7f2      	b.n	8002416 <__libc_init_array+0x1e>
 8002430:	08002580 	.word	0x08002580
 8002434:	08002580 	.word	0x08002580
 8002438:	08002580 	.word	0x08002580
 800243c:	08002584 	.word	0x08002584

08002440 <memcpy>:
 8002440:	440a      	add	r2, r1
 8002442:	4291      	cmp	r1, r2
 8002444:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002448:	d100      	bne.n	800244c <memcpy+0xc>
 800244a:	4770      	bx	lr
 800244c:	b510      	push	{r4, lr}
 800244e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002452:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002456:	4291      	cmp	r1, r2
 8002458:	d1f9      	bne.n	800244e <memcpy+0xe>
 800245a:	bd10      	pop	{r4, pc}

0800245c <memset>:
 800245c:	4402      	add	r2, r0
 800245e:	4603      	mov	r3, r0
 8002460:	4293      	cmp	r3, r2
 8002462:	d100      	bne.n	8002466 <memset+0xa>
 8002464:	4770      	bx	lr
 8002466:	f803 1b01 	strb.w	r1, [r3], #1
 800246a:	e7f9      	b.n	8002460 <memset+0x4>

0800246c <sqrtf>:
 800246c:	b508      	push	{r3, lr}
 800246e:	ed2d 8b02 	vpush	{d8}
 8002472:	eeb0 8a40 	vmov.f32	s16, s0
 8002476:	f000 f817 	bl	80024a8 <__ieee754_sqrtf>
 800247a:	eeb4 8a48 	vcmp.f32	s16, s16
 800247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002482:	d60c      	bvs.n	800249e <sqrtf+0x32>
 8002484:	eddf 8a07 	vldr	s17, [pc, #28]	; 80024a4 <sqrtf+0x38>
 8002488:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d505      	bpl.n	800249e <sqrtf+0x32>
 8002492:	f7ff ffab 	bl	80023ec <__errno>
 8002496:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800249a:	2321      	movs	r3, #33	; 0x21
 800249c:	6003      	str	r3, [r0, #0]
 800249e:	ecbd 8b02 	vpop	{d8}
 80024a2:	bd08      	pop	{r3, pc}
 80024a4:	00000000 	.word	0x00000000

080024a8 <__ieee754_sqrtf>:
 80024a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80024ac:	4770      	bx	lr
	...

080024b0 <_init>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr

080024bc <_fini>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr
