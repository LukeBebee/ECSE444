
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e4c  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800600c  0800600c  0001600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068f8  080068f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006900  08006900  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006900  08006900  00016900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  20000070  08006978  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  08006978  000202d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cbe  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002daa  00000000  00000000  00038d5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003cd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca0b  00000000  00000000  0003deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163ba  00000000  00000000  0006a8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111745  00000000  00000000  00080c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001923c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005478  00000000  00000000  00192488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  00197900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005ff4 	.word	0x08005ff4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	08005ff4 	.word	0x08005ff4

08000200 <__aeabi_dmul>:
 8000200:	b570      	push	{r4, r5, r6, lr}
 8000202:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000206:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800020a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800020e:	bf1d      	ittte	ne
 8000210:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000214:	ea94 0f0c 	teqne	r4, ip
 8000218:	ea95 0f0c 	teqne	r5, ip
 800021c:	f000 f8de 	bleq	80003dc <__aeabi_dmul+0x1dc>
 8000220:	442c      	add	r4, r5
 8000222:	ea81 0603 	eor.w	r6, r1, r3
 8000226:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800022a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800022e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000232:	bf18      	it	ne
 8000234:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000238:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800023c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000240:	d038      	beq.n	80002b4 <__aeabi_dmul+0xb4>
 8000242:	fba0 ce02 	umull	ip, lr, r0, r2
 8000246:	f04f 0500 	mov.w	r5, #0
 800024a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800024e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000252:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000256:	f04f 0600 	mov.w	r6, #0
 800025a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800025e:	f09c 0f00 	teq	ip, #0
 8000262:	bf18      	it	ne
 8000264:	f04e 0e01 	orrne.w	lr, lr, #1
 8000268:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800026c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000270:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000274:	d204      	bcs.n	8000280 <__aeabi_dmul+0x80>
 8000276:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800027a:	416d      	adcs	r5, r5
 800027c:	eb46 0606 	adc.w	r6, r6, r6
 8000280:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000284:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000288:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800028c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000290:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000294:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000298:	bf88      	it	hi
 800029a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800029e:	d81e      	bhi.n	80002de <__aeabi_dmul+0xde>
 80002a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002b8:	ea46 0101 	orr.w	r1, r6, r1
 80002bc:	ea40 0002 	orr.w	r0, r0, r2
 80002c0:	ea81 0103 	eor.w	r1, r1, r3
 80002c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002c8:	bfc2      	ittt	gt
 80002ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	popgt	{r4, r5, r6, pc}
 80002d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d8:	f04f 0e00 	mov.w	lr, #0
 80002dc:	3c01      	subs	r4, #1
 80002de:	f300 80ab 	bgt.w	8000438 <__aeabi_dmul+0x238>
 80002e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002e6:	bfde      	ittt	le
 80002e8:	2000      	movle	r0, #0
 80002ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ee:	bd70      	pople	{r4, r5, r6, pc}
 80002f0:	f1c4 0400 	rsb	r4, r4, #0
 80002f4:	3c20      	subs	r4, #32
 80002f6:	da35      	bge.n	8000364 <__aeabi_dmul+0x164>
 80002f8:	340c      	adds	r4, #12
 80002fa:	dc1b      	bgt.n	8000334 <__aeabi_dmul+0x134>
 80002fc:	f104 0414 	add.w	r4, r4, #20
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f305 	lsl.w	r3, r0, r5
 8000308:	fa20 f004 	lsr.w	r0, r0, r4
 800030c:	fa01 f205 	lsl.w	r2, r1, r5
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800031c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000320:	fa21 f604 	lsr.w	r6, r1, r4
 8000324:	eb42 0106 	adc.w	r1, r2, r6
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 040c 	rsb	r4, r4, #12
 8000338:	f1c4 0520 	rsb	r5, r4, #32
 800033c:	fa00 f304 	lsl.w	r3, r0, r4
 8000340:	fa20 f005 	lsr.w	r0, r0, r5
 8000344:	fa01 f204 	lsl.w	r2, r1, r4
 8000348:	ea40 0002 	orr.w	r0, r0, r2
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 0520 	rsb	r5, r4, #32
 8000368:	fa00 f205 	lsl.w	r2, r0, r5
 800036c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000370:	fa20 f304 	lsr.w	r3, r0, r4
 8000374:	fa01 f205 	lsl.w	r2, r1, r5
 8000378:	ea43 0302 	orr.w	r3, r3, r2
 800037c:	fa21 f004 	lsr.w	r0, r1, r4
 8000380:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000384:	fa21 f204 	lsr.w	r2, r1, r4
 8000388:	ea20 0002 	bic.w	r0, r0, r2
 800038c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000390:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000394:	bf08      	it	eq
 8000396:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	f094 0f00 	teq	r4, #0
 80003a0:	d10f      	bne.n	80003c2 <__aeabi_dmul+0x1c2>
 80003a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003a6:	0040      	lsls	r0, r0, #1
 80003a8:	eb41 0101 	adc.w	r1, r1, r1
 80003ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3c01      	subeq	r4, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1a6>
 80003b6:	ea41 0106 	orr.w	r1, r1, r6
 80003ba:	f095 0f00 	teq	r5, #0
 80003be:	bf18      	it	ne
 80003c0:	4770      	bxne	lr
 80003c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003c6:	0052      	lsls	r2, r2, #1
 80003c8:	eb43 0303 	adc.w	r3, r3, r3
 80003cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3d01      	subeq	r5, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1c6>
 80003d6:	ea43 0306 	orr.w	r3, r3, r6
 80003da:	4770      	bx	lr
 80003dc:	ea94 0f0c 	teq	r4, ip
 80003e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003e4:	bf18      	it	ne
 80003e6:	ea95 0f0c 	teqne	r5, ip
 80003ea:	d00c      	beq.n	8000406 <__aeabi_dmul+0x206>
 80003ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f0:	bf18      	it	ne
 80003f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f6:	d1d1      	bne.n	800039c <__aeabi_dmul+0x19c>
 80003f8:	ea81 0103 	eor.w	r1, r1, r3
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	f04f 0000 	mov.w	r0, #0
 8000404:	bd70      	pop	{r4, r5, r6, pc}
 8000406:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800040a:	bf06      	itte	eq
 800040c:	4610      	moveq	r0, r2
 800040e:	4619      	moveq	r1, r3
 8000410:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000414:	d019      	beq.n	800044a <__aeabi_dmul+0x24a>
 8000416:	ea94 0f0c 	teq	r4, ip
 800041a:	d102      	bne.n	8000422 <__aeabi_dmul+0x222>
 800041c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000420:	d113      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000422:	ea95 0f0c 	teq	r5, ip
 8000426:	d105      	bne.n	8000434 <__aeabi_dmul+0x234>
 8000428:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800042c:	bf1c      	itt	ne
 800042e:	4610      	movne	r0, r2
 8000430:	4619      	movne	r1, r3
 8000432:	d10a      	bne.n	800044a <__aeabi_dmul+0x24a>
 8000434:	ea81 0103 	eor.w	r1, r1, r3
 8000438:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800043c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd70      	pop	{r4, r5, r6, pc}
 800044a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800044e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000452:	bd70      	pop	{r4, r5, r6, pc}

08000454 <__aeabi_drsub>:
 8000454:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e002      	b.n	8000460 <__adddf3>
 800045a:	bf00      	nop

0800045c <__aeabi_dsub>:
 800045c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000460 <__adddf3>:
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000466:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800046a:	ea94 0f05 	teq	r4, r5
 800046e:	bf08      	it	eq
 8000470:	ea90 0f02 	teqeq	r0, r2
 8000474:	bf1f      	itttt	ne
 8000476:	ea54 0c00 	orrsne.w	ip, r4, r0
 800047a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000482:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000486:	f000 80e2 	beq.w	800064e <__adddf3+0x1ee>
 800048a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000492:	bfb8      	it	lt
 8000494:	426d      	neglt	r5, r5
 8000496:	dd0c      	ble.n	80004b2 <__adddf3+0x52>
 8000498:	442c      	add	r4, r5
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	ea82 0000 	eor.w	r0, r2, r0
 80004a6:	ea83 0101 	eor.w	r1, r3, r1
 80004aa:	ea80 0202 	eor.w	r2, r0, r2
 80004ae:	ea81 0303 	eor.w	r3, r1, r3
 80004b2:	2d36      	cmp	r5, #54	; 0x36
 80004b4:	bf88      	it	hi
 80004b6:	bd30      	pophi	{r4, r5, pc}
 80004b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c8:	d002      	beq.n	80004d0 <__adddf3+0x70>
 80004ca:	4240      	negs	r0, r0
 80004cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004dc:	d002      	beq.n	80004e4 <__adddf3+0x84>
 80004de:	4252      	negs	r2, r2
 80004e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e4:	ea94 0f05 	teq	r4, r5
 80004e8:	f000 80a7 	beq.w	800063a <__adddf3+0x1da>
 80004ec:	f1a4 0401 	sub.w	r4, r4, #1
 80004f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f4:	db0d      	blt.n	8000512 <__adddf3+0xb2>
 80004f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004fa:	fa22 f205 	lsr.w	r2, r2, r5
 80004fe:	1880      	adds	r0, r0, r2
 8000500:	f141 0100 	adc.w	r1, r1, #0
 8000504:	fa03 f20e 	lsl.w	r2, r3, lr
 8000508:	1880      	adds	r0, r0, r2
 800050a:	fa43 f305 	asr.w	r3, r3, r5
 800050e:	4159      	adcs	r1, r3
 8000510:	e00e      	b.n	8000530 <__adddf3+0xd0>
 8000512:	f1a5 0520 	sub.w	r5, r5, #32
 8000516:	f10e 0e20 	add.w	lr, lr, #32
 800051a:	2a01      	cmp	r2, #1
 800051c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000520:	bf28      	it	cs
 8000522:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	18c0      	adds	r0, r0, r3
 800052c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	d507      	bpl.n	8000546 <__adddf3+0xe6>
 8000536:	f04f 0e00 	mov.w	lr, #0
 800053a:	f1dc 0c00 	rsbs	ip, ip, #0
 800053e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000542:	eb6e 0101 	sbc.w	r1, lr, r1
 8000546:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800054a:	d31b      	bcc.n	8000584 <__adddf3+0x124>
 800054c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000550:	d30c      	bcc.n	800056c <__adddf3+0x10c>
 8000552:	0849      	lsrs	r1, r1, #1
 8000554:	ea5f 0030 	movs.w	r0, r0, rrx
 8000558:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800055c:	f104 0401 	add.w	r4, r4, #1
 8000560:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000564:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000568:	f080 809a 	bcs.w	80006a0 <__adddf3+0x240>
 800056c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	ea41 0105 	orr.w	r1, r1, r5
 8000582:	bd30      	pop	{r4, r5, pc}
 8000584:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000588:	4140      	adcs	r0, r0
 800058a:	eb41 0101 	adc.w	r1, r1, r1
 800058e:	3c01      	subs	r4, #1
 8000590:	bf28      	it	cs
 8000592:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000596:	d2e9      	bcs.n	800056c <__adddf3+0x10c>
 8000598:	f091 0f00 	teq	r1, #0
 800059c:	bf04      	itt	eq
 800059e:	4601      	moveq	r1, r0
 80005a0:	2000      	moveq	r0, #0
 80005a2:	fab1 f381 	clz	r3, r1
 80005a6:	bf08      	it	eq
 80005a8:	3320      	addeq	r3, #32
 80005aa:	f1a3 030b 	sub.w	r3, r3, #11
 80005ae:	f1b3 0220 	subs.w	r2, r3, #32
 80005b2:	da0c      	bge.n	80005ce <__adddf3+0x16e>
 80005b4:	320c      	adds	r2, #12
 80005b6:	dd08      	ble.n	80005ca <__adddf3+0x16a>
 80005b8:	f102 0c14 	add.w	ip, r2, #20
 80005bc:	f1c2 020c 	rsb	r2, r2, #12
 80005c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c4:	fa21 f102 	lsr.w	r1, r1, r2
 80005c8:	e00c      	b.n	80005e4 <__adddf3+0x184>
 80005ca:	f102 0214 	add.w	r2, r2, #20
 80005ce:	bfd8      	it	le
 80005d0:	f1c2 0c20 	rsble	ip, r2, #32
 80005d4:	fa01 f102 	lsl.w	r1, r1, r2
 80005d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005dc:	bfdc      	itt	le
 80005de:	ea41 010c 	orrle.w	r1, r1, ip
 80005e2:	4090      	lslle	r0, r2
 80005e4:	1ae4      	subs	r4, r4, r3
 80005e6:	bfa2      	ittt	ge
 80005e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005ec:	4329      	orrge	r1, r5
 80005ee:	bd30      	popge	{r4, r5, pc}
 80005f0:	ea6f 0404 	mvn.w	r4, r4
 80005f4:	3c1f      	subs	r4, #31
 80005f6:	da1c      	bge.n	8000632 <__adddf3+0x1d2>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc0e      	bgt.n	800061a <__adddf3+0x1ba>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0220 	rsb	r2, r4, #32
 8000604:	fa20 f004 	lsr.w	r0, r0, r4
 8000608:	fa01 f302 	lsl.w	r3, r1, r2
 800060c:	ea40 0003 	orr.w	r0, r0, r3
 8000610:	fa21 f304 	lsr.w	r3, r1, r4
 8000614:	ea45 0103 	orr.w	r1, r5, r3
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f1c4 040c 	rsb	r4, r4, #12
 800061e:	f1c4 0220 	rsb	r2, r4, #32
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 f304 	lsl.w	r3, r1, r4
 800062a:	ea40 0003 	orr.w	r0, r0, r3
 800062e:	4629      	mov	r1, r5
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	fa21 f004 	lsr.w	r0, r1, r4
 8000636:	4629      	mov	r1, r5
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f094 0f00 	teq	r4, #0
 800063e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000642:	bf06      	itte	eq
 8000644:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000648:	3401      	addeq	r4, #1
 800064a:	3d01      	subne	r5, #1
 800064c:	e74e      	b.n	80004ec <__adddf3+0x8c>
 800064e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000652:	bf18      	it	ne
 8000654:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000658:	d029      	beq.n	80006ae <__adddf3+0x24e>
 800065a:	ea94 0f05 	teq	r4, r5
 800065e:	bf08      	it	eq
 8000660:	ea90 0f02 	teqeq	r0, r2
 8000664:	d005      	beq.n	8000672 <__adddf3+0x212>
 8000666:	ea54 0c00 	orrs.w	ip, r4, r0
 800066a:	bf04      	itt	eq
 800066c:	4619      	moveq	r1, r3
 800066e:	4610      	moveq	r0, r2
 8000670:	bd30      	pop	{r4, r5, pc}
 8000672:	ea91 0f03 	teq	r1, r3
 8000676:	bf1e      	ittt	ne
 8000678:	2100      	movne	r1, #0
 800067a:	2000      	movne	r0, #0
 800067c:	bd30      	popne	{r4, r5, pc}
 800067e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000682:	d105      	bne.n	8000690 <__adddf3+0x230>
 8000684:	0040      	lsls	r0, r0, #1
 8000686:	4149      	adcs	r1, r1
 8000688:	bf28      	it	cs
 800068a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000694:	bf3c      	itt	cc
 8000696:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800069a:	bd30      	popcc	{r4, r5, pc}
 800069c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a8:	f04f 0000 	mov.w	r0, #0
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006b2:	bf1a      	itte	ne
 80006b4:	4619      	movne	r1, r3
 80006b6:	4610      	movne	r0, r2
 80006b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006bc:	bf1c      	itt	ne
 80006be:	460b      	movne	r3, r1
 80006c0:	4602      	movne	r2, r0
 80006c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c6:	bf06      	itte	eq
 80006c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006cc:	ea91 0f03 	teqeq	r1, r3
 80006d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	bf00      	nop

080006d8 <__aeabi_ui2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f04f 0500 	mov.w	r5, #0
 80006f0:	f04f 0100 	mov.w	r1, #0
 80006f4:	e750      	b.n	8000598 <__adddf3+0x138>
 80006f6:	bf00      	nop

080006f8 <__aeabi_i2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000710:	bf48      	it	mi
 8000712:	4240      	negmi	r0, r0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e73e      	b.n	8000598 <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_f2d>:
 800071c:	0042      	lsls	r2, r0, #1
 800071e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000722:	ea4f 0131 	mov.w	r1, r1, rrx
 8000726:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800072a:	bf1f      	itttt	ne
 800072c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000730:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000734:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000738:	4770      	bxne	lr
 800073a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073e:	bf08      	it	eq
 8000740:	4770      	bxeq	lr
 8000742:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000746:	bf04      	itt	eq
 8000748:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	e71c      	b.n	8000598 <__adddf3+0x138>
 800075e:	bf00      	nop

08000760 <__aeabi_ul2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f04f 0500 	mov.w	r5, #0
 800076e:	e00a      	b.n	8000786 <__aeabi_l2d+0x16>

08000770 <__aeabi_l2d>:
 8000770:	ea50 0201 	orrs.w	r2, r0, r1
 8000774:	bf08      	it	eq
 8000776:	4770      	bxeq	lr
 8000778:	b530      	push	{r4, r5, lr}
 800077a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077e:	d502      	bpl.n	8000786 <__aeabi_l2d+0x16>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800078a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000792:	f43f aed8 	beq.w	8000546 <__adddf3+0xe6>
 8000796:	f04f 0203 	mov.w	r2, #3
 800079a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079e:	bf18      	it	ne
 80007a0:	3203      	addne	r2, #3
 80007a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a6:	bf18      	it	ne
 80007a8:	3203      	addne	r2, #3
 80007aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ae:	f1c2 0320 	rsb	r3, r2, #32
 80007b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80007be:	ea40 000e 	orr.w	r0, r0, lr
 80007c2:	fa21 f102 	lsr.w	r1, r1, r2
 80007c6:	4414      	add	r4, r2
 80007c8:	e6bd      	b.n	8000546 <__adddf3+0xe6>
 80007ca:	bf00      	nop

080007cc <__aeabi_d2f>:
 80007cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007d4:	bf24      	itt	cs
 80007d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007de:	d90d      	bls.n	80007fc <__aeabi_d2f+0x30>
 80007e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007f4:	bf08      	it	eq
 80007f6:	f020 0001 	biceq.w	r0, r0, #1
 80007fa:	4770      	bx	lr
 80007fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000800:	d121      	bne.n	8000846 <__aeabi_d2f+0x7a>
 8000802:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000806:	bfbc      	itt	lt
 8000808:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800080c:	4770      	bxlt	lr
 800080e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000812:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000816:	f1c2 0218 	rsb	r2, r2, #24
 800081a:	f1c2 0c20 	rsb	ip, r2, #32
 800081e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	bf18      	it	ne
 8000828:	f040 0001 	orrne.w	r0, r0, #1
 800082c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000830:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000834:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000838:	ea40 000c 	orr.w	r0, r0, ip
 800083c:	fa23 f302 	lsr.w	r3, r3, r2
 8000840:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000844:	e7cc      	b.n	80007e0 <__aeabi_d2f+0x14>
 8000846:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800084a:	d107      	bne.n	800085c <__aeabi_d2f+0x90>
 800084c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000850:	bf1e      	ittt	ne
 8000852:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000856:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800085a:	4770      	bxne	lr
 800085c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000860:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000864:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800087c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	4604      	mov	r4, r0
 80008a4:	468e      	mov	lr, r1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d14d      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008aa:	428a      	cmp	r2, r1
 80008ac:	4694      	mov	ip, r2
 80008ae:	d969      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b0:	fab2 f282 	clz	r2, r2
 80008b4:	b152      	cbz	r2, 80008cc <__udivmoddi4+0x30>
 80008b6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ba:	f1c2 0120 	rsb	r1, r2, #32
 80008be:	fa20 f101 	lsr.w	r1, r0, r1
 80008c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ca:	4094      	lsls	r4, r2
 80008cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d0:	0c21      	lsrs	r1, r4, #16
 80008d2:	fbbe f6f8 	udiv	r6, lr, r8
 80008d6:	fa1f f78c 	uxth.w	r7, ip
 80008da:	fb08 e316 	mls	r3, r8, r6, lr
 80008de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e2:	fb06 f107 	mul.w	r1, r6, r7
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80008f2:	f080 811f 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 811c 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fc:	3e02      	subs	r6, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f0f8 	udiv	r0, r3, r8
 8000908:	fb08 3310 	mls	r3, r8, r0, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb00 f707 	mul.w	r7, r0, r7
 8000914:	42a7      	cmp	r7, r4
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x92>
 8000918:	eb1c 0404 	adds.w	r4, ip, r4
 800091c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000920:	f080 810a 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000924:	42a7      	cmp	r7, r4
 8000926:	f240 8107 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	2600      	movs	r6, #0
 8000936:	b11d      	cbz	r5, 8000940 <__udivmoddi4+0xa4>
 8000938:	40d4      	lsrs	r4, r2
 800093a:	2300      	movs	r3, #0
 800093c:	e9c5 4300 	strd	r4, r3, [r5]
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d909      	bls.n	800095e <__udivmoddi4+0xc2>
 800094a:	2d00      	cmp	r5, #0
 800094c:	f000 80ef 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000950:	2600      	movs	r6, #0
 8000952:	e9c5 0100 	strd	r0, r1, [r5]
 8000956:	4630      	mov	r0, r6
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f683 	clz	r6, r3
 8000962:	2e00      	cmp	r6, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	428b      	cmp	r3, r1
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb61 0303 	sbc.w	r3, r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	469e      	mov	lr, r3
 800097a:	2d00      	cmp	r5, #0
 800097c:	d0e0      	beq.n	8000940 <__udivmoddi4+0xa4>
 800097e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000982:	e7dd      	b.n	8000940 <__udivmoddi4+0xa4>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8092 	bne.w	8000ab6 <__udivmoddi4+0x21a>
 8000992:	eba1 010c 	sub.w	r1, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2601      	movs	r6, #1
 80009a0:	0c20      	lsrs	r0, r4, #16
 80009a2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009a6:	fb07 1113 	mls	r1, r7, r3, r1
 80009aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	4288      	cmp	r0, r1
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d0:	fb07 1110 	mls	r1, r7, r0, r1
 80009d4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4608      	mov	r0, r1
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79c      	b.n	8000936 <__udivmoddi4+0x9a>
 80009fc:	f1c6 0720 	rsb	r7, r6, #32
 8000a00:	40b3      	lsls	r3, r6
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40f9      	lsrs	r1, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 1118 	mls	r1, r9, r8, r1
 8000a2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	4288      	cmp	r0, r1
 8000a36:	fa02 f206 	lsl.w	r2, r2, r6
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4461      	add	r1, ip
 8000a54:	1a09      	subs	r1, r1, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	458e      	cmp	lr, r1
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	458e      	cmp	lr, r1
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4461      	add	r1, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba1 010e 	sub.w	r1, r1, lr
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15d      	cbz	r5, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000aa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000aa6:	40f1      	lsrs	r1, r6
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	40d8      	lsrs	r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ad4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ad8:	0c0b      	lsrs	r3, r1, #16
 8000ada:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ade:	fb00 f60e 	mul.w	r6, r0, lr
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	429e      	cmp	r6, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	b289      	uxth	r1, r1
 8000b00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b04:	fb07 3316 	mls	r3, r7, r6, r3
 8000b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0101 	adds.w	r1, ip, r1
 8000b18:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3e02      	subs	r6, #2
 8000b24:	4461      	add	r1, ip
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e705      	b.n	8000940 <__udivmoddi4+0xa4>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e3      	b.n	8000900 <__udivmoddi4+0x64>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6f8      	b.n	800092e <__udivmoddi4+0x92>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4461      	add	r1, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4630      	mov	r0, r6
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f960 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f80d 	bl	8000ba0 <HAL_InitTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d002      	beq.n	8000b92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	e001      	b.n	8000b96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b92:	f004 fa79 	bl	8005088 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <HAL_InitTick+0x6c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d023      	beq.n	8000bfc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <HAL_InitTick+0x70>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_InitTick+0x6c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f96d 	bl	8000eaa <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10f      	bne.n	8000bf6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d809      	bhi.n	8000bf0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be4:	f000 f937 	bl	8000e56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_InitTick+0x74>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	e007      	b.n	8000c00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e004      	b.n	8000c00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	e001      	b.n	8000c00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000008 	.word	0x20000008
 8000c14:	20000000 	.word	0x20000000

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000004 	.word	0x20000004
 8000c3c:	2000008c 	.word	0x2000008c

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	2000008c 	.word	0x2000008c

08000c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c60:	f7ff ffee 	bl	8000c40 <HAL_GetTick>
 8000c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c70:	d005      	beq.n	8000c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_Delay+0x44>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffde 	bl	8000c40 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8f7      	bhi.n	8000c80 <HAL_Delay+0x28>
  {
  }
}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000004 	.word	0x20000004

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff29 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e68:	f7ff ff3e 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	6978      	ldr	r0, [r7, #20]
 8000e74:	f7ff ff8e 	bl	8000d94 <NVIC_EncodePriority>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7e:	4611      	mov	r1, r2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff5d 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff31 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffa2 	bl	8000dfc <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e014      	b.n	8000efe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d105      	bne.n	8000eea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f004 f8f3 	bl	80050d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2202      	movs	r2, #2
 8000eee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d101      	bne.n	8000f1c <HAL_DAC_Start+0x16>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e040      	b.n	8000f9e <HAL_DAC_Start+0x98>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2202      	movs	r2, #2
 8000f26:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2201      	movs	r2, #1
 8000f36:	409a      	lsls	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10f      	bne.n	8000f66 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d11d      	bne.n	8000f90 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f042 0201 	orr.w	r2, r2, #1
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	e014      	b.n	8000f90 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	2102      	movs	r1, #2
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d107      	bne.n	8000f90 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0202 	orr.w	r2, r2, #2
 8000f8e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2201      	movs	r2, #1
 8000f94:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b087      	sub	sp, #28
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d105      	bne.n	8000fd4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	3308      	adds	r3, #8
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e004      	b.n	8000fde <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	3314      	adds	r3, #20
 8000fdc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	795b      	ldrb	r3, [r3, #5]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_DAC_ConfigChannel+0x1c>
 800100c:	2302      	movs	r3, #2
 800100e:	e12a      	b.n	8001266 <HAL_DAC_ConfigChannel+0x272>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2202      	movs	r2, #2
 800101a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d174      	bne.n	800110e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001024:	f7ff fe0c 	bl	8000c40 <HAL_GetTick>
 8001028:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d134      	bne.n	800109a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001030:	e011      	b.n	8001056 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001032:	f7ff fe05 	bl	8000c40 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d90a      	bls.n	8001056 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	f043 0208 	orr.w	r2, r3, #8
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2203      	movs	r2, #3
 8001050:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e107      	b.n	8001266 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1e6      	bne.n	8001032 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff fdf7 	bl	8000c58 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	69d2      	ldr	r2, [r2, #28]
 8001072:	641a      	str	r2, [r3, #64]	; 0x40
 8001074:	e01e      	b.n	80010b4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001076:	f7ff fde3 	bl	8000c40 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b01      	cmp	r3, #1
 8001082:	d90a      	bls.n	800109a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	f043 0208 	orr.w	r2, r3, #8
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2203      	movs	r2, #3
 8001094:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e0e5      	b.n	8001266 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dbe8      	blt.n	8001076 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fdd7 	bl	8000c58 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	69d2      	ldr	r2, [r2, #28]
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	ea02 0103 	and.w	r1, r2, r3
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	409a      	lsls	r2, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	21ff      	movs	r1, #255	; 0xff
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	ea02 0103 	and.w	r1, r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f003 0310 	and.w	r3, r3, #16
 8001104:	409a      	lsls	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d11d      	bne.n	8001152 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f003 0310 	and.w	r3, r3, #16
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	4013      	ands	r3, r2
 8001130:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69fa      	ldr	r2, [r7, #28]
 8001146:	4313      	orrs	r3, r2
 8001148:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001158:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2207      	movs	r2, #7
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	4013      	ands	r3, r2
 800116c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	431a      	orrs	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69fa      	ldr	r2, [r7, #28]
 800118e:	4313      	orrs	r3, r2
 8001190:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6819      	ldr	r1, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011f6:	d104      	bne.n	8001202 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	e018      	b.n	8001234 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d104      	bne.n	8001214 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e00f      	b.n	8001234 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001214:	f001 fb7c 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8001218:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_DAC_ConfigChannel+0x27c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d904      	bls.n	800122c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	e003      	b.n	8001234 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001232:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6819      	ldr	r1, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	22c0      	movs	r2, #192	; 0xc0
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2201      	movs	r2, #1
 800125c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	04c4b400 	.word	0x04c4b400

08001274 <HAL_DACEx_SelfCalibrate>:
  * @retval HAL status
  * @note   Calibration runs about 7 ms.
  */

HAL_StatusTypeDef HAL_DACEx_SelfCalibrate(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

 /* Check the DAC handle allocation */
 /* Check if DAC running */
  if (hdac == NULL)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <HAL_DACEx_SelfCalibrate+0x20>
  {
    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001292:	e0fd      	b.n	8001490 <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else if (hdac->State == HAL_DAC_STATE_BUSY)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d103      	bne.n	80012a6 <HAL_DACEx_SelfCalibrate+0x32>
  {
    status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012a4:	e0f4      	b.n	8001490 <HAL_DACEx_SelfCalibrate+0x21c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hdac);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	795b      	ldrb	r3, [r3, #5]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d101      	bne.n	80012b2 <HAL_DACEx_SelfCalibrate+0x3e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e0f0      	b.n	8001494 <HAL_DACEx_SelfCalibrate+0x220>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2201      	movs	r2, #1
 80012b6:	715a      	strb	r2, [r3, #5]

    /* Store configuration */
    oldmodeconfiguration = (hdac->Instance->MCR & (DAC_MCR_MODE1 << (Channel & 0x10UL)));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2107      	movs	r1, #7
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]

    /* Disable the selected DAC channel */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_EN1 << (Channel & 0x10UL)));
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6819      	ldr	r1, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	2201      	movs	r2, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43da      	mvns	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	400a      	ands	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

    /* Set mode in MCR  for calibration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), 0U);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43da      	mvns	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	400a      	ands	r2, r1
 8001304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set DAC Channel1 DHR register to the middle value */
    tmp = (uint32_t)hdac->Instance;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	617b      	str	r3, [r7, #20]

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
    if(Channel == DAC_CHANNEL_1)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <HAL_DACEx_SelfCalibrate+0xa6>
    {
      tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3308      	adds	r3, #8
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e002      	b.n	8001320 <HAL_DACEx_SelfCalibrate+0xac>
    }
    else
    {
      tmp += DAC_DHR12R2_ALIGNMENT(DAC_ALIGN_12B_R);
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3314      	adds	r3, #20
 800131e:	617b      	str	r3, [r7, #20]
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
#if defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx)
    tmp += DAC_DHR12R1_ALIGNMENT(DAC_ALIGN_12B_R);
#endif /* STM32L451xx STM32L452xx STM32L462xx */
    *(__IO uint32_t *) tmp = 0x0800U;
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	461a      	mov	r2, r3
 8001324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001328:	6013      	str	r3, [r2, #0]

    /* Enable the selected DAC channel calibration */
    /* i.e. set DAC_CR_CENx bit */
    SET_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6819      	ldr	r1, [r3, #0]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0310 	and.w	r3, r3, #16
 8001336:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    /* Init trimming counter */
    /* Medium value */
    trimmingvalue = 16U;
 8001344:	2310      	movs	r3, #16
 8001346:	623b      	str	r3, [r7, #32]
    delta = 8U;
 8001348:	2308      	movs	r3, #8
 800134a:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 800134c:	e037      	b.n	80013be <HAL_DACEx_SelfCalibrate+0x14a>
    {
      /* Set candidate trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0310 	and.w	r3, r3, #16
 800135a:	211f      	movs	r1, #31
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	ea02 0103 	and.w	r1, r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	6a3a      	ldr	r2, [r7, #32]
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	639a      	str	r2, [r3, #56]	; 0x38

      /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
      /* i.e. minimum time needed between two calibration steps */
      HAL_Delay(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff fc6d 	bl	8000c58 <HAL_Delay>

      if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL)))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	401a      	ands	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d104      	bne.n	80013b0 <HAL_DACEx_SelfCalibrate+0x13c>
      {
        /* DAC_SR_CAL_FLAGx is HIGH try higher trimming */
        trimmingvalue -= delta;
 80013a6:	6a3a      	ldr	r2, [r7, #32]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	e003      	b.n	80013b8 <HAL_DACEx_SelfCalibrate+0x144>
      }
      else
      {
        /* DAC_SR_CAL_FLAGx is LOW try lower trimming */
        trimmingvalue += delta;
 80013b0:	6a3a      	ldr	r2, [r7, #32]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	4413      	add	r3, r2
 80013b6:	623b      	str	r3, [r7, #32]
      }
      delta >>= 1U;
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	085b      	lsrs	r3, r3, #1
 80013bc:	61fb      	str	r3, [r7, #28]
    while (delta != 0U)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1c4      	bne.n	800134e <HAL_DACEx_SelfCalibrate+0xda>
    }

    /* Still need to check if right calibration is current value or one step below */
    /* Indeed the first value that causes the DAC_SR_CAL_FLAGx bit to change from 0 to 1  */
    /* Set candidate trimming */
    MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f003 0310 	and.w	r3, r3, #16
 80013d0:	211f      	movs	r1, #31
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	ea02 0103 	and.w	r1, r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	6a3a      	ldr	r2, [r7, #32]
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38

    /* tOFFTRIMmax delay x ms as per datasheet (electrical characteristics */
    /* i.e. minimum time needed between two calibration steps */
    HAL_Delay(1U);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fc32 	bl	8000c58 <HAL_Delay>

    if ((hdac->Instance->SR & (DAC_SR_CAL_FLAG1 << (Channel & 0x10UL))) == 0UL)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d117      	bne.n	800143e <HAL_DACEx_SelfCalibrate+0x1ca>
    {
      /* OPAMP_CSR_OUTCAL is actually one value more */
      trimmingvalue++;
 800140e:	6a3b      	ldr	r3, [r7, #32]
 8001410:	3301      	adds	r3, #1
 8001412:	623b      	str	r3, [r7, #32]
      /* Set right trimming */
      MODIFY_REG(hdac->Instance->CCR, (DAC_CCR_OTRIM1 << (Channel & 0x10UL)), (trimmingvalue << (Channel & 0x10UL)));
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	211f      	movs	r1, #31
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	ea02 0103 	and.w	r1, r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	6a3a      	ldr	r2, [r7, #32]
 8001434:	409a      	lsls	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	639a      	str	r2, [r3, #56]	; 0x38
    }

    /* Disable the selected DAC channel calibration */
    /* i.e. clear DAC_CR_CENx bit */
    CLEAR_BIT((hdac->Instance->CR), (DAC_CR_CEN1 << (Channel & 0x10UL)));
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43da      	mvns	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	400a      	ands	r2, r1
 800145a:	601a      	str	r2, [r3, #0]

    sConfig->DAC_TrimmingValue = trimmingvalue;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	6a3a      	ldr	r2, [r7, #32]
 8001460:	619a      	str	r2, [r3, #24]
    sConfig->DAC_UserTrimming = DAC_TRIMMING_USER;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2201      	movs	r2, #1
 8001466:	615a      	str	r2, [r3, #20]

    /* Restore configuration */
    MODIFY_REG(hdac->Instance->MCR, (DAC_MCR_MODE1 << (Channel & 0x10UL)), oldmodeconfiguration);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	2107      	movs	r1, #7
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	ea02 0103 	and.w	r1, r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	430a      	orrs	r2, r1
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process unlocked */
    __HAL_UNLOCK(hdac);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2200      	movs	r2, #0
 800148e:	715a      	strb	r2, [r3, #5]
  }

  return status;
 8001490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001494:	4618      	mov	r0, r3
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e08d      	b.n	80015ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_DMA_Init+0x138>)
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d80f      	bhi.n	80014da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <HAL_DMA_Init+0x13c>)
 80014c2:	4413      	add	r3, r2
 80014c4:	4a45      	ldr	r2, [pc, #276]	; (80015dc <HAL_DMA_Init+0x140>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	091b      	lsrs	r3, r3, #4
 80014cc:	009a      	lsls	r2, r3, #2
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a42      	ldr	r2, [pc, #264]	; (80015e0 <HAL_DMA_Init+0x144>)
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
 80014d8:	e00e      	b.n	80014f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <HAL_DMA_Init+0x148>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <HAL_DMA_Init+0x140>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a3c      	ldr	r2, [pc, #240]	; (80015e8 <HAL_DMA_Init+0x14c>)
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800150e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001512:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800151c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f8fe 	bl	800174c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001558:	d102      	bne.n	8001560 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001568:	b2d2      	uxtb	r2, r2
 800156a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001574:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d010      	beq.n	80015a0 <HAL_DMA_Init+0x104>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b04      	cmp	r3, #4
 8001584:	d80c      	bhi.n	80015a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f91e 	bl	80017c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	e008      	b.n	80015b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40020407 	.word	0x40020407
 80015d8:	bffdfff8 	.word	0xbffdfff8
 80015dc:	cccccccd 	.word	0xcccccccd
 80015e0:	40020000 	.word	0x40020000
 80015e4:	bffdfbf8 	.word	0xbffdfbf8
 80015e8:	40020400 	.word	0x40020400

080015ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f003 031c 	and.w	r3, r3, #28
 800160c:	2204      	movs	r2, #4
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d026      	beq.n	8001666 <HAL_DMA_IRQHandler+0x7a>
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	2b00      	cmp	r3, #0
 8001620:	d021      	beq.n	8001666 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0204 	bic.w	r2, r2, #4
 800163e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	f003 021c 	and.w	r2, r3, #28
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	2104      	movs	r1, #4
 800164e:	fa01 f202 	lsl.w	r2, r1, r2
 8001652:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001658:	2b00      	cmp	r3, #0
 800165a:	d071      	beq.n	8001740 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001664:	e06c      	b.n	8001740 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f003 031c 	and.w	r3, r3, #28
 800166e:	2202      	movs	r2, #2
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d02e      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xec>
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d029      	beq.n	80016d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10b      	bne.n	80016aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 020a 	bic.w	r2, r2, #10
 80016a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 021c 	and.w	r2, r3, #28
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2102      	movs	r1, #2
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d038      	beq.n	8001740 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016d6:	e033      	b.n	8001740 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	2208      	movs	r2, #8
 80016e2:	409a      	lsls	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d02a      	beq.n	8001742 <HAL_DMA_IRQHandler+0x156>
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d025      	beq.n	8001742 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f022 020e 	bic.w	r2, r2, #14
 8001704:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 021c 	and.w	r2, r3, #28
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	2101      	movs	r1, #1
 8001714:	fa01 f202 	lsl.w	r2, r1, r2
 8001718:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2201      	movs	r2, #1
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	2b00      	cmp	r3, #0
 8001736:	d004      	beq.n	8001742 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001740:	bf00      	nop
 8001742:	bf00      	nop
}
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800175c:	429a      	cmp	r2, r3
 800175e:	d80a      	bhi.n	8001776 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800176c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6493      	str	r3, [r2, #72]	; 0x48
 8001774:	e007      	b.n	8001786 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	009a      	lsls	r2, r3, #2
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001780:	4413      	add	r3, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3b08      	subs	r3, #8
 800178e:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800179c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2201      	movs	r2, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	40020407 	.word	0x40020407
 80017bc:	4002081c 	.word	0x4002081c
 80017c0:	cccccccd 	.word	0xcccccccd
 80017c4:	40020880 	.word	0x40020880

080017c8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	461a      	mov	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	1000823f 	.word	0x1000823f
 800180c:	40020940 	.word	0x40020940

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e166      	b.n	8001aee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	fa01 f303 	lsl.w	r3, r1, r3
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8158 	beq.w	8001ae8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d005      	beq.n	8001850 <HAL_GPIO_Init+0x40>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	f003 0201 	and.w	r2, r3, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d017      	beq.n	80018ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d123      	bne.n	8001942 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	08da      	lsrs	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3208      	adds	r2, #8
 8001902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	6939      	ldr	r1, [r7, #16]
 800193e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0203 	and.w	r2, r3, #3
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 80b2 	beq.w	8001ae8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_GPIO_Init+0x2fc>)
 8001986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_GPIO_Init+0x2fc>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6613      	str	r3, [r2, #96]	; 0x60
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <HAL_GPIO_Init+0x2fc>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800199c:	4a5c      	ldr	r2, [pc, #368]	; (8001b10 <HAL_GPIO_Init+0x300>)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019c6:	d02b      	beq.n	8001a20 <HAL_GPIO_Init+0x210>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <HAL_GPIO_Init+0x304>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d025      	beq.n	8001a1c <HAL_GPIO_Init+0x20c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x308>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d01f      	beq.n	8001a18 <HAL_GPIO_Init+0x208>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_GPIO_Init+0x30c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d019      	beq.n	8001a14 <HAL_GPIO_Init+0x204>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4f      	ldr	r2, [pc, #316]	; (8001b20 <HAL_GPIO_Init+0x310>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_GPIO_Init+0x200>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_GPIO_Init+0x314>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d00d      	beq.n	8001a0c <HAL_GPIO_Init+0x1fc>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a4d      	ldr	r2, [pc, #308]	; (8001b28 <HAL_GPIO_Init+0x318>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d007      	beq.n	8001a08 <HAL_GPIO_Init+0x1f8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4a4c      	ldr	r2, [pc, #304]	; (8001b2c <HAL_GPIO_Init+0x31c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d101      	bne.n	8001a04 <HAL_GPIO_Init+0x1f4>
 8001a00:	2307      	movs	r3, #7
 8001a02:	e00e      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a04:	2308      	movs	r3, #8
 8001a06:	e00c      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a08:	2306      	movs	r3, #6
 8001a0a:	e00a      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a0c:	2305      	movs	r3, #5
 8001a0e:	e008      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a10:	2304      	movs	r3, #4
 8001a12:	e006      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a14:	2303      	movs	r3, #3
 8001a16:	e004      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e002      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <HAL_GPIO_Init+0x212>
 8001a20:	2300      	movs	r3, #0
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	f002 0203 	and.w	r2, r2, #3
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	4093      	lsls	r3, r2
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a32:	4937      	ldr	r1, [pc, #220]	; (8001b10 <HAL_GPIO_Init+0x300>)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a64:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001abe:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <HAL_GPIO_Init+0x320>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f47f ae91 	bne.w	8001820 <HAL_GPIO_Init+0x10>
  }
}
 8001afe:	bf00      	nop
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010000 	.word	0x40010000
 8001b14:	48000400 	.word	0x48000400
 8001b18:	48000800 	.word	0x48000800
 8001b1c:	48000c00 	.word	0x48000c00
 8001b20:	48001000 	.word	0x48001000
 8001b24:	48001400 	.word	0x48001400
 8001b28:	48001800 	.word	0x48001800
 8001b2c:	48001c00 	.word	0x48001c00
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b44:	787b      	ldrb	r3, [r7, #1]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b50:	e002      	b.n	8001b58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	041a      	lsls	r2, r3, #16
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43d9      	mvns	r1, r3
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	400b      	ands	r3, r1
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ba4:	695a      	ldr	r2, [r3, #20]
 8001ba6:	88fb      	ldrh	r3, [r7, #6]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bb0:	88fb      	ldrh	r3, [r7, #6]
 8001bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb4:	88fb      	ldrh	r3, [r7, #6]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ff98 	bl	8004aec <HAL_GPIO_EXTI_Callback>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd8:	d102      	bne.n	8001be0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bde:	e00b      	b.n	8001bf8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bee:	d102      	bne.n	8001bf6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf4:	e000      	b.n	8001bf8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001bf6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40007000 	.word	0x40007000

08001c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d141      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c16:	4b4b      	ldr	r3, [pc, #300]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c22:	d131      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c2a:	4a46      	ldr	r2, [pc, #280]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c34:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c3c:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001c44:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2232      	movs	r2, #50	; 0x32
 8001c4a:	fb02 f303 	mul.w	r3, r2, r3
 8001c4e:	4a3f      	ldr	r2, [pc, #252]	; (8001d4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	0c9b      	lsrs	r3, r3, #18
 8001c56:	3301      	adds	r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c5a:	e002      	b.n	8001c62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c62:	4b38      	ldr	r3, [pc, #224]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6e:	d102      	bne.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f2      	bne.n	8001c5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c76:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c82:	d158      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e057      	b.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c88:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c98:	e04d      	b.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca0:	d141      	bne.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ca2:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cae:	d131      	bne.n	8001d14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb6:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc0:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cc8:	4a1e      	ldr	r2, [pc, #120]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2232      	movs	r2, #50	; 0x32
 8001cd6:	fb02 f303 	mul.w	r3, r2, r3
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9b      	lsrs	r3, r3, #18
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce6:	e002      	b.n	8001cee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cfa:	d102      	bne.n	8001d02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f2      	bne.n	8001ce8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0e:	d112      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e011      	b.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d1a:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d24:	e007      	b.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d34:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40007000 	.word	0x40007000
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f000 bc08 	b.w	8002574 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d64:	4b96      	ldr	r3, [pc, #600]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d6e:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80e4 	beq.w	8001f4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d007      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4c>
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	f040 808b 	bne.w	8001eaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	f040 8087 	bne.w	8001eaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d9c:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0302 	and.w	r3, r3, #2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x64>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e3df      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1a      	ldr	r2, [r3, #32]
 8001db8:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_RCC_OscConfig+0x7e>
 8001dc4:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dcc:	e005      	b.n	8001dda <HAL_RCC_OscConfig+0x8a>
 8001dce:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d223      	bcs.n	8001e26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 fdcc 	bl	8002980 <RCC_SetFlashLatencyFromMSIRange>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e3c0      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df2:	4b73      	ldr	r3, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a72      	ldr	r2, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	496d      	ldr	r1, [pc, #436]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	4968      	ldr	r1, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e025      	b.n	8001e72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a65      	ldr	r2, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e2c:	f043 0308 	orr.w	r3, r3, #8
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4b63      	ldr	r3, [pc, #396]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4960      	ldr	r1, [pc, #384]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e44:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	021b      	lsls	r3, r3, #8
 8001e52:	495b      	ldr	r1, [pc, #364]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd8c 	bl	8002980 <RCC_SetFlashLatencyFromMSIRange>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e380      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e72:	f000 fcc1 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8001e76:	4602      	mov	r2, r0
 8001e78:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4950      	ldr	r1, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x274>)
 8001e84:	5ccb      	ldrb	r3, [r1, r3]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8e:	4a4e      	ldr	r2, [pc, #312]	; (8001fc8 <HAL_RCC_OscConfig+0x278>)
 8001e90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCC_OscConfig+0x27c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fe82 	bl	8000ba0 <HAL_InitTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d052      	beq.n	8001f4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	e364      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d032      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a42      	ldr	r2, [pc, #264]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ebe:	f7fe febf 	bl	8000c40 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec6:	f7fe febb 	bl	8000c40 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e34d      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed8:	4b39      	ldr	r3, [pc, #228]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee4:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a35      	ldr	r2, [pc, #212]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b33      	ldr	r3, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4930      	ldr	r1, [pc, #192]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f02:	4b2f      	ldr	r3, [pc, #188]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	492b      	ldr	r1, [pc, #172]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
 8001f16:	e01a      	b.n	8001f4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f18:	4b29      	ldr	r3, [pc, #164]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	f023 0301 	bic.w	r3, r3, #1
 8001f22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f24:	f7fe fe8c 	bl	8000c40 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f2c:	f7fe fe88 	bl	8000c40 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e31a      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1dc>
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d073      	beq.n	8002042 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x21c>
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2b0c      	cmp	r3, #12
 8001f64:	d10e      	bne.n	8001f84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d10b      	bne.n	8001f84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d063      	beq.n	8002040 <HAL_RCC_OscConfig+0x2f0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d15f      	bne.n	8002040 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e2f7      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d106      	bne.n	8001f9c <HAL_RCC_OscConfig+0x24c>
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e025      	b.n	8001fe8 <HAL_RCC_OscConfig+0x298>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa4:	d114      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x280>
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b03      	ldr	r3, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a02      	ldr	r2, [pc, #8]	; (8001fc0 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e013      	b.n	8001fe8 <HAL_RCC_OscConfig+0x298>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08006048 	.word	0x08006048
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a9f      	ldr	r2, [pc, #636]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b9d      	ldr	r3, [pc, #628]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a9c      	ldr	r2, [pc, #624]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fe26 	bl	8000c40 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fe22 	bl	8000c40 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e2b4      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b92      	ldr	r3, [pc, #584]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x2a8>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fe12 	bl	8000c40 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fe0e 	bl	8000c40 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2a0      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x2d0>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d060      	beq.n	8002110 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d005      	beq.n	8002060 <HAL_RCC_OscConfig+0x310>
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d119      	bne.n	800208e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d116      	bne.n	800208e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002060:	4b7c      	ldr	r3, [pc, #496]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	2b00      	cmp	r3, #0
 800206a:	d005      	beq.n	8002078 <HAL_RCC_OscConfig+0x328>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e27d      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002078:	4b76      	ldr	r3, [pc, #472]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	061b      	lsls	r3, r3, #24
 8002086:	4973      	ldr	r1, [pc, #460]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800208c:	e040      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d023      	beq.n	80020de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002096:	4b6f      	ldr	r3, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a6e      	ldr	r2, [pc, #440]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a2:	f7fe fdcd 	bl	8000c40 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020aa:	f7fe fdc9 	bl	8000c40 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e25b      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020bc:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	495f      	ldr	r1, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e018      	b.n	8002110 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020de:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5c      	ldr	r2, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7fe fda9 	bl	8000c40 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7fe fda5 	bl	8000c40 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e237      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1f0      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d03c      	beq.n	8002196 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01c      	beq.n	800215e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7fe fd84 	bl	8000c40 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe fd80 	bl	8000c40 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e212      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800214e:	4b41      	ldr	r3, [pc, #260]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ef      	beq.n	800213c <HAL_RCC_OscConfig+0x3ec>
 800215c:	e01b      	b.n	8002196 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002164:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216e:	f7fe fd67 	bl	8000c40 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002176:	f7fe fd63 	bl	8000c40 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e1f5      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a6 	beq.w	80022f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021a8:	4b2a      	ldr	r3, [pc, #168]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b4:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	; 0x58
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 80021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021cc:	2301      	movs	r3, #1
 80021ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d118      	bne.n	800220e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021dc:	4b1e      	ldr	r3, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fd2a 	bl	8000c40 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f0:	f7fe fd26 	bl	8000c40 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1b8      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x508>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_RCC_OscConfig+0x4d8>
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002226:	e029      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d115      	bne.n	800225c <HAL_RCC_OscConfig+0x50c>
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	4a07      	ldr	r2, [pc, #28]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_RCC_OscConfig+0x504>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x52c>
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
 800225c:	4b9d      	ldr	r3, [pc, #628]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	4a9c      	ldr	r2, [pc, #624]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226c:	4b99      	ldr	r3, [pc, #612]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	4a98      	ldr	r2, [pc, #608]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fcdc 	bl	8000c40 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fcd8 	bl	8000c40 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e168      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b8c      	ldr	r3, [pc, #560]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ed      	beq.n	800228c <HAL_RCC_OscConfig+0x53c>
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe fcc5 	bl	8000c40 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fcc1 	bl	8000c40 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e151      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d0:	4b80      	ldr	r3, [pc, #512]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b7b      	ldr	r3, [pc, #492]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4a7a      	ldr	r2, [pc, #488]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002304:	4b73      	ldr	r3, [pc, #460]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230a:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fc94 	bl	8000c40 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800231c:	f7fe fc90 	bl	8000c40 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e122      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800232e:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x5cc>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800233e:	4b65      	ldr	r3, [pc, #404]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002344:	4a63      	ldr	r2, [pc, #396]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fc77 	bl	8000c40 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002356:	f7fe fc73 	bl	8000c40 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e105      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002368:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80f9 	beq.w	8002572 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	2b02      	cmp	r3, #2
 8002386:	f040 80cf 	bne.w	8002528 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800238a:	4b52      	ldr	r3, [pc, #328]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239a:	429a      	cmp	r2, r3
 800239c:	d12c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	3b01      	subs	r3, #1
 80023aa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d123      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d11b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d113      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	3b01      	subs	r3, #1
 80023de:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d109      	bne.n	80023f8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	085b      	lsrs	r3, r3, #1
 80023f0:	3b01      	subs	r3, #1
 80023f2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d071      	beq.n	80024dc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d068      	beq.n	80024d0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80023fe:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0ac      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002420:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002424:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002426:	f7fe fc0b 	bl	8000c40 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242e:	f7fe fc07 	bl	8000c40 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e099      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b21      	ldr	r3, [pc, #132]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <HAL_RCC_OscConfig+0x788>)
 8002452:	4013      	ands	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800245c:	3a01      	subs	r2, #1
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	4311      	orrs	r1, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002466:	0212      	lsls	r2, r2, #8
 8002468:	4311      	orrs	r1, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800246e:	0852      	lsrs	r2, r2, #1
 8002470:	3a01      	subs	r2, #1
 8002472:	0552      	lsls	r2, r2, #21
 8002474:	4311      	orrs	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800247a:	0852      	lsrs	r2, r2, #1
 800247c:	3a01      	subs	r2, #1
 800247e:	0652      	lsls	r2, r2, #25
 8002480:	4311      	orrs	r1, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002486:	06d2      	lsls	r2, r2, #27
 8002488:	430a      	orrs	r2, r1
 800248a:	4912      	ldr	r1, [pc, #72]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800248c:	4313      	orrs	r3, r2
 800248e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 8002496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800249c:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024a8:	f7fe fbca 	bl	8000c40 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b0:	f7fe fbc6 	bl	8000c40 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e058      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <HAL_RCC_OscConfig+0x784>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d0f0      	beq.n	80024b0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024ce:	e050      	b.n	8002572 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e04f      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
 80024d4:	40021000 	.word	0x40021000
 80024d8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d144      	bne.n	8002572 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a23      	ldr	r2, [pc, #140]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f4:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a20      	ldr	r2, [pc, #128]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 80024fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002500:	f7fe fb9e 	bl	8000c40 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fb9a 	bl	8000c40 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e02c      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x7b8>
 8002526:	e024      	b.n	8002572 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d01f      	beq.n	800256e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 8002534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002538:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fb81 	bl	8000c40 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fb7d 	bl	8000c40 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e00f      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 8002562:	68da      	ldr	r2, [r3, #12]
 8002564:	4905      	ldr	r1, [pc, #20]	; (800257c <HAL_RCC_OscConfig+0x82c>)
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <HAL_RCC_OscConfig+0x830>)
 8002568:	4013      	ands	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
 800256c:	e001      	b.n	8002572 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3720      	adds	r7, #32
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	feeefffc 	.word	0xfeeefffc

08002584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e11d      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b90      	ldr	r3, [pc, #576]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d910      	bls.n	80025cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b8d      	ldr	r3, [pc, #564]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 020f 	bic.w	r2, r3, #15
 80025b2:	498b      	ldr	r1, [pc, #556]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ba:	4b89      	ldr	r3, [pc, #548]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e105      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d908      	bls.n	80025fa <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b7e      	ldr	r3, [pc, #504]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	497b      	ldr	r1, [pc, #492]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d079      	beq.n	80026fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b03      	cmp	r3, #3
 800260c:	d11e      	bne.n	800264c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	4b75      	ldr	r3, [pc, #468]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e0dc      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800261e:	f000 fa09 	bl	8002a34 <RCC_GetSysClockFreqFromPLLSource>
 8002622:	4603      	mov	r3, r0
 8002624:	4a70      	ldr	r2, [pc, #448]	; (80027e8 <HAL_RCC_ClockConfig+0x264>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d946      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800262a:	4b6e      	ldr	r3, [pc, #440]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d140      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002636:	4b6b      	ldr	r3, [pc, #428]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800263e:	4a69      	ldr	r2, [pc, #420]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002644:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e035      	b.n	80026b8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d115      	bne.n	800268c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b9      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d107      	bne.n	800267c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800266c:	4b5d      	ldr	r3, [pc, #372]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0ad      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267c:	4b59      	ldr	r3, [pc, #356]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0a5      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800268c:	f000 f8b4 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8002690:	4603      	mov	r3, r0
 8002692:	4a55      	ldr	r2, [pc, #340]	; (80027e8 <HAL_RCC_ClockConfig+0x264>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d90f      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002698:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d109      	bne.n	80026b8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026a4:	4b4f      	ldr	r3, [pc, #316]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ac:	4a4d      	ldr	r2, [pc, #308]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026b8:	4b4a      	ldr	r3, [pc, #296]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f023 0203 	bic.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4947      	ldr	r1, [pc, #284]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026ca:	f7fe fab9 	bl	8000c40 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d2:	f7fe fab5 	bl	8000c40 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e077      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e8:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 020c 	and.w	r2, r3, #12
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d1eb      	bne.n	80026d2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2b80      	cmp	r3, #128	; 0x80
 80026fe:	d105      	bne.n	800270c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002700:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a37      	ldr	r2, [pc, #220]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800270a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	4b31      	ldr	r3, [pc, #196]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	429a      	cmp	r2, r3
 8002726:	d208      	bcs.n	800273a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b2e      	ldr	r3, [pc, #184]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	492b      	ldr	r1, [pc, #172]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273a:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d210      	bcs.n	800276a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 020f 	bic.w	r2, r3, #15
 8002750:	4923      	ldr	r1, [pc, #140]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002758:	4b21      	ldr	r3, [pc, #132]	; (80027e0 <HAL_RCC_ClockConfig+0x25c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e036      	b.n	80027d8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002776:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	4918      	ldr	r1, [pc, #96]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002784:	4313      	orrs	r3, r2
 8002786:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4910      	ldr	r1, [pc, #64]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027a8:	f000 f826 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_RCC_ClockConfig+0x260>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	490c      	ldr	r1, [pc, #48]	; (80027ec <HAL_RCC_ClockConfig+0x268>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_RCC_ClockConfig+0x26c>)
 80027c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <HAL_RCC_ClockConfig+0x270>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe f9e7 	bl	8000ba0 <HAL_InitTick>
 80027d2:	4603      	mov	r3, r0
 80027d4:	73fb      	strb	r3, [r7, #15]

  return status;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	04c4b400 	.word	0x04c4b400
 80027ec:	08006048 	.word	0x08006048
 80027f0:	20000008 	.word	0x20000008
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b089      	sub	sp, #36	; 0x24
 80027fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x34>
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b0c      	cmp	r3, #12
 8002824:	d121      	bne.n	800286a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d11e      	bne.n	800286a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800282c:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e005      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b04      	cmp	r3, #4
 800286e:	d102      	bne.n	8002876 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002870:	4b25      	ldr	r3, [pc, #148]	; (8002908 <HAL_RCC_GetSysClockFreq+0x110>)
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e004      	b.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b08      	cmp	r3, #8
 800287a:	d101      	bne.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800287c:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_RCC_GetSysClockFreq+0x114>)
 800287e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b0c      	cmp	r3, #12
 8002884:	d134      	bne.n	80028f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0xa6>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d003      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0xac>
 800289c:	e005      	b.n	80028aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_RCC_GetSysClockFreq+0x110>)
 80028a0:	617b      	str	r3, [r7, #20]
      break;
 80028a2:	e005      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_RCC_GetSysClockFreq+0x114>)
 80028a6:	617b      	str	r3, [r7, #20]
      break;
 80028a8:	e002      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	617b      	str	r3, [r7, #20]
      break;
 80028ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	3301      	adds	r3, #1
 80028bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	0a1b      	lsrs	r3, r3, #8
 80028c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	fb03 f202 	mul.w	r2, r3, r2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	0e5b      	lsrs	r3, r3, #25
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	3301      	adds	r3, #1
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028f0:	69bb      	ldr	r3, [r7, #24]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000
 8002904:	08006060 	.word	0x08006060
 8002908:	00f42400 	.word	0x00f42400
 800290c:	007a1200 	.word	0x007a1200

08002910 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_GetHCLKFreq+0x14>)
 8002916:	681b      	ldr	r3, [r3, #0]
}
 8002918:	4618      	mov	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	20000008 	.word	0x20000008

08002928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800292c:	f7ff fff0 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 8002930:	4602      	mov	r2, r0
 8002932:	4b06      	ldr	r3, [pc, #24]	; (800294c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	4904      	ldr	r1, [pc, #16]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x28>)
 800293e:	5ccb      	ldrb	r3, [r1, r3]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	08006058 	.word	0x08006058

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002958:	f7ff ffda 	bl	8002910 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0adb      	lsrs	r3, r3, #11
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4904      	ldr	r1, [pc, #16]	; (800297c <HAL_RCC_GetPCLK2Freq+0x28>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	08006058 	.word	0x08006058

08002980 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800298c:	4b27      	ldr	r3, [pc, #156]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002998:	f7ff f916 	bl	8001bc8 <HAL_PWREx_GetVoltageRange>
 800299c:	6178      	str	r0, [r7, #20]
 800299e:	e014      	b.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a21      	ldr	r2, [pc, #132]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
 80029ac:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029b8:	f7ff f906 	bl	8001bc8 <HAL_PWREx_GetVoltageRange>
 80029bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c2:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80029c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d10b      	bne.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d913      	bls.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2ba0      	cmp	r3, #160	; 0xa0
 80029dc:	d902      	bls.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029de:	2302      	movs	r3, #2
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	e00d      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e4:	2301      	movs	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e00a      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b7f      	cmp	r3, #127	; 0x7f
 80029ee:	d902      	bls.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80029f0:	2302      	movs	r3, #2
 80029f2:	613b      	str	r3, [r7, #16]
 80029f4:	e004      	b.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b70      	cmp	r3, #112	; 0x70
 80029fa:	d101      	bne.n	8002a00 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029fc:	2301      	movs	r3, #1
 80029fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f023 020f 	bic.w	r2, r3, #15
 8002a08:	4909      	ldr	r1, [pc, #36]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d001      	beq.n	8002a22 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40022000 	.word	0x40022000

08002a34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d00b      	beq.n	8002a62 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d825      	bhi.n	8002a9c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d008      	beq.n	8002a68 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d11f      	bne.n	8002a9c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002a5c:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a5e:	613b      	str	r3, [r7, #16]
    break;
 8002a60:	e01f      	b.n	8002aa2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002a64:	613b      	str	r3, [r7, #16]
    break;
 8002a66:	e01c      	b.n	8002aa2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	e005      	b.n	8002a90 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002a90:	4a1a      	ldr	r2, [pc, #104]	; (8002afc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	613b      	str	r3, [r7, #16]
    break;
 8002a9a:	e002      	b.n	8002aa2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
    break;
 8002aa0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	3301      	adds	r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	fb03 f202 	mul.w	r2, r3, r2
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0e5b      	lsrs	r3, r3, #25
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ae2:	683b      	ldr	r3, [r7, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	00f42400 	.word	0x00f42400
 8002af8:	007a1200 	.word	0x007a1200
 8002afc:	08006060 	.word	0x08006060

08002b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d040      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d02a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d825      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b28:	2b60      	cmp	r3, #96	; 0x60
 8002b2a:	d026      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b2c:	2b60      	cmp	r3, #96	; 0x60
 8002b2e:	d821      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d006      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d81d      	bhi.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d010      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002b40:	e018      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b42:	4b89      	ldr	r3, [pc, #548]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	4a88      	ldr	r2, [pc, #544]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b4e:	e015      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fb02 	bl	8003160 <RCCEx_PLLSAI1_Config>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b60:	e00c      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3320      	adds	r3, #32
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fbed 	bl	8003348 <RCCEx_PLLSAI2_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	74fb      	strb	r3, [r7, #19]
      break;
 8002b78:	e000      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002b7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b82:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b88:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b90:	4975      	ldr	r1, [pc, #468]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002b98:	e001      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d047      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb2:	d030      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb8:	d82a      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bbe:	d02a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc4:	d824      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d81e      	bhi.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bda:	d010      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002bdc:	e018      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bde:	4b62      	ldr	r3, [pc, #392]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4a61      	ldr	r2, [pc, #388]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bea:	e015      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fab4 	bl	8003160 <RCCEx_PLLSAI1_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3320      	adds	r3, #32
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fb9f 	bl	8003348 <RCCEx_PLLSAI2_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	74fb      	strb	r3, [r7, #19]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10b      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c1e:	4b52      	ldr	r3, [pc, #328]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	494e      	ldr	r1, [pc, #312]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002c34:	e001      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c36:	7cfb      	ldrb	r3, [r7, #19]
 8002c38:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 809f 	beq.w	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b41      	ldr	r3, [pc, #260]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c8a:	f7fd ffd9 	bl	8000c40 <HAL_GetTick>
 8002c8e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c90:	e009      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c92:	f7fd ffd5 	bl	8000c40 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d902      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ca6:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ef      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d15b      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cb8:	4b2b      	ldr	r3, [pc, #172]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01f      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d019      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d016      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fd ff94 	bl	8000c40 <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1a:	e00b      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1c:	f7fd ff90 	bl	8000c40 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d902      	bls.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	74fb      	strb	r3, [r7, #19]
            break;
 8002d32:	e006      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d34:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0ec      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	4903      	ldr	r1, [pc, #12]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	74bb      	strb	r3, [r7, #18]
 8002d66:	e005      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d74:	7c7b      	ldrb	r3, [r7, #17]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7e:	4a9f      	ldr	r2, [pc, #636]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d92:	4b9a      	ldr	r3, [pc, #616]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f023 0203 	bic.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	4996      	ldr	r1, [pc, #600]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002db4:	4b91      	ldr	r3, [pc, #580]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 020c 	bic.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	498e      	ldr	r1, [pc, #568]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dd6:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de4:	4985      	ldr	r1, [pc, #532]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002df8:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	497d      	ldr	r1, [pc, #500]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e1a:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e28:	4974      	ldr	r1, [pc, #464]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	496c      	ldr	r1, [pc, #432]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6c:	4963      	ldr	r1, [pc, #396]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e80:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e8e:	495b      	ldr	r1, [pc, #364]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea2:	4b56      	ldr	r3, [pc, #344]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	4952      	ldr	r1, [pc, #328]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ec4:	4b4d      	ldr	r3, [pc, #308]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed2:	494a      	ldr	r1, [pc, #296]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ee6:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	4941      	ldr	r1, [pc, #260]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f08:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f0e:	f023 0203 	bic.w	r2, r3, #3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	4939      	ldr	r1, [pc, #228]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d028      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2a:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	4930      	ldr	r1, [pc, #192]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f48:	d106      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f54:	60d3      	str	r3, [r2, #12]
 8002f56:	e011      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2101      	movs	r1, #1
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f8f9 	bl	8003160 <RCCEx_PLLSAI1_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f72:	7cfb      	ldrb	r3, [r7, #19]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002f78:	7cfb      	ldrb	r3, [r7, #19]
 8002f7a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d04d      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f90:	d108      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002fa2:	e012      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002faa:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc2:	490e      	ldr	r1, [pc, #56]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fde:	60d3      	str	r3, [r2, #12]
 8002fe0:	e020      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fea:	d109      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4a02      	ldr	r2, [pc, #8]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	60d3      	str	r3, [r2, #12]
 8002ff8:	e014      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003008:	d10c      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f8a5 	bl	8003160 <RCCEx_PLLSAI1_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d028      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003030:	4b4a      	ldr	r3, [pc, #296]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303e:	4947      	ldr	r1, [pc, #284]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800304a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304e:	d106      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b42      	ldr	r3, [pc, #264]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a41      	ldr	r2, [pc, #260]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
 800305c:	e011      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003066:	d10c      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3304      	adds	r3, #4
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f876 	bl	8003160 <RCCEx_PLLSAI1_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01e      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800308e:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800309e:	492f      	ldr	r1, [pc, #188]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f851 	bl	8003160 <RCCEx_PLLSAI1_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00b      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030de:	f023 0204 	bic.w	r2, r3, #4
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e8:	491c      	ldr	r1, [pc, #112]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003102:	f023 0218 	bic.w	r2, r3, #24
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	4913      	ldr	r1, [pc, #76]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003120:	4b0e      	ldr	r3, [pc, #56]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003126:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003130:	490a      	ldr	r1, [pc, #40]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003142:	d105      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800314a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800314e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003150:	7cbb      	ldrb	r3, [r7, #18]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000

08003160 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800316e:	4b72      	ldr	r3, [pc, #456]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800317a:	4b6f      	ldr	r3, [pc, #444]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0203 	and.w	r2, r3, #3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d103      	bne.n	8003192 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
       ||
 800318e:	2b00      	cmp	r3, #0
 8003190:	d142      	bne.n	8003218 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
 8003196:	e03f      	b.n	8003218 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b03      	cmp	r3, #3
 800319e:	d018      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0x72>
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d825      	bhi.n	80031f0 <RCCEx_PLLSAI1_Config+0x90>
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d002      	beq.n	80031ae <RCCEx_PLLSAI1_Config+0x4e>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d009      	beq.n	80031c0 <RCCEx_PLLSAI1_Config+0x60>
 80031ac:	e020      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031ae:	4b62      	ldr	r3, [pc, #392]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11d      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031be:	e01a      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c0:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d116      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d0:	e013      	b.n	80031fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031d2:	4b59      	ldr	r3, [pc, #356]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031de:	4b56      	ldr	r3, [pc, #344]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d109      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ee:	e006      	b.n	80031fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
      break;
 80031f4:	e004      	b.n	8003200 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003206:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f023 0203 	bic.w	r2, r3, #3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4949      	ldr	r1, [pc, #292]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 8086 	bne.w	800332c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003220:	4b45      	ldr	r3, [pc, #276]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a44      	ldr	r2, [pc, #272]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003226:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800322a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322c:	f7fd fd08 	bl	8000c40 <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003232:	e009      	b.n	8003248 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003234:	f7fd fd04 	bl	8000c40 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	73fb      	strb	r3, [r7, #15]
        break;
 8003246:	e005      	b.n	8003254 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ef      	bne.n	8003234 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d168      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d113      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003260:	4b35      	ldr	r3, [pc, #212]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	4b35      	ldr	r3, [pc, #212]	; (800333c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003266:	4013      	ands	r3, r2
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6892      	ldr	r2, [r2, #8]
 800326c:	0211      	lsls	r1, r2, #8
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	06d2      	lsls	r2, r2, #27
 8003274:	4311      	orrs	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6852      	ldr	r2, [r2, #4]
 800327a:	3a01      	subs	r2, #1
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	430a      	orrs	r2, r1
 8003280:	492d      	ldr	r1, [pc, #180]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]
 8003286:	e02d      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d115      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	4013      	ands	r3, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6892      	ldr	r2, [r2, #8]
 800329a:	0211      	lsls	r1, r2, #8
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6912      	ldr	r2, [r2, #16]
 80032a0:	0852      	lsrs	r2, r2, #1
 80032a2:	3a01      	subs	r2, #1
 80032a4:	0552      	lsls	r2, r2, #21
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6852      	ldr	r2, [r2, #4]
 80032ac:	3a01      	subs	r2, #1
 80032ae:	0112      	lsls	r2, r2, #4
 80032b0:	430a      	orrs	r2, r1
 80032b2:	4921      	ldr	r1, [pc, #132]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	610b      	str	r3, [r1, #16]
 80032b8:	e014      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	4b21      	ldr	r3, [pc, #132]	; (8003344 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6892      	ldr	r2, [r2, #8]
 80032c6:	0211      	lsls	r1, r2, #8
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6952      	ldr	r2, [r2, #20]
 80032cc:	0852      	lsrs	r2, r2, #1
 80032ce:	3a01      	subs	r2, #1
 80032d0:	0652      	lsls	r2, r2, #25
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6852      	ldr	r2, [r2, #4]
 80032d8:	3a01      	subs	r2, #1
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	430a      	orrs	r2, r1
 80032de:	4916      	ldr	r1, [pc, #88]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a13      	ldr	r2, [pc, #76]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f0:	f7fd fca6 	bl	8000c40 <HAL_GetTick>
 80032f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032f6:	e009      	b.n	800330c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f8:	f7fd fca2 	bl	8000c40 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d902      	bls.n	800330c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	73fb      	strb	r3, [r7, #15]
          break;
 800330a:	e005      	b.n	8003318 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0ef      	beq.n	80032f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	4904      	ldr	r1, [pc, #16]	; (8003338 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800332c:	7bfb      	ldrb	r3, [r7, #15]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	07ff800f 	.word	0x07ff800f
 8003340:	ff9f800f 	.word	0xff9f800f
 8003344:	f9ff800f 	.word	0xf9ff800f

08003348 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00e      	beq.n	8003380 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0203 	and.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d103      	bne.n	800337a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
       ||
 8003376:	2b00      	cmp	r3, #0
 8003378:	d142      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
 800337e:	e03f      	b.n	8003400 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d018      	beq.n	80033ba <RCCEx_PLLSAI2_Config+0x72>
 8003388:	2b03      	cmp	r3, #3
 800338a:	d825      	bhi.n	80033d8 <RCCEx_PLLSAI2_Config+0x90>
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <RCCEx_PLLSAI2_Config+0x4e>
 8003390:	2b02      	cmp	r3, #2
 8003392:	d009      	beq.n	80033a8 <RCCEx_PLLSAI2_Config+0x60>
 8003394:	e020      	b.n	80033d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003396:	4b62      	ldr	r3, [pc, #392]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d11d      	bne.n	80033de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e01a      	b.n	80033de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a8:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d116      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b8:	e013      	b.n	80033e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033ba:	4b59      	ldr	r3, [pc, #356]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10f      	bne.n	80033e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c6:	4b56      	ldr	r3, [pc, #344]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033d6:	e006      	b.n	80033e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e004      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80033de:	bf00      	nop
 80033e0:	e002      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80033e2:	bf00      	nop
 80033e4:	e000      	b.n	80033e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80033e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80033ee:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4949      	ldr	r1, [pc, #292]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f040 8086 	bne.w	8003514 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a44      	ldr	r2, [pc, #272]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 800340e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003414:	f7fd fc14 	bl	8000c40 <HAL_GetTick>
 8003418:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800341a:	e009      	b.n	8003430 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800341c:	f7fd fc10 	bl	8000c40 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d902      	bls.n	8003430 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	73fb      	strb	r3, [r7, #15]
        break;
 800342e:	e005      	b.n	800343c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ef      	bne.n	800341c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d168      	bne.n	8003514 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d113      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003448:	4b35      	ldr	r3, [pc, #212]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 800344a:	695a      	ldr	r2, [r3, #20]
 800344c:	4b35      	ldr	r3, [pc, #212]	; (8003524 <RCCEx_PLLSAI2_Config+0x1dc>)
 800344e:	4013      	ands	r3, r2
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6892      	ldr	r2, [r2, #8]
 8003454:	0211      	lsls	r1, r2, #8
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	06d2      	lsls	r2, r2, #27
 800345c:	4311      	orrs	r1, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6852      	ldr	r2, [r2, #4]
 8003462:	3a01      	subs	r2, #1
 8003464:	0112      	lsls	r2, r2, #4
 8003466:	430a      	orrs	r2, r1
 8003468:	492d      	ldr	r1, [pc, #180]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	614b      	str	r3, [r1, #20]
 800346e:	e02d      	b.n	80034cc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d115      	bne.n	80034a2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <RCCEx_PLLSAI2_Config+0x1e0>)
 800347c:	4013      	ands	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6892      	ldr	r2, [r2, #8]
 8003482:	0211      	lsls	r1, r2, #8
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6912      	ldr	r2, [r2, #16]
 8003488:	0852      	lsrs	r2, r2, #1
 800348a:	3a01      	subs	r2, #1
 800348c:	0552      	lsls	r2, r2, #21
 800348e:	4311      	orrs	r1, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6852      	ldr	r2, [r2, #4]
 8003494:	3a01      	subs	r2, #1
 8003496:	0112      	lsls	r2, r2, #4
 8003498:	430a      	orrs	r2, r1
 800349a:	4921      	ldr	r1, [pc, #132]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 800349c:	4313      	orrs	r3, r2
 800349e:	614b      	str	r3, [r1, #20]
 80034a0:	e014      	b.n	80034cc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <RCCEx_PLLSAI2_Config+0x1e4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	0211      	lsls	r1, r2, #8
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6952      	ldr	r2, [r2, #20]
 80034b4:	0852      	lsrs	r2, r2, #1
 80034b6:	3a01      	subs	r2, #1
 80034b8:	0652      	lsls	r2, r2, #25
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6852      	ldr	r2, [r2, #4]
 80034c0:	3a01      	subs	r2, #1
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	430a      	orrs	r2, r1
 80034c6:	4916      	ldr	r1, [pc, #88]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d8:	f7fd fbb2 	bl	8000c40 <HAL_GetTick>
 80034dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034de:	e009      	b.n	80034f4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034e0:	f7fd fbae 	bl	8000c40 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d902      	bls.n	80034f4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	73fb      	strb	r3, [r7, #15]
          break;
 80034f2:	e005      	b.n	8003500 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034f4:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0ef      	beq.n	80034e0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d106      	bne.n	8003514 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	4904      	ldr	r1, [pc, #16]	; (8003520 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003510:	4313      	orrs	r3, r2
 8003512:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	07ff800f 	.word	0x07ff800f
 8003528:	ff9f800f 	.word	0xff9f800f
 800352c:	f9ff800f 	.word	0xf9ff800f

08003530 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e049      	b.n	80035d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f001 fe28 	bl	80051ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f000 fab6 	bl	8003ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d001      	beq.n	80035f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e04f      	b.n	8003698 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d01d      	beq.n	8003656 <HAL_TIM_Base_Start_IT+0x76>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003622:	d018      	beq.n	8003656 <HAL_TIM_Base_Start_IT+0x76>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_TIM_Base_Start_IT+0x76>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00e      	beq.n	8003656 <HAL_TIM_Base_Start_IT+0x76>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_TIM_Base_Start_IT+0x76>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1b      	ldr	r2, [pc, #108]	; (80036b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d004      	beq.n	8003656 <HAL_TIM_Base_Start_IT+0x76>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a19      	ldr	r2, [pc, #100]	; (80036b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d115      	bne.n	8003682 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <HAL_TIM_Base_Start_IT+0xdc>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b06      	cmp	r3, #6
 8003666:	d015      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0xb4>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366e:	d011      	beq.n	8003694 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	e008      	b.n	8003694 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e000      	b.n	8003696 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003694:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40000400 	.word	0x40000400
 80036ac:	40000800 	.word	0x40000800
 80036b0:	40000c00 	.word	0x40000c00
 80036b4:	40013400 	.word	0x40013400
 80036b8:	40014000 	.word	0x40014000
 80036bc:	00010007 	.word	0x00010007

080036c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0202 	mvn.w	r2, #2
 80036ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f9ce 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f9c0 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f9d1 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	2b04      	cmp	r3, #4
 8003728:	d122      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b04      	cmp	r3, #4
 8003736:	d11b      	bne.n	8003770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0204 	mvn.w	r2, #4
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f9a4 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f996 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f9a7 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b08      	cmp	r3, #8
 800377c:	d122      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b08      	cmp	r3, #8
 800378a:	d11b      	bne.n	80037c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0208 	mvn.w	r2, #8
 8003794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2204      	movs	r2, #4
 800379a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f97a 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 80037b0:	e005      	b.n	80037be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f96c 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f97d 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d122      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d11b      	bne.n	8003818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f06f 0210 	mvn.w	r2, #16
 80037e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2208      	movs	r2, #8
 80037ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f950 	bl	8003aa4 <HAL_TIM_IC_CaptureCallback>
 8003804:	e005      	b.n	8003812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f942 	bl	8003a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f953 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10e      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0301 	and.w	r3, r3, #1
 8003830:	2b01      	cmp	r3, #1
 8003832:	d107      	bne.n	8003844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0201 	mvn.w	r2, #1
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f001 f968 	bl	8004b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d10e      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385c:	2b80      	cmp	r3, #128	; 0x80
 800385e:	d107      	bne.n	8003870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fafe 	bl	8003e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d10e      	bne.n	800389e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388a:	2b80      	cmp	r3, #128	; 0x80
 800388c:	d107      	bne.n	800389e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 faf1 	bl	8003e80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d10e      	bne.n	80038ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d107      	bne.n	80038ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f901 	bl	8003acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d10e      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d107      	bne.n	80038f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f06f 0220 	mvn.w	r2, #32
 80038ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fab1 	bl	8003e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_TIM_ConfigClockSource+0x1c>
 8003916:	2302      	movs	r3, #2
 8003918:	e0b6      	b.n	8003a88 <HAL_TIM_ConfigClockSource+0x18a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2202      	movs	r2, #2
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003938:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800393c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003944:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	d03e      	beq.n	80039d6 <HAL_TIM_ConfigClockSource+0xd8>
 8003958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395c:	f200 8087 	bhi.w	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	f000 8086 	beq.w	8003a74 <HAL_TIM_ConfigClockSource+0x176>
 8003968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396c:	d87f      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 800396e:	2b70      	cmp	r3, #112	; 0x70
 8003970:	d01a      	beq.n	80039a8 <HAL_TIM_ConfigClockSource+0xaa>
 8003972:	2b70      	cmp	r3, #112	; 0x70
 8003974:	d87b      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 8003976:	2b60      	cmp	r3, #96	; 0x60
 8003978:	d050      	beq.n	8003a1c <HAL_TIM_ConfigClockSource+0x11e>
 800397a:	2b60      	cmp	r3, #96	; 0x60
 800397c:	d877      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 800397e:	2b50      	cmp	r3, #80	; 0x50
 8003980:	d03c      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0xfe>
 8003982:	2b50      	cmp	r3, #80	; 0x50
 8003984:	d873      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d058      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0x13e>
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d86f      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 800398e:	2b30      	cmp	r3, #48	; 0x30
 8003990:	d064      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x15e>
 8003992:	2b30      	cmp	r3, #48	; 0x30
 8003994:	d86b      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d060      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x15e>
 800399a:	2b20      	cmp	r3, #32
 800399c:	d867      	bhi.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d05c      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x15e>
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d05a      	beq.n	8003a5c <HAL_TIM_ConfigClockSource+0x15e>
 80039a6:	e062      	b.n	8003a6e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f000 f9a6 	bl	8003d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80039ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	609a      	str	r2, [r3, #8]
      break;
 80039d4:	e04f      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6899      	ldr	r1, [r3, #8]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f000 f98f 	bl	8003d08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f8:	609a      	str	r2, [r3, #8]
      break;
 80039fa:	e03c      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6818      	ldr	r0, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6859      	ldr	r1, [r3, #4]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f000 f903 	bl	8003c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2150      	movs	r1, #80	; 0x50
 8003a14:	4618      	mov	r0, r3
 8003a16:	f000 f95c 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 8003a1a:	e02c      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f000 f922 	bl	8003c72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2160      	movs	r1, #96	; 0x60
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f94c 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 8003a3a:	e01c      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f000 f8e3 	bl	8003c14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2140      	movs	r1, #64	; 0x40
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f93c 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 8003a5a:	e00c      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4619      	mov	r1, r3
 8003a66:	4610      	mov	r0, r2
 8003a68:	f000 f933 	bl	8003cd2 <TIM_ITRx_SetConfig>
      break;
 8003a6c:	e003      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      break;
 8003a72:	e000      	b.n	8003a76 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003a74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4a40      	ldr	r2, [pc, #256]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a3d      	ldr	r2, [pc, #244]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x40>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01f      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d01b      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a2c      	ldr	r2, [pc, #176]	; (8003bf8 <TIM_Base_SetConfig+0x118>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d017      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <TIM_Base_SetConfig+0x11c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d013      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a2a      	ldr	r2, [pc, #168]	; (8003c00 <TIM_Base_SetConfig+0x120>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00f      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00b      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a28      	ldr	r2, [pc, #160]	; (8003c08 <TIM_Base_SetConfig+0x128>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d003      	beq.n	8003b7a <TIM_Base_SetConfig+0x9a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a26      	ldr	r2, [pc, #152]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d108      	bne.n	8003b8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a10      	ldr	r2, [pc, #64]	; (8003bf4 <TIM_Base_SetConfig+0x114>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00f      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <TIM_Base_SetConfig+0x124>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00b      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <TIM_Base_SetConfig+0x128>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d007      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <TIM_Base_SetConfig+0x12c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d003      	beq.n	8003bd8 <TIM_Base_SetConfig+0xf8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a0f      	ldr	r2, [pc, #60]	; (8003c10 <TIM_Base_SetConfig+0x130>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40012c00 	.word	0x40012c00
 8003bf8:	40000400 	.word	0x40000400
 8003bfc:	40000800 	.word	0x40000800
 8003c00:	40000c00 	.word	0x40000c00
 8003c04:	40013400 	.word	0x40013400
 8003c08:	40014000 	.word	0x40014000
 8003c0c:	40014400 	.word	0x40014400
 8003c10:	40014800 	.word	0x40014800

08003c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	f023 0201 	bic.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 030a 	bic.w	r3, r3, #10
 8003c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b087      	sub	sp, #28
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0210 	bic.w	r2, r3, #16
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	031b      	lsls	r3, r3, #12
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b085      	sub	sp, #20
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	f043 0307 	orr.w	r3, r3, #7
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	609a      	str	r2, [r3, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	021a      	lsls	r2, r3, #8
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	609a      	str	r2, [r3, #8]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e068      	b.n	8003e32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2e      	ldr	r2, [pc, #184]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1e      	ldr	r2, [pc, #120]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d01d      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd2:	d018      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d013      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a1a      	ldr	r2, [pc, #104]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d00e      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a13      	ldr	r2, [pc, #76]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d004      	beq.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10c      	bne.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	40013400 	.word	0x40013400
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40014000 	.word	0x40014000

08003e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e042      	b.n	8003f2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f001 f99b 	bl	80051f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2224      	movs	r2, #36	; 0x24
 8003ec2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0201 	bic.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f82c 	bl	8003f34 <UART_SetConfig>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e022      	b.n	8003f2c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fb1c 	bl	800452c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fba3 	bl	8004670 <UART_CheckIdleState>
 8003f2a:	4603      	mov	r3, r0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b08c      	sub	sp, #48	; 0x30
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	4baa      	ldr	r3, [pc, #680]	; (800420c <UART_SetConfig+0x2d8>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a9f      	ldr	r2, [pc, #636]	; (8004210 <UART_SetConfig+0x2dc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003faa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	6812      	ldr	r2, [r2, #0]
 8003fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	f023 010f 	bic.w	r1, r3, #15
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a90      	ldr	r2, [pc, #576]	; (8004214 <UART_SetConfig+0x2e0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d125      	bne.n	8004024 <UART_SetConfig+0xf0>
 8003fd8:	4b8f      	ldr	r3, [pc, #572]	; (8004218 <UART_SetConfig+0x2e4>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d81a      	bhi.n	800401c <UART_SetConfig+0xe8>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <UART_SetConfig+0xb8>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	0800400d 	.word	0x0800400d
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	08004015 	.word	0x08004015
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004002:	e116      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004004:	2302      	movs	r3, #2
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800400a:	e112      	b.n	8004232 <UART_SetConfig+0x2fe>
 800400c:	2304      	movs	r3, #4
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004012:	e10e      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004014:	2308      	movs	r3, #8
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401a:	e10a      	b.n	8004232 <UART_SetConfig+0x2fe>
 800401c:	2310      	movs	r3, #16
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004022:	e106      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a7c      	ldr	r2, [pc, #496]	; (800421c <UART_SetConfig+0x2e8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d138      	bne.n	80040a0 <UART_SetConfig+0x16c>
 800402e:	4b7a      	ldr	r3, [pc, #488]	; (8004218 <UART_SetConfig+0x2e4>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f003 030c 	and.w	r3, r3, #12
 8004038:	2b0c      	cmp	r3, #12
 800403a:	d82d      	bhi.n	8004098 <UART_SetConfig+0x164>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <UART_SetConfig+0x110>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004079 	.word	0x08004079
 8004048:	08004099 	.word	0x08004099
 800404c:	08004099 	.word	0x08004099
 8004050:	08004099 	.word	0x08004099
 8004054:	08004089 	.word	0x08004089
 8004058:	08004099 	.word	0x08004099
 800405c:	08004099 	.word	0x08004099
 8004060:	08004099 	.word	0x08004099
 8004064:	08004081 	.word	0x08004081
 8004068:	08004099 	.word	0x08004099
 800406c:	08004099 	.word	0x08004099
 8004070:	08004099 	.word	0x08004099
 8004074:	08004091 	.word	0x08004091
 8004078:	2300      	movs	r3, #0
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407e:	e0d8      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004080:	2302      	movs	r3, #2
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004086:	e0d4      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004088:	2304      	movs	r3, #4
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408e:	e0d0      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004090:	2308      	movs	r3, #8
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004096:	e0cc      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004098:	2310      	movs	r3, #16
 800409a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800409e:	e0c8      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a5e      	ldr	r2, [pc, #376]	; (8004220 <UART_SetConfig+0x2ec>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d125      	bne.n	80040f6 <UART_SetConfig+0x1c2>
 80040aa:	4b5b      	ldr	r3, [pc, #364]	; (8004218 <UART_SetConfig+0x2e4>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040b4:	2b30      	cmp	r3, #48	; 0x30
 80040b6:	d016      	beq.n	80040e6 <UART_SetConfig+0x1b2>
 80040b8:	2b30      	cmp	r3, #48	; 0x30
 80040ba:	d818      	bhi.n	80040ee <UART_SetConfig+0x1ba>
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d00a      	beq.n	80040d6 <UART_SetConfig+0x1a2>
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d814      	bhi.n	80040ee <UART_SetConfig+0x1ba>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d002      	beq.n	80040ce <UART_SetConfig+0x19a>
 80040c8:	2b10      	cmp	r3, #16
 80040ca:	d008      	beq.n	80040de <UART_SetConfig+0x1aa>
 80040cc:	e00f      	b.n	80040ee <UART_SetConfig+0x1ba>
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d4:	e0ad      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040d6:	2302      	movs	r3, #2
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040dc:	e0a9      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040de:	2304      	movs	r3, #4
 80040e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e4:	e0a5      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040e6:	2308      	movs	r3, #8
 80040e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ec:	e0a1      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040ee:	2310      	movs	r3, #16
 80040f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040f4:	e09d      	b.n	8004232 <UART_SetConfig+0x2fe>
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a4a      	ldr	r2, [pc, #296]	; (8004224 <UART_SetConfig+0x2f0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d125      	bne.n	800414c <UART_SetConfig+0x218>
 8004100:	4b45      	ldr	r3, [pc, #276]	; (8004218 <UART_SetConfig+0x2e4>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800410a:	2bc0      	cmp	r3, #192	; 0xc0
 800410c:	d016      	beq.n	800413c <UART_SetConfig+0x208>
 800410e:	2bc0      	cmp	r3, #192	; 0xc0
 8004110:	d818      	bhi.n	8004144 <UART_SetConfig+0x210>
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d00a      	beq.n	800412c <UART_SetConfig+0x1f8>
 8004116:	2b80      	cmp	r3, #128	; 0x80
 8004118:	d814      	bhi.n	8004144 <UART_SetConfig+0x210>
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <UART_SetConfig+0x1f0>
 800411e:	2b40      	cmp	r3, #64	; 0x40
 8004120:	d008      	beq.n	8004134 <UART_SetConfig+0x200>
 8004122:	e00f      	b.n	8004144 <UART_SetConfig+0x210>
 8004124:	2300      	movs	r3, #0
 8004126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412a:	e082      	b.n	8004232 <UART_SetConfig+0x2fe>
 800412c:	2302      	movs	r3, #2
 800412e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004132:	e07e      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004134:	2304      	movs	r3, #4
 8004136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800413a:	e07a      	b.n	8004232 <UART_SetConfig+0x2fe>
 800413c:	2308      	movs	r3, #8
 800413e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004142:	e076      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004144:	2310      	movs	r3, #16
 8004146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800414a:	e072      	b.n	8004232 <UART_SetConfig+0x2fe>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a35      	ldr	r2, [pc, #212]	; (8004228 <UART_SetConfig+0x2f4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d12a      	bne.n	80041ac <UART_SetConfig+0x278>
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <UART_SetConfig+0x2e4>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004164:	d01a      	beq.n	800419c <UART_SetConfig+0x268>
 8004166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416a:	d81b      	bhi.n	80041a4 <UART_SetConfig+0x270>
 800416c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004170:	d00c      	beq.n	800418c <UART_SetConfig+0x258>
 8004172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004176:	d815      	bhi.n	80041a4 <UART_SetConfig+0x270>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <UART_SetConfig+0x250>
 800417c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004180:	d008      	beq.n	8004194 <UART_SetConfig+0x260>
 8004182:	e00f      	b.n	80041a4 <UART_SetConfig+0x270>
 8004184:	2300      	movs	r3, #0
 8004186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418a:	e052      	b.n	8004232 <UART_SetConfig+0x2fe>
 800418c:	2302      	movs	r3, #2
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004192:	e04e      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e04a      	b.n	8004232 <UART_SetConfig+0x2fe>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e046      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e042      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a17      	ldr	r2, [pc, #92]	; (8004210 <UART_SetConfig+0x2dc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d13a      	bne.n	800422c <UART_SetConfig+0x2f8>
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <UART_SetConfig+0x2e4>)
 80041b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c4:	d01a      	beq.n	80041fc <UART_SetConfig+0x2c8>
 80041c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041ca:	d81b      	bhi.n	8004204 <UART_SetConfig+0x2d0>
 80041cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d0:	d00c      	beq.n	80041ec <UART_SetConfig+0x2b8>
 80041d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d6:	d815      	bhi.n	8004204 <UART_SetConfig+0x2d0>
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <UART_SetConfig+0x2b0>
 80041dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e0:	d008      	beq.n	80041f4 <UART_SetConfig+0x2c0>
 80041e2:	e00f      	b.n	8004204 <UART_SetConfig+0x2d0>
 80041e4:	2300      	movs	r3, #0
 80041e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041ea:	e022      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041ec:	2302      	movs	r3, #2
 80041ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041f2:	e01e      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041f4:	2304      	movs	r3, #4
 80041f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041fa:	e01a      	b.n	8004232 <UART_SetConfig+0x2fe>
 80041fc:	2308      	movs	r3, #8
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004202:	e016      	b.n	8004232 <UART_SetConfig+0x2fe>
 8004204:	2310      	movs	r3, #16
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420a:	e012      	b.n	8004232 <UART_SetConfig+0x2fe>
 800420c:	cfff69f3 	.word	0xcfff69f3
 8004210:	40008000 	.word	0x40008000
 8004214:	40013800 	.word	0x40013800
 8004218:	40021000 	.word	0x40021000
 800421c:	40004400 	.word	0x40004400
 8004220:	40004800 	.word	0x40004800
 8004224:	40004c00 	.word	0x40004c00
 8004228:	40005000 	.word	0x40005000
 800422c:	2310      	movs	r3, #16
 800422e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4aae      	ldr	r2, [pc, #696]	; (80044f0 <UART_SetConfig+0x5bc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	f040 8097 	bne.w	800436c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800423e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004242:	2b08      	cmp	r3, #8
 8004244:	d823      	bhi.n	800428e <UART_SetConfig+0x35a>
 8004246:	a201      	add	r2, pc, #4	; (adr r2, 800424c <UART_SetConfig+0x318>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	08004271 	.word	0x08004271
 8004250:	0800428f 	.word	0x0800428f
 8004254:	08004279 	.word	0x08004279
 8004258:	0800428f 	.word	0x0800428f
 800425c:	0800427f 	.word	0x0800427f
 8004260:	0800428f 	.word	0x0800428f
 8004264:	0800428f 	.word	0x0800428f
 8004268:	0800428f 	.word	0x0800428f
 800426c:	08004287 	.word	0x08004287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004270:	f7fe fb5a 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004276:	e010      	b.n	800429a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004278:	4b9e      	ldr	r3, [pc, #632]	; (80044f4 <UART_SetConfig+0x5c0>)
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800427c:	e00d      	b.n	800429a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800427e:	f7fe fabb 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8004282:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004284:	e009      	b.n	800429a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800428c:	e005      	b.n	800429a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8130 	beq.w	8004502 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	4a94      	ldr	r2, [pc, #592]	; (80044f8 <UART_SetConfig+0x5c4>)
 80042a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ac:	461a      	mov	r2, r3
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d305      	bcc.n	80042d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d903      	bls.n	80042da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042d8:	e113      	b.n	8004502 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	2200      	movs	r2, #0
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	60fa      	str	r2, [r7, #12]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	4a84      	ldr	r2, [pc, #528]	; (80044f8 <UART_SetConfig+0x5c4>)
 80042e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2200      	movs	r2, #0
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042fc:	f7fc fab6 	bl	800086c <__aeabi_uldivmod>
 8004300:	4602      	mov	r2, r0
 8004302:	460b      	mov	r3, r1
 8004304:	4610      	mov	r0, r2
 8004306:	4619      	mov	r1, r3
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	020b      	lsls	r3, r1, #8
 8004312:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004316:	0202      	lsls	r2, r0, #8
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	6849      	ldr	r1, [r1, #4]
 800431c:	0849      	lsrs	r1, r1, #1
 800431e:	2000      	movs	r0, #0
 8004320:	460c      	mov	r4, r1
 8004322:	4605      	mov	r5, r0
 8004324:	eb12 0804 	adds.w	r8, r2, r4
 8004328:	eb43 0905 	adc.w	r9, r3, r5
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	469a      	mov	sl, r3
 8004334:	4693      	mov	fp, r2
 8004336:	4652      	mov	r2, sl
 8004338:	465b      	mov	r3, fp
 800433a:	4640      	mov	r0, r8
 800433c:	4649      	mov	r1, r9
 800433e:	f7fc fa95 	bl	800086c <__aeabi_uldivmod>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4613      	mov	r3, r2
 8004348:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004350:	d308      	bcc.n	8004364 <UART_SetConfig+0x430>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004358:	d204      	bcs.n	8004364 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	e0ce      	b.n	8004502 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800436a:	e0ca      	b.n	8004502 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d166      	bne.n	8004444 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004376:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800437a:	2b08      	cmp	r3, #8
 800437c:	d827      	bhi.n	80043ce <UART_SetConfig+0x49a>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <UART_SetConfig+0x450>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fe fabe 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043ae:	e014      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fe fad0 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 80043b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b4e      	ldr	r3, [pc, #312]	; (80044f4 <UART_SetConfig+0x5c0>)
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043bc:	e00d      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fe fa1b 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80043c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80043c4:	e009      	b.n	80043da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80043cc:	e005      	b.n	80043da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80043d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 8090 	beq.w	8004502 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	4a44      	ldr	r2, [pc, #272]	; (80044f8 <UART_SetConfig+0x5c4>)
 80043e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f4:	005a      	lsls	r2, r3, #1
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	085b      	lsrs	r3, r3, #1
 80043fc:	441a      	add	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	fbb2 f3f3 	udiv	r3, r2, r3
 8004406:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b0f      	cmp	r3, #15
 800440c:	d916      	bls.n	800443c <UART_SetConfig+0x508>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004414:	d212      	bcs.n	800443c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	b29b      	uxth	r3, r3
 800441a:	f023 030f 	bic.w	r3, r3, #15
 800441e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	b29a      	uxth	r2, r3
 800442c:	8bfb      	ldrh	r3, [r7, #30]
 800442e:	4313      	orrs	r3, r2
 8004430:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	8bfa      	ldrh	r2, [r7, #30]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	e062      	b.n	8004502 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004442:	e05e      	b.n	8004502 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004444:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004448:	2b08      	cmp	r3, #8
 800444a:	d828      	bhi.n	800449e <UART_SetConfig+0x56a>
 800444c:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <UART_SetConfig+0x520>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004479 	.word	0x08004479
 8004458:	08004481 	.word	0x08004481
 800445c:	08004489 	.word	0x08004489
 8004460:	0800449f 	.word	0x0800449f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800449f 	.word	0x0800449f
 800446c:	0800449f 	.word	0x0800449f
 8004470:	0800449f 	.word	0x0800449f
 8004474:	08004497 	.word	0x08004497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004478:	f7fe fa56 	bl	8002928 <HAL_RCC_GetPCLK1Freq>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800447e:	e014      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004480:	f7fe fa68 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8004484:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004486:	e010      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <UART_SetConfig+0x5c0>)
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800448c:	e00d      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800448e:	f7fe f9b3 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004494:	e009      	b.n	80044aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800449c:	e005      	b.n	80044aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044a8:	bf00      	nop
    }

    if (pclk != 0U)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d028      	beq.n	8004502 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <UART_SetConfig+0x5c4>)
 80044b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ba:	461a      	mov	r2, r3
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	fbb3 f2f2 	udiv	r2, r3, r2
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085b      	lsrs	r3, r3, #1
 80044c8:	441a      	add	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	2b0f      	cmp	r3, #15
 80044d8:	d910      	bls.n	80044fc <UART_SetConfig+0x5c8>
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044e0:	d20c      	bcs.n	80044fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60da      	str	r2, [r3, #12]
 80044ec:	e009      	b.n	8004502 <UART_SetConfig+0x5ce>
 80044ee:	bf00      	nop
 80044f0:	40008000 	.word	0x40008000
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	08006020 	.word	0x08006020
      }
      else
      {
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2201      	movs	r2, #1
 8004506:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2201      	movs	r2, #1
 800450e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2200      	movs	r2, #0
 800451c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800451e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	; 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800452c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00a      	beq.n	800459a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01a      	beq.n	8004642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800462a:	d10a      	bne.n	8004642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]
  }
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af02      	add	r7, sp, #8
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004680:	f7fc fade 	bl	8000c40 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b08      	cmp	r3, #8
 8004692:	d10e      	bne.n	80046b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004694:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004698:	9300      	str	r3, [sp, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f82f 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e025      	b.n	80046fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d10e      	bne.n	80046de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f819 	bl	8004706 <UART_WaitOnFlagUntilTimeout>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e00f      	b.n	80046fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b09c      	sub	sp, #112	; 0x70
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004716:	e0a9      	b.n	800486c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800471e:	f000 80a5 	beq.w	800486c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fc fa8d 	bl	8000c40 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <UART_WaitOnFlagUntilTimeout+0x32>
 8004732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004734:	2b00      	cmp	r3, #0
 8004736:	d140      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800474c:	667b      	str	r3, [r7, #100]	; 0x64
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004758:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800475c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e6      	bne.n	8004738 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	3308      	adds	r3, #8
 8004770:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f023 0301 	bic.w	r3, r3, #1
 8004780:	663b      	str	r3, [r7, #96]	; 0x60
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3308      	adds	r3, #8
 8004788:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800478a:	64ba      	str	r2, [r7, #72]	; 0x48
 800478c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e5      	bne.n	800476a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e069      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d051      	beq.n	800486c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d149      	bne.n	800486c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
 8004802:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e6      	bne.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3308      	adds	r3, #8
 800481a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	613b      	str	r3, [r7, #16]
   return(result);
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	66bb      	str	r3, [r7, #104]	; 0x68
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3308      	adds	r3, #8
 8004832:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004834:	623a      	str	r2, [r7, #32]
 8004836:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	69f9      	ldr	r1, [r7, #28]
 800483a:	6a3a      	ldr	r2, [r7, #32]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	61bb      	str	r3, [r7, #24]
   return(result);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e010      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4013      	ands	r3, r2
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	bf0c      	ite	eq
 800487c:	2301      	moveq	r3, #1
 800487e:	2300      	movne	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	429a      	cmp	r2, r3
 8004888:	f43f af46 	beq.w	8004718 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3770      	adds	r7, #112	; 0x70
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_UARTEx_DisableFifoMode+0x16>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e027      	b.n	80048fc <HAL_UARTEx_DisableFifoMode+0x66>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0201 	bic.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80048da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2220      	movs	r2, #32
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e02d      	b.n	800497c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f84f 	bl	8004a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004998:	2302      	movs	r3, #2
 800499a:	e02d      	b.n	80049f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0201 	bic.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f811 	bl	8004a00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80049f6:	2300      	movs	r3, #0
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d108      	bne.n	8004a22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a20:	e031      	b.n	8004a86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a22:	2308      	movs	r3, #8
 8004a24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a26:	2308      	movs	r3, #8
 8004a28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	0e5b      	lsrs	r3, r3, #25
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	0f5b      	lsrs	r3, r3, #29
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a4a:	7bbb      	ldrb	r3, [r7, #14]
 8004a4c:	7b3a      	ldrb	r2, [r7, #12]
 8004a4e:	4911      	ldr	r1, [pc, #68]	; (8004a94 <UARTEx_SetNbDataToProcess+0x94>)
 8004a50:	5c8a      	ldrb	r2, [r1, r2]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a56:	7b3a      	ldrb	r2, [r7, #12]
 8004a58:	490f      	ldr	r1, [pc, #60]	; (8004a98 <UARTEx_SetNbDataToProcess+0x98>)
 8004a5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	7b7a      	ldrb	r2, [r7, #13]
 8004a6c:	4909      	ldr	r1, [pc, #36]	; (8004a94 <UARTEx_SetNbDataToProcess+0x94>)
 8004a6e:	5c8a      	ldrb	r2, [r1, r2]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a74:	7b7a      	ldrb	r2, [r7, #13]
 8004a76:	4908      	ldr	r1, [pc, #32]	; (8004a98 <UARTEx_SetNbDataToProcess+0x98>)
 8004a78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08006038 	.word	0x08006038
 8004a98:	08006040 	.word	0x08006040

08004a9c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004aa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004aa8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004ab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ab8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004abc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00b      	beq.n	8004adc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004ac4:	e000      	b.n	8004ac8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004ac6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004ac8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f9      	beq.n	8004ac6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004ad2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004adc:	687b      	ldr	r3, [r7, #4]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Define our interrupt handlers
// Handler for button interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { // page 391 HAL driver manual
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	4603      	mov	r3, r0
 8004af4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == userButton_Pin) { // verify that only the pin we want is starting this interrupt (good coding practice)
 8004af6:	88fb      	ldrh	r3, [r7, #6]
 8004af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afc:	d104      	bne.n	8004b08 <HAL_GPIO_EXTI_Callback+0x1c>
		//note_selector = (note_selector + 1)%3; // cycle through three notes
		HAL_GPIO_TogglePin(myLed_GPIO_Port, myLed_Pin); // toggle LED
 8004afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004b02:	4803      	ldr	r0, [pc, #12]	; (8004b10 <HAL_GPIO_EXTI_Callback+0x24>)
 8004b04:	f7fd f82e 	bl	8001b64 <HAL_GPIO_TogglePin>


	}
}
 8004b08:	bf00      	nop
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	48000400 	.word	0x48000400

08004b14 <HAL_TIM_PeriodElapsedCallback>:

// Handler for timer interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d11e      	bne.n	8004b62 <HAL_TIM_PeriodElapsedCallback+0x4e>
		sine_wave_index = (sine_wave_index + 1)%44;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8004b2c:	fb83 1302 	smull	r1, r3, r3, r2
 8004b30:	10d9      	asrs	r1, r3, #3
 8004b32:	17d3      	asrs	r3, r2, #31
 8004b34:	1acb      	subs	r3, r1, r3
 8004b36:	212c      	movs	r1, #44	; 0x2c
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	4a0c      	ldr	r2, [pc, #48]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004b40:	6013      	str	r3, [r2, #0]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (uint32_t) sine_wave_values[sine_wave_index]);
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	edd3 7a00 	vldr	s15, [r3]
 8004b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b54:	ee17 3a90 	vmov	r3, s15
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2110      	movs	r1, #16
 8004b5c:	4807      	ldr	r0, [pc, #28]	; (8004b7c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004b5e:	f7fc fa24 	bl	8000faa <HAL_DAC_SetValue>

		//note_data_index = (note_data_index + 1) % 15;
	}
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000104 	.word	0x20000104
 8004b70:	20000210 	.word	0x20000210
 8004b74:	2e8ba2e9 	.word	0x2e8ba2e9
 8004b78:	20000214 	.word	0x20000214
 8004b7c:	20000090 	.word	0x20000090

08004b80 <_write>:

// for printf
int _write(int file, char *ptr, int len) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e009      	b.n	8004ba6 <_write+0x26>
		ITM_SendChar(*ptr++);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	60ba      	str	r2, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff7e 	bl	8004a9c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dbf1      	blt.n	8004b92 <_write+0x12>
	}
	return len;
 8004bae:	687b      	ldr	r3, [r7, #4]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bb8:	b598      	push	{r3, r4, r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	note_selector = 0; // [0, 2] to indicate if the note that should be played is C6 E6 or G6 respectively
 8004bbc:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <main+0xe8>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]
	note_data_index = 0; // index of above array to indicate which piece of data we are on
 8004bc2:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <main+0xec>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]


	sine_wave_index = 0; //[0, 43] 44.1 kHz sample rate, 1kHz desired sine wave, so one period every 44 samples
 8004bc8:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <main+0xf0>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bce:	f7fb ffcf 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004bd2:	f000 f879 	bl	8004cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bd6:	f000 f9cf 	bl	8004f78 <MX_GPIO_Init>
  MX_DMA_Init();
 8004bda:	f000 f9a3 	bl	8004f24 <MX_DMA_Init>
  MX_DAC1_Init();
 8004bde:	f000 f8c5 	bl	8004d6c <MX_DAC1_Init>
  MX_TIM2_Init();
 8004be2:	f000 f905 	bl	8004df0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004be6:	f000 f951 	bl	8004e8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize DAC
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_1);
 8004bea:	2200      	movs	r2, #0
 8004bec:	492f      	ldr	r1, [pc, #188]	; (8004cac <main+0xf4>)
 8004bee:	4830      	ldr	r0, [pc, #192]	; (8004cb0 <main+0xf8>)
 8004bf0:	f7fc fb40 	bl	8001274 <HAL_DACEx_SelfCalibrate>
  HAL_DACEx_SelfCalibrate(&hdac1, &sConfigGlobal, DAC1_CHANNEL_2);//from part 1
 8004bf4:	2210      	movs	r2, #16
 8004bf6:	492d      	ldr	r1, [pc, #180]	; (8004cac <main+0xf4>)
 8004bf8:	482d      	ldr	r0, [pc, #180]	; (8004cb0 <main+0xf8>)
 8004bfa:	f7fc fb3b 	bl	8001274 <HAL_DACEx_SelfCalibrate>


  // Start DAC and timer
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8004bfe:	2100      	movs	r1, #0
 8004c00:	482b      	ldr	r0, [pc, #172]	; (8004cb0 <main+0xf8>)
 8004c02:	f7fc f980 	bl	8000f06 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);//from part 1
 8004c06:	2110      	movs	r1, #16
 8004c08:	4829      	ldr	r0, [pc, #164]	; (8004cb0 <main+0xf8>)
 8004c0a:	f7fc f97c 	bl	8000f06 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2); //Start the timer in interrupt mode
 8004c0e:	4829      	ldr	r0, [pc, #164]	; (8004cb4 <main+0xfc>)
 8004c10:	f7fe fce6 	bl	80035e0 <HAL_TIM_Base_Start_IT>
  // Part 2 Code below
  // ----------------------------------------------------------------------------------------------------------------------------------------


  // make sine array
  for (sine_wave_index = 0; sine_wave_index < 44; sine_wave_index++) {
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <main+0xf0>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e032      	b.n	8004c82 <main+0xca>
	  sine_wave_values[sine_wave_index] = (arm_sin_f32(2*PI*sine_wave_index/44)+1)*(2047.5);
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <main+0xf0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c28:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004cb8 <main+0x100>
 8004c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c30:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004cbc <main+0x104>
 8004c34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c38:	eeb0 0a47 	vmov.f32	s0, s14
 8004c3c:	f000 fc64 	bl	8005508 <arm_sin_f32>
 8004c40:	eef0 7a40 	vmov.f32	s15, s0
 8004c44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c4c:	ee17 0a90 	vmov	r0, s15
 8004c50:	f7fb fd64 	bl	800071c <__aeabi_f2d>
 8004c54:	a310      	add	r3, pc, #64	; (adr r3, 8004c98 <main+0xe0>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fad1 	bl	8000200 <__aeabi_dmul>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4911      	ldr	r1, [pc, #68]	; (8004ca8 <main+0xf0>)
 8004c64:	680c      	ldr	r4, [r1, #0]
 8004c66:	4610      	mov	r0, r2
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f7fb fdaf 	bl	80007cc <__aeabi_d2f>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	4913      	ldr	r1, [pc, #76]	; (8004cc0 <main+0x108>)
 8004c72:	00a3      	lsls	r3, r4, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	601a      	str	r2, [r3, #0]
  for (sine_wave_index = 0; sine_wave_index < 44; sine_wave_index++) {
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <main+0xf0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <main+0xf0>)
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <main+0xf0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b2b      	cmp	r3, #43	; 0x2b
 8004c88:	ddc8      	ble.n	8004c1c <main+0x64>

  }
  printf("Sine array made.\n");
 8004c8a:	480e      	ldr	r0, [pc, #56]	; (8004cc4 <main+0x10c>)
 8004c8c:	f000 fd22 	bl	80056d4 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004c90:	e7fe      	b.n	8004c90 <main+0xd8>
 8004c92:	bf00      	nop
 8004c94:	f3af 8000 	nop.w
 8004c98:	00000000 	.word	0x00000000
 8004c9c:	409ffe00 	.word	0x409ffe00
 8004ca0:	20000208 	.word	0x20000208
 8004ca4:	2000020c 	.word	0x2000020c
 8004ca8:	20000210 	.word	0x20000210
 8004cac:	200001e0 	.word	0x200001e0
 8004cb0:	20000090 	.word	0x20000090
 8004cb4:	20000104 	.word	0x20000104
 8004cb8:	40c90fdb 	.word	0x40c90fdb
 8004cbc:	42300000 	.word	0x42300000
 8004cc0:	20000214 	.word	0x20000214
 8004cc4:	0800600c 	.word	0x0800600c

08004cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b096      	sub	sp, #88	; 0x58
 8004ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cce:	f107 0314 	add.w	r3, r7, #20
 8004cd2:	2244      	movs	r2, #68	; 0x44
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fc86 	bl	80055e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cdc:	463b      	mov	r3, r7
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	605a      	str	r2, [r3, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
 8004ce8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004cea:	2000      	movs	r0, #0
 8004cec:	f7fc ff8c 	bl	8001c08 <HAL_PWREx_ControlVoltageScaling>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004cf6:	f000 f9c1 	bl	800507c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004d06:	2360      	movs	r3, #96	; 0x60
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004d16:	233c      	movs	r3, #60	; 0x3c
 8004d18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d22:	2302      	movs	r3, #2
 8004d24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d26:	f107 0314 	add.w	r3, r7, #20
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd f810 	bl	8001d50 <HAL_RCC_OscConfig>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004d36:	f000 f9a1 	bl	800507c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d3a:	230f      	movs	r3, #15
 8004d3c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004d4e:	463b      	mov	r3, r7
 8004d50:	2105      	movs	r1, #5
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fd fc16 	bl	8002584 <HAL_RCC_ClockConfig>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004d5e:	f000 f98d 	bl	800507c <Error_Handler>
  }
}
 8004d62:	bf00      	nop
 8004d64:	3758      	adds	r7, #88	; 0x58
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8004d72:	463b      	mov	r3, r7
 8004d74:	2228      	movs	r2, #40	; 0x28
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fc35 	bl	80055e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <MX_DAC1_Init+0x7c>)
 8004d80:	4a1a      	ldr	r2, [pc, #104]	; (8004dec <MX_DAC1_Init+0x80>)
 8004d82:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8004d84:	4818      	ldr	r0, [pc, #96]	; (8004de8 <MX_DAC1_Init+0x7c>)
 8004d86:	f7fc f89c 	bl	8000ec2 <HAL_DAC_Init>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8004d90:	f000 f974 	bl	800507c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8004d98:	230a      	movs	r3, #10
 8004d9a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004d9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004dae:	463b      	mov	r3, r7
 8004db0:	2200      	movs	r2, #0
 8004db2:	4619      	mov	r1, r3
 8004db4:	480c      	ldr	r0, [pc, #48]	; (8004de8 <MX_DAC1_Init+0x7c>)
 8004db6:	f7fc f91d 	bl	8000ff4 <HAL_DAC_ConfigChannel>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8004dc0:	f000 f95c 	bl	800507c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004dc8:	463b      	mov	r3, r7
 8004dca:	2210      	movs	r2, #16
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4806      	ldr	r0, [pc, #24]	; (8004de8 <MX_DAC1_Init+0x7c>)
 8004dd0:	f7fc f910 	bl	8000ff4 <HAL_DAC_ConfigChannel>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_DAC1_Init+0x72>
  {
    Error_Handler();
 8004dda:	f000 f94f 	bl	800507c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8004dde:	bf00      	nop
 8004de0:	3728      	adds	r7, #40	; 0x28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	20000090 	.word	0x20000090
 8004dec:	40007400 	.word	0x40007400

08004df0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004df6:	f107 0310 	add.w	r3, r7, #16
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	609a      	str	r2, [r3, #8]
 8004e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004e16:	4b1c      	ldr	r3, [pc, #112]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 8004e22:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e24:	f240 7216 	movw	r2, #1814	; 0x716
 8004e28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e2a:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e30:	4b15      	ldr	r3, [pc, #84]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e36:	4814      	ldr	r0, [pc, #80]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e38:	f7fe fb7a 	bl	8003530 <HAL_TIM_Base_Init>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004e42:	f000 f91b 	bl	800507c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e4c:	f107 0310 	add.w	r3, r7, #16
 8004e50:	4619      	mov	r1, r3
 8004e52:	480d      	ldr	r0, [pc, #52]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e54:	f7fe fd53 	bl	80038fe <HAL_TIM_ConfigClockSource>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e5e:	f000 f90d 	bl	800507c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004e62:	2320      	movs	r3, #32
 8004e64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e6a:	1d3b      	adds	r3, r7, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4806      	ldr	r0, [pc, #24]	; (8004e88 <MX_TIM2_Init+0x98>)
 8004e70:	f7fe ff6a 	bl	8003d48 <HAL_TIMEx_MasterConfigSynchronization>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004e7a:	f000 f8ff 	bl	800507c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e7e:	bf00      	nop
 8004e80:	3720      	adds	r7, #32
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000104 	.word	0x20000104

08004e8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e90:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004e92:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <MX_USART2_UART_Init+0x94>)
 8004e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004e96:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e9e:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004eb0:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004eb2:	220c      	movs	r2, #12
 8004eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb6:	4b19      	ldr	r3, [pc, #100]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ec8:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ed4:	4811      	ldr	r0, [pc, #68]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ed6:	f7fe ffdd 	bl	8003e94 <HAL_UART_Init>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004ee0:	f000 f8cc 	bl	800507c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	480d      	ldr	r0, [pc, #52]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004ee8:	f7ff fd0e 	bl	8004908 <HAL_UARTEx_SetTxFifoThreshold>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004ef2:	f000 f8c3 	bl	800507c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	4808      	ldr	r0, [pc, #32]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004efa:	f7ff fd43 	bl	8004984 <HAL_UARTEx_SetRxFifoThreshold>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004f04:	f000 f8ba 	bl	800507c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f08:	4804      	ldr	r0, [pc, #16]	; (8004f1c <MX_USART2_UART_Init+0x90>)
 8004f0a:	f7ff fcc4 	bl	8004896 <HAL_UARTEx_DisableFifoMode>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004f14:	f000 f8b2 	bl	800507c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000150 	.word	0x20000150
 8004f20:	40004400 	.word	0x40004400

08004f24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004f2a:	4b12      	ldr	r3, [pc, #72]	; (8004f74 <MX_DMA_Init+0x50>)
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <MX_DMA_Init+0x50>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6493      	str	r3, [r2, #72]	; 0x48
 8004f36:	4b0f      	ldr	r3, [pc, #60]	; (8004f74 <MX_DMA_Init+0x50>)
 8004f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	607b      	str	r3, [r7, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f42:	4b0c      	ldr	r3, [pc, #48]	; (8004f74 <MX_DMA_Init+0x50>)
 8004f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f46:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <MX_DMA_Init+0x50>)
 8004f48:	f043 0301 	orr.w	r3, r3, #1
 8004f4c:	6493      	str	r3, [r2, #72]	; 0x48
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <MX_DMA_Init+0x50>)
 8004f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	200b      	movs	r0, #11
 8004f60:	f7fb ff79 	bl	8000e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004f64:	200b      	movs	r0, #11
 8004f66:	f7fb ff92 	bl	8000e8e <HAL_NVIC_EnableIRQ>

}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000

08004f78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7e:	f107 0314 	add.w	r3, r7, #20
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	609a      	str	r2, [r3, #8]
 8004f8a:	60da      	str	r2, [r3, #12]
 8004f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	4a37      	ldr	r2, [pc, #220]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004f94:	f043 0304 	orr.w	r3, r3, #4
 8004f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f9a:	4b35      	ldr	r3, [pc, #212]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa6:	4b32      	ldr	r3, [pc, #200]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004faa:	4a31      	ldr	r2, [pc, #196]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	4a2b      	ldr	r2, [pc, #172]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fc4:	f043 0302 	orr.w	r3, r3, #2
 8004fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	4a25      	ldr	r2, [pc, #148]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fdc:	f043 0308 	orr.w	r3, r3, #8
 8004fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <MX_GPIO_Init+0xf8>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(myLed_GPIO_Port, myLed_Pin, GPIO_PIN_RESET);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ff4:	481f      	ldr	r0, [pc, #124]	; (8005074 <MX_GPIO_Init+0xfc>)
 8004ff6:	f7fc fd9d 	bl	8001b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8004ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ffe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005000:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4619      	mov	r1, r3
 8005010:	4819      	ldr	r0, [pc, #100]	; (8005078 <MX_GPIO_Init+0x100>)
 8005012:	f7fc fbfd 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005016:	230c      	movs	r3, #12
 8005018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005022:	2303      	movs	r3, #3
 8005024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005026:	2308      	movs	r3, #8
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502a:	f107 0314 	add.w	r3, r7, #20
 800502e:	4619      	mov	r1, r3
 8005030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005034:	f7fc fbec 	bl	8001810 <HAL_GPIO_Init>

  /*Configure GPIO pin : myLed_Pin */
  GPIO_InitStruct.Pin = myLed_Pin;
 8005038:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800503c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800503e:	2301      	movs	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(myLed_GPIO_Port, &GPIO_InitStruct);
 800504a:	f107 0314 	add.w	r3, r7, #20
 800504e:	4619      	mov	r1, r3
 8005050:	4808      	ldr	r0, [pc, #32]	; (8005074 <MX_GPIO_Init+0xfc>)
 8005052:	f7fc fbdd 	bl	8001810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005056:	2200      	movs	r2, #0
 8005058:	2100      	movs	r1, #0
 800505a:	2028      	movs	r0, #40	; 0x28
 800505c:	f7fb fefb 	bl	8000e56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005060:	2028      	movs	r0, #40	; 0x28
 8005062:	f7fb ff14 	bl	8000e8e <HAL_NVIC_EnableIRQ>

}
 8005066:	bf00      	nop
 8005068:	3728      	adds	r7, #40	; 0x28
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	48000400 	.word	0x48000400
 8005078:	48000800 	.word	0x48000800

0800507c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005080:	b672      	cpsid	i
}
 8005082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005084:	e7fe      	b.n	8005084 <Error_Handler+0x8>
	...

08005088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <HAL_MspInit+0x44>)
 8005090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005092:	4a0e      	ldr	r2, [pc, #56]	; (80050cc <HAL_MspInit+0x44>)
 8005094:	f043 0301 	orr.w	r3, r3, #1
 8005098:	6613      	str	r3, [r2, #96]	; 0x60
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <HAL_MspInit+0x44>)
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_MspInit+0x44>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050aa:	4a08      	ldr	r2, [pc, #32]	; (80050cc <HAL_MspInit+0x44>)
 80050ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b0:	6593      	str	r3, [r2, #88]	; 0x58
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <HAL_MspInit+0x44>)
 80050b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000

080050d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050d8:	f107 0314 	add.w	r3, r7, #20
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	60da      	str	r2, [r3, #12]
 80050e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a2b      	ldr	r2, [pc, #172]	; (800519c <HAL_DAC_MspInit+0xcc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d14f      	bne.n	8005192 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80050f2:	4b2b      	ldr	r3, [pc, #172]	; (80051a0 <HAL_DAC_MspInit+0xd0>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <HAL_DAC_MspInit+0xd0>)
 80050f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
 80050fe:	4b28      	ldr	r3, [pc, #160]	; (80051a0 <HAL_DAC_MspInit+0xd0>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510a:	4b25      	ldr	r3, [pc, #148]	; (80051a0 <HAL_DAC_MspInit+0xd0>)
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	4a24      	ldr	r2, [pc, #144]	; (80051a0 <HAL_DAC_MspInit+0xd0>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <HAL_DAC_MspInit+0xd0>)
 8005118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005122:	2330      	movs	r3, #48	; 0x30
 8005124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005126:	2303      	movs	r3, #3
 8005128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800512e:	f107 0314 	add.w	r3, r7, #20
 8005132:	4619      	mov	r1, r3
 8005134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005138:	f7fc fb6a 	bl	8001810 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 800513e:	4a1a      	ldr	r2, [pc, #104]	; (80051a8 <HAL_DAC_MspInit+0xd8>)
 8005140:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 8005144:	2206      	movs	r2, #6
 8005146:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005148:	4b16      	ldr	r3, [pc, #88]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 800514a:	2210      	movs	r2, #16
 800514c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 8005150:	2200      	movs	r2, #0
 8005152:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005154:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 800515c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005160:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 8005164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005168:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 800516c:	2220      	movs	r2, #32
 800516e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 8005172:	2200      	movs	r2, #0
 8005174:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005176:	480b      	ldr	r0, [pc, #44]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 8005178:	f7fc f990 	bl	800149c <HAL_DMA_Init>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8005182:	f7ff ff7b 	bl	800507c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a06      	ldr	r2, [pc, #24]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 800518a:	609a      	str	r2, [r3, #8]
 800518c:	4a05      	ldr	r2, [pc, #20]	; (80051a4 <HAL_DAC_MspInit+0xd4>)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005192:	bf00      	nop
 8005194:	3728      	adds	r7, #40	; 0x28
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40007400 	.word	0x40007400
 80051a0:	40021000 	.word	0x40021000
 80051a4:	200000a4 	.word	0x200000a4
 80051a8:	40020008 	.word	0x40020008

080051ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d113      	bne.n	80051e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051be:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <HAL_TIM_Base_MspInit+0x44>)
 80051c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c2:	4a0b      	ldr	r2, [pc, #44]	; (80051f0 <HAL_TIM_Base_MspInit+0x44>)
 80051c4:	f043 0301 	orr.w	r3, r3, #1
 80051c8:	6593      	str	r3, [r2, #88]	; 0x58
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <HAL_TIM_Base_MspInit+0x44>)
 80051cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80051d6:	2200      	movs	r2, #0
 80051d8:	2100      	movs	r1, #0
 80051da:	201c      	movs	r0, #28
 80051dc:	f7fb fe3b 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051e0:	201c      	movs	r0, #28
 80051e2:	f7fb fe54 	bl	8000e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80051e6:	bf00      	nop
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000

080051f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b0b0      	sub	sp, #192	; 0xc0
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	605a      	str	r2, [r3, #4]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	60da      	str	r2, [r3, #12]
 800520a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800520c:	f107 0318 	add.w	r3, r7, #24
 8005210:	2294      	movs	r2, #148	; 0x94
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f000 f9e7 	bl	80055e8 <memset>
  if(huart->Instance==USART2)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a32      	ldr	r2, [pc, #200]	; (80052e8 <HAL_UART_MspInit+0xf4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d15d      	bne.n	80052e0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005224:	2302      	movs	r3, #2
 8005226:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005228:	2300      	movs	r3, #0
 800522a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800522c:	f107 0318 	add.w	r3, r7, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7fd fc65 	bl	8002b00 <HAL_RCCEx_PeriphCLKConfig>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800523c:	f7ff ff1e 	bl	800507c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <HAL_UART_MspInit+0xf8>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	4a29      	ldr	r2, [pc, #164]	; (80052ec <HAL_UART_MspInit+0xf8>)
 8005246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800524a:	6593      	str	r3, [r2, #88]	; 0x58
 800524c:	4b27      	ldr	r3, [pc, #156]	; (80052ec <HAL_UART_MspInit+0xf8>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <HAL_UART_MspInit+0xf8>)
 800525a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525c:	4a23      	ldr	r2, [pc, #140]	; (80052ec <HAL_UART_MspInit+0xf8>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005264:	4b21      	ldr	r3, [pc, #132]	; (80052ec <HAL_UART_MspInit+0xf8>)
 8005266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005270:	4b1e      	ldr	r3, [pc, #120]	; (80052ec <HAL_UART_MspInit+0xf8>)
 8005272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005274:	4a1d      	ldr	r2, [pc, #116]	; (80052ec <HAL_UART_MspInit+0xf8>)
 8005276:	f043 0308 	orr.w	r3, r3, #8
 800527a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800527c:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_UART_MspInit+0xf8>)
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA15 (JTDI)     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005290:	2302      	movs	r3, #2
 8005292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800529c:	2303      	movs	r3, #3
 800529e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80052a2:	2303      	movs	r3, #3
 80052a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052b2:	f7fc faad 	bl	8001810 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80052b6:	2320      	movs	r3, #32
 80052b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052bc:	2302      	movs	r3, #2
 80052be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052c8:	2303      	movs	r3, #3
 80052ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80052ce:	2307      	movs	r3, #7
 80052d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80052d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80052d8:	4619      	mov	r1, r3
 80052da:	4805      	ldr	r0, [pc, #20]	; (80052f0 <HAL_UART_MspInit+0xfc>)
 80052dc:	f7fc fa98 	bl	8001810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80052e0:	bf00      	nop
 80052e2:	37c0      	adds	r7, #192	; 0xc0
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40004400 	.word	0x40004400
 80052ec:	40021000 	.word	0x40021000
 80052f0:	48000c00 	.word	0x48000c00

080052f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052f8:	e7fe      	b.n	80052f8 <NMI_Handler+0x4>

080052fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052fa:	b480      	push	{r7}
 80052fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052fe:	e7fe      	b.n	80052fe <HardFault_Handler+0x4>

08005300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005304:	e7fe      	b.n	8005304 <MemManage_Handler+0x4>

08005306 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800530a:	e7fe      	b.n	800530a <BusFault_Handler+0x4>

0800530c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005310:	e7fe      	b.n	8005310 <UsageFault_Handler+0x4>

08005312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005316:	bf00      	nop
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005332:	bf00      	nop
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005340:	f7fb fc6a 	bl	8000c18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005344:	bf00      	nop
 8005346:	bd80      	pop	{r7, pc}

08005348 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800534c:	4802      	ldr	r0, [pc, #8]	; (8005358 <DMA1_Channel1_IRQHandler+0x10>)
 800534e:	f7fc f94d 	bl	80015ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005352:	bf00      	nop
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200000a4 	.word	0x200000a4

0800535c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005360:	4802      	ldr	r0, [pc, #8]	; (800536c <TIM2_IRQHandler+0x10>)
 8005362:	f7fe f9ad 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005366:	bf00      	nop
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000104 	.word	0x20000104

08005370 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(userButton_Pin);
 8005374:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005378:	f7fc fc0e 	bl	8001b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800537c:	bf00      	nop
 800537e:	bd80      	pop	{r7, pc}

08005380 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e00a      	b.n	80053a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005392:	f3af 8000 	nop.w
 8005396:	4601      	mov	r1, r0
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	60ba      	str	r2, [r7, #8]
 800539e:	b2ca      	uxtb	r2, r1
 80053a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3301      	adds	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	dbf0      	blt.n	8005392 <_read+0x12>
  }

  return len;
 80053b0:	687b      	ldr	r3, [r7, #4]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b083      	sub	sp, #12
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b083      	sub	sp, #12
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053e2:	605a      	str	r2, [r3, #4]
  return 0;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <_isatty>:

int _isatty(int file)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053fa:	2301      	movs	r3, #1
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800542c:	4a14      	ldr	r2, [pc, #80]	; (8005480 <_sbrk+0x5c>)
 800542e:	4b15      	ldr	r3, [pc, #84]	; (8005484 <_sbrk+0x60>)
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005438:	4b13      	ldr	r3, [pc, #76]	; (8005488 <_sbrk+0x64>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <_sbrk+0x64>)
 8005442:	4a12      	ldr	r2, [pc, #72]	; (800548c <_sbrk+0x68>)
 8005444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <_sbrk+0x64>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d207      	bcs.n	8005464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005454:	f000 f89e 	bl	8005594 <__errno>
 8005458:	4603      	mov	r3, r0
 800545a:	220c      	movs	r2, #12
 800545c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800545e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005462:	e009      	b.n	8005478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <_sbrk+0x64>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800546a:	4b07      	ldr	r3, [pc, #28]	; (8005488 <_sbrk+0x64>)
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	4a05      	ldr	r2, [pc, #20]	; (8005488 <_sbrk+0x64>)
 8005474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200a0000 	.word	0x200a0000
 8005484:	00000400 	.word	0x00000400
 8005488:	200002c4 	.word	0x200002c4
 800548c:	200002d8 	.word	0x200002d8

08005490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <SystemInit+0x20>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <SystemInit+0x20>)
 800549c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80054a4:	bf00      	nop
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80054b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80054b8:	f7ff ffea 	bl	8005490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054bc:	480c      	ldr	r0, [pc, #48]	; (80054f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80054be:	490d      	ldr	r1, [pc, #52]	; (80054f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <LoopForever+0xe>)
  movs r3, #0
 80054c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054c4:	e002      	b.n	80054cc <LoopCopyDataInit>

080054c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054ca:	3304      	adds	r3, #4

080054cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054d0:	d3f9      	bcc.n	80054c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054d2:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80054d4:	4c0a      	ldr	r4, [pc, #40]	; (8005500 <LoopForever+0x16>)
  movs r3, #0
 80054d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054d8:	e001      	b.n	80054de <LoopFillZerobss>

080054da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054dc:	3204      	adds	r2, #4

080054de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054e0:	d3fb      	bcc.n	80054da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80054e2:	f000 f85d 	bl	80055a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80054e6:	f7ff fb67 	bl	8004bb8 <main>

080054ea <LoopForever>:

LoopForever:
    b LoopForever
 80054ea:	e7fe      	b.n	80054ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80054ec:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80054f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80054f8:	08006908 	.word	0x08006908
  ldr r2, =_sbss
 80054fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8005500:	200002d8 	.word	0x200002d8

08005504 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005504:	e7fe      	b.n	8005504 <ADC1_IRQHandler>
	...

08005508 <arm_sin_f32>:
 8005508:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005588 <arm_sin_f32+0x80>
 800550c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005510:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005518:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800551c:	d504      	bpl.n	8005528 <arm_sin_f32+0x20>
 800551e:	ee17 3a90 	vmov	r3, s15
 8005522:	3b01      	subs	r3, #1
 8005524:	ee07 3a90 	vmov	s15, r3
 8005528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800552c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800558c <arm_sin_f32+0x84>
 8005530:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005534:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005538:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800553c:	ee17 3a90 	vmov	r3, s15
 8005540:	b29b      	uxth	r3, r3
 8005542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005546:	d21a      	bcs.n	800557e <arm_sin_f32+0x76>
 8005548:	ee07 3a90 	vmov	s15, r3
 800554c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005550:	1c59      	adds	r1, r3, #1
 8005552:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005556:	4a0e      	ldr	r2, [pc, #56]	; (8005590 <arm_sin_f32+0x88>)
 8005558:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800555c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005560:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005564:	ed93 7a00 	vldr	s14, [r3]
 8005568:	edd2 6a00 	vldr	s13, [r2]
 800556c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005570:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005578:	ee37 0a80 	vadd.f32	s0, s15, s0
 800557c:	4770      	bx	lr
 800557e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005582:	2101      	movs	r1, #1
 8005584:	2300      	movs	r3, #0
 8005586:	e7e6      	b.n	8005556 <arm_sin_f32+0x4e>
 8005588:	3e22f983 	.word	0x3e22f983
 800558c:	44000000 	.word	0x44000000
 8005590:	08006090 	.word	0x08006090

08005594 <__errno>:
 8005594:	4b01      	ldr	r3, [pc, #4]	; (800559c <__errno+0x8>)
 8005596:	6818      	ldr	r0, [r3, #0]
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	2000000c 	.word	0x2000000c

080055a0 <__libc_init_array>:
 80055a0:	b570      	push	{r4, r5, r6, lr}
 80055a2:	4d0d      	ldr	r5, [pc, #52]	; (80055d8 <__libc_init_array+0x38>)
 80055a4:	4c0d      	ldr	r4, [pc, #52]	; (80055dc <__libc_init_array+0x3c>)
 80055a6:	1b64      	subs	r4, r4, r5
 80055a8:	10a4      	asrs	r4, r4, #2
 80055aa:	2600      	movs	r6, #0
 80055ac:	42a6      	cmp	r6, r4
 80055ae:	d109      	bne.n	80055c4 <__libc_init_array+0x24>
 80055b0:	4d0b      	ldr	r5, [pc, #44]	; (80055e0 <__libc_init_array+0x40>)
 80055b2:	4c0c      	ldr	r4, [pc, #48]	; (80055e4 <__libc_init_array+0x44>)
 80055b4:	f000 fd1e 	bl	8005ff4 <_init>
 80055b8:	1b64      	subs	r4, r4, r5
 80055ba:	10a4      	asrs	r4, r4, #2
 80055bc:	2600      	movs	r6, #0
 80055be:	42a6      	cmp	r6, r4
 80055c0:	d105      	bne.n	80055ce <__libc_init_array+0x2e>
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055c8:	4798      	blx	r3
 80055ca:	3601      	adds	r6, #1
 80055cc:	e7ee      	b.n	80055ac <__libc_init_array+0xc>
 80055ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d2:	4798      	blx	r3
 80055d4:	3601      	adds	r6, #1
 80055d6:	e7f2      	b.n	80055be <__libc_init_array+0x1e>
 80055d8:	08006900 	.word	0x08006900
 80055dc:	08006900 	.word	0x08006900
 80055e0:	08006900 	.word	0x08006900
 80055e4:	08006904 	.word	0x08006904

080055e8 <memset>:
 80055e8:	4402      	add	r2, r0
 80055ea:	4603      	mov	r3, r0
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d100      	bne.n	80055f2 <memset+0xa>
 80055f0:	4770      	bx	lr
 80055f2:	f803 1b01 	strb.w	r1, [r3], #1
 80055f6:	e7f9      	b.n	80055ec <memset+0x4>

080055f8 <_puts_r>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	460e      	mov	r6, r1
 80055fc:	4605      	mov	r5, r0
 80055fe:	b118      	cbz	r0, 8005608 <_puts_r+0x10>
 8005600:	6983      	ldr	r3, [r0, #24]
 8005602:	b90b      	cbnz	r3, 8005608 <_puts_r+0x10>
 8005604:	f000 fa48 	bl	8005a98 <__sinit>
 8005608:	69ab      	ldr	r3, [r5, #24]
 800560a:	68ac      	ldr	r4, [r5, #8]
 800560c:	b913      	cbnz	r3, 8005614 <_puts_r+0x1c>
 800560e:	4628      	mov	r0, r5
 8005610:	f000 fa42 	bl	8005a98 <__sinit>
 8005614:	4b2c      	ldr	r3, [pc, #176]	; (80056c8 <_puts_r+0xd0>)
 8005616:	429c      	cmp	r4, r3
 8005618:	d120      	bne.n	800565c <_puts_r+0x64>
 800561a:	686c      	ldr	r4, [r5, #4]
 800561c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800561e:	07db      	lsls	r3, r3, #31
 8005620:	d405      	bmi.n	800562e <_puts_r+0x36>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	0598      	lsls	r0, r3, #22
 8005626:	d402      	bmi.n	800562e <_puts_r+0x36>
 8005628:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800562a:	f000 fad3 	bl	8005bd4 <__retarget_lock_acquire_recursive>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	0719      	lsls	r1, r3, #28
 8005632:	d51d      	bpl.n	8005670 <_puts_r+0x78>
 8005634:	6923      	ldr	r3, [r4, #16]
 8005636:	b1db      	cbz	r3, 8005670 <_puts_r+0x78>
 8005638:	3e01      	subs	r6, #1
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005640:	3b01      	subs	r3, #1
 8005642:	60a3      	str	r3, [r4, #8]
 8005644:	bb39      	cbnz	r1, 8005696 <_puts_r+0x9e>
 8005646:	2b00      	cmp	r3, #0
 8005648:	da38      	bge.n	80056bc <_puts_r+0xc4>
 800564a:	4622      	mov	r2, r4
 800564c:	210a      	movs	r1, #10
 800564e:	4628      	mov	r0, r5
 8005650:	f000 f848 	bl	80056e4 <__swbuf_r>
 8005654:	3001      	adds	r0, #1
 8005656:	d011      	beq.n	800567c <_puts_r+0x84>
 8005658:	250a      	movs	r5, #10
 800565a:	e011      	b.n	8005680 <_puts_r+0x88>
 800565c:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <_puts_r+0xd4>)
 800565e:	429c      	cmp	r4, r3
 8005660:	d101      	bne.n	8005666 <_puts_r+0x6e>
 8005662:	68ac      	ldr	r4, [r5, #8]
 8005664:	e7da      	b.n	800561c <_puts_r+0x24>
 8005666:	4b1a      	ldr	r3, [pc, #104]	; (80056d0 <_puts_r+0xd8>)
 8005668:	429c      	cmp	r4, r3
 800566a:	bf08      	it	eq
 800566c:	68ec      	ldreq	r4, [r5, #12]
 800566e:	e7d5      	b.n	800561c <_puts_r+0x24>
 8005670:	4621      	mov	r1, r4
 8005672:	4628      	mov	r0, r5
 8005674:	f000 f888 	bl	8005788 <__swsetup_r>
 8005678:	2800      	cmp	r0, #0
 800567a:	d0dd      	beq.n	8005638 <_puts_r+0x40>
 800567c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005682:	07da      	lsls	r2, r3, #31
 8005684:	d405      	bmi.n	8005692 <_puts_r+0x9a>
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	059b      	lsls	r3, r3, #22
 800568a:	d402      	bmi.n	8005692 <_puts_r+0x9a>
 800568c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800568e:	f000 faa2 	bl	8005bd6 <__retarget_lock_release_recursive>
 8005692:	4628      	mov	r0, r5
 8005694:	bd70      	pop	{r4, r5, r6, pc}
 8005696:	2b00      	cmp	r3, #0
 8005698:	da04      	bge.n	80056a4 <_puts_r+0xac>
 800569a:	69a2      	ldr	r2, [r4, #24]
 800569c:	429a      	cmp	r2, r3
 800569e:	dc06      	bgt.n	80056ae <_puts_r+0xb6>
 80056a0:	290a      	cmp	r1, #10
 80056a2:	d004      	beq.n	80056ae <_puts_r+0xb6>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	6022      	str	r2, [r4, #0]
 80056aa:	7019      	strb	r1, [r3, #0]
 80056ac:	e7c5      	b.n	800563a <_puts_r+0x42>
 80056ae:	4622      	mov	r2, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 f817 	bl	80056e4 <__swbuf_r>
 80056b6:	3001      	adds	r0, #1
 80056b8:	d1bf      	bne.n	800563a <_puts_r+0x42>
 80056ba:	e7df      	b.n	800567c <_puts_r+0x84>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	250a      	movs	r5, #10
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	6022      	str	r2, [r4, #0]
 80056c4:	701d      	strb	r5, [r3, #0]
 80056c6:	e7db      	b.n	8005680 <_puts_r+0x88>
 80056c8:	080068b8 	.word	0x080068b8
 80056cc:	080068d8 	.word	0x080068d8
 80056d0:	08006898 	.word	0x08006898

080056d4 <puts>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <puts+0xc>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f7ff bf8d 	b.w	80055f8 <_puts_r>
 80056de:	bf00      	nop
 80056e0:	2000000c 	.word	0x2000000c

080056e4 <__swbuf_r>:
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	460e      	mov	r6, r1
 80056e8:	4614      	mov	r4, r2
 80056ea:	4605      	mov	r5, r0
 80056ec:	b118      	cbz	r0, 80056f6 <__swbuf_r+0x12>
 80056ee:	6983      	ldr	r3, [r0, #24]
 80056f0:	b90b      	cbnz	r3, 80056f6 <__swbuf_r+0x12>
 80056f2:	f000 f9d1 	bl	8005a98 <__sinit>
 80056f6:	4b21      	ldr	r3, [pc, #132]	; (800577c <__swbuf_r+0x98>)
 80056f8:	429c      	cmp	r4, r3
 80056fa:	d12b      	bne.n	8005754 <__swbuf_r+0x70>
 80056fc:	686c      	ldr	r4, [r5, #4]
 80056fe:	69a3      	ldr	r3, [r4, #24]
 8005700:	60a3      	str	r3, [r4, #8]
 8005702:	89a3      	ldrh	r3, [r4, #12]
 8005704:	071a      	lsls	r2, r3, #28
 8005706:	d52f      	bpl.n	8005768 <__swbuf_r+0x84>
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	b36b      	cbz	r3, 8005768 <__swbuf_r+0x84>
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	6820      	ldr	r0, [r4, #0]
 8005710:	1ac0      	subs	r0, r0, r3
 8005712:	6963      	ldr	r3, [r4, #20]
 8005714:	b2f6      	uxtb	r6, r6
 8005716:	4283      	cmp	r3, r0
 8005718:	4637      	mov	r7, r6
 800571a:	dc04      	bgt.n	8005726 <__swbuf_r+0x42>
 800571c:	4621      	mov	r1, r4
 800571e:	4628      	mov	r0, r5
 8005720:	f000 f926 	bl	8005970 <_fflush_r>
 8005724:	bb30      	cbnz	r0, 8005774 <__swbuf_r+0x90>
 8005726:	68a3      	ldr	r3, [r4, #8]
 8005728:	3b01      	subs	r3, #1
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	701e      	strb	r6, [r3, #0]
 8005734:	6963      	ldr	r3, [r4, #20]
 8005736:	3001      	adds	r0, #1
 8005738:	4283      	cmp	r3, r0
 800573a:	d004      	beq.n	8005746 <__swbuf_r+0x62>
 800573c:	89a3      	ldrh	r3, [r4, #12]
 800573e:	07db      	lsls	r3, r3, #31
 8005740:	d506      	bpl.n	8005750 <__swbuf_r+0x6c>
 8005742:	2e0a      	cmp	r6, #10
 8005744:	d104      	bne.n	8005750 <__swbuf_r+0x6c>
 8005746:	4621      	mov	r1, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f911 	bl	8005970 <_fflush_r>
 800574e:	b988      	cbnz	r0, 8005774 <__swbuf_r+0x90>
 8005750:	4638      	mov	r0, r7
 8005752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <__swbuf_r+0x9c>)
 8005756:	429c      	cmp	r4, r3
 8005758:	d101      	bne.n	800575e <__swbuf_r+0x7a>
 800575a:	68ac      	ldr	r4, [r5, #8]
 800575c:	e7cf      	b.n	80056fe <__swbuf_r+0x1a>
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <__swbuf_r+0xa0>)
 8005760:	429c      	cmp	r4, r3
 8005762:	bf08      	it	eq
 8005764:	68ec      	ldreq	r4, [r5, #12]
 8005766:	e7ca      	b.n	80056fe <__swbuf_r+0x1a>
 8005768:	4621      	mov	r1, r4
 800576a:	4628      	mov	r0, r5
 800576c:	f000 f80c 	bl	8005788 <__swsetup_r>
 8005770:	2800      	cmp	r0, #0
 8005772:	d0cb      	beq.n	800570c <__swbuf_r+0x28>
 8005774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005778:	e7ea      	b.n	8005750 <__swbuf_r+0x6c>
 800577a:	bf00      	nop
 800577c:	080068b8 	.word	0x080068b8
 8005780:	080068d8 	.word	0x080068d8
 8005784:	08006898 	.word	0x08006898

08005788 <__swsetup_r>:
 8005788:	4b32      	ldr	r3, [pc, #200]	; (8005854 <__swsetup_r+0xcc>)
 800578a:	b570      	push	{r4, r5, r6, lr}
 800578c:	681d      	ldr	r5, [r3, #0]
 800578e:	4606      	mov	r6, r0
 8005790:	460c      	mov	r4, r1
 8005792:	b125      	cbz	r5, 800579e <__swsetup_r+0x16>
 8005794:	69ab      	ldr	r3, [r5, #24]
 8005796:	b913      	cbnz	r3, 800579e <__swsetup_r+0x16>
 8005798:	4628      	mov	r0, r5
 800579a:	f000 f97d 	bl	8005a98 <__sinit>
 800579e:	4b2e      	ldr	r3, [pc, #184]	; (8005858 <__swsetup_r+0xd0>)
 80057a0:	429c      	cmp	r4, r3
 80057a2:	d10f      	bne.n	80057c4 <__swsetup_r+0x3c>
 80057a4:	686c      	ldr	r4, [r5, #4]
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057ac:	0719      	lsls	r1, r3, #28
 80057ae:	d42c      	bmi.n	800580a <__swsetup_r+0x82>
 80057b0:	06dd      	lsls	r5, r3, #27
 80057b2:	d411      	bmi.n	80057d8 <__swsetup_r+0x50>
 80057b4:	2309      	movs	r3, #9
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80057bc:	81a3      	strh	r3, [r4, #12]
 80057be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c2:	e03e      	b.n	8005842 <__swsetup_r+0xba>
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <__swsetup_r+0xd4>)
 80057c6:	429c      	cmp	r4, r3
 80057c8:	d101      	bne.n	80057ce <__swsetup_r+0x46>
 80057ca:	68ac      	ldr	r4, [r5, #8]
 80057cc:	e7eb      	b.n	80057a6 <__swsetup_r+0x1e>
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <__swsetup_r+0xd8>)
 80057d0:	429c      	cmp	r4, r3
 80057d2:	bf08      	it	eq
 80057d4:	68ec      	ldreq	r4, [r5, #12]
 80057d6:	e7e6      	b.n	80057a6 <__swsetup_r+0x1e>
 80057d8:	0758      	lsls	r0, r3, #29
 80057da:	d512      	bpl.n	8005802 <__swsetup_r+0x7a>
 80057dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057de:	b141      	cbz	r1, 80057f2 <__swsetup_r+0x6a>
 80057e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80057e4:	4299      	cmp	r1, r3
 80057e6:	d002      	beq.n	80057ee <__swsetup_r+0x66>
 80057e8:	4630      	mov	r0, r6
 80057ea:	f000 fa5b 	bl	8005ca4 <_free_r>
 80057ee:	2300      	movs	r3, #0
 80057f0:	6363      	str	r3, [r4, #52]	; 0x34
 80057f2:	89a3      	ldrh	r3, [r4, #12]
 80057f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057f8:	81a3      	strh	r3, [r4, #12]
 80057fa:	2300      	movs	r3, #0
 80057fc:	6063      	str	r3, [r4, #4]
 80057fe:	6923      	ldr	r3, [r4, #16]
 8005800:	6023      	str	r3, [r4, #0]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0308 	orr.w	r3, r3, #8
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	6923      	ldr	r3, [r4, #16]
 800580c:	b94b      	cbnz	r3, 8005822 <__swsetup_r+0x9a>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005818:	d003      	beq.n	8005822 <__swsetup_r+0x9a>
 800581a:	4621      	mov	r1, r4
 800581c:	4630      	mov	r0, r6
 800581e:	f000 fa01 	bl	8005c24 <__smakebuf_r>
 8005822:	89a0      	ldrh	r0, [r4, #12]
 8005824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005828:	f010 0301 	ands.w	r3, r0, #1
 800582c:	d00a      	beq.n	8005844 <__swsetup_r+0xbc>
 800582e:	2300      	movs	r3, #0
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	6963      	ldr	r3, [r4, #20]
 8005834:	425b      	negs	r3, r3
 8005836:	61a3      	str	r3, [r4, #24]
 8005838:	6923      	ldr	r3, [r4, #16]
 800583a:	b943      	cbnz	r3, 800584e <__swsetup_r+0xc6>
 800583c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005840:	d1ba      	bne.n	80057b8 <__swsetup_r+0x30>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	0781      	lsls	r1, r0, #30
 8005846:	bf58      	it	pl
 8005848:	6963      	ldrpl	r3, [r4, #20]
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	e7f4      	b.n	8005838 <__swsetup_r+0xb0>
 800584e:	2000      	movs	r0, #0
 8005850:	e7f7      	b.n	8005842 <__swsetup_r+0xba>
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
 8005858:	080068b8 	.word	0x080068b8
 800585c:	080068d8 	.word	0x080068d8
 8005860:	08006898 	.word	0x08006898

08005864 <__sflush_r>:
 8005864:	898a      	ldrh	r2, [r1, #12]
 8005866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586a:	4605      	mov	r5, r0
 800586c:	0710      	lsls	r0, r2, #28
 800586e:	460c      	mov	r4, r1
 8005870:	d458      	bmi.n	8005924 <__sflush_r+0xc0>
 8005872:	684b      	ldr	r3, [r1, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dc05      	bgt.n	8005884 <__sflush_r+0x20>
 8005878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	dc02      	bgt.n	8005884 <__sflush_r+0x20>
 800587e:	2000      	movs	r0, #0
 8005880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005886:	2e00      	cmp	r6, #0
 8005888:	d0f9      	beq.n	800587e <__sflush_r+0x1a>
 800588a:	2300      	movs	r3, #0
 800588c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005890:	682f      	ldr	r7, [r5, #0]
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	d032      	beq.n	80058fc <__sflush_r+0x98>
 8005896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005898:	89a3      	ldrh	r3, [r4, #12]
 800589a:	075a      	lsls	r2, r3, #29
 800589c:	d505      	bpl.n	80058aa <__sflush_r+0x46>
 800589e:	6863      	ldr	r3, [r4, #4]
 80058a0:	1ac0      	subs	r0, r0, r3
 80058a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058a4:	b10b      	cbz	r3, 80058aa <__sflush_r+0x46>
 80058a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058a8:	1ac0      	subs	r0, r0, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	4602      	mov	r2, r0
 80058ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058b0:	6a21      	ldr	r1, [r4, #32]
 80058b2:	4628      	mov	r0, r5
 80058b4:	47b0      	blx	r6
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	d106      	bne.n	80058ca <__sflush_r+0x66>
 80058bc:	6829      	ldr	r1, [r5, #0]
 80058be:	291d      	cmp	r1, #29
 80058c0:	d82c      	bhi.n	800591c <__sflush_r+0xb8>
 80058c2:	4a2a      	ldr	r2, [pc, #168]	; (800596c <__sflush_r+0x108>)
 80058c4:	40ca      	lsrs	r2, r1
 80058c6:	07d6      	lsls	r6, r2, #31
 80058c8:	d528      	bpl.n	800591c <__sflush_r+0xb8>
 80058ca:	2200      	movs	r2, #0
 80058cc:	6062      	str	r2, [r4, #4]
 80058ce:	04d9      	lsls	r1, r3, #19
 80058d0:	6922      	ldr	r2, [r4, #16]
 80058d2:	6022      	str	r2, [r4, #0]
 80058d4:	d504      	bpl.n	80058e0 <__sflush_r+0x7c>
 80058d6:	1c42      	adds	r2, r0, #1
 80058d8:	d101      	bne.n	80058de <__sflush_r+0x7a>
 80058da:	682b      	ldr	r3, [r5, #0]
 80058dc:	b903      	cbnz	r3, 80058e0 <__sflush_r+0x7c>
 80058de:	6560      	str	r0, [r4, #84]	; 0x54
 80058e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058e2:	602f      	str	r7, [r5, #0]
 80058e4:	2900      	cmp	r1, #0
 80058e6:	d0ca      	beq.n	800587e <__sflush_r+0x1a>
 80058e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058ec:	4299      	cmp	r1, r3
 80058ee:	d002      	beq.n	80058f6 <__sflush_r+0x92>
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 f9d7 	bl	8005ca4 <_free_r>
 80058f6:	2000      	movs	r0, #0
 80058f8:	6360      	str	r0, [r4, #52]	; 0x34
 80058fa:	e7c1      	b.n	8005880 <__sflush_r+0x1c>
 80058fc:	6a21      	ldr	r1, [r4, #32]
 80058fe:	2301      	movs	r3, #1
 8005900:	4628      	mov	r0, r5
 8005902:	47b0      	blx	r6
 8005904:	1c41      	adds	r1, r0, #1
 8005906:	d1c7      	bne.n	8005898 <__sflush_r+0x34>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0c4      	beq.n	8005898 <__sflush_r+0x34>
 800590e:	2b1d      	cmp	r3, #29
 8005910:	d001      	beq.n	8005916 <__sflush_r+0xb2>
 8005912:	2b16      	cmp	r3, #22
 8005914:	d101      	bne.n	800591a <__sflush_r+0xb6>
 8005916:	602f      	str	r7, [r5, #0]
 8005918:	e7b1      	b.n	800587e <__sflush_r+0x1a>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005920:	81a3      	strh	r3, [r4, #12]
 8005922:	e7ad      	b.n	8005880 <__sflush_r+0x1c>
 8005924:	690f      	ldr	r7, [r1, #16]
 8005926:	2f00      	cmp	r7, #0
 8005928:	d0a9      	beq.n	800587e <__sflush_r+0x1a>
 800592a:	0793      	lsls	r3, r2, #30
 800592c:	680e      	ldr	r6, [r1, #0]
 800592e:	bf08      	it	eq
 8005930:	694b      	ldreq	r3, [r1, #20]
 8005932:	600f      	str	r7, [r1, #0]
 8005934:	bf18      	it	ne
 8005936:	2300      	movne	r3, #0
 8005938:	eba6 0807 	sub.w	r8, r6, r7
 800593c:	608b      	str	r3, [r1, #8]
 800593e:	f1b8 0f00 	cmp.w	r8, #0
 8005942:	dd9c      	ble.n	800587e <__sflush_r+0x1a>
 8005944:	6a21      	ldr	r1, [r4, #32]
 8005946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005948:	4643      	mov	r3, r8
 800594a:	463a      	mov	r2, r7
 800594c:	4628      	mov	r0, r5
 800594e:	47b0      	blx	r6
 8005950:	2800      	cmp	r0, #0
 8005952:	dc06      	bgt.n	8005962 <__sflush_r+0xfe>
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005960:	e78e      	b.n	8005880 <__sflush_r+0x1c>
 8005962:	4407      	add	r7, r0
 8005964:	eba8 0800 	sub.w	r8, r8, r0
 8005968:	e7e9      	b.n	800593e <__sflush_r+0xda>
 800596a:	bf00      	nop
 800596c:	20400001 	.word	0x20400001

08005970 <_fflush_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	b913      	cbnz	r3, 8005980 <_fflush_r+0x10>
 800597a:	2500      	movs	r5, #0
 800597c:	4628      	mov	r0, r5
 800597e:	bd38      	pop	{r3, r4, r5, pc}
 8005980:	b118      	cbz	r0, 800598a <_fflush_r+0x1a>
 8005982:	6983      	ldr	r3, [r0, #24]
 8005984:	b90b      	cbnz	r3, 800598a <_fflush_r+0x1a>
 8005986:	f000 f887 	bl	8005a98 <__sinit>
 800598a:	4b14      	ldr	r3, [pc, #80]	; (80059dc <_fflush_r+0x6c>)
 800598c:	429c      	cmp	r4, r3
 800598e:	d11b      	bne.n	80059c8 <_fflush_r+0x58>
 8005990:	686c      	ldr	r4, [r5, #4]
 8005992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ef      	beq.n	800597a <_fflush_r+0xa>
 800599a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800599c:	07d0      	lsls	r0, r2, #31
 800599e:	d404      	bmi.n	80059aa <_fflush_r+0x3a>
 80059a0:	0599      	lsls	r1, r3, #22
 80059a2:	d402      	bmi.n	80059aa <_fflush_r+0x3a>
 80059a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059a6:	f000 f915 	bl	8005bd4 <__retarget_lock_acquire_recursive>
 80059aa:	4628      	mov	r0, r5
 80059ac:	4621      	mov	r1, r4
 80059ae:	f7ff ff59 	bl	8005864 <__sflush_r>
 80059b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059b4:	07da      	lsls	r2, r3, #31
 80059b6:	4605      	mov	r5, r0
 80059b8:	d4e0      	bmi.n	800597c <_fflush_r+0xc>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	059b      	lsls	r3, r3, #22
 80059be:	d4dd      	bmi.n	800597c <_fflush_r+0xc>
 80059c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059c2:	f000 f908 	bl	8005bd6 <__retarget_lock_release_recursive>
 80059c6:	e7d9      	b.n	800597c <_fflush_r+0xc>
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <_fflush_r+0x70>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	d101      	bne.n	80059d2 <_fflush_r+0x62>
 80059ce:	68ac      	ldr	r4, [r5, #8]
 80059d0:	e7df      	b.n	8005992 <_fflush_r+0x22>
 80059d2:	4b04      	ldr	r3, [pc, #16]	; (80059e4 <_fflush_r+0x74>)
 80059d4:	429c      	cmp	r4, r3
 80059d6:	bf08      	it	eq
 80059d8:	68ec      	ldreq	r4, [r5, #12]
 80059da:	e7da      	b.n	8005992 <_fflush_r+0x22>
 80059dc:	080068b8 	.word	0x080068b8
 80059e0:	080068d8 	.word	0x080068d8
 80059e4:	08006898 	.word	0x08006898

080059e8 <std>:
 80059e8:	2300      	movs	r3, #0
 80059ea:	b510      	push	{r4, lr}
 80059ec:	4604      	mov	r4, r0
 80059ee:	e9c0 3300 	strd	r3, r3, [r0]
 80059f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059f6:	6083      	str	r3, [r0, #8]
 80059f8:	8181      	strh	r1, [r0, #12]
 80059fa:	6643      	str	r3, [r0, #100]	; 0x64
 80059fc:	81c2      	strh	r2, [r0, #14]
 80059fe:	6183      	str	r3, [r0, #24]
 8005a00:	4619      	mov	r1, r3
 8005a02:	2208      	movs	r2, #8
 8005a04:	305c      	adds	r0, #92	; 0x5c
 8005a06:	f7ff fdef 	bl	80055e8 <memset>
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <std+0x38>)
 8005a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <std+0x3c>)
 8005a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a12:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <std+0x40>)
 8005a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <std+0x44>)
 8005a18:	6224      	str	r4, [r4, #32]
 8005a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	08005e85 	.word	0x08005e85
 8005a24:	08005ea7 	.word	0x08005ea7
 8005a28:	08005edf 	.word	0x08005edf
 8005a2c:	08005f03 	.word	0x08005f03

08005a30 <_cleanup_r>:
 8005a30:	4901      	ldr	r1, [pc, #4]	; (8005a38 <_cleanup_r+0x8>)
 8005a32:	f000 b8af 	b.w	8005b94 <_fwalk_reent>
 8005a36:	bf00      	nop
 8005a38:	08005971 	.word	0x08005971

08005a3c <__sfmoreglue>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	2268      	movs	r2, #104	; 0x68
 8005a40:	1e4d      	subs	r5, r1, #1
 8005a42:	4355      	muls	r5, r2
 8005a44:	460e      	mov	r6, r1
 8005a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005a4a:	f000 f997 	bl	8005d7c <_malloc_r>
 8005a4e:	4604      	mov	r4, r0
 8005a50:	b140      	cbz	r0, 8005a64 <__sfmoreglue+0x28>
 8005a52:	2100      	movs	r1, #0
 8005a54:	e9c0 1600 	strd	r1, r6, [r0]
 8005a58:	300c      	adds	r0, #12
 8005a5a:	60a0      	str	r0, [r4, #8]
 8005a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a60:	f7ff fdc2 	bl	80055e8 <memset>
 8005a64:	4620      	mov	r0, r4
 8005a66:	bd70      	pop	{r4, r5, r6, pc}

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 b8b3 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	200002c9 	.word	0x200002c9

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	; (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 b8ae 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	200002c9 	.word	0x200002c9

08005a80 <__sinit_lock_acquire>:
 8005a80:	4801      	ldr	r0, [pc, #4]	; (8005a88 <__sinit_lock_acquire+0x8>)
 8005a82:	f000 b8a7 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005a86:	bf00      	nop
 8005a88:	200002ca 	.word	0x200002ca

08005a8c <__sinit_lock_release>:
 8005a8c:	4801      	ldr	r0, [pc, #4]	; (8005a94 <__sinit_lock_release+0x8>)
 8005a8e:	f000 b8a2 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005a92:	bf00      	nop
 8005a94:	200002ca 	.word	0x200002ca

08005a98 <__sinit>:
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	f7ff fff0 	bl	8005a80 <__sinit_lock_acquire>
 8005aa0:	69a3      	ldr	r3, [r4, #24]
 8005aa2:	b11b      	cbz	r3, 8005aac <__sinit+0x14>
 8005aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa8:	f7ff bff0 	b.w	8005a8c <__sinit_lock_release>
 8005aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ab2:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <__sinit+0x68>)
 8005ab4:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <__sinit+0x6c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	bf04      	itt	eq
 8005abe:	2301      	moveq	r3, #1
 8005ac0:	61a3      	streq	r3, [r4, #24]
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 f820 	bl	8005b08 <__sfp>
 8005ac8:	6060      	str	r0, [r4, #4]
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 f81c 	bl	8005b08 <__sfp>
 8005ad0:	60a0      	str	r0, [r4, #8]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f000 f818 	bl	8005b08 <__sfp>
 8005ad8:	2200      	movs	r2, #0
 8005ada:	60e0      	str	r0, [r4, #12]
 8005adc:	2104      	movs	r1, #4
 8005ade:	6860      	ldr	r0, [r4, #4]
 8005ae0:	f7ff ff82 	bl	80059e8 <std>
 8005ae4:	68a0      	ldr	r0, [r4, #8]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	2109      	movs	r1, #9
 8005aea:	f7ff ff7d 	bl	80059e8 <std>
 8005aee:	68e0      	ldr	r0, [r4, #12]
 8005af0:	2202      	movs	r2, #2
 8005af2:	2112      	movs	r1, #18
 8005af4:	f7ff ff78 	bl	80059e8 <std>
 8005af8:	2301      	movs	r3, #1
 8005afa:	61a3      	str	r3, [r4, #24]
 8005afc:	e7d2      	b.n	8005aa4 <__sinit+0xc>
 8005afe:	bf00      	nop
 8005b00:	08006894 	.word	0x08006894
 8005b04:	08005a31 	.word	0x08005a31

08005b08 <__sfp>:
 8005b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0a:	4607      	mov	r7, r0
 8005b0c:	f7ff ffac 	bl	8005a68 <__sfp_lock_acquire>
 8005b10:	4b1e      	ldr	r3, [pc, #120]	; (8005b8c <__sfp+0x84>)
 8005b12:	681e      	ldr	r6, [r3, #0]
 8005b14:	69b3      	ldr	r3, [r6, #24]
 8005b16:	b913      	cbnz	r3, 8005b1e <__sfp+0x16>
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7ff ffbd 	bl	8005a98 <__sinit>
 8005b1e:	3648      	adds	r6, #72	; 0x48
 8005b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b24:	3b01      	subs	r3, #1
 8005b26:	d503      	bpl.n	8005b30 <__sfp+0x28>
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	b30b      	cbz	r3, 8005b70 <__sfp+0x68>
 8005b2c:	6836      	ldr	r6, [r6, #0]
 8005b2e:	e7f7      	b.n	8005b20 <__sfp+0x18>
 8005b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b34:	b9d5      	cbnz	r5, 8005b6c <__sfp+0x64>
 8005b36:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <__sfp+0x88>)
 8005b38:	60e3      	str	r3, [r4, #12]
 8005b3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8005b40:	f000 f847 	bl	8005bd2 <__retarget_lock_init_recursive>
 8005b44:	f7ff ff96 	bl	8005a74 <__sfp_lock_release>
 8005b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005b50:	6025      	str	r5, [r4, #0]
 8005b52:	61a5      	str	r5, [r4, #24]
 8005b54:	2208      	movs	r2, #8
 8005b56:	4629      	mov	r1, r5
 8005b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b5c:	f7ff fd44 	bl	80055e8 <memset>
 8005b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005b68:	4620      	mov	r0, r4
 8005b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b6c:	3468      	adds	r4, #104	; 0x68
 8005b6e:	e7d9      	b.n	8005b24 <__sfp+0x1c>
 8005b70:	2104      	movs	r1, #4
 8005b72:	4638      	mov	r0, r7
 8005b74:	f7ff ff62 	bl	8005a3c <__sfmoreglue>
 8005b78:	4604      	mov	r4, r0
 8005b7a:	6030      	str	r0, [r6, #0]
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d1d5      	bne.n	8005b2c <__sfp+0x24>
 8005b80:	f7ff ff78 	bl	8005a74 <__sfp_lock_release>
 8005b84:	230c      	movs	r3, #12
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	e7ee      	b.n	8005b68 <__sfp+0x60>
 8005b8a:	bf00      	nop
 8005b8c:	08006894 	.word	0x08006894
 8005b90:	ffff0001 	.word	0xffff0001

08005b94 <_fwalk_reent>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	4606      	mov	r6, r0
 8005b9a:	4688      	mov	r8, r1
 8005b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ba0:	2700      	movs	r7, #0
 8005ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8005baa:	d505      	bpl.n	8005bb8 <_fwalk_reent+0x24>
 8005bac:	6824      	ldr	r4, [r4, #0]
 8005bae:	2c00      	cmp	r4, #0
 8005bb0:	d1f7      	bne.n	8005ba2 <_fwalk_reent+0xe>
 8005bb2:	4638      	mov	r0, r7
 8005bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb8:	89ab      	ldrh	r3, [r5, #12]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d907      	bls.n	8005bce <_fwalk_reent+0x3a>
 8005bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	d003      	beq.n	8005bce <_fwalk_reent+0x3a>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4630      	mov	r0, r6
 8005bca:	47c0      	blx	r8
 8005bcc:	4307      	orrs	r7, r0
 8005bce:	3568      	adds	r5, #104	; 0x68
 8005bd0:	e7e9      	b.n	8005ba6 <_fwalk_reent+0x12>

08005bd2 <__retarget_lock_init_recursive>:
 8005bd2:	4770      	bx	lr

08005bd4 <__retarget_lock_acquire_recursive>:
 8005bd4:	4770      	bx	lr

08005bd6 <__retarget_lock_release_recursive>:
 8005bd6:	4770      	bx	lr

08005bd8 <__swhatbuf_r>:
 8005bd8:	b570      	push	{r4, r5, r6, lr}
 8005bda:	460e      	mov	r6, r1
 8005bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be0:	2900      	cmp	r1, #0
 8005be2:	b096      	sub	sp, #88	; 0x58
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	da08      	bge.n	8005bfc <__swhatbuf_r+0x24>
 8005bea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	061a      	lsls	r2, r3, #24
 8005bf4:	d410      	bmi.n	8005c18 <__swhatbuf_r+0x40>
 8005bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bfa:	e00e      	b.n	8005c1a <__swhatbuf_r+0x42>
 8005bfc:	466a      	mov	r2, sp
 8005bfe:	f000 f9a7 	bl	8005f50 <_fstat_r>
 8005c02:	2800      	cmp	r0, #0
 8005c04:	dbf1      	blt.n	8005bea <__swhatbuf_r+0x12>
 8005c06:	9a01      	ldr	r2, [sp, #4]
 8005c08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c10:	425a      	negs	r2, r3
 8005c12:	415a      	adcs	r2, r3
 8005c14:	602a      	str	r2, [r5, #0]
 8005c16:	e7ee      	b.n	8005bf6 <__swhatbuf_r+0x1e>
 8005c18:	2340      	movs	r3, #64	; 0x40
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	6023      	str	r3, [r4, #0]
 8005c1e:	b016      	add	sp, #88	; 0x58
 8005c20:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c24 <__smakebuf_r>:
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c28:	079d      	lsls	r5, r3, #30
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	d507      	bpl.n	8005c40 <__smakebuf_r+0x1c>
 8005c30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	6163      	str	r3, [r4, #20]
 8005c3c:	b002      	add	sp, #8
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	ab01      	add	r3, sp, #4
 8005c42:	466a      	mov	r2, sp
 8005c44:	f7ff ffc8 	bl	8005bd8 <__swhatbuf_r>
 8005c48:	9900      	ldr	r1, [sp, #0]
 8005c4a:	4605      	mov	r5, r0
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f000 f895 	bl	8005d7c <_malloc_r>
 8005c52:	b948      	cbnz	r0, 8005c68 <__smakebuf_r+0x44>
 8005c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c58:	059a      	lsls	r2, r3, #22
 8005c5a:	d4ef      	bmi.n	8005c3c <__smakebuf_r+0x18>
 8005c5c:	f023 0303 	bic.w	r3, r3, #3
 8005c60:	f043 0302 	orr.w	r3, r3, #2
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	e7e3      	b.n	8005c30 <__smakebuf_r+0xc>
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <__smakebuf_r+0x7c>)
 8005c6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c6c:	89a3      	ldrh	r3, [r4, #12]
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c74:	81a3      	strh	r3, [r4, #12]
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	6163      	str	r3, [r4, #20]
 8005c7a:	9b01      	ldr	r3, [sp, #4]
 8005c7c:	6120      	str	r0, [r4, #16]
 8005c7e:	b15b      	cbz	r3, 8005c98 <__smakebuf_r+0x74>
 8005c80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c84:	4630      	mov	r0, r6
 8005c86:	f000 f975 	bl	8005f74 <_isatty_r>
 8005c8a:	b128      	cbz	r0, 8005c98 <__smakebuf_r+0x74>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f023 0303 	bic.w	r3, r3, #3
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	81a3      	strh	r3, [r4, #12]
 8005c98:	89a0      	ldrh	r0, [r4, #12]
 8005c9a:	4305      	orrs	r5, r0
 8005c9c:	81a5      	strh	r5, [r4, #12]
 8005c9e:	e7cd      	b.n	8005c3c <__smakebuf_r+0x18>
 8005ca0:	08005a31 	.word	0x08005a31

08005ca4 <_free_r>:
 8005ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ca6:	2900      	cmp	r1, #0
 8005ca8:	d044      	beq.n	8005d34 <_free_r+0x90>
 8005caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cae:	9001      	str	r0, [sp, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8005cb6:	bfb8      	it	lt
 8005cb8:	18e4      	addlt	r4, r4, r3
 8005cba:	f000 f97d 	bl	8005fb8 <__malloc_lock>
 8005cbe:	4a1e      	ldr	r2, [pc, #120]	; (8005d38 <_free_r+0x94>)
 8005cc0:	9801      	ldr	r0, [sp, #4]
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	b933      	cbnz	r3, 8005cd4 <_free_r+0x30>
 8005cc6:	6063      	str	r3, [r4, #4]
 8005cc8:	6014      	str	r4, [r2, #0]
 8005cca:	b003      	add	sp, #12
 8005ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cd0:	f000 b978 	b.w	8005fc4 <__malloc_unlock>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d908      	bls.n	8005cea <_free_r+0x46>
 8005cd8:	6825      	ldr	r5, [r4, #0]
 8005cda:	1961      	adds	r1, r4, r5
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf01      	itttt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	1949      	addeq	r1, r1, r5
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	e7ed      	b.n	8005cc6 <_free_r+0x22>
 8005cea:	461a      	mov	r2, r3
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b10b      	cbz	r3, 8005cf4 <_free_r+0x50>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d9fa      	bls.n	8005cea <_free_r+0x46>
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	1855      	adds	r5, r2, r1
 8005cf8:	42a5      	cmp	r5, r4
 8005cfa:	d10b      	bne.n	8005d14 <_free_r+0x70>
 8005cfc:	6824      	ldr	r4, [r4, #0]
 8005cfe:	4421      	add	r1, r4
 8005d00:	1854      	adds	r4, r2, r1
 8005d02:	42a3      	cmp	r3, r4
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	d1e0      	bne.n	8005cca <_free_r+0x26>
 8005d08:	681c      	ldr	r4, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	6053      	str	r3, [r2, #4]
 8005d0e:	4421      	add	r1, r4
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	e7da      	b.n	8005cca <_free_r+0x26>
 8005d14:	d902      	bls.n	8005d1c <_free_r+0x78>
 8005d16:	230c      	movs	r3, #12
 8005d18:	6003      	str	r3, [r0, #0]
 8005d1a:	e7d6      	b.n	8005cca <_free_r+0x26>
 8005d1c:	6825      	ldr	r5, [r4, #0]
 8005d1e:	1961      	adds	r1, r4, r5
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf04      	itt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	bf04      	itt	eq
 8005d2c:	1949      	addeq	r1, r1, r5
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	6054      	str	r4, [r2, #4]
 8005d32:	e7ca      	b.n	8005cca <_free_r+0x26>
 8005d34:	b003      	add	sp, #12
 8005d36:	bd30      	pop	{r4, r5, pc}
 8005d38:	200002cc 	.word	0x200002cc

08005d3c <sbrk_aligned>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4e0e      	ldr	r6, [pc, #56]	; (8005d78 <sbrk_aligned+0x3c>)
 8005d40:	460c      	mov	r4, r1
 8005d42:	6831      	ldr	r1, [r6, #0]
 8005d44:	4605      	mov	r5, r0
 8005d46:	b911      	cbnz	r1, 8005d4e <sbrk_aligned+0x12>
 8005d48:	f000 f88c 	bl	8005e64 <_sbrk_r>
 8005d4c:	6030      	str	r0, [r6, #0]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 f887 	bl	8005e64 <_sbrk_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d00a      	beq.n	8005d70 <sbrk_aligned+0x34>
 8005d5a:	1cc4      	adds	r4, r0, #3
 8005d5c:	f024 0403 	bic.w	r4, r4, #3
 8005d60:	42a0      	cmp	r0, r4
 8005d62:	d007      	beq.n	8005d74 <sbrk_aligned+0x38>
 8005d64:	1a21      	subs	r1, r4, r0
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 f87c 	bl	8005e64 <_sbrk_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d101      	bne.n	8005d74 <sbrk_aligned+0x38>
 8005d70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d74:	4620      	mov	r0, r4
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	200002d0 	.word	0x200002d0

08005d7c <_malloc_r>:
 8005d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	1ccd      	adds	r5, r1, #3
 8005d82:	f025 0503 	bic.w	r5, r5, #3
 8005d86:	3508      	adds	r5, #8
 8005d88:	2d0c      	cmp	r5, #12
 8005d8a:	bf38      	it	cc
 8005d8c:	250c      	movcc	r5, #12
 8005d8e:	2d00      	cmp	r5, #0
 8005d90:	4607      	mov	r7, r0
 8005d92:	db01      	blt.n	8005d98 <_malloc_r+0x1c>
 8005d94:	42a9      	cmp	r1, r5
 8005d96:	d905      	bls.n	8005da4 <_malloc_r+0x28>
 8005d98:	230c      	movs	r3, #12
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	2600      	movs	r6, #0
 8005d9e:	4630      	mov	r0, r6
 8005da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da4:	4e2e      	ldr	r6, [pc, #184]	; (8005e60 <_malloc_r+0xe4>)
 8005da6:	f000 f907 	bl	8005fb8 <__malloc_lock>
 8005daa:	6833      	ldr	r3, [r6, #0]
 8005dac:	461c      	mov	r4, r3
 8005dae:	bb34      	cbnz	r4, 8005dfe <_malloc_r+0x82>
 8005db0:	4629      	mov	r1, r5
 8005db2:	4638      	mov	r0, r7
 8005db4:	f7ff ffc2 	bl	8005d3c <sbrk_aligned>
 8005db8:	1c43      	adds	r3, r0, #1
 8005dba:	4604      	mov	r4, r0
 8005dbc:	d14d      	bne.n	8005e5a <_malloc_r+0xde>
 8005dbe:	6834      	ldr	r4, [r6, #0]
 8005dc0:	4626      	mov	r6, r4
 8005dc2:	2e00      	cmp	r6, #0
 8005dc4:	d140      	bne.n	8005e48 <_malloc_r+0xcc>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4638      	mov	r0, r7
 8005dcc:	eb04 0803 	add.w	r8, r4, r3
 8005dd0:	f000 f848 	bl	8005e64 <_sbrk_r>
 8005dd4:	4580      	cmp	r8, r0
 8005dd6:	d13a      	bne.n	8005e4e <_malloc_r+0xd2>
 8005dd8:	6821      	ldr	r1, [r4, #0]
 8005dda:	3503      	adds	r5, #3
 8005ddc:	1a6d      	subs	r5, r5, r1
 8005dde:	f025 0503 	bic.w	r5, r5, #3
 8005de2:	3508      	adds	r5, #8
 8005de4:	2d0c      	cmp	r5, #12
 8005de6:	bf38      	it	cc
 8005de8:	250c      	movcc	r5, #12
 8005dea:	4629      	mov	r1, r5
 8005dec:	4638      	mov	r0, r7
 8005dee:	f7ff ffa5 	bl	8005d3c <sbrk_aligned>
 8005df2:	3001      	adds	r0, #1
 8005df4:	d02b      	beq.n	8005e4e <_malloc_r+0xd2>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	442b      	add	r3, r5
 8005dfa:	6023      	str	r3, [r4, #0]
 8005dfc:	e00e      	b.n	8005e1c <_malloc_r+0xa0>
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	1b52      	subs	r2, r2, r5
 8005e02:	d41e      	bmi.n	8005e42 <_malloc_r+0xc6>
 8005e04:	2a0b      	cmp	r2, #11
 8005e06:	d916      	bls.n	8005e36 <_malloc_r+0xba>
 8005e08:	1961      	adds	r1, r4, r5
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	6025      	str	r5, [r4, #0]
 8005e0e:	bf18      	it	ne
 8005e10:	6059      	strne	r1, [r3, #4]
 8005e12:	6863      	ldr	r3, [r4, #4]
 8005e14:	bf08      	it	eq
 8005e16:	6031      	streq	r1, [r6, #0]
 8005e18:	5162      	str	r2, [r4, r5]
 8005e1a:	604b      	str	r3, [r1, #4]
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f104 060b 	add.w	r6, r4, #11
 8005e22:	f000 f8cf 	bl	8005fc4 <__malloc_unlock>
 8005e26:	f026 0607 	bic.w	r6, r6, #7
 8005e2a:	1d23      	adds	r3, r4, #4
 8005e2c:	1af2      	subs	r2, r6, r3
 8005e2e:	d0b6      	beq.n	8005d9e <_malloc_r+0x22>
 8005e30:	1b9b      	subs	r3, r3, r6
 8005e32:	50a3      	str	r3, [r4, r2]
 8005e34:	e7b3      	b.n	8005d9e <_malloc_r+0x22>
 8005e36:	6862      	ldr	r2, [r4, #4]
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	bf0c      	ite	eq
 8005e3c:	6032      	streq	r2, [r6, #0]
 8005e3e:	605a      	strne	r2, [r3, #4]
 8005e40:	e7ec      	b.n	8005e1c <_malloc_r+0xa0>
 8005e42:	4623      	mov	r3, r4
 8005e44:	6864      	ldr	r4, [r4, #4]
 8005e46:	e7b2      	b.n	8005dae <_malloc_r+0x32>
 8005e48:	4634      	mov	r4, r6
 8005e4a:	6876      	ldr	r6, [r6, #4]
 8005e4c:	e7b9      	b.n	8005dc2 <_malloc_r+0x46>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	603b      	str	r3, [r7, #0]
 8005e52:	4638      	mov	r0, r7
 8005e54:	f000 f8b6 	bl	8005fc4 <__malloc_unlock>
 8005e58:	e7a1      	b.n	8005d9e <_malloc_r+0x22>
 8005e5a:	6025      	str	r5, [r4, #0]
 8005e5c:	e7de      	b.n	8005e1c <_malloc_r+0xa0>
 8005e5e:	bf00      	nop
 8005e60:	200002cc 	.word	0x200002cc

08005e64 <_sbrk_r>:
 8005e64:	b538      	push	{r3, r4, r5, lr}
 8005e66:	4d06      	ldr	r5, [pc, #24]	; (8005e80 <_sbrk_r+0x1c>)
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	4608      	mov	r0, r1
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f7ff fad8 	bl	8005424 <_sbrk>
 8005e74:	1c43      	adds	r3, r0, #1
 8005e76:	d102      	bne.n	8005e7e <_sbrk_r+0x1a>
 8005e78:	682b      	ldr	r3, [r5, #0]
 8005e7a:	b103      	cbz	r3, 8005e7e <_sbrk_r+0x1a>
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	bd38      	pop	{r3, r4, r5, pc}
 8005e80:	200002d4 	.word	0x200002d4

08005e84 <__sread>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	460c      	mov	r4, r1
 8005e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e8c:	f000 f8a0 	bl	8005fd0 <_read_r>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	bfab      	itete	ge
 8005e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e96:	89a3      	ldrhlt	r3, [r4, #12]
 8005e98:	181b      	addge	r3, r3, r0
 8005e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e9e:	bfac      	ite	ge
 8005ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ea2:	81a3      	strhlt	r3, [r4, #12]
 8005ea4:	bd10      	pop	{r4, pc}

08005ea6 <__swrite>:
 8005ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eaa:	461f      	mov	r7, r3
 8005eac:	898b      	ldrh	r3, [r1, #12]
 8005eae:	05db      	lsls	r3, r3, #23
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	d505      	bpl.n	8005ec4 <__swrite+0x1e>
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f000 f868 	bl	8005f94 <_lseek_r>
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	4632      	mov	r2, r6
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eda:	f000 b817 	b.w	8005f0c <_write_r>

08005ede <__sseek>:
 8005ede:	b510      	push	{r4, lr}
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee6:	f000 f855 	bl	8005f94 <_lseek_r>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	89a3      	ldrh	r3, [r4, #12]
 8005eee:	bf15      	itete	ne
 8005ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005efa:	81a3      	strheq	r3, [r4, #12]
 8005efc:	bf18      	it	ne
 8005efe:	81a3      	strhne	r3, [r4, #12]
 8005f00:	bd10      	pop	{r4, pc}

08005f02 <__sclose>:
 8005f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f06:	f000 b813 	b.w	8005f30 <_close_r>
	...

08005f0c <_write_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4d07      	ldr	r5, [pc, #28]	; (8005f2c <_write_r+0x20>)
 8005f10:	4604      	mov	r4, r0
 8005f12:	4608      	mov	r0, r1
 8005f14:	4611      	mov	r1, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fe fe30 	bl	8004b80 <_write>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_write_r+0x1e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_write_r+0x1e>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	200002d4 	.word	0x200002d4

08005f30 <_close_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4d06      	ldr	r5, [pc, #24]	; (8005f4c <_close_r+0x1c>)
 8005f34:	2300      	movs	r3, #0
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7ff fa3d 	bl	80053ba <_close>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_close_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_close_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	200002d4 	.word	0x200002d4

08005f50 <_fstat_r>:
 8005f50:	b538      	push	{r3, r4, r5, lr}
 8005f52:	4d07      	ldr	r5, [pc, #28]	; (8005f70 <_fstat_r+0x20>)
 8005f54:	2300      	movs	r3, #0
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	602b      	str	r3, [r5, #0]
 8005f5e:	f7ff fa38 	bl	80053d2 <_fstat>
 8005f62:	1c43      	adds	r3, r0, #1
 8005f64:	d102      	bne.n	8005f6c <_fstat_r+0x1c>
 8005f66:	682b      	ldr	r3, [r5, #0]
 8005f68:	b103      	cbz	r3, 8005f6c <_fstat_r+0x1c>
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	bd38      	pop	{r3, r4, r5, pc}
 8005f6e:	bf00      	nop
 8005f70:	200002d4 	.word	0x200002d4

08005f74 <_isatty_r>:
 8005f74:	b538      	push	{r3, r4, r5, lr}
 8005f76:	4d06      	ldr	r5, [pc, #24]	; (8005f90 <_isatty_r+0x1c>)
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4604      	mov	r4, r0
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	f7ff fa37 	bl	80053f2 <_isatty>
 8005f84:	1c43      	adds	r3, r0, #1
 8005f86:	d102      	bne.n	8005f8e <_isatty_r+0x1a>
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	b103      	cbz	r3, 8005f8e <_isatty_r+0x1a>
 8005f8c:	6023      	str	r3, [r4, #0]
 8005f8e:	bd38      	pop	{r3, r4, r5, pc}
 8005f90:	200002d4 	.word	0x200002d4

08005f94 <_lseek_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	4d07      	ldr	r5, [pc, #28]	; (8005fb4 <_lseek_r+0x20>)
 8005f98:	4604      	mov	r4, r0
 8005f9a:	4608      	mov	r0, r1
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	602a      	str	r2, [r5, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f7ff fa30 	bl	8005408 <_lseek>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_lseek_r+0x1e>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_lseek_r+0x1e>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	200002d4 	.word	0x200002d4

08005fb8 <__malloc_lock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_lock+0x8>)
 8005fba:	f7ff be0b 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200002c8 	.word	0x200002c8

08005fc4 <__malloc_unlock>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	; (8005fcc <__malloc_unlock+0x8>)
 8005fc6:	f7ff be06 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005fca:	bf00      	nop
 8005fcc:	200002c8 	.word	0x200002c8

08005fd0 <_read_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d07      	ldr	r5, [pc, #28]	; (8005ff0 <_read_r+0x20>)
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	4608      	mov	r0, r1
 8005fd8:	4611      	mov	r1, r2
 8005fda:	2200      	movs	r2, #0
 8005fdc:	602a      	str	r2, [r5, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f7ff f9ce 	bl	8005380 <_read>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_read_r+0x1e>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_read_r+0x1e>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	200002d4 	.word	0x200002d4

08005ff4 <_init>:
 8005ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff6:	bf00      	nop
 8005ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ffa:	bc08      	pop	{r3}
 8005ffc:	469e      	mov	lr, r3
 8005ffe:	4770      	bx	lr

08006000 <_fini>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	bf00      	nop
 8006004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006006:	bc08      	pop	{r3}
 8006008:	469e      	mov	lr, r3
 800600a:	4770      	bx	lr
